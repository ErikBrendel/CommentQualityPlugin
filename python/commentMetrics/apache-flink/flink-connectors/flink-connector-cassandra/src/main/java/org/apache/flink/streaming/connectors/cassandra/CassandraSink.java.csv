# id;timestamp;commentText;codeText;commentWords;codeWords
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> setUidHash(String uidHash);1485181339;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public CassandraSink<IN> setUidHash(String uidHash) {_		if (useDataStreamSink) {_			getSinkTransformation().setUidHash(uidHash)__		} else {_			getStreamTransformation().setUidHash(uidHash)__		}_		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,cassandra,sink,in,set,uid,hash,string,uid,hash,if,use,data,stream,sink,get,sink,transformation,set,uid,hash,uid,hash,else,get,stream,transformation,set,uid,hash,uid,hash,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> setUidHash(String uidHash);1495720731;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public CassandraSink<IN> setUidHash(String uidHash) {_		if (useDataStreamSink) {_			getSinkTransformation().setUidHash(uidHash)__		} else {_			getStreamTransformation().setUidHash(uidHash)__		}_		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,cassandra,sink,in,set,uid,hash,string,uid,hash,if,use,data,stream,sink,get,sink,transformation,set,uid,hash,uid,hash,else,get,stream,transformation,set,uid,hash,uid,hash,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> setUidHash(String uidHash);1495923092;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public CassandraSink<IN> setUidHash(String uidHash) {_		if (useDataStreamSink) {_			getSinkTransformation().setUidHash(uidHash)__		} else {_			getStreamTransformation().setUidHash(uidHash)__		}_		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,cassandra,sink,in,set,uid,hash,string,uid,hash,if,use,data,stream,sink,get,sink,transformation,set,uid,hash,uid,hash,else,get,stream,transformation,set,uid,hash,uid,hash,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> setUidHash(String uidHash);1508323860;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public CassandraSink<IN> setUidHash(String uidHash) {_		if (useDataStreamSink) {_			getSinkTransformation().setUidHash(uidHash)__		} else {_			getStreamTransformation().setUidHash(uidHash)__		}_		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,cassandra,sink,in,set,uid,hash,string,uid,hash,if,use,data,stream,sink,get,sink,transformation,set,uid,hash,uid,hash,else,get,stream,transformation,set,uid,hash,uid,hash,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> setUidHash(String uidHash);1508323860;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public CassandraSink<IN> setUidHash(String uidHash) {_		if (useDataStreamSink) {_			getSinkTransformation().setUidHash(uidHash)__		} else {_			getStreamTransformation().setUidHash(uidHash)__		}_		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,cassandra,sink,in,set,uid,hash,string,uid,hash,if,use,data,stream,sink,get,sink,transformation,set,uid,hash,uid,hash,else,get,stream,transformation,set,uid,hash,uid,hash,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> setUidHash(String uidHash);1509544389;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public CassandraSink<IN> setUidHash(String uidHash) {_		if (useDataStreamSink) {_			getSinkTransformation().setUidHash(uidHash)__		} else {_			getStreamTransformation().setUidHash(uidHash)__		}_		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,cassandra,sink,in,set,uid,hash,string,uid,hash,if,use,data,stream,sink,get,sink,transformation,set,uid,hash,uid,hash,else,get,stream,transformation,set,uid,hash,uid,hash,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> setUidHash(String uidHash);1527579230;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public CassandraSink<IN> setUidHash(String uidHash) {_		if (useDataStreamSink) {_			getSinkTransformation().setUidHash(uidHash)__		} else {_			getStreamTransformation().setUidHash(uidHash)__		}_		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,cassandra,sink,in,set,uid,hash,string,uid,hash,if,use,data,stream,sink,get,sink,transformation,set,uid,hash,uid,hash,else,get,stream,transformation,set,uid,hash,uid,hash,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> setUidHash(String uidHash);1539094609;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public CassandraSink<IN> setUidHash(String uidHash) {_		if (useDataStreamSink) {_			getSinkTransformation().setUidHash(uidHash)__		} else {_			getStreamTransformation().setUidHash(uidHash)__		}_		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,cassandra,sink,in,set,uid,hash,string,uid,hash,if,use,data,stream,sink,get,sink,transformation,set,uid,hash,uid,hash,else,get,stream,transformation,set,uid,hash,uid,hash,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> setUidHash(String uidHash);1545299796;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public CassandraSink<IN> setUidHash(String uidHash) {_		if (useDataStreamSink) {_			getSinkTransformation().setUidHash(uidHash)__		} else {_			getStreamTransformation().setUidHash(uidHash)__		}_		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,cassandra,sink,in,set,uid,hash,string,uid,hash,if,use,data,stream,sink,get,sink,transformation,set,uid,hash,uid,hash,else,get,stream,transformation,set,uid,hash,uid,hash,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> uid(String uid);1485181339;Sets an ID for this operator._<p/>_<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint)._<p/>_<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public CassandraSink<IN> uid(String uid) {_		if (useDataStreamSink) {_			getSinkTransformation().setUid(uid)__		} else {_			getStreamTransformation().setUid(uid)__		}_		return this__	};sets,an,id,for,this,operator,p,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,cassandra,sink,in,uid,string,uid,if,use,data,stream,sink,get,sink,transformation,set,uid,uid,else,get,stream,transformation,set,uid,uid,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> uid(String uid);1495720731;Sets an ID for this operator._<p/>_<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint)._<p/>_<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public CassandraSink<IN> uid(String uid) {_		if (useDataStreamSink) {_			getSinkTransformation().setUid(uid)__		} else {_			getStreamTransformation().setUid(uid)__		}_		return this__	};sets,an,id,for,this,operator,p,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,cassandra,sink,in,uid,string,uid,if,use,data,stream,sink,get,sink,transformation,set,uid,uid,else,get,stream,transformation,set,uid,uid,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> uid(String uid);1495923092;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public CassandraSink<IN> uid(String uid) {_		if (useDataStreamSink) {_			getSinkTransformation().setUid(uid)__		} else {_			getStreamTransformation().setUid(uid)__		}_		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,cassandra,sink,in,uid,string,uid,if,use,data,stream,sink,get,sink,transformation,set,uid,uid,else,get,stream,transformation,set,uid,uid,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> uid(String uid);1508323860;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public CassandraSink<IN> uid(String uid) {_		if (useDataStreamSink) {_			getSinkTransformation().setUid(uid)__		} else {_			getStreamTransformation().setUid(uid)__		}_		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,cassandra,sink,in,uid,string,uid,if,use,data,stream,sink,get,sink,transformation,set,uid,uid,else,get,stream,transformation,set,uid,uid,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> uid(String uid);1508323860;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public CassandraSink<IN> uid(String uid) {_		if (useDataStreamSink) {_			getSinkTransformation().setUid(uid)__		} else {_			getStreamTransformation().setUid(uid)__		}_		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,cassandra,sink,in,uid,string,uid,if,use,data,stream,sink,get,sink,transformation,set,uid,uid,else,get,stream,transformation,set,uid,uid,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> uid(String uid);1509544389;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public CassandraSink<IN> uid(String uid) {_		if (useDataStreamSink) {_			getSinkTransformation().setUid(uid)__		} else {_			getStreamTransformation().setUid(uid)__		}_		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,cassandra,sink,in,uid,string,uid,if,use,data,stream,sink,get,sink,transformation,set,uid,uid,else,get,stream,transformation,set,uid,uid,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> uid(String uid);1527579230;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public CassandraSink<IN> uid(String uid) {_		if (useDataStreamSink) {_			getSinkTransformation().setUid(uid)__		} else {_			getStreamTransformation().setUid(uid)__		}_		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,cassandra,sink,in,uid,string,uid,if,use,data,stream,sink,get,sink,transformation,set,uid,uid,else,get,stream,transformation,set,uid,uid,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> uid(String uid);1539094609;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public CassandraSink<IN> uid(String uid) {_		if (useDataStreamSink) {_			getSinkTransformation().setUid(uid)__		} else {_			getStreamTransformation().setUid(uid)__		}_		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,cassandra,sink,in,uid,string,uid,if,use,data,stream,sink,get,sink,transformation,set,uid,uid,else,get,stream,transformation,set,uid,uid,return,this
CassandraSink -> @PublicEvolving 	public CassandraSink<IN> uid(String uid);1545299796;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public CassandraSink<IN> uid(String uid) {_		if (useDataStreamSink) {_			getSinkTransformation().setUid(uid)__		} else {_			getStreamTransformation().setUid(uid)__		}_		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,cassandra,sink,in,uid,string,uid,if,use,data,stream,sink,get,sink,transformation,set,uid,uid,else,get,stream,transformation,set,uid,uid,return,this
CassandraSink -> public CassandraSink<IN> disableChaining();1480685315;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p/>_<p/>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;public CassandraSink<IN> disableChaining() {_		if (useDataStreamSink) {_			getSinkTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		} else {_			getStreamTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		}_		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,cassandra,sink,in,disable,chaining,if,use,data,stream,sink,get,sink,transformation,set,chaining,strategy,chaining,strategy,never,else,get,stream,transformation,set,chaining,strategy,chaining,strategy,never,return,this
CassandraSink -> public CassandraSink<IN> disableChaining();1485181339;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p/>_<p/>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;public CassandraSink<IN> disableChaining() {_		if (useDataStreamSink) {_			getSinkTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		} else {_			getStreamTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		}_		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,cassandra,sink,in,disable,chaining,if,use,data,stream,sink,get,sink,transformation,set,chaining,strategy,chaining,strategy,never,else,get,stream,transformation,set,chaining,strategy,chaining,strategy,never,return,this
CassandraSink -> public CassandraSink<IN> disableChaining();1495720731;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p/>_<p/>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;public CassandraSink<IN> disableChaining() {_		if (useDataStreamSink) {_			getSinkTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		} else {_			getStreamTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		}_		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,cassandra,sink,in,disable,chaining,if,use,data,stream,sink,get,sink,transformation,set,chaining,strategy,chaining,strategy,never,else,get,stream,transformation,set,chaining,strategy,chaining,strategy,never,return,this
CassandraSink -> public CassandraSink<IN> disableChaining();1495923092;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p/>_<p/>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;public CassandraSink<IN> disableChaining() {_		if (useDataStreamSink) {_			getSinkTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		} else {_			getStreamTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		}_		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,cassandra,sink,in,disable,chaining,if,use,data,stream,sink,get,sink,transformation,set,chaining,strategy,chaining,strategy,never,else,get,stream,transformation,set,chaining,strategy,chaining,strategy,never,return,this
CassandraSink -> public CassandraSink<IN> disableChaining();1508323860;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p/>_<p/>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;public CassandraSink<IN> disableChaining() {_		if (useDataStreamSink) {_			getSinkTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		} else {_			getStreamTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		}_		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,cassandra,sink,in,disable,chaining,if,use,data,stream,sink,get,sink,transformation,set,chaining,strategy,chaining,strategy,never,else,get,stream,transformation,set,chaining,strategy,chaining,strategy,never,return,this
CassandraSink -> public CassandraSink<IN> disableChaining();1508323860;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p/>_<p/>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;public CassandraSink<IN> disableChaining() {_		if (useDataStreamSink) {_			getSinkTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		} else {_			getStreamTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		}_		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,cassandra,sink,in,disable,chaining,if,use,data,stream,sink,get,sink,transformation,set,chaining,strategy,chaining,strategy,never,else,get,stream,transformation,set,chaining,strategy,chaining,strategy,never,return,this
CassandraSink -> public CassandraSink<IN> disableChaining();1509544389;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p/>_<p/>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;public CassandraSink<IN> disableChaining() {_		if (useDataStreamSink) {_			getSinkTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		} else {_			getStreamTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		}_		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,cassandra,sink,in,disable,chaining,if,use,data,stream,sink,get,sink,transformation,set,chaining,strategy,chaining,strategy,never,else,get,stream,transformation,set,chaining,strategy,chaining,strategy,never,return,this
CassandraSink -> public CassandraSink<IN> disableChaining();1527579230;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p/>_<p/>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;public CassandraSink<IN> disableChaining() {_		if (useDataStreamSink) {_			getSinkTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		} else {_			getStreamTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		}_		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,cassandra,sink,in,disable,chaining,if,use,data,stream,sink,get,sink,transformation,set,chaining,strategy,chaining,strategy,never,else,get,stream,transformation,set,chaining,strategy,chaining,strategy,never,return,this
CassandraSink -> public CassandraSink<IN> disableChaining();1539094609;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p/>_<p/>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;public CassandraSink<IN> disableChaining() {_		if (useDataStreamSink) {_			getSinkTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		} else {_			getStreamTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		}_		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,cassandra,sink,in,disable,chaining,if,use,data,stream,sink,get,sink,transformation,set,chaining,strategy,chaining,strategy,never,else,get,stream,transformation,set,chaining,strategy,chaining,strategy,never,return,this
CassandraSink -> public CassandraSink<IN> disableChaining();1545299796;Turns off chaining for this operator so thread co-location will not be_used as an optimization._<p/>_<p/>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;public CassandraSink<IN> disableChaining() {_		if (useDataStreamSink) {_			getSinkTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		} else {_			getStreamTransformation().setChainingStrategy(ChainingStrategy.NEVER)__		}_		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,cassandra,sink,in,disable,chaining,if,use,data,stream,sink,get,sink,transformation,set,chaining,strategy,chaining,strategy,never,else,get,stream,transformation,set,chaining,strategy,chaining,strategy,never,return,this
CassandraSink -> public CassandraSink<IN> slotSharingGroup(String slotSharingGroup);1480685315;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible._<p/>_<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified._<p/>_<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;public CassandraSink<IN> slotSharingGroup(String slotSharingGroup) {_		if (useDataStreamSink) {_			getSinkTransformation().setSlotSharingGroup(slotSharingGroup)__		} else {_			getStreamTransformation().setSlotSharingGroup(slotSharingGroup)__		}_		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,cassandra,sink,in,slot,sharing,group,string,slot,sharing,group,if,use,data,stream,sink,get,sink,transformation,set,slot,sharing,group,slot,sharing,group,else,get,stream,transformation,set,slot,sharing,group,slot,sharing,group,return,this
CassandraSink -> public CassandraSink<IN> slotSharingGroup(String slotSharingGroup);1485181339;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible._<p/>_<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified._<p/>_<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;public CassandraSink<IN> slotSharingGroup(String slotSharingGroup) {_		if (useDataStreamSink) {_			getSinkTransformation().setSlotSharingGroup(slotSharingGroup)__		} else {_			getStreamTransformation().setSlotSharingGroup(slotSharingGroup)__		}_		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,cassandra,sink,in,slot,sharing,group,string,slot,sharing,group,if,use,data,stream,sink,get,sink,transformation,set,slot,sharing,group,slot,sharing,group,else,get,stream,transformation,set,slot,sharing,group,slot,sharing,group,return,this
CassandraSink -> public CassandraSink<IN> slotSharingGroup(String slotSharingGroup);1495720731;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible._<p/>_<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified._<p/>_<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;public CassandraSink<IN> slotSharingGroup(String slotSharingGroup) {_		if (useDataStreamSink) {_			getSinkTransformation().setSlotSharingGroup(slotSharingGroup)__		} else {_			getStreamTransformation().setSlotSharingGroup(slotSharingGroup)__		}_		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,cassandra,sink,in,slot,sharing,group,string,slot,sharing,group,if,use,data,stream,sink,get,sink,transformation,set,slot,sharing,group,slot,sharing,group,else,get,stream,transformation,set,slot,sharing,group,slot,sharing,group,return,this
CassandraSink -> public CassandraSink<IN> slotSharingGroup(String slotSharingGroup);1495923092;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;public CassandraSink<IN> slotSharingGroup(String slotSharingGroup) {_		if (useDataStreamSink) {_			getSinkTransformation().setSlotSharingGroup(slotSharingGroup)__		} else {_			getStreamTransformation().setSlotSharingGroup(slotSharingGroup)__		}_		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,cassandra,sink,in,slot,sharing,group,string,slot,sharing,group,if,use,data,stream,sink,get,sink,transformation,set,slot,sharing,group,slot,sharing,group,else,get,stream,transformation,set,slot,sharing,group,slot,sharing,group,return,this
CassandraSink -> public CassandraSink<IN> slotSharingGroup(String slotSharingGroup);1508323860;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;public CassandraSink<IN> slotSharingGroup(String slotSharingGroup) {_		if (useDataStreamSink) {_			getSinkTransformation().setSlotSharingGroup(slotSharingGroup)__		} else {_			getStreamTransformation().setSlotSharingGroup(slotSharingGroup)__		}_		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,cassandra,sink,in,slot,sharing,group,string,slot,sharing,group,if,use,data,stream,sink,get,sink,transformation,set,slot,sharing,group,slot,sharing,group,else,get,stream,transformation,set,slot,sharing,group,slot,sharing,group,return,this
CassandraSink -> public CassandraSink<IN> slotSharingGroup(String slotSharingGroup);1508323860;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;public CassandraSink<IN> slotSharingGroup(String slotSharingGroup) {_		if (useDataStreamSink) {_			getSinkTransformation().setSlotSharingGroup(slotSharingGroup)__		} else {_			getStreamTransformation().setSlotSharingGroup(slotSharingGroup)__		}_		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,cassandra,sink,in,slot,sharing,group,string,slot,sharing,group,if,use,data,stream,sink,get,sink,transformation,set,slot,sharing,group,slot,sharing,group,else,get,stream,transformation,set,slot,sharing,group,slot,sharing,group,return,this
CassandraSink -> public CassandraSink<IN> slotSharingGroup(String slotSharingGroup);1509544389;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;public CassandraSink<IN> slotSharingGroup(String slotSharingGroup) {_		if (useDataStreamSink) {_			getSinkTransformation().setSlotSharingGroup(slotSharingGroup)__		} else {_			getStreamTransformation().setSlotSharingGroup(slotSharingGroup)__		}_		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,cassandra,sink,in,slot,sharing,group,string,slot,sharing,group,if,use,data,stream,sink,get,sink,transformation,set,slot,sharing,group,slot,sharing,group,else,get,stream,transformation,set,slot,sharing,group,slot,sharing,group,return,this
CassandraSink -> public CassandraSink<IN> slotSharingGroup(String slotSharingGroup);1527579230;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;public CassandraSink<IN> slotSharingGroup(String slotSharingGroup) {_		if (useDataStreamSink) {_			getSinkTransformation().setSlotSharingGroup(slotSharingGroup)__		} else {_			getStreamTransformation().setSlotSharingGroup(slotSharingGroup)__		}_		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,cassandra,sink,in,slot,sharing,group,string,slot,sharing,group,if,use,data,stream,sink,get,sink,transformation,set,slot,sharing,group,slot,sharing,group,else,get,stream,transformation,set,slot,sharing,group,slot,sharing,group,return,this
CassandraSink -> public CassandraSink<IN> slotSharingGroup(String slotSharingGroup);1539094609;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;public CassandraSink<IN> slotSharingGroup(String slotSharingGroup) {_		if (useDataStreamSink) {_			getSinkTransformation().setSlotSharingGroup(slotSharingGroup)__		} else {_			getStreamTransformation().setSlotSharingGroup(slotSharingGroup)__		}_		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,cassandra,sink,in,slot,sharing,group,string,slot,sharing,group,if,use,data,stream,sink,get,sink,transformation,set,slot,sharing,group,slot,sharing,group,else,get,stream,transformation,set,slot,sharing,group,slot,sharing,group,return,this
CassandraSink -> public CassandraSink<IN> slotSharingGroup(String slotSharingGroup);1545299796;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;public CassandraSink<IN> slotSharingGroup(String slotSharingGroup) {_		if (useDataStreamSink) {_			getSinkTransformation().setSlotSharingGroup(slotSharingGroup)__		} else {_			getStreamTransformation().setSlotSharingGroup(slotSharingGroup)__		}_		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,cassandra,sink,in,slot,sharing,group,string,slot,sharing,group,if,use,data,stream,sink,get,sink,transformation,set,slot,sharing,group,slot,sharing,group,else,get,stream,transformation,set,slot,sharing,group,slot,sharing,group,return,this
CassandraSink -> public CassandraSink<IN> name(String name);1480685315;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public CassandraSink<IN> name(String name) {_		if (useDataStreamSink) {_			getSinkTransformation().setName(name)__		} else {_			getStreamTransformation().setName(name)__		}_		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,cassandra,sink,in,name,string,name,if,use,data,stream,sink,get,sink,transformation,set,name,name,else,get,stream,transformation,set,name,name,return,this
CassandraSink -> public CassandraSink<IN> name(String name);1485181339;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public CassandraSink<IN> name(String name) {_		if (useDataStreamSink) {_			getSinkTransformation().setName(name)__		} else {_			getStreamTransformation().setName(name)__		}_		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,cassandra,sink,in,name,string,name,if,use,data,stream,sink,get,sink,transformation,set,name,name,else,get,stream,transformation,set,name,name,return,this
CassandraSink -> public CassandraSink<IN> name(String name);1495720731;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public CassandraSink<IN> name(String name) {_		if (useDataStreamSink) {_			getSinkTransformation().setName(name)__		} else {_			getStreamTransformation().setName(name)__		}_		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,cassandra,sink,in,name,string,name,if,use,data,stream,sink,get,sink,transformation,set,name,name,else,get,stream,transformation,set,name,name,return,this
CassandraSink -> public CassandraSink<IN> name(String name);1495923092;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public CassandraSink<IN> name(String name) {_		if (useDataStreamSink) {_			getSinkTransformation().setName(name)__		} else {_			getStreamTransformation().setName(name)__		}_		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,cassandra,sink,in,name,string,name,if,use,data,stream,sink,get,sink,transformation,set,name,name,else,get,stream,transformation,set,name,name,return,this
CassandraSink -> public CassandraSink<IN> name(String name);1508323860;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public CassandraSink<IN> name(String name) {_		if (useDataStreamSink) {_			getSinkTransformation().setName(name)__		} else {_			getStreamTransformation().setName(name)__		}_		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,cassandra,sink,in,name,string,name,if,use,data,stream,sink,get,sink,transformation,set,name,name,else,get,stream,transformation,set,name,name,return,this
CassandraSink -> public CassandraSink<IN> name(String name);1508323860;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public CassandraSink<IN> name(String name) {_		if (useDataStreamSink) {_			getSinkTransformation().setName(name)__		} else {_			getStreamTransformation().setName(name)__		}_		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,cassandra,sink,in,name,string,name,if,use,data,stream,sink,get,sink,transformation,set,name,name,else,get,stream,transformation,set,name,name,return,this
CassandraSink -> public CassandraSink<IN> name(String name);1509544389;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public CassandraSink<IN> name(String name) {_		if (useDataStreamSink) {_			getSinkTransformation().setName(name)__		} else {_			getStreamTransformation().setName(name)__		}_		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,cassandra,sink,in,name,string,name,if,use,data,stream,sink,get,sink,transformation,set,name,name,else,get,stream,transformation,set,name,name,return,this
CassandraSink -> public CassandraSink<IN> name(String name);1527579230;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public CassandraSink<IN> name(String name) {_		if (useDataStreamSink) {_			getSinkTransformation().setName(name)__		} else {_			getStreamTransformation().setName(name)__		}_		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,cassandra,sink,in,name,string,name,if,use,data,stream,sink,get,sink,transformation,set,name,name,else,get,stream,transformation,set,name,name,return,this
CassandraSink -> public CassandraSink<IN> name(String name);1539094609;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public CassandraSink<IN> name(String name) {_		if (useDataStreamSink) {_			getSinkTransformation().setName(name)__		} else {_			getStreamTransformation().setName(name)__		}_		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,cassandra,sink,in,name,string,name,if,use,data,stream,sink,get,sink,transformation,set,name,name,else,get,stream,transformation,set,name,name,return,this
CassandraSink -> public CassandraSink<IN> name(String name);1545299796;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public CassandraSink<IN> name(String name) {_		if (useDataStreamSink) {_			getSinkTransformation().setName(name)__		} else {_			getStreamTransformation().setName(name)__		}_		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,cassandra,sink,in,name,string,name,if,use,data,stream,sink,get,sink,transformation,set,name,name,else,get,stream,transformation,set,name,name,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog();1480685315;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog() {_			this.isWriteAheadLogEnabled = true__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,this,is,write,ahead,log,enabled,true,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog();1485181339;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog() {_			this.isWriteAheadLogEnabled = true__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,this,is,write,ahead,log,enabled,true,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog();1495720731;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog() {_			this.isWriteAheadLogEnabled = true__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,this,is,write,ahead,log,enabled,true,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog();1495923092;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog() {_			this.isWriteAheadLogEnabled = true__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,this,is,write,ahead,log,enabled,true,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog();1508323860;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog() {_			this.isWriteAheadLogEnabled = true__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,this,is,write,ahead,log,enabled,true,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog();1508323860;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog() {_			this.isWriteAheadLogEnabled = true__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,this,is,write,ahead,log,enabled,true,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog();1509544389;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog() {_			this.isWriteAheadLogEnabled = true__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,this,is,write,ahead,log,enabled,true,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog();1527579230;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog() {_			this.isWriteAheadLogEnabled = true__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,this,is,write,ahead,log,enabled,true,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog();1539094609;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog() {_			this.isWriteAheadLogEnabled = true__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,this,is,write,ahead,log,enabled,true,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog();1545299796;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog() {_			this.isWriteAheadLogEnabled = true__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,this,is,write,ahead,log,enabled,true,return,this
CassandraSink -> public CassandraSink<IN> setParallelism(int parallelism);1480685315;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public CassandraSink<IN> setParallelism(int parallelism) {_		if (useDataStreamSink) {_			getSinkTransformation().setParallelism(parallelism)__		} else {_			getStreamTransformation().setParallelism(parallelism)__		}_		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,cassandra,sink,in,set,parallelism,int,parallelism,if,use,data,stream,sink,get,sink,transformation,set,parallelism,parallelism,else,get,stream,transformation,set,parallelism,parallelism,return,this
CassandraSink -> public CassandraSink<IN> setParallelism(int parallelism);1485181339;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public CassandraSink<IN> setParallelism(int parallelism) {_		if (useDataStreamSink) {_			getSinkTransformation().setParallelism(parallelism)__		} else {_			getStreamTransformation().setParallelism(parallelism)__		}_		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,cassandra,sink,in,set,parallelism,int,parallelism,if,use,data,stream,sink,get,sink,transformation,set,parallelism,parallelism,else,get,stream,transformation,set,parallelism,parallelism,return,this
CassandraSink -> public CassandraSink<IN> setParallelism(int parallelism);1495720731;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public CassandraSink<IN> setParallelism(int parallelism) {_		if (useDataStreamSink) {_			getSinkTransformation().setParallelism(parallelism)__		} else {_			getStreamTransformation().setParallelism(parallelism)__		}_		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,cassandra,sink,in,set,parallelism,int,parallelism,if,use,data,stream,sink,get,sink,transformation,set,parallelism,parallelism,else,get,stream,transformation,set,parallelism,parallelism,return,this
CassandraSink -> public CassandraSink<IN> setParallelism(int parallelism);1495923092;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public CassandraSink<IN> setParallelism(int parallelism) {_		if (useDataStreamSink) {_			getSinkTransformation().setParallelism(parallelism)__		} else {_			getStreamTransformation().setParallelism(parallelism)__		}_		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,cassandra,sink,in,set,parallelism,int,parallelism,if,use,data,stream,sink,get,sink,transformation,set,parallelism,parallelism,else,get,stream,transformation,set,parallelism,parallelism,return,this
CassandraSink -> public CassandraSink<IN> setParallelism(int parallelism);1508323860;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public CassandraSink<IN> setParallelism(int parallelism) {_		if (useDataStreamSink) {_			getSinkTransformation().setParallelism(parallelism)__		} else {_			getStreamTransformation().setParallelism(parallelism)__		}_		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,cassandra,sink,in,set,parallelism,int,parallelism,if,use,data,stream,sink,get,sink,transformation,set,parallelism,parallelism,else,get,stream,transformation,set,parallelism,parallelism,return,this
CassandraSink -> public CassandraSink<IN> setParallelism(int parallelism);1508323860;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public CassandraSink<IN> setParallelism(int parallelism) {_		if (useDataStreamSink) {_			getSinkTransformation().setParallelism(parallelism)__		} else {_			getStreamTransformation().setParallelism(parallelism)__		}_		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,cassandra,sink,in,set,parallelism,int,parallelism,if,use,data,stream,sink,get,sink,transformation,set,parallelism,parallelism,else,get,stream,transformation,set,parallelism,parallelism,return,this
CassandraSink -> public CassandraSink<IN> setParallelism(int parallelism);1509544389;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public CassandraSink<IN> setParallelism(int parallelism) {_		if (useDataStreamSink) {_			getSinkTransformation().setParallelism(parallelism)__		} else {_			getStreamTransformation().setParallelism(parallelism)__		}_		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,cassandra,sink,in,set,parallelism,int,parallelism,if,use,data,stream,sink,get,sink,transformation,set,parallelism,parallelism,else,get,stream,transformation,set,parallelism,parallelism,return,this
CassandraSink -> public CassandraSink<IN> setParallelism(int parallelism);1527579230;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public CassandraSink<IN> setParallelism(int parallelism) {_		if (useDataStreamSink) {_			getSinkTransformation().setParallelism(parallelism)__		} else {_			getStreamTransformation().setParallelism(parallelism)__		}_		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,cassandra,sink,in,set,parallelism,int,parallelism,if,use,data,stream,sink,get,sink,transformation,set,parallelism,parallelism,else,get,stream,transformation,set,parallelism,parallelism,return,this
CassandraSink -> public CassandraSink<IN> setParallelism(int parallelism);1539094609;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public CassandraSink<IN> setParallelism(int parallelism) {_		if (useDataStreamSink) {_			getSinkTransformation().setParallelism(parallelism)__		} else {_			getStreamTransformation().setParallelism(parallelism)__		}_		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,cassandra,sink,in,set,parallelism,int,parallelism,if,use,data,stream,sink,get,sink,transformation,set,parallelism,parallelism,else,get,stream,transformation,set,parallelism,parallelism,return,this
CassandraSink -> public CassandraSink<IN> setParallelism(int parallelism);1545299796;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public CassandraSink<IN> setParallelism(int parallelism) {_		if (useDataStreamSink) {_			getSinkTransformation().setParallelism(parallelism)__		} else {_			getStreamTransformation().setParallelism(parallelism)__		}_		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,cassandra,sink,in,set,parallelism,int,parallelism,if,use,data,stream,sink,get,sink,transformation,set,parallelism,parallelism,else,get,stream,transformation,set,parallelism,parallelism,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSink<IN> build() throws Exception;1495720731;Finalizes the configuration of this sink.__@return finalized sink_@throws Exception;public CassandraSink<IN> build() throws Exception {_			sanityCheck()__			return isWriteAheadLogEnabled_				? createWriteAheadSink()_				: createSink()__		};finalizes,the,configuration,of,this,sink,return,finalized,sink,throws,exception;public,cassandra,sink,in,build,throws,exception,sanity,check,return,is,write,ahead,log,enabled,create,write,ahead,sink,create,sink
CassandraSink -> CassandraSinkBuilder -> public CassandraSink<IN> build() throws Exception;1495923092;Finalizes the configuration of this sink.__@return finalized sink_@throws Exception;public CassandraSink<IN> build() throws Exception {_			sanityCheck()__			return isWriteAheadLogEnabled_				? createWriteAheadSink()_				: createSink()__		};finalizes,the,configuration,of,this,sink,return,finalized,sink,throws,exception;public,cassandra,sink,in,build,throws,exception,sanity,check,return,is,write,ahead,log,enabled,create,write,ahead,sink,create,sink
CassandraSink -> CassandraSinkBuilder -> public CassandraSink<IN> build() throws Exception;1508323860;Finalizes the configuration of this sink.__@return finalized sink_@throws Exception;public CassandraSink<IN> build() throws Exception {_			sanityCheck()__			return isWriteAheadLogEnabled_				? createWriteAheadSink()_				: createSink()__		};finalizes,the,configuration,of,this,sink,return,finalized,sink,throws,exception;public,cassandra,sink,in,build,throws,exception,sanity,check,return,is,write,ahead,log,enabled,create,write,ahead,sink,create,sink
CassandraSink -> CassandraSinkBuilder -> public CassandraSink<IN> build() throws Exception;1508323860;Finalizes the configuration of this sink.__@return finalized sink_@throws Exception;public CassandraSink<IN> build() throws Exception {_			sanityCheck()__			return isWriteAheadLogEnabled_				? createWriteAheadSink()_				: createSink()__		};finalizes,the,configuration,of,this,sink,return,finalized,sink,throws,exception;public,cassandra,sink,in,build,throws,exception,sanity,check,return,is,write,ahead,log,enabled,create,write,ahead,sink,create,sink
CassandraSink -> CassandraSinkBuilder -> public CassandraSink<IN> build() throws Exception;1509544389;Finalizes the configuration of this sink.__@return finalized sink_@throws Exception;public CassandraSink<IN> build() throws Exception {_			sanityCheck()__			return isWriteAheadLogEnabled_				? createWriteAheadSink()_				: createSink()__		};finalizes,the,configuration,of,this,sink,return,finalized,sink,throws,exception;public,cassandra,sink,in,build,throws,exception,sanity,check,return,is,write,ahead,log,enabled,create,write,ahead,sink,create,sink
CassandraSink -> CassandraSinkBuilder -> public CassandraSink<IN> build() throws Exception;1527579230;Finalizes the configuration of this sink.__@return finalized sink_@throws Exception;public CassandraSink<IN> build() throws Exception {_			sanityCheck()__			return isWriteAheadLogEnabled_				? createWriteAheadSink()_				: createSink()__		};finalizes,the,configuration,of,this,sink,return,finalized,sink,throws,exception;public,cassandra,sink,in,build,throws,exception,sanity,check,return,is,write,ahead,log,enabled,create,write,ahead,sink,create,sink
CassandraSink -> CassandraSinkBuilder -> public CassandraSink<IN> build() throws Exception;1539094609;Finalizes the configuration of this sink.__@return finalized sink_@throws Exception;public CassandraSink<IN> build() throws Exception {_			sanityCheck()__			if (failureHandler == null) {_				failureHandler = new NoOpCassandraFailureHandler()__			}_			return isWriteAheadLogEnabled_				? createWriteAheadSink()_				: createSink()__		};finalizes,the,configuration,of,this,sink,return,finalized,sink,throws,exception;public,cassandra,sink,in,build,throws,exception,sanity,check,if,failure,handler,null,failure,handler,new,no,op,cassandra,failure,handler,return,is,write,ahead,log,enabled,create,write,ahead,sink,create,sink
CassandraSink -> CassandraSinkBuilder -> public CassandraSink<IN> build() throws Exception;1545299796;Finalizes the configuration of this sink.__@return finalized sink_@throws Exception;public CassandraSink<IN> build() throws Exception {_			sanityCheck()__			if (failureHandler == null) {_				failureHandler = new NoOpCassandraFailureHandler()__			}_			return isWriteAheadLogEnabled_				? createWriteAheadSink()_				: createSink()__		};finalizes,the,configuration,of,this,sink,return,finalized,sink,throws,exception;public,cassandra,sink,in,build,throws,exception,sanity,check,if,failure,handler,null,failure,handler,new,no,op,cassandra,failure,handler,return,is,write,ahead,log,enabled,create,write,ahead,sink,create,sink
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder);1480685315;Sets the ClusterBuilder for this sink. A ClusterBuilder is used to configure the connection to cassandra.__@param builder ClusterBuilder to configure the connection to cassandra_@return this builder;public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = builder__			return this__		};sets,the,cluster,builder,for,this,sink,a,cluster,builder,is,used,to,configure,the,connection,to,cassandra,param,builder,cluster,builder,to,configure,the,connection,to,cassandra,return,this,builder;public,cassandra,sink,builder,in,set,cluster,builder,cluster,builder,builder,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,builder,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder);1485181339;Sets the ClusterBuilder for this sink. A ClusterBuilder is used to configure the connection to cassandra.__@param builder ClusterBuilder to configure the connection to cassandra_@return this builder;public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = builder__			return this__		};sets,the,cluster,builder,for,this,sink,a,cluster,builder,is,used,to,configure,the,connection,to,cassandra,param,builder,cluster,builder,to,configure,the,connection,to,cassandra,return,this,builder;public,cassandra,sink,builder,in,set,cluster,builder,cluster,builder,builder,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,builder,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder);1495720731;Sets the ClusterBuilder for this sink. A ClusterBuilder is used to configure the connection to cassandra.__@param builder ClusterBuilder to configure the connection to cassandra_@return this builder;public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = builder__			return this__		};sets,the,cluster,builder,for,this,sink,a,cluster,builder,is,used,to,configure,the,connection,to,cassandra,param,builder,cluster,builder,to,configure,the,connection,to,cassandra,return,this,builder;public,cassandra,sink,builder,in,set,cluster,builder,cluster,builder,builder,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,builder,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder);1495923092;Sets the ClusterBuilder for this sink. A ClusterBuilder is used to configure the connection to cassandra.__@param builder ClusterBuilder to configure the connection to cassandra_@return this builder;public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = builder__			return this__		};sets,the,cluster,builder,for,this,sink,a,cluster,builder,is,used,to,configure,the,connection,to,cassandra,param,builder,cluster,builder,to,configure,the,connection,to,cassandra,return,this,builder;public,cassandra,sink,builder,in,set,cluster,builder,cluster,builder,builder,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,builder,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder);1508323860;Sets the ClusterBuilder for this sink. A ClusterBuilder is used to configure the connection to cassandra.__@param builder ClusterBuilder to configure the connection to cassandra_@return this builder;public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = builder__			return this__		};sets,the,cluster,builder,for,this,sink,a,cluster,builder,is,used,to,configure,the,connection,to,cassandra,param,builder,cluster,builder,to,configure,the,connection,to,cassandra,return,this,builder;public,cassandra,sink,builder,in,set,cluster,builder,cluster,builder,builder,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,builder,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder);1508323860;Sets the ClusterBuilder for this sink. A ClusterBuilder is used to configure the connection to cassandra.__@param builder ClusterBuilder to configure the connection to cassandra_@return this builder;public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = builder__			return this__		};sets,the,cluster,builder,for,this,sink,a,cluster,builder,is,used,to,configure,the,connection,to,cassandra,param,builder,cluster,builder,to,configure,the,connection,to,cassandra,return,this,builder;public,cassandra,sink,builder,in,set,cluster,builder,cluster,builder,builder,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,builder,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder);1509544389;Sets the ClusterBuilder for this sink. A ClusterBuilder is used to configure the connection to cassandra.__@param builder ClusterBuilder to configure the connection to cassandra_@return this builder;public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = builder__			return this__		};sets,the,cluster,builder,for,this,sink,a,cluster,builder,is,used,to,configure,the,connection,to,cassandra,param,builder,cluster,builder,to,configure,the,connection,to,cassandra,return,this,builder;public,cassandra,sink,builder,in,set,cluster,builder,cluster,builder,builder,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,builder,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder);1527579230;Sets the ClusterBuilder for this sink. A ClusterBuilder is used to configure the connection to cassandra.__@param builder ClusterBuilder to configure the connection to cassandra_@return this builder;public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = builder__			return this__		};sets,the,cluster,builder,for,this,sink,a,cluster,builder,is,used,to,configure,the,connection,to,cassandra,param,builder,cluster,builder,to,configure,the,connection,to,cassandra,return,this,builder;public,cassandra,sink,builder,in,set,cluster,builder,cluster,builder,builder,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,builder,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder);1539094609;Sets the ClusterBuilder for this sink. A ClusterBuilder is used to configure the connection to cassandra.__@param builder ClusterBuilder to configure the connection to cassandra_@return this builder;public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = builder__			return this__		};sets,the,cluster,builder,for,this,sink,a,cluster,builder,is,used,to,configure,the,connection,to,cassandra,param,builder,cluster,builder,to,configure,the,connection,to,cassandra,return,this,builder;public,cassandra,sink,builder,in,set,cluster,builder,cluster,builder,builder,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,builder,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder);1545299796;Sets the ClusterBuilder for this sink. A ClusterBuilder is used to configure the connection to cassandra.__@param builder ClusterBuilder to configure the connection to cassandra_@return this builder;public CassandraSinkBuilder<IN> setClusterBuilder(ClusterBuilder builder) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = builder__			return this__		};sets,the,cluster,builder,for,this,sink,a,cluster,builder,is,used,to,configure,the,connection,to,cassandra,param,builder,cluster,builder,to,configure,the,connection,to,cassandra,return,this,builder;public,cassandra,sink,builder,in,set,cluster,builder,cluster,builder,builder,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,builder,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer);1480685315;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@param committer CheckpointCommitter, that stores informationa bout completed checkpoints in an external_resource. By default this information is stored within a separate table within Cassandra._@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer) {_			this.isWriteAheadLogEnabled = true__			this.committer = committer__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,param,committer,checkpoint,committer,that,stores,informationa,bout,completed,checkpoints,in,an,external,resource,by,default,this,information,is,stored,within,a,separate,table,within,cassandra,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,checkpoint,committer,committer,this,is,write,ahead,log,enabled,true,this,committer,committer,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer);1485181339;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@param committer CheckpointCommitter, that stores informationa bout completed checkpoints in an external_resource. By default this information is stored within a separate table within Cassandra._@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer) {_			this.isWriteAheadLogEnabled = true__			this.committer = committer__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,param,committer,checkpoint,committer,that,stores,informationa,bout,completed,checkpoints,in,an,external,resource,by,default,this,information,is,stored,within,a,separate,table,within,cassandra,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,checkpoint,committer,committer,this,is,write,ahead,log,enabled,true,this,committer,committer,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer);1495720731;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@param committer CheckpointCommitter, that stores informationa bout completed checkpoints in an external_resource. By default this information is stored within a separate table within Cassandra._@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer) {_			this.isWriteAheadLogEnabled = true__			this.committer = committer__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,param,committer,checkpoint,committer,that,stores,informationa,bout,completed,checkpoints,in,an,external,resource,by,default,this,information,is,stored,within,a,separate,table,within,cassandra,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,checkpoint,committer,committer,this,is,write,ahead,log,enabled,true,this,committer,committer,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer);1495923092;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@param committer CheckpointCommitter, that stores informationa bout completed checkpoints in an external_resource. By default this information is stored within a separate table within Cassandra._@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer) {_			this.isWriteAheadLogEnabled = true__			this.committer = committer__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,param,committer,checkpoint,committer,that,stores,informationa,bout,completed,checkpoints,in,an,external,resource,by,default,this,information,is,stored,within,a,separate,table,within,cassandra,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,checkpoint,committer,committer,this,is,write,ahead,log,enabled,true,this,committer,committer,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer);1508323860;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@param committer CheckpointCommitter, that stores information about completed checkpoints in an external_resource. By default this information is stored within a separate table within Cassandra._@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer) {_			this.isWriteAheadLogEnabled = true__			this.committer = committer__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,param,committer,checkpoint,committer,that,stores,information,about,completed,checkpoints,in,an,external,resource,by,default,this,information,is,stored,within,a,separate,table,within,cassandra,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,checkpoint,committer,committer,this,is,write,ahead,log,enabled,true,this,committer,committer,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer);1508323860;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@param committer CheckpointCommitter, that stores information about completed checkpoints in an external_resource. By default this information is stored within a separate table within Cassandra._@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer) {_			this.isWriteAheadLogEnabled = true__			this.committer = committer__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,param,committer,checkpoint,committer,that,stores,information,about,completed,checkpoints,in,an,external,resource,by,default,this,information,is,stored,within,a,separate,table,within,cassandra,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,checkpoint,committer,committer,this,is,write,ahead,log,enabled,true,this,committer,committer,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer);1509544389;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@param committer CheckpointCommitter, that stores information about completed checkpoints in an external_resource. By default this information is stored within a separate table within Cassandra._@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer) {_			this.isWriteAheadLogEnabled = true__			this.committer = committer__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,param,committer,checkpoint,committer,that,stores,information,about,completed,checkpoints,in,an,external,resource,by,default,this,information,is,stored,within,a,separate,table,within,cassandra,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,checkpoint,committer,committer,this,is,write,ahead,log,enabled,true,this,committer,committer,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer);1527579230;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@param committer CheckpointCommitter, that stores information about completed checkpoints in an external_resource. By default this information is stored within a separate table within Cassandra._@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer) {_			this.isWriteAheadLogEnabled = true__			this.committer = committer__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,param,committer,checkpoint,committer,that,stores,information,about,completed,checkpoints,in,an,external,resource,by,default,this,information,is,stored,within,a,separate,table,within,cassandra,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,checkpoint,committer,committer,this,is,write,ahead,log,enabled,true,this,committer,committer,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer);1539094609;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@param committer CheckpointCommitter, that stores information about completed checkpoints in an external_resource. By default this information is stored within a separate table within Cassandra._@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer) {_			this.isWriteAheadLogEnabled = true__			this.committer = committer__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,param,committer,checkpoint,committer,that,stores,information,about,completed,checkpoints,in,an,external,resource,by,default,this,information,is,stored,within,a,separate,table,within,cassandra,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,checkpoint,committer,committer,this,is,write,ahead,log,enabled,true,this,committer,committer,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer);1545299796;Enables the write-ahead log, which allows exactly-once processing for non-deterministic algorithms that use_idempotent updates.__@param committer CheckpointCommitter, that stores information about completed checkpoints in an external_resource. By default this information is stored within a separate table within Cassandra._@return this builder;public CassandraSinkBuilder<IN> enableWriteAheadLog(CheckpointCommitter committer) {_			this.isWriteAheadLogEnabled = true__			this.committer = committer__			return this__		};enables,the,write,ahead,log,which,allows,exactly,once,processing,for,non,deterministic,algorithms,that,use,idempotent,updates,param,committer,checkpoint,committer,that,stores,information,about,completed,checkpoints,in,an,external,resource,by,default,this,information,is,stored,within,a,separate,table,within,cassandra,return,this,builder;public,cassandra,sink,builder,in,enable,write,ahead,log,checkpoint,committer,committer,this,is,write,ahead,log,enabled,true,this,committer,committer,return,this
CassandraSink -> public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input);1495720731;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input) {_		return addSink(input.javaStream())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,cassandra,sink,builder,in,add,sink,org,apache,flink,streaming,api,scala,data,stream,in,input,return,add,sink,input,java,stream
CassandraSink -> public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input);1495923092;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input) {_		return addSink(input.javaStream())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,cassandra,sink,builder,in,add,sink,org,apache,flink,streaming,api,scala,data,stream,in,input,return,add,sink,input,java,stream
CassandraSink -> public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input);1508323860;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input) {_		return addSink(input.javaStream())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,cassandra,sink,builder,in,add,sink,org,apache,flink,streaming,api,scala,data,stream,in,input,return,add,sink,input,java,stream
CassandraSink -> public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input);1508323860;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input) {_		return addSink(input.javaStream())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,cassandra,sink,builder,in,add,sink,org,apache,flink,streaming,api,scala,data,stream,in,input,return,add,sink,input,java,stream
CassandraSink -> public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input);1509544389;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input) {_		return addSink(input.javaStream())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,cassandra,sink,builder,in,add,sink,org,apache,flink,streaming,api,scala,data,stream,in,input,return,add,sink,input,java,stream
CassandraSink -> public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input);1527579230;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input) {_		return addSink(input.javaStream())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,cassandra,sink,builder,in,add,sink,org,apache,flink,streaming,api,scala,data,stream,in,input,return,add,sink,input,java,stream
CassandraSink -> public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input);1539094609;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input) {_		return addSink(input.javaStream())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,cassandra,sink,builder,in,add,sink,org,apache,flink,streaming,api,scala,data,stream,in,input,return,add,sink,input,java,stream
CassandraSink -> public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input);1545299796;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN> CassandraSinkBuilder<IN> addSink(org.apache.flink.streaming.api.scala.DataStream<IN> input) {_		return addSink(input.javaStream())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,cassandra,sink,builder,in,add,sink,org,apache,flink,streaming,api,scala,data,stream,in,input,return,add,sink,input,java,stream
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setMapperOptions(MapperOptions options);1508323860;Sets the mapper options for this sink. The mapper options are used to configure the DataStax_{@link com.datastax.driver.mapping.Mapper} when writing POJOs.__<p>This call has no effect if the input {@link DataStream} for this sink does not contain POJOs.__@param options MapperOptions, that return an array of options that are used to configure the DataStax mapper.__@return this builder;public CassandraSinkBuilder<IN> setMapperOptions(MapperOptions options) {_			this.mapperOptions = options__			return this__		};sets,the,mapper,options,for,this,sink,the,mapper,options,are,used,to,configure,the,data,stax,link,com,datastax,driver,mapping,mapper,when,writing,pojos,p,this,call,has,no,effect,if,the,input,link,data,stream,for,this,sink,does,not,contain,pojos,param,options,mapper,options,that,return,an,array,of,options,that,are,used,to,configure,the,data,stax,mapper,return,this,builder;public,cassandra,sink,builder,in,set,mapper,options,mapper,options,options,this,mapper,options,options,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setMapperOptions(MapperOptions options);1509544389;Sets the mapper options for this sink. The mapper options are used to configure the DataStax_{@link com.datastax.driver.mapping.Mapper} when writing POJOs.__<p>This call has no effect if the input {@link DataStream} for this sink does not contain POJOs.__@param options MapperOptions, that return an array of options that are used to configure the DataStax mapper.__@return this builder;public CassandraSinkBuilder<IN> setMapperOptions(MapperOptions options) {_			this.mapperOptions = options__			return this__		};sets,the,mapper,options,for,this,sink,the,mapper,options,are,used,to,configure,the,data,stax,link,com,datastax,driver,mapping,mapper,when,writing,pojos,p,this,call,has,no,effect,if,the,input,link,data,stream,for,this,sink,does,not,contain,pojos,param,options,mapper,options,that,return,an,array,of,options,that,are,used,to,configure,the,data,stax,mapper,return,this,builder;public,cassandra,sink,builder,in,set,mapper,options,mapper,options,options,this,mapper,options,options,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setMapperOptions(MapperOptions options);1527579230;Sets the mapper options for this sink. The mapper options are used to configure the DataStax_{@link com.datastax.driver.mapping.Mapper} when writing POJOs.__<p>This call has no effect if the input {@link DataStream} for this sink does not contain POJOs.__@param options MapperOptions, that return an array of options that are used to configure the DataStax mapper.__@return this builder;public CassandraSinkBuilder<IN> setMapperOptions(MapperOptions options) {_			this.mapperOptions = options__			return this__		};sets,the,mapper,options,for,this,sink,the,mapper,options,are,used,to,configure,the,data,stax,link,com,datastax,driver,mapping,mapper,when,writing,pojos,p,this,call,has,no,effect,if,the,input,link,data,stream,for,this,sink,does,not,contain,pojos,param,options,mapper,options,that,return,an,array,of,options,that,are,used,to,configure,the,data,stax,mapper,return,this,builder;public,cassandra,sink,builder,in,set,mapper,options,mapper,options,options,this,mapper,options,options,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setMapperOptions(MapperOptions options);1539094609;Sets the mapper options for this sink. The mapper options are used to configure the DataStax_{@link com.datastax.driver.mapping.Mapper} when writing POJOs.__<p>This call has no effect if the input {@link DataStream} for this sink does not contain POJOs.__@param options MapperOptions, that return an array of options that are used to configure the DataStax mapper.__@return this builder;public CassandraSinkBuilder<IN> setMapperOptions(MapperOptions options) {_			this.mapperOptions = options__			return this__		};sets,the,mapper,options,for,this,sink,the,mapper,options,are,used,to,configure,the,data,stax,link,com,datastax,driver,mapping,mapper,when,writing,pojos,p,this,call,has,no,effect,if,the,input,link,data,stream,for,this,sink,does,not,contain,pojos,param,options,mapper,options,that,return,an,array,of,options,that,are,used,to,configure,the,data,stax,mapper,return,this,builder;public,cassandra,sink,builder,in,set,mapper,options,mapper,options,options,this,mapper,options,options,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setMapperOptions(MapperOptions options);1545299796;Sets the mapper options for this sink. The mapper options are used to configure the DataStax_{@link com.datastax.driver.mapping.Mapper} when writing POJOs.__<p>This call has no effect if the input {@link DataStream} for this sink does not contain POJOs.__@param options MapperOptions, that return an array of options that are used to configure the DataStax mapper.__@return this builder;public CassandraSinkBuilder<IN> setMapperOptions(MapperOptions options) {_			this.mapperOptions = options__			return this__		};sets,the,mapper,options,for,this,sink,the,mapper,options,are,used,to,configure,the,data,stax,link,com,datastax,driver,mapping,mapper,when,writing,pojos,p,this,call,has,no,effect,if,the,input,link,data,stream,for,this,sink,does,not,contain,pojos,param,options,mapper,options,that,return,an,array,of,options,that,are,used,to,configure,the,data,stax,mapper,return,this,builder;public,cassandra,sink,builder,in,set,mapper,options,mapper,options,options,this,mapper,options,options,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(String host);1480685315;Sets the cassandra host to connect to.__@param host host to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(String host) {_			return setHost(host, 9042)__		};sets,the,cassandra,host,to,connect,to,param,host,host,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,string,host,return,set,host,host,9042
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(String host);1485181339;Sets the cassandra host to connect to.__@param host host to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(String host) {_			return setHost(host, 9042)__		};sets,the,cassandra,host,to,connect,to,param,host,host,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,string,host,return,set,host,host,9042
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(String host);1495720731;Sets the cassandra host to connect to.__@param host host to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(String host) {_			return setHost(host, 9042)__		};sets,the,cassandra,host,to,connect,to,param,host,host,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,string,host,return,set,host,host,9042
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(String host);1495923092;Sets the cassandra host to connect to.__@param host host to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(String host) {_			return setHost(host, 9042)__		};sets,the,cassandra,host,to,connect,to,param,host,host,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,string,host,return,set,host,host,9042
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(String host);1508323860;Sets the cassandra host to connect to.__@param host host to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(String host) {_			return setHost(host, 9042)__		};sets,the,cassandra,host,to,connect,to,param,host,host,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,string,host,return,set,host,host,9042
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(String host);1508323860;Sets the cassandra host to connect to.__@param host host to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(String host) {_			return setHost(host, 9042)__		};sets,the,cassandra,host,to,connect,to,param,host,host,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,string,host,return,set,host,host,9042
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(String host);1509544389;Sets the cassandra host to connect to.__@param host host to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(String host) {_			return setHost(host, 9042)__		};sets,the,cassandra,host,to,connect,to,param,host,host,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,string,host,return,set,host,host,9042
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(String host);1527579230;Sets the cassandra host to connect to.__@param host host to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(String host) {_			return setHost(host, 9042)__		};sets,the,cassandra,host,to,connect,to,param,host,host,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,string,host,return,set,host,host,9042
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(String host);1539094609;Sets the cassandra host to connect to.__@param host host to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(String host) {_			return setHost(host, 9042)__		};sets,the,cassandra,host,to,connect,to,param,host,host,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,string,host,return,set,host,host,9042
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(String host);1545299796;Sets the cassandra host to connect to.__@param host host to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(String host) {_			return setHost(host, 9042)__		};sets,the,cassandra,host,to,connect,to,param,host,host,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,string,host,return,set,host,host,9042
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setQuery(String query);1480685315;Sets the query that is to be executed for every record.__@param query query to use_@return this builder;public CassandraSinkBuilder<IN> setQuery(String query) {_			this.query = query__			return this__		};sets,the,query,that,is,to,be,executed,for,every,record,param,query,query,to,use,return,this,builder;public,cassandra,sink,builder,in,set,query,string,query,this,query,query,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setQuery(String query);1485181339;Sets the query that is to be executed for every record.__@param query query to use_@return this builder;public CassandraSinkBuilder<IN> setQuery(String query) {_			this.query = query__			return this__		};sets,the,query,that,is,to,be,executed,for,every,record,param,query,query,to,use,return,this,builder;public,cassandra,sink,builder,in,set,query,string,query,this,query,query,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setQuery(String query);1495720731;Sets the query that is to be executed for every record.__@param query query to use_@return this builder;public CassandraSinkBuilder<IN> setQuery(String query) {_			this.query = query__			return this__		};sets,the,query,that,is,to,be,executed,for,every,record,param,query,query,to,use,return,this,builder;public,cassandra,sink,builder,in,set,query,string,query,this,query,query,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setQuery(String query);1495923092;Sets the query that is to be executed for every record.__@param query query to use_@return this builder;public CassandraSinkBuilder<IN> setQuery(String query) {_			this.query = query__			return this__		};sets,the,query,that,is,to,be,executed,for,every,record,param,query,query,to,use,return,this,builder;public,cassandra,sink,builder,in,set,query,string,query,this,query,query,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setQuery(String query);1508323860;Sets the query that is to be executed for every record.__@param query query to use_@return this builder;public CassandraSinkBuilder<IN> setQuery(String query) {_			this.query = query__			return this__		};sets,the,query,that,is,to,be,executed,for,every,record,param,query,query,to,use,return,this,builder;public,cassandra,sink,builder,in,set,query,string,query,this,query,query,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setQuery(String query);1508323860;Sets the query that is to be executed for every record.__@param query query to use_@return this builder;public CassandraSinkBuilder<IN> setQuery(String query) {_			this.query = query__			return this__		};sets,the,query,that,is,to,be,executed,for,every,record,param,query,query,to,use,return,this,builder;public,cassandra,sink,builder,in,set,query,string,query,this,query,query,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setQuery(String query);1509544389;Sets the query that is to be executed for every record.__@param query query to use_@return this builder;public CassandraSinkBuilder<IN> setQuery(String query) {_			this.query = query__			return this__		};sets,the,query,that,is,to,be,executed,for,every,record,param,query,query,to,use,return,this,builder;public,cassandra,sink,builder,in,set,query,string,query,this,query,query,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setQuery(String query);1527579230;Sets the query that is to be executed for every record.__@param query query to use_@return this builder;public CassandraSinkBuilder<IN> setQuery(String query) {_			this.query = query__			return this__		};sets,the,query,that,is,to,be,executed,for,every,record,param,query,query,to,use,return,this,builder;public,cassandra,sink,builder,in,set,query,string,query,this,query,query,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setQuery(String query);1539094609;Sets the query that is to be executed for every record.__@param query query to use_@return this builder;public CassandraSinkBuilder<IN> setQuery(String query) {_			this.query = query__			return this__		};sets,the,query,that,is,to,be,executed,for,every,record,param,query,query,to,use,return,this,builder;public,cassandra,sink,builder,in,set,query,string,query,this,query,query,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setQuery(String query);1545299796;Sets the query that is to be executed for every record.__@param query query to use_@return this builder;public CassandraSinkBuilder<IN> setQuery(String query) {_			this.query = query__			return this__		};sets,the,query,that,is,to,be,executed,for,every,record,param,query,query,to,use,return,this,builder;public,cassandra,sink,builder,in,set,query,string,query,this,query,query,return,this
CassandraSink -> public static <IN> CassandraSinkBuilder<IN> addSink(DataStream<IN> input);1509544389;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN> CassandraSinkBuilder<IN> addSink(DataStream<IN> input) {_		TypeInformation<IN> typeInfo = input.getType()__		if (typeInfo instanceof TupleTypeInfo) {_			DataStream<Tuple> tupleInput = (DataStream<Tuple>) input__			return (CassandraSinkBuilder<IN>) new CassandraTupleSinkBuilder<>(tupleInput, tupleInput.getType(), tupleInput.getType().createSerializer(tupleInput.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof RowTypeInfo) {_			DataStream<Row> rowInput = (DataStream<Row>) input__			return (CassandraSinkBuilder<IN>) new CassandraRowSinkBuilder(rowInput, rowInput.getType(), rowInput.getType().createSerializer(rowInput.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof PojoTypeInfo) {_			return new CassandraPojoSinkBuilder<>(input, input.getType(), input.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof CaseClassTypeInfo) {_			DataStream<Product> productInput = (DataStream<Product>) input__			return (CassandraSinkBuilder<IN>) new CassandraScalaProductSinkBuilder<>(productInput, productInput.getType(), productInput.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		throw new IllegalArgumentException("No support for the type of the given DataStream: " + input.getType())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,cassandra,sink,builder,in,add,sink,data,stream,in,input,type,information,in,type,info,input,get,type,if,type,info,instanceof,tuple,type,info,data,stream,tuple,tuple,input,data,stream,tuple,input,return,cassandra,sink,builder,in,new,cassandra,tuple,sink,builder,tuple,input,tuple,input,get,type,tuple,input,get,type,create,serializer,tuple,input,get,execution,environment,get,config,if,type,info,instanceof,row,type,info,data,stream,row,row,input,data,stream,row,input,return,cassandra,sink,builder,in,new,cassandra,row,sink,builder,row,input,row,input,get,type,row,input,get,type,create,serializer,row,input,get,execution,environment,get,config,if,type,info,instanceof,pojo,type,info,return,new,cassandra,pojo,sink,builder,input,input,get,type,input,get,type,create,serializer,input,get,execution,environment,get,config,if,type,info,instanceof,case,class,type,info,data,stream,product,product,input,data,stream,product,input,return,cassandra,sink,builder,in,new,cassandra,scala,product,sink,builder,product,input,product,input,get,type,product,input,get,type,create,serializer,input,get,execution,environment,get,config,throw,new,illegal,argument,exception,no,support,for,the,type,of,the,given,data,stream,input,get,type
CassandraSink -> public static <IN> CassandraSinkBuilder<IN> addSink(DataStream<IN> input);1527579230;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN> CassandraSinkBuilder<IN> addSink(DataStream<IN> input) {_		TypeInformation<IN> typeInfo = input.getType()__		if (typeInfo instanceof TupleTypeInfo) {_			DataStream<Tuple> tupleInput = (DataStream<Tuple>) input__			return (CassandraSinkBuilder<IN>) new CassandraTupleSinkBuilder<>(tupleInput, tupleInput.getType(), tupleInput.getType().createSerializer(tupleInput.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof RowTypeInfo) {_			DataStream<Row> rowInput = (DataStream<Row>) input__			return (CassandraSinkBuilder<IN>) new CassandraRowSinkBuilder(rowInput, rowInput.getType(), rowInput.getType().createSerializer(rowInput.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof PojoTypeInfo) {_			return new CassandraPojoSinkBuilder<>(input, input.getType(), input.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof CaseClassTypeInfo) {_			DataStream<Product> productInput = (DataStream<Product>) input__			return (CassandraSinkBuilder<IN>) new CassandraScalaProductSinkBuilder<>(productInput, productInput.getType(), productInput.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		throw new IllegalArgumentException("No support for the type of the given DataStream: " + input.getType())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,cassandra,sink,builder,in,add,sink,data,stream,in,input,type,information,in,type,info,input,get,type,if,type,info,instanceof,tuple,type,info,data,stream,tuple,tuple,input,data,stream,tuple,input,return,cassandra,sink,builder,in,new,cassandra,tuple,sink,builder,tuple,input,tuple,input,get,type,tuple,input,get,type,create,serializer,tuple,input,get,execution,environment,get,config,if,type,info,instanceof,row,type,info,data,stream,row,row,input,data,stream,row,input,return,cassandra,sink,builder,in,new,cassandra,row,sink,builder,row,input,row,input,get,type,row,input,get,type,create,serializer,row,input,get,execution,environment,get,config,if,type,info,instanceof,pojo,type,info,return,new,cassandra,pojo,sink,builder,input,input,get,type,input,get,type,create,serializer,input,get,execution,environment,get,config,if,type,info,instanceof,case,class,type,info,data,stream,product,product,input,data,stream,product,input,return,cassandra,sink,builder,in,new,cassandra,scala,product,sink,builder,product,input,product,input,get,type,product,input,get,type,create,serializer,input,get,execution,environment,get,config,throw,new,illegal,argument,exception,no,support,for,the,type,of,the,given,data,stream,input,get,type
CassandraSink -> public static <IN> CassandraSinkBuilder<IN> addSink(DataStream<IN> input);1539094609;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN> CassandraSinkBuilder<IN> addSink(DataStream<IN> input) {_		TypeInformation<IN> typeInfo = input.getType()__		if (typeInfo instanceof TupleTypeInfo) {_			DataStream<Tuple> tupleInput = (DataStream<Tuple>) input__			return (CassandraSinkBuilder<IN>) new CassandraTupleSinkBuilder<>(tupleInput, tupleInput.getType(), tupleInput.getType().createSerializer(tupleInput.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof RowTypeInfo) {_			DataStream<Row> rowInput = (DataStream<Row>) input__			return (CassandraSinkBuilder<IN>) new CassandraRowSinkBuilder(rowInput, rowInput.getType(), rowInput.getType().createSerializer(rowInput.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof PojoTypeInfo) {_			return new CassandraPojoSinkBuilder<>(input, input.getType(), input.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof CaseClassTypeInfo) {_			DataStream<Product> productInput = (DataStream<Product>) input__			return (CassandraSinkBuilder<IN>) new CassandraScalaProductSinkBuilder<>(productInput, productInput.getType(), productInput.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		throw new IllegalArgumentException("No support for the type of the given DataStream: " + input.getType())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,cassandra,sink,builder,in,add,sink,data,stream,in,input,type,information,in,type,info,input,get,type,if,type,info,instanceof,tuple,type,info,data,stream,tuple,tuple,input,data,stream,tuple,input,return,cassandra,sink,builder,in,new,cassandra,tuple,sink,builder,tuple,input,tuple,input,get,type,tuple,input,get,type,create,serializer,tuple,input,get,execution,environment,get,config,if,type,info,instanceof,row,type,info,data,stream,row,row,input,data,stream,row,input,return,cassandra,sink,builder,in,new,cassandra,row,sink,builder,row,input,row,input,get,type,row,input,get,type,create,serializer,row,input,get,execution,environment,get,config,if,type,info,instanceof,pojo,type,info,return,new,cassandra,pojo,sink,builder,input,input,get,type,input,get,type,create,serializer,input,get,execution,environment,get,config,if,type,info,instanceof,case,class,type,info,data,stream,product,product,input,data,stream,product,input,return,cassandra,sink,builder,in,new,cassandra,scala,product,sink,builder,product,input,product,input,get,type,product,input,get,type,create,serializer,input,get,execution,environment,get,config,throw,new,illegal,argument,exception,no,support,for,the,type,of,the,given,data,stream,input,get,type
CassandraSink -> public static <IN> CassandraSinkBuilder<IN> addSink(DataStream<IN> input);1545299796;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN> CassandraSinkBuilder<IN> addSink(DataStream<IN> input) {_		TypeInformation<IN> typeInfo = input.getType()__		if (typeInfo instanceof TupleTypeInfo) {_			DataStream<Tuple> tupleInput = (DataStream<Tuple>) input__			return (CassandraSinkBuilder<IN>) new CassandraTupleSinkBuilder<>(tupleInput, tupleInput.getType(), tupleInput.getType().createSerializer(tupleInput.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof RowTypeInfo) {_			DataStream<Row> rowInput = (DataStream<Row>) input__			return (CassandraSinkBuilder<IN>) new CassandraRowSinkBuilder(rowInput, rowInput.getType(), rowInput.getType().createSerializer(rowInput.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof PojoTypeInfo) {_			return new CassandraPojoSinkBuilder<>(input, input.getType(), input.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof CaseClassTypeInfo) {_			DataStream<Product> productInput = (DataStream<Product>) input__			return (CassandraSinkBuilder<IN>) new CassandraScalaProductSinkBuilder<>(productInput, productInput.getType(), productInput.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		throw new IllegalArgumentException("No support for the type of the given DataStream: " + input.getType())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,cassandra,sink,builder,in,add,sink,data,stream,in,input,type,information,in,type,info,input,get,type,if,type,info,instanceof,tuple,type,info,data,stream,tuple,tuple,input,data,stream,tuple,input,return,cassandra,sink,builder,in,new,cassandra,tuple,sink,builder,tuple,input,tuple,input,get,type,tuple,input,get,type,create,serializer,tuple,input,get,execution,environment,get,config,if,type,info,instanceof,row,type,info,data,stream,row,row,input,data,stream,row,input,return,cassandra,sink,builder,in,new,cassandra,row,sink,builder,row,input,row,input,get,type,row,input,get,type,create,serializer,row,input,get,execution,environment,get,config,if,type,info,instanceof,pojo,type,info,return,new,cassandra,pojo,sink,builder,input,input,get,type,input,get,type,create,serializer,input,get,execution,environment,get,config,if,type,info,instanceof,case,class,type,info,data,stream,product,product,input,data,stream,product,input,return,cassandra,sink,builder,in,new,cassandra,scala,product,sink,builder,product,input,product,input,get,type,product,input,get,type,create,serializer,input,get,execution,environment,get,config,throw,new,illegal,argument,exception,no,support,for,the,type,of,the,given,data,stream,input,get,type
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(final String host, final int port);1480685315;Sets the cassandra host/port to connect to.__@param host host to connect to_@param port port to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(final String host, final int port) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = new ClusterBuilder() {_				@Override_				protected Cluster buildCluster(Cluster.Builder builder) {_					return builder.addContactPoint(host).withPort(port).build()__				}_			}__			return this__		};sets,the,cassandra,host,port,to,connect,to,param,host,host,to,connect,to,param,port,port,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,final,string,host,final,int,port,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,new,cluster,builder,override,protected,cluster,build,cluster,cluster,builder,builder,return,builder,add,contact,point,host,with,port,port,build,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(final String host, final int port);1485181339;Sets the cassandra host/port to connect to.__@param host host to connect to_@param port port to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(final String host, final int port) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = new ClusterBuilder() {_				@Override_				protected Cluster buildCluster(Cluster.Builder builder) {_					return builder.addContactPoint(host).withPort(port).build()__				}_			}__			return this__		};sets,the,cassandra,host,port,to,connect,to,param,host,host,to,connect,to,param,port,port,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,final,string,host,final,int,port,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,new,cluster,builder,override,protected,cluster,build,cluster,cluster,builder,builder,return,builder,add,contact,point,host,with,port,port,build,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(final String host, final int port);1495720731;Sets the cassandra host/port to connect to.__@param host host to connect to_@param port port to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(final String host, final int port) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = new ClusterBuilder() {_				@Override_				protected Cluster buildCluster(Cluster.Builder builder) {_					return builder.addContactPoint(host).withPort(port).build()__				}_			}__			return this__		};sets,the,cassandra,host,port,to,connect,to,param,host,host,to,connect,to,param,port,port,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,final,string,host,final,int,port,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,new,cluster,builder,override,protected,cluster,build,cluster,cluster,builder,builder,return,builder,add,contact,point,host,with,port,port,build,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(final String host, final int port);1495923092;Sets the cassandra host/port to connect to.__@param host host to connect to_@param port port to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(final String host, final int port) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = new ClusterBuilder() {_				@Override_				protected Cluster buildCluster(Cluster.Builder builder) {_					return builder.addContactPoint(host).withPort(port).build()__				}_			}__			return this__		};sets,the,cassandra,host,port,to,connect,to,param,host,host,to,connect,to,param,port,port,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,final,string,host,final,int,port,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,new,cluster,builder,override,protected,cluster,build,cluster,cluster,builder,builder,return,builder,add,contact,point,host,with,port,port,build,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(final String host, final int port);1508323860;Sets the cassandra host/port to connect to.__@param host host to connect to_@param port port to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(final String host, final int port) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = new ClusterBuilder() {_				@Override_				protected Cluster buildCluster(Cluster.Builder builder) {_					return builder.addContactPoint(host).withPort(port).build()__				}_			}__			return this__		};sets,the,cassandra,host,port,to,connect,to,param,host,host,to,connect,to,param,port,port,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,final,string,host,final,int,port,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,new,cluster,builder,override,protected,cluster,build,cluster,cluster,builder,builder,return,builder,add,contact,point,host,with,port,port,build,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(final String host, final int port);1508323860;Sets the cassandra host/port to connect to.__@param host host to connect to_@param port port to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(final String host, final int port) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = new ClusterBuilder() {_				@Override_				protected Cluster buildCluster(Cluster.Builder builder) {_					return builder.addContactPoint(host).withPort(port).build()__				}_			}__			return this__		};sets,the,cassandra,host,port,to,connect,to,param,host,host,to,connect,to,param,port,port,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,final,string,host,final,int,port,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,new,cluster,builder,override,protected,cluster,build,cluster,cluster,builder,builder,return,builder,add,contact,point,host,with,port,port,build,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(final String host, final int port);1509544389;Sets the cassandra host/port to connect to.__@param host host to connect to_@param port port to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(final String host, final int port) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = new ClusterBuilder() {_				@Override_				protected Cluster buildCluster(Cluster.Builder builder) {_					return builder.addContactPoint(host).withPort(port).build()__				}_			}__			return this__		};sets,the,cassandra,host,port,to,connect,to,param,host,host,to,connect,to,param,port,port,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,final,string,host,final,int,port,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,new,cluster,builder,override,protected,cluster,build,cluster,cluster,builder,builder,return,builder,add,contact,point,host,with,port,port,build,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(final String host, final int port);1527579230;Sets the cassandra host/port to connect to.__@param host host to connect to_@param port port to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(final String host, final int port) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = new ClusterBuilder() {_				@Override_				protected Cluster buildCluster(Cluster.Builder builder) {_					return builder.addContactPoint(host).withPort(port).build()__				}_			}__			return this__		};sets,the,cassandra,host,port,to,connect,to,param,host,host,to,connect,to,param,port,port,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,final,string,host,final,int,port,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,new,cluster,builder,override,protected,cluster,build,cluster,cluster,builder,builder,return,builder,add,contact,point,host,with,port,port,build,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(final String host, final int port);1539094609;Sets the cassandra host/port to connect to.__@param host host to connect to_@param port port to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(final String host, final int port) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = new ClusterBuilder() {_				@Override_				protected Cluster buildCluster(Cluster.Builder builder) {_					return builder.addContactPoint(host).withPort(port).build()__				}_			}__			return this__		};sets,the,cassandra,host,port,to,connect,to,param,host,host,to,connect,to,param,port,port,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,final,string,host,final,int,port,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,new,cluster,builder,override,protected,cluster,build,cluster,cluster,builder,builder,return,builder,add,contact,point,host,with,port,port,build,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setHost(final String host, final int port);1545299796;Sets the cassandra host/port to connect to.__@param host host to connect to_@param port port to connect to_@return this builder;public CassandraSinkBuilder<IN> setHost(final String host, final int port) {_			if (this.builder != null) {_				throw new IllegalArgumentException("Builder was already set. You must use either setHost() or setClusterBuilder().")__			}_			this.builder = new ClusterBuilder() {_				@Override_				protected Cluster buildCluster(Cluster.Builder builder) {_					return builder.addContactPoint(host).withPort(port).build()__				}_			}__			return this__		};sets,the,cassandra,host,port,to,connect,to,param,host,host,to,connect,to,param,port,port,to,connect,to,return,this,builder;public,cassandra,sink,builder,in,set,host,final,string,host,final,int,port,if,this,builder,null,throw,new,illegal,argument,exception,builder,was,already,set,you,must,use,either,set,host,or,set,cluster,builder,this,builder,new,cluster,builder,override,protected,cluster,build,cluster,cluster,builder,builder,return,builder,add,contact,point,host,with,port,port,build,return,this
CassandraSink -> CassandraSinkBuilder -> public abstract CassandraSink<IN> build() throws Exception_;1480685315;Finalizes the configuration of this sink.__@return finalized sink_@throws Exception;public abstract CassandraSink<IN> build() throws Exception_;finalizes,the,configuration,of,this,sink,return,finalized,sink,throws,exception;public,abstract,cassandra,sink,in,build,throws,exception
CassandraSink -> CassandraSinkBuilder -> public abstract CassandraSink<IN> build() throws Exception_;1485181339;Finalizes the configuration of this sink.__@return finalized sink_@throws Exception;public abstract CassandraSink<IN> build() throws Exception_;finalizes,the,configuration,of,this,sink,return,finalized,sink,throws,exception;public,abstract,cassandra,sink,in,build,throws,exception
CassandraSink -> public static <IN, T extends Tuple> CassandraSinkBuilder<IN> addSink(DataStream<IN> input);1480685315;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN, T extends Tuple> CassandraSinkBuilder<IN> addSink(DataStream<IN> input) {_		if (input.getType() instanceof TupleTypeInfo) {_			DataStream<T> tupleInput = (DataStream<T>) input__			return (CassandraSinkBuilder<IN>) new CassandraTupleSinkBuilder<>(tupleInput, tupleInput.getType(), tupleInput.getType().createSerializer(tupleInput.getExecutionEnvironment().getConfig()))__		} else {_			return new CassandraPojoSinkBuilder<>(input, input.getType(), input.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,t,extends,tuple,cassandra,sink,builder,in,add,sink,data,stream,in,input,if,input,get,type,instanceof,tuple,type,info,data,stream,t,tuple,input,data,stream,t,input,return,cassandra,sink,builder,in,new,cassandra,tuple,sink,builder,tuple,input,tuple,input,get,type,tuple,input,get,type,create,serializer,tuple,input,get,execution,environment,get,config,else,return,new,cassandra,pojo,sink,builder,input,input,get,type,input,get,type,create,serializer,input,get,execution,environment,get,config
CassandraSink -> public static <IN, T extends Tuple> CassandraSinkBuilder<IN> addSink(DataStream<IN> input);1485181339;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN, T extends Tuple> CassandraSinkBuilder<IN> addSink(DataStream<IN> input) {_		if (input.getType() instanceof TupleTypeInfo) {_			DataStream<T> tupleInput = (DataStream<T>) input__			return (CassandraSinkBuilder<IN>) new CassandraTupleSinkBuilder<>(tupleInput, tupleInput.getType(), tupleInput.getType().createSerializer(tupleInput.getExecutionEnvironment().getConfig()))__		} else {_			return new CassandraPojoSinkBuilder<>(input, input.getType(), input.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,t,extends,tuple,cassandra,sink,builder,in,add,sink,data,stream,in,input,if,input,get,type,instanceof,tuple,type,info,data,stream,t,tuple,input,data,stream,t,input,return,cassandra,sink,builder,in,new,cassandra,tuple,sink,builder,tuple,input,tuple,input,get,type,tuple,input,get,type,create,serializer,tuple,input,get,execution,environment,get,config,else,return,new,cassandra,pojo,sink,builder,input,input,get,type,input,get,type,create,serializer,input,get,execution,environment,get,config
CassandraSink -> public static <IN, T extends Tuple> CassandraSinkBuilder<IN> addSink(DataStream<IN> input);1495720731;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN, T extends Tuple> CassandraSinkBuilder<IN> addSink(DataStream<IN> input) {_		TypeInformation<IN> typeInfo = input.getType()__		if (typeInfo instanceof TupleTypeInfo) {_			DataStream<T> tupleInput = (DataStream<T>) input__			return (CassandraSinkBuilder<IN>) new CassandraTupleSinkBuilder<>(tupleInput, tupleInput.getType(), tupleInput.getType().createSerializer(tupleInput.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof PojoTypeInfo) {_			return new CassandraPojoSinkBuilder<>(input, input.getType(), input.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof CaseClassTypeInfo) {_			DataStream<Product> productInput = (DataStream<Product>) input__			return (CassandraSinkBuilder<IN>) new CassandraScalaProductSinkBuilder<>(productInput, productInput.getType(), productInput.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		throw new IllegalArgumentException("No support for the type of the given DataStream: " + input.getType())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,t,extends,tuple,cassandra,sink,builder,in,add,sink,data,stream,in,input,type,information,in,type,info,input,get,type,if,type,info,instanceof,tuple,type,info,data,stream,t,tuple,input,data,stream,t,input,return,cassandra,sink,builder,in,new,cassandra,tuple,sink,builder,tuple,input,tuple,input,get,type,tuple,input,get,type,create,serializer,tuple,input,get,execution,environment,get,config,if,type,info,instanceof,pojo,type,info,return,new,cassandra,pojo,sink,builder,input,input,get,type,input,get,type,create,serializer,input,get,execution,environment,get,config,if,type,info,instanceof,case,class,type,info,data,stream,product,product,input,data,stream,product,input,return,cassandra,sink,builder,in,new,cassandra,scala,product,sink,builder,product,input,product,input,get,type,product,input,get,type,create,serializer,input,get,execution,environment,get,config,throw,new,illegal,argument,exception,no,support,for,the,type,of,the,given,data,stream,input,get,type
CassandraSink -> public static <IN, T extends Tuple> CassandraSinkBuilder<IN> addSink(DataStream<IN> input);1495923092;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN, T extends Tuple> CassandraSinkBuilder<IN> addSink(DataStream<IN> input) {_		TypeInformation<IN> typeInfo = input.getType()__		if (typeInfo instanceof TupleTypeInfo) {_			DataStream<T> tupleInput = (DataStream<T>) input__			return (CassandraSinkBuilder<IN>) new CassandraTupleSinkBuilder<>(tupleInput, tupleInput.getType(), tupleInput.getType().createSerializer(tupleInput.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof PojoTypeInfo) {_			return new CassandraPojoSinkBuilder<>(input, input.getType(), input.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof CaseClassTypeInfo) {_			DataStream<Product> productInput = (DataStream<Product>) input__			return (CassandraSinkBuilder<IN>) new CassandraScalaProductSinkBuilder<>(productInput, productInput.getType(), productInput.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		throw new IllegalArgumentException("No support for the type of the given DataStream: " + input.getType())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,t,extends,tuple,cassandra,sink,builder,in,add,sink,data,stream,in,input,type,information,in,type,info,input,get,type,if,type,info,instanceof,tuple,type,info,data,stream,t,tuple,input,data,stream,t,input,return,cassandra,sink,builder,in,new,cassandra,tuple,sink,builder,tuple,input,tuple,input,get,type,tuple,input,get,type,create,serializer,tuple,input,get,execution,environment,get,config,if,type,info,instanceof,pojo,type,info,return,new,cassandra,pojo,sink,builder,input,input,get,type,input,get,type,create,serializer,input,get,execution,environment,get,config,if,type,info,instanceof,case,class,type,info,data,stream,product,product,input,data,stream,product,input,return,cassandra,sink,builder,in,new,cassandra,scala,product,sink,builder,product,input,product,input,get,type,product,input,get,type,create,serializer,input,get,execution,environment,get,config,throw,new,illegal,argument,exception,no,support,for,the,type,of,the,given,data,stream,input,get,type
CassandraSink -> public static <IN, T extends Tuple> CassandraSinkBuilder<IN> addSink(DataStream<IN> input);1508323860;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN, T extends Tuple> CassandraSinkBuilder<IN> addSink(DataStream<IN> input) {_		TypeInformation<IN> typeInfo = input.getType()__		if (typeInfo instanceof TupleTypeInfo) {_			DataStream<T> tupleInput = (DataStream<T>) input__			return (CassandraSinkBuilder<IN>) new CassandraTupleSinkBuilder<>(tupleInput, tupleInput.getType(), tupleInput.getType().createSerializer(tupleInput.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof PojoTypeInfo) {_			return new CassandraPojoSinkBuilder<>(input, input.getType(), input.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof CaseClassTypeInfo) {_			DataStream<Product> productInput = (DataStream<Product>) input__			return (CassandraSinkBuilder<IN>) new CassandraScalaProductSinkBuilder<>(productInput, productInput.getType(), productInput.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		throw new IllegalArgumentException("No support for the type of the given DataStream: " + input.getType())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,t,extends,tuple,cassandra,sink,builder,in,add,sink,data,stream,in,input,type,information,in,type,info,input,get,type,if,type,info,instanceof,tuple,type,info,data,stream,t,tuple,input,data,stream,t,input,return,cassandra,sink,builder,in,new,cassandra,tuple,sink,builder,tuple,input,tuple,input,get,type,tuple,input,get,type,create,serializer,tuple,input,get,execution,environment,get,config,if,type,info,instanceof,pojo,type,info,return,new,cassandra,pojo,sink,builder,input,input,get,type,input,get,type,create,serializer,input,get,execution,environment,get,config,if,type,info,instanceof,case,class,type,info,data,stream,product,product,input,data,stream,product,input,return,cassandra,sink,builder,in,new,cassandra,scala,product,sink,builder,product,input,product,input,get,type,product,input,get,type,create,serializer,input,get,execution,environment,get,config,throw,new,illegal,argument,exception,no,support,for,the,type,of,the,given,data,stream,input,get,type
CassandraSink -> public static <IN, T extends Tuple> CassandraSinkBuilder<IN> addSink(DataStream<IN> input);1508323860;Writes a DataStream into a Cassandra database.__@param input input DataStream_@param <IN>  input type_@return CassandraSinkBuilder, to further configure the sink;public static <IN, T extends Tuple> CassandraSinkBuilder<IN> addSink(DataStream<IN> input) {_		TypeInformation<IN> typeInfo = input.getType()__		if (typeInfo instanceof TupleTypeInfo) {_			DataStream<T> tupleInput = (DataStream<T>) input__			return (CassandraSinkBuilder<IN>) new CassandraTupleSinkBuilder<>(tupleInput, tupleInput.getType(), tupleInput.getType().createSerializer(tupleInput.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof PojoTypeInfo) {_			return new CassandraPojoSinkBuilder<>(input, input.getType(), input.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		if (typeInfo instanceof CaseClassTypeInfo) {_			DataStream<Product> productInput = (DataStream<Product>) input__			return (CassandraSinkBuilder<IN>) new CassandraScalaProductSinkBuilder<>(productInput, productInput.getType(), productInput.getType().createSerializer(input.getExecutionEnvironment().getConfig()))__		}_		throw new IllegalArgumentException("No support for the type of the given DataStream: " + input.getType())__	};writes,a,data,stream,into,a,cassandra,database,param,input,input,data,stream,param,in,input,type,return,cassandra,sink,builder,to,further,configure,the,sink;public,static,in,t,extends,tuple,cassandra,sink,builder,in,add,sink,data,stream,in,input,type,information,in,type,info,input,get,type,if,type,info,instanceof,tuple,type,info,data,stream,t,tuple,input,data,stream,t,input,return,cassandra,sink,builder,in,new,cassandra,tuple,sink,builder,tuple,input,tuple,input,get,type,tuple,input,get,type,create,serializer,tuple,input,get,execution,environment,get,config,if,type,info,instanceof,pojo,type,info,return,new,cassandra,pojo,sink,builder,input,input,get,type,input,get,type,create,serializer,input,get,execution,environment,get,config,if,type,info,instanceof,case,class,type,info,data,stream,product,product,input,data,stream,product,input,return,cassandra,sink,builder,in,new,cassandra,scala,product,sink,builder,product,input,product,input,get,type,product,input,get,type,create,serializer,input,get,execution,environment,get,config,throw,new,illegal,argument,exception,no,support,for,the,type,of,the,given,data,stream,input,get,type
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setFailureHandler(CassandraFailureHandler failureHandler);1539094609;Sets the failure handler for this sink. The failure handler is used to provide custom error handling.__@param failureHandler CassandraFailureHandler, that handles any Throwable error.__@return this builder;public CassandraSinkBuilder<IN> setFailureHandler(CassandraFailureHandler failureHandler) {_			this.failureHandler = failureHandler__			return this__		};sets,the,failure,handler,for,this,sink,the,failure,handler,is,used,to,provide,custom,error,handling,param,failure,handler,cassandra,failure,handler,that,handles,any,throwable,error,return,this,builder;public,cassandra,sink,builder,in,set,failure,handler,cassandra,failure,handler,failure,handler,this,failure,handler,failure,handler,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setFailureHandler(CassandraFailureHandler failureHandler);1545299796;Sets the failure handler for this sink. The failure handler is used to provide custom error handling.__@param failureHandler CassandraFailureHandler, that handles any Throwable error.__@return this builder;public CassandraSinkBuilder<IN> setFailureHandler(CassandraFailureHandler failureHandler) {_			this.failureHandler = failureHandler__			return this__		};sets,the,failure,handler,for,this,sink,the,failure,handler,is,used,to,provide,custom,error,handling,param,failure,handler,cassandra,failure,handler,that,handles,any,throwable,error,return,this,builder;public,cassandra,sink,builder,in,set,failure,handler,cassandra,failure,handler,failure,handler,this,failure,handler,failure,handler,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setDefaultKeyspace(String keyspace);1527579230;Sets the keyspace to be used.__@param keyspace keyspace to use_@return this builder;public CassandraSinkBuilder<IN> setDefaultKeyspace(String keyspace) {_			this.keyspace = keyspace__			return this__		};sets,the,keyspace,to,be,used,param,keyspace,keyspace,to,use,return,this,builder;public,cassandra,sink,builder,in,set,default,keyspace,string,keyspace,this,keyspace,keyspace,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setDefaultKeyspace(String keyspace);1539094609;Sets the keyspace to be used.__@param keyspace keyspace to use_@return this builder;public CassandraSinkBuilder<IN> setDefaultKeyspace(String keyspace) {_			this.keyspace = keyspace__			return this__		};sets,the,keyspace,to,be,used,param,keyspace,keyspace,to,use,return,this,builder;public,cassandra,sink,builder,in,set,default,keyspace,string,keyspace,this,keyspace,keyspace,return,this
CassandraSink -> CassandraSinkBuilder -> public CassandraSinkBuilder<IN> setDefaultKeyspace(String keyspace);1545299796;Sets the keyspace to be used.__@param keyspace keyspace to use_@return this builder;public CassandraSinkBuilder<IN> setDefaultKeyspace(String keyspace) {_			this.keyspace = keyspace__			return this__		};sets,the,keyspace,to,be,used,param,keyspace,keyspace,to,use,return,this,builder;public,cassandra,sink,builder,in,set,default,keyspace,string,keyspace,this,keyspace,keyspace,return,this
