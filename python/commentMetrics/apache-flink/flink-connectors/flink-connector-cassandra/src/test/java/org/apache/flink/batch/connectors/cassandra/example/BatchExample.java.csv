commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Cluster buildCluster(Builder builder) {     return builder.addContactPoints("127.0.0.1").build(). }
false;protected;1;4;;@Override protected Cluster buildCluster(Builder builder) {     return builder.addContactPoints("127.0.0.1").build(). }
true;public,static;1;32;/* 	 *	table script: "CREATE TABLE test.batches (number int, strings text, PRIMARY KEY(number, strings))." 	 */ ;/* 	 *	table script: "CREATE TABLE test.batches (number int, strings text, PRIMARY KEY(number, strings))." 	 */ public static void main(String[] args) throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(1).     ArrayList<Tuple2<Integer, String>> collection = new ArrayList<>(20).     for (int i = 0. i < 20. i++) {         collection.add(new Tuple2<>(i, "string " + i)).     }     DataSet<Tuple2<Integer, String>> dataSet = env.fromCollection(collection).     dataSet.output(new CassandraTupleOutputFormat<Tuple2<Integer, String>>(INSERT_QUERY, new ClusterBuilder() {          @Override         protected Cluster buildCluster(Builder builder) {             return builder.addContactPoints("127.0.0.1").build().         }     })).     env.execute("Write").     DataSet<Tuple2<Integer, String>> inputDS = env.createInput(new CassandraInputFormat<Tuple2<Integer, String>>(SELECT_QUERY, new ClusterBuilder() {          @Override         protected Cluster buildCluster(Builder builder) {             return builder.addContactPoints("127.0.0.1").build().         }     }), TupleTypeInfo.of(new TypeHint<Tuple2<Integer, String>>() {     })).     inputDS.print(). }
