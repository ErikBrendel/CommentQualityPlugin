commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Cluster buildCluster(Cluster.Builder builder) {     return builder.addContactPoint("127.0.0.1").build(). }
false;public,static;1;25;;public static void main(String[] args) throws Exception {     StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     env.setParallelism(1).     env.enableCheckpointing(1000).     env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000)).     env.setStateBackend(new FsStateBackend("file:///" + System.getProperty("java.io.tmpdir") + "/flink/backend")).     CassandraSink<Tuple2<String, Integer>> sink = CassandraSink.addSink(env.addSource(new MySource())).setQuery("INSERT INTO example.values (id, counter) values (?, ?).").enableWriteAheadLog().setClusterBuilder(new ClusterBuilder() {          private static final long serialVersionUID = 2793938419775311824L.          @Override         public Cluster buildCluster(Cluster.Builder builder) {             return builder.addContactPoint("127.0.0.1").build().         }     }).build().     sink.name("Cassandra Sink").disableChaining().setParallelism(1).uid("hello").     env.execute(). }
false;public;1;11;;@Override public void run(SourceContext<Tuple2<String, Integer>> ctx) throws Exception {     while (!stop) {         Thread.sleep(50).         ctx.collect(new Tuple2<>("" + UUID.randomUUID(), 1)).         counter++.         if (counter == 100) {             stop = true.         }     } }
false;public;0;4;;@Override public void cancel() {     stop = true. }
false;public;2;4;;@Override public List<Integer> snapshotState(long checkpointId, long timestamp) throws Exception {     return Collections.singletonList(this.counter). }
false;public;1;7;;@Override public void restoreState(List<Integer> state) throws Exception {     if (state.isEmpty() || state.size() > 1) {         throw new RuntimeException("Test failed due to unexpected recovered state size " + state.size()).     }     this.counter = state.get(0). }
