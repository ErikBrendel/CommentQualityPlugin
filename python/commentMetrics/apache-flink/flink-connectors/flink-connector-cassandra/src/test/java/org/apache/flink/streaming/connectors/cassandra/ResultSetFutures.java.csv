commented;modifiers;parameterAmount;loc;comment;code
false;static;1;4;;static ResultSetFuture fromCompletableFuture(CompletableFuture<ResultSet> future) {     checkNotNull(future).     return new CompletableResultSetFuture(future). }
false;public;0;10;;@Override public ResultSet getUninterruptibly() {     try {         return completableFuture.get().     } catch (InterruptedException e) {         return getUninterruptibly().     } catch (ExecutionException e) {         throw new RuntimeException(e).     } }
false;public;2;10;;@Override public ResultSet getUninterruptibly(long l, TimeUnit timeUnit) throws TimeoutException {     try {         return completableFuture.get(l, timeUnit).     } catch (InterruptedException e) {         return getUninterruptibly().     } catch (ExecutionException e) {         throw new RuntimeException(e).     } }
false;public;1;4;;@Override public boolean cancel(boolean b) {     return completableFuture.cancel(b). }
false;public;0;4;;@Override public boolean isCancelled() {     return completableFuture.isCancelled(). }
false;public;0;4;;@Override public boolean isDone() {     return completableFuture.isDone(). }
false;public;0;4;;@Override public ResultSet get() throws InterruptedException, ExecutionException {     return completableFuture.get(). }
false;public;2;4;;@Override public ResultSet get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {     return completableFuture.get(timeout, unit). }
false;public;2;4;;@Override public void addListener(Runnable listener, Executor executor) {     completableFuture.whenComplete((result, error) -> listener.run()). }
