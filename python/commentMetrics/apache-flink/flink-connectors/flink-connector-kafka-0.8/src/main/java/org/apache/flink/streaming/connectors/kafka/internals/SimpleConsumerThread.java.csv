# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleConsumerThread -> private static void requestAndSetOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitionStates, 			Map<TopicAndPartition, PartitionOffsetRequestInfo> partitionToRequestInfo) throws IOException;1487173364;Request offsets from Kafka with a specified set of partition's offset request information._The returned offsets are used to set the internal partition states.__<p>This method retries three times if the response has an error.__@param consumer The consumer connected to lead broker_@param partitionStates the partition states, will be set with offsets fetched from Kafka request_@param partitionToRequestInfo map of each partition to its offset request info;private static void requestAndSetOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitionStates,_			Map<TopicAndPartition, PartitionOffsetRequestInfo> partitionToRequestInfo) throws IOException_	{_		int retries = 0__		OffsetResponse response__		while (true) {_			kafka.javaapi.OffsetRequest request = new kafka.javaapi.OffsetRequest(_				partitionToRequestInfo, kafka.api.OffsetRequest.CurrentVersion(), consumer.clientId())__			response = consumer.getOffsetsBefore(request)___			if (response.hasError()) {_				StringBuilder exception = new StringBuilder()__				for (KafkaTopicPartitionState<TopicAndPartition> part : partitionStates) {_					short code__					if ((code = response.errorCode(part.getTopic(), part.getPartition())) != ErrorMapping.NoError()) {_						exception.append("\nException for topic=").append(part.getTopic())_							.append(" partition=").append(part.getPartition()).append(": ")_							.append(StringUtils.stringifyException(ErrorMapping.exceptionFor(code)))__					}_				}_				if (++retries >= 3) {_					throw new IOException("Unable to get last offset for partitions " + partitionStates + ": "_						+ exception.toString())__				} else {_					LOG.warn("Unable to get last offset for partitions: Exception(s): {}", exception)__				}_			} else {_				break_ _			}_		}__		for (KafkaTopicPartitionState<TopicAndPartition> part: partitionStates) {_			_			if (partitionToRequestInfo.containsKey(part.getKafkaPartitionHandle())) {_				final long offset = response.offsets(part.getTopic(), part.getPartition())[0]___				_				_				part.setOffset(offset - 1)__			}_		}_	};request,offsets,from,kafka,with,a,specified,set,of,partition,s,offset,request,information,the,returned,offsets,are,used,to,set,the,internal,partition,states,p,this,method,retries,three,times,if,the,response,has,an,error,param,consumer,the,consumer,connected,to,lead,broker,param,partition,states,the,partition,states,will,be,set,with,offsets,fetched,from,kafka,request,param,partition,to,request,info,map,of,each,partition,to,its,offset,request,info;private,static,void,request,and,set,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partition,states,map,topic,and,partition,partition,offset,request,info,partition,to,request,info,throws,ioexception,int,retries,0,offset,response,response,while,true,kafka,javaapi,offset,request,request,new,kafka,javaapi,offset,request,partition,to,request,info,kafka,api,offset,request,current,version,consumer,client,id,response,consumer,get,offsets,before,request,if,response,has,error,string,builder,exception,new,string,builder,for,kafka,topic,partition,state,topic,and,partition,part,partition,states,short,code,if,code,response,error,code,part,get,topic,part,get,partition,error,mapping,no,error,exception,append,n,exception,for,topic,append,part,get,topic,append,partition,append,part,get,partition,append,append,string,utils,stringify,exception,error,mapping,exception,for,code,if,retries,3,throw,new,ioexception,unable,to,get,last,offset,for,partitions,partition,states,exception,to,string,else,log,warn,unable,to,get,last,offset,for,partitions,exception,s,exception,else,break,for,kafka,topic,partition,state,topic,and,partition,part,partition,states,if,partition,to,request,info,contains,key,part,get,kafka,partition,handle,final,long,offset,response,offsets,part,get,topic,part,get,partition,0,part,set,offset,offset,1
SimpleConsumerThread -> private static void requestAndSetOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitionStates, 			Map<TopicAndPartition, PartitionOffsetRequestInfo> partitionToRequestInfo) throws IOException;1490128641;Request offsets from Kafka with a specified set of partition's offset request information._The returned offsets are used to set the internal partition states.__<p>This method retries three times if the response has an error.__@param consumer The consumer connected to lead broker_@param partitionStates the partition states, will be set with offsets fetched from Kafka request_@param partitionToRequestInfo map of each partition to its offset request info;private static void requestAndSetOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitionStates,_			Map<TopicAndPartition, PartitionOffsetRequestInfo> partitionToRequestInfo) throws IOException_	{_		int retries = 0__		OffsetResponse response__		while (true) {_			kafka.javaapi.OffsetRequest request = new kafka.javaapi.OffsetRequest(_				partitionToRequestInfo, kafka.api.OffsetRequest.CurrentVersion(), consumer.clientId())__			response = consumer.getOffsetsBefore(request)___			if (response.hasError()) {_				StringBuilder exception = new StringBuilder()__				for (KafkaTopicPartitionState<TopicAndPartition> part : partitionStates) {_					short code__					if ((code = response.errorCode(part.getTopic(), part.getPartition())) != ErrorMapping.NoError()) {_						exception.append("\nException for topic=").append(part.getTopic())_							.append(" partition=").append(part.getPartition()).append(": ")_							.append(ExceptionUtils.stringifyException(ErrorMapping.exceptionFor(code)))__					}_				}_				if (++retries >= 3) {_					throw new IOException("Unable to get last offset for partitions " + partitionStates + ": "_						+ exception.toString())__				} else {_					LOG.warn("Unable to get last offset for partitions: Exception(s): {}", exception)__				}_			} else {_				break_ _			}_		}__		for (KafkaTopicPartitionState<TopicAndPartition> part: partitionStates) {_			_			if (partitionToRequestInfo.containsKey(part.getKafkaPartitionHandle())) {_				final long offset = response.offsets(part.getTopic(), part.getPartition())[0]___				_				_				part.setOffset(offset - 1)__			}_		}_	};request,offsets,from,kafka,with,a,specified,set,of,partition,s,offset,request,information,the,returned,offsets,are,used,to,set,the,internal,partition,states,p,this,method,retries,three,times,if,the,response,has,an,error,param,consumer,the,consumer,connected,to,lead,broker,param,partition,states,the,partition,states,will,be,set,with,offsets,fetched,from,kafka,request,param,partition,to,request,info,map,of,each,partition,to,its,offset,request,info;private,static,void,request,and,set,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partition,states,map,topic,and,partition,partition,offset,request,info,partition,to,request,info,throws,ioexception,int,retries,0,offset,response,response,while,true,kafka,javaapi,offset,request,request,new,kafka,javaapi,offset,request,partition,to,request,info,kafka,api,offset,request,current,version,consumer,client,id,response,consumer,get,offsets,before,request,if,response,has,error,string,builder,exception,new,string,builder,for,kafka,topic,partition,state,topic,and,partition,part,partition,states,short,code,if,code,response,error,code,part,get,topic,part,get,partition,error,mapping,no,error,exception,append,n,exception,for,topic,append,part,get,topic,append,partition,append,part,get,partition,append,append,exception,utils,stringify,exception,error,mapping,exception,for,code,if,retries,3,throw,new,ioexception,unable,to,get,last,offset,for,partitions,partition,states,exception,to,string,else,log,warn,unable,to,get,last,offset,for,partitions,exception,s,exception,else,break,for,kafka,topic,partition,state,topic,and,partition,part,partition,states,if,partition,to,request,info,contains,key,part,get,kafka,partition,handle,final,long,offset,response,offsets,part,get,topic,part,get,partition,0,part,set,offset,offset,1
SimpleConsumerThread -> private static void requestAndSetOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitionStates, 			Map<TopicAndPartition, PartitionOffsetRequestInfo> partitionToRequestInfo) throws IOException;1495923077;Request offsets from Kafka with a specified set of partition's offset request information._The returned offsets are used to set the internal partition states.__<p>This method retries three times if the response has an error.__@param consumer The consumer connected to lead broker_@param partitionStates the partition states, will be set with offsets fetched from Kafka request_@param partitionToRequestInfo map of each partition to its offset request info;private static void requestAndSetOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitionStates,_			Map<TopicAndPartition, PartitionOffsetRequestInfo> partitionToRequestInfo) throws IOException {_		int retries = 0__		OffsetResponse response__		while (true) {_			kafka.javaapi.OffsetRequest request = new kafka.javaapi.OffsetRequest(_				partitionToRequestInfo, kafka.api.OffsetRequest.CurrentVersion(), consumer.clientId())__			response = consumer.getOffsetsBefore(request)___			if (response.hasError()) {_				StringBuilder exception = new StringBuilder()__				for (KafkaTopicPartitionState<TopicAndPartition> part : partitionStates) {_					short code__					if ((code = response.errorCode(part.getTopic(), part.getPartition())) != ErrorMapping.NoError()) {_						exception.append("\nException for topic=").append(part.getTopic())_							.append(" partition=").append(part.getPartition()).append(": ")_							.append(ExceptionUtils.stringifyException(ErrorMapping.exceptionFor(code)))__					}_				}_				if (++retries >= 3) {_					throw new IOException("Unable to get last offset for partitions " + partitionStates + ": "_						+ exception.toString())__				} else {_					LOG.warn("Unable to get last offset for partitions: Exception(s): {}", exception)__				}_			} else {_				break_ _			}_		}__		for (KafkaTopicPartitionState<TopicAndPartition> part: partitionStates) {_			_			if (partitionToRequestInfo.containsKey(part.getKafkaPartitionHandle())) {_				final long offset = response.offsets(part.getTopic(), part.getPartition())[0]___				_				_				part.setOffset(offset - 1)__			}_		}_	};request,offsets,from,kafka,with,a,specified,set,of,partition,s,offset,request,information,the,returned,offsets,are,used,to,set,the,internal,partition,states,p,this,method,retries,three,times,if,the,response,has,an,error,param,consumer,the,consumer,connected,to,lead,broker,param,partition,states,the,partition,states,will,be,set,with,offsets,fetched,from,kafka,request,param,partition,to,request,info,map,of,each,partition,to,its,offset,request,info;private,static,void,request,and,set,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partition,states,map,topic,and,partition,partition,offset,request,info,partition,to,request,info,throws,ioexception,int,retries,0,offset,response,response,while,true,kafka,javaapi,offset,request,request,new,kafka,javaapi,offset,request,partition,to,request,info,kafka,api,offset,request,current,version,consumer,client,id,response,consumer,get,offsets,before,request,if,response,has,error,string,builder,exception,new,string,builder,for,kafka,topic,partition,state,topic,and,partition,part,partition,states,short,code,if,code,response,error,code,part,get,topic,part,get,partition,error,mapping,no,error,exception,append,n,exception,for,topic,append,part,get,topic,append,partition,append,part,get,partition,append,append,exception,utils,stringify,exception,error,mapping,exception,for,code,if,retries,3,throw,new,ioexception,unable,to,get,last,offset,for,partitions,partition,states,exception,to,string,else,log,warn,unable,to,get,last,offset,for,partitions,exception,s,exception,else,break,for,kafka,topic,partition,state,topic,and,partition,part,partition,states,if,partition,to,request,info,contains,key,part,get,kafka,partition,handle,final,long,offset,response,offsets,part,get,topic,part,get,partition,0,part,set,offset,offset,1
SimpleConsumerThread -> private static void requestAndSetOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitionStates, 			Map<TopicAndPartition, PartitionOffsetRequestInfo> partitionToRequestInfo) throws IOException;1515757409;Request offsets from Kafka with a specified set of partition's offset request information._The returned offsets are used to set the internal partition states.__<p>This method retries three times if the response has an error.__@param consumer The consumer connected to lead broker_@param partitionStates the partition states, will be set with offsets fetched from Kafka request_@param partitionToRequestInfo map of each partition to its offset request info;private static void requestAndSetOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitionStates,_			Map<TopicAndPartition, PartitionOffsetRequestInfo> partitionToRequestInfo) throws IOException {_		int retries = 0__		OffsetResponse response__		while (true) {_			kafka.javaapi.OffsetRequest request = new kafka.javaapi.OffsetRequest(_				partitionToRequestInfo, kafka.api.OffsetRequest.CurrentVersion(), consumer.clientId())__			response = consumer.getOffsetsBefore(request)___			if (response.hasError()) {_				StringBuilder exception = new StringBuilder()__				for (KafkaTopicPartitionState<TopicAndPartition> part : partitionStates) {_					short code__					if ((code = response.errorCode(part.getTopic(), part.getPartition())) != ErrorMapping.NoError()) {_						exception.append("\nException for topic=").append(part.getTopic())_							.append(" partition=").append(part.getPartition()).append(": ")_							.append(ExceptionUtils.stringifyException(ErrorMapping.exceptionFor(code)))__					}_				}_				if (++retries >= 3) {_					throw new IOException("Unable to get last offset for partitions " + partitionStates + ": "_						+ exception.toString())__				} else {_					LOG.warn("Unable to get last offset for partitions: Exception(s): {}", exception)__				}_			} else {_				break_ _			}_		}__		for (KafkaTopicPartitionState<TopicAndPartition> part: partitionStates) {_			_			if (partitionToRequestInfo.containsKey(part.getKafkaPartitionHandle())) {_				final long offset = response.offsets(part.getTopic(), part.getPartition())[0]___				_				_				part.setOffset(offset - 1)__			}_		}_	};request,offsets,from,kafka,with,a,specified,set,of,partition,s,offset,request,information,the,returned,offsets,are,used,to,set,the,internal,partition,states,p,this,method,retries,three,times,if,the,response,has,an,error,param,consumer,the,consumer,connected,to,lead,broker,param,partition,states,the,partition,states,will,be,set,with,offsets,fetched,from,kafka,request,param,partition,to,request,info,map,of,each,partition,to,its,offset,request,info;private,static,void,request,and,set,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partition,states,map,topic,and,partition,partition,offset,request,info,partition,to,request,info,throws,ioexception,int,retries,0,offset,response,response,while,true,kafka,javaapi,offset,request,request,new,kafka,javaapi,offset,request,partition,to,request,info,kafka,api,offset,request,current,version,consumer,client,id,response,consumer,get,offsets,before,request,if,response,has,error,string,builder,exception,new,string,builder,for,kafka,topic,partition,state,topic,and,partition,part,partition,states,short,code,if,code,response,error,code,part,get,topic,part,get,partition,error,mapping,no,error,exception,append,n,exception,for,topic,append,part,get,topic,append,partition,append,part,get,partition,append,append,exception,utils,stringify,exception,error,mapping,exception,for,code,if,retries,3,throw,new,ioexception,unable,to,get,last,offset,for,partitions,partition,states,exception,to,string,else,log,warn,unable,to,get,last,offset,for,partitions,exception,s,exception,else,break,for,kafka,topic,partition,state,topic,and,partition,part,partition,states,if,partition,to,request,info,contains,key,part,get,kafka,partition,handle,final,long,offset,response,offsets,part,get,topic,part,get,partition,0,part,set,offset,offset,1
SimpleConsumerThread -> private static void requestAndSetOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitionStates, 			Map<TopicAndPartition, PartitionOffsetRequestInfo> partitionToRequestInfo) throws IOException;1534341114;Request offsets from Kafka with a specified set of partition's offset request information._The returned offsets are used to set the internal partition states.__<p>This method retries three times if the response has an error.__@param consumer The consumer connected to lead broker_@param partitionStates the partition states, will be set with offsets fetched from Kafka request_@param partitionToRequestInfo map of each partition to its offset request info;private static void requestAndSetOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitionStates,_			Map<TopicAndPartition, PartitionOffsetRequestInfo> partitionToRequestInfo) throws IOException {_		int retries = 0__		OffsetResponse response__		while (true) {_			kafka.javaapi.OffsetRequest request = new kafka.javaapi.OffsetRequest(_				partitionToRequestInfo, kafka.api.OffsetRequest.CurrentVersion(), consumer.clientId())__			response = consumer.getOffsetsBefore(request)___			if (response.hasError()) {_				StringBuilder exception = new StringBuilder()__				for (KafkaTopicPartitionState<TopicAndPartition> part : partitionStates) {_					short code__					if ((code = response.errorCode(part.getTopic(), part.getPartition())) != ErrorMapping.NoError()) {_						exception.append("\nException for topic=").append(part.getTopic())_							.append(" partition=").append(part.getPartition()).append(": ")_							.append(ExceptionUtils.stringifyException(ErrorMapping.exceptionFor(code)))__					}_				}_				if (++retries >= 3) {_					throw new IOException("Unable to get last offset for partitions " + partitionStates + ": "_						+ exception.toString())__				} else {_					LOG.warn("Unable to get last offset for partitions: Exception(s): {}", exception)__				}_			} else {_				break_ _			}_		}__		for (KafkaTopicPartitionState<TopicAndPartition> part: partitionStates) {_			_			if (partitionToRequestInfo.containsKey(part.getKafkaPartitionHandle())) {_				final long offset = response.offsets(part.getTopic(), part.getPartition())[0]___				_				_				part.setOffset(offset - 1)__			}_		}_	};request,offsets,from,kafka,with,a,specified,set,of,partition,s,offset,request,information,the,returned,offsets,are,used,to,set,the,internal,partition,states,p,this,method,retries,three,times,if,the,response,has,an,error,param,consumer,the,consumer,connected,to,lead,broker,param,partition,states,the,partition,states,will,be,set,with,offsets,fetched,from,kafka,request,param,partition,to,request,info,map,of,each,partition,to,its,offset,request,info;private,static,void,request,and,set,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partition,states,map,topic,and,partition,partition,offset,request,info,partition,to,request,info,throws,ioexception,int,retries,0,offset,response,response,while,true,kafka,javaapi,offset,request,request,new,kafka,javaapi,offset,request,partition,to,request,info,kafka,api,offset,request,current,version,consumer,client,id,response,consumer,get,offsets,before,request,if,response,has,error,string,builder,exception,new,string,builder,for,kafka,topic,partition,state,topic,and,partition,part,partition,states,short,code,if,code,response,error,code,part,get,topic,part,get,partition,error,mapping,no,error,exception,append,n,exception,for,topic,append,part,get,topic,append,partition,append,part,get,partition,append,append,exception,utils,stringify,exception,error,mapping,exception,for,code,if,retries,3,throw,new,ioexception,unable,to,get,last,offset,for,partitions,partition,states,exception,to,string,else,log,warn,unable,to,get,last,offset,for,partitions,exception,s,exception,else,break,for,kafka,topic,partition,state,topic,and,partition,part,partition,states,if,partition,to,request,info,contains,key,part,get,kafka,partition,handle,final,long,offset,response,offsets,part,get,topic,part,get,partition,0,part,set,offset,offset,1
SimpleConsumerThread -> private static void requestAndSetOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitionStates, 			Map<TopicAndPartition, PartitionOffsetRequestInfo> partitionToRequestInfo) throws IOException;1550834396;Request offsets from Kafka with a specified set of partition's offset request information._The returned offsets are used to set the internal partition states.__<p>This method retries three times if the response has an error.__@param consumer The consumer connected to lead broker_@param partitionStates the partition states, will be set with offsets fetched from Kafka request_@param partitionToRequestInfo map of each partition to its offset request info;private static void requestAndSetOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitionStates,_			Map<TopicAndPartition, PartitionOffsetRequestInfo> partitionToRequestInfo) throws IOException {_		int retries = 0__		OffsetResponse response__		while (true) {_			kafka.javaapi.OffsetRequest request = new kafka.javaapi.OffsetRequest(_				partitionToRequestInfo, kafka.api.OffsetRequest.CurrentVersion(), consumer.clientId())__			response = consumer.getOffsetsBefore(request)___			if (response.hasError()) {_				StringBuilder exception = new StringBuilder()__				for (KafkaTopicPartitionState<TopicAndPartition> part : partitionStates) {_					short code__					if ((code = response.errorCode(part.getTopic(), part.getPartition())) != ErrorMapping.NoError()) {_						exception.append("\nException for topic=").append(part.getTopic())_							.append(" partition=").append(part.getPartition()).append(": ")_							.append(ExceptionUtils.stringifyException(ErrorMapping.exceptionFor(code)))__					}_				}_				if (++retries >= 3) {_					throw new IOException("Unable to get last offset for partitions " + partitionStates + ": "_						+ exception.toString())__				} else {_					LOG.warn("Unable to get last offset for partitions: Exception(s): {}", exception)__				}_			} else {_				break_ _			}_		}__		for (KafkaTopicPartitionState<TopicAndPartition> part: partitionStates) {_			_			if (partitionToRequestInfo.containsKey(part.getKafkaPartitionHandle())) {_				final long offset = response.offsets(part.getTopic(), part.getPartition())[0]___				_				_				part.setOffset(offset - 1)__			}_		}_	};request,offsets,from,kafka,with,a,specified,set,of,partition,s,offset,request,information,the,returned,offsets,are,used,to,set,the,internal,partition,states,p,this,method,retries,three,times,if,the,response,has,an,error,param,consumer,the,consumer,connected,to,lead,broker,param,partition,states,the,partition,states,will,be,set,with,offsets,fetched,from,kafka,request,param,partition,to,request,info,map,of,each,partition,to,its,offset,request,info;private,static,void,request,and,set,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partition,states,map,topic,and,partition,partition,offset,request,info,partition,to,request,info,throws,ioexception,int,retries,0,offset,response,response,while,true,kafka,javaapi,offset,request,request,new,kafka,javaapi,offset,request,partition,to,request,info,kafka,api,offset,request,current,version,consumer,client,id,response,consumer,get,offsets,before,request,if,response,has,error,string,builder,exception,new,string,builder,for,kafka,topic,partition,state,topic,and,partition,part,partition,states,short,code,if,code,response,error,code,part,get,topic,part,get,partition,error,mapping,no,error,exception,append,n,exception,for,topic,append,part,get,topic,append,partition,append,part,get,partition,append,append,exception,utils,stringify,exception,error,mapping,exception,for,code,if,retries,3,throw,new,ioexception,unable,to,get,last,offset,for,partitions,partition,states,exception,to,string,else,log,warn,unable,to,get,last,offset,for,partitions,exception,s,exception,else,break,for,kafka,topic,partition,state,topic,and,partition,part,partition,states,if,partition,to,request,info,contains,key,part,get,kafka,partition,handle,final,long,offset,response,offsets,part,get,topic,part,get,partition,0,part,set,offset,offset,1
SimpleConsumerThread -> private static void requestAndSetSpecificTimeOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitions, 			long whichTime) throws IOException;1487173364;Request offsets before a specific time for a set of partitions, via a Kafka consumer.__@param consumer The consumer connected to lead broker_@param partitions The list of partitions we need offsets for_@param whichTime The type of time we are requesting. -1 and -2 are special constants (See OffsetRequest);private static void requestAndSetSpecificTimeOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitions,_			long whichTime) throws IOException_	{_		Map<TopicAndPartition, PartitionOffsetRequestInfo> requestInfo = new HashMap<>()__		for (KafkaTopicPartitionState<TopicAndPartition> part : partitions) {_			requestInfo.put(part.getKafkaPartitionHandle(), new PartitionOffsetRequestInfo(whichTime, 1))__		}__		requestAndSetOffsetsFromKafka(consumer, partitions, requestInfo)__	};request,offsets,before,a,specific,time,for,a,set,of,partitions,via,a,kafka,consumer,param,consumer,the,consumer,connected,to,lead,broker,param,partitions,the,list,of,partitions,we,need,offsets,for,param,which,time,the,type,of,time,we,are,requesting,1,and,2,are,special,constants,see,offset,request;private,static,void,request,and,set,specific,time,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partitions,long,which,time,throws,ioexception,map,topic,and,partition,partition,offset,request,info,request,info,new,hash,map,for,kafka,topic,partition,state,topic,and,partition,part,partitions,request,info,put,part,get,kafka,partition,handle,new,partition,offset,request,info,which,time,1,request,and,set,offsets,from,kafka,consumer,partitions,request,info
SimpleConsumerThread -> private static void requestAndSetSpecificTimeOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitions, 			long whichTime) throws IOException;1490128641;Request offsets before a specific time for a set of partitions, via a Kafka consumer.__@param consumer The consumer connected to lead broker_@param partitions The list of partitions we need offsets for_@param whichTime The type of time we are requesting. -1 and -2 are special constants (See OffsetRequest);private static void requestAndSetSpecificTimeOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitions,_			long whichTime) throws IOException_	{_		Map<TopicAndPartition, PartitionOffsetRequestInfo> requestInfo = new HashMap<>()__		for (KafkaTopicPartitionState<TopicAndPartition> part : partitions) {_			requestInfo.put(part.getKafkaPartitionHandle(), new PartitionOffsetRequestInfo(whichTime, 1))__		}__		requestAndSetOffsetsFromKafka(consumer, partitions, requestInfo)__	};request,offsets,before,a,specific,time,for,a,set,of,partitions,via,a,kafka,consumer,param,consumer,the,consumer,connected,to,lead,broker,param,partitions,the,list,of,partitions,we,need,offsets,for,param,which,time,the,type,of,time,we,are,requesting,1,and,2,are,special,constants,see,offset,request;private,static,void,request,and,set,specific,time,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partitions,long,which,time,throws,ioexception,map,topic,and,partition,partition,offset,request,info,request,info,new,hash,map,for,kafka,topic,partition,state,topic,and,partition,part,partitions,request,info,put,part,get,kafka,partition,handle,new,partition,offset,request,info,which,time,1,request,and,set,offsets,from,kafka,consumer,partitions,request,info
SimpleConsumerThread -> private static void requestAndSetSpecificTimeOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitions, 			long whichTime) throws IOException;1495923077;Request offsets before a specific time for a set of partitions, via a Kafka consumer.__@param consumer The consumer connected to lead broker_@param partitions The list of partitions we need offsets for_@param whichTime The type of time we are requesting. -1 and -2 are special constants (See OffsetRequest);private static void requestAndSetSpecificTimeOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitions,_			long whichTime) throws IOException {_		Map<TopicAndPartition, PartitionOffsetRequestInfo> requestInfo = new HashMap<>()__		for (KafkaTopicPartitionState<TopicAndPartition> part : partitions) {_			requestInfo.put(part.getKafkaPartitionHandle(), new PartitionOffsetRequestInfo(whichTime, 1))__		}__		requestAndSetOffsetsFromKafka(consumer, partitions, requestInfo)__	};request,offsets,before,a,specific,time,for,a,set,of,partitions,via,a,kafka,consumer,param,consumer,the,consumer,connected,to,lead,broker,param,partitions,the,list,of,partitions,we,need,offsets,for,param,which,time,the,type,of,time,we,are,requesting,1,and,2,are,special,constants,see,offset,request;private,static,void,request,and,set,specific,time,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partitions,long,which,time,throws,ioexception,map,topic,and,partition,partition,offset,request,info,request,info,new,hash,map,for,kafka,topic,partition,state,topic,and,partition,part,partitions,request,info,put,part,get,kafka,partition,handle,new,partition,offset,request,info,which,time,1,request,and,set,offsets,from,kafka,consumer,partitions,request,info
SimpleConsumerThread -> private static void requestAndSetSpecificTimeOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitions, 			long whichTime) throws IOException;1515757409;Request offsets before a specific time for a set of partitions, via a Kafka consumer.__@param consumer The consumer connected to lead broker_@param partitions The list of partitions we need offsets for_@param whichTime The type of time we are requesting. -1 and -2 are special constants (See OffsetRequest);private static void requestAndSetSpecificTimeOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitions,_			long whichTime) throws IOException {_		Map<TopicAndPartition, PartitionOffsetRequestInfo> requestInfo = new HashMap<>()__		for (KafkaTopicPartitionState<TopicAndPartition> part : partitions) {_			requestInfo.put(part.getKafkaPartitionHandle(), new PartitionOffsetRequestInfo(whichTime, 1))__		}__		requestAndSetOffsetsFromKafka(consumer, partitions, requestInfo)__	};request,offsets,before,a,specific,time,for,a,set,of,partitions,via,a,kafka,consumer,param,consumer,the,consumer,connected,to,lead,broker,param,partitions,the,list,of,partitions,we,need,offsets,for,param,which,time,the,type,of,time,we,are,requesting,1,and,2,are,special,constants,see,offset,request;private,static,void,request,and,set,specific,time,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partitions,long,which,time,throws,ioexception,map,topic,and,partition,partition,offset,request,info,request,info,new,hash,map,for,kafka,topic,partition,state,topic,and,partition,part,partitions,request,info,put,part,get,kafka,partition,handle,new,partition,offset,request,info,which,time,1,request,and,set,offsets,from,kafka,consumer,partitions,request,info
SimpleConsumerThread -> private static void requestAndSetSpecificTimeOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitions, 			long whichTime) throws IOException;1534341114;Request offsets before a specific time for a set of partitions, via a Kafka consumer.__@param consumer The consumer connected to lead broker_@param partitions The list of partitions we need offsets for_@param whichTime The type of time we are requesting. -1 and -2 are special constants (See OffsetRequest);private static void requestAndSetSpecificTimeOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitions,_			long whichTime) throws IOException {_		Map<TopicAndPartition, PartitionOffsetRequestInfo> requestInfo = new HashMap<>()__		for (KafkaTopicPartitionState<TopicAndPartition> part : partitions) {_			requestInfo.put(part.getKafkaPartitionHandle(), new PartitionOffsetRequestInfo(whichTime, 1))__		}__		requestAndSetOffsetsFromKafka(consumer, partitions, requestInfo)__	};request,offsets,before,a,specific,time,for,a,set,of,partitions,via,a,kafka,consumer,param,consumer,the,consumer,connected,to,lead,broker,param,partitions,the,list,of,partitions,we,need,offsets,for,param,which,time,the,type,of,time,we,are,requesting,1,and,2,are,special,constants,see,offset,request;private,static,void,request,and,set,specific,time,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partitions,long,which,time,throws,ioexception,map,topic,and,partition,partition,offset,request,info,request,info,new,hash,map,for,kafka,topic,partition,state,topic,and,partition,part,partitions,request,info,put,part,get,kafka,partition,handle,new,partition,offset,request,info,which,time,1,request,and,set,offsets,from,kafka,consumer,partitions,request,info
SimpleConsumerThread -> private static void requestAndSetSpecificTimeOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitions, 			long whichTime) throws IOException;1550834396;Request offsets before a specific time for a set of partitions, via a Kafka consumer.__@param consumer The consumer connected to lead broker_@param partitions The list of partitions we need offsets for_@param whichTime The type of time we are requesting. -1 and -2 are special constants (See OffsetRequest);private static void requestAndSetSpecificTimeOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitions,_			long whichTime) throws IOException {_		Map<TopicAndPartition, PartitionOffsetRequestInfo> requestInfo = new HashMap<>()__		for (KafkaTopicPartitionState<TopicAndPartition> part : partitions) {_			requestInfo.put(part.getKafkaPartitionHandle(), new PartitionOffsetRequestInfo(whichTime, 1))__		}__		requestAndSetOffsetsFromKafka(consumer, partitions, requestInfo)__	};request,offsets,before,a,specific,time,for,a,set,of,partitions,via,a,kafka,consumer,param,consumer,the,consumer,connected,to,lead,broker,param,partitions,the,list,of,partitions,we,need,offsets,for,param,which,time,the,type,of,time,we,are,requesting,1,and,2,are,special,constants,see,offset,request;private,static,void,request,and,set,specific,time,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partitions,long,which,time,throws,ioexception,map,topic,and,partition,partition,offset,request,info,request,info,new,hash,map,for,kafka,topic,partition,state,topic,and,partition,part,partitions,request,info,put,part,get,kafka,partition,handle,new,partition,offset,request,info,which,time,1,request,and,set,offsets,from,kafka,consumer,partitions,request,info
SimpleConsumerThread -> public void cancel();1480685315;Cancels this fetch thread. The thread will release all resources and terminate.;public void cancel() {_		this.running = false___		_		if (consumer != null) {_			consumer.close()__		}__		this.interrupt()__	};cancels,this,fetch,thread,the,thread,will,release,all,resources,and,terminate;public,void,cancel,this,running,false,if,consumer,null,consumer,close,this,interrupt
SimpleConsumerThread -> public void cancel();1487173364;Cancels this fetch thread. The thread will release all resources and terminate.;public void cancel() {_		this.running = false___		_		if (consumer != null) {_			consumer.close()__		}__		this.interrupt()__	};cancels,this,fetch,thread,the,thread,will,release,all,resources,and,terminate;public,void,cancel,this,running,false,if,consumer,null,consumer,close,this,interrupt
SimpleConsumerThread -> public void cancel();1490128641;Cancels this fetch thread. The thread will release all resources and terminate.;public void cancel() {_		this.running = false___		_		if (consumer != null) {_			consumer.close()__		}__		this.interrupt()__	};cancels,this,fetch,thread,the,thread,will,release,all,resources,and,terminate;public,void,cancel,this,running,false,if,consumer,null,consumer,close,this,interrupt
SimpleConsumerThread -> public void cancel();1495923077;Cancels this fetch thread. The thread will release all resources and terminate.;public void cancel() {_		this.running = false___		_		if (consumer != null) {_			consumer.close()__		}__		this.interrupt()__	};cancels,this,fetch,thread,the,thread,will,release,all,resources,and,terminate;public,void,cancel,this,running,false,if,consumer,null,consumer,close,this,interrupt
SimpleConsumerThread -> public void cancel();1515757409;Cancels this fetch thread. The thread will release all resources and terminate.;public void cancel() {_		this.running = false___		_		if (consumer != null) {_			consumer.close()__		}__		this.interrupt()__	};cancels,this,fetch,thread,the,thread,will,release,all,resources,and,terminate;public,void,cancel,this,running,false,if,consumer,null,consumer,close,this,interrupt
SimpleConsumerThread -> public void cancel();1534341114;Cancels this fetch thread. The thread will release all resources and terminate.;public void cancel() {_		this.running = false___		_		if (consumer != null) {_			consumer.close()__		}__		this.interrupt()__	};cancels,this,fetch,thread,the,thread,will,release,all,resources,and,terminate;public,void,cancel,this,running,false,if,consumer,null,consumer,close,this,interrupt
SimpleConsumerThread -> public void cancel();1550834396;Cancels this fetch thread. The thread will release all resources and terminate.;public void cancel() {_		this.running = false___		_		if (consumer != null) {_			consumer.close()__		}__		this.interrupt()__	};cancels,this,fetch,thread,the,thread,will,release,all,resources,and,terminate;public,void,cancel,this,running,false,if,consumer,null,consumer,close,this,interrupt
SimpleConsumerThread -> private static void requestAndSetEarliestOrLatestOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitions) throws Exception;1487173364;For a set of partitions, if a partition is set with the special offsets {@link OffsetRequest#EarliestTime()}_or {@link OffsetRequest#LatestTime()}, replace them with actual offsets requested via a Kafka consumer.__@param consumer The consumer connected to lead broker_@param partitions The list of partitions we need offsets for;private static void requestAndSetEarliestOrLatestOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitions) throws Exception_	{_		Map<TopicAndPartition, PartitionOffsetRequestInfo> requestInfo = new HashMap<>()__		for (KafkaTopicPartitionState<TopicAndPartition> part : partitions) {_			if (part.getOffset() == OffsetRequest.EarliestTime() || part.getOffset() == OffsetRequest.LatestTime()) {_				requestInfo.put(part.getKafkaPartitionHandle(), new PartitionOffsetRequestInfo(part.getOffset(), 1))__			}_		}__		requestAndSetOffsetsFromKafka(consumer, partitions, requestInfo)__	};for,a,set,of,partitions,if,a,partition,is,set,with,the,special,offsets,link,offset,request,earliest,time,or,link,offset,request,latest,time,replace,them,with,actual,offsets,requested,via,a,kafka,consumer,param,consumer,the,consumer,connected,to,lead,broker,param,partitions,the,list,of,partitions,we,need,offsets,for;private,static,void,request,and,set,earliest,or,latest,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partitions,throws,exception,map,topic,and,partition,partition,offset,request,info,request,info,new,hash,map,for,kafka,topic,partition,state,topic,and,partition,part,partitions,if,part,get,offset,offset,request,earliest,time,part,get,offset,offset,request,latest,time,request,info,put,part,get,kafka,partition,handle,new,partition,offset,request,info,part,get,offset,1,request,and,set,offsets,from,kafka,consumer,partitions,request,info
SimpleConsumerThread -> private static void requestAndSetEarliestOrLatestOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitions) throws Exception;1490128641;For a set of partitions, if a partition is set with the special offsets {@link OffsetRequest#EarliestTime()}_or {@link OffsetRequest#LatestTime()}, replace them with actual offsets requested via a Kafka consumer.__@param consumer The consumer connected to lead broker_@param partitions The list of partitions we need offsets for;private static void requestAndSetEarliestOrLatestOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitions) throws Exception_	{_		Map<TopicAndPartition, PartitionOffsetRequestInfo> requestInfo = new HashMap<>()__		for (KafkaTopicPartitionState<TopicAndPartition> part : partitions) {_			if (part.getOffset() == OffsetRequest.EarliestTime() || part.getOffset() == OffsetRequest.LatestTime()) {_				requestInfo.put(part.getKafkaPartitionHandle(), new PartitionOffsetRequestInfo(part.getOffset(), 1))__			}_		}__		requestAndSetOffsetsFromKafka(consumer, partitions, requestInfo)__	};for,a,set,of,partitions,if,a,partition,is,set,with,the,special,offsets,link,offset,request,earliest,time,or,link,offset,request,latest,time,replace,them,with,actual,offsets,requested,via,a,kafka,consumer,param,consumer,the,consumer,connected,to,lead,broker,param,partitions,the,list,of,partitions,we,need,offsets,for;private,static,void,request,and,set,earliest,or,latest,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partitions,throws,exception,map,topic,and,partition,partition,offset,request,info,request,info,new,hash,map,for,kafka,topic,partition,state,topic,and,partition,part,partitions,if,part,get,offset,offset,request,earliest,time,part,get,offset,offset,request,latest,time,request,info,put,part,get,kafka,partition,handle,new,partition,offset,request,info,part,get,offset,1,request,and,set,offsets,from,kafka,consumer,partitions,request,info
SimpleConsumerThread -> private static void requestAndSetEarliestOrLatestOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitions) throws Exception;1495923077;For a set of partitions, if a partition is set with the special offsets {@link OffsetRequest#EarliestTime()}_or {@link OffsetRequest#LatestTime()}, replace them with actual offsets requested via a Kafka consumer.__@param consumer The consumer connected to lead broker_@param partitions The list of partitions we need offsets for;private static void requestAndSetEarliestOrLatestOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitions) throws Exception {_		Map<TopicAndPartition, PartitionOffsetRequestInfo> requestInfo = new HashMap<>()__		for (KafkaTopicPartitionState<TopicAndPartition> part : partitions) {_			if (part.getOffset() == OffsetRequest.EarliestTime() || part.getOffset() == OffsetRequest.LatestTime()) {_				requestInfo.put(part.getKafkaPartitionHandle(), new PartitionOffsetRequestInfo(part.getOffset(), 1))__			}_		}__		requestAndSetOffsetsFromKafka(consumer, partitions, requestInfo)__	};for,a,set,of,partitions,if,a,partition,is,set,with,the,special,offsets,link,offset,request,earliest,time,or,link,offset,request,latest,time,replace,them,with,actual,offsets,requested,via,a,kafka,consumer,param,consumer,the,consumer,connected,to,lead,broker,param,partitions,the,list,of,partitions,we,need,offsets,for;private,static,void,request,and,set,earliest,or,latest,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partitions,throws,exception,map,topic,and,partition,partition,offset,request,info,request,info,new,hash,map,for,kafka,topic,partition,state,topic,and,partition,part,partitions,if,part,get,offset,offset,request,earliest,time,part,get,offset,offset,request,latest,time,request,info,put,part,get,kafka,partition,handle,new,partition,offset,request,info,part,get,offset,1,request,and,set,offsets,from,kafka,consumer,partitions,request,info
SimpleConsumerThread -> private static void requestAndSetEarliestOrLatestOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitions) throws Exception;1515757409;For a set of partitions, if a partition is set with the special offsets {@link OffsetRequest#EarliestTime()}_or {@link OffsetRequest#LatestTime()}, replace them with actual offsets requested via a Kafka consumer.__@param consumer The consumer connected to lead broker_@param partitions The list of partitions we need offsets for;private static void requestAndSetEarliestOrLatestOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitions) throws Exception {_		Map<TopicAndPartition, PartitionOffsetRequestInfo> requestInfo = new HashMap<>()__		for (KafkaTopicPartitionState<TopicAndPartition> part : partitions) {_			if (part.getOffset() == OffsetRequest.EarliestTime() || part.getOffset() == OffsetRequest.LatestTime()) {_				requestInfo.put(part.getKafkaPartitionHandle(), new PartitionOffsetRequestInfo(part.getOffset(), 1))__			}_		}__		requestAndSetOffsetsFromKafka(consumer, partitions, requestInfo)__	};for,a,set,of,partitions,if,a,partition,is,set,with,the,special,offsets,link,offset,request,earliest,time,or,link,offset,request,latest,time,replace,them,with,actual,offsets,requested,via,a,kafka,consumer,param,consumer,the,consumer,connected,to,lead,broker,param,partitions,the,list,of,partitions,we,need,offsets,for;private,static,void,request,and,set,earliest,or,latest,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partitions,throws,exception,map,topic,and,partition,partition,offset,request,info,request,info,new,hash,map,for,kafka,topic,partition,state,topic,and,partition,part,partitions,if,part,get,offset,offset,request,earliest,time,part,get,offset,offset,request,latest,time,request,info,put,part,get,kafka,partition,handle,new,partition,offset,request,info,part,get,offset,1,request,and,set,offsets,from,kafka,consumer,partitions,request,info
SimpleConsumerThread -> private static void requestAndSetEarliestOrLatestOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitions) throws Exception;1534341114;For a set of partitions, if a partition is set with the special offsets {@link OffsetRequest#EarliestTime()}_or {@link OffsetRequest#LatestTime()}, replace them with actual offsets requested via a Kafka consumer.__@param consumer The consumer connected to lead broker_@param partitions The list of partitions we need offsets for;private static void requestAndSetEarliestOrLatestOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitions) throws Exception {_		Map<TopicAndPartition, PartitionOffsetRequestInfo> requestInfo = new HashMap<>()__		for (KafkaTopicPartitionState<TopicAndPartition> part : partitions) {_			if (part.getOffset() == OffsetRequest.EarliestTime() || part.getOffset() == OffsetRequest.LatestTime()) {_				requestInfo.put(part.getKafkaPartitionHandle(), new PartitionOffsetRequestInfo(part.getOffset(), 1))__			}_		}__		requestAndSetOffsetsFromKafka(consumer, partitions, requestInfo)__	};for,a,set,of,partitions,if,a,partition,is,set,with,the,special,offsets,link,offset,request,earliest,time,or,link,offset,request,latest,time,replace,them,with,actual,offsets,requested,via,a,kafka,consumer,param,consumer,the,consumer,connected,to,lead,broker,param,partitions,the,list,of,partitions,we,need,offsets,for;private,static,void,request,and,set,earliest,or,latest,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partitions,throws,exception,map,topic,and,partition,partition,offset,request,info,request,info,new,hash,map,for,kafka,topic,partition,state,topic,and,partition,part,partitions,if,part,get,offset,offset,request,earliest,time,part,get,offset,offset,request,latest,time,request,info,put,part,get,kafka,partition,handle,new,partition,offset,request,info,part,get,offset,1,request,and,set,offsets,from,kafka,consumer,partitions,request,info
SimpleConsumerThread -> private static void requestAndSetEarliestOrLatestOffsetsFromKafka( 			SimpleConsumer consumer, 			List<KafkaTopicPartitionState<TopicAndPartition>> partitions) throws Exception;1550834396;For a set of partitions, if a partition is set with the special offsets {@link OffsetRequest#EarliestTime()}_or {@link OffsetRequest#LatestTime()}, replace them with actual offsets requested via a Kafka consumer.__@param consumer The consumer connected to lead broker_@param partitions The list of partitions we need offsets for;private static void requestAndSetEarliestOrLatestOffsetsFromKafka(_			SimpleConsumer consumer,_			List<KafkaTopicPartitionState<TopicAndPartition>> partitions) throws Exception {_		Map<TopicAndPartition, PartitionOffsetRequestInfo> requestInfo = new HashMap<>()__		for (KafkaTopicPartitionState<TopicAndPartition> part : partitions) {_			if (part.getOffset() == OffsetRequest.EarliestTime() || part.getOffset() == OffsetRequest.LatestTime()) {_				requestInfo.put(part.getKafkaPartitionHandle(), new PartitionOffsetRequestInfo(part.getOffset(), 1))__			}_		}__		requestAndSetOffsetsFromKafka(consumer, partitions, requestInfo)__	};for,a,set,of,partitions,if,a,partition,is,set,with,the,special,offsets,link,offset,request,earliest,time,or,link,offset,request,latest,time,replace,them,with,actual,offsets,requested,via,a,kafka,consumer,param,consumer,the,consumer,connected,to,lead,broker,param,partitions,the,list,of,partitions,we,need,offsets,for;private,static,void,request,and,set,earliest,or,latest,offsets,from,kafka,simple,consumer,consumer,list,kafka,topic,partition,state,topic,and,partition,partitions,throws,exception,map,topic,and,partition,partition,offset,request,info,request,info,new,hash,map,for,kafka,topic,partition,state,topic,and,partition,part,partitions,if,part,get,offset,offset,request,earliest,time,part,get,offset,offset,request,latest,time,request,info,put,part,get,kafka,partition,handle,new,partition,offset,request,info,part,get,offset,1,request,and,set,offsets,from,kafka,consumer,partitions,request,info
