commented;modifiers;parameterAmount;loc;comment;code
true;public;1;10;/**  * Commits offsets for Kafka partitions to ZooKeeper. The given offsets to this method should be the offsets of  * the last processed records. this method will take care of incrementing the offsets by 1 before committing them so  * that the committed offsets to Zookeeper represent the next record to process.  *  * @param internalOffsets The internal offsets (representing last processed records) for the partitions to commit.  * @throws Exception The method forwards exceptions.  */ ;// ------------------------------------------------------------------------ // Offset access and manipulation // ------------------------------------------------------------------------ /**  * Commits offsets for Kafka partitions to ZooKeeper. The given offsets to this method should be the offsets of  * the last processed records. this method will take care of incrementing the offsets by 1 before committing them so  * that the committed offsets to Zookeeper represent the next record to process.  *  * @param internalOffsets The internal offsets (representing last processed records) for the partitions to commit.  * @throws Exception The method forwards exceptions.  */ public void prepareAndCommitOffsets(Map<KafkaTopicPartition, Long> internalOffsets) throws Exception {     for (Map.Entry<KafkaTopicPartition, Long> entry : internalOffsets.entrySet()) {         KafkaTopicPartition tp = entry.getKey().         Long lastProcessedOffset = entry.getValue().         if (lastProcessedOffset != null && lastProcessedOffset >= 0) {             setOffsetInZooKeeper(curatorClient, groupId, tp.getTopic(), tp.getPartition(), lastProcessedOffset + 1).         }     } }
true;public;1;3;/**  * @param partition The partition to read offset for.  * @return The mapping from partition to offset.  * @throws Exception This method forwards exceptions.  */ ;/**  * @param partition The partition to read offset for.  * @return The mapping from partition to offset.  * @throws Exception This method forwards exceptions.  */ public Long getCommittedOffset(KafkaTopicPartition partition) throws Exception {     return getOffsetFromZooKeeper(curatorClient, groupId, partition.getTopic(), partition.getPartition()). }
true;public;0;3;/**  * Closes the offset handler.  *  * @throws IOException Thrown, if the handler cannot be closed properly.  */ ;/**  * Closes the offset handler.  *  * @throws IOException Thrown, if the handler cannot be closed properly.  */ public void close() throws IOException {     curatorClient.close(). }
false;public,static;5;7;;// ------------------------------------------------------------------------ // Communication with Zookeeper // ------------------------------------------------------------------------ public static void setOffsetInZooKeeper(CuratorFramework curatorClient, String groupId, String topic, int partition, long offset) throws Exception {     ZKGroupTopicDirs topicDirs = new ZKGroupTopicDirs(groupId, topic).     String path = topicDirs.consumerOffsetDir() + "/" + partition.     curatorClient.newNamespaceAwareEnsurePath(path).ensure(curatorClient.getZookeeperClient()).     byte[] data = Long.toString(offset).getBytes(ConfigConstants.DEFAULT_CHARSET).     curatorClient.setData().forPath(path, data). }
false;public,static;4;26;;public static Long getOffsetFromZooKeeper(CuratorFramework curatorClient, String groupId, String topic, int partition) throws Exception {     ZKGroupTopicDirs topicDirs = new ZKGroupTopicDirs(groupId, topic).     String path = topicDirs.consumerOffsetDir() + "/" + partition.     curatorClient.newNamespaceAwareEnsurePath(path).ensure(curatorClient.getZookeeperClient()).     byte[] data = curatorClient.getData().forPath(path).     if (data == null) {         return null.     } else {         String asString = new String(data, ConfigConstants.DEFAULT_CHARSET).         if (asString.length() == 0) {             return null.         } else {             try {                 return Long.valueOf(asString).             } catch (NumberFormatException e) {                 LOG.error("The offset in ZooKeeper for group '{}', topic '{}', partition {} is a malformed string: {}", groupId, topic, partition, asString).                 return null.             }         }     } }
