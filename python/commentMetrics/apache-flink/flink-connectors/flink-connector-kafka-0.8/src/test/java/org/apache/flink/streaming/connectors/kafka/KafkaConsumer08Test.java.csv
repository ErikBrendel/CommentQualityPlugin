commented;modifiers;parameterAmount;loc;comment;code
false;public;0;40;;@Test public void testValidateZooKeeperConfig() {     try {         // empty         Properties emptyProperties = new Properties().         try {             FlinkKafkaConsumer08.validateZooKeeperConfig(emptyProperties).             fail("should fail with an exception").         } catch (IllegalArgumentException e) {         // expected         }         // no connect string (only group string)         Properties noConnect = new Properties().         noConnect.put(ConsumerConfig.GROUP_ID_CONFIG, "flink-test-group").         try {             FlinkKafkaConsumer08.validateZooKeeperConfig(noConnect).             fail("should fail with an exception").         } catch (IllegalArgumentException e) {         // expected         }         // no group string (only connect string)         Properties noGroup = new Properties().         noGroup.put("zookeeper.connect", "localhost:47574").         try {             FlinkKafkaConsumer08.validateZooKeeperConfig(noGroup).             fail("should fail with an exception").         } catch (IllegalArgumentException e) {         // expected         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;23;;@Test public void testCreateSourceWithoutCluster() {     try {         Properties props = new Properties().         props.setProperty("zookeeper.connect", "localhost:56794").         props.setProperty("bootstrap.servers", "localhost:11111, localhost:22222").         props.setProperty("group.id", "non-existent-group").         props.setProperty(FlinkKafkaConsumer08.GET_PARTITIONS_RETRIES_KEY, "1").         FlinkKafkaConsumer08<String> consumer = new FlinkKafkaConsumer08<>(Collections.singletonList("no op topic"), new SimpleStringSchema(), props).         StreamingRuntimeContext mockRuntimeContext = mock(StreamingRuntimeContext.class).         Mockito.when(mockRuntimeContext.isCheckpointingEnabled()).thenReturn(true).         consumer.setRuntimeContext(mockRuntimeContext).         consumer.open(new Configuration()).         fail().     } catch (Exception e) {         assertTrue(e.getMessage().contains("Unable to retrieve any partitions")).     } }
false;public;0;29;;@Test public void testAllBoostrapServerHostsAreInvalid() {     try {         String unknownHost = "foobar:11111".         URL unknownHostURL = NetUtils.getCorrectHostnamePort(unknownHost).         PowerMockito.mockStatic(InetAddress.class).         when(InetAddress.getByName(Matchers.eq(unknownHostURL.getHost()))).thenThrow(new UnknownHostException("Test exception")).         String zookeeperConnect = "localhost:56794".         String groupId = "non-existent-group".         Properties props = createKafkaProps(zookeeperConnect, unknownHost, groupId).         FlinkKafkaConsumer08<String> consumer = new FlinkKafkaConsumer08<>(Collections.singletonList("no op topic"), new SimpleStringSchema(), props).         StreamingRuntimeContext mockRuntimeContext = mock(StreamingRuntimeContext.class).         Mockito.when(mockRuntimeContext.isCheckpointingEnabled()).thenReturn(true).         consumer.setRuntimeContext(mockRuntimeContext).         consumer.open(new Configuration()).         fail().     } catch (Exception expected) {         assertTrue("Exception should be thrown containing 'all bootstrap servers invalid' message!", expected.getMessage().contains("All the servers provided in: '" + ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG + "' config are invalid")).     } }
false;public;0;28;;@Test public void testAtLeastOneBootstrapServerHostIsValid() throws Exception {     try {         String zookeeperConnect = "localhost:56794".         String unknownHost = "foobar:11111".         // we declare one valid bootstrap server, namely the one with 'localhost'         String bootstrapServers = unknownHost + ", localhost:22222".         URL unknownHostURL = NetUtils.getCorrectHostnamePort(unknownHost).         PowerMockito.mockStatic(InetAddress.class).         when(InetAddress.getByName(Matchers.eq(unknownHostURL.getHost()))).thenThrow(new UnknownHostException("Test exception")).         String groupId = "non-existent-group".         Properties props = createKafkaProps(zookeeperConnect, bootstrapServers, groupId).         DummyFlinkKafkaConsumer consumer = new DummyFlinkKafkaConsumer("no op topic", new SimpleStringSchema(), props).         consumer.open(new Configuration()).     // no exception should be thrown, because we have one valid bootstrap server. test passes if we reach here     } catch (Exception e) {         assertFalse("No exception should be thrown containing 'all bootstrap servers invalid' message!", e.getMessage().contains("All the servers provided in: '" + ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG + "' config are invalid")).     } }
false;private;3;9;;private Properties createKafkaProps(String zookeeperConnect, String bootstrapServers, String groupId) {     Properties props = new Properties().     props.setProperty("zookeeper.connect", zookeeperConnect).     props.setProperty("bootstrap.servers", bootstrapServers).     props.setProperty("group.id", groupId).     props.setProperty("socket.timeout.ms", "100").     props.setProperty(FlinkKafkaConsumer08.GET_PARTITIONS_RETRIES_KEY, "1").     return props. }
false;public;0;7;;@Override public RuntimeContext getRuntimeContext() {     RuntimeContext mockRuntimeContext = mock(RuntimeContext.class).     when(mockRuntimeContext.getIndexOfThisSubtask()).thenReturn(0).     when(mockRuntimeContext.getNumberOfParallelSubtasks()).thenReturn(1).     return mockRuntimeContext. }
