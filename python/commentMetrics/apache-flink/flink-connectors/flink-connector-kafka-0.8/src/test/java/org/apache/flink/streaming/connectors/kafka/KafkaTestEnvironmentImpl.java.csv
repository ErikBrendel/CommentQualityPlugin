# id;timestamp;commentText;codeText;commentWords;codeWords
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1480685315;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed);protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		LOG.info("Starting broker with id {}", brokerId)__		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", "30000")__		kafkaProperties.put("zookeeper.connection.timeout.ms", "30000")__		if(additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				KafkaServer server = new KafkaServer(kafkaConfig, new KafkaLocalSystemTime())__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,log,info,starting,broker,with,id,broker,id,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,30000,kafka,properties,put,zookeeper,connection,timeout,ms,30000,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,kafka,server,server,new,kafka,server,kafka,config,new,kafka,local,system,time,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1487173364;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed);protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		LOG.info("Starting broker with id {}", brokerId)__		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", "30000")__		kafkaProperties.put("zookeeper.connection.timeout.ms", "30000")__		if(additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				KafkaServer server = new KafkaServer(kafkaConfig, new KafkaLocalSystemTime())__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,log,info,starting,broker,with,id,broker,id,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,30000,kafka,properties,put,zookeeper,connection,timeout,ms,30000,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,kafka,server,server,new,kafka,server,kafka,config,new,kafka,local,system,time,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1488437582;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed);protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		LOG.info("Starting broker with id {}", brokerId)__		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", "30000")__		kafkaProperties.put("zookeeper.connection.timeout.ms", "30000")__		if(additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				KafkaServer server = new KafkaServer(kafkaConfig, new KafkaLocalSystemTime())__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,log,info,starting,broker,with,id,broker,id,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,30000,kafka,properties,put,zookeeper,connection,timeout,ms,30000,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,kafka,server,server,new,kafka,server,kafka,config,new,kafka,local,system,time,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1495175928;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed);protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		LOG.info("Starting broker with id {}", brokerId)__		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", "30000")__		kafkaProperties.put("zookeeper.connection.timeout.ms", "30000")__		if(additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				KafkaServer server = new KafkaServer(kafkaConfig, new KafkaLocalSystemTime())__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,log,info,starting,broker,with,id,broker,id,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,30000,kafka,properties,put,zookeeper,connection,timeout,ms,30000,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,kafka,server,server,new,kafka,server,kafka,config,new,kafka,local,system,time,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1495923077;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		LOG.info("Starting broker with id {}", brokerId)__		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", "30000")__		kafkaProperties.put("zookeeper.connection.timeout.ms", "30000")__		if (additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,log,info,starting,broker,with,id,broker,id,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,30000,kafka,properties,put,zookeeper,connection,timeout,ms,30000,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,kafka,server,server,new,kafka,server,kafka,config,system,time,module,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1498894422;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		LOG.info("Starting broker with id {}", brokerId)__		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", "30000")__		kafkaProperties.put("zookeeper.connection.timeout.ms", "30000")__		if (additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,log,info,starting,broker,with,id,broker,id,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,30000,kafka,properties,put,zookeeper,connection,timeout,ms,30000,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,kafka,server,server,new,kafka,server,kafka,config,system,time,module,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1499314317;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		LOG.info("Starting broker with id {}", brokerId)__		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", "30000")__		kafkaProperties.put("zookeeper.connection.timeout.ms", "30000")__		if (additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,log,info,starting,broker,with,id,broker,id,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,30000,kafka,properties,put,zookeeper,connection,timeout,ms,30000,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,kafka,server,server,new,kafka,server,kafka,config,system,time,module,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1500863121;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		LOG.info("Starting broker with id {}", brokerId)__		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", "30000")__		kafkaProperties.put("zookeeper.connection.timeout.ms", "30000")__		if (additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,log,info,starting,broker,with,id,broker,id,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,30000,kafka,properties,put,zookeeper,connection,timeout,ms,30000,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,kafka,server,server,new,kafka,server,kafka,config,system,time,module,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1502179982;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		LOG.info("Starting broker with id {}", brokerId)__		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", "30000")__		kafkaProperties.put("zookeeper.connection.timeout.ms", "30000")__		if (config.getKafkaServerProperties() != null) {_			kafkaProperties.putAll(config.getKafkaServerProperties())__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,log,info,starting,broker,with,id,broker,id,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,30000,kafka,properties,put,zookeeper,connection,timeout,ms,30000,if,config,get,kafka,server,properties,null,kafka,properties,put,all,config,get,kafka,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,kafka,server,server,new,kafka,server,kafka,config,system,time,module,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1502179982;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		LOG.info("Starting broker with id {}", brokerId)__		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", "30000")__		kafkaProperties.put("zookeeper.connection.timeout.ms", "30000")__		if (config.getKafkaServerProperties() != null) {_			kafkaProperties.putAll(config.getKafkaServerProperties())__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			if (config.isHideKafkaBehindProxy()) {_				NetworkFailuresProxy proxy = createProxy(KAFKA_HOST, kafkaPort)__				kafkaProperties.put("advertised.port", Integer.toString(proxy.getLocalPort()))__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,log,info,starting,broker,with,id,broker,id,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,30000,kafka,properties,put,zookeeper,connection,timeout,ms,30000,if,config,get,kafka,server,properties,null,kafka,properties,put,all,config,get,kafka,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,config,is,hide,kafka,behind,proxy,network,failures,proxy,proxy,create,proxy,kafka,port,kafka,properties,put,advertised,port,integer,to,string,proxy,get,local,port,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,kafka,server,server,new,kafka,server,kafka,config,system,time,module,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1509404699;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		LOG.info("Starting broker with id {}", brokerId)__		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", "30000")__		kafkaProperties.put("zookeeper.connection.timeout.ms", "30000")__		if (config.getKafkaServerProperties() != null) {_			kafkaProperties.putAll(config.getKafkaServerProperties())__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			if (config.isHideKafkaBehindProxy()) {_				NetworkFailuresProxy proxy = createProxy(KAFKA_HOST, kafkaPort)__				kafkaProperties.put("advertised.port", Integer.toString(proxy.getLocalPort()))__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,log,info,starting,broker,with,id,broker,id,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,30000,kafka,properties,put,zookeeper,connection,timeout,ms,30000,if,config,get,kafka,server,properties,null,kafka,properties,put,all,config,get,kafka,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,config,is,hide,kafka,behind,proxy,network,failures,proxy,proxy,create,proxy,kafka,port,kafka,properties,put,advertised,port,integer,to,string,proxy,get,local,port,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,kafka,server,server,new,kafka,server,kafka,config,system,time,module,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1550834396;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		LOG.info("Starting broker with id {}", brokerId)__		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", "30000")__		kafkaProperties.put("zookeeper.connection.timeout.ms", "30000")__		if (config.getKafkaServerProperties() != null) {_			kafkaProperties.putAll(config.getKafkaServerProperties())__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			if (config.isHideKafkaBehindProxy()) {_				NetworkFailuresProxy proxy = createProxy(KAFKA_HOST, kafkaPort)__				kafkaProperties.put("advertised.port", Integer.toString(proxy.getLocalPort()))__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,log,info,starting,broker,with,id,broker,id,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,30000,kafka,properties,put,zookeeper,connection,timeout,ms,30000,if,config,get,kafka,server,properties,null,kafka,properties,put,all,config,get,kafka,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,config,is,hide,kafka,behind,proxy,network,failures,proxy,proxy,create,proxy,kafka,port,kafka,properties,put,advertised,port,integer,to,string,proxy,get,local,port,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,kafka,server,server,new,kafka,server,kafka,config,system,time,module,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> public CuratorFramework createCuratorClient();1480685315;Only for the 0.8 server we need access to the zk client.;public CuratorFramework createCuratorClient() {_		RetryPolicy retryPolicy = new ExponentialBackoffRetry(100, 10)__		CuratorFramework curatorClient = CuratorFrameworkFactory.newClient(standardProps.getProperty("zookeeper.connect"), retryPolicy)__		curatorClient.start()__		return curatorClient__	};only,for,the,0,8,server,we,need,access,to,the,zk,client;public,curator,framework,create,curator,client,retry,policy,retry,policy,new,exponential,backoff,retry,100,10,curator,framework,curator,client,curator,framework,factory,new,client,standard,props,get,property,zookeeper,connect,retry,policy,curator,client,start,return,curator,client
KafkaTestEnvironmentImpl -> public CuratorFramework createCuratorClient();1487173364;Only for the 0.8 server we need access to the zk client.;public CuratorFramework createCuratorClient() {_		RetryPolicy retryPolicy = new ExponentialBackoffRetry(100, 10)__		CuratorFramework curatorClient = CuratorFrameworkFactory.newClient(standardProps.getProperty("zookeeper.connect"), retryPolicy)__		curatorClient.start()__		return curatorClient__	};only,for,the,0,8,server,we,need,access,to,the,zk,client;public,curator,framework,create,curator,client,retry,policy,retry,policy,new,exponential,backoff,retry,100,10,curator,framework,curator,client,curator,framework,factory,new,client,standard,props,get,property,zookeeper,connect,retry,policy,curator,client,start,return,curator,client
KafkaTestEnvironmentImpl -> public CuratorFramework createCuratorClient();1488437582;Only for the 0.8 server we need access to the zk client.;public CuratorFramework createCuratorClient() {_		RetryPolicy retryPolicy = new ExponentialBackoffRetry(100, 10)__		CuratorFramework curatorClient = CuratorFrameworkFactory.newClient(standardProps.getProperty("zookeeper.connect"), retryPolicy)__		curatorClient.start()__		return curatorClient__	};only,for,the,0,8,server,we,need,access,to,the,zk,client;public,curator,framework,create,curator,client,retry,policy,retry,policy,new,exponential,backoff,retry,100,10,curator,framework,curator,client,curator,framework,factory,new,client,standard,props,get,property,zookeeper,connect,retry,policy,curator,client,start,return,curator,client
KafkaTestEnvironmentImpl -> public CuratorFramework createCuratorClient();1495175928;Only for the 0.8 server we need access to the zk client.;public CuratorFramework createCuratorClient() {_		RetryPolicy retryPolicy = new ExponentialBackoffRetry(100, 10)__		CuratorFramework curatorClient = CuratorFrameworkFactory.newClient(standardProps.getProperty("zookeeper.connect"), retryPolicy)__		curatorClient.start()__		return curatorClient__	};only,for,the,0,8,server,we,need,access,to,the,zk,client;public,curator,framework,create,curator,client,retry,policy,retry,policy,new,exponential,backoff,retry,100,10,curator,framework,curator,client,curator,framework,factory,new,client,standard,props,get,property,zookeeper,connect,retry,policy,curator,client,start,return,curator,client
KafkaTestEnvironmentImpl -> public CuratorFramework createCuratorClient();1495923077;Only for the 0.8 server we need access to the zk client.;public CuratorFramework createCuratorClient() {_		RetryPolicy retryPolicy = new ExponentialBackoffRetry(100, 10)__		CuratorFramework curatorClient = CuratorFrameworkFactory.newClient(standardProps.getProperty("zookeeper.connect"), retryPolicy)__		curatorClient.start()__		return curatorClient__	};only,for,the,0,8,server,we,need,access,to,the,zk,client;public,curator,framework,create,curator,client,retry,policy,retry,policy,new,exponential,backoff,retry,100,10,curator,framework,curator,client,curator,framework,factory,new,client,standard,props,get,property,zookeeper,connect,retry,policy,curator,client,start,return,curator,client
KafkaTestEnvironmentImpl -> public CuratorFramework createCuratorClient();1498894422;Only for the 0.8 server we need access to the zk client.;public CuratorFramework createCuratorClient() {_		RetryPolicy retryPolicy = new ExponentialBackoffRetry(100, 10)__		CuratorFramework curatorClient = CuratorFrameworkFactory.newClient(standardProps.getProperty("zookeeper.connect"), retryPolicy)__		curatorClient.start()__		return curatorClient__	};only,for,the,0,8,server,we,need,access,to,the,zk,client;public,curator,framework,create,curator,client,retry,policy,retry,policy,new,exponential,backoff,retry,100,10,curator,framework,curator,client,curator,framework,factory,new,client,standard,props,get,property,zookeeper,connect,retry,policy,curator,client,start,return,curator,client
KafkaTestEnvironmentImpl -> public CuratorFramework createCuratorClient();1499314317;Only for the 0.8 server we need access to the zk client.;public CuratorFramework createCuratorClient() {_		RetryPolicy retryPolicy = new ExponentialBackoffRetry(100, 10)__		CuratorFramework curatorClient = CuratorFrameworkFactory.newClient(standardProps.getProperty("zookeeper.connect"), retryPolicy)__		curatorClient.start()__		return curatorClient__	};only,for,the,0,8,server,we,need,access,to,the,zk,client;public,curator,framework,create,curator,client,retry,policy,retry,policy,new,exponential,backoff,retry,100,10,curator,framework,curator,client,curator,framework,factory,new,client,standard,props,get,property,zookeeper,connect,retry,policy,curator,client,start,return,curator,client
KafkaTestEnvironmentImpl -> public CuratorFramework createCuratorClient();1500863121;Only for the 0.8 server we need access to the zk client.;public CuratorFramework createCuratorClient() {_		RetryPolicy retryPolicy = new ExponentialBackoffRetry(100, 10)__		CuratorFramework curatorClient = CuratorFrameworkFactory.newClient(standardProps.getProperty("zookeeper.connect"), retryPolicy)__		curatorClient.start()__		return curatorClient__	};only,for,the,0,8,server,we,need,access,to,the,zk,client;public,curator,framework,create,curator,client,retry,policy,retry,policy,new,exponential,backoff,retry,100,10,curator,framework,curator,client,curator,framework,factory,new,client,standard,props,get,property,zookeeper,connect,retry,policy,curator,client,start,return,curator,client
KafkaTestEnvironmentImpl -> public CuratorFramework createCuratorClient();1502179982;Only for the 0.8 server we need access to the zk client.;public CuratorFramework createCuratorClient() {_		RetryPolicy retryPolicy = new ExponentialBackoffRetry(100, 10)__		CuratorFramework curatorClient = CuratorFrameworkFactory.newClient(standardProps.getProperty("zookeeper.connect"), retryPolicy)__		curatorClient.start()__		return curatorClient__	};only,for,the,0,8,server,we,need,access,to,the,zk,client;public,curator,framework,create,curator,client,retry,policy,retry,policy,new,exponential,backoff,retry,100,10,curator,framework,curator,client,curator,framework,factory,new,client,standard,props,get,property,zookeeper,connect,retry,policy,curator,client,start,return,curator,client
KafkaTestEnvironmentImpl -> public CuratorFramework createCuratorClient();1502179982;Only for the 0.8 server we need access to the zk client.;public CuratorFramework createCuratorClient() {_		RetryPolicy retryPolicy = new ExponentialBackoffRetry(100, 10)__		CuratorFramework curatorClient = CuratorFrameworkFactory.newClient(standardProps.getProperty("zookeeper.connect"), retryPolicy)__		curatorClient.start()__		return curatorClient__	};only,for,the,0,8,server,we,need,access,to,the,zk,client;public,curator,framework,create,curator,client,retry,policy,retry,policy,new,exponential,backoff,retry,100,10,curator,framework,curator,client,curator,framework,factory,new,client,standard,props,get,property,zookeeper,connect,retry,policy,curator,client,start,return,curator,client
KafkaTestEnvironmentImpl -> public CuratorFramework createCuratorClient();1509404699;Only for the 0.8 server we need access to the zk client.;public CuratorFramework createCuratorClient() {_		RetryPolicy retryPolicy = new ExponentialBackoffRetry(100, 10)__		CuratorFramework curatorClient = CuratorFrameworkFactory.newClient(standardProps.getProperty("zookeeper.connect"), retryPolicy)__		curatorClient.start()__		return curatorClient__	};only,for,the,0,8,server,we,need,access,to,the,zk,client;public,curator,framework,create,curator,client,retry,policy,retry,policy,new,exponential,backoff,retry,100,10,curator,framework,curator,client,curator,framework,factory,new,client,standard,props,get,property,zookeeper,connect,retry,policy,curator,client,start,return,curator,client
KafkaTestEnvironmentImpl -> public CuratorFramework createCuratorClient();1550834396;Only for the 0.8 server we need access to the zk client.;public CuratorFramework createCuratorClient() {_		RetryPolicy retryPolicy = new ExponentialBackoffRetry(100, 10)__		CuratorFramework curatorClient = CuratorFrameworkFactory.newClient(standardProps.getProperty("zookeeper.connect"), retryPolicy)__		curatorClient.start()__		return curatorClient__	};only,for,the,0,8,server,we,need,access,to,the,zk,client;public,curator,framework,create,curator,client,retry,policy,retry,policy,new,exponential,backoff,retry,100,10,curator,framework,curator,client,curator,framework,factory,new,client,standard,props,get,property,zookeeper,connect,retry,policy,curator,client,start,return,curator,client
