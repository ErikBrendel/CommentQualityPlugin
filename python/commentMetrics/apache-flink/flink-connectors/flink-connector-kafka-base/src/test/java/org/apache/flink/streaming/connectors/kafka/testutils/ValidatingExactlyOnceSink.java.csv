commented;modifiers;parameterAmount;loc;comment;code
false;public;1;21;;@Override public void invoke(Integer value) throws Exception {     numElements++.     if (duplicateChecker.get(value)) {         throw new Exception("Received a duplicate: " + value).     }     duplicateChecker.set(value).     if (numElements == numElementsTotal) {         // validate         if (duplicateChecker.cardinality() != numElementsTotal) {             throw new Exception("Duplicate checker has wrong cardinality").         } else if (duplicateChecker.nextClearBit(0) != numElementsTotal) {             throw new Exception("Received sparse sequence").         } else {             throw new SuccessException().         }     } }
false;public;2;5;;@Override public List<Tuple2<Integer, BitSet>> snapshotState(long checkpointId, long timestamp) throws Exception {     LOG.info("Snapshot of counter " + numElements + " at checkpoint " + checkpointId).     return Collections.singletonList(new Tuple2<>(numElements, duplicateChecker)). }
false;public;1;11;;@Override public void restoreState(List<Tuple2<Integer, BitSet>> state) throws Exception {     if (state.isEmpty() || state.size() > 1) {         throw new RuntimeException("Test failed due to unexpected recovered state size " + state.size()).     }     Tuple2<Integer, BitSet> s = state.get(0).     LOG.info("restoring num elements to {}", s.f0).     this.numElements = s.f0.     this.duplicateChecker = s.f1. }
