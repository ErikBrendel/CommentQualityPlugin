commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void open(Configuration parameters) {     failer = getRuntimeContext().getIndexOfThisSubtask() == 0.     printer = new Thread(this, "FailingIdentityMapper Status Printer").     printer.start(). }
false;public;1;16;;@Override public T map(T value) throws Exception {     numElementsTotal++.     numElementsThisTime++.     if (!failedBefore) {         Thread.sleep(10).         if (failer && numElementsTotal >= failCount) {             hasBeenCheckpointedBeforeFailure = hasBeenCheckpointed.             failedBefore = true.             throw new Exception("Artificial Test Failure").         }     }     return value. }
false;public;0;8;;@Override public void close() throws Exception {     printerRunning = false.     if (printer != null) {         printer.interrupt().         printer = null.     } }
false;public;1;4;;@Override public void notifyCheckpointComplete(long checkpointId) {     this.hasBeenCheckpointed = true. }
false;public;2;4;;@Override public List<Integer> snapshotState(long checkpointId, long timestamp) throws Exception {     return Collections.singletonList(numElementsTotal). }
false;public;1;7;;@Override public void restoreState(List<Integer> state) throws Exception {     if (state.isEmpty() || state.size() > 1) {         throw new RuntimeException("Test failed due to unexpected recovered state size " + state.size()).     }     this.numElementsTotal = state.get(0). }
false;public;0;14;;@Override public void run() {     while (printerRunning) {         try {             Thread.sleep(5000).         } catch (InterruptedException e) {         // ignore         }         LOG.info("============================> Failing mapper  {}: count={}, totalCount={}", getRuntimeContext().getIndexOfThisSubtask(), numElementsThisTime, numElementsTotal).     } }
