commented;modifiers;parameterAmount;loc;comment;code
false;public;0;35;;@Override public List<Descriptor> descriptors() {     final Descriptor earliestDesc = new Kafka().version("0.8").startFromEarliest().topic("WhateverTopic").     final Descriptor specificOffsetsDesc = new Kafka().version("0.11").topic("MyTable").startFromSpecificOffset(0, 42L).startFromSpecificOffset(1, 300L).property("zookeeper.stuff", "12").property("kafka.stuff", "42").     final Map<Integer, Long> offsets = new HashMap<>().     offsets.put(0, 42L).     offsets.put(1, 300L).     final Properties properties = new Properties().     properties.put("zookeeper.stuff", "12").     properties.put("kafka.stuff", "42").     final Descriptor specificOffsetsMapDesc = new Kafka().version("0.11").topic("MyTable").startFromSpecificOffsets(offsets).properties(properties).sinkPartitionerCustom(FlinkFixedPartitioner.class).     return Arrays.asList(earliestDesc, specificOffsetsDesc, specificOffsetsMapDesc). }
false;public;0;43;;@Override public List<Map<String, String>> properties() {     final Map<String, String> props1 = new HashMap<>().     props1.put("connector.property-version", "1").     props1.put("connector.type", "kafka").     props1.put("connector.version", "0.8").     props1.put("connector.topic", "WhateverTopic").     props1.put("connector.startup-mode", "earliest-offset").     final Map<String, String> props2 = new HashMap<>().     props2.put("connector.property-version", "1").     props2.put("connector.type", "kafka").     props2.put("connector.version", "0.11").     props2.put("connector.topic", "MyTable").     props2.put("connector.startup-mode", "specific-offsets").     props2.put("connector.specific-offsets.0.partition", "0").     props2.put("connector.specific-offsets.0.offset", "42").     props2.put("connector.specific-offsets.1.partition", "1").     props2.put("connector.specific-offsets.1.offset", "300").     props2.put("connector.properties.0.key", "zookeeper.stuff").     props2.put("connector.properties.0.value", "12").     props2.put("connector.properties.1.key", "kafka.stuff").     props2.put("connector.properties.1.value", "42").     final Map<String, String> props3 = new HashMap<>().     props3.put("connector.property-version", "1").     props3.put("connector.type", "kafka").     props3.put("connector.version", "0.11").     props3.put("connector.topic", "MyTable").     props3.put("connector.startup-mode", "specific-offsets").     props3.put("connector.specific-offsets.0.partition", "0").     props3.put("connector.specific-offsets.0.offset", "42").     props3.put("connector.specific-offsets.1.partition", "1").     props3.put("connector.specific-offsets.1.offset", "300").     props3.put("connector.properties.0.key", "zookeeper.stuff").     props3.put("connector.properties.0.value", "12").     props3.put("connector.properties.1.key", "kafka.stuff").     props3.put("connector.properties.1.value", "42").     props3.put("connector.sink-partitioner", "custom").     props3.put("connector.sink-partitioner-class", FlinkFixedPartitioner.class.getName()).     return Arrays.asList(props1, props2, props3). }
false;public;0;4;;@Override public DescriptorValidator validator() {     return new KafkaValidator(). }
