# id;timestamp;commentText;codeText;commentWords;codeWords
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1480685315;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none"_@throws Exception;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1__		_		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env =_				StreamExecutionEnvironment.createRemoteEnvironment("localhost", flink.getLeaderRPCPort())__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()__		_		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch(Throwable e) {_			System.out.println("MESSAGE: " + e.getCause().getCause().getMessage())__			_			if(!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _			 && !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none,throws,exception;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,flink,get,leader,rpcport,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,system,out,println,message,e,get,cause,get,cause,get,message,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1487173364;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none"_@throws Exception;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1__		_		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env =_				StreamExecutionEnvironment.createRemoteEnvironment("localhost", flink.getLeaderRPCPort())__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()__		_		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch(Throwable e) {_			_			if(!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _			 && !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none,throws,exception;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,flink,get,leader,rpcport,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1488217628;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none"_@throws Exception;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1__		_		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env =_				StreamExecutionEnvironment.createRemoteEnvironment("localhost", flink.getLeaderRPCPort())__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()__		_		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch(Throwable e) {_			_			if(!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _			 && !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none,throws,exception;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,flink,get,leader,rpcport,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1491500150;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none"_@throws Exception;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1__		_		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env =_				StreamExecutionEnvironment.createRemoteEnvironment("localhost", flink.getLeaderRPCPort())__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()__		_		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch(Throwable e) {_			_			if(!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _			 && !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none,throws,exception;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,flink,get,leader,rpcport,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1493975167;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none"_@throws Exception;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1__		_		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env =_				StreamExecutionEnvironment.createRemoteEnvironment("localhost", flink.getLeaderRPCPort())__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()__		_		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch(Throwable e) {_			_			if(!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _			 && !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none,throws,exception;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,flink,get,leader,rpcport,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1495923077;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none"._@throws Exception;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1___		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env =_				StreamExecutionEnvironment.createRemoteEnvironment("localhost", flink.getLeaderRPCPort())__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()___		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch (Throwable e) {_			_			if (!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _				&& !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none,throws,exception;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,flink,get,leader,rpcport,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1502179982;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none"._@throws Exception;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1___		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env =_				StreamExecutionEnvironment.createRemoteEnvironment("localhost", flink.getLeaderRPCPort())__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()___		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch (Throwable e) {_			_			if (!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _				&& !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none,throws,exception;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,flink,get,leader,rpcport,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1502179982;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none"._@throws Exception;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1___		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env =_				StreamExecutionEnvironment.createRemoteEnvironment("localhost", flink.getLeaderRPCPort())__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()___		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch (Throwable e) {_			_			if (!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _				&& !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none,throws,exception;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,flink,get,leader,rpcport,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1509404699;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none"._@throws Exception;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1___		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env =_				StreamExecutionEnvironment.createRemoteEnvironment("localhost", flink.getLeaderRPCPort())__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()___		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch (Throwable e) {_			_			if (!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _				&& !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none,throws,exception;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,flink,get,leader,rpcport,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1509723634;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none"._@throws Exception;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1___		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env =_				StreamExecutionEnvironment.createRemoteEnvironment("localhost", flink.getLeaderRPCPort())__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()___		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch (Throwable e) {_			_			if (!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _				&& !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none,throws,exception;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,flink,get,leader,rpcport,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1521056783;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none"._@throws Exception;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1___		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()___		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch (Throwable e) {_			_			if (!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _				&& !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none,throws,exception;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1525452496;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none".;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1___		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()___		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch (Throwable e) {_			_			if (!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _				&& !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1529682304;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none".;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1___		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()___		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch (Throwable e) {_			_			if (!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _				&& !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1530798894;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none".;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1___		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()___		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch (Throwable e) {_			_			if (!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _				&& !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1540389860;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none".;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1___		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()___		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch (Throwable e) {_			_			if (!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _				&& !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
KafkaShortRetentionTestBase -> public void runFailOnAutoOffsetResetNone() throws Exception;1550834396;Ensure that the consumer is properly failing if "auto.offset.reset" is set to "none".;public void runFailOnAutoOffsetResetNone() throws Exception {_		final String topic = "auto-offset-reset-none-test"__		final int parallelism = 1___		kafkaServer.createTestTopic(topic, parallelism, 1)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(parallelism)__		env.setRestartStrategy(RestartStrategies.noRestart())_ _		env.getConfig().disableSysoutLogging()___		__		Properties customProps = new Properties()__		customProps.putAll(standardProps)__		customProps.putAll(secureProps)__		customProps.setProperty("auto.offset.reset", "none")_ _		FlinkKafkaConsumerBase<String> source = kafkaServer.getConsumer(topic, new SimpleStringSchema(), customProps)___		DataStreamSource<String> consuming = env.addSource(source)__		consuming.addSink(new DiscardingSink<String>())___		try {_			env.execute("Test auto offset reset none")__		} catch (Throwable e) {_			_			if (!e.getCause().getCause().getMessage().contains("Unable to find previous offset")  _				&& !e.getCause().getCause().getMessage().contains("Undefined offset with no reset policy for partition") _					) {_				throw e__			}_		}__		kafkaServer.deleteTestTopic(topic)__	};ensure,that,the,consumer,is,properly,failing,if,auto,offset,reset,is,set,to,none;public,void,run,fail,on,auto,offset,reset,none,throws,exception,final,string,topic,auto,offset,reset,none,test,final,int,parallelism,1,kafka,server,create,test,topic,topic,parallelism,1,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,parallelism,env,set,restart,strategy,restart,strategies,no,restart,env,get,config,disable,sysout,logging,properties,custom,props,new,properties,custom,props,put,all,standard,props,custom,props,put,all,secure,props,custom,props,set,property,auto,offset,reset,none,flink,kafka,consumer,base,string,source,kafka,server,get,consumer,topic,new,simple,string,schema,custom,props,data,stream,source,string,consuming,env,add,source,source,consuming,add,sink,new,discarding,sink,string,try,env,execute,test,auto,offset,reset,none,catch,throwable,e,if,e,get,cause,get,cause,get,message,contains,unable,to,find,previous,offset,e,get,cause,get,cause,get,message,contains,undefined,offset,with,no,reset,policy,for,partition,throw,e,kafka,server,delete,test,topic,topic
