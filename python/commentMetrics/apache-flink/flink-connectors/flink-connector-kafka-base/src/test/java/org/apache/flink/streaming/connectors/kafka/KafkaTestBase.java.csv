# id;timestamp;commentText;codeText;commentWords;codeWords
KafkaTestBase -> protected void assertExactlyOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			List<Integer> expectedElements, 			long timeoutMillis);1541587192;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertExactlyOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			List<Integer> expectedElements,_			long timeoutMillis) {__		long startMillis = System.currentTimeMillis()__		List<Integer> actualElements = new ArrayList<>()___		Properties consumerProperties = new Properties()__		consumerProperties.putAll(properties)__		consumerProperties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("isolation.level", "read_committed")___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(consumerProperties, topic, partition, 1000)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.equals(expectedElements)) {_				return__			}_			_			if (actualElements.size() > expectedElements.size()) {_				break__			}_		}__		fail(String.format("Expected number of elements: <%s>, but was: <%s>", expectedElements.size(), actualElements.size()))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,exactly,once,for,topic,properties,properties,string,topic,int,partition,list,integer,expected,elements,long,timeout,millis,long,start,millis,system,current,time,millis,list,integer,actual,elements,new,array,list,properties,consumer,properties,new,properties,consumer,properties,put,all,properties,consumer,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,isolation,level,while,system,current,time,millis,start,millis,timeout,millis,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,consumer,properties,topic,partition,1000,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,equals,expected,elements,return,if,actual,elements,size,expected,elements,size,break,fail,string,format,expected,number,of,elements,s,but,was,s,expected,elements,size,actual,elements,size
KafkaTestBase -> protected void assertExactlyOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			List<Integer> expectedElements, 			long timeoutMillis);1549282380;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertExactlyOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			List<Integer> expectedElements,_			long timeoutMillis) {__		long startMillis = System.currentTimeMillis()__		List<Integer> actualElements = new ArrayList<>()___		Properties consumerProperties = new Properties()__		consumerProperties.putAll(properties)__		consumerProperties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("isolation.level", "read_committed")___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(consumerProperties, topic, partition, 1000)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.equals(expectedElements)) {_				return__			}_			_			if (actualElements.size() > expectedElements.size()) {_				break__			}_		}__		fail(String.format("Expected number of elements: <%s>, but was: <%s>", expectedElements.size(), actualElements.size()))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,exactly,once,for,topic,properties,properties,string,topic,int,partition,list,integer,expected,elements,long,timeout,millis,long,start,millis,system,current,time,millis,list,integer,actual,elements,new,array,list,properties,consumer,properties,new,properties,consumer,properties,put,all,properties,consumer,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,isolation,level,while,system,current,time,millis,start,millis,timeout,millis,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,consumer,properties,topic,partition,1000,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,equals,expected,elements,return,if,actual,elements,size,expected,elements,size,break,fail,string,format,expected,number,of,elements,s,but,was,s,expected,elements,size,actual,elements,size
KafkaTestBase -> protected void assertExactlyOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			List<Integer> expectedElements, 			long timeoutMillis) throws Exception;1507568316;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertExactlyOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			List<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		List<Integer> actualElements = new ArrayList<>()___		Properties consumerProperties = new Properties()__		consumerProperties.putAll(properties)__		consumerProperties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("isolation.level", "read_committed")___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(consumerProperties, topic, partition, 1000)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.equals(expectedElements)) {_				return__			}_			_			if (actualElements.size() > expectedElements.size()) {_				break__			}_		}__		fail(String.format("Expected number of elements: <%s>, but was: <%s>", expectedElements.size(), actualElements.size()))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,exactly,once,for,topic,properties,properties,string,topic,int,partition,list,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,list,integer,actual,elements,new,array,list,properties,consumer,properties,new,properties,consumer,properties,put,all,properties,consumer,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,isolation,level,while,system,current,time,millis,start,millis,timeout,millis,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,consumer,properties,topic,partition,1000,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,equals,expected,elements,return,if,actual,elements,size,expected,elements,size,break,fail,string,format,expected,number,of,elements,s,but,was,s,expected,elements,size,actual,elements,size
KafkaTestBase -> protected void assertExactlyOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			List<Integer> expectedElements, 			long timeoutMillis) throws Exception;1509404699;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertExactlyOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			List<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		List<Integer> actualElements = new ArrayList<>()___		Properties consumerProperties = new Properties()__		consumerProperties.putAll(properties)__		consumerProperties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("isolation.level", "read_committed")___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(consumerProperties, topic, partition, 1000)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.equals(expectedElements)) {_				return__			}_			_			if (actualElements.size() > expectedElements.size()) {_				break__			}_		}__		fail(String.format("Expected number of elements: <%s>, but was: <%s>", expectedElements.size(), actualElements.size()))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,exactly,once,for,topic,properties,properties,string,topic,int,partition,list,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,list,integer,actual,elements,new,array,list,properties,consumer,properties,new,properties,consumer,properties,put,all,properties,consumer,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,isolation,level,while,system,current,time,millis,start,millis,timeout,millis,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,consumer,properties,topic,partition,1000,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,equals,expected,elements,return,if,actual,elements,size,expected,elements,size,break,fail,string,format,expected,number,of,elements,s,but,was,s,expected,elements,size,actual,elements,size
KafkaTestBase -> protected void assertExactlyOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			List<Integer> expectedElements, 			long timeoutMillis) throws Exception;1513102155;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertExactlyOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			List<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		List<Integer> actualElements = new ArrayList<>()___		Properties consumerProperties = new Properties()__		consumerProperties.putAll(properties)__		consumerProperties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("isolation.level", "read_committed")___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(consumerProperties, topic, partition, 1000)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.equals(expectedElements)) {_				return__			}_			_			if (actualElements.size() > expectedElements.size()) {_				break__			}_		}__		fail(String.format("Expected number of elements: <%s>, but was: <%s>", expectedElements.size(), actualElements.size()))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,exactly,once,for,topic,properties,properties,string,topic,int,partition,list,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,list,integer,actual,elements,new,array,list,properties,consumer,properties,new,properties,consumer,properties,put,all,properties,consumer,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,isolation,level,while,system,current,time,millis,start,millis,timeout,millis,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,consumer,properties,topic,partition,1000,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,equals,expected,elements,return,if,actual,elements,size,expected,elements,size,break,fail,string,format,expected,number,of,elements,s,but,was,s,expected,elements,size,actual,elements,size
KafkaTestBase -> protected void assertExactlyOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			List<Integer> expectedElements, 			long timeoutMillis) throws Exception;1523020981;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertExactlyOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			List<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		List<Integer> actualElements = new ArrayList<>()___		Properties consumerProperties = new Properties()__		consumerProperties.putAll(properties)__		consumerProperties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("isolation.level", "read_committed")___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(consumerProperties, topic, partition, 1000)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.equals(expectedElements)) {_				return__			}_			_			if (actualElements.size() > expectedElements.size()) {_				break__			}_		}__		fail(String.format("Expected number of elements: <%s>, but was: <%s>", expectedElements.size(), actualElements.size()))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,exactly,once,for,topic,properties,properties,string,topic,int,partition,list,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,list,integer,actual,elements,new,array,list,properties,consumer,properties,new,properties,consumer,properties,put,all,properties,consumer,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,isolation,level,while,system,current,time,millis,start,millis,timeout,millis,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,consumer,properties,topic,partition,1000,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,equals,expected,elements,return,if,actual,elements,size,expected,elements,size,break,fail,string,format,expected,number,of,elements,s,but,was,s,expected,elements,size,actual,elements,size
KafkaTestBase -> protected void assertExactlyOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			List<Integer> expectedElements, 			long timeoutMillis) throws Exception;1529682304;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertExactlyOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			List<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		List<Integer> actualElements = new ArrayList<>()___		Properties consumerProperties = new Properties()__		consumerProperties.putAll(properties)__		consumerProperties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("isolation.level", "read_committed")___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(consumerProperties, topic, partition, 1000)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.equals(expectedElements)) {_				return__			}_			_			if (actualElements.size() > expectedElements.size()) {_				break__			}_		}__		fail(String.format("Expected number of elements: <%s>, but was: <%s>", expectedElements.size(), actualElements.size()))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,exactly,once,for,topic,properties,properties,string,topic,int,partition,list,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,list,integer,actual,elements,new,array,list,properties,consumer,properties,new,properties,consumer,properties,put,all,properties,consumer,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,isolation,level,while,system,current,time,millis,start,millis,timeout,millis,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,consumer,properties,topic,partition,1000,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,equals,expected,elements,return,if,actual,elements,size,expected,elements,size,break,fail,string,format,expected,number,of,elements,s,but,was,s,expected,elements,size,actual,elements,size
KafkaTestBase -> protected void assertExactlyOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			List<Integer> expectedElements, 			long timeoutMillis) throws Exception;1529682304;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertExactlyOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			List<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		List<Integer> actualElements = new ArrayList<>()___		Properties consumerProperties = new Properties()__		consumerProperties.putAll(properties)__		consumerProperties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("isolation.level", "read_committed")___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(consumerProperties, topic, partition, 1000)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.equals(expectedElements)) {_				return__			}_			_			if (actualElements.size() > expectedElements.size()) {_				break__			}_		}__		fail(String.format("Expected number of elements: <%s>, but was: <%s>", expectedElements.size(), actualElements.size()))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,exactly,once,for,topic,properties,properties,string,topic,int,partition,list,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,list,integer,actual,elements,new,array,list,properties,consumer,properties,new,properties,consumer,properties,put,all,properties,consumer,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,isolation,level,while,system,current,time,millis,start,millis,timeout,millis,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,consumer,properties,topic,partition,1000,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,equals,expected,elements,return,if,actual,elements,size,expected,elements,size,break,fail,string,format,expected,number,of,elements,s,but,was,s,expected,elements,size,actual,elements,size
KafkaTestBase -> protected void assertExactlyOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			List<Integer> expectedElements, 			long timeoutMillis) throws Exception;1530798894;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertExactlyOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			List<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		List<Integer> actualElements = new ArrayList<>()___		Properties consumerProperties = new Properties()__		consumerProperties.putAll(properties)__		consumerProperties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("isolation.level", "read_committed")___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(consumerProperties, topic, partition, 1000)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.equals(expectedElements)) {_				return__			}_			_			if (actualElements.size() > expectedElements.size()) {_				break__			}_		}__		fail(String.format("Expected number of elements: <%s>, but was: <%s>", expectedElements.size(), actualElements.size()))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,exactly,once,for,topic,properties,properties,string,topic,int,partition,list,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,list,integer,actual,elements,new,array,list,properties,consumer,properties,new,properties,consumer,properties,put,all,properties,consumer,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,isolation,level,while,system,current,time,millis,start,millis,timeout,millis,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,consumer,properties,topic,partition,1000,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,equals,expected,elements,return,if,actual,elements,size,expected,elements,size,break,fail,string,format,expected,number,of,elements,s,but,was,s,expected,elements,size,actual,elements,size
KafkaTestBase -> protected void assertExactlyOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			List<Integer> expectedElements, 			long timeoutMillis) throws Exception;1540389860;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertExactlyOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			List<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		List<Integer> actualElements = new ArrayList<>()___		Properties consumerProperties = new Properties()__		consumerProperties.putAll(properties)__		consumerProperties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__		consumerProperties.put("isolation.level", "read_committed")___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(consumerProperties, topic, partition, 1000)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.equals(expectedElements)) {_				return__			}_			_			if (actualElements.size() > expectedElements.size()) {_				break__			}_		}__		fail(String.format("Expected number of elements: <%s>, but was: <%s>", expectedElements.size(), actualElements.size()))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,exactly,once,for,topic,properties,properties,string,topic,int,partition,list,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,list,integer,actual,elements,new,array,list,properties,consumer,properties,new,properties,consumer,properties,put,all,properties,consumer,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,consumer,properties,put,isolation,level,while,system,current,time,millis,start,millis,timeout,millis,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,consumer,properties,topic,partition,1000,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,equals,expected,elements,return,if,actual,elements,size,expected,elements,size,break,fail,string,format,expected,number,of,elements,s,but,was,s,expected,elements,size,actual,elements,size
KafkaTestBase -> protected void assertAtLeastOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			Set<Integer> expectedElements, 			long timeoutMillis) throws Exception;1507568316;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertAtLeastOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			Set<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		Set<Integer> actualElements = new HashSet<>()___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			properties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__			properties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")___			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(properties, topic, partition, 100)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.containsAll(expectedElements)) {_				return__			}_		}__		fail(String.format("Expected to contain all of: <%s>, but was: <%s>", expectedElements, actualElements))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,at,least,once,for,topic,properties,properties,string,topic,int,partition,set,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,set,integer,actual,elements,new,hash,set,while,system,current,time,millis,start,millis,timeout,millis,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,properties,topic,partition,100,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,contains,all,expected,elements,return,fail,string,format,expected,to,contain,all,of,s,but,was,s,expected,elements,actual,elements
KafkaTestBase -> protected void assertAtLeastOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			Set<Integer> expectedElements, 			long timeoutMillis) throws Exception;1509404699;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertAtLeastOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			Set<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		Set<Integer> actualElements = new HashSet<>()___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			properties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__			properties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")___			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(properties, topic, partition, 100)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.containsAll(expectedElements)) {_				return__			}_		}__		fail(String.format("Expected to contain all of: <%s>, but was: <%s>", expectedElements, actualElements))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,at,least,once,for,topic,properties,properties,string,topic,int,partition,set,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,set,integer,actual,elements,new,hash,set,while,system,current,time,millis,start,millis,timeout,millis,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,properties,topic,partition,100,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,contains,all,expected,elements,return,fail,string,format,expected,to,contain,all,of,s,but,was,s,expected,elements,actual,elements
KafkaTestBase -> protected void assertAtLeastOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			Set<Integer> expectedElements, 			long timeoutMillis) throws Exception;1513102155;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertAtLeastOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			Set<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		Set<Integer> actualElements = new HashSet<>()___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			properties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__			properties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")___			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(properties, topic, partition, 100)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.containsAll(expectedElements)) {_				return__			}_		}__		fail(String.format("Expected to contain all of: <%s>, but was: <%s>", expectedElements, actualElements))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,at,least,once,for,topic,properties,properties,string,topic,int,partition,set,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,set,integer,actual,elements,new,hash,set,while,system,current,time,millis,start,millis,timeout,millis,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,properties,topic,partition,100,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,contains,all,expected,elements,return,fail,string,format,expected,to,contain,all,of,s,but,was,s,expected,elements,actual,elements
KafkaTestBase -> protected void assertAtLeastOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			Set<Integer> expectedElements, 			long timeoutMillis) throws Exception;1523020981;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertAtLeastOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			Set<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		Set<Integer> actualElements = new HashSet<>()___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			properties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__			properties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")___			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(properties, topic, partition, 100)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.containsAll(expectedElements)) {_				return__			}_		}__		fail(String.format("Expected to contain all of: <%s>, but was: <%s>", expectedElements, actualElements))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,at,least,once,for,topic,properties,properties,string,topic,int,partition,set,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,set,integer,actual,elements,new,hash,set,while,system,current,time,millis,start,millis,timeout,millis,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,properties,topic,partition,100,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,contains,all,expected,elements,return,fail,string,format,expected,to,contain,all,of,s,but,was,s,expected,elements,actual,elements
KafkaTestBase -> protected void assertAtLeastOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			Set<Integer> expectedElements, 			long timeoutMillis) throws Exception;1529682304;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertAtLeastOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			Set<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		Set<Integer> actualElements = new HashSet<>()___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			properties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__			properties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")___			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(properties, topic, partition, 100)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.containsAll(expectedElements)) {_				return__			}_		}__		fail(String.format("Expected to contain all of: <%s>, but was: <%s>", expectedElements, actualElements))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,at,least,once,for,topic,properties,properties,string,topic,int,partition,set,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,set,integer,actual,elements,new,hash,set,while,system,current,time,millis,start,millis,timeout,millis,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,properties,topic,partition,100,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,contains,all,expected,elements,return,fail,string,format,expected,to,contain,all,of,s,but,was,s,expected,elements,actual,elements
KafkaTestBase -> protected void assertAtLeastOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			Set<Integer> expectedElements, 			long timeoutMillis) throws Exception;1529682304;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertAtLeastOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			Set<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		Set<Integer> actualElements = new HashSet<>()___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			properties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__			properties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")___			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(properties, topic, partition, 100)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.containsAll(expectedElements)) {_				return__			}_		}__		fail(String.format("Expected to contain all of: <%s>, but was: <%s>", expectedElements, actualElements))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,at,least,once,for,topic,properties,properties,string,topic,int,partition,set,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,set,integer,actual,elements,new,hash,set,while,system,current,time,millis,start,millis,timeout,millis,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,properties,topic,partition,100,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,contains,all,expected,elements,return,fail,string,format,expected,to,contain,all,of,s,but,was,s,expected,elements,actual,elements
KafkaTestBase -> protected void assertAtLeastOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			Set<Integer> expectedElements, 			long timeoutMillis) throws Exception;1530798894;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertAtLeastOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			Set<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		Set<Integer> actualElements = new HashSet<>()___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			properties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__			properties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")___			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(properties, topic, partition, 100)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.containsAll(expectedElements)) {_				return__			}_		}__		fail(String.format("Expected to contain all of: <%s>, but was: <%s>", expectedElements, actualElements))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,at,least,once,for,topic,properties,properties,string,topic,int,partition,set,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,set,integer,actual,elements,new,hash,set,while,system,current,time,millis,start,millis,timeout,millis,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,properties,topic,partition,100,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,contains,all,expected,elements,return,fail,string,format,expected,to,contain,all,of,s,but,was,s,expected,elements,actual,elements
KafkaTestBase -> protected void assertAtLeastOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			Set<Integer> expectedElements, 			long timeoutMillis) throws Exception;1540389860;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertAtLeastOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			Set<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		Set<Integer> actualElements = new HashSet<>()___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			properties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__			properties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")___			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(properties, topic, partition, 100)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.containsAll(expectedElements)) {_				return__			}_		}__		fail(String.format("Expected to contain all of: <%s>, but was: <%s>", expectedElements, actualElements))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,at,least,once,for,topic,properties,properties,string,topic,int,partition,set,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,set,integer,actual,elements,new,hash,set,while,system,current,time,millis,start,millis,timeout,millis,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,properties,topic,partition,100,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,contains,all,expected,elements,return,fail,string,format,expected,to,contain,all,of,s,but,was,s,expected,elements,actual,elements
KafkaTestBase -> protected void assertAtLeastOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			Set<Integer> expectedElements, 			long timeoutMillis) throws Exception;1541587192;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertAtLeastOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			Set<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		Set<Integer> actualElements = new HashSet<>()___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			properties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__			properties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")___			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(properties, topic, partition, 100)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.containsAll(expectedElements)) {_				return__			}_		}__		fail(String.format("Expected to contain all of: <%s>, but was: <%s>", expectedElements, actualElements))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,at,least,once,for,topic,properties,properties,string,topic,int,partition,set,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,set,integer,actual,elements,new,hash,set,while,system,current,time,millis,start,millis,timeout,millis,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,properties,topic,partition,100,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,contains,all,expected,elements,return,fail,string,format,expected,to,contain,all,of,s,but,was,s,expected,elements,actual,elements
KafkaTestBase -> protected void assertAtLeastOnceForTopic( 			Properties properties, 			String topic, 			int partition, 			Set<Integer> expectedElements, 			long timeoutMillis) throws Exception;1549282380;We manually handle the timeout instead of using JUnit's timeout to return failure instead of timeout error._After timeout we assume that there are missing records and there is a bug, not that the test has run out of time.;protected void assertAtLeastOnceForTopic(_			Properties properties,_			String topic,_			int partition,_			Set<Integer> expectedElements,_			long timeoutMillis) throws Exception {__		long startMillis = System.currentTimeMillis()__		Set<Integer> actualElements = new HashSet<>()___		_		while (System.currentTimeMillis() < startMillis + timeoutMillis) {_			properties.put("key.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")__			properties.put("value.deserializer", "org.apache.kafka.common.serialization.IntegerDeserializer")___			_			Collection<ConsumerRecord<Integer, Integer>> records = kafkaServer.getAllRecordsFromTopic(properties, topic, partition, 100)___			for (ConsumerRecord<Integer, Integer> record : records) {_				actualElements.add(record.value())__			}__			_			if (actualElements.containsAll(expectedElements)) {_				return__			}_		}__		fail(String.format("Expected to contain all of: <%s>, but was: <%s>", expectedElements, actualElements))__	};we,manually,handle,the,timeout,instead,of,using,junit,s,timeout,to,return,failure,instead,of,timeout,error,after,timeout,we,assume,that,there,are,missing,records,and,there,is,a,bug,not,that,the,test,has,run,out,of,time;protected,void,assert,at,least,once,for,topic,properties,properties,string,topic,int,partition,set,integer,expected,elements,long,timeout,millis,throws,exception,long,start,millis,system,current,time,millis,set,integer,actual,elements,new,hash,set,while,system,current,time,millis,start,millis,timeout,millis,properties,put,key,deserializer,org,apache,kafka,common,serialization,integer,deserializer,properties,put,value,deserializer,org,apache,kafka,common,serialization,integer,deserializer,collection,consumer,record,integer,integer,records,kafka,server,get,all,records,from,topic,properties,topic,partition,100,for,consumer,record,integer,integer,record,records,actual,elements,add,record,value,if,actual,elements,contains,all,expected,elements,return,fail,string,format,expected,to,contain,all,of,s,but,was,s,expected,elements,actual,elements
