commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected List<String> getAllTopics() {     assertTrue(topicsDescriptor.isTopicPattern()).     return mockGetAllTopicsReturnSequence.get(getAllTopicsInvokeCount++). }
false;protected;1;9;;@Override protected List<KafkaTopicPartition> getAllPartitionsForTopics(List<String> topics) {     if (topicsDescriptor.isFixedTopics()) {         assertEquals(topicsDescriptor.getFixedTopics(), topics).     } else {         assertEquals(mockGetAllTopicsReturnSequence.get(getAllPartitionsForTopicsInvokeCount - 1), topics).     }     return mockGetAllPartitionsForTopicsReturnSequence.get(getAllPartitionsForTopicsInvokeCount++). }
false;protected;0;4;;@Override protected void initializeConnections() { // nothing to do }
false;protected;0;4;;@Override protected void wakeupConnections() { // nothing to do }
false;protected;0;4;;@Override protected void closeConnections() { // nothing to do }
false;public;1;4;;@Override public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {     return new ArrayList<>(fixed). }
false;public,static;1;12;;// --------------------------------------------------------------------------------- // Utilities to create mocked, fixed results for a sequences of metadata fetches // --------------------------------------------------------------------------------- public static List<List<String>> createMockGetAllTopicsSequenceFromFixedReturn(final List<String> fixed) {     @SuppressWarnings("unchecked")     List<List<String>> mockSequence = mock(List.class).     when(mockSequence.get(anyInt())).thenAnswer(new Answer<List<String>>() {          @Override         public List<String> answer(InvocationOnMock invocationOnMock) throws Throwable {             return new ArrayList<>(fixed).         }     }).     return mockSequence. }
false;public;1;4;;@Override public List<KafkaTopicPartition> answer(InvocationOnMock invocationOnMock) throws Throwable {     return new ArrayList<>(fixed). }
false;public,static;1;12;;public static List<List<KafkaTopicPartition>> createMockGetAllPartitionsFromTopicsSequenceFromFixedReturn(final List<KafkaTopicPartition> fixed) {     @SuppressWarnings("unchecked")     List<List<KafkaTopicPartition>> mockSequence = mock(List.class).     when(mockSequence.get(anyInt())).thenAnswer(new Answer<List<KafkaTopicPartition>>() {          @Override         public List<KafkaTopicPartition> answer(InvocationOnMock invocationOnMock) throws Throwable {             return new ArrayList<>(fixed).         }     }).     return mockSequence. }
