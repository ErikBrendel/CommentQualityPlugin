# id;timestamp;commentText;codeText;commentWords;codeWords
ClosableBlockingQueue -> public boolean isOpen();1498894422;Checks whether the queue is currently open, meaning elements can be added and polled._@return True, if the queue is open_ false, if it is closed.;public boolean isOpen() {_		return open__	};checks,whether,the,queue,is,currently,open,meaning,elements,can,be,added,and,polled,return,true,if,the,queue,is,open,false,if,it,is,closed;public,boolean,is,open,return,open
ClosableBlockingQueue -> public boolean isOpen();1515177485;Checks whether the queue is currently open, meaning elements can be added and polled._@return True, if the queue is open_ false, if it is closed.;public boolean isOpen() {_		return open__	};checks,whether,the,queue,is,currently,open,meaning,elements,can,be,added,and,polled,return,true,if,the,queue,is,open,false,if,it,is,closed;public,boolean,is,open,return,open
ClosableBlockingQueue -> public boolean isOpen();1515757409;Checks whether the queue is currently open, meaning elements can be added and polled._@return True, if the queue is open_ false, if it is closed.;public boolean isOpen() {_		return open__	};checks,whether,the,queue,is,currently,open,meaning,elements,can,be,added,and,polled,return,true,if,the,queue,is,open,false,if,it,is,closed;public,boolean,is,open,return,open
ClosableBlockingQueue -> public boolean close();1498894422;Tries to close the queue. Closing the queue only succeeds when no elements are_in the queue when this method is called. Checking whether the queue is empty, and_marking the queue as closed is one atomic operation.__@return True, if the queue is closed, false if the queue remains open.;public boolean close() {_		lock.lock()__		try {_			if (open) {_				if (elements.isEmpty()) {_					open = false__					nonEmpty.signalAll()__					return true__				} else {_					return false__				}_			}_			else {_				_				return true__			}_		} finally {_			lock.unlock()__		}_	};tries,to,close,the,queue,closing,the,queue,only,succeeds,when,no,elements,are,in,the,queue,when,this,method,is,called,checking,whether,the,queue,is,empty,and,marking,the,queue,as,closed,is,one,atomic,operation,return,true,if,the,queue,is,closed,false,if,the,queue,remains,open;public,boolean,close,lock,lock,try,if,open,if,elements,is,empty,open,false,non,empty,signal,all,return,true,else,return,false,else,return,true,finally,lock,unlock
ClosableBlockingQueue -> public boolean close();1515177485;Tries to close the queue. Closing the queue only succeeds when no elements are_in the queue when this method is called. Checking whether the queue is empty, and_marking the queue as closed is one atomic operation.__@return True, if the queue is closed, false if the queue remains open.;public boolean close() {_		lock.lock()__		try {_			if (open) {_				if (elements.isEmpty()) {_					open = false__					nonEmpty.signalAll()__					return true__				} else {_					return false__				}_			}_			else {_				_				return true__			}_		} finally {_			lock.unlock()__		}_	};tries,to,close,the,queue,closing,the,queue,only,succeeds,when,no,elements,are,in,the,queue,when,this,method,is,called,checking,whether,the,queue,is,empty,and,marking,the,queue,as,closed,is,one,atomic,operation,return,true,if,the,queue,is,closed,false,if,the,queue,remains,open;public,boolean,close,lock,lock,try,if,open,if,elements,is,empty,open,false,non,empty,signal,all,return,true,else,return,false,else,return,true,finally,lock,unlock
ClosableBlockingQueue -> public boolean close();1515757409;Tries to close the queue. Closing the queue only succeeds when no elements are_in the queue when this method is called. Checking whether the queue is empty, and_marking the queue as closed is one atomic operation.__@return True, if the queue is closed, false if the queue remains open.;public boolean close() {_		lock.lock()__		try {_			if (open) {_				if (elements.isEmpty()) {_					open = false__					nonEmpty.signalAll()__					return true__				} else {_					return false__				}_			}_			else {_				_				return true__			}_		} finally {_			lock.unlock()__		}_	};tries,to,close,the,queue,closing,the,queue,only,succeeds,when,no,elements,are,in,the,queue,when,this,method,is,called,checking,whether,the,queue,is,empty,and,marking,the,queue,as,closed,is,one,atomic,operation,return,true,if,the,queue,is,closed,false,if,the,queue,remains,open;public,boolean,close,lock,lock,try,if,open,if,elements,is,empty,open,false,non,empty,signal,all,return,true,else,return,false,else,return,true,finally,lock,unlock
ClosableBlockingQueue -> public E peek();1498894422;Returns the queue's next element without removing it, if the queue is non-empty._Otherwise, returns null.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and getting the next element is one atomic operation.__<p>This method never blocks.__@return The queue's next element, or null, if the queue is empty._@throws IllegalStateException Thrown, if the queue is closed.;public E peek() {_		lock.lock()__		try {_			if (open) {_				if (elements.size() > 0) {_					return elements.getFirst()__				} else {_					return null__				}_			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};returns,the,queue,s,next,element,without,removing,it,if,the,queue,is,non,empty,otherwise,returns,null,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,getting,the,next,element,is,one,atomic,operation,p,this,method,never,blocks,return,the,queue,s,next,element,or,null,if,the,queue,is,empty,throws,illegal,state,exception,thrown,if,the,queue,is,closed;public,e,peek,lock,lock,try,if,open,if,elements,size,0,return,elements,get,first,else,return,null,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public E peek();1515177485;Returns the queue's next element without removing it, if the queue is non-empty._Otherwise, returns null.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and getting the next element is one atomic operation.__<p>This method never blocks.__@return The queue's next element, or null, if the queue is empty._@throws IllegalStateException Thrown, if the queue is closed.;public E peek() {_		lock.lock()__		try {_			if (open) {_				if (elements.size() > 0) {_					return elements.getFirst()__				} else {_					return null__				}_			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};returns,the,queue,s,next,element,without,removing,it,if,the,queue,is,non,empty,otherwise,returns,null,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,getting,the,next,element,is,one,atomic,operation,p,this,method,never,blocks,return,the,queue,s,next,element,or,null,if,the,queue,is,empty,throws,illegal,state,exception,thrown,if,the,queue,is,closed;public,e,peek,lock,lock,try,if,open,if,elements,size,0,return,elements,get,first,else,return,null,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public E peek();1515757409;Returns the queue's next element without removing it, if the queue is non-empty._Otherwise, returns null.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and getting the next element is one atomic operation.__<p>This method never blocks.__@return The queue's next element, or null, if the queue is empty._@throws IllegalStateException Thrown, if the queue is closed.;public E peek() {_		lock.lock()__		try {_			if (open) {_				if (elements.size() > 0) {_					return elements.getFirst()__				} else {_					return null__				}_			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};returns,the,queue,s,next,element,without,removing,it,if,the,queue,is,non,empty,otherwise,returns,null,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,getting,the,next,element,is,one,atomic,operation,p,this,method,never,blocks,return,the,queue,s,next,element,or,null,if,the,queue,is,empty,throws,illegal,state,exception,thrown,if,the,queue,is,closed;public,e,peek,lock,lock,try,if,open,if,elements,size,0,return,elements,get,first,else,return,null,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public List<E> getBatchBlocking() throws InterruptedException;1498894422;Gets all the elements found in the list, or blocks until at least one element_was added. If the queue is empty when this method is called, it blocks until_at least one element is added.__<p>This method always returns a list with at least one element.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__@return A list with all elements in the queue, always at least one element.__@throws IllegalStateException Thrown, if the queue is closed._@throws InterruptedException Throw, if the thread is interrupted while waiting for an_element to be added.;public List<E> getBatchBlocking() throws InterruptedException {_		lock.lock()__		try {_			while (open && elements.isEmpty()) {_				nonEmpty.await()__			}_			if (open) {_				ArrayList<E> result = new ArrayList<>(elements)__				elements.clear()__				return result__			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};gets,all,the,elements,found,in,the,list,or,blocks,until,at,least,one,element,was,added,if,the,queue,is,empty,when,this,method,is,called,it,blocks,until,at,least,one,element,is,added,p,this,method,always,returns,a,list,with,at,least,one,element,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,return,a,list,with,all,elements,in,the,queue,always,at,least,one,element,throws,illegal,state,exception,thrown,if,the,queue,is,closed,throws,interrupted,exception,throw,if,the,thread,is,interrupted,while,waiting,for,an,element,to,be,added;public,list,e,get,batch,blocking,throws,interrupted,exception,lock,lock,try,while,open,elements,is,empty,non,empty,await,if,open,array,list,e,result,new,array,list,elements,elements,clear,return,result,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public List<E> getBatchBlocking() throws InterruptedException;1515177485;Gets all the elements found in the list, or blocks until at least one element_was added. If the queue is empty when this method is called, it blocks until_at least one element is added.__<p>This method always returns a list with at least one element.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__@return A list with all elements in the queue, always at least one element.__@throws IllegalStateException Thrown, if the queue is closed._@throws InterruptedException Throw, if the thread is interrupted while waiting for an_element to be added.;public List<E> getBatchBlocking() throws InterruptedException {_		lock.lock()__		try {_			while (open && elements.isEmpty()) {_				nonEmpty.await()__			}_			if (open) {_				ArrayList<E> result = new ArrayList<>(elements)__				elements.clear()__				return result__			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};gets,all,the,elements,found,in,the,list,or,blocks,until,at,least,one,element,was,added,if,the,queue,is,empty,when,this,method,is,called,it,blocks,until,at,least,one,element,is,added,p,this,method,always,returns,a,list,with,at,least,one,element,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,return,a,list,with,all,elements,in,the,queue,always,at,least,one,element,throws,illegal,state,exception,thrown,if,the,queue,is,closed,throws,interrupted,exception,throw,if,the,thread,is,interrupted,while,waiting,for,an,element,to,be,added;public,list,e,get,batch,blocking,throws,interrupted,exception,lock,lock,try,while,open,elements,is,empty,non,empty,await,if,open,array,list,e,result,new,array,list,elements,elements,clear,return,result,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public List<E> getBatchBlocking() throws InterruptedException;1515757409;Gets all the elements found in the list, or blocks until at least one element_was added. If the queue is empty when this method is called, it blocks until_at least one element is added.__<p>This method always returns a list with at least one element.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__@return A list with all elements in the queue, always at least one element.__@throws IllegalStateException Thrown, if the queue is closed._@throws InterruptedException Throw, if the thread is interrupted while waiting for an_element to be added.;public List<E> getBatchBlocking() throws InterruptedException {_		lock.lock()__		try {_			while (open && elements.isEmpty()) {_				nonEmpty.await()__			}_			if (open) {_				ArrayList<E> result = new ArrayList<>(elements)__				elements.clear()__				return result__			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};gets,all,the,elements,found,in,the,list,or,blocks,until,at,least,one,element,was,added,if,the,queue,is,empty,when,this,method,is,called,it,blocks,until,at,least,one,element,is,added,p,this,method,always,returns,a,list,with,at,least,one,element,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,return,a,list,with,all,elements,in,the,queue,always,at,least,one,element,throws,illegal,state,exception,thrown,if,the,queue,is,closed,throws,interrupted,exception,throw,if,the,thread,is,interrupted,while,waiting,for,an,element,to,be,added;public,list,e,get,batch,blocking,throws,interrupted,exception,lock,lock,try,while,open,elements,is,empty,non,empty,await,if,open,array,list,e,result,new,array,list,elements,elements,clear,return,result,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public ClosableBlockingQueue();1498894422;Creates a new empty queue.;public ClosableBlockingQueue() {_		this(10)__	};creates,a,new,empty,queue;public,closable,blocking,queue,this,10
ClosableBlockingQueue -> public ClosableBlockingQueue();1515177485;Creates a new empty queue.;public ClosableBlockingQueue() {_		this(10)__	};creates,a,new,empty,queue;public,closable,blocking,queue,this,10
ClosableBlockingQueue -> public ClosableBlockingQueue();1515757409;Creates a new empty queue.;public ClosableBlockingQueue() {_		this(10)__	};creates,a,new,empty,queue;public,closable,blocking,queue,this,10
ClosableBlockingQueue -> public E getElementBlocking() throws InterruptedException;1498894422;Returns the next element in the queue. If the queue is empty, this method_waits until at least one element is added.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__@return The next element in the queue, never null.__@throws IllegalStateException Thrown, if the queue is closed._@throws InterruptedException Throw, if the thread is interrupted while waiting for an_element to be added.;public E getElementBlocking() throws InterruptedException {_		lock.lock()__		try {_			while (open && elements.isEmpty()) {_				nonEmpty.await()__			}__			if (open) {_				return elements.removeFirst()__			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};returns,the,next,element,in,the,queue,if,the,queue,is,empty,this,method,waits,until,at,least,one,element,is,added,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,return,the,next,element,in,the,queue,never,null,throws,illegal,state,exception,thrown,if,the,queue,is,closed,throws,interrupted,exception,throw,if,the,thread,is,interrupted,while,waiting,for,an,element,to,be,added;public,e,get,element,blocking,throws,interrupted,exception,lock,lock,try,while,open,elements,is,empty,non,empty,await,if,open,return,elements,remove,first,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public E getElementBlocking() throws InterruptedException;1515177485;Returns the next element in the queue. If the queue is empty, this method_waits until at least one element is added.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__@return The next element in the queue, never null.__@throws IllegalStateException Thrown, if the queue is closed._@throws InterruptedException Throw, if the thread is interrupted while waiting for an_element to be added.;public E getElementBlocking() throws InterruptedException {_		lock.lock()__		try {_			while (open && elements.isEmpty()) {_				nonEmpty.await()__			}__			if (open) {_				return elements.removeFirst()__			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};returns,the,next,element,in,the,queue,if,the,queue,is,empty,this,method,waits,until,at,least,one,element,is,added,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,return,the,next,element,in,the,queue,never,null,throws,illegal,state,exception,thrown,if,the,queue,is,closed,throws,interrupted,exception,throw,if,the,thread,is,interrupted,while,waiting,for,an,element,to,be,added;public,e,get,element,blocking,throws,interrupted,exception,lock,lock,try,while,open,elements,is,empty,non,empty,await,if,open,return,elements,remove,first,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public E getElementBlocking() throws InterruptedException;1515757409;Returns the next element in the queue. If the queue is empty, this method_waits until at least one element is added.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__@return The next element in the queue, never null.__@throws IllegalStateException Thrown, if the queue is closed._@throws InterruptedException Throw, if the thread is interrupted while waiting for an_element to be added.;public E getElementBlocking() throws InterruptedException {_		lock.lock()__		try {_			while (open && elements.isEmpty()) {_				nonEmpty.await()__			}__			if (open) {_				return elements.removeFirst()__			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};returns,the,next,element,in,the,queue,if,the,queue,is,empty,this,method,waits,until,at,least,one,element,is,added,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,return,the,next,element,in,the,queue,never,null,throws,illegal,state,exception,thrown,if,the,queue,is,closed,throws,interrupted,exception,throw,if,the,thread,is,interrupted,while,waiting,for,an,element,to,be,added;public,e,get,element,blocking,throws,interrupted,exception,lock,lock,try,while,open,elements,is,empty,non,empty,await,if,open,return,elements,remove,first,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public boolean isEmpty();1498894422;Checks whether the queue is empty (has no elements)._@return True, if the queue is empty_ false, if it is non-empty.;public boolean isEmpty() {_		return size() == 0__	};checks,whether,the,queue,is,empty,has,no,elements,return,true,if,the,queue,is,empty,false,if,it,is,non,empty;public,boolean,is,empty,return,size,0
ClosableBlockingQueue -> public boolean isEmpty();1515177485;Checks whether the queue is empty (has no elements)._@return True, if the queue is empty_ false, if it is non-empty.;public boolean isEmpty() {_		return size() == 0__	};checks,whether,the,queue,is,empty,has,no,elements,return,true,if,the,queue,is,empty,false,if,it,is,non,empty;public,boolean,is,empty,return,size,0
ClosableBlockingQueue -> public boolean isEmpty();1515757409;Checks whether the queue is empty (has no elements)._@return True, if the queue is empty_ false, if it is non-empty.;public boolean isEmpty() {_		return size() == 0__	};checks,whether,the,queue,is,empty,has,no,elements,return,true,if,the,queue,is,empty,false,if,it,is,non,empty;public,boolean,is,empty,return,size,0
ClosableBlockingQueue -> public List<E> pollBatch();1498894422;Returns all of the queue's current elements in a list, if the queue is non-empty._Otherwise, this method returns null.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the elements is one atomic operation.__<p>This method never blocks.__@return All of the queue's elements, or null, if the queue is empty._@throws IllegalStateException Thrown, if the queue is closed.;public List<E> pollBatch() {_		lock.lock()__		try {_			if (open) {_				if (elements.size() > 0) {_					ArrayList<E> result = new ArrayList<>(elements)__					elements.clear()__					return result__				} else {_					return null__				}_			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};returns,all,of,the,queue,s,current,elements,in,a,list,if,the,queue,is,non,empty,otherwise,this,method,returns,null,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,elements,is,one,atomic,operation,p,this,method,never,blocks,return,all,of,the,queue,s,elements,or,null,if,the,queue,is,empty,throws,illegal,state,exception,thrown,if,the,queue,is,closed;public,list,e,poll,batch,lock,lock,try,if,open,if,elements,size,0,array,list,e,result,new,array,list,elements,elements,clear,return,result,else,return,null,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public List<E> pollBatch();1515177485;Returns all of the queue's current elements in a list, if the queue is non-empty._Otherwise, this method returns null.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the elements is one atomic operation.__<p>This method never blocks.__@return All of the queue's elements, or null, if the queue is empty._@throws IllegalStateException Thrown, if the queue is closed.;public List<E> pollBatch() {_		lock.lock()__		try {_			if (open) {_				if (elements.size() > 0) {_					ArrayList<E> result = new ArrayList<>(elements)__					elements.clear()__					return result__				} else {_					return null__				}_			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};returns,all,of,the,queue,s,current,elements,in,a,list,if,the,queue,is,non,empty,otherwise,this,method,returns,null,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,elements,is,one,atomic,operation,p,this,method,never,blocks,return,all,of,the,queue,s,elements,or,null,if,the,queue,is,empty,throws,illegal,state,exception,thrown,if,the,queue,is,closed;public,list,e,poll,batch,lock,lock,try,if,open,if,elements,size,0,array,list,e,result,new,array,list,elements,elements,clear,return,result,else,return,null,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public List<E> pollBatch();1515757409;Returns all of the queue's current elements in a list, if the queue is non-empty._Otherwise, this method returns null.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the elements is one atomic operation.__<p>This method never blocks.__@return All of the queue's elements, or null, if the queue is empty._@throws IllegalStateException Thrown, if the queue is closed.;public List<E> pollBatch() {_		lock.lock()__		try {_			if (open) {_				if (elements.size() > 0) {_					ArrayList<E> result = new ArrayList<>(elements)__					elements.clear()__					return result__				} else {_					return null__				}_			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};returns,all,of,the,queue,s,current,elements,in,a,list,if,the,queue,is,non,empty,otherwise,this,method,returns,null,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,elements,is,one,atomic,operation,p,this,method,never,blocks,return,all,of,the,queue,s,elements,or,null,if,the,queue,is,empty,throws,illegal,state,exception,thrown,if,the,queue,is,closed;public,list,e,poll,batch,lock,lock,try,if,open,if,elements,size,0,array,list,e,result,new,array,list,elements,elements,clear,return,result,else,return,null,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public List<E> getBatchBlocking(long timeoutMillis) throws InterruptedException;1498894422;Gets all the elements found in the list, or blocks until at least one element_was added. This method is similar as {@link #getBatchBlocking()}, but takes_a number of milliseconds that the method will maximally wait before returning.__<p>This method never returns null, but an empty list, if the queue is empty when_the method is called and the request times out before an element was added.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__@param timeoutMillis The number of milliseconds to wait, at most._@return A list with all elements in the queue, possible an empty list.__@throws IllegalStateException Thrown, if the queue is closed._@throws InterruptedException Throw, if the thread is interrupted while waiting for an_element to be added.;public List<E> getBatchBlocking(long timeoutMillis) throws InterruptedException {_		if (timeoutMillis == 0L) {_			_			return getBatchBlocking()__		} else if (timeoutMillis < 0L) {_			throw new IllegalArgumentException("invalid timeout")__		}__		final long deadline = System.nanoTime() + timeoutMillis * 1_000_000L___		lock.lock()__		try {_			while (open && elements.isEmpty() && timeoutMillis > 0) {_				nonEmpty.await(timeoutMillis, TimeUnit.MILLISECONDS)__				timeoutMillis = (deadline - System.nanoTime()) / 1_000_000L__			}__			if (!open) {_				throw new IllegalStateException("queue is closed")__			}_			else if (elements.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				ArrayList<E> result = new ArrayList<>(elements)__				elements.clear()__				return result__			}_		} finally {_			lock.unlock()__		}_	};gets,all,the,elements,found,in,the,list,or,blocks,until,at,least,one,element,was,added,this,method,is,similar,as,link,get,batch,blocking,but,takes,a,number,of,milliseconds,that,the,method,will,maximally,wait,before,returning,p,this,method,never,returns,null,but,an,empty,list,if,the,queue,is,empty,when,the,method,is,called,and,the,request,times,out,before,an,element,was,added,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,param,timeout,millis,the,number,of,milliseconds,to,wait,at,most,return,a,list,with,all,elements,in,the,queue,possible,an,empty,list,throws,illegal,state,exception,thrown,if,the,queue,is,closed,throws,interrupted,exception,throw,if,the,thread,is,interrupted,while,waiting,for,an,element,to,be,added;public,list,e,get,batch,blocking,long,timeout,millis,throws,interrupted,exception,if,timeout,millis,0l,return,get,batch,blocking,else,if,timeout,millis,0l,throw,new,illegal,argument,exception,invalid,timeout,final,long,deadline,system,nano,time,timeout,millis,lock,lock,try,while,open,elements,is,empty,timeout,millis,0,non,empty,await,timeout,millis,time,unit,milliseconds,timeout,millis,deadline,system,nano,time,if,open,throw,new,illegal,state,exception,queue,is,closed,else,if,elements,is,empty,return,collections,empty,list,else,array,list,e,result,new,array,list,elements,elements,clear,return,result,finally,lock,unlock
ClosableBlockingQueue -> public List<E> getBatchBlocking(long timeoutMillis) throws InterruptedException;1515177485;Gets all the elements found in the list, or blocks until at least one element_was added. This method is similar as {@link #getBatchBlocking()}, but takes_a number of milliseconds that the method will maximally wait before returning.__<p>This method never returns null, but an empty list, if the queue is empty when_the method is called and the request times out before an element was added.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__@param timeoutMillis The number of milliseconds to wait, at most._@return A list with all elements in the queue, possible an empty list.__@throws IllegalStateException Thrown, if the queue is closed._@throws InterruptedException Throw, if the thread is interrupted while waiting for an_element to be added.;public List<E> getBatchBlocking(long timeoutMillis) throws InterruptedException {_		if (timeoutMillis == 0L) {_			_			return getBatchBlocking()__		} else if (timeoutMillis < 0L) {_			throw new IllegalArgumentException("invalid timeout")__		}__		final long deadline = System.nanoTime() + timeoutMillis * 1_000_000L___		lock.lock()__		try {_			while (open && elements.isEmpty() && timeoutMillis > 0) {_				nonEmpty.await(timeoutMillis, TimeUnit.MILLISECONDS)__				timeoutMillis = (deadline - System.nanoTime()) / 1_000_000L__			}__			if (!open) {_				throw new IllegalStateException("queue is closed")__			}_			else if (elements.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				ArrayList<E> result = new ArrayList<>(elements)__				elements.clear()__				return result__			}_		} finally {_			lock.unlock()__		}_	};gets,all,the,elements,found,in,the,list,or,blocks,until,at,least,one,element,was,added,this,method,is,similar,as,link,get,batch,blocking,but,takes,a,number,of,milliseconds,that,the,method,will,maximally,wait,before,returning,p,this,method,never,returns,null,but,an,empty,list,if,the,queue,is,empty,when,the,method,is,called,and,the,request,times,out,before,an,element,was,added,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,param,timeout,millis,the,number,of,milliseconds,to,wait,at,most,return,a,list,with,all,elements,in,the,queue,possible,an,empty,list,throws,illegal,state,exception,thrown,if,the,queue,is,closed,throws,interrupted,exception,throw,if,the,thread,is,interrupted,while,waiting,for,an,element,to,be,added;public,list,e,get,batch,blocking,long,timeout,millis,throws,interrupted,exception,if,timeout,millis,0l,return,get,batch,blocking,else,if,timeout,millis,0l,throw,new,illegal,argument,exception,invalid,timeout,final,long,deadline,system,nano,time,timeout,millis,lock,lock,try,while,open,elements,is,empty,timeout,millis,0,non,empty,await,timeout,millis,time,unit,milliseconds,timeout,millis,deadline,system,nano,time,if,open,throw,new,illegal,state,exception,queue,is,closed,else,if,elements,is,empty,return,collections,empty,list,else,array,list,e,result,new,array,list,elements,elements,clear,return,result,finally,lock,unlock
ClosableBlockingQueue -> public List<E> getBatchBlocking(long timeoutMillis) throws InterruptedException;1515757409;Gets all the elements found in the list, or blocks until at least one element_was added. This method is similar as {@link #getBatchBlocking()}, but takes_a number of milliseconds that the method will maximally wait before returning.__<p>This method never returns null, but an empty list, if the queue is empty when_the method is called and the request times out before an element was added.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__@param timeoutMillis The number of milliseconds to wait, at most._@return A list with all elements in the queue, possible an empty list.__@throws IllegalStateException Thrown, if the queue is closed._@throws InterruptedException Throw, if the thread is interrupted while waiting for an_element to be added.;public List<E> getBatchBlocking(long timeoutMillis) throws InterruptedException {_		if (timeoutMillis == 0L) {_			_			return getBatchBlocking()__		} else if (timeoutMillis < 0L) {_			throw new IllegalArgumentException("invalid timeout")__		}__		final long deadline = System.nanoTime() + timeoutMillis * 1_000_000L___		lock.lock()__		try {_			while (open && elements.isEmpty() && timeoutMillis > 0) {_				nonEmpty.await(timeoutMillis, TimeUnit.MILLISECONDS)__				timeoutMillis = (deadline - System.nanoTime()) / 1_000_000L__			}__			if (!open) {_				throw new IllegalStateException("queue is closed")__			}_			else if (elements.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				ArrayList<E> result = new ArrayList<>(elements)__				elements.clear()__				return result__			}_		} finally {_			lock.unlock()__		}_	};gets,all,the,elements,found,in,the,list,or,blocks,until,at,least,one,element,was,added,this,method,is,similar,as,link,get,batch,blocking,but,takes,a,number,of,milliseconds,that,the,method,will,maximally,wait,before,returning,p,this,method,never,returns,null,but,an,empty,list,if,the,queue,is,empty,when,the,method,is,called,and,the,request,times,out,before,an,element,was,added,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,param,timeout,millis,the,number,of,milliseconds,to,wait,at,most,return,a,list,with,all,elements,in,the,queue,possible,an,empty,list,throws,illegal,state,exception,thrown,if,the,queue,is,closed,throws,interrupted,exception,throw,if,the,thread,is,interrupted,while,waiting,for,an,element,to,be,added;public,list,e,get,batch,blocking,long,timeout,millis,throws,interrupted,exception,if,timeout,millis,0l,return,get,batch,blocking,else,if,timeout,millis,0l,throw,new,illegal,argument,exception,invalid,timeout,final,long,deadline,system,nano,time,timeout,millis,lock,lock,try,while,open,elements,is,empty,timeout,millis,0,non,empty,await,timeout,millis,time,unit,milliseconds,timeout,millis,deadline,system,nano,time,if,open,throw,new,illegal,state,exception,queue,is,closed,else,if,elements,is,empty,return,collections,empty,list,else,array,list,e,result,new,array,list,elements,elements,clear,return,result,finally,lock,unlock
ClosableBlockingQueue -> public int size();1498894422;Gets the number of elements currently in the queue._@return The number of elements currently in the queue.;public int size() {_		lock.lock()__		try {_			return elements.size()__		} finally {_			lock.unlock()__		}_	};gets,the,number,of,elements,currently,in,the,queue,return,the,number,of,elements,currently,in,the,queue;public,int,size,lock,lock,try,return,elements,size,finally,lock,unlock
ClosableBlockingQueue -> public int size();1515177485;Gets the number of elements currently in the queue._@return The number of elements currently in the queue.;public int size() {_		lock.lock()__		try {_			return elements.size()__		} finally {_			lock.unlock()__		}_	};gets,the,number,of,elements,currently,in,the,queue,return,the,number,of,elements,currently,in,the,queue;public,int,size,lock,lock,try,return,elements,size,finally,lock,unlock
ClosableBlockingQueue -> public int size();1515757409;Gets the number of elements currently in the queue._@return The number of elements currently in the queue.;public int size() {_		lock.lock()__		try {_			return elements.size()__		} finally {_			lock.unlock()__		}_	};gets,the,number,of,elements,currently,in,the,queue,return,the,number,of,elements,currently,in,the,queue;public,int,size,lock,lock,try,return,elements,size,finally,lock,unlock
ClosableBlockingQueue -> public E poll();1498894422;Returns the queue's next element and removes it, the queue is non-empty._Otherwise, this method returns null.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__<p>This method never blocks.__@return The queue's next element, or null, if the queue is empty._@throws IllegalStateException Thrown, if the queue is closed.;public E poll() {_		lock.lock()__		try {_			if (open) {_				if (elements.size() > 0) {_					return elements.removeFirst()__				} else {_					return null__				}_			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};returns,the,queue,s,next,element,and,removes,it,the,queue,is,non,empty,otherwise,this,method,returns,null,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,p,this,method,never,blocks,return,the,queue,s,next,element,or,null,if,the,queue,is,empty,throws,illegal,state,exception,thrown,if,the,queue,is,closed;public,e,poll,lock,lock,try,if,open,if,elements,size,0,return,elements,remove,first,else,return,null,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public E poll();1515177485;Returns the queue's next element and removes it, the queue is non-empty._Otherwise, this method returns null.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__<p>This method never blocks.__@return The queue's next element, or null, if the queue is empty._@throws IllegalStateException Thrown, if the queue is closed.;public E poll() {_		lock.lock()__		try {_			if (open) {_				if (elements.size() > 0) {_					return elements.removeFirst()__				} else {_					return null__				}_			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};returns,the,queue,s,next,element,and,removes,it,the,queue,is,non,empty,otherwise,this,method,returns,null,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,p,this,method,never,blocks,return,the,queue,s,next,element,or,null,if,the,queue,is,empty,throws,illegal,state,exception,thrown,if,the,queue,is,closed;public,e,poll,lock,lock,try,if,open,if,elements,size,0,return,elements,remove,first,else,return,null,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public E poll();1515757409;Returns the queue's next element and removes it, the queue is non-empty._Otherwise, this method returns null.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__<p>This method never blocks.__@return The queue's next element, or null, if the queue is empty._@throws IllegalStateException Thrown, if the queue is closed.;public E poll() {_		lock.lock()__		try {_			if (open) {_				if (elements.size() > 0) {_					return elements.removeFirst()__				} else {_					return null__				}_			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};returns,the,queue,s,next,element,and,removes,it,the,queue,is,non,empty,otherwise,this,method,returns,null,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,p,this,method,never,blocks,return,the,queue,s,next,element,or,null,if,the,queue,is,empty,throws,illegal,state,exception,thrown,if,the,queue,is,closed;public,e,poll,lock,lock,try,if,open,if,elements,size,0,return,elements,remove,first,else,return,null,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public ClosableBlockingQueue(int initialSize);1498894422;Creates a new empty queue, reserving space for at least the specified number_of elements. The queu can still grow, of more elements are added than the_reserved space.__@param initialSize The number of elements to reserve space for.;public ClosableBlockingQueue(int initialSize) {_		this.lock = new ReentrantLock(true)__		this.nonEmpty = this.lock.newCondition()___		this.elements = new ArrayDeque<>(initialSize)__		this.open = true___	};creates,a,new,empty,queue,reserving,space,for,at,least,the,specified,number,of,elements,the,queu,can,still,grow,of,more,elements,are,added,than,the,reserved,space,param,initial,size,the,number,of,elements,to,reserve,space,for;public,closable,blocking,queue,int,initial,size,this,lock,new,reentrant,lock,true,this,non,empty,this,lock,new,condition,this,elements,new,array,deque,initial,size,this,open,true
ClosableBlockingQueue -> public ClosableBlockingQueue(int initialSize);1515177485;Creates a new empty queue, reserving space for at least the specified number_of elements. The queue can still grow, of more elements are added than the_reserved space.__@param initialSize The number of elements to reserve space for.;public ClosableBlockingQueue(int initialSize) {_		this.lock = new ReentrantLock(true)__		this.nonEmpty = this.lock.newCondition()___		this.elements = new ArrayDeque<>(initialSize)__		this.open = true___	};creates,a,new,empty,queue,reserving,space,for,at,least,the,specified,number,of,elements,the,queue,can,still,grow,of,more,elements,are,added,than,the,reserved,space,param,initial,size,the,number,of,elements,to,reserve,space,for;public,closable,blocking,queue,int,initial,size,this,lock,new,reentrant,lock,true,this,non,empty,this,lock,new,condition,this,elements,new,array,deque,initial,size,this,open,true
ClosableBlockingQueue -> public ClosableBlockingQueue(int initialSize);1515757409;Creates a new empty queue, reserving space for at least the specified number_of elements. The queue can still grow, of more elements are added than the_reserved space.__@param initialSize The number of elements to reserve space for.;public ClosableBlockingQueue(int initialSize) {_		this.lock = new ReentrantLock(true)__		this.nonEmpty = this.lock.newCondition()___		this.elements = new ArrayDeque<>(initialSize)__		this.open = true___	};creates,a,new,empty,queue,reserving,space,for,at,least,the,specified,number,of,elements,the,queue,can,still,grow,of,more,elements,are,added,than,the,reserved,space,param,initial,size,the,number,of,elements,to,reserve,space,for;public,closable,blocking,queue,int,initial,size,this,lock,new,reentrant,lock,true,this,non,empty,this,lock,new,condition,this,elements,new,array,deque,initial,size,this,open,true
ClosableBlockingQueue -> public boolean addIfOpen(E element);1498894422;Tries to add an element to the queue, if the queue is still open. Checking whether the queue_is open and adding the element is one atomic operation.__<p>Unlike the {@link #add(Object)} method, this method never throws an exception,_but only indicates via the return code if the element was added or the_queue was closed.__@param element The element to add._@return True, if the element was added, false if the queue was closes.;public boolean addIfOpen(E element) {_		requireNonNull(element)___		lock.lock()__		try {_			if (open) {_				elements.addLast(element)__				if (elements.size() == 1) {_					nonEmpty.signalAll()__				}_			}_			return open__		} finally {_			lock.unlock()__		}_	};tries,to,add,an,element,to,the,queue,if,the,queue,is,still,open,checking,whether,the,queue,is,open,and,adding,the,element,is,one,atomic,operation,p,unlike,the,link,add,object,method,this,method,never,throws,an,exception,but,only,indicates,via,the,return,code,if,the,element,was,added,or,the,queue,was,closed,param,element,the,element,to,add,return,true,if,the,element,was,added,false,if,the,queue,was,closes;public,boolean,add,if,open,e,element,require,non,null,element,lock,lock,try,if,open,elements,add,last,element,if,elements,size,1,non,empty,signal,all,return,open,finally,lock,unlock
ClosableBlockingQueue -> public boolean addIfOpen(E element);1515177485;Tries to add an element to the queue, if the queue is still open. Checking whether the queue_is open and adding the element is one atomic operation.__<p>Unlike the {@link #add(Object)} method, this method never throws an exception,_but only indicates via the return code if the element was added or the_queue was closed.__@param element The element to add._@return True, if the element was added, false if the queue was closes.;public boolean addIfOpen(E element) {_		requireNonNull(element)___		lock.lock()__		try {_			if (open) {_				elements.addLast(element)__				if (elements.size() == 1) {_					nonEmpty.signalAll()__				}_			}_			return open__		} finally {_			lock.unlock()__		}_	};tries,to,add,an,element,to,the,queue,if,the,queue,is,still,open,checking,whether,the,queue,is,open,and,adding,the,element,is,one,atomic,operation,p,unlike,the,link,add,object,method,this,method,never,throws,an,exception,but,only,indicates,via,the,return,code,if,the,element,was,added,or,the,queue,was,closed,param,element,the,element,to,add,return,true,if,the,element,was,added,false,if,the,queue,was,closes;public,boolean,add,if,open,e,element,require,non,null,element,lock,lock,try,if,open,elements,add,last,element,if,elements,size,1,non,empty,signal,all,return,open,finally,lock,unlock
ClosableBlockingQueue -> public boolean addIfOpen(E element);1515757409;Tries to add an element to the queue, if the queue is still open. Checking whether the queue_is open and adding the element is one atomic operation.__<p>Unlike the {@link #add(Object)} method, this method never throws an exception,_but only indicates via the return code if the element was added or the_queue was closed.__@param element The element to add._@return True, if the element was added, false if the queue was closes.;public boolean addIfOpen(E element) {_		requireNonNull(element)___		lock.lock()__		try {_			if (open) {_				elements.addLast(element)__				if (elements.size() == 1) {_					nonEmpty.signalAll()__				}_			}_			return open__		} finally {_			lock.unlock()__		}_	};tries,to,add,an,element,to,the,queue,if,the,queue,is,still,open,checking,whether,the,queue,is,open,and,adding,the,element,is,one,atomic,operation,p,unlike,the,link,add,object,method,this,method,never,throws,an,exception,but,only,indicates,via,the,return,code,if,the,element,was,added,or,the,queue,was,closed,param,element,the,element,to,add,return,true,if,the,element,was,added,false,if,the,queue,was,closes;public,boolean,add,if,open,e,element,require,non,null,element,lock,lock,try,if,open,elements,add,last,element,if,elements,size,1,non,empty,signal,all,return,open,finally,lock,unlock
ClosableBlockingQueue -> public E getElementBlocking(long timeoutMillis) throws InterruptedException;1498894422;Returns the next element in the queue. If the queue is empty, this method_waits at most a certain time until an element becomes available. If no element_is available after that time, the method returns null.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__@param timeoutMillis The number of milliseconds to block, at most._@return The next element in the queue, or null, if the timeout expires  before an element is available.__@throws IllegalStateException Thrown, if the queue is closed._@throws InterruptedException Throw, if the thread is interrupted while waiting for an_element to be added.;public E getElementBlocking(long timeoutMillis) throws InterruptedException {_		if (timeoutMillis == 0L) {_			_			return getElementBlocking()__		} else if (timeoutMillis < 0L) {_			throw new IllegalArgumentException("invalid timeout")__		}__		final long deadline = System.nanoTime() + timeoutMillis * 1_000_000L___		lock.lock()__		try {_			while (open && elements.isEmpty() && timeoutMillis > 0) {_				nonEmpty.await(timeoutMillis, TimeUnit.MILLISECONDS)__				timeoutMillis = (deadline - System.nanoTime()) / 1_000_000L__			}__			if (!open) {_				throw new IllegalStateException("queue is closed")__			}_			else if (elements.isEmpty()) {_				return null__			} else {_				return elements.removeFirst()__			}_		} finally {_			lock.unlock()__		}_	};returns,the,next,element,in,the,queue,if,the,queue,is,empty,this,method,waits,at,most,a,certain,time,until,an,element,becomes,available,if,no,element,is,available,after,that,time,the,method,returns,null,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,param,timeout,millis,the,number,of,milliseconds,to,block,at,most,return,the,next,element,in,the,queue,or,null,if,the,timeout,expires,before,an,element,is,available,throws,illegal,state,exception,thrown,if,the,queue,is,closed,throws,interrupted,exception,throw,if,the,thread,is,interrupted,while,waiting,for,an,element,to,be,added;public,e,get,element,blocking,long,timeout,millis,throws,interrupted,exception,if,timeout,millis,0l,return,get,element,blocking,else,if,timeout,millis,0l,throw,new,illegal,argument,exception,invalid,timeout,final,long,deadline,system,nano,time,timeout,millis,lock,lock,try,while,open,elements,is,empty,timeout,millis,0,non,empty,await,timeout,millis,time,unit,milliseconds,timeout,millis,deadline,system,nano,time,if,open,throw,new,illegal,state,exception,queue,is,closed,else,if,elements,is,empty,return,null,else,return,elements,remove,first,finally,lock,unlock
ClosableBlockingQueue -> public E getElementBlocking(long timeoutMillis) throws InterruptedException;1515177485;Returns the next element in the queue. If the queue is empty, this method_waits at most a certain time until an element becomes available. If no element_is available after that time, the method returns null.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__@param timeoutMillis The number of milliseconds to block, at most._@return The next element in the queue, or null, if the timeout expires  before an element is available.__@throws IllegalStateException Thrown, if the queue is closed._@throws InterruptedException Throw, if the thread is interrupted while waiting for an_element to be added.;public E getElementBlocking(long timeoutMillis) throws InterruptedException {_		if (timeoutMillis == 0L) {_			_			return getElementBlocking()__		} else if (timeoutMillis < 0L) {_			throw new IllegalArgumentException("invalid timeout")__		}__		final long deadline = System.nanoTime() + timeoutMillis * 1_000_000L___		lock.lock()__		try {_			while (open && elements.isEmpty() && timeoutMillis > 0) {_				nonEmpty.await(timeoutMillis, TimeUnit.MILLISECONDS)__				timeoutMillis = (deadline - System.nanoTime()) / 1_000_000L__			}__			if (!open) {_				throw new IllegalStateException("queue is closed")__			}_			else if (elements.isEmpty()) {_				return null__			} else {_				return elements.removeFirst()__			}_		} finally {_			lock.unlock()__		}_	};returns,the,next,element,in,the,queue,if,the,queue,is,empty,this,method,waits,at,most,a,certain,time,until,an,element,becomes,available,if,no,element,is,available,after,that,time,the,method,returns,null,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,param,timeout,millis,the,number,of,milliseconds,to,block,at,most,return,the,next,element,in,the,queue,or,null,if,the,timeout,expires,before,an,element,is,available,throws,illegal,state,exception,thrown,if,the,queue,is,closed,throws,interrupted,exception,throw,if,the,thread,is,interrupted,while,waiting,for,an,element,to,be,added;public,e,get,element,blocking,long,timeout,millis,throws,interrupted,exception,if,timeout,millis,0l,return,get,element,blocking,else,if,timeout,millis,0l,throw,new,illegal,argument,exception,invalid,timeout,final,long,deadline,system,nano,time,timeout,millis,lock,lock,try,while,open,elements,is,empty,timeout,millis,0,non,empty,await,timeout,millis,time,unit,milliseconds,timeout,millis,deadline,system,nano,time,if,open,throw,new,illegal,state,exception,queue,is,closed,else,if,elements,is,empty,return,null,else,return,elements,remove,first,finally,lock,unlock
ClosableBlockingQueue -> public E getElementBlocking(long timeoutMillis) throws InterruptedException;1515757409;Returns the next element in the queue. If the queue is empty, this method_waits at most a certain time until an element becomes available. If no element_is available after that time, the method returns null.__<p>The method throws an {@code IllegalStateException} if the queue is closed._Checking whether the queue is open and removing the next element is one atomic operation.__@param timeoutMillis The number of milliseconds to block, at most._@return The next element in the queue, or null, if the timeout expires  before an element is available.__@throws IllegalStateException Thrown, if the queue is closed._@throws InterruptedException Throw, if the thread is interrupted while waiting for an_element to be added.;public E getElementBlocking(long timeoutMillis) throws InterruptedException {_		if (timeoutMillis == 0L) {_			_			return getElementBlocking()__		} else if (timeoutMillis < 0L) {_			throw new IllegalArgumentException("invalid timeout")__		}__		final long deadline = System.nanoTime() + timeoutMillis * 1_000_000L___		lock.lock()__		try {_			while (open && elements.isEmpty() && timeoutMillis > 0) {_				nonEmpty.await(timeoutMillis, TimeUnit.MILLISECONDS)__				timeoutMillis = (deadline - System.nanoTime()) / 1_000_000L__			}__			if (!open) {_				throw new IllegalStateException("queue is closed")__			}_			else if (elements.isEmpty()) {_				return null__			} else {_				return elements.removeFirst()__			}_		} finally {_			lock.unlock()__		}_	};returns,the,next,element,in,the,queue,if,the,queue,is,empty,this,method,waits,at,most,a,certain,time,until,an,element,becomes,available,if,no,element,is,available,after,that,time,the,method,returns,null,p,the,method,throws,an,code,illegal,state,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,removing,the,next,element,is,one,atomic,operation,param,timeout,millis,the,number,of,milliseconds,to,block,at,most,return,the,next,element,in,the,queue,or,null,if,the,timeout,expires,before,an,element,is,available,throws,illegal,state,exception,thrown,if,the,queue,is,closed,throws,interrupted,exception,throw,if,the,thread,is,interrupted,while,waiting,for,an,element,to,be,added;public,e,get,element,blocking,long,timeout,millis,throws,interrupted,exception,if,timeout,millis,0l,return,get,element,blocking,else,if,timeout,millis,0l,throw,new,illegal,argument,exception,invalid,timeout,final,long,deadline,system,nano,time,timeout,millis,lock,lock,try,while,open,elements,is,empty,timeout,millis,0,non,empty,await,timeout,millis,time,unit,milliseconds,timeout,millis,deadline,system,nano,time,if,open,throw,new,illegal,state,exception,queue,is,closed,else,if,elements,is,empty,return,null,else,return,elements,remove,first,finally,lock,unlock
ClosableBlockingQueue -> public ClosableBlockingQueue(Collection<? extends E> initialElements);1498894422;Creates a new queue that contains the given elements.__@param initialElements The elements to initially add to the queue.;public ClosableBlockingQueue(Collection<? extends E> initialElements) {_		this(initialElements.size())__		this.elements.addAll(initialElements)__	};creates,a,new,queue,that,contains,the,given,elements,param,initial,elements,the,elements,to,initially,add,to,the,queue;public,closable,blocking,queue,collection,extends,e,initial,elements,this,initial,elements,size,this,elements,add,all,initial,elements
ClosableBlockingQueue -> public ClosableBlockingQueue(Collection<? extends E> initialElements);1515177485;Creates a new queue that contains the given elements.__@param initialElements The elements to initially add to the queue.;public ClosableBlockingQueue(Collection<? extends E> initialElements) {_		this(initialElements.size())__		this.elements.addAll(initialElements)__	};creates,a,new,queue,that,contains,the,given,elements,param,initial,elements,the,elements,to,initially,add,to,the,queue;public,closable,blocking,queue,collection,extends,e,initial,elements,this,initial,elements,size,this,elements,add,all,initial,elements
ClosableBlockingQueue -> public ClosableBlockingQueue(Collection<? extends E> initialElements);1515757409;Creates a new queue that contains the given elements.__@param initialElements The elements to initially add to the queue.;public ClosableBlockingQueue(Collection<? extends E> initialElements) {_		this(initialElements.size())__		this.elements.addAll(initialElements)__	};creates,a,new,queue,that,contains,the,given,elements,param,initial,elements,the,elements,to,initially,add,to,the,queue;public,closable,blocking,queue,collection,extends,e,initial,elements,this,initial,elements,size,this,elements,add,all,initial,elements
ClosableBlockingQueue -> public void add(E element) throws IllegalStateException;1498894422;Adds the element to the queue, or fails with an exception, if the queue is closed._Checking whether the queue is open and adding the element is one atomic operation.__@param element The element to add._@throws IllegalStateException Thrown, if the queue is closed.;public void add(E element) throws IllegalStateException {_		requireNonNull(element)___		lock.lock()__		try {_			if (open) {_				elements.addLast(element)__				if (elements.size() == 1) {_					nonEmpty.signalAll()__				}_			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};adds,the,element,to,the,queue,or,fails,with,an,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,adding,the,element,is,one,atomic,operation,param,element,the,element,to,add,throws,illegal,state,exception,thrown,if,the,queue,is,closed;public,void,add,e,element,throws,illegal,state,exception,require,non,null,element,lock,lock,try,if,open,elements,add,last,element,if,elements,size,1,non,empty,signal,all,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public void add(E element) throws IllegalStateException;1515177485;Adds the element to the queue, or fails with an exception, if the queue is closed._Checking whether the queue is open and adding the element is one atomic operation.__@param element The element to add._@throws IllegalStateException Thrown, if the queue is closed.;public void add(E element) throws IllegalStateException {_		requireNonNull(element)___		lock.lock()__		try {_			if (open) {_				elements.addLast(element)__				if (elements.size() == 1) {_					nonEmpty.signalAll()__				}_			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};adds,the,element,to,the,queue,or,fails,with,an,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,adding,the,element,is,one,atomic,operation,param,element,the,element,to,add,throws,illegal,state,exception,thrown,if,the,queue,is,closed;public,void,add,e,element,throws,illegal,state,exception,require,non,null,element,lock,lock,try,if,open,elements,add,last,element,if,elements,size,1,non,empty,signal,all,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
ClosableBlockingQueue -> public void add(E element) throws IllegalStateException;1515757409;Adds the element to the queue, or fails with an exception, if the queue is closed._Checking whether the queue is open and adding the element is one atomic operation.__@param element The element to add._@throws IllegalStateException Thrown, if the queue is closed.;public void add(E element) throws IllegalStateException {_		requireNonNull(element)___		lock.lock()__		try {_			if (open) {_				elements.addLast(element)__				if (elements.size() == 1) {_					nonEmpty.signalAll()__				}_			} else {_				throw new IllegalStateException("queue is closed")__			}_		} finally {_			lock.unlock()__		}_	};adds,the,element,to,the,queue,or,fails,with,an,exception,if,the,queue,is,closed,checking,whether,the,queue,is,open,and,adding,the,element,is,one,atomic,operation,param,element,the,element,to,add,throws,illegal,state,exception,thrown,if,the,queue,is,closed;public,void,add,e,element,throws,illegal,state,exception,require,non,null,element,lock,lock,try,if,open,elements,add,last,element,if,elements,size,1,non,empty,signal,all,else,throw,new,illegal,state,exception,queue,is,closed,finally,lock,unlock
