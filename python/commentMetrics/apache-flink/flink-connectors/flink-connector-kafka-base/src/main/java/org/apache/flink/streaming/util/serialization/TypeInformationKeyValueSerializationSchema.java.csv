commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;// ------------------------------------------------------------------------ @Override public Tuple2<K, V> deserialize(ConsumerRecord<byte[], byte[]> record) throws Exception {     K key = null.     V value = null.     if (record.key() != null) {         inputDeserializer.setBuffer(record.key()).         key = keySerializer.deserialize(inputDeserializer).     }     if (record.value() != null) {         inputDeserializer.setBuffer(record.value()).         value = valueSerializer.deserialize(inputDeserializer).     }     return new Tuple2<>(key, value). }
true;public;1;4;/**  * This schema never considers an element to signal end-of-stream, so this method returns always false.  * @param nextElement The element to test for the end-of-stream signal.  * @return Returns false.  */ ;/**  * This schema never considers an element to signal end-of-stream, so this method returns always false.  * @param nextElement The element to test for the end-of-stream signal.  * @return Returns false.  */ @Override public boolean isEndOfStream(Tuple2<K, V> nextElement) {     return false. }
false;public;1;26;;@Override public byte[] serializeKey(Tuple2<K, V> element) {     if (element.f0 == null) {         return null.     } else {         // key is not null. serialize it:         if (keyOutputSerializer == null) {             keyOutputSerializer = new DataOutputSerializer(16).         }         try {             keySerializer.serialize(element.f0, keyOutputSerializer).         } catch (IOException e) {             throw new RuntimeException("Unable to serialize record", e).         }         // check if key byte array size changed         byte[] res = keyOutputSerializer.getByteArray().         if (res.length != keyOutputSerializer.length()) {             byte[] n = new byte[keyOutputSerializer.length()].             System.arraycopy(res, 0, n, 0, keyOutputSerializer.length()).             res = n.         }         keyOutputSerializer.clear().         return res.     } }
false;public;1;27;;@Override public byte[] serializeValue(Tuple2<K, V> element) {     // if the value is null, its serialized value is null as well.     if (element.f1 == null) {         return null.     }     if (valueOutputSerializer == null) {         valueOutputSerializer = new DataOutputSerializer(16).     }     try {         valueSerializer.serialize(element.f1, valueOutputSerializer).     } catch (IOException e) {         throw new RuntimeException("Unable to serialize record", e).     }     byte[] res = valueOutputSerializer.getByteArray().     if (res.length != valueOutputSerializer.length()) {         byte[] n = new byte[valueOutputSerializer.length()].         System.arraycopy(res, 0, n, 0, valueOutputSerializer.length()).         res = n.     }     valueOutputSerializer.clear().     return res. }
false;public;1;4;;@Override public String getTargetTopic(Tuple2<K, V> element) {     // we are never overriding the topic     return null. }
false;public;0;10;;@Override public TypeInformation<Tuple2<K, V>> getProducedType() {     if (typeInfo != null) {         return typeInfo.     } else {         throw new IllegalStateException("The type information is not available after this class has been serialized and distributed.").     } }
