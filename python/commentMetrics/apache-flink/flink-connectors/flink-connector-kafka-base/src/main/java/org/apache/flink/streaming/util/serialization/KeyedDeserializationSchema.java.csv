commented;modifiers;parameterAmount;loc;comment;code
true;;5;1;/**  * Deserializes the byte message.  *  * @param messageKey the key as a byte array (null if no key has been set).  * @param message The message, as a byte array (null if the message was empty or deleted).  * @param partition The partition the message has originated from.  * @param offset the offset of the message in the original source (for example the Kafka offset).  *  * @return The deserialized message as an object (null if the message cannot be deserialized).  */ ;/**  * Deserializes the byte message.  *  * @param messageKey the key as a byte array (null if no key has been set).  * @param message The message, as a byte array (null if the message was empty or deleted).  * @param partition The partition the message has originated from.  * @param offset the offset of the message in the original source (for example the Kafka offset).  *  * @return The deserialized message as an object (null if the message cannot be deserialized).  */ T deserialize(byte[] messageKey, byte[] message, String topic, int partition, long offset) throws IOException.
false;default;1;4;;@Override default T deserialize(ConsumerRecord<byte[], byte[]> record) throws IOException {     return deserialize(record.key(), record.value(), record.topic(), record.partition(), record.offset()). }
