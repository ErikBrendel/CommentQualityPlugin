commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ------------------------------------------------------------------------ public String getTopic() {     return topic. }
false;public;0;3;;public int getPartition() {     return partition. }
false;public;0;7;;// ------------------------------------------------------------------------ @Override public String toString() {     return "KafkaTopicPartition{" + "topic='" + topic + '\'' + ", partition=" + partition + '}'. }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     } else if (o instanceof KafkaTopicPartition) {         KafkaTopicPartition that = (KafkaTopicPartition) o.         return this.partition == that.partition && this.topic.equals(that.topic).     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return cachedHash. }
false;public,static;1;8;;// ------------------------------------------------------------------------ // Utilities // ------------------------------------------------------------------------ public static String toString(Map<KafkaTopicPartition, Long> map) {     StringBuilder sb = new StringBuilder().     for (Map.Entry<KafkaTopicPartition, Long> p : map.entrySet()) {         KafkaTopicPartition ktp = p.getKey().         sb.append(ktp.getTopic()).append(":").append(ktp.getPartition()).append("=").append(p.getValue()).append(", ").     }     return sb.toString(). }
false;public,static;1;7;;public static String toString(List<KafkaTopicPartition> partitions) {     StringBuilder sb = new StringBuilder().     for (KafkaTopicPartition p : partitions) {         sb.append(p.getTopic()).append(":").append(p.getPartition()).append(", ").     }     return sb.toString(). }
false;public,static;1;7;;public static List<KafkaTopicPartition> dropLeaderData(List<KafkaTopicPartitionLeader> partitionInfos) {     List<KafkaTopicPartition> ret = new ArrayList<>(partitionInfos.size()).     for (KafkaTopicPartitionLeader ktpl : partitionInfos) {         ret.add(ktpl.getTopicPartition()).     }     return ret. }
false;public;2;8;;@Override public int compare(KafkaTopicPartition p1, KafkaTopicPartition p2) {     if (!p1.getTopic().equals(p2.getTopic())) {         return p1.getTopic().compareTo(p2.getTopic()).     } else {         return Integer.compare(p1.getPartition(), p2.getPartition()).     } }
