commented;modifiers;parameterAmount;loc;comment;code
true;public;1;6;/**  * Sets the exception and interrupts the target thread,  * if no other exception has occurred so far.  *  * <p>The exception is only set (and the interruption is only triggered),  * if no other exception was set before.  *  * @param t The exception that occurred  */ ;// ------------------------------------------------------------------------ /**  * Sets the exception and interrupts the target thread,  * if no other exception has occurred so far.  *  * <p>The exception is only set (and the interruption is only triggered),  * if no other exception was set before.  *  * @param t The exception that occurred  */ public void reportError(Throwable t) {     // set the exception, if it is the first (and the exception is non null)     if (t != null && exception.compareAndSet(null, t) && toInterrupt != null) {         toInterrupt.interrupt().     } }
true;public;0;14;/**  * Checks whether an exception has been set via {@link #reportError(Throwable)}.  * If yes, that exception if re-thrown by this method.  *  * @throws Exception This method re-throws the exception, if set.  */ ;/**  * Checks whether an exception has been set via {@link #reportError(Throwable)}.  * If yes, that exception if re-thrown by this method.  *  * @throws Exception This method re-throws the exception, if set.  */ public void checkAndThrowException() throws Exception {     Throwable t = exception.get().     if (t != null) {         if (t instanceof Exception) {             throw (Exception) t.         } else if (t instanceof Error) {             throw (Error) t.         } else {             throw new Exception(t).         }     } }
