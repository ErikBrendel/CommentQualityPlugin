# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractPartitionDiscoverer -> public void wakeup();1498894422;Interrupt an in-progress discovery attempt by throwing a {@link WakeupException}._If no attempt is in progress, the immediate next attempt will throw a {@link WakeupException}.__<p>This method can be called concurrently from a different thread.;public void wakeup() {_		wakeup = true__		wakeupConnections()__	};interrupt,an,in,progress,discovery,attempt,by,throwing,a,link,wakeup,exception,if,no,attempt,is,in,progress,the,immediate,next,attempt,will,throw,a,link,wakeup,exception,p,this,method,can,be,called,concurrently,from,a,different,thread;public,void,wakeup,wakeup,true,wakeup,connections
AbstractPartitionDiscoverer -> public void wakeup();1500818418;Interrupt an in-progress discovery attempt by throwing a {@link WakeupException}._If no attempt is in progress, the immediate next attempt will throw a {@link WakeupException}.__<p>This method can be called concurrently from a different thread.;public void wakeup() {_		wakeup = true__		wakeupConnections()__	};interrupt,an,in,progress,discovery,attempt,by,throwing,a,link,wakeup,exception,if,no,attempt,is,in,progress,the,immediate,next,attempt,will,throw,a,link,wakeup,exception,p,this,method,can,be,called,concurrently,from,a,different,thread;public,void,wakeup,wakeup,true,wakeup,connections
AbstractPartitionDiscoverer -> public void wakeup();1501249949;Interrupt an in-progress discovery attempt by throwing a {@link WakeupException}._If no attempt is in progress, the immediate next attempt will throw a {@link WakeupException}.__<p>This method can be called concurrently from a different thread.;public void wakeup() {_		wakeup = true__		wakeupConnections()__	};interrupt,an,in,progress,discovery,attempt,by,throwing,a,link,wakeup,exception,if,no,attempt,is,in,progress,the,immediate,next,attempt,will,throw,a,link,wakeup,exception,p,this,method,can,be,called,concurrently,from,a,different,thread;public,void,wakeup,wakeup,true,wakeup,connections
AbstractPartitionDiscoverer -> public void wakeup();1504760040;Interrupt an in-progress discovery attempt by throwing a {@link WakeupException}._If no attempt is in progress, the immediate next attempt will throw a {@link WakeupException}.__<p>This method can be called concurrently from a different thread.;public void wakeup() {_		wakeup = true__		wakeupConnections()__	};interrupt,an,in,progress,discovery,attempt,by,throwing,a,link,wakeup,exception,if,no,attempt,is,in,progress,the,immediate,next,attempt,will,throw,a,link,wakeup,exception,p,this,method,can,be,called,concurrently,from,a,different,thread;public,void,wakeup,wakeup,true,wakeup,connections
AbstractPartitionDiscoverer -> public void wakeup();1504760046;Interrupt an in-progress discovery attempt by throwing a {@link WakeupException}._If no attempt is in progress, the immediate next attempt will throw a {@link WakeupException}.__<p>This method can be called concurrently from a different thread.;public void wakeup() {_		wakeup = true__		wakeupConnections()__	};interrupt,an,in,progress,discovery,attempt,by,throwing,a,link,wakeup,exception,if,no,attempt,is,in,progress,the,immediate,next,attempt,will,throw,a,link,wakeup,exception,p,this,method,can,be,called,concurrently,from,a,different,thread;public,void,wakeup,wakeup,true,wakeup,connections
AbstractPartitionDiscoverer -> public void wakeup();1515757409;Interrupt an in-progress discovery attempt by throwing a {@link WakeupException}._If no attempt is in progress, the immediate next attempt will throw a {@link WakeupException}.__<p>This method can be called concurrently from a different thread.;public void wakeup() {_		wakeup = true__		wakeupConnections()__	};interrupt,an,in,progress,discovery,attempt,by,throwing,a,link,wakeup,exception,if,no,attempt,is,in,progress,the,immediate,next,attempt,will,throw,a,link,wakeup,exception,p,this,method,can,be,called,concurrently,from,a,different,thread;public,void,wakeup,wakeup,true,wakeup,connections
AbstractPartitionDiscoverer -> public boolean setAndCheckDiscoveredPartition(KafkaTopicPartition partition);1498894422;Sets a partition as discovered. Partitions are considered as new_if its partition id is larger than all partition ids previously_seen for the topic it belongs to. Therefore, for a set of_discovered partitions, the order that this method is invoked with_each partition is important.__<p>If the partition is indeed newly discovered, this method also returns_whether the new partition should be subscribed by this subtask.__@param partition the partition to set and check__@return {@code true}, if the partition wasn't seen before and should_be subscribed by this subtask_ {@code false} otherwise;public boolean setAndCheckDiscoveredPartition(KafkaTopicPartition partition) {_		if (isUndiscoveredPartition(partition)) {_				topicsToLargestDiscoveredPartitionId.put(partition.getTopic(), partition.getPartition())___			return shouldAssignToThisSubtask(partition, indexOfThisSubtask, numParallelSubtasks)__		}__		return false__	};sets,a,partition,as,discovered,partitions,are,considered,as,new,if,its,partition,id,is,larger,than,all,partition,ids,previously,seen,for,the,topic,it,belongs,to,therefore,for,a,set,of,discovered,partitions,the,order,that,this,method,is,invoked,with,each,partition,is,important,p,if,the,partition,is,indeed,newly,discovered,this,method,also,returns,whether,the,new,partition,should,be,subscribed,by,this,subtask,param,partition,the,partition,to,set,and,check,return,code,true,if,the,partition,wasn,t,seen,before,and,should,be,subscribed,by,this,subtask,code,false,otherwise;public,boolean,set,and,check,discovered,partition,kafka,topic,partition,partition,if,is,undiscovered,partition,partition,topics,to,largest,discovered,partition,id,put,partition,get,topic,partition,get,partition,return,should,assign,to,this,subtask,partition,index,of,this,subtask,num,parallel,subtasks,return,false
AbstractPartitionDiscoverer -> public boolean setAndCheckDiscoveredPartition(KafkaTopicPartition partition);1500818418;Sets a partition as discovered. Partitions are considered as new_if its partition id is larger than all partition ids previously_seen for the topic it belongs to. Therefore, for a set of_discovered partitions, the order that this method is invoked with_each partition is important.__<p>If the partition is indeed newly discovered, this method also returns_whether the new partition should be subscribed by this subtask.__@param partition the partition to set and check__@return {@code true}, if the partition wasn't seen before and should_be subscribed by this subtask_ {@code false} otherwise;public boolean setAndCheckDiscoveredPartition(KafkaTopicPartition partition) {_		if (isUndiscoveredPartition(partition)) {_			topicsToLargestDiscoveredPartitionId.put(partition.getTopic(), partition.getPartition())___			return shouldAssignToThisSubtask(partition, indexOfThisSubtask, numParallelSubtasks)__		}__		return false__	};sets,a,partition,as,discovered,partitions,are,considered,as,new,if,its,partition,id,is,larger,than,all,partition,ids,previously,seen,for,the,topic,it,belongs,to,therefore,for,a,set,of,discovered,partitions,the,order,that,this,method,is,invoked,with,each,partition,is,important,p,if,the,partition,is,indeed,newly,discovered,this,method,also,returns,whether,the,new,partition,should,be,subscribed,by,this,subtask,param,partition,the,partition,to,set,and,check,return,code,true,if,the,partition,wasn,t,seen,before,and,should,be,subscribed,by,this,subtask,code,false,otherwise;public,boolean,set,and,check,discovered,partition,kafka,topic,partition,partition,if,is,undiscovered,partition,partition,topics,to,largest,discovered,partition,id,put,partition,get,topic,partition,get,partition,return,should,assign,to,this,subtask,partition,index,of,this,subtask,num,parallel,subtasks,return,false
AbstractPartitionDiscoverer -> public boolean setAndCheckDiscoveredPartition(KafkaTopicPartition partition);1501249949;Sets a partition as discovered. Partitions are considered as new_if its partition id is larger than all partition ids previously_seen for the topic it belongs to. Therefore, for a set of_discovered partitions, the order that this method is invoked with_each partition is important.__<p>If the partition is indeed newly discovered, this method also returns_whether the new partition should be subscribed by this subtask.__@param partition the partition to set and check__@return {@code true}, if the partition wasn't seen before and should_be subscribed by this subtask_ {@code false} otherwise;public boolean setAndCheckDiscoveredPartition(KafkaTopicPartition partition) {_		if (isUndiscoveredPartition(partition)) {_			topicsToLargestDiscoveredPartitionId.put(partition.getTopic(), partition.getPartition())___			return KafkaTopicPartitionAssigner.assign(partition, numParallelSubtasks) == indexOfThisSubtask__		}__		return false__	};sets,a,partition,as,discovered,partitions,are,considered,as,new,if,its,partition,id,is,larger,than,all,partition,ids,previously,seen,for,the,topic,it,belongs,to,therefore,for,a,set,of,discovered,partitions,the,order,that,this,method,is,invoked,with,each,partition,is,important,p,if,the,partition,is,indeed,newly,discovered,this,method,also,returns,whether,the,new,partition,should,be,subscribed,by,this,subtask,param,partition,the,partition,to,set,and,check,return,code,true,if,the,partition,wasn,t,seen,before,and,should,be,subscribed,by,this,subtask,code,false,otherwise;public,boolean,set,and,check,discovered,partition,kafka,topic,partition,partition,if,is,undiscovered,partition,partition,topics,to,largest,discovered,partition,id,put,partition,get,topic,partition,get,partition,return,kafka,topic,partition,assigner,assign,partition,num,parallel,subtasks,index,of,this,subtask,return,false
AbstractPartitionDiscoverer -> public boolean setAndCheckDiscoveredPartition(KafkaTopicPartition partition);1504760040;Sets a partition as discovered. Partitions are considered as new_if its partition id is larger than all partition ids previously_seen for the topic it belongs to. Therefore, for a set of_discovered partitions, the order that this method is invoked with_each partition is important.__<p>If the partition is indeed newly discovered, this method also returns_whether the new partition should be subscribed by this subtask.__@param partition the partition to set and check__@return {@code true}, if the partition wasn't seen before and should_be subscribed by this subtask_ {@code false} otherwise;public boolean setAndCheckDiscoveredPartition(KafkaTopicPartition partition) {_		if (isUndiscoveredPartition(partition)) {_			discoveredPartitions.add(partition)___			return KafkaTopicPartitionAssigner.assign(partition, numParallelSubtasks) == indexOfThisSubtask__		}__		return false__	};sets,a,partition,as,discovered,partitions,are,considered,as,new,if,its,partition,id,is,larger,than,all,partition,ids,previously,seen,for,the,topic,it,belongs,to,therefore,for,a,set,of,discovered,partitions,the,order,that,this,method,is,invoked,with,each,partition,is,important,p,if,the,partition,is,indeed,newly,discovered,this,method,also,returns,whether,the,new,partition,should,be,subscribed,by,this,subtask,param,partition,the,partition,to,set,and,check,return,code,true,if,the,partition,wasn,t,seen,before,and,should,be,subscribed,by,this,subtask,code,false,otherwise;public,boolean,set,and,check,discovered,partition,kafka,topic,partition,partition,if,is,undiscovered,partition,partition,discovered,partitions,add,partition,return,kafka,topic,partition,assigner,assign,partition,num,parallel,subtasks,index,of,this,subtask,return,false
AbstractPartitionDiscoverer -> public boolean setAndCheckDiscoveredPartition(KafkaTopicPartition partition);1504760046;Sets a partition as discovered. Partitions are considered as new_if its partition id is larger than all partition ids previously_seen for the topic it belongs to. Therefore, for a set of_discovered partitions, the order that this method is invoked with_each partition is important.__<p>If the partition is indeed newly discovered, this method also returns_whether the new partition should be subscribed by this subtask.__@param partition the partition to set and check__@return {@code true}, if the partition wasn't seen before and should_be subscribed by this subtask_ {@code false} otherwise;public boolean setAndCheckDiscoveredPartition(KafkaTopicPartition partition) {_		if (isUndiscoveredPartition(partition)) {_			discoveredPartitions.add(partition)___			return KafkaTopicPartitionAssigner.assign(partition, numParallelSubtasks) == indexOfThisSubtask__		}__		return false__	};sets,a,partition,as,discovered,partitions,are,considered,as,new,if,its,partition,id,is,larger,than,all,partition,ids,previously,seen,for,the,topic,it,belongs,to,therefore,for,a,set,of,discovered,partitions,the,order,that,this,method,is,invoked,with,each,partition,is,important,p,if,the,partition,is,indeed,newly,discovered,this,method,also,returns,whether,the,new,partition,should,be,subscribed,by,this,subtask,param,partition,the,partition,to,set,and,check,return,code,true,if,the,partition,wasn,t,seen,before,and,should,be,subscribed,by,this,subtask,code,false,otherwise;public,boolean,set,and,check,discovered,partition,kafka,topic,partition,partition,if,is,undiscovered,partition,partition,discovered,partitions,add,partition,return,kafka,topic,partition,assigner,assign,partition,num,parallel,subtasks,index,of,this,subtask,return,false
AbstractPartitionDiscoverer -> public boolean setAndCheckDiscoveredPartition(KafkaTopicPartition partition);1515757409;Sets a partition as discovered. Partitions are considered as new_if its partition id is larger than all partition ids previously_seen for the topic it belongs to. Therefore, for a set of_discovered partitions, the order that this method is invoked with_each partition is important.__<p>If the partition is indeed newly discovered, this method also returns_whether the new partition should be subscribed by this subtask.__@param partition the partition to set and check__@return {@code true}, if the partition wasn't seen before and should_be subscribed by this subtask_ {@code false} otherwise;public boolean setAndCheckDiscoveredPartition(KafkaTopicPartition partition) {_		if (isUndiscoveredPartition(partition)) {_			discoveredPartitions.add(partition)___			return KafkaTopicPartitionAssigner.assign(partition, numParallelSubtasks) == indexOfThisSubtask__		}__		return false__	};sets,a,partition,as,discovered,partitions,are,considered,as,new,if,its,partition,id,is,larger,than,all,partition,ids,previously,seen,for,the,topic,it,belongs,to,therefore,for,a,set,of,discovered,partitions,the,order,that,this,method,is,invoked,with,each,partition,is,important,p,if,the,partition,is,indeed,newly,discovered,this,method,also,returns,whether,the,new,partition,should,be,subscribed,by,this,subtask,param,partition,the,partition,to,set,and,check,return,code,true,if,the,partition,wasn,t,seen,before,and,should,be,subscribed,by,this,subtask,code,false,otherwise;public,boolean,set,and,check,discovered,partition,kafka,topic,partition,partition,if,is,undiscovered,partition,partition,discovered,partitions,add,partition,return,kafka,topic,partition,assigner,assign,partition,num,parallel,subtasks,index,of,this,subtask,return,false
AbstractPartitionDiscoverer -> public void open() throws Exception;1498894422;Opens the partition discoverer, initializing all required Kafka connections.__<p>NOTE: thread-safety is not guaranteed.;public void open() throws Exception {_		closed = false__		initializeConnections()__	};opens,the,partition,discoverer,initializing,all,required,kafka,connections,p,note,thread,safety,is,not,guaranteed;public,void,open,throws,exception,closed,false,initialize,connections
AbstractPartitionDiscoverer -> public void open() throws Exception;1500818418;Opens the partition discoverer, initializing all required Kafka connections.__<p>NOTE: thread-safety is not guaranteed.;public void open() throws Exception {_		closed = false__		initializeConnections()__	};opens,the,partition,discoverer,initializing,all,required,kafka,connections,p,note,thread,safety,is,not,guaranteed;public,void,open,throws,exception,closed,false,initialize,connections
AbstractPartitionDiscoverer -> public void open() throws Exception;1501249949;Opens the partition discoverer, initializing all required Kafka connections.__<p>NOTE: thread-safety is not guaranteed.;public void open() throws Exception {_		closed = false__		initializeConnections()__	};opens,the,partition,discoverer,initializing,all,required,kafka,connections,p,note,thread,safety,is,not,guaranteed;public,void,open,throws,exception,closed,false,initialize,connections
AbstractPartitionDiscoverer -> public void open() throws Exception;1504760040;Opens the partition discoverer, initializing all required Kafka connections.__<p>NOTE: thread-safety is not guaranteed.;public void open() throws Exception {_		closed = false__		initializeConnections()__	};opens,the,partition,discoverer,initializing,all,required,kafka,connections,p,note,thread,safety,is,not,guaranteed;public,void,open,throws,exception,closed,false,initialize,connections
AbstractPartitionDiscoverer -> public void open() throws Exception;1504760046;Opens the partition discoverer, initializing all required Kafka connections.__<p>NOTE: thread-safety is not guaranteed.;public void open() throws Exception {_		closed = false__		initializeConnections()__	};opens,the,partition,discoverer,initializing,all,required,kafka,connections,p,note,thread,safety,is,not,guaranteed;public,void,open,throws,exception,closed,false,initialize,connections
AbstractPartitionDiscoverer -> public void open() throws Exception;1515757409;Opens the partition discoverer, initializing all required Kafka connections.__<p>NOTE: thread-safety is not guaranteed.;public void open() throws Exception {_		closed = false__		initializeConnections()__	};opens,the,partition,discoverer,initializing,all,required,kafka,connections,p,note,thread,safety,is,not,guaranteed;public,void,open,throws,exception,closed,false,initialize,connections
AbstractPartitionDiscoverer -> public void close() throws Exception;1498894422;Closes the partition discoverer, cleaning up all Kafka connections.__<p>NOTE: thread-safety is not guaranteed.;public void close() throws Exception {_		closed = true__		closeConnections()__	};closes,the,partition,discoverer,cleaning,up,all,kafka,connections,p,note,thread,safety,is,not,guaranteed;public,void,close,throws,exception,closed,true,close,connections
AbstractPartitionDiscoverer -> public void close() throws Exception;1500818418;Closes the partition discoverer, cleaning up all Kafka connections.__<p>NOTE: thread-safety is not guaranteed.;public void close() throws Exception {_		closed = true__		closeConnections()__	};closes,the,partition,discoverer,cleaning,up,all,kafka,connections,p,note,thread,safety,is,not,guaranteed;public,void,close,throws,exception,closed,true,close,connections
AbstractPartitionDiscoverer -> public void close() throws Exception;1501249949;Closes the partition discoverer, cleaning up all Kafka connections.__<p>NOTE: thread-safety is not guaranteed.;public void close() throws Exception {_		closed = true__		closeConnections()__	};closes,the,partition,discoverer,cleaning,up,all,kafka,connections,p,note,thread,safety,is,not,guaranteed;public,void,close,throws,exception,closed,true,close,connections
AbstractPartitionDiscoverer -> public void close() throws Exception;1504760040;Closes the partition discoverer, cleaning up all Kafka connections.__<p>NOTE: thread-safety is not guaranteed.;public void close() throws Exception {_		closed = true__		closeConnections()__	};closes,the,partition,discoverer,cleaning,up,all,kafka,connections,p,note,thread,safety,is,not,guaranteed;public,void,close,throws,exception,closed,true,close,connections
AbstractPartitionDiscoverer -> public void close() throws Exception;1504760046;Closes the partition discoverer, cleaning up all Kafka connections.__<p>NOTE: thread-safety is not guaranteed.;public void close() throws Exception {_		closed = true__		closeConnections()__	};closes,the,partition,discoverer,cleaning,up,all,kafka,connections,p,note,thread,safety,is,not,guaranteed;public,void,close,throws,exception,closed,true,close,connections
AbstractPartitionDiscoverer -> public void close() throws Exception;1515757409;Closes the partition discoverer, cleaning up all Kafka connections.__<p>NOTE: thread-safety is not guaranteed.;public void close() throws Exception {_		closed = true__		closeConnections()__	};closes,the,partition,discoverer,cleaning,up,all,kafka,connections,p,note,thread,safety,is,not,guaranteed;public,void,close,throws,exception,closed,true,close,connections
AbstractPartitionDiscoverer -> protected abstract void wakeupConnections()_;1498894422;Attempt to eagerly wakeup from blocking calls to Kafka in {@link AbstractPartitionDiscoverer#getAllTopics()}_and {@link AbstractPartitionDiscoverer#getAllPartitionsForTopics(List)}.__<p>If the invocation indeed results in interrupting an actual blocking Kafka call, the implementations_of {@link AbstractPartitionDiscoverer#getAllTopics()} and_{@link AbstractPartitionDiscoverer#getAllPartitionsForTopics(List)} are responsible of throwing a_{@link WakeupException}.;protected abstract void wakeupConnections()_;attempt,to,eagerly,wakeup,from,blocking,calls,to,kafka,in,link,abstract,partition,discoverer,get,all,topics,and,link,abstract,partition,discoverer,get,all,partitions,for,topics,list,p,if,the,invocation,indeed,results,in,interrupting,an,actual,blocking,kafka,call,the,implementations,of,link,abstract,partition,discoverer,get,all,topics,and,link,abstract,partition,discoverer,get,all,partitions,for,topics,list,are,responsible,of,throwing,a,link,wakeup,exception;protected,abstract,void,wakeup,connections
AbstractPartitionDiscoverer -> protected abstract void wakeupConnections()_;1500818418;Attempt to eagerly wakeup from blocking calls to Kafka in {@link AbstractPartitionDiscoverer#getAllTopics()}_and {@link AbstractPartitionDiscoverer#getAllPartitionsForTopics(List)}.__<p>If the invocation indeed results in interrupting an actual blocking Kafka call, the implementations_of {@link AbstractPartitionDiscoverer#getAllTopics()} and_{@link AbstractPartitionDiscoverer#getAllPartitionsForTopics(List)} are responsible of throwing a_{@link WakeupException}.;protected abstract void wakeupConnections()_;attempt,to,eagerly,wakeup,from,blocking,calls,to,kafka,in,link,abstract,partition,discoverer,get,all,topics,and,link,abstract,partition,discoverer,get,all,partitions,for,topics,list,p,if,the,invocation,indeed,results,in,interrupting,an,actual,blocking,kafka,call,the,implementations,of,link,abstract,partition,discoverer,get,all,topics,and,link,abstract,partition,discoverer,get,all,partitions,for,topics,list,are,responsible,of,throwing,a,link,wakeup,exception;protected,abstract,void,wakeup,connections
AbstractPartitionDiscoverer -> protected abstract void wakeupConnections()_;1501249949;Attempt to eagerly wakeup from blocking calls to Kafka in {@link AbstractPartitionDiscoverer#getAllTopics()}_and {@link AbstractPartitionDiscoverer#getAllPartitionsForTopics(List)}.__<p>If the invocation indeed results in interrupting an actual blocking Kafka call, the implementations_of {@link AbstractPartitionDiscoverer#getAllTopics()} and_{@link AbstractPartitionDiscoverer#getAllPartitionsForTopics(List)} are responsible of throwing a_{@link WakeupException}.;protected abstract void wakeupConnections()_;attempt,to,eagerly,wakeup,from,blocking,calls,to,kafka,in,link,abstract,partition,discoverer,get,all,topics,and,link,abstract,partition,discoverer,get,all,partitions,for,topics,list,p,if,the,invocation,indeed,results,in,interrupting,an,actual,blocking,kafka,call,the,implementations,of,link,abstract,partition,discoverer,get,all,topics,and,link,abstract,partition,discoverer,get,all,partitions,for,topics,list,are,responsible,of,throwing,a,link,wakeup,exception;protected,abstract,void,wakeup,connections
AbstractPartitionDiscoverer -> protected abstract void wakeupConnections()_;1504760040;Attempt to eagerly wakeup from blocking calls to Kafka in {@link AbstractPartitionDiscoverer#getAllTopics()}_and {@link AbstractPartitionDiscoverer#getAllPartitionsForTopics(List)}.__<p>If the invocation indeed results in interrupting an actual blocking Kafka call, the implementations_of {@link AbstractPartitionDiscoverer#getAllTopics()} and_{@link AbstractPartitionDiscoverer#getAllPartitionsForTopics(List)} are responsible of throwing a_{@link WakeupException}.;protected abstract void wakeupConnections()_;attempt,to,eagerly,wakeup,from,blocking,calls,to,kafka,in,link,abstract,partition,discoverer,get,all,topics,and,link,abstract,partition,discoverer,get,all,partitions,for,topics,list,p,if,the,invocation,indeed,results,in,interrupting,an,actual,blocking,kafka,call,the,implementations,of,link,abstract,partition,discoverer,get,all,topics,and,link,abstract,partition,discoverer,get,all,partitions,for,topics,list,are,responsible,of,throwing,a,link,wakeup,exception;protected,abstract,void,wakeup,connections
AbstractPartitionDiscoverer -> protected abstract void wakeupConnections()_;1504760046;Attempt to eagerly wakeup from blocking calls to Kafka in {@link AbstractPartitionDiscoverer#getAllTopics()}_and {@link AbstractPartitionDiscoverer#getAllPartitionsForTopics(List)}.__<p>If the invocation indeed results in interrupting an actual blocking Kafka call, the implementations_of {@link AbstractPartitionDiscoverer#getAllTopics()} and_{@link AbstractPartitionDiscoverer#getAllPartitionsForTopics(List)} are responsible of throwing a_{@link WakeupException}.;protected abstract void wakeupConnections()_;attempt,to,eagerly,wakeup,from,blocking,calls,to,kafka,in,link,abstract,partition,discoverer,get,all,topics,and,link,abstract,partition,discoverer,get,all,partitions,for,topics,list,p,if,the,invocation,indeed,results,in,interrupting,an,actual,blocking,kafka,call,the,implementations,of,link,abstract,partition,discoverer,get,all,topics,and,link,abstract,partition,discoverer,get,all,partitions,for,topics,list,are,responsible,of,throwing,a,link,wakeup,exception;protected,abstract,void,wakeup,connections
AbstractPartitionDiscoverer -> protected abstract void wakeupConnections()_;1515757409;Attempt to eagerly wakeup from blocking calls to Kafka in {@link AbstractPartitionDiscoverer#getAllTopics()}_and {@link AbstractPartitionDiscoverer#getAllPartitionsForTopics(List)}.__<p>If the invocation indeed results in interrupting an actual blocking Kafka call, the implementations_of {@link AbstractPartitionDiscoverer#getAllTopics()} and_{@link AbstractPartitionDiscoverer#getAllPartitionsForTopics(List)} are responsible of throwing a_{@link WakeupException}.;protected abstract void wakeupConnections()_;attempt,to,eagerly,wakeup,from,blocking,calls,to,kafka,in,link,abstract,partition,discoverer,get,all,topics,and,link,abstract,partition,discoverer,get,all,partitions,for,topics,list,p,if,the,invocation,indeed,results,in,interrupting,an,actual,blocking,kafka,call,the,implementations,of,link,abstract,partition,discoverer,get,all,topics,and,link,abstract,partition,discoverer,get,all,partitions,for,topics,list,are,responsible,of,throwing,a,link,wakeup,exception;protected,abstract,void,wakeup,connections
AbstractPartitionDiscoverer -> protected abstract void closeConnections() throws Exception_;1498894422;Close all established connections.;protected abstract void closeConnections() throws Exception_;close,all,established,connections;protected,abstract,void,close,connections,throws,exception
AbstractPartitionDiscoverer -> protected abstract void closeConnections() throws Exception_;1500818418;Close all established connections.;protected abstract void closeConnections() throws Exception_;close,all,established,connections;protected,abstract,void,close,connections,throws,exception
AbstractPartitionDiscoverer -> protected abstract void closeConnections() throws Exception_;1501249949;Close all established connections.;protected abstract void closeConnections() throws Exception_;close,all,established,connections;protected,abstract,void,close,connections,throws,exception
AbstractPartitionDiscoverer -> protected abstract void closeConnections() throws Exception_;1504760040;Close all established connections.;protected abstract void closeConnections() throws Exception_;close,all,established,connections;protected,abstract,void,close,connections,throws,exception
AbstractPartitionDiscoverer -> protected abstract void closeConnections() throws Exception_;1504760046;Close all established connections.;protected abstract void closeConnections() throws Exception_;close,all,established,connections;protected,abstract,void,close,connections,throws,exception
AbstractPartitionDiscoverer -> protected abstract void closeConnections() throws Exception_;1515757409;Close all established connections.;protected abstract void closeConnections() throws Exception_;close,all,established,connections;protected,abstract,void,close,connections,throws,exception
AbstractPartitionDiscoverer -> public List<KafkaTopicPartition> discoverPartitions() throws WakeupException, ClosedException;1498894422;Execute a partition discovery attempt for this subtask._This method lets the partition discoverer update what partitions it has discovered so far.__@return List of discovered new partitions that this subtask should subscribe to.;public List<KafkaTopicPartition> discoverPartitions() throws WakeupException, ClosedException {_		if (!closed && !wakeup) {_			try {_				List<KafkaTopicPartition> newDiscoveredPartitions___				_				if (topicsDescriptor.isFixedTopics()) {_					newDiscoveredPartitions = getAllPartitionsForTopics(topicsDescriptor.getFixedTopics())__				} else {_					List<String> matchedTopics = getAllTopics()___					_					Iterator<String> iter = matchedTopics.iterator()__					while (iter.hasNext()) {_						if (!topicsDescriptor.getTopicPattern().matcher(iter.next()).matches()) {_							iter.remove()__						}_					}__					if (matchedTopics.size() != 0) {_						_						newDiscoveredPartitions = getAllPartitionsForTopics(matchedTopics)__					} else {_						newDiscoveredPartitions = null__					}_				}__				_				if (newDiscoveredPartitions == null || newDiscoveredPartitions.isEmpty()) {_					throw new RuntimeException("Unable to retrieve any partitions with KafkaTopicsDescriptor: " + topicsDescriptor)__				} else {_					_					_					KafkaTopicPartition.sort(newDiscoveredPartitions)___					Iterator<KafkaTopicPartition> iter = newDiscoveredPartitions.iterator()__					KafkaTopicPartition nextPartition__					while (iter.hasNext()) {_						nextPartition = iter.next()__						if (!setAndCheckDiscoveredPartition(nextPartition)) {_							iter.remove()__						}_					}_				}__				return newDiscoveredPartitions__			} catch (WakeupException e) {_				_				_				wakeup = false__				throw e__			}_		} else if (!closed && wakeup) {_			_			wakeup = false__			throw new WakeupException()__		} else {_			throw new ClosedException()__		}_	};execute,a,partition,discovery,attempt,for,this,subtask,this,method,lets,the,partition,discoverer,update,what,partitions,it,has,discovered,so,far,return,list,of,discovered,new,partitions,that,this,subtask,should,subscribe,to;public,list,kafka,topic,partition,discover,partitions,throws,wakeup,exception,closed,exception,if,closed,wakeup,try,list,kafka,topic,partition,new,discovered,partitions,if,topics,descriptor,is,fixed,topics,new,discovered,partitions,get,all,partitions,for,topics,topics,descriptor,get,fixed,topics,else,list,string,matched,topics,get,all,topics,iterator,string,iter,matched,topics,iterator,while,iter,has,next,if,topics,descriptor,get,topic,pattern,matcher,iter,next,matches,iter,remove,if,matched,topics,size,0,new,discovered,partitions,get,all,partitions,for,topics,matched,topics,else,new,discovered,partitions,null,if,new,discovered,partitions,null,new,discovered,partitions,is,empty,throw,new,runtime,exception,unable,to,retrieve,any,partitions,with,kafka,topics,descriptor,topics,descriptor,else,kafka,topic,partition,sort,new,discovered,partitions,iterator,kafka,topic,partition,iter,new,discovered,partitions,iterator,kafka,topic,partition,next,partition,while,iter,has,next,next,partition,iter,next,if,set,and,check,discovered,partition,next,partition,iter,remove,return,new,discovered,partitions,catch,wakeup,exception,e,wakeup,false,throw,e,else,if,closed,wakeup,wakeup,false,throw,new,wakeup,exception,else,throw,new,closed,exception
AbstractPartitionDiscoverer -> public List<KafkaTopicPartition> discoverPartitions() throws WakeupException, ClosedException;1500818418;Execute a partition discovery attempt for this subtask._This method lets the partition discoverer update what partitions it has discovered so far.__@return List of discovered new partitions that this subtask should subscribe to.;public List<KafkaTopicPartition> discoverPartitions() throws WakeupException, ClosedException {_		if (!closed && !wakeup) {_			try {_				List<KafkaTopicPartition> newDiscoveredPartitions___				_				if (topicsDescriptor.isFixedTopics()) {_					newDiscoveredPartitions = getAllPartitionsForTopics(topicsDescriptor.getFixedTopics())__				} else {_					List<String> matchedTopics = getAllTopics()___					_					Iterator<String> iter = matchedTopics.iterator()__					while (iter.hasNext()) {_						if (!topicsDescriptor.getTopicPattern().matcher(iter.next()).matches()) {_							iter.remove()__						}_					}__					if (matchedTopics.size() != 0) {_						_						newDiscoveredPartitions = getAllPartitionsForTopics(matchedTopics)__					} else {_						newDiscoveredPartitions = null__					}_				}__				_				if (newDiscoveredPartitions == null || newDiscoveredPartitions.isEmpty()) {_					throw new RuntimeException("Unable to retrieve any partitions with KafkaTopicsDescriptor: " + topicsDescriptor)__				} else {_					_					_					KafkaTopicPartition.sort(newDiscoveredPartitions)___					Iterator<KafkaTopicPartition> iter = newDiscoveredPartitions.iterator()__					KafkaTopicPartition nextPartition__					while (iter.hasNext()) {_						nextPartition = iter.next()__						if (!setAndCheckDiscoveredPartition(nextPartition)) {_							iter.remove()__						}_					}_				}__				return newDiscoveredPartitions__			} catch (WakeupException e) {_				_				_				wakeup = false__				throw e__			}_		} else if (!closed && wakeup) {_			_			wakeup = false__			throw new WakeupException()__		} else {_			throw new ClosedException()__		}_	};execute,a,partition,discovery,attempt,for,this,subtask,this,method,lets,the,partition,discoverer,update,what,partitions,it,has,discovered,so,far,return,list,of,discovered,new,partitions,that,this,subtask,should,subscribe,to;public,list,kafka,topic,partition,discover,partitions,throws,wakeup,exception,closed,exception,if,closed,wakeup,try,list,kafka,topic,partition,new,discovered,partitions,if,topics,descriptor,is,fixed,topics,new,discovered,partitions,get,all,partitions,for,topics,topics,descriptor,get,fixed,topics,else,list,string,matched,topics,get,all,topics,iterator,string,iter,matched,topics,iterator,while,iter,has,next,if,topics,descriptor,get,topic,pattern,matcher,iter,next,matches,iter,remove,if,matched,topics,size,0,new,discovered,partitions,get,all,partitions,for,topics,matched,topics,else,new,discovered,partitions,null,if,new,discovered,partitions,null,new,discovered,partitions,is,empty,throw,new,runtime,exception,unable,to,retrieve,any,partitions,with,kafka,topics,descriptor,topics,descriptor,else,kafka,topic,partition,sort,new,discovered,partitions,iterator,kafka,topic,partition,iter,new,discovered,partitions,iterator,kafka,topic,partition,next,partition,while,iter,has,next,next,partition,iter,next,if,set,and,check,discovered,partition,next,partition,iter,remove,return,new,discovered,partitions,catch,wakeup,exception,e,wakeup,false,throw,e,else,if,closed,wakeup,wakeup,false,throw,new,wakeup,exception,else,throw,new,closed,exception
AbstractPartitionDiscoverer -> public List<KafkaTopicPartition> discoverPartitions() throws WakeupException, ClosedException;1501249949;Execute a partition discovery attempt for this subtask._This method lets the partition discoverer update what partitions it has discovered so far.__@return List of discovered new partitions that this subtask should subscribe to.;public List<KafkaTopicPartition> discoverPartitions() throws WakeupException, ClosedException {_		if (!closed && !wakeup) {_			try {_				List<KafkaTopicPartition> newDiscoveredPartitions___				_				if (topicsDescriptor.isFixedTopics()) {_					newDiscoveredPartitions = getAllPartitionsForTopics(topicsDescriptor.getFixedTopics())__				} else {_					List<String> matchedTopics = getAllTopics()___					_					Iterator<String> iter = matchedTopics.iterator()__					while (iter.hasNext()) {_						if (!topicsDescriptor.getTopicPattern().matcher(iter.next()).matches()) {_							iter.remove()__						}_					}__					if (matchedTopics.size() != 0) {_						_						newDiscoveredPartitions = getAllPartitionsForTopics(matchedTopics)__					} else {_						newDiscoveredPartitions = null__					}_				}__				_				if (newDiscoveredPartitions == null || newDiscoveredPartitions.isEmpty()) {_					throw new RuntimeException("Unable to retrieve any partitions with KafkaTopicsDescriptor: " + topicsDescriptor)__				} else {_					_					_					KafkaTopicPartition.sort(newDiscoveredPartitions)___					Iterator<KafkaTopicPartition> iter = newDiscoveredPartitions.iterator()__					KafkaTopicPartition nextPartition__					while (iter.hasNext()) {_						nextPartition = iter.next()__						if (!setAndCheckDiscoveredPartition(nextPartition)) {_							iter.remove()__						}_					}_				}__				return newDiscoveredPartitions__			} catch (WakeupException e) {_				_				_				wakeup = false__				throw e__			}_		} else if (!closed && wakeup) {_			_			wakeup = false__			throw new WakeupException()__		} else {_			throw new ClosedException()__		}_	};execute,a,partition,discovery,attempt,for,this,subtask,this,method,lets,the,partition,discoverer,update,what,partitions,it,has,discovered,so,far,return,list,of,discovered,new,partitions,that,this,subtask,should,subscribe,to;public,list,kafka,topic,partition,discover,partitions,throws,wakeup,exception,closed,exception,if,closed,wakeup,try,list,kafka,topic,partition,new,discovered,partitions,if,topics,descriptor,is,fixed,topics,new,discovered,partitions,get,all,partitions,for,topics,topics,descriptor,get,fixed,topics,else,list,string,matched,topics,get,all,topics,iterator,string,iter,matched,topics,iterator,while,iter,has,next,if,topics,descriptor,get,topic,pattern,matcher,iter,next,matches,iter,remove,if,matched,topics,size,0,new,discovered,partitions,get,all,partitions,for,topics,matched,topics,else,new,discovered,partitions,null,if,new,discovered,partitions,null,new,discovered,partitions,is,empty,throw,new,runtime,exception,unable,to,retrieve,any,partitions,with,kafka,topics,descriptor,topics,descriptor,else,kafka,topic,partition,sort,new,discovered,partitions,iterator,kafka,topic,partition,iter,new,discovered,partitions,iterator,kafka,topic,partition,next,partition,while,iter,has,next,next,partition,iter,next,if,set,and,check,discovered,partition,next,partition,iter,remove,return,new,discovered,partitions,catch,wakeup,exception,e,wakeup,false,throw,e,else,if,closed,wakeup,wakeup,false,throw,new,wakeup,exception,else,throw,new,closed,exception
AbstractPartitionDiscoverer -> public List<KafkaTopicPartition> discoverPartitions() throws WakeupException, ClosedException;1504760040;Execute a partition discovery attempt for this subtask._This method lets the partition discoverer update what partitions it has discovered so far.__@return List of discovered new partitions that this subtask should subscribe to.;public List<KafkaTopicPartition> discoverPartitions() throws WakeupException, ClosedException {_		if (!closed && !wakeup) {_			try {_				List<KafkaTopicPartition> newDiscoveredPartitions___				_				if (topicsDescriptor.isFixedTopics()) {_					newDiscoveredPartitions = getAllPartitionsForTopics(topicsDescriptor.getFixedTopics())__				} else {_					List<String> matchedTopics = getAllTopics()___					_					Iterator<String> iter = matchedTopics.iterator()__					while (iter.hasNext()) {_						if (!topicsDescriptor.getTopicPattern().matcher(iter.next()).matches()) {_							iter.remove()__						}_					}__					if (matchedTopics.size() != 0) {_						_						newDiscoveredPartitions = getAllPartitionsForTopics(matchedTopics)__					} else {_						newDiscoveredPartitions = null__					}_				}__				_				if (newDiscoveredPartitions == null || newDiscoveredPartitions.isEmpty()) {_					throw new RuntimeException("Unable to retrieve any partitions with KafkaTopicsDescriptor: " + topicsDescriptor)__				} else {_					Iterator<KafkaTopicPartition> iter = newDiscoveredPartitions.iterator()__					KafkaTopicPartition nextPartition__					while (iter.hasNext()) {_						nextPartition = iter.next()__						if (!setAndCheckDiscoveredPartition(nextPartition)) {_							iter.remove()__						}_					}_				}__				return newDiscoveredPartitions__			} catch (WakeupException e) {_				_				_				wakeup = false__				throw e__			}_		} else if (!closed && wakeup) {_			_			wakeup = false__			throw new WakeupException()__		} else {_			throw new ClosedException()__		}_	};execute,a,partition,discovery,attempt,for,this,subtask,this,method,lets,the,partition,discoverer,update,what,partitions,it,has,discovered,so,far,return,list,of,discovered,new,partitions,that,this,subtask,should,subscribe,to;public,list,kafka,topic,partition,discover,partitions,throws,wakeup,exception,closed,exception,if,closed,wakeup,try,list,kafka,topic,partition,new,discovered,partitions,if,topics,descriptor,is,fixed,topics,new,discovered,partitions,get,all,partitions,for,topics,topics,descriptor,get,fixed,topics,else,list,string,matched,topics,get,all,topics,iterator,string,iter,matched,topics,iterator,while,iter,has,next,if,topics,descriptor,get,topic,pattern,matcher,iter,next,matches,iter,remove,if,matched,topics,size,0,new,discovered,partitions,get,all,partitions,for,topics,matched,topics,else,new,discovered,partitions,null,if,new,discovered,partitions,null,new,discovered,partitions,is,empty,throw,new,runtime,exception,unable,to,retrieve,any,partitions,with,kafka,topics,descriptor,topics,descriptor,else,iterator,kafka,topic,partition,iter,new,discovered,partitions,iterator,kafka,topic,partition,next,partition,while,iter,has,next,next,partition,iter,next,if,set,and,check,discovered,partition,next,partition,iter,remove,return,new,discovered,partitions,catch,wakeup,exception,e,wakeup,false,throw,e,else,if,closed,wakeup,wakeup,false,throw,new,wakeup,exception,else,throw,new,closed,exception
AbstractPartitionDiscoverer -> public List<KafkaTopicPartition> discoverPartitions() throws WakeupException, ClosedException;1504760046;Execute a partition discovery attempt for this subtask._This method lets the partition discoverer update what partitions it has discovered so far.__@return List of discovered new partitions that this subtask should subscribe to.;public List<KafkaTopicPartition> discoverPartitions() throws WakeupException, ClosedException {_		if (!closed && !wakeup) {_			try {_				List<KafkaTopicPartition> newDiscoveredPartitions___				_				if (topicsDescriptor.isFixedTopics()) {_					newDiscoveredPartitions = getAllPartitionsForTopics(topicsDescriptor.getFixedTopics())__				} else {_					List<String> matchedTopics = getAllTopics()___					_					Iterator<String> iter = matchedTopics.iterator()__					while (iter.hasNext()) {_						if (!topicsDescriptor.getTopicPattern().matcher(iter.next()).matches()) {_							iter.remove()__						}_					}__					if (matchedTopics.size() != 0) {_						_						newDiscoveredPartitions = getAllPartitionsForTopics(matchedTopics)__					} else {_						newDiscoveredPartitions = null__					}_				}__				_				if (newDiscoveredPartitions == null || newDiscoveredPartitions.isEmpty()) {_					throw new RuntimeException("Unable to retrieve any partitions with KafkaTopicsDescriptor: " + topicsDescriptor)__				} else {_					Iterator<KafkaTopicPartition> iter = newDiscoveredPartitions.iterator()__					KafkaTopicPartition nextPartition__					while (iter.hasNext()) {_						nextPartition = iter.next()__						if (!setAndCheckDiscoveredPartition(nextPartition)) {_							iter.remove()__						}_					}_				}__				return newDiscoveredPartitions__			} catch (WakeupException e) {_				_				_				wakeup = false__				throw e__			}_		} else if (!closed && wakeup) {_			_			wakeup = false__			throw new WakeupException()__		} else {_			throw new ClosedException()__		}_	};execute,a,partition,discovery,attempt,for,this,subtask,this,method,lets,the,partition,discoverer,update,what,partitions,it,has,discovered,so,far,return,list,of,discovered,new,partitions,that,this,subtask,should,subscribe,to;public,list,kafka,topic,partition,discover,partitions,throws,wakeup,exception,closed,exception,if,closed,wakeup,try,list,kafka,topic,partition,new,discovered,partitions,if,topics,descriptor,is,fixed,topics,new,discovered,partitions,get,all,partitions,for,topics,topics,descriptor,get,fixed,topics,else,list,string,matched,topics,get,all,topics,iterator,string,iter,matched,topics,iterator,while,iter,has,next,if,topics,descriptor,get,topic,pattern,matcher,iter,next,matches,iter,remove,if,matched,topics,size,0,new,discovered,partitions,get,all,partitions,for,topics,matched,topics,else,new,discovered,partitions,null,if,new,discovered,partitions,null,new,discovered,partitions,is,empty,throw,new,runtime,exception,unable,to,retrieve,any,partitions,with,kafka,topics,descriptor,topics,descriptor,else,iterator,kafka,topic,partition,iter,new,discovered,partitions,iterator,kafka,topic,partition,next,partition,while,iter,has,next,next,partition,iter,next,if,set,and,check,discovered,partition,next,partition,iter,remove,return,new,discovered,partitions,catch,wakeup,exception,e,wakeup,false,throw,e,else,if,closed,wakeup,wakeup,false,throw,new,wakeup,exception,else,throw,new,closed,exception
AbstractPartitionDiscoverer -> public List<KafkaTopicPartition> discoverPartitions() throws WakeupException, ClosedException;1515757409;Execute a partition discovery attempt for this subtask._This method lets the partition discoverer update what partitions it has discovered so far.__@return List of discovered new partitions that this subtask should subscribe to.;public List<KafkaTopicPartition> discoverPartitions() throws WakeupException, ClosedException {_		if (!closed && !wakeup) {_			try {_				List<KafkaTopicPartition> newDiscoveredPartitions___				_				if (topicsDescriptor.isFixedTopics()) {_					newDiscoveredPartitions = getAllPartitionsForTopics(topicsDescriptor.getFixedTopics())__				} else {_					List<String> matchedTopics = getAllTopics()___					_					Iterator<String> iter = matchedTopics.iterator()__					while (iter.hasNext()) {_						if (!topicsDescriptor.getTopicPattern().matcher(iter.next()).matches()) {_							iter.remove()__						}_					}__					if (matchedTopics.size() != 0) {_						_						newDiscoveredPartitions = getAllPartitionsForTopics(matchedTopics)__					} else {_						newDiscoveredPartitions = null__					}_				}__				_				if (newDiscoveredPartitions == null || newDiscoveredPartitions.isEmpty()) {_					throw new RuntimeException("Unable to retrieve any partitions with KafkaTopicsDescriptor: " + topicsDescriptor)__				} else {_					Iterator<KafkaTopicPartition> iter = newDiscoveredPartitions.iterator()__					KafkaTopicPartition nextPartition__					while (iter.hasNext()) {_						nextPartition = iter.next()__						if (!setAndCheckDiscoveredPartition(nextPartition)) {_							iter.remove()__						}_					}_				}__				return newDiscoveredPartitions__			} catch (WakeupException e) {_				_				_				wakeup = false__				throw e__			}_		} else if (!closed && wakeup) {_			_			wakeup = false__			throw new WakeupException()__		} else {_			throw new ClosedException()__		}_	};execute,a,partition,discovery,attempt,for,this,subtask,this,method,lets,the,partition,discoverer,update,what,partitions,it,has,discovered,so,far,return,list,of,discovered,new,partitions,that,this,subtask,should,subscribe,to;public,list,kafka,topic,partition,discover,partitions,throws,wakeup,exception,closed,exception,if,closed,wakeup,try,list,kafka,topic,partition,new,discovered,partitions,if,topics,descriptor,is,fixed,topics,new,discovered,partitions,get,all,partitions,for,topics,topics,descriptor,get,fixed,topics,else,list,string,matched,topics,get,all,topics,iterator,string,iter,matched,topics,iterator,while,iter,has,next,if,topics,descriptor,get,topic,pattern,matcher,iter,next,matches,iter,remove,if,matched,topics,size,0,new,discovered,partitions,get,all,partitions,for,topics,matched,topics,else,new,discovered,partitions,null,if,new,discovered,partitions,null,new,discovered,partitions,is,empty,throw,new,runtime,exception,unable,to,retrieve,any,partitions,with,kafka,topics,descriptor,topics,descriptor,else,iterator,kafka,topic,partition,iter,new,discovered,partitions,iterator,kafka,topic,partition,next,partition,while,iter,has,next,next,partition,iter,next,if,set,and,check,discovered,partition,next,partition,iter,remove,return,new,discovered,partitions,catch,wakeup,exception,e,wakeup,false,throw,e,else,if,closed,wakeup,wakeup,false,throw,new,wakeup,exception,else,throw,new,closed,exception
AbstractPartitionDiscoverer -> protected abstract void initializeConnections() throws Exception_;1498894422;Establish the required connections in order to fetch topics and partitions metadata.;protected abstract void initializeConnections() throws Exception_;establish,the,required,connections,in,order,to,fetch,topics,and,partitions,metadata;protected,abstract,void,initialize,connections,throws,exception
AbstractPartitionDiscoverer -> protected abstract void initializeConnections() throws Exception_;1500818418;Establish the required connections in order to fetch topics and partitions metadata.;protected abstract void initializeConnections() throws Exception_;establish,the,required,connections,in,order,to,fetch,topics,and,partitions,metadata;protected,abstract,void,initialize,connections,throws,exception
AbstractPartitionDiscoverer -> protected abstract void initializeConnections() throws Exception_;1501249949;Establish the required connections in order to fetch topics and partitions metadata.;protected abstract void initializeConnections() throws Exception_;establish,the,required,connections,in,order,to,fetch,topics,and,partitions,metadata;protected,abstract,void,initialize,connections,throws,exception
AbstractPartitionDiscoverer -> protected abstract void initializeConnections() throws Exception_;1504760040;Establish the required connections in order to fetch topics and partitions metadata.;protected abstract void initializeConnections() throws Exception_;establish,the,required,connections,in,order,to,fetch,topics,and,partitions,metadata;protected,abstract,void,initialize,connections,throws,exception
AbstractPartitionDiscoverer -> protected abstract void initializeConnections() throws Exception_;1504760046;Establish the required connections in order to fetch topics and partitions metadata.;protected abstract void initializeConnections() throws Exception_;establish,the,required,connections,in,order,to,fetch,topics,and,partitions,metadata;protected,abstract,void,initialize,connections,throws,exception
AbstractPartitionDiscoverer -> protected abstract void initializeConnections() throws Exception_;1515757409;Establish the required connections in order to fetch topics and partitions metadata.;protected abstract void initializeConnections() throws Exception_;establish,the,required,connections,in,order,to,fetch,topics,and,partitions,metadata;protected,abstract,void,initialize,connections,throws,exception
AbstractPartitionDiscoverer -> protected abstract List<KafkaTopicPartition> getAllPartitionsForTopics(List<String> topics) throws WakeupException_;1498894422;Fetch the list of all partitions for a specific topics list from Kafka.;protected abstract List<KafkaTopicPartition> getAllPartitionsForTopics(List<String> topics) throws WakeupException_;fetch,the,list,of,all,partitions,for,a,specific,topics,list,from,kafka;protected,abstract,list,kafka,topic,partition,get,all,partitions,for,topics,list,string,topics,throws,wakeup,exception
AbstractPartitionDiscoverer -> protected abstract List<KafkaTopicPartition> getAllPartitionsForTopics(List<String> topics) throws WakeupException_;1500818418;Fetch the list of all partitions for a specific topics list from Kafka.;protected abstract List<KafkaTopicPartition> getAllPartitionsForTopics(List<String> topics) throws WakeupException_;fetch,the,list,of,all,partitions,for,a,specific,topics,list,from,kafka;protected,abstract,list,kafka,topic,partition,get,all,partitions,for,topics,list,string,topics,throws,wakeup,exception
AbstractPartitionDiscoverer -> protected abstract List<KafkaTopicPartition> getAllPartitionsForTopics(List<String> topics) throws WakeupException_;1501249949;Fetch the list of all partitions for a specific topics list from Kafka.;protected abstract List<KafkaTopicPartition> getAllPartitionsForTopics(List<String> topics) throws WakeupException_;fetch,the,list,of,all,partitions,for,a,specific,topics,list,from,kafka;protected,abstract,list,kafka,topic,partition,get,all,partitions,for,topics,list,string,topics,throws,wakeup,exception
AbstractPartitionDiscoverer -> protected abstract List<KafkaTopicPartition> getAllPartitionsForTopics(List<String> topics) throws WakeupException_;1504760040;Fetch the list of all partitions for a specific topics list from Kafka.;protected abstract List<KafkaTopicPartition> getAllPartitionsForTopics(List<String> topics) throws WakeupException_;fetch,the,list,of,all,partitions,for,a,specific,topics,list,from,kafka;protected,abstract,list,kafka,topic,partition,get,all,partitions,for,topics,list,string,topics,throws,wakeup,exception
AbstractPartitionDiscoverer -> protected abstract List<KafkaTopicPartition> getAllPartitionsForTopics(List<String> topics) throws WakeupException_;1504760046;Fetch the list of all partitions for a specific topics list from Kafka.;protected abstract List<KafkaTopicPartition> getAllPartitionsForTopics(List<String> topics) throws WakeupException_;fetch,the,list,of,all,partitions,for,a,specific,topics,list,from,kafka;protected,abstract,list,kafka,topic,partition,get,all,partitions,for,topics,list,string,topics,throws,wakeup,exception
AbstractPartitionDiscoverer -> protected abstract List<KafkaTopicPartition> getAllPartitionsForTopics(List<String> topics) throws WakeupException_;1515757409;Fetch the list of all partitions for a specific topics list from Kafka.;protected abstract List<KafkaTopicPartition> getAllPartitionsForTopics(List<String> topics) throws WakeupException_;fetch,the,list,of,all,partitions,for,a,specific,topics,list,from,kafka;protected,abstract,list,kafka,topic,partition,get,all,partitions,for,topics,list,string,topics,throws,wakeup,exception
AbstractPartitionDiscoverer -> protected abstract List<String> getAllTopics() throws WakeupException_;1498894422;Fetch the list of all topics from Kafka.;protected abstract List<String> getAllTopics() throws WakeupException_;fetch,the,list,of,all,topics,from,kafka;protected,abstract,list,string,get,all,topics,throws,wakeup,exception
AbstractPartitionDiscoverer -> protected abstract List<String> getAllTopics() throws WakeupException_;1500818418;Fetch the list of all topics from Kafka.;protected abstract List<String> getAllTopics() throws WakeupException_;fetch,the,list,of,all,topics,from,kafka;protected,abstract,list,string,get,all,topics,throws,wakeup,exception
AbstractPartitionDiscoverer -> protected abstract List<String> getAllTopics() throws WakeupException_;1501249949;Fetch the list of all topics from Kafka.;protected abstract List<String> getAllTopics() throws WakeupException_;fetch,the,list,of,all,topics,from,kafka;protected,abstract,list,string,get,all,topics,throws,wakeup,exception
AbstractPartitionDiscoverer -> protected abstract List<String> getAllTopics() throws WakeupException_;1504760040;Fetch the list of all topics from Kafka.;protected abstract List<String> getAllTopics() throws WakeupException_;fetch,the,list,of,all,topics,from,kafka;protected,abstract,list,string,get,all,topics,throws,wakeup,exception
AbstractPartitionDiscoverer -> protected abstract List<String> getAllTopics() throws WakeupException_;1504760046;Fetch the list of all topics from Kafka.;protected abstract List<String> getAllTopics() throws WakeupException_;fetch,the,list,of,all,topics,from,kafka;protected,abstract,list,string,get,all,topics,throws,wakeup,exception
AbstractPartitionDiscoverer -> protected abstract List<String> getAllTopics() throws WakeupException_;1515757409;Fetch the list of all topics from Kafka.;protected abstract List<String> getAllTopics() throws WakeupException_;fetch,the,list,of,all,topics,from,kafka;protected,abstract,list,string,get,all,topics,throws,wakeup,exception
