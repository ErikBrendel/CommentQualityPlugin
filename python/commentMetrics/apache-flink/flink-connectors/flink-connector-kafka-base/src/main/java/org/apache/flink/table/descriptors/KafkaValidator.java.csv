commented;modifiers;parameterAmount;loc;comment;code
false;public;1;13;;@Override public void validate(DescriptorProperties properties) {     super.validate(properties).     properties.validateValue(CONNECTOR_TYPE, CONNECTOR_TYPE_VALUE_KAFKA, false).     properties.validateString(CONNECTOR_TOPIC, false, 1, Integer.MAX_VALUE).     validateStartupMode(properties).     validateKafkaProperties(properties).     validateSinkPartitioner(properties). }
false;private;1;26;;private void validateStartupMode(DescriptorProperties properties) {     final Map<String, Consumer<String>> specificOffsetValidators = new HashMap<>().     specificOffsetValidators.put(CONNECTOR_SPECIFIC_OFFSETS_PARTITION, (key) -> properties.validateInt(key, false, 0, Integer.MAX_VALUE)).     specificOffsetValidators.put(CONNECTOR_SPECIFIC_OFFSETS_OFFSET, (key) -> properties.validateLong(key, false, 0, Long.MAX_VALUE)).     final Map<String, Consumer<String>> startupModeValidation = new HashMap<>().     startupModeValidation.put(CONNECTOR_STARTUP_MODE_VALUE_GROUP_OFFSETS, noValidation()).     startupModeValidation.put(CONNECTOR_STARTUP_MODE_VALUE_EARLIEST, noValidation()).     startupModeValidation.put(CONNECTOR_STARTUP_MODE_VALUE_LATEST, noValidation()).     startupModeValidation.put(CONNECTOR_STARTUP_MODE_VALUE_SPECIFIC_OFFSETS, key -> properties.validateFixedIndexedProperties(CONNECTOR_SPECIFIC_OFFSETS, false, specificOffsetValidators)).     properties.validateEnum(CONNECTOR_STARTUP_MODE, true, startupModeValidation). }
false;private;1;10;;private void validateKafkaProperties(DescriptorProperties properties) {     final Map<String, Consumer<String>> propertyValidators = new HashMap<>().     propertyValidators.put(CONNECTOR_PROPERTIES_KEY, key -> properties.validateString(key, false, 1)).     propertyValidators.put(CONNECTOR_PROPERTIES_VALUE, key -> properties.validateString(key, false, 0)).     properties.validateFixedIndexedProperties(CONNECTOR_PROPERTIES, true, propertyValidators). }
false;private;1;9;;private void validateSinkPartitioner(DescriptorProperties properties) {     final Map<String, Consumer<String>> sinkPartitionerValidators = new HashMap<>().     sinkPartitionerValidators.put(CONNECTOR_SINK_PARTITIONER_VALUE_FIXED, noValidation()).     sinkPartitionerValidators.put(CONNECTOR_SINK_PARTITIONER_VALUE_ROUND_ROBIN, noValidation()).     sinkPartitionerValidators.put(CONNECTOR_SINK_PARTITIONER_VALUE_CUSTOM, key -> properties.validateString(CONNECTOR_SINK_PARTITIONER_CLASS, false, 1)).     properties.validateEnum(CONNECTOR_SINK_PARTITIONER, true, sinkPartitionerValidators). }
false;public,static;1;13;;// utilities public static String normalizeStartupMode(StartupMode startupMode) {     switch(startupMode) {         case EARLIEST:             return CONNECTOR_STARTUP_MODE_VALUE_EARLIEST.         case LATEST:             return CONNECTOR_STARTUP_MODE_VALUE_LATEST.         case GROUP_OFFSETS:             return CONNECTOR_STARTUP_MODE_VALUE_GROUP_OFFSETS.         case SPECIFIC_OFFSETS:             return CONNECTOR_STARTUP_MODE_VALUE_SPECIFIC_OFFSETS.     }     throw new IllegalArgumentException("Invalid startup mode."). }
