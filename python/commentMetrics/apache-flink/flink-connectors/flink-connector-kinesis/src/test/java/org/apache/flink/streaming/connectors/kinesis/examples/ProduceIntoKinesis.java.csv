commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;24;;public static void main(String[] args) throws Exception {     ParameterTool pt = ParameterTool.fromArgs(args).     StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment().     see.setParallelism(1).     DataStream<String> simpleStringStream = see.addSource(new EventsGenerator()).     Properties kinesisProducerConfig = new Properties().     kinesisProducerConfig.setProperty(AWSConfigConstants.AWS_REGION, pt.getRequired("region")).     kinesisProducerConfig.setProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired("accessKey")).     kinesisProducerConfig.setProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired("secretKey")).     FlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(new SimpleStringSchema(), kinesisProducerConfig).     kinesis.setFailOnError(true).     kinesis.setDefaultStream("flink-test").     kinesis.setDefaultPartition("0").     simpleStringStream.addSink(kinesis).     see.execute(). }
false;public;1;8;;@Override public void run(SourceContext<String> ctx) throws Exception {     long seq = 0.     while (running) {         Thread.sleep(10).         ctx.collect((seq++) + "-" + RandomStringUtils.randomAlphabetic(12)).     } }
false;public;0;4;;@Override public void cancel() {     running = false. }
