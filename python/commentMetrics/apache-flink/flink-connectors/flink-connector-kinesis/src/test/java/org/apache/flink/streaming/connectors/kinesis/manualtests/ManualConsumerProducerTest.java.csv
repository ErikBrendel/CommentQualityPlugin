commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public ByteBuffer serialize(String element) {     return ByteBuffer.wrap(element.getBytes(ConfigConstants.DEFAULT_CHARSET)). }
true;public;1;7;// every 10th element goes into a different stream ;// every 10th element goes into a different stream @Override public String getTargetStream(String element) {     if (element.split("-")[0].endsWith("0")) {         return "flink-test-2".     }     // send to default stream     return null. }
false;public;1;5;;@Override public String getPartitionId(String element) {     int l = element.length().     return element.substring(l - 1, l). }
false;public;2;15;;@Override public void flatMap(String value, Collector<String> out) throws Exception {     String[] parts = value.split("-").     try {         long l = Long.parseLong(parts[0]).         if (l < 0) {             throw new RuntimeException("Negative").         }     } catch (NumberFormatException nfe) {         throw new RuntimeException("First part of '" + value + "' is not a valid numeric type").     }     if (parts[1].length() != 12) {         throw new RuntimeException("Second part of '" + value + "' doesn't have 12 characters").     } }
false;public,static;1;72;;public static void main(String[] args) throws Exception {     ParameterTool pt = ParameterTool.fromArgs(args).     StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment().     see.setParallelism(4).     DataStream<String> simpleStringStream = see.addSource(new ProduceIntoKinesis.EventsGenerator()).     Properties kinesisProducerConfig = new Properties().     kinesisProducerConfig.setProperty(AWSConfigConstants.AWS_REGION, pt.getRequired("region")).     kinesisProducerConfig.setProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired("accessKey")).     kinesisProducerConfig.setProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired("secretKey")).     FlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(new KinesisSerializationSchema<String>() {          @Override         public ByteBuffer serialize(String element) {             return ByteBuffer.wrap(element.getBytes(ConfigConstants.DEFAULT_CHARSET)).         }          // every 10th element goes into a different stream         @Override         public String getTargetStream(String element) {             if (element.split("-")[0].endsWith("0")) {                 return "flink-test-2".             }             // send to default stream             return null.         }     }, kinesisProducerConfig).     kinesis.setFailOnError(true).     kinesis.setDefaultStream("test-flink").     kinesis.setDefaultPartition("0").     kinesis.setCustomPartitioner(new KinesisPartitioner<String>() {          @Override         public String getPartitionId(String element) {             int l = element.length().             return element.substring(l - 1, l).         }     }).     simpleStringStream.addSink(kinesis).     // consuming topology     Properties consumerProps = new Properties().     consumerProps.setProperty(ConsumerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired("accessKey")).     consumerProps.setProperty(ConsumerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired("secretKey")).     consumerProps.setProperty(ConsumerConfigConstants.AWS_REGION, pt.getRequired("region")).     DataStream<String> consuming = see.addSource(new FlinkKinesisConsumer<>("test-flink", new SimpleStringSchema(), consumerProps)).     // validate consumed records for correctness     consuming.flatMap(new FlatMapFunction<String, String>() {          @Override         public void flatMap(String value, Collector<String> out) throws Exception {             String[] parts = value.split("-").             try {                 long l = Long.parseLong(parts[0]).                 if (l < 0) {                     throw new RuntimeException("Negative").                 }             } catch (NumberFormatException nfe) {                 throw new RuntimeException("First part of '" + value + "' is not a valid numeric type").             }             if (parts[1].length() != 12) {                 throw new RuntimeException("Second part of '" + value + "' doesn't have 12 characters").             }         }     }).     consuming.print().     see.execute(). }
