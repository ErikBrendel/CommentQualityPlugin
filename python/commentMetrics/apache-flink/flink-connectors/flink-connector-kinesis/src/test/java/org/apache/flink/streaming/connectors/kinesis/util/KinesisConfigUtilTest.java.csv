commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;// ---------------------------------------------------------------------- // getValidatedProducerConfiguration() tests // ---------------------------------------------------------------------- @Test public void testUnparsableLongForProducerConfiguration() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Error trying to set field RateLimit with the value 'unparsableLong'").     Properties testConfig = new Properties().     testConfig.setProperty(AWSConfigConstants.AWS_REGION, "us-east-1").     testConfig.setProperty("RateLimit", "unparsableLong").     KinesisConfigUtil.getValidatedProducerConfiguration(testConfig). }
false;public;0;13;;@Test public void testRateLimitInProducerConfiguration() {     Properties testConfig = new Properties().     testConfig.setProperty(AWSConfigConstants.AWS_REGION, "us-east-1").     KinesisProducerConfiguration kpc = KinesisConfigUtil.getValidatedProducerConfiguration(testConfig).     assertEquals(100, kpc.getRateLimit()).     testConfig.setProperty(KinesisConfigUtil.RATE_LIMIT, "150").     kpc = KinesisConfigUtil.getValidatedProducerConfiguration(testConfig).     assertEquals(150, kpc.getRateLimit()). }
false;public;0;13;;@Test public void testThreadingModelInProducerConfiguration() {     Properties testConfig = new Properties().     testConfig.setProperty(AWSConfigConstants.AWS_REGION, "us-east-1").     KinesisProducerConfiguration kpc = KinesisConfigUtil.getValidatedProducerConfiguration(testConfig).     assertEquals(KinesisProducerConfiguration.ThreadingModel.POOLED, kpc.getThreadingModel()).     testConfig.setProperty(KinesisConfigUtil.THREADING_MODEL, "PER_REQUEST").     kpc = KinesisConfigUtil.getValidatedProducerConfiguration(testConfig).     assertEquals(KinesisProducerConfiguration.ThreadingModel.PER_REQUEST, kpc.getThreadingModel()). }
false;public;0;13;;@Test public void testThreadPoolSizeInProducerConfiguration() {     Properties testConfig = new Properties().     testConfig.setProperty(AWSConfigConstants.AWS_REGION, "us-east-1").     KinesisProducerConfiguration kpc = KinesisConfigUtil.getValidatedProducerConfiguration(testConfig).     assertEquals(10, kpc.getThreadPoolSize()).     testConfig.setProperty(KinesisConfigUtil.THREAD_POOL_SIZE, "12").     kpc = KinesisConfigUtil.getValidatedProducerConfiguration(testConfig).     assertEquals(12, kpc.getThreadPoolSize()). }
false;public;0;12;;@Test public void testReplaceDeprecatedKeys() {     Properties testConfig = new Properties().     testConfig.setProperty(AWSConfigConstants.AWS_REGION, "us-east-1").     // these deprecated keys should be replaced     testConfig.setProperty(ProducerConfigConstants.AGGREGATION_MAX_COUNT, "1").     testConfig.setProperty(ProducerConfigConstants.COLLECTION_MAX_COUNT, "2").     Properties replacedConfig = KinesisConfigUtil.replaceDeprecatedProducerKeys(testConfig).     assertEquals("1", replacedConfig.getProperty(KinesisConfigUtil.AGGREGATION_MAX_COUNT)).     assertEquals("2", replacedConfig.getProperty(KinesisConfigUtil.COLLECTION_MAX_COUNT)). }
false;public;0;9;;@Test public void testCorrectlySetRegionInProducerConfiguration() {     String region = "us-east-1".     Properties testConfig = new Properties().     testConfig.setProperty(AWSConfigConstants.AWS_REGION, region).     KinesisProducerConfiguration kpc = KinesisConfigUtil.getValidatedProducerConfiguration(testConfig).     assertEquals("incorrect region", region, kpc.getRegion()). }
false;public;0;13;;@Test public void testMissingAwsRegionInProducerConfig() {     String expectedMessage = String.format("For FlinkKinesisProducer AWS region ('%s') must be set in the config.", AWSConfigConstants.AWS_REGION).     exception.expect(IllegalArgumentException.class).     exception.expectMessage(expectedMessage).     Properties testConfig = new Properties().     testConfig.setProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID, "accessKey").     testConfig.setProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY, "secretKey").     KinesisConfigUtil.getValidatedProducerConfiguration(testConfig). }
false;public;0;12;;// ---------------------------------------------------------------------- // validateAwsConfiguration() tests // ---------------------------------------------------------------------- @Test public void testUnrecognizableAwsRegionInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid AWS region").     Properties testConfig = new Properties().     testConfig.setProperty(AWSConfigConstants.AWS_REGION, "wrongRegionId").     testConfig.setProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID, "accessKeyId").     testConfig.setProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY, "secretKey").     KinesisConfigUtil.validateAwsConfiguration(testConfig). }
false;public;0;12;;@Test public void testCredentialProviderTypeSetToBasicButNoCredentialSetInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " + "and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.").     Properties testConfig = new Properties().     testConfig.setProperty(AWSConfigConstants.AWS_REGION, "us-east-1").     testConfig.setProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER, "BASIC").     KinesisConfigUtil.validateAwsConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnrecognizableCredentialProviderTypeInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid AWS Credential Provider Type").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER, "wrongProviderType").     KinesisConfigUtil.validateAwsConfiguration(testConfig). }
false;public;0;15;;// ---------------------------------------------------------------------- // validateConsumerConfiguration() tests // ---------------------------------------------------------------------- @Test public void testAwsRegionOrEndpointInConsumerConfig() {     String expectedMessage = String.format("For FlinkKinesisConsumer either AWS region ('%s') or AWS endpoint ('%s') must be set in the config.", AWSConfigConstants.AWS_REGION, AWSConfigConstants.AWS_ENDPOINT).     exception.expect(IllegalArgumentException.class).     exception.expectMessage(expectedMessage).     Properties testConfig = new Properties().     testConfig.setProperty(AWSConfigConstants.AWS_REGION, "us-east-1").     testConfig.setProperty(AWSConfigConstants.AWS_ENDPOINT, "fake").     testConfig.setProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID, "accessKey").     testConfig.setProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY, "secretKey").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;11;;@Test public void testUnrecognizableStreamInitPositionTypeInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid initial position in stream").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.AWS_CREDENTIALS_PROVIDER, "BASIC").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION, "wrongInitPosition").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;12;;@Test public void testStreamInitPositionTypeSetToAtTimestampButNoInitTimestampSetInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Please set value for initial timestamp ('" + ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.AWS_CREDENTIALS_PROVIDER, "BASIC").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION, "AT_TIMESTAMP").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;12;;@Test public void testUnparsableDateForInitialTimestampInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream.").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.AWS_CREDENTIALS_PROVIDER, "BASIC").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION, "AT_TIMESTAMP").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP, "unparsableDate").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;12;;@Test public void testIllegalValueForInitialTimestampInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream.").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.AWS_CREDENTIALS_PROVIDER, "BASIC").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION, "AT_TIMESTAMP").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP, "-1.0").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;16;;@Test public void testDateStringForValidateOptionDateProperty() {     String timestamp = "2016-04-04T19:58:46.480-00:00".     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.AWS_CREDENTIALS_PROVIDER, "BASIC").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION, "AT_TIMESTAMP").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP, timestamp).     try {         KinesisConfigUtil.validateConsumerConfiguration(testConfig).     } catch (Exception e) {         e.printStackTrace().         fail().     } }
false;public;0;16;;@Test public void testUnixTimestampForValidateOptionDateProperty() {     String unixTimestamp = "1459799926.480".     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.AWS_CREDENTIALS_PROVIDER, "BASIC").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION, "AT_TIMESTAMP").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP, unixTimestamp).     try {         KinesisConfigUtil.validateConsumerConfiguration(testConfig).     } catch (Exception e) {         e.printStackTrace().         fail().     } }
false;public;0;13;;@Test public void testInvalidPatternForInitialTimestampInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream.").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.AWS_CREDENTIALS_PROVIDER, "BASIC").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION, "AT_TIMESTAMP").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP, "2016-03-14").     testConfig.setProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, "InvalidPattern").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;13;;@Test public void testUnparsableDateForUserDefinedDateFormatForInitialTimestampInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream.").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.AWS_CREDENTIALS_PROVIDER, "BASIC").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION, "AT_TIMESTAMP").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP, "stillUnparsable").     testConfig.setProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, "yyyy-MM-dd").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;13;;@Test public void testDateStringForUserDefinedDateFormatForValidateOptionDateProperty() {     String unixTimestamp = "2016-04-04".     String pattern = "yyyy-MM-dd".     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.AWS_CREDENTIALS_PROVIDER, "BASIC").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION, "AT_TIMESTAMP").     testConfig.setProperty(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP, unixTimestamp).     testConfig.setProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, pattern).     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnparsableLongForListShardsBackoffBaseMillisInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for list shards operation base backoff milliseconds").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.LIST_SHARDS_BACKOFF_BASE, "unparsableLong").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnparsableLongForListShardsBackoffMaxMillisInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for list shards operation max backoff milliseconds").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.LIST_SHARDS_BACKOFF_MAX, "unparsableLong").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnparsableDoubleForListShardsBackoffExponentialConstantInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for list shards operation backoff exponential constant").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.LIST_SHARDS_BACKOFF_EXPONENTIAL_CONSTANT, "unparsableDouble").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnparsableIntForGetRecordsRetriesInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for maximum retry attempts for getRecords shard operation").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES, "unparsableInt").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnparsableIntForGetRecordsMaxCountInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for maximum records per getRecords shard operation").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.SHARD_GETRECORDS_MAX, "unparsableInt").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnparsableLongForGetRecordsBackoffBaseMillisInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for get records operation base backoff milliseconds").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE, "unparsableLong").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnparsableLongForGetRecordsBackoffMaxMillisInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for get records operation max backoff milliseconds").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX, "unparsableLong").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnparsableDoubleForGetRecordsBackoffExponentialConstantInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for get records operation backoff exponential constant").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT, "unparsableDouble").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnparsableLongForGetRecordsIntervalMillisInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for getRecords sleep interval in milliseconds").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS, "unparsableLong").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnparsableIntForGetShardIteratorRetriesInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for maximum retry attempts for getShardIterator shard operation").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES, "unparsableInt").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnparsableLongForGetShardIteratorBackoffBaseMillisInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for get shard iterator operation base backoff milliseconds").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE, "unparsableLong").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnparsableLongForGetShardIteratorBackoffMaxMillisInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for get shard iterator operation max backoff milliseconds").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX, "unparsableLong").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnparsableDoubleForGetShardIteratorBackoffExponentialConstantInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for get shard iterator operation backoff exponential constant").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT, "unparsableDouble").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
false;public;0;10;;@Test public void testUnparsableLongForShardDiscoveryIntervalMillisInConfig() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Invalid value given for shard discovery sleep interval in milliseconds").     Properties testConfig = TestUtils.getStandardProperties().     testConfig.setProperty(ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS, "unparsableLong").     KinesisConfigUtil.validateConsumerConfiguration(testConfig). }
