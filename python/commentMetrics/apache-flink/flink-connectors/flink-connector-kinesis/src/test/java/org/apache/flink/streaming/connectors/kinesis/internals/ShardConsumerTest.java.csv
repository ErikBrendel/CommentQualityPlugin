commented;modifiers;parameterAmount;loc;comment;code
false;public;0;39;;@Test public void testMetricsReporting() {     StreamShardHandle fakeToBeConsumedShard = getMockStreamShard("fakeStream", 0).     LinkedList<KinesisStreamShardState> subscribedShardsStateUnderTest = new LinkedList<>().     subscribedShardsStateUnderTest.add(new KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(fakeToBeConsumedShard), fakeToBeConsumedShard, new SequenceNumber("fakeStartingState"))).     TestSourceContext<String> sourceContext = new TestSourceContext<>().     TestableKinesisDataFetcher<String> fetcher = new TestableKinesisDataFetcher<>(Collections.singletonList("fakeStream"), sourceContext, new Properties(), new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()), 10, 2, new AtomicReference<>(), subscribedShardsStateUnderTest, KinesisDataFetcher.createInitialSubscribedStreamsToLastDiscoveredShardsState(Collections.singletonList("fakeStream")), Mockito.mock(KinesisProxyInterface.class)).     ShardMetricsReporter shardMetricsReporter = new ShardMetricsReporter().     long millisBehindLatest = 500L.     new ShardConsumer<>(fetcher, 0, subscribedShardsStateUnderTest.get(0).getStreamShardHandle(), subscribedShardsStateUnderTest.get(0).getLastProcessedSequenceNum(), FakeKinesisBehavioursFactory.totalNumOfRecordsAfterNumOfGetRecordsCalls(1000, 9, millisBehindLatest), shardMetricsReporter).run().     // the millisBehindLatest metric should have been reported     assertEquals(millisBehindLatest, shardMetricsReporter.getMillisBehindLatest()). }
false;public;0;37;;@Test public void testCorrectNumOfCollectedRecordsAndUpdatedState() {     StreamShardHandle fakeToBeConsumedShard = getMockStreamShard("fakeStream", 0).     LinkedList<KinesisStreamShardState> subscribedShardsStateUnderTest = new LinkedList<>().     subscribedShardsStateUnderTest.add(new KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(fakeToBeConsumedShard), fakeToBeConsumedShard, new SequenceNumber("fakeStartingState"))).     TestSourceContext<String> sourceContext = new TestSourceContext<>().     TestableKinesisDataFetcher<String> fetcher = new TestableKinesisDataFetcher<>(Collections.singletonList("fakeStream"), sourceContext, new Properties(), new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()), 10, 2, new AtomicReference<>(), subscribedShardsStateUnderTest, KinesisDataFetcher.createInitialSubscribedStreamsToLastDiscoveredShardsState(Collections.singletonList("fakeStream")), Mockito.mock(KinesisProxyInterface.class)).     new ShardConsumer<>(fetcher, 0, subscribedShardsStateUnderTest.get(0).getStreamShardHandle(), subscribedShardsStateUnderTest.get(0).getLastProcessedSequenceNum(), FakeKinesisBehavioursFactory.totalNumOfRecordsAfterNumOfGetRecordsCalls(1000, 9, 500L), new ShardMetricsReporter()).run().     assertEquals(1000, sourceContext.getCollectedOutputs().size()).     assertEquals(SentinelSequenceNumber.SENTINEL_SHARD_ENDING_SEQUENCE_NUM.get(), subscribedShardsStateUnderTest.get(0).getLastProcessedSequenceNum()). }
false;public;0;40;;@Test public void testCorrectNumOfCollectedRecordsAndUpdatedStateWithUnexpectedExpiredIterator() {     StreamShardHandle fakeToBeConsumedShard = getMockStreamShard("fakeStream", 0).     LinkedList<KinesisStreamShardState> subscribedShardsStateUnderTest = new LinkedList<>().     subscribedShardsStateUnderTest.add(new KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(fakeToBeConsumedShard), fakeToBeConsumedShard, new SequenceNumber("fakeStartingState"))).     TestSourceContext<String> sourceContext = new TestSourceContext<>().     TestableKinesisDataFetcher<String> fetcher = new TestableKinesisDataFetcher<>(Collections.singletonList("fakeStream"), sourceContext, new Properties(), new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()), 10, 2, new AtomicReference<>(), subscribedShardsStateUnderTest, KinesisDataFetcher.createInitialSubscribedStreamsToLastDiscoveredShardsState(Collections.singletonList("fakeStream")), Mockito.mock(KinesisProxyInterface.class)).     new ShardConsumer<>(fetcher, 0, subscribedShardsStateUnderTest.get(0).getStreamShardHandle(), subscribedShardsStateUnderTest.get(0).getLastProcessedSequenceNum(), // and the 7th getRecords() call will encounter an unexpected expired shard iterator     FakeKinesisBehavioursFactory.totalNumOfRecordsAfterNumOfGetRecordsCallsWithUnexpectedExpiredIterator(1000, 9, 7, 500L), new ShardMetricsReporter()).run().     assertEquals(1000, sourceContext.getCollectedOutputs().size()).     assertEquals(SentinelSequenceNumber.SENTINEL_SHARD_ENDING_SEQUENCE_NUM.get(), subscribedShardsStateUnderTest.get(0).getLastProcessedSequenceNum()). }
false;public;0;44;;@Test public void testCorrectNumOfCollectedRecordsAndUpdatedStateWithAdaptiveReads() {     Properties consumerProperties = new Properties().     consumerProperties.put("flink.shard.adaptivereads", "true").     StreamShardHandle fakeToBeConsumedShard = getMockStreamShard("fakeStream", 0).     LinkedList<KinesisStreamShardState> subscribedShardsStateUnderTest = new LinkedList<>().     subscribedShardsStateUnderTest.add(new KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(fakeToBeConsumedShard), fakeToBeConsumedShard, new SequenceNumber("fakeStartingState"))).     TestSourceContext<String> sourceContext = new TestSourceContext<>().     TestableKinesisDataFetcher<String> fetcher = new TestableKinesisDataFetcher<>(Collections.singletonList("fakeStream"), sourceContext, consumerProperties, new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()), 10, 2, new AtomicReference<>(), subscribedShardsStateUnderTest, KinesisDataFetcher.createInitialSubscribedStreamsToLastDiscoveredShardsState(Collections.singletonList("fakeStream")), Mockito.mock(KinesisProxyInterface.class)).     new ShardConsumer<>(fetcher, 0, subscribedShardsStateUnderTest.get(0).getStreamShardHandle(), subscribedShardsStateUnderTest.get(0).getLastProcessedSequenceNum(), // Initial number of records to fetch --> 10     FakeKinesisBehavioursFactory.initialNumOfRecordsAfterNumOfGetRecordsCallsWithAdaptiveReads(10, 2, 500L), new ShardMetricsReporter()).run().     // Avg record size for first batch --> 10 * 10 Kb/10 = 10 Kb     // Number of records fetched in second batch --> 2 Mb/10Kb * 5 = 40     // Total number of records = 10 + 40 = 50     assertEquals(50, sourceContext.getCollectedOutputs().size()).     assertEquals(SentinelSequenceNumber.SENTINEL_SHARD_ENDING_SEQUENCE_NUM.get(), subscribedShardsStateUnderTest.get(0).getLastProcessedSequenceNum()). }
false;private,static;2;10;;private static StreamShardHandle getMockStreamShard(String streamName, int shardId) {     return new StreamShardHandle(streamName, new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(shardId)).withHashKeyRange(new HashKeyRange().withStartingHashKey("0").withEndingHashKey(new BigInteger(StringUtils.repeat("FF", 16), 16).toString()))). }
