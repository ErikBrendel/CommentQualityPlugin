commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;@Override public void run() {     try {         StreamExecutionEnvironment see = StreamExecutionEnvironment.createRemoteEnvironment("localhost", flinkPort, flinkConfig).         see.setParallelism(parallelism).         // start data generator         DataStream<String> simpleStringStream = see.addSource(new KinesisEventsGeneratorProducerThread.EventsGenerator(totalEventCount)).setParallelism(1).         Properties producerProps = new Properties().         producerProps.setProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID, awsAccessKey).         producerProps.setProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY, awsSecretKey).         producerProps.setProperty(AWSConfigConstants.AWS_REGION, awsRegion).         FlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(new SimpleStringSchema(), producerProps).         kinesis.setFailOnError(true).         kinesis.setDefaultStream(kinesisStreamName).         kinesis.setDefaultPartition("0").         simpleStringStream.addSink(kinesis).         LOG.info("Starting producing topology").         see.execute("Producing topology").         LOG.info("Producing topo finished").     } catch (Exception e) {         LOG.warn("Error while running producing topology", e).         errorHandler.set(e).     } }
false;public,static;9;44;;public static Thread create(final int totalEventCount, final int parallelism, final String awsAccessKey, final String awsSecretKey, final String awsRegion, final String kinesisStreamName, final AtomicReference<Throwable> errorHandler, final int flinkPort, final Configuration flinkConfig) {     Runnable kinesisEventsGeneratorProducer = new Runnable() {          @Override         public void run() {             try {                 StreamExecutionEnvironment see = StreamExecutionEnvironment.createRemoteEnvironment("localhost", flinkPort, flinkConfig).                 see.setParallelism(parallelism).                 // start data generator                 DataStream<String> simpleStringStream = see.addSource(new KinesisEventsGeneratorProducerThread.EventsGenerator(totalEventCount)).setParallelism(1).                 Properties producerProps = new Properties().                 producerProps.setProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID, awsAccessKey).                 producerProps.setProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY, awsSecretKey).                 producerProps.setProperty(AWSConfigConstants.AWS_REGION, awsRegion).                 FlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(new SimpleStringSchema(), producerProps).                 kinesis.setFailOnError(true).                 kinesis.setDefaultStream(kinesisStreamName).                 kinesis.setDefaultPartition("0").                 simpleStringStream.addSink(kinesis).                 LOG.info("Starting producing topology").                 see.execute("Producing topology").                 LOG.info("Producing topo finished").             } catch (Exception e) {                 LOG.warn("Error while running producing topology", e).                 errorHandler.set(e).             }         }     }.     return new Thread(kinesisEventsGeneratorProducer). }
false;public;1;15;;@Override public void run(SourceContext<String> ctx) throws Exception {     long seq = 0.     while (running) {         Thread.sleep(10).         String evt = (seq++) + "-" + RandomStringUtils.randomAlphabetic(12).         ctx.collect(evt).         LOG.info("Emitting event {}", evt).         if (seq >= limit) {             break.         }     }     ctx.close().     LOG.info("Stopping events generator"). }
false;public;0;4;;@Override public void cancel() {     running = false. }
