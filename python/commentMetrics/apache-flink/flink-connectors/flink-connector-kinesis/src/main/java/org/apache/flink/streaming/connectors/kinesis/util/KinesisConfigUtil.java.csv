# id;timestamp;commentText;codeText;commentWords;codeWords
KinesisConfigUtil -> public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config);1506073434;Validate configuration properties for {@link FlinkKinesisProducer},_and return a constructed KinesisProducerConfiguration.;public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		_		if (!config.containsKey(RATE_LIMIT)) {_			config.setProperty(RATE_LIMIT, DEFAULT_RATE_LIMIT)__		}__		KinesisProducerConfiguration kpc = KinesisProducerConfiguration.fromProperties(config)___		kpc.setCredentialsProvider(AWSUtil.getCredentialsProvider(config))___		_		_		_		if (config.containsKey(THREADING_MODEL)) {_			kpc.setThreadingModel(_					KinesisProducerConfiguration.ThreadingModel.valueOf(config.getProperty(THREADING_MODEL)))__		} else {_			kpc.setThreadingModel(KinesisProducerConfiguration.ThreadingModel.POOLED)__		}__		if (config.containsKey(THREAD_POOL_SIZE)) {_			kpc.setThreadPoolSize(Integer.parseInt(config.getProperty(THREAD_POOL_SIZE)))__		} else {_			kpc.setThreadPoolSize(DEFAULT_THREAD_POOL_SIZE)__		}__		return kpc__	};validate,configuration,properties,for,link,flink,kinesis,producer,and,return,a,constructed,kinesis,producer,configuration;public,static,kinesis,producer,configuration,get,validated,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,config,set,property,kinesis,producer,configuration,kpc,kinesis,producer,configuration,from,properties,config,kpc,set,credentials,provider,awsutil,get,credentials,provider,config,if,config,contains,key,kpc,set,threading,model,kinesis,producer,configuration,threading,model,value,of,config,get,property,else,kpc,set,threading,model,kinesis,producer,configuration,threading,model,pooled,if,config,contains,key,kpc,set,thread,pool,size,integer,parse,int,config,get,property,else,kpc,set,thread,pool,size,return,kpc
KinesisConfigUtil -> public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config);1506073434;Validate configuration properties for {@link FlinkKinesisProducer},_and return a constructed KinesisProducerConfiguration.;public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		_		if (!config.containsKey(RATE_LIMIT)) {_			config.setProperty(RATE_LIMIT, DEFAULT_RATE_LIMIT)__		}__		KinesisProducerConfiguration kpc = KinesisProducerConfiguration.fromProperties(config)___		kpc.setCredentialsProvider(AWSUtil.getCredentialsProvider(config))___		_		_		_		kpc.setCredentialsRefreshDelay(100)___		_		_		_		if (config.containsKey(THREADING_MODEL)) {_			kpc.setThreadingModel(_					KinesisProducerConfiguration.ThreadingModel.valueOf(config.getProperty(THREADING_MODEL)))__		} else {_			kpc.setThreadingModel(KinesisProducerConfiguration.ThreadingModel.POOLED)__		}__		if (config.containsKey(THREAD_POOL_SIZE)) {_			kpc.setThreadPoolSize(Integer.parseInt(config.getProperty(THREAD_POOL_SIZE)))__		} else {_			kpc.setThreadPoolSize(DEFAULT_THREAD_POOL_SIZE)__		}__		return kpc__	};validate,configuration,properties,for,link,flink,kinesis,producer,and,return,a,constructed,kinesis,producer,configuration;public,static,kinesis,producer,configuration,get,validated,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,config,set,property,kinesis,producer,configuration,kpc,kinesis,producer,configuration,from,properties,config,kpc,set,credentials,provider,awsutil,get,credentials,provider,config,kpc,set,credentials,refresh,delay,100,if,config,contains,key,kpc,set,threading,model,kinesis,producer,configuration,threading,model,value,of,config,get,property,else,kpc,set,threading,model,kinesis,producer,configuration,threading,model,pooled,if,config,contains,key,kpc,set,thread,pool,size,integer,parse,int,config,get,property,else,kpc,set,thread,pool,size,return,kpc
KinesisConfigUtil -> public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config);1512029052;Validate configuration properties for {@link FlinkKinesisProducer},_and return a constructed KinesisProducerConfiguration.;public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		KinesisProducerConfiguration kpc = KinesisProducerConfiguration.fromProperties(config)___		kpc.setCredentialsProvider(AWSUtil.getCredentialsProvider(config))___		_		_		_		kpc.setCredentialsRefreshDelay(100)___		_		if (!config.containsKey(RATE_LIMIT)) {_			kpc.setRateLimit(DEFAULT_RATE_LIMIT)__		}_		if (!config.containsKey(THREADING_MODEL)) {_			kpc.setThreadingModel(DEFAULT_THREADING_MODEL)__		}_		if (!config.containsKey(THREAD_POOL_SIZE)) {_			kpc.setThreadPoolSize(DEFAULT_THREAD_POOL_SIZE)__		}__		return kpc__	};validate,configuration,properties,for,link,flink,kinesis,producer,and,return,a,constructed,kinesis,producer,configuration;public,static,kinesis,producer,configuration,get,validated,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,kinesis,producer,configuration,kpc,kinesis,producer,configuration,from,properties,config,kpc,set,credentials,provider,awsutil,get,credentials,provider,config,kpc,set,credentials,refresh,delay,100,if,config,contains,key,kpc,set,rate,limit,if,config,contains,key,kpc,set,threading,model,if,config,contains,key,kpc,set,thread,pool,size,return,kpc
KinesisConfigUtil -> public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config);1513571244;Validate configuration properties for {@link FlinkKinesisProducer},_and return a constructed KinesisProducerConfiguration.;public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		KinesisProducerConfiguration kpc = KinesisProducerConfiguration.fromProperties(config)__		kpc.setRegion(config.getProperty(AWSConfigConstants.AWS_REGION))___		kpc.setCredentialsProvider(AWSUtil.getCredentialsProvider(config))___		_		_		_		kpc.setCredentialsRefreshDelay(100)___		_		if (!config.containsKey(RATE_LIMIT)) {_			kpc.setRateLimit(DEFAULT_RATE_LIMIT)__		}_		if (!config.containsKey(THREADING_MODEL)) {_			kpc.setThreadingModel(DEFAULT_THREADING_MODEL)__		}_		if (!config.containsKey(THREAD_POOL_SIZE)) {_			kpc.setThreadPoolSize(DEFAULT_THREAD_POOL_SIZE)__		}__		return kpc__	};validate,configuration,properties,for,link,flink,kinesis,producer,and,return,a,constructed,kinesis,producer,configuration;public,static,kinesis,producer,configuration,get,validated,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,kinesis,producer,configuration,kpc,kinesis,producer,configuration,from,properties,config,kpc,set,region,config,get,property,awsconfig,constants,kpc,set,credentials,provider,awsutil,get,credentials,provider,config,kpc,set,credentials,refresh,delay,100,if,config,contains,key,kpc,set,rate,limit,if,config,contains,key,kpc,set,threading,model,if,config,contains,key,kpc,set,thread,pool,size,return,kpc
KinesisConfigUtil -> public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config);1515757408;Validate configuration properties for {@link FlinkKinesisProducer},_and return a constructed KinesisProducerConfiguration.;public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		KinesisProducerConfiguration kpc = KinesisProducerConfiguration.fromProperties(config)__		kpc.setRegion(config.getProperty(AWSConfigConstants.AWS_REGION))___		kpc.setCredentialsProvider(AWSUtil.getCredentialsProvider(config))___		_		_		_		kpc.setCredentialsRefreshDelay(100)___		_		if (!config.containsKey(RATE_LIMIT)) {_			kpc.setRateLimit(DEFAULT_RATE_LIMIT)__		}_		if (!config.containsKey(THREADING_MODEL)) {_			kpc.setThreadingModel(DEFAULT_THREADING_MODEL)__		}_		if (!config.containsKey(THREAD_POOL_SIZE)) {_			kpc.setThreadPoolSize(DEFAULT_THREAD_POOL_SIZE)__		}__		return kpc__	};validate,configuration,properties,for,link,flink,kinesis,producer,and,return,a,constructed,kinesis,producer,configuration;public,static,kinesis,producer,configuration,get,validated,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,kinesis,producer,configuration,kpc,kinesis,producer,configuration,from,properties,config,kpc,set,region,config,get,property,awsconfig,constants,kpc,set,credentials,provider,awsutil,get,credentials,provider,config,kpc,set,credentials,refresh,delay,100,if,config,contains,key,kpc,set,rate,limit,if,config,contains,key,kpc,set,threading,model,if,config,contains,key,kpc,set,thread,pool,size,return,kpc
KinesisConfigUtil -> public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config);1527029910;Validate configuration properties for {@link FlinkKinesisProducer},_and return a constructed KinesisProducerConfiguration.;public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		KinesisProducerConfiguration kpc = KinesisProducerConfiguration.fromProperties(config)__		kpc.setRegion(config.getProperty(AWSConfigConstants.AWS_REGION))___		kpc.setCredentialsProvider(AWSUtil.getCredentialsProvider(config))___		_		_		_		kpc.setCredentialsRefreshDelay(100)___		_		if (!config.containsKey(RATE_LIMIT)) {_			kpc.setRateLimit(DEFAULT_RATE_LIMIT)__		}_		if (!config.containsKey(THREADING_MODEL)) {_			kpc.setThreadingModel(DEFAULT_THREADING_MODEL)__		}_		if (!config.containsKey(THREAD_POOL_SIZE)) {_			kpc.setThreadPoolSize(DEFAULT_THREAD_POOL_SIZE)__		}__		return kpc__	};validate,configuration,properties,for,link,flink,kinesis,producer,and,return,a,constructed,kinesis,producer,configuration;public,static,kinesis,producer,configuration,get,validated,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,kinesis,producer,configuration,kpc,kinesis,producer,configuration,from,properties,config,kpc,set,region,config,get,property,awsconfig,constants,kpc,set,credentials,provider,awsutil,get,credentials,provider,config,kpc,set,credentials,refresh,delay,100,if,config,contains,key,kpc,set,rate,limit,if,config,contains,key,kpc,set,threading,model,if,config,contains,key,kpc,set,thread,pool,size,return,kpc
KinesisConfigUtil -> public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config);1529652657;Validate configuration properties for {@link FlinkKinesisProducer},_and return a constructed KinesisProducerConfiguration.;public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		KinesisProducerConfiguration kpc = KinesisProducerConfiguration.fromProperties(config)__		kpc.setRegion(config.getProperty(AWSConfigConstants.AWS_REGION))___		kpc.setCredentialsProvider(AWSUtil.getCredentialsProvider(config))___		_		_		_		kpc.setCredentialsRefreshDelay(100)___		_		if (!config.containsKey(RATE_LIMIT)) {_			kpc.setRateLimit(DEFAULT_RATE_LIMIT)__		}_		if (!config.containsKey(THREADING_MODEL)) {_			kpc.setThreadingModel(DEFAULT_THREADING_MODEL)__		}_		if (!config.containsKey(THREAD_POOL_SIZE)) {_			kpc.setThreadPoolSize(DEFAULT_THREAD_POOL_SIZE)__		}__		return kpc__	};validate,configuration,properties,for,link,flink,kinesis,producer,and,return,a,constructed,kinesis,producer,configuration;public,static,kinesis,producer,configuration,get,validated,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,kinesis,producer,configuration,kpc,kinesis,producer,configuration,from,properties,config,kpc,set,region,config,get,property,awsconfig,constants,kpc,set,credentials,provider,awsutil,get,credentials,provider,config,kpc,set,credentials,refresh,delay,100,if,config,contains,key,kpc,set,rate,limit,if,config,contains,key,kpc,set,threading,model,if,config,contains,key,kpc,set,thread,pool,size,return,kpc
KinesisConfigUtil -> public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config);1539162614;Validate configuration properties for {@link FlinkKinesisProducer},_and return a constructed KinesisProducerConfiguration.;public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (!config.containsKey(AWSConfigConstants.AWS_REGION)) {_			_			throw new IllegalArgumentException(String.format("For FlinkKinesisProducer AWS region ('%s') must be set in the config.", AWSConfigConstants.AWS_REGION))__		}__		KinesisProducerConfiguration kpc = KinesisProducerConfiguration.fromProperties(config)__		kpc.setRegion(config.getProperty(AWSConfigConstants.AWS_REGION))___		kpc.setCredentialsProvider(AWSUtil.getCredentialsProvider(config))___		_		_		_		kpc.setCredentialsRefreshDelay(100)___		_		if (!config.containsKey(RATE_LIMIT)) {_			kpc.setRateLimit(DEFAULT_RATE_LIMIT)__		}_		if (!config.containsKey(THREADING_MODEL)) {_			kpc.setThreadingModel(DEFAULT_THREADING_MODEL)__		}_		if (!config.containsKey(THREAD_POOL_SIZE)) {_			kpc.setThreadPoolSize(DEFAULT_THREAD_POOL_SIZE)__		}__		return kpc__	};validate,configuration,properties,for,link,flink,kinesis,producer,and,return,a,constructed,kinesis,producer,configuration;public,static,kinesis,producer,configuration,get,validated,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,string,format,for,flink,kinesis,producer,aws,region,s,must,be,set,in,the,config,awsconfig,constants,kinesis,producer,configuration,kpc,kinesis,producer,configuration,from,properties,config,kpc,set,region,config,get,property,awsconfig,constants,kpc,set,credentials,provider,awsutil,get,credentials,provider,config,kpc,set,credentials,refresh,delay,100,if,config,contains,key,kpc,set,rate,limit,if,config,contains,key,kpc,set,threading,model,if,config,contains,key,kpc,set,thread,pool,size,return,kpc
KinesisConfigUtil -> public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config);1545495597;Validate configuration properties for {@link FlinkKinesisProducer},_and return a constructed KinesisProducerConfiguration.;public static KinesisProducerConfiguration getValidatedProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (!config.containsKey(AWSConfigConstants.AWS_REGION)) {_			_			throw new IllegalArgumentException(String.format("For FlinkKinesisProducer AWS region ('%s') must be set in the config.", AWSConfigConstants.AWS_REGION))__		}__		KinesisProducerConfiguration kpc = KinesisProducerConfiguration.fromProperties(config)__		kpc.setRegion(config.getProperty(AWSConfigConstants.AWS_REGION))___		kpc.setCredentialsProvider(AWSUtil.getCredentialsProvider(config))___		_		_		_		kpc.setCredentialsRefreshDelay(100)___		_		if (!config.containsKey(RATE_LIMIT)) {_			kpc.setRateLimit(DEFAULT_RATE_LIMIT)__		}_		if (!config.containsKey(THREADING_MODEL)) {_			kpc.setThreadingModel(DEFAULT_THREADING_MODEL)__		}_		if (!config.containsKey(THREAD_POOL_SIZE)) {_			kpc.setThreadPoolSize(DEFAULT_THREAD_POOL_SIZE)__		}__		return kpc__	};validate,configuration,properties,for,link,flink,kinesis,producer,and,return,a,constructed,kinesis,producer,configuration;public,static,kinesis,producer,configuration,get,validated,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,string,format,for,flink,kinesis,producer,aws,region,s,must,be,set,in,the,config,awsconfig,constants,kinesis,producer,configuration,kpc,kinesis,producer,configuration,from,properties,config,kpc,set,region,config,get,property,awsconfig,constants,kpc,set,credentials,provider,awsutil,get,credentials,provider,config,kpc,set,credentials,refresh,delay,100,if,config,contains,key,kpc,set,rate,limit,if,config,contains,key,kpc,set,threading,model,if,config,contains,key,kpc,set,thread,pool,size,return,kpc
KinesisConfigUtil -> public static void validateProducerConfiguration(Properties config);1480685315;Validate configuration properties for {@link FlinkKinesisProducer}.;public static void validateProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		validateOptionalPositiveLongProperty(config, ProducerConfigConstants.COLLECTION_MAX_COUNT,_			"Invalid value given for maximum number of items to pack into a PutRecords request. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ProducerConfigConstants.AGGREGATION_MAX_COUNT,_			"Invalid value given for maximum number of items to pack into an aggregated record. Must be a valid non-negative long value.")__	};validate,configuration,properties,for,link,flink,kinesis,producer;public,static,void,validate,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,validate,optional,positive,long,property,config,producer,config,constants,invalid,value,given,for,maximum,number,of,items,to,pack,into,a,put,records,request,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,producer,config,constants,invalid,value,given,for,maximum,number,of,items,to,pack,into,an,aggregated,record,must,be,a,valid,non,negative,long,value
KinesisConfigUtil -> public static void validateProducerConfiguration(Properties config);1481810673;Validate configuration properties for {@link FlinkKinesisProducer}.;public static void validateProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		validateOptionalPositiveLongProperty(config, ProducerConfigConstants.COLLECTION_MAX_COUNT,_			"Invalid value given for maximum number of items to pack into a PutRecords request. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ProducerConfigConstants.AGGREGATION_MAX_COUNT,_			"Invalid value given for maximum number of items to pack into an aggregated record. Must be a valid non-negative long value.")__	};validate,configuration,properties,for,link,flink,kinesis,producer;public,static,void,validate,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,validate,optional,positive,long,property,config,producer,config,constants,invalid,value,given,for,maximum,number,of,items,to,pack,into,a,put,records,request,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,producer,config,constants,invalid,value,given,for,maximum,number,of,items,to,pack,into,an,aggregated,record,must,be,a,valid,non,negative,long,value
KinesisConfigUtil -> public static void validateProducerConfiguration(Properties config);1485238807;Validate configuration properties for {@link FlinkKinesisProducer}.;public static void validateProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		validateOptionalPositiveLongProperty(config, ProducerConfigConstants.COLLECTION_MAX_COUNT,_			"Invalid value given for maximum number of items to pack into a PutRecords request. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ProducerConfigConstants.AGGREGATION_MAX_COUNT,_			"Invalid value given for maximum number of items to pack into an aggregated record. Must be a valid non-negative long value.")__	};validate,configuration,properties,for,link,flink,kinesis,producer;public,static,void,validate,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,validate,optional,positive,long,property,config,producer,config,constants,invalid,value,given,for,maximum,number,of,items,to,pack,into,a,put,records,request,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,producer,config,constants,invalid,value,given,for,maximum,number,of,items,to,pack,into,an,aggregated,record,must,be,a,valid,non,negative,long,value
KinesisConfigUtil -> public static void validateProducerConfiguration(Properties config);1490797484;Validate configuration properties for {@link FlinkKinesisProducer}.;public static void validateProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		validateOptionalPositiveLongProperty(config, ProducerConfigConstants.COLLECTION_MAX_COUNT,_			"Invalid value given for maximum number of items to pack into a PutRecords request. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ProducerConfigConstants.AGGREGATION_MAX_COUNT,_			"Invalid value given for maximum number of items to pack into an aggregated record. Must be a valid non-negative long value.")__	};validate,configuration,properties,for,link,flink,kinesis,producer;public,static,void,validate,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,validate,optional,positive,long,property,config,producer,config,constants,invalid,value,given,for,maximum,number,of,items,to,pack,into,a,put,records,request,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,producer,config,constants,invalid,value,given,for,maximum,number,of,items,to,pack,into,an,aggregated,record,must,be,a,valid,non,negative,long,value
KinesisConfigUtil -> public static void validateProducerConfiguration(Properties config);1490934739;Validate configuration properties for {@link FlinkKinesisProducer}.;public static void validateProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		validateOptionalPositiveLongProperty(config, ProducerConfigConstants.COLLECTION_MAX_COUNT,_			"Invalid value given for maximum number of items to pack into a PutRecords request. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ProducerConfigConstants.AGGREGATION_MAX_COUNT,_			"Invalid value given for maximum number of items to pack into an aggregated record. Must be a valid non-negative long value.")__	};validate,configuration,properties,for,link,flink,kinesis,producer;public,static,void,validate,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,validate,optional,positive,long,property,config,producer,config,constants,invalid,value,given,for,maximum,number,of,items,to,pack,into,a,put,records,request,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,producer,config,constants,invalid,value,given,for,maximum,number,of,items,to,pack,into,an,aggregated,record,must,be,a,valid,non,negative,long,value
KinesisConfigUtil -> public static void validateProducerConfiguration(Properties config);1495923079;Validate configuration properties for {@link FlinkKinesisProducer}.;public static void validateProducerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		validateOptionalPositiveLongProperty(config, ProducerConfigConstants.COLLECTION_MAX_COUNT,_			"Invalid value given for maximum number of items to pack into a PutRecords request. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ProducerConfigConstants.AGGREGATION_MAX_COUNT,_			"Invalid value given for maximum number of items to pack into an aggregated record. Must be a valid non-negative long value.")__	};validate,configuration,properties,for,link,flink,kinesis,producer;public,static,void,validate,producer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,validate,optional,positive,long,property,config,producer,config,constants,invalid,value,given,for,maximum,number,of,items,to,pack,into,a,put,records,request,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,producer,config,constants,invalid,value,given,for,maximum,number,of,items,to,pack,into,an,aggregated,record,must,be,a,valid,non,negative,long,value
KinesisConfigUtil -> public static Properties replaceDeprecatedProducerKeys(Properties configProps);1504760067;Replace deprecated configuration properties for {@link FlinkKinesisProducer}._This should be remove along with deprecated keys;public static Properties replaceDeprecatedProducerKeys(Properties configProps) {_		_		if (configProps.containsKey(ProducerConfigConstants.COLLECTION_MAX_COUNT)) {_			configProps.setProperty(COLLECTION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.COLLECTION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.COLLECTION_MAX_COUNT)__		}_		_		if (configProps.containsKey(ProducerConfigConstants.AGGREGATION_MAX_COUNT)) {_			configProps.setProperty(AGGREGATION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.AGGREGATION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.AGGREGATION_MAX_COUNT)__		}_		return configProps__	};replace,deprecated,configuration,properties,for,link,flink,kinesis,producer,this,should,be,remove,along,with,deprecated,keys;public,static,properties,replace,deprecated,producer,keys,properties,config,props,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,return,config,props
KinesisConfigUtil -> public static Properties replaceDeprecatedProducerKeys(Properties configProps);1506073434;Replace deprecated configuration properties for {@link FlinkKinesisProducer}._This should be remove along with deprecated keys;public static Properties replaceDeprecatedProducerKeys(Properties configProps) {_		_		if (configProps.containsKey(ProducerConfigConstants.COLLECTION_MAX_COUNT)) {_			configProps.setProperty(COLLECTION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.COLLECTION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.COLLECTION_MAX_COUNT)__		}_		_		if (configProps.containsKey(ProducerConfigConstants.AGGREGATION_MAX_COUNT)) {_			configProps.setProperty(AGGREGATION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.AGGREGATION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.AGGREGATION_MAX_COUNT)__		}_		return configProps__	};replace,deprecated,configuration,properties,for,link,flink,kinesis,producer,this,should,be,remove,along,with,deprecated,keys;public,static,properties,replace,deprecated,producer,keys,properties,config,props,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,return,config,props
KinesisConfigUtil -> public static Properties replaceDeprecatedProducerKeys(Properties configProps);1506073434;Replace deprecated configuration properties for {@link FlinkKinesisProducer}._This should be remove along with deprecated keys;public static Properties replaceDeprecatedProducerKeys(Properties configProps) {_		_		if (configProps.containsKey(ProducerConfigConstants.COLLECTION_MAX_COUNT)) {_			configProps.setProperty(COLLECTION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.COLLECTION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.COLLECTION_MAX_COUNT)__		}_		_		if (configProps.containsKey(ProducerConfigConstants.AGGREGATION_MAX_COUNT)) {_			configProps.setProperty(AGGREGATION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.AGGREGATION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.AGGREGATION_MAX_COUNT)__		}_		return configProps__	};replace,deprecated,configuration,properties,for,link,flink,kinesis,producer,this,should,be,remove,along,with,deprecated,keys;public,static,properties,replace,deprecated,producer,keys,properties,config,props,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,return,config,props
KinesisConfigUtil -> public static Properties replaceDeprecatedProducerKeys(Properties configProps);1512029052;Replace deprecated configuration properties for {@link FlinkKinesisProducer}._This should be remove along with deprecated keys;public static Properties replaceDeprecatedProducerKeys(Properties configProps) {_		_		if (configProps.containsKey(ProducerConfigConstants.COLLECTION_MAX_COUNT)) {_			configProps.setProperty(COLLECTION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.COLLECTION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.COLLECTION_MAX_COUNT)__		}_		_		if (configProps.containsKey(ProducerConfigConstants.AGGREGATION_MAX_COUNT)) {_			configProps.setProperty(AGGREGATION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.AGGREGATION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.AGGREGATION_MAX_COUNT)__		}_		return configProps__	};replace,deprecated,configuration,properties,for,link,flink,kinesis,producer,this,should,be,remove,along,with,deprecated,keys;public,static,properties,replace,deprecated,producer,keys,properties,config,props,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,return,config,props
KinesisConfigUtil -> public static Properties replaceDeprecatedProducerKeys(Properties configProps);1513571244;Replace deprecated configuration properties for {@link FlinkKinesisProducer}._This should be remove along with deprecated keys;public static Properties replaceDeprecatedProducerKeys(Properties configProps) {_		_		if (configProps.containsKey(ProducerConfigConstants.COLLECTION_MAX_COUNT)) {_			configProps.setProperty(COLLECTION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.COLLECTION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.COLLECTION_MAX_COUNT)__		}_		_		if (configProps.containsKey(ProducerConfigConstants.AGGREGATION_MAX_COUNT)) {_			configProps.setProperty(AGGREGATION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.AGGREGATION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.AGGREGATION_MAX_COUNT)__		}_		return configProps__	};replace,deprecated,configuration,properties,for,link,flink,kinesis,producer,this,should,be,remove,along,with,deprecated,keys;public,static,properties,replace,deprecated,producer,keys,properties,config,props,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,return,config,props
KinesisConfigUtil -> public static Properties replaceDeprecatedProducerKeys(Properties configProps);1515757408;Replace deprecated configuration properties for {@link FlinkKinesisProducer}._This should be remove along with deprecated keys;public static Properties replaceDeprecatedProducerKeys(Properties configProps) {_		_		if (configProps.containsKey(ProducerConfigConstants.COLLECTION_MAX_COUNT)) {_			configProps.setProperty(COLLECTION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.COLLECTION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.COLLECTION_MAX_COUNT)__		}_		_		if (configProps.containsKey(ProducerConfigConstants.AGGREGATION_MAX_COUNT)) {_			configProps.setProperty(AGGREGATION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.AGGREGATION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.AGGREGATION_MAX_COUNT)__		}_		return configProps__	};replace,deprecated,configuration,properties,for,link,flink,kinesis,producer,this,should,be,remove,along,with,deprecated,keys;public,static,properties,replace,deprecated,producer,keys,properties,config,props,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,return,config,props
KinesisConfigUtil -> public static Properties replaceDeprecatedProducerKeys(Properties configProps);1527029910;Replace deprecated configuration properties for {@link FlinkKinesisProducer}._This should be remove along with deprecated keys;public static Properties replaceDeprecatedProducerKeys(Properties configProps) {_		_		if (configProps.containsKey(ProducerConfigConstants.COLLECTION_MAX_COUNT)) {_			configProps.setProperty(COLLECTION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.COLLECTION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.COLLECTION_MAX_COUNT)__		}_		_		if (configProps.containsKey(ProducerConfigConstants.AGGREGATION_MAX_COUNT)) {_			configProps.setProperty(AGGREGATION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.AGGREGATION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.AGGREGATION_MAX_COUNT)__		}_		return configProps__	};replace,deprecated,configuration,properties,for,link,flink,kinesis,producer,this,should,be,remove,along,with,deprecated,keys;public,static,properties,replace,deprecated,producer,keys,properties,config,props,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,return,config,props
KinesisConfigUtil -> public static Properties replaceDeprecatedProducerKeys(Properties configProps);1529652657;Replace deprecated configuration properties for {@link FlinkKinesisProducer}._This should be remove along with deprecated keys;public static Properties replaceDeprecatedProducerKeys(Properties configProps) {_		_		if (configProps.containsKey(ProducerConfigConstants.COLLECTION_MAX_COUNT)) {_			configProps.setProperty(COLLECTION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.COLLECTION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.COLLECTION_MAX_COUNT)__		}_		_		if (configProps.containsKey(ProducerConfigConstants.AGGREGATION_MAX_COUNT)) {_			configProps.setProperty(AGGREGATION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.AGGREGATION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.AGGREGATION_MAX_COUNT)__		}_		return configProps__	};replace,deprecated,configuration,properties,for,link,flink,kinesis,producer,this,should,be,remove,along,with,deprecated,keys;public,static,properties,replace,deprecated,producer,keys,properties,config,props,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,return,config,props
KinesisConfigUtil -> public static Properties replaceDeprecatedProducerKeys(Properties configProps);1539162614;Replace deprecated configuration properties for {@link FlinkKinesisProducer}._This should be remove along with deprecated keys;public static Properties replaceDeprecatedProducerKeys(Properties configProps) {_		_		if (configProps.containsKey(ProducerConfigConstants.COLLECTION_MAX_COUNT)) {_			configProps.setProperty(COLLECTION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.COLLECTION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.COLLECTION_MAX_COUNT)__		}_		_		if (configProps.containsKey(ProducerConfigConstants.AGGREGATION_MAX_COUNT)) {_			configProps.setProperty(AGGREGATION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.AGGREGATION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.AGGREGATION_MAX_COUNT)__		}_		return configProps__	};replace,deprecated,configuration,properties,for,link,flink,kinesis,producer,this,should,be,remove,along,with,deprecated,keys;public,static,properties,replace,deprecated,producer,keys,properties,config,props,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,return,config,props
KinesisConfigUtil -> public static Properties replaceDeprecatedProducerKeys(Properties configProps);1545495597;Replace deprecated configuration properties for {@link FlinkKinesisProducer}._This should be remove along with deprecated keys;public static Properties replaceDeprecatedProducerKeys(Properties configProps) {_		_		if (configProps.containsKey(ProducerConfigConstants.COLLECTION_MAX_COUNT)) {_			configProps.setProperty(COLLECTION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.COLLECTION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.COLLECTION_MAX_COUNT)__		}_		_		if (configProps.containsKey(ProducerConfigConstants.AGGREGATION_MAX_COUNT)) {_			configProps.setProperty(AGGREGATION_MAX_COUNT,_					configProps.getProperty(ProducerConfigConstants.AGGREGATION_MAX_COUNT))__			configProps.remove(ProducerConfigConstants.AGGREGATION_MAX_COUNT)__		}_		return configProps__	};replace,deprecated,configuration,properties,for,link,flink,kinesis,producer,this,should,be,remove,along,with,deprecated,keys;public,static,properties,replace,deprecated,producer,keys,properties,config,props,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,if,config,props,contains,key,producer,config,constants,config,props,set,property,config,props,get,property,producer,config,constants,config,props,remove,producer,config,constants,return,config,props
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1480685315;Validate configuration properties related to Amazon AWS service;public static void validateAwsConfiguration(Properties config) {_		if (!config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			_			_			if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_				|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_				throw new IllegalArgumentException("Please set values for AWS Access Key ID ('"+ AWSConfigConstants.AWS_ACCESS_KEY_ID +"') " +_					"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__			}_		} else {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('"+ AWSConfigConstants.AWS_ACCESS_KEY_ID +"') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (!config.containsKey(AWSConfigConstants.AWS_REGION)) {_			throw new IllegalArgumentException("The AWS region ('" + AWSConfigConstants.AWS_REGION + "') must be set in the config.")__		} else {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,else,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,the,aws,region,awsconfig,constants,must,be,set,in,the,config,else,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1481810673;Validate configuration properties related to Amazon AWS service;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (!config.containsKey(AWSConfigConstants.AWS_REGION)) {_			throw new IllegalArgumentException("The AWS region ('" + AWSConfigConstants.AWS_REGION + "') must be set in the config.")__		} else {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,the,aws,region,awsconfig,constants,must,be,set,in,the,config,else,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1485238807;Validate configuration properties related to Amazon AWS service;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (!config.containsKey(AWSConfigConstants.AWS_REGION)) {_			throw new IllegalArgumentException("The AWS region ('" + AWSConfigConstants.AWS_REGION + "') must be set in the config.")__		} else {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,the,aws,region,awsconfig,constants,must,be,set,in,the,config,else,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1490797484;Validate configuration properties related to Amazon AWS service;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (!config.containsKey(AWSConfigConstants.AWS_REGION)) {_			throw new IllegalArgumentException("The AWS region ('" + AWSConfigConstants.AWS_REGION + "') must be set in the config.")__		} else {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,the,aws,region,awsconfig,constants,must,be,set,in,the,config,else,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1490934739;Validate configuration properties related to Amazon AWS service;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (!config.containsKey(AWSConfigConstants.AWS_REGION)) {_			throw new IllegalArgumentException("The AWS region ('" + AWSConfigConstants.AWS_REGION + "') must be set in the config.")__		} else {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,the,aws,region,awsconfig,constants,must,be,set,in,the,config,else,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1495923079;Validate configuration properties related to Amazon AWS service.;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (!config.containsKey(AWSConfigConstants.AWS_REGION)) {_			throw new IllegalArgumentException("The AWS region ('" + AWSConfigConstants.AWS_REGION + "') must be set in the config.")__		} else {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,the,aws,region,awsconfig,constants,must,be,set,in,the,config,else,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1504760067;Validate configuration properties related to Amazon AWS service.;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (!config.containsKey(AWSConfigConstants.AWS_REGION)) {_			throw new IllegalArgumentException("The AWS region ('" + AWSConfigConstants.AWS_REGION + "') must be set in the config.")__		} else {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,the,aws,region,awsconfig,constants,must,be,set,in,the,config,else,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1506073434;Validate configuration properties related to Amazon AWS service.;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (!config.containsKey(AWSConfigConstants.AWS_REGION)) {_			throw new IllegalArgumentException("The AWS region ('" + AWSConfigConstants.AWS_REGION + "') must be set in the config.")__		} else {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,the,aws,region,awsconfig,constants,must,be,set,in,the,config,else,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1506073434;Validate configuration properties related to Amazon AWS service.;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (!config.containsKey(AWSConfigConstants.AWS_REGION)) {_			throw new IllegalArgumentException("The AWS region ('" + AWSConfigConstants.AWS_REGION + "') must be set in the config.")__		} else {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,the,aws,region,awsconfig,constants,must,be,set,in,the,config,else,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1512029052;Validate configuration properties related to Amazon AWS service.;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (!config.containsKey(AWSConfigConstants.AWS_REGION)) {_			throw new IllegalArgumentException("The AWS region ('" + AWSConfigConstants.AWS_REGION + "') must be set in the config.")__		} else {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,the,aws,region,awsconfig,constants,must,be,set,in,the,config,else,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1513571244;Validate configuration properties related to Amazon AWS service.;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (!config.containsKey(AWSConfigConstants.AWS_REGION)) {_			throw new IllegalArgumentException("The AWS region ('" + AWSConfigConstants.AWS_REGION + "') must be set in the config.")__		} else {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,the,aws,region,awsconfig,constants,must,be,set,in,the,config,else,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1515757408;Validate configuration properties related to Amazon AWS service.;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (!config.containsKey(AWSConfigConstants.AWS_REGION)) {_			throw new IllegalArgumentException("The AWS region ('" + AWSConfigConstants.AWS_REGION + "') must be set in the config.")__		} else {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,the,aws,region,awsconfig,constants,must,be,set,in,the,config,else,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1527029910;Validate configuration properties related to Amazon AWS service.;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (!(config.containsKey(AWSConfigConstants.AWS_REGION) ^ config.containsKey(ConsumerConfigConstants.AWS_ENDPOINT))) {_			_			throw new IllegalArgumentException(String.format("Either AWS region ('%s') or AWS endpoint ('%s') must be set in the config.",_				AWSConfigConstants.AWS_REGION, AWSConfigConstants.AWS_REGION))__		}__		if (config.containsKey(AWSConfigConstants.AWS_REGION)) {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,string,format,either,aws,region,s,or,aws,endpoint,s,must,be,set,in,the,config,awsconfig,constants,awsconfig,constants,if,config,contains,key,awsconfig,constants,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1529652657;Validate configuration properties related to Amazon AWS service.;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (!(config.containsKey(AWSConfigConstants.AWS_REGION) ^ config.containsKey(ConsumerConfigConstants.AWS_ENDPOINT))) {_			_			throw new IllegalArgumentException(String.format("Either AWS region ('%s') or AWS endpoint ('%s') must be set in the config.",_				AWSConfigConstants.AWS_REGION, AWSConfigConstants.AWS_REGION))__		}__		if (config.containsKey(AWSConfigConstants.AWS_REGION)) {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,string,format,either,aws,region,s,or,aws,endpoint,s,must,be,set,in,the,config,awsconfig,constants,awsconfig,constants,if,config,contains,key,awsconfig,constants,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1539162614;Validate configuration properties related to Amazon AWS service.;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (config.containsKey(AWSConfigConstants.AWS_REGION)) {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateAwsConfiguration(Properties config);1545495597;Validate configuration properties related to Amazon AWS service.;public static void validateAwsConfiguration(Properties config) {_		if (config.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			String credentialsProviderType = config.getProperty(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)___			_			CredentialProvider providerType__			try {_				providerType = CredentialProvider.valueOf(credentialsProviderType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (CredentialProvider type : CredentialProvider.values()) {_					sb.append(type.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS Credential Provider Type set in config. Valid values are: " + sb.toString())__			}__			_			if (providerType == CredentialProvider.BASIC) {_				if (!config.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_					|| !config.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_					throw new IllegalArgumentException("Please set values for AWS Access Key ID ('" + AWSConfigConstants.AWS_ACCESS_KEY_ID + "') " +_						"and Secret Key ('" + AWSConfigConstants.AWS_SECRET_ACCESS_KEY + "') when using the BASIC AWS credential provider type.")__				}_			}_		}__		if (config.containsKey(AWSConfigConstants.AWS_REGION)) {_			_			if (!AWSUtil.isValidRegion(config.getProperty(AWSConfigConstants.AWS_REGION))) {_				StringBuilder sb = new StringBuilder()__				for (Regions region : Regions.values()) {_					sb.append(region.getName()).append(", ")__				}_				throw new IllegalArgumentException("Invalid AWS region set in config. Valid values are: " + sb.toString())__			}_		}_	};validate,configuration,properties,related,to,amazon,aws,service;public,static,void,validate,aws,configuration,properties,config,if,config,contains,key,awsconfig,constants,string,credentials,provider,type,config,get,property,awsconfig,constants,credential,provider,provider,type,try,provider,type,credential,provider,value,of,credentials,provider,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,credential,provider,type,credential,provider,values,sb,append,type,to,string,append,throw,new,illegal,argument,exception,invalid,aws,credential,provider,type,set,in,config,valid,values,are,sb,to,string,if,provider,type,credential,provider,basic,if,config,contains,key,awsconfig,constants,config,contains,key,awsconfig,constants,throw,new,illegal,argument,exception,please,set,values,for,aws,access,key,id,awsconfig,constants,and,secret,key,awsconfig,constants,when,using,the,basic,aws,credential,provider,type,if,config,contains,key,awsconfig,constants,if,awsutil,is,valid,region,config,get,property,awsconfig,constants,string,builder,sb,new,string,builder,for,regions,region,regions,values,sb,append,region,get,name,append,throw,new,illegal,argument,exception,invalid,aws,region,set,in,config,valid,values,are,sb,to,string
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1480685315;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_BASE,_			"Invalid value given for describe stream operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_MAX,_			"Invalid value given for describe stream operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for describe stream operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1481810673;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_BASE,_			"Invalid value given for describe stream operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_MAX,_			"Invalid value given for describe stream operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for describe stream operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1485238807;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}__			_			if (InitialPosition.valueOf(initPosType) == InitialPosition.AT_TIMESTAMP) {_				if (!config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP)) {_					throw new IllegalArgumentException("Please set value for initial timestamp ('"_						+ ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.")__				}_				validateOptionalDateProperty(config, ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP,_					"Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream. "_						+ "Must be a valid format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX or non-negative double value. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480 .")__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_BASE,_			"Invalid value given for describe stream operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_MAX,_			"Invalid value given for describe stream operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for describe stream operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,if,initial,position,value,of,init,pos,type,initial,position,if,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,please,set,value,for,initial,timestamp,consumer,config,constants,when,using,initial,position,validate,optional,date,property,config,consumer,config,constants,invalid,value,given,for,initial,timestamp,for,initial,position,in,stream,must,be,a,valid,format,yyyy,mm,dd,t,hh,mm,ss,sssxxx,or,non,negative,double,value,for,example,2016,04,04t19,58,46,480,00,00,or,1459799926,480,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1490797484;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}__			_			if (InitialPosition.valueOf(initPosType) == InitialPosition.AT_TIMESTAMP) {_				if (!config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP)) {_					throw new IllegalArgumentException("Please set value for initial timestamp ('"_						+ ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.")__				}_				validateOptionalDateProperty(config, ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP,_					"Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream. "_						+ "Must be a valid format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX or non-negative double value. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480 .")__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_BASE,_			"Invalid value given for describe stream operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_MAX,_			"Invalid value given for describe stream operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for describe stream operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,if,initial,position,value,of,init,pos,type,initial,position,if,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,please,set,value,for,initial,timestamp,consumer,config,constants,when,using,initial,position,validate,optional,date,property,config,consumer,config,constants,invalid,value,given,for,initial,timestamp,for,initial,position,in,stream,must,be,a,valid,format,yyyy,mm,dd,t,hh,mm,ss,sssxxx,or,non,negative,double,value,for,example,2016,04,04t19,58,46,480,00,00,or,1459799926,480,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1490934739;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}__			_			if (InitialPosition.valueOf(initPosType) == InitialPosition.AT_TIMESTAMP) {_				if (!config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP)) {_					throw new IllegalArgumentException("Please set value for initial timestamp ('"_						+ ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.")__				}_				validateOptionalDateProperty(config,_					ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP,_					config.getProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, ConsumerConfigConstants.DEFAULT_STREAM_TIMESTAMP_DATE_FORMAT),_					"Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream. "_						+ "Must be a valid format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX or non-negative double value. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480 .")__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_BASE,_			"Invalid value given for describe stream operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_MAX,_			"Invalid value given for describe stream operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for describe stream operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,if,initial,position,value,of,init,pos,type,initial,position,if,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,please,set,value,for,initial,timestamp,consumer,config,constants,when,using,initial,position,validate,optional,date,property,config,consumer,config,constants,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,initial,timestamp,for,initial,position,in,stream,must,be,a,valid,format,yyyy,mm,dd,t,hh,mm,ss,sssxxx,or,non,negative,double,value,for,example,2016,04,04t19,58,46,480,00,00,or,1459799926,480,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1495923079;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}__			_			if (InitialPosition.valueOf(initPosType) == InitialPosition.AT_TIMESTAMP) {_				if (!config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP)) {_					throw new IllegalArgumentException("Please set value for initial timestamp ('"_						+ ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.")__				}_				validateOptionalDateProperty(config,_					ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP,_					config.getProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, ConsumerConfigConstants.DEFAULT_STREAM_TIMESTAMP_DATE_FORMAT),_					"Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream. "_						+ "Must be a valid format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX or non-negative double value. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480 .")__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_BASE,_			"Invalid value given for describe stream operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_MAX,_			"Invalid value given for describe stream operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for describe stream operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,if,initial,position,value,of,init,pos,type,initial,position,if,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,please,set,value,for,initial,timestamp,consumer,config,constants,when,using,initial,position,validate,optional,date,property,config,consumer,config,constants,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,initial,timestamp,for,initial,position,in,stream,must,be,a,valid,format,yyyy,mm,dd,t,hh,mm,ss,sssxxx,or,non,negative,double,value,for,example,2016,04,04t19,58,46,480,00,00,or,1459799926,480,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1504760067;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}__			_			if (InitialPosition.valueOf(initPosType) == InitialPosition.AT_TIMESTAMP) {_				if (!config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP)) {_					throw new IllegalArgumentException("Please set value for initial timestamp ('"_						+ ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.")__				}_				validateOptionalDateProperty(config,_					ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP,_					config.getProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, ConsumerConfigConstants.DEFAULT_STREAM_TIMESTAMP_DATE_FORMAT),_					"Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream. "_						+ "Must be a valid format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX or non-negative double value. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480 .")__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_BASE,_			"Invalid value given for describe stream operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_MAX,_			"Invalid value given for describe stream operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for describe stream operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,if,initial,position,value,of,init,pos,type,initial,position,if,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,please,set,value,for,initial,timestamp,consumer,config,constants,when,using,initial,position,validate,optional,date,property,config,consumer,config,constants,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,initial,timestamp,for,initial,position,in,stream,must,be,a,valid,format,yyyy,mm,dd,t,hh,mm,ss,sssxxx,or,non,negative,double,value,for,example,2016,04,04t19,58,46,480,00,00,or,1459799926,480,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1506073434;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}__			_			if (InitialPosition.valueOf(initPosType) == InitialPosition.AT_TIMESTAMP) {_				if (!config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP)) {_					throw new IllegalArgumentException("Please set value for initial timestamp ('"_						+ ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.")__				}_				validateOptionalDateProperty(config,_					ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP,_					config.getProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, ConsumerConfigConstants.DEFAULT_STREAM_TIMESTAMP_DATE_FORMAT),_					"Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream. "_						+ "Must be a valid format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX or non-negative double value. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480 .")__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_BASE,_			"Invalid value given for describe stream operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_MAX,_			"Invalid value given for describe stream operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for describe stream operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,if,initial,position,value,of,init,pos,type,initial,position,if,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,please,set,value,for,initial,timestamp,consumer,config,constants,when,using,initial,position,validate,optional,date,property,config,consumer,config,constants,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,initial,timestamp,for,initial,position,in,stream,must,be,a,valid,format,yyyy,mm,dd,t,hh,mm,ss,sssxxx,or,non,negative,double,value,for,example,2016,04,04t19,58,46,480,00,00,or,1459799926,480,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1506073434;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}__			_			if (InitialPosition.valueOf(initPosType) == InitialPosition.AT_TIMESTAMP) {_				if (!config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP)) {_					throw new IllegalArgumentException("Please set value for initial timestamp ('"_						+ ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.")__				}_				validateOptionalDateProperty(config,_					ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP,_					config.getProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, ConsumerConfigConstants.DEFAULT_STREAM_TIMESTAMP_DATE_FORMAT),_					"Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream. "_						+ "Must be a valid format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX or non-negative double value. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480 .")__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_BASE,_			"Invalid value given for describe stream operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_MAX,_			"Invalid value given for describe stream operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for describe stream operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,if,initial,position,value,of,init,pos,type,initial,position,if,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,please,set,value,for,initial,timestamp,consumer,config,constants,when,using,initial,position,validate,optional,date,property,config,consumer,config,constants,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,initial,timestamp,for,initial,position,in,stream,must,be,a,valid,format,yyyy,mm,dd,t,hh,mm,ss,sssxxx,or,non,negative,double,value,for,example,2016,04,04t19,58,46,480,00,00,or,1459799926,480,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1512029052;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}__			_			if (InitialPosition.valueOf(initPosType) == InitialPosition.AT_TIMESTAMP) {_				if (!config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP)) {_					throw new IllegalArgumentException("Please set value for initial timestamp ('"_						+ ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.")__				}_				validateOptionalDateProperty(config,_					ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP,_					config.getProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, ConsumerConfigConstants.DEFAULT_STREAM_TIMESTAMP_DATE_FORMAT),_					"Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream. "_						+ "Must be a valid format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX or non-negative double value. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480 .")__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_BASE,_			"Invalid value given for describe stream operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_MAX,_			"Invalid value given for describe stream operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for describe stream operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,if,initial,position,value,of,init,pos,type,initial,position,if,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,please,set,value,for,initial,timestamp,consumer,config,constants,when,using,initial,position,validate,optional,date,property,config,consumer,config,constants,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,initial,timestamp,for,initial,position,in,stream,must,be,a,valid,format,yyyy,mm,dd,t,hh,mm,ss,sssxxx,or,non,negative,double,value,for,example,2016,04,04t19,58,46,480,00,00,or,1459799926,480,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1513571244;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}__			_			if (InitialPosition.valueOf(initPosType) == InitialPosition.AT_TIMESTAMP) {_				if (!config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP)) {_					throw new IllegalArgumentException("Please set value for initial timestamp ('"_						+ ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.")__				}_				validateOptionalDateProperty(config,_					ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP,_					config.getProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, ConsumerConfigConstants.DEFAULT_STREAM_TIMESTAMP_DATE_FORMAT),_					"Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream. "_						+ "Must be a valid format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX or non-negative double value. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480 .")__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_BASE,_			"Invalid value given for describe stream operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_MAX,_			"Invalid value given for describe stream operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for describe stream operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,if,initial,position,value,of,init,pos,type,initial,position,if,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,please,set,value,for,initial,timestamp,consumer,config,constants,when,using,initial,position,validate,optional,date,property,config,consumer,config,constants,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,initial,timestamp,for,initial,position,in,stream,must,be,a,valid,format,yyyy,mm,dd,t,hh,mm,ss,sssxxx,or,non,negative,double,value,for,example,2016,04,04t19,58,46,480,00,00,or,1459799926,480,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1515757408;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}__			_			if (InitialPosition.valueOf(initPosType) == InitialPosition.AT_TIMESTAMP) {_				if (!config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP)) {_					throw new IllegalArgumentException("Please set value for initial timestamp ('"_						+ ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.")__				}_				validateOptionalDateProperty(config,_					ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP,_					config.getProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, ConsumerConfigConstants.DEFAULT_STREAM_TIMESTAMP_DATE_FORMAT),_					"Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream. "_						+ "Must be a valid format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX or non-negative double value. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480 .")__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_BASE,_			"Invalid value given for describe stream operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_MAX,_			"Invalid value given for describe stream operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for describe stream operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,if,initial,position,value,of,init,pos,type,initial,position,if,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,please,set,value,for,initial,timestamp,consumer,config,constants,when,using,initial,position,validate,optional,date,property,config,consumer,config,constants,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,initial,timestamp,for,initial,position,in,stream,must,be,a,valid,format,yyyy,mm,dd,t,hh,mm,ss,sssxxx,or,non,negative,double,value,for,example,2016,04,04t19,58,46,480,00,00,or,1459799926,480,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1527029910;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}__			_			if (InitialPosition.valueOf(initPosType) == InitialPosition.AT_TIMESTAMP) {_				if (!config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP)) {_					throw new IllegalArgumentException("Please set value for initial timestamp ('"_						+ ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.")__				}_				validateOptionalDateProperty(config,_					ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP,_					config.getProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, ConsumerConfigConstants.DEFAULT_STREAM_TIMESTAMP_DATE_FORMAT),_					"Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream. "_						+ "Must be a valid format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX or non-negative double value. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480 .")__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_BASE,_			"Invalid value given for describe stream operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_MAX,_			"Invalid value given for describe stream operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.STREAM_DESCRIBE_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for describe stream operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,if,initial,position,value,of,init,pos,type,initial,position,if,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,please,set,value,for,initial,timestamp,consumer,config,constants,when,using,initial,position,validate,optional,date,property,config,consumer,config,constants,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,initial,timestamp,for,initial,position,in,stream,must,be,a,valid,format,yyyy,mm,dd,t,hh,mm,ss,sssxxx,or,non,negative,double,value,for,example,2016,04,04t19,58,46,480,00,00,or,1459799926,480,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,describe,stream,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1529652657;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}__			_			if (InitialPosition.valueOf(initPosType) == InitialPosition.AT_TIMESTAMP) {_				if (!config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP)) {_					throw new IllegalArgumentException("Please set value for initial timestamp ('"_						+ ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.")__				}_				validateOptionalDateProperty(config,_					ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP,_					config.getProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, ConsumerConfigConstants.DEFAULT_STREAM_TIMESTAMP_DATE_FORMAT),_					"Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream. "_						+ "Must be a valid format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX or non-negative double value. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480 .")__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.LIST_SHARDS_BACKOFF_BASE,_			"Invalid value given for list shards operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.LIST_SHARDS_BACKOFF_MAX,_			"Invalid value given for list shards operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.LIST_SHARDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for list shards operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,if,initial,position,value,of,init,pos,type,initial,position,if,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,please,set,value,for,initial,timestamp,consumer,config,constants,when,using,initial,position,validate,optional,date,property,config,consumer,config,constants,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,initial,timestamp,for,initial,position,in,stream,must,be,a,valid,format,yyyy,mm,dd,t,hh,mm,ss,sssxxx,or,non,negative,double,value,for,example,2016,04,04t19,58,46,480,00,00,or,1459799926,480,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,list,shards,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,list,shards,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,list,shards,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1539162614;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (!(config.containsKey(AWSConfigConstants.AWS_REGION) ^ config.containsKey(ConsumerConfigConstants.AWS_ENDPOINT))) {_			_			throw new IllegalArgumentException(String.format("For FlinkKinesisConsumer either AWS region ('%s') or AWS endpoint ('%s') must be set in the config.",_					AWSConfigConstants.AWS_REGION, AWSConfigConstants.AWS_ENDPOINT))__		}__		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}__			_			if (InitialPosition.valueOf(initPosType) == InitialPosition.AT_TIMESTAMP) {_				if (!config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP)) {_					throw new IllegalArgumentException("Please set value for initial timestamp ('"_						+ ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.")__				}_				validateOptionalDateProperty(config,_					ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP,_					config.getProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, ConsumerConfigConstants.DEFAULT_STREAM_TIMESTAMP_DATE_FORMAT),_					"Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream. "_						+ "Must be a valid format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX or non-negative double value. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480 .")__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.LIST_SHARDS_BACKOFF_BASE,_			"Invalid value given for list shards operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.LIST_SHARDS_BACKOFF_MAX,_			"Invalid value given for list shards operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.LIST_SHARDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for list shards operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,awsconfig,constants,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,string,format,for,flink,kinesis,consumer,either,aws,region,s,or,aws,endpoint,s,must,be,set,in,the,config,awsconfig,constants,awsconfig,constants,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,if,initial,position,value,of,init,pos,type,initial,position,if,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,please,set,value,for,initial,timestamp,consumer,config,constants,when,using,initial,position,validate,optional,date,property,config,consumer,config,constants,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,initial,timestamp,for,initial,position,in,stream,must,be,a,valid,format,yyyy,mm,dd,t,hh,mm,ss,sssxxx,or,non,negative,double,value,for,example,2016,04,04t19,58,46,480,00,00,or,1459799926,480,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,list,shards,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,list,shards,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,list,shards,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
KinesisConfigUtil -> public static void validateConsumerConfiguration(Properties config);1545495597;Validate configuration properties for {@link FlinkKinesisConsumer}.;public static void validateConsumerConfiguration(Properties config) {_		checkNotNull(config, "config can not be null")___		validateAwsConfiguration(config)___		if (!(config.containsKey(AWSConfigConstants.AWS_REGION) ^ config.containsKey(ConsumerConfigConstants.AWS_ENDPOINT))) {_			_			throw new IllegalArgumentException(String.format("For FlinkKinesisConsumer either AWS region ('%s') or AWS endpoint ('%s') must be set in the config.",_					AWSConfigConstants.AWS_REGION, AWSConfigConstants.AWS_ENDPOINT))__		}__		if (config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_POSITION)) {_			String initPosType = config.getProperty(ConsumerConfigConstants.STREAM_INITIAL_POSITION)___			_			try {_				InitialPosition.valueOf(initPosType)__			} catch (IllegalArgumentException e) {_				StringBuilder sb = new StringBuilder()__				for (InitialPosition pos : InitialPosition.values()) {_					sb.append(pos.toString()).append(", ")__				}_				throw new IllegalArgumentException("Invalid initial position in stream set in config. Valid values are: " + sb.toString())__			}__			_			if (InitialPosition.valueOf(initPosType) == InitialPosition.AT_TIMESTAMP) {_				if (!config.containsKey(ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP)) {_					throw new IllegalArgumentException("Please set value for initial timestamp ('"_						+ ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP + "') when using AT_TIMESTAMP initial position.")__				}_				validateOptionalDateProperty(config,_					ConsumerConfigConstants.STREAM_INITIAL_TIMESTAMP,_					config.getProperty(ConsumerConfigConstants.STREAM_TIMESTAMP_DATE_FORMAT, ConsumerConfigConstants.DEFAULT_STREAM_TIMESTAMP_DATE_FORMAT),_					"Invalid value given for initial timestamp for AT_TIMESTAMP initial position in stream. "_						+ "Must be a valid format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX or non-negative double value. For example, 2016-04-04T19:58:46.480-00:00 or 1459799926.480 .")__			}_		}__		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_MAX,_			"Invalid value given for maximum records per getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_RETRIES,_			"Invalid value given for maximum retry attempts for getRecords shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_BASE,_			"Invalid value given for get records operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_MAX,_			"Invalid value given for get records operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get records operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS,_			"Invalid value given for getRecords sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveIntProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_RETRIES,_			"Invalid value given for maximum retry attempts for getShardIterator shard operation. Must be a valid non-negative integer value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_BASE,_			"Invalid value given for get shard iterator operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_MAX,_			"Invalid value given for get shard iterator operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.SHARD_GETITERATOR_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for get shard iterator operation backoff exponential constant. Must be a valid non-negative double value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.SHARD_DISCOVERY_INTERVAL_MILLIS,_			"Invalid value given for shard discovery sleep interval in milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.LIST_SHARDS_BACKOFF_BASE,_			"Invalid value given for list shards operation base backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveLongProperty(config, ConsumerConfigConstants.LIST_SHARDS_BACKOFF_MAX,_			"Invalid value given for list shards operation max backoff milliseconds. Must be a valid non-negative long value.")___		validateOptionalPositiveDoubleProperty(config, ConsumerConfigConstants.LIST_SHARDS_BACKOFF_EXPONENTIAL_CONSTANT,_			"Invalid value given for list shards operation backoff exponential constant. Must be a valid non-negative double value.")___		if (config.containsKey(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS)) {_			checkArgument(_				Long.parseLong(config.getProperty(ConsumerConfigConstants.SHARD_GETRECORDS_INTERVAL_MILLIS))_					< ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS,_				"Invalid value given for getRecords sleep interval in milliseconds. Must be lower than " +_					ConsumerConfigConstants.MAX_SHARD_GETRECORDS_INTERVAL_MILLIS + " milliseconds."_			)__		}_	};validate,configuration,properties,for,link,flink,kinesis,consumer;public,static,void,validate,consumer,configuration,properties,config,check,not,null,config,config,can,not,be,null,validate,aws,configuration,config,if,config,contains,key,awsconfig,constants,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,string,format,for,flink,kinesis,consumer,either,aws,region,s,or,aws,endpoint,s,must,be,set,in,the,config,awsconfig,constants,awsconfig,constants,if,config,contains,key,consumer,config,constants,string,init,pos,type,config,get,property,consumer,config,constants,try,initial,position,value,of,init,pos,type,catch,illegal,argument,exception,e,string,builder,sb,new,string,builder,for,initial,position,pos,initial,position,values,sb,append,pos,to,string,append,throw,new,illegal,argument,exception,invalid,initial,position,in,stream,set,in,config,valid,values,are,sb,to,string,if,initial,position,value,of,init,pos,type,initial,position,if,config,contains,key,consumer,config,constants,throw,new,illegal,argument,exception,please,set,value,for,initial,timestamp,consumer,config,constants,when,using,initial,position,validate,optional,date,property,config,consumer,config,constants,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,initial,timestamp,for,initial,position,in,stream,must,be,a,valid,format,yyyy,mm,dd,t,hh,mm,ss,sssxxx,or,non,negative,double,value,for,example,2016,04,04t19,58,46,480,00,00,or,1459799926,480,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,records,per,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,records,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,records,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,int,property,config,consumer,config,constants,invalid,value,given,for,maximum,retry,attempts,for,get,shard,iterator,shard,operation,must,be,a,valid,non,negative,integer,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,get,shard,iterator,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,shard,discovery,sleep,interval,in,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,list,shards,operation,base,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,long,property,config,consumer,config,constants,invalid,value,given,for,list,shards,operation,max,backoff,milliseconds,must,be,a,valid,non,negative,long,value,validate,optional,positive,double,property,config,consumer,config,constants,invalid,value,given,for,list,shards,operation,backoff,exponential,constant,must,be,a,valid,non,negative,double,value,if,config,contains,key,consumer,config,constants,check,argument,long,parse,long,config,get,property,consumer,config,constants,consumer,config,constants,invalid,value,given,for,get,records,sleep,interval,in,milliseconds,must,be,lower,than,consumer,config,constants,milliseconds
