commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Creates a DynamoDB streams proxy.  *  * @param configProps configuration properties  * @return the created DynamoDB streams proxy  */ ;/**  * Creates a DynamoDB streams proxy.  *  * @param configProps configuration properties  * @return the created DynamoDB streams proxy  */ public static KinesisProxyInterface create(Properties configProps) {     return new DynamoDBStreamsProxy(configProps). }
true;protected;1;24;/**  * Creates an AmazonDynamoDBStreamsAdapterClient.  * Uses it as the internal client interacting with the DynamoDB streams.  *  * @param configProps configuration properties  * @return an AWS DynamoDB streams adapter client  */ ;/**  * Creates an AmazonDynamoDBStreamsAdapterClient.  * Uses it as the internal client interacting with the DynamoDB streams.  *  * @param configProps configuration properties  * @return an AWS DynamoDB streams adapter client  */ @Override protected AmazonKinesis createKinesisClient(Properties configProps) {     ClientConfiguration awsClientConfig = new ClientConfigurationFactory().getConfig().     setAwsClientConfigProperties(awsClientConfig, configProps).     AWSCredentialsProvider credentials = getCredentialsProvider(configProps).     awsClientConfig.setUserAgentPrefix(String.format(USER_AGENT_FORMAT, EnvironmentInformation.getVersion(), EnvironmentInformation.getRevisionInformation().commitId)).     AmazonDynamoDBStreamsAdapterClient adapterClient = new AmazonDynamoDBStreamsAdapterClient(credentials, awsClientConfig).     if (configProps.containsKey(AWS_ENDPOINT)) {         adapterClient.setEndpoint(configProps.getProperty(AWS_ENDPOINT)).     } else {         adapterClient.setRegion(Region.getRegion(Regions.fromName(configProps.getProperty(AWS_REGION)))).     }     return adapterClient. }
false;public;1;13;;@Override public GetShardListResult getShardList(Map<String, String> streamNamesWithLastSeenShardIds) throws InterruptedException {     GetShardListResult result = new GetShardListResult().     for (Map.Entry<String, String> streamNameWithLastSeenShardId : streamNamesWithLastSeenShardIds.entrySet()) {         String stream = streamNameWithLastSeenShardId.getKey().         String lastSeenShardId = streamNameWithLastSeenShardId.getValue().         result.addRetrievedShardsToStream(stream, getShardsOfStream(stream, lastSeenShardId)).     }     return result. }
false;private;2;21;;private List<StreamShardHandle> getShardsOfStream(String streamName, @Nullable String lastSeenShardId) throws InterruptedException {     List<StreamShardHandle> shardsOfStream = new ArrayList<>().     DescribeStreamResult describeStreamResult.     do {         describeStreamResult = describeStream(streamName, lastSeenShardId).         List<Shard> shards = describeStreamResult.getStreamDescription().getShards().         for (Shard shard : shards) {             shardsOfStream.add(new StreamShardHandle(streamName, shard)).         }         if (shards.size() != 0) {             lastSeenShardId = shards.get(shards.size() - 1).getShardId().         }     } while (describeStreamResult.getStreamDescription().isHasMoreShards()).     return shardsOfStream. }
