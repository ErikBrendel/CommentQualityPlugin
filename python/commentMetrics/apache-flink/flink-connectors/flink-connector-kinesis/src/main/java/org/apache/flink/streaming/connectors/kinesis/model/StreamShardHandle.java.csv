commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getStreamName() {     return streamName. }
false;public;0;3;;public boolean isClosed() {     return (shard.getSequenceNumberRange().getEndingSequenceNumber() != null). }
false;public;0;3;;public Shard getShard() {     return shard. }
false;public;0;6;;@Override public String toString() {     return "StreamShardHandle{" + "streamName='" + streamName + "'" + ", shard='" + shard.toString() + "'}". }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (!(obj instanceof StreamShardHandle)) {         return false.     }     if (obj == this) {         return true.     }     StreamShardHandle other = (StreamShardHandle) obj.     return streamName.equals(other.getStreamName()) && shard.equals(other.getShard()). }
false;public;0;4;;@Override public int hashCode() {     return cachedHash. }
true;public,static;2;3;/**  * Utility function to compare two shard ids.  *  * @param firstShardId first shard id to compare  * @param secondShardId second shard id to compare  * @return a value less than 0 if the first shard id is smaller than the second shard id,  *         or a value larger than 0 the first shard is larger than the second shard id,  *         or 0 if they are equal  */ ;/**  * Utility function to compare two shard ids.  *  * @param firstShardId first shard id to compare  * @param secondShardId second shard id to compare  * @return a value less than 0 if the first shard id is smaller than the second shard id,  *         or a value larger than 0 the first shard is larger than the second shard id,  *         or 0 if they are equal  */ public static int compareShardIds(String firstShardId, String secondShardId) {     return firstShardId.compareTo(secondShardId). }
