commented;modifiers;parameterAmount;loc;comment;code
false;public;1;27;;@Override public TransportClient createClient(Map<String, String> clientConfig) {     Settings settings = Settings.builder().put(clientConfig).put(NetworkModule.HTTP_TYPE_KEY, Netty3Plugin.NETTY_HTTP_TRANSPORT_NAME).put(NetworkModule.TRANSPORT_TYPE_KEY, Netty3Plugin.NETTY_TRANSPORT_NAME).build().     TransportClient transportClient = new PreBuiltTransportClient(settings).     for (TransportAddress transport : ElasticsearchUtils.convertInetSocketAddresses(transportAddresses)) {         transportClient.addTransportAddress(transport).     }     // verify that we actually are connected to a cluster     if (transportClient.connectedNodes().isEmpty()) {         // close the transportClient here         IOUtils.closeQuietly(transportClient).         throw new RuntimeException("Elasticsearch client is not connected to any Elasticsearch nodes!").     }     if (LOG.isInfoEnabled()) {         LOG.info("Created Elasticsearch TransportClient with connected nodes {}", transportClient.connectedNodes()).     }     return transportClient. }
false;public;2;4;;@Override public BulkProcessor.Builder createBulkProcessorBuilder(TransportClient client, BulkProcessor.Listener listener) {     return BulkProcessor.builder(client, listener). }
false;public;1;8;;@Override public Throwable extractFailureCauseFromBulkItemResponse(BulkItemResponse bulkItemResponse) {     if (!bulkItemResponse.isFailed()) {         return null.     } else {         return bulkItemResponse.getFailure().getCause().     } }
false;public;2;25;;@Override public void configureBulkProcessorBackoff(BulkProcessor.Builder builder, @Nullable ElasticsearchSinkBase.BulkFlushBackoffPolicy flushBackoffPolicy) {     BackoffPolicy backoffPolicy.     if (flushBackoffPolicy != null) {         switch(flushBackoffPolicy.getBackoffType()) {             case CONSTANT:                 backoffPolicy = BackoffPolicy.constantBackoff(new TimeValue(flushBackoffPolicy.getDelayMillis()), flushBackoffPolicy.getMaxRetryCount()).                 break.             case EXPONENTIAL:             default:                 backoffPolicy = BackoffPolicy.exponentialBackoff(new TimeValue(flushBackoffPolicy.getDelayMillis()), flushBackoffPolicy.getMaxRetryCount()).         }     } else {         backoffPolicy = BackoffPolicy.noBackoff().     }     builder.setBackoffPolicy(backoffPolicy). }
