commented;modifiers;parameterAmount;loc;comment;code
false;public;1;21;;@Override public RestHighLevelClient createClient(Map<String, String> clientConfig) throws IOException {     RestClientBuilder builder = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).     restClientFactory.configureRestClientBuilder(builder).     RestHighLevelClient rhlClient = new RestHighLevelClient(builder).     if (LOG.isInfoEnabled()) {         LOG.info("Pinging Elasticsearch cluster via hosts {} ...", httpHosts).     }     if (!rhlClient.ping()) {         throw new RuntimeException("There are no reachable Elasticsearch nodes!").     }     if (LOG.isInfoEnabled()) {         LOG.info("Created Elasticsearch RestHighLevelClient connected to {}", httpHosts.toString()).     }     return rhlClient. }
false;public;2;4;;@Override public BulkProcessor.Builder createBulkProcessorBuilder(RestHighLevelClient client, BulkProcessor.Listener listener) {     return BulkProcessor.builder(client::bulkAsync, listener). }
false;public;1;8;;@Override public Throwable extractFailureCauseFromBulkItemResponse(BulkItemResponse bulkItemResponse) {     if (!bulkItemResponse.isFailed()) {         return null.     } else {         return bulkItemResponse.getFailure().getCause().     } }
false;public;2;25;;@Override public void configureBulkProcessorBackoff(BulkProcessor.Builder builder, @Nullable ElasticsearchSinkBase.BulkFlushBackoffPolicy flushBackoffPolicy) {     BackoffPolicy backoffPolicy.     if (flushBackoffPolicy != null) {         switch(flushBackoffPolicy.getBackoffType()) {             case CONSTANT:                 backoffPolicy = BackoffPolicy.constantBackoff(new TimeValue(flushBackoffPolicy.getDelayMillis()), flushBackoffPolicy.getMaxRetryCount()).                 break.             case EXPONENTIAL:             default:                 backoffPolicy = BackoffPolicy.exponentialBackoff(new TimeValue(flushBackoffPolicy.getDelayMillis()), flushBackoffPolicy.getMaxRetryCount()).         }     } else {         backoffPolicy = BackoffPolicy.noBackoff().     }     builder.setBackoffPolicy(backoffPolicy). }
false;public;3;10;;@Override public RequestIndexer createBulkProcessorIndexer(BulkProcessor bulkProcessor, boolean flushOnCheckpoint, AtomicLong numPendingRequestsRef) {     return new Elasticsearch6BulkProcessorIndexer(bulkProcessor, flushOnCheckpoint, numPendingRequestsRef). }
