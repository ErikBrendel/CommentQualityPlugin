commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Sets the maximum number of actions to buffer for each bulk request.  *  * @param numMaxActions the maxinum number of actions to buffer per bulk request.  */ ;/**  * Sets the maximum number of actions to buffer for each bulk request.  *  * @param numMaxActions the maxinum number of actions to buffer per bulk request.  */ public void setBulkFlushMaxActions(int numMaxActions) {     Preconditions.checkArgument(numMaxActions > 0, "Max number of buffered actions must be larger than 0.").     this.bulkRequestsConfig.put(CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, String.valueOf(numMaxActions)). }
true;public;1;7;/**  * Sets the maximum size of buffered actions, in mb, per bulk request.  *  * @param maxSizeMb the maximum size of buffered actions, in mb.  */ ;/**  * Sets the maximum size of buffered actions, in mb, per bulk request.  *  * @param maxSizeMb the maximum size of buffered actions, in mb.  */ public void setBulkFlushMaxSizeMb(int maxSizeMb) {     Preconditions.checkArgument(maxSizeMb > 0, "Max size of buffered actions must be larger than 0.").     this.bulkRequestsConfig.put(CONFIG_KEY_BULK_FLUSH_MAX_SIZE_MB, String.valueOf(maxSizeMb)). }
true;public;1;7;/**  * Sets the bulk flush interval, in milliseconds.  *  * @param intervalMillis the bulk flush interval, in milliseconds.  */ ;/**  * Sets the bulk flush interval, in milliseconds.  *  * @param intervalMillis the bulk flush interval, in milliseconds.  */ public void setBulkFlushInterval(long intervalMillis) {     Preconditions.checkArgument(intervalMillis >= 0, "Interval (in milliseconds) between each flush must be larger than or equal to 0.").     this.bulkRequestsConfig.put(CONFIG_KEY_BULK_FLUSH_INTERVAL_MS, String.valueOf(intervalMillis)). }
true;public;1;3;/**  * Sets whether or not to enable bulk flush backoff behaviour.  *  * @param enabled whether or not to enable backoffs.  */ ;/**  * Sets whether or not to enable bulk flush backoff behaviour.  *  * @param enabled whether or not to enable backoffs.  */ public void setBulkFlushBackoff(boolean enabled) {     this.bulkRequestsConfig.put(CONFIG_KEY_BULK_FLUSH_BACKOFF_ENABLE, String.valueOf(enabled)). }
true;public;1;5;/**  * Sets the type of back of to use when flushing bulk requests.  *  * @param flushBackoffType the backoff type to use.  */ ;/**  * Sets the type of back of to use when flushing bulk requests.  *  * @param flushBackoffType the backoff type to use.  */ public void setBulkFlushBackoffType(FlushBackoffType flushBackoffType) {     this.bulkRequestsConfig.put(CONFIG_KEY_BULK_FLUSH_BACKOFF_TYPE, Preconditions.checkNotNull(flushBackoffType).toString()). }
true;public;1;7;/**  * Sets the maximum number of retries for a backoff attempt when flushing bulk requests.  *  * @param maxRetries the maximum number of retries for a backoff attempt when flushing bulk requests  */ ;/**  * Sets the maximum number of retries for a backoff attempt when flushing bulk requests.  *  * @param maxRetries the maximum number of retries for a backoff attempt when flushing bulk requests  */ public void setBulkFlushBackoffRetries(int maxRetries) {     Preconditions.checkArgument(maxRetries > 0, "Max number of backoff attempts must be larger than 0.").     this.bulkRequestsConfig.put(CONFIG_KEY_BULK_FLUSH_BACKOFF_RETRIES, String.valueOf(maxRetries)). }
true;public;1;6;/**  * Sets the amount of delay between each backoff attempt when flushing bulk requests, in milliseconds.  *  * @param delayMillis the amount of delay between each backoff attempt when flushing bulk requests, in milliseconds.  */ ;/**  * Sets the amount of delay between each backoff attempt when flushing bulk requests, in milliseconds.  *  * @param delayMillis the amount of delay between each backoff attempt when flushing bulk requests, in milliseconds.  */ public void setBulkFlushBackoffDelay(long delayMillis) {     Preconditions.checkArgument(delayMillis >= 0, "Delay (in milliseconds) between each backoff attempt must be larger than or equal to 0.").     this.bulkRequestsConfig.put(CONFIG_KEY_BULK_FLUSH_BACKOFF_DELAY, String.valueOf(delayMillis)). }
true;public;1;3;/**  * Sets a failure handler for action requests.  *  * @param failureHandler This is used to handle failed {@link ActionRequest}.  */ ;/**  * Sets a failure handler for action requests.  *  * @param failureHandler This is used to handle failed {@link ActionRequest}.  */ public void setFailureHandler(ActionRequestFailureHandler failureHandler) {     this.failureHandler = Preconditions.checkNotNull(failureHandler). }
true;public;1;3;/**  * Sets a REST client factory for custom client configuration.  *  * @param restClientFactory the factory that configures the rest client.  */ ;/**  * Sets a REST client factory for custom client configuration.  *  * @param restClientFactory the factory that configures the rest client.  */ public void setRestClientFactory(RestClientFactory restClientFactory) {     this.restClientFactory = Preconditions.checkNotNull(restClientFactory). }
true;public;0;3;/**  * Creates the Elasticsearch sink.  *  * @return the created Elasticsearch sink.  */ ;/**  * Creates the Elasticsearch sink.  *  * @return the created Elasticsearch sink.  */ public ElasticsearchSink<T> build() {     return new ElasticsearchSink<>(bulkRequestsConfig, httpHosts, elasticsearchSinkFunction, failureHandler, restClientFactory). }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     Builder<?> builder = (Builder<?>) o.     return Objects.equals(httpHosts, builder.httpHosts) && Objects.equals(elasticsearchSinkFunction, builder.elasticsearchSinkFunction) && Objects.equals(bulkRequestsConfig, builder.bulkRequestsConfig) && Objects.equals(failureHandler, builder.failureHandler) && Objects.equals(restClientFactory, builder.restClientFactory). }
false;public;0;9;;@Override public int hashCode() {     return Objects.hash(httpHosts, elasticsearchSinkFunction, bulkRequestsConfig, failureHandler, restClientFactory). }
