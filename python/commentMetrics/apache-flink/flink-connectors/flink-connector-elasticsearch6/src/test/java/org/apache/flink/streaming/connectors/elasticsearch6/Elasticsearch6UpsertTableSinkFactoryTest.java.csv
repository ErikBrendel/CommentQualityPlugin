commented;modifiers;parameterAmount;loc;comment;code
false;public;0;46;;@Test public void testBuilder() {     final TableSchema schema = createTestSchema().     final TestElasticsearch6UpsertTableSink testSink = new TestElasticsearch6UpsertTableSink(false, schema, Collections.singletonList(new Host(HOSTNAME, PORT, SCHEMA)), INDEX, DOC_TYPE, KEY_DELIMITER, KEY_NULL_LITERAL, new JsonRowSerializationSchema(schema.toRowType()), XContentType.JSON, new DummyFailureHandler(), createTestSinkOptions()).     final DataStreamMock dataStreamMock = new DataStreamMock(new StreamExecutionEnvironmentMock(), Types.TUPLE(Types.BOOLEAN, schema.toRowType())).     testSink.emitDataStream(dataStreamMock).     final ElasticsearchSink.Builder<Tuple2<Boolean, Row>> expectedBuilder = new ElasticsearchSink.Builder<>(Collections.singletonList(new HttpHost(HOSTNAME, PORT, SCHEMA)), new ElasticsearchUpsertSinkFunction(INDEX, DOC_TYPE, KEY_DELIMITER, KEY_NULL_LITERAL, new JsonRowSerializationSchema(schema.toRowType()), XContentType.JSON, Elasticsearch6UpsertTableSink.UPDATE_REQUEST_FACTORY, new int[0])).     expectedBuilder.setFailureHandler(new DummyFailureHandler()).     expectedBuilder.setBulkFlushBackoff(true).     expectedBuilder.setBulkFlushBackoffType(ElasticsearchSinkBase.FlushBackoffType.EXPONENTIAL).     expectedBuilder.setBulkFlushBackoffDelay(123).     expectedBuilder.setBulkFlushBackoffRetries(3).     expectedBuilder.setBulkFlushInterval(100).     expectedBuilder.setBulkFlushMaxActions(1000).     expectedBuilder.setBulkFlushMaxSizeMb(1).     expectedBuilder.setRestClientFactory(new DefaultRestClientFactory(100, "/myapp")).     assertEquals(expectedBuilder, testSink.builder). }
false;protected;0;4;;@Override protected String getElasticsearchVersion() {     return CONNECTOR_VERSION_VALUE_6. }
false;protected;11;26;;@Override protected ElasticsearchUpsertTableSinkBase getExpectedTableSink(boolean isAppendOnly, TableSchema schema, List<Host> hosts, String index, String docType, String keyDelimiter, String keyNullLiteral, SerializationSchema<Row> serializationSchema, XContentType contentType, ActionRequestFailureHandler failureHandler, Map<SinkOption, String> sinkOptions) {     return new Elasticsearch6UpsertTableSink(isAppendOnly, schema, hosts, index, docType, keyDelimiter, keyNullLiteral, serializationSchema, contentType, failureHandler, sinkOptions). }
false;protected;2;7;;@Override protected ElasticsearchSink.Builder<Tuple2<Boolean, Row>> createBuilder(ElasticsearchUpsertSinkFunction upsertSinkFunction, List<HttpHost> httpHosts) {     builder = super.createBuilder(upsertSinkFunction, httpHosts).     return builder. }
false;public;1;4;;@Override public JobExecutionResult execute(String jobName) {     throw new UnsupportedOperationException(). }
false;public;1;5;;@Override public DataStreamSink<Tuple2<Boolean, Row>> addSink(SinkFunction<Tuple2<Boolean, Row>> sinkFunction) {     this.sinkFunction = sinkFunction.     return super.addSink(sinkFunction). }
false;public;1;4;;@Override public void setChainingStrategy(ChainingStrategy strategy) { // do nothing }
false;public;0;4;;@Override public Collection<StreamTransformation<?>> getTransitivePredecessors() {     return null. }
