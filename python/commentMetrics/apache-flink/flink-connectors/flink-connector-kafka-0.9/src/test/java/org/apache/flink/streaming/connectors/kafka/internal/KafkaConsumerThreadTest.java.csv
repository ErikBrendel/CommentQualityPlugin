# id;timestamp;commentText;codeText;commentWords;codeWords
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenWakeupMidway() throws Exception;1498894422;Tests reassignment works correctly in the case when:_- the consumer has no initial assignments_- new unassigned partitions have undefined offsets_- the consumer was woken up during the reassignment__<p>In this case, reassignment should have completed, and the consumer is restored the wakeup call after the reassignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenWakeupMidway() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		_		final OneShotLatch midAssignmentLatch = new OneShotLatch()__		final OneShotLatch continueAssigmentLatch = new OneShotLatch()___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				midAssignmentLatch,_				continueAssigmentLatch)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()___		_		midAssignmentLatch.await()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>())___		_		verify(mockConsumer, never()).wakeup()___		continueAssigmentLatch.trigger()___		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_				newPartition.getOffset() + 1,_				mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		_		verify(mockConsumer, times(1)).wakeup()___		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,has,no,initial,assignments,new,unassigned,partitions,have,undefined,offsets,the,consumer,was,woken,up,during,the,reassignment,p,in,this,case,reassignment,should,have,completed,and,the,consumer,is,restored,the,wakeup,call,after,the,reassignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassign,partitions,defined,offsets,without,initial,assignments,when,wakeup,midway,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,one,shot,latch,mid,assignment,latch,new,one,shot,latch,final,one,shot,latch,continue,assigment,latch,new,one,shot,latch,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,mid,assignment,latch,continue,assigment,latch,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,mid,assignment,latch,await,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,verify,mock,consumer,never,wakeup,continue,assigment,latch,trigger,test,thread,wait,partition,reassignment,complete,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,verify,mock,consumer,times,1,wakeup,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenWakeupMidway() throws Exception;1500818418;Tests reassignment works correctly in the case when:_- the consumer has no initial assignments_- new unassigned partitions have undefined offsets_- the consumer was woken up during the reassignment__<p>In this case, reassignment should have completed, and the consumer is restored the wakeup call after the reassignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenWakeupMidway() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		_		final OneShotLatch midAssignmentLatch = new OneShotLatch()__		final OneShotLatch continueAssigmentLatch = new OneShotLatch()___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				midAssignmentLatch,_				continueAssigmentLatch)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()___		_		midAssignmentLatch.await()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>())___		_		verify(mockConsumer, never()).wakeup()___		continueAssigmentLatch.trigger()___		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_				newPartition.getOffset() + 1,_				mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		_		verify(mockConsumer, times(1)).wakeup()___		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,has,no,initial,assignments,new,unassigned,partitions,have,undefined,offsets,the,consumer,was,woken,up,during,the,reassignment,p,in,this,case,reassignment,should,have,completed,and,the,consumer,is,restored,the,wakeup,call,after,the,reassignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassign,partitions,defined,offsets,without,initial,assignments,when,wakeup,midway,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,one,shot,latch,mid,assignment,latch,new,one,shot,latch,final,one,shot,latch,continue,assigment,latch,new,one,shot,latch,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,mid,assignment,latch,continue,assigment,latch,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,mid,assignment,latch,await,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,verify,mock,consumer,never,wakeup,continue,assigment,latch,trigger,test,thread,wait,partition,reassignment,complete,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,verify,mock,consumer,times,1,wakeup,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenWakeupMidway() throws Exception;1501249950;Tests reassignment works correctly in the case when:_- the consumer has no initial assignments_- new unassigned partitions have undefined offsets_- the consumer was woken up during the reassignment__<p>In this case, reassignment should have completed, and the consumer is restored the wakeup call after the reassignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenWakeupMidway() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		_		final OneShotLatch midAssignmentLatch = new OneShotLatch()__		final OneShotLatch continueAssigmentLatch = new OneShotLatch()___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				midAssignmentLatch,_				continueAssigmentLatch)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()___		_		midAssignmentLatch.await()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))___		_		verify(mockConsumer, never()).wakeup()___		continueAssigmentLatch.trigger()___		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_				newPartition.getOffset() + 1,_				mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		_		verify(mockConsumer, times(1)).wakeup()___		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,has,no,initial,assignments,new,unassigned,partitions,have,undefined,offsets,the,consumer,was,woken,up,during,the,reassignment,p,in,this,case,reassignment,should,have,completed,and,the,consumer,is,restored,the,wakeup,call,after,the,reassignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassign,partitions,defined,offsets,without,initial,assignments,when,wakeup,midway,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,one,shot,latch,mid,assignment,latch,new,one,shot,latch,final,one,shot,latch,continue,assigment,latch,new,one,shot,latch,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,mid,assignment,latch,continue,assigment,latch,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,mid,assignment,latch,await,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,never,wakeup,continue,assigment,latch,trigger,test,thread,wait,partition,reassignment,complete,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,verify,mock,consumer,times,1,wakeup,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenWakeupMidway() throws Exception;1513102156;Tests reassignment works correctly in the case when:_- the consumer has no initial assignments_- new unassigned partitions have undefined offsets_- the consumer was woken up during the reassignment__<p>In this case, reassignment should have completed, and the consumer is restored the wakeup call after the reassignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenWakeupMidway() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		_		final OneShotLatch midAssignmentLatch = new OneShotLatch()__		final OneShotLatch continueAssigmentLatch = new OneShotLatch()___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				midAssignmentLatch,_				continueAssigmentLatch)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()___		_		midAssignmentLatch.await()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))___		_		verify(mockConsumer, never()).wakeup()___		continueAssigmentLatch.trigger()___		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_				newPartition.getOffset() + 1,_				mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		_		verify(mockConsumer, times(1)).wakeup()___		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,has,no,initial,assignments,new,unassigned,partitions,have,undefined,offsets,the,consumer,was,woken,up,during,the,reassignment,p,in,this,case,reassignment,should,have,completed,and,the,consumer,is,restored,the,wakeup,call,after,the,reassignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassign,partitions,defined,offsets,without,initial,assignments,when,wakeup,midway,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,one,shot,latch,mid,assignment,latch,new,one,shot,latch,final,one,shot,latch,continue,assigment,latch,new,one,shot,latch,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,mid,assignment,latch,continue,assigment,latch,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,mid,assignment,latch,await,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,never,wakeup,continue,assigment,latch,trigger,test,thread,wait,partition,reassignment,complete,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,verify,mock,consumer,times,1,wakeup,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenWakeupMidway() throws Exception;1517943538;Tests reassignment works correctly in the case when:_- the consumer has no initial assignments_- new unassigned partitions have undefined offsets_- the consumer was woken up during the reassignment__<p>In this case, reassignment should have completed, and the consumer is restored the wakeup call after the reassignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenWakeupMidway() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		_		final OneShotLatch midAssignmentLatch = new OneShotLatch()__		final OneShotLatch continueAssigmentLatch = new OneShotLatch()___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				midAssignmentLatch,_				continueAssigmentLatch)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()___		_		midAssignmentLatch.await()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))___		_		verify(mockConsumer, never()).wakeup()___		continueAssigmentLatch.trigger()___		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_				newPartition.getOffset() + 1,_				mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		_		verify(mockConsumer, times(1)).wakeup()___		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,has,no,initial,assignments,new,unassigned,partitions,have,undefined,offsets,the,consumer,was,woken,up,during,the,reassignment,p,in,this,case,reassignment,should,have,completed,and,the,consumer,is,restored,the,wakeup,call,after,the,reassignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassign,partitions,defined,offsets,without,initial,assignments,when,wakeup,midway,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,one,shot,latch,mid,assignment,latch,new,one,shot,latch,final,one,shot,latch,continue,assigment,latch,new,one,shot,latch,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,mid,assignment,latch,continue,assigment,latch,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,mid,assignment,latch,await,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,never,wakeup,continue,assigment,latch,trigger,test,thread,wait,partition,reassignment,complete,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,verify,mock,consumer,times,1,wakeup,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenWakeupMidway() throws Exception;1538998760;Tests reassignment works correctly in the case when:_- the consumer has no initial assignments_- new unassigned partitions have undefined offsets_- the consumer was woken up during the reassignment__<p>In this case, reassignment should have completed, and the consumer is restored the wakeup call after the reassignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenWakeupMidway() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		_		final OneShotLatch midAssignmentLatch = new OneShotLatch()__		final OneShotLatch continueAssigmentLatch = new OneShotLatch()___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				midAssignmentLatch,_				continueAssigmentLatch)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()___		_		midAssignmentLatch.await()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))___		_		verify(mockConsumer, never()).wakeup()___		continueAssigmentLatch.trigger()___		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_				newPartition.getOffset() + 1,_				mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		_		verify(mockConsumer, times(1)).wakeup()___		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,has,no,initial,assignments,new,unassigned,partitions,have,undefined,offsets,the,consumer,was,woken,up,during,the,reassignment,p,in,this,case,reassignment,should,have,completed,and,the,consumer,is,restored,the,wakeup,call,after,the,reassignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassign,partitions,defined,offsets,without,initial,assignments,when,wakeup,midway,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,one,shot,latch,mid,assignment,latch,new,one,shot,latch,final,one,shot,latch,continue,assigment,latch,new,one,shot,latch,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,mid,assignment,latch,continue,assigment,latch,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,mid,assignment,latch,await,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,never,wakeup,continue,assigment,latch,trigger,test,thread,wait,partition,reassignment,complete,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,verify,mock,consumer,times,1,wakeup,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenWakeupMidway() throws Exception;1539704473;Tests reassignment works correctly in the case when:_- the consumer has no initial assignments_- new unassigned partitions have undefined offsets_- the consumer was woken up during the reassignment__<p>In this case, reassignment should have completed, and the consumer is restored the wakeup call after the reassignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenWakeupMidway() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		_		final OneShotLatch midAssignmentLatch = new OneShotLatch()__		final OneShotLatch continueAssigmentLatch = new OneShotLatch()___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				midAssignmentLatch,_				continueAssigmentLatch)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()___		_		midAssignmentLatch.await()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))___		_		verify(mockConsumer, never()).wakeup()___		continueAssigmentLatch.trigger()___		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_				newPartition.getOffset() + 1,_				mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		_		verify(mockConsumer, times(1)).wakeup()___		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,has,no,initial,assignments,new,unassigned,partitions,have,undefined,offsets,the,consumer,was,woken,up,during,the,reassignment,p,in,this,case,reassignment,should,have,completed,and,the,consumer,is,restored,the,wakeup,call,after,the,reassignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassign,partitions,defined,offsets,without,initial,assignments,when,wakeup,midway,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,one,shot,latch,mid,assignment,latch,new,one,shot,latch,final,one,shot,latch,continue,assigment,latch,new,one,shot,latch,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,mid,assignment,latch,continue,assigment,latch,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,mid,assignment,latch,await,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,never,wakeup,continue,assigment,latch,trigger,test,thread,wait,partition,reassignment,complete,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,verify,mock,consumer,times,1,wakeup,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithoutDefinedOffsetsWhenNoInitialAssignment() throws Exception;1498894422;Tests reassignment works correctly in the case when:_- the consumer initially had no assignments_- new unassigned partitions have undefined offsets (e.g. EARLIEST_OFFSET sentinel value)__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithoutDefinedOffsetsWhenNoInitialAssignment() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		final List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(mockRetrievedPositions.get(newPartition1.getKafkaPartitionHandle()) - 1, newPartition1.getOffset())__		assertEquals(mockRetrievedPositions.get(newPartition2.getKafkaPartitionHandle()) - 1, newPartition2.getOffset())___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_					newPartition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,initially,had,no,assignments,new,unassigned,partitions,have,undefined,offsets,e,g,sentinel,value,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,without,defined,offsets,when,no,initial,assignment,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,final,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,mock,retrieved,positions,get,new,partition1,get,kafka,partition,handle,1,new,partition1,get,offset,assert,equals,mock,retrieved,positions,get,new,partition2,get,kafka,partition,handle,1,new,partition2,get,offset,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithoutDefinedOffsetsWhenNoInitialAssignment() throws Exception;1500818418;Tests reassignment works correctly in the case when:_- the consumer initially had no assignments_- new unassigned partitions have undefined offsets (e.g. EARLIEST_OFFSET sentinel value)__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithoutDefinedOffsetsWhenNoInitialAssignment() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		final List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(mockRetrievedPositions.get(newPartition1.getKafkaPartitionHandle()) - 1, newPartition1.getOffset())__		assertEquals(mockRetrievedPositions.get(newPartition2.getKafkaPartitionHandle()) - 1, newPartition2.getOffset())___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_					newPartition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,initially,had,no,assignments,new,unassigned,partitions,have,undefined,offsets,e,g,sentinel,value,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,without,defined,offsets,when,no,initial,assignment,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,final,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,mock,retrieved,positions,get,new,partition1,get,kafka,partition,handle,1,new,partition1,get,offset,assert,equals,mock,retrieved,positions,get,new,partition2,get,kafka,partition,handle,1,new,partition2,get,offset,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithoutDefinedOffsetsWhenNoInitialAssignment() throws Exception;1501249950;Tests reassignment works correctly in the case when:_- the consumer initially had no assignments_- new unassigned partitions have undefined offsets (e.g. EARLIEST_OFFSET sentinel value)__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithoutDefinedOffsetsWhenNoInitialAssignment() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		final List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(mockRetrievedPositions.get(newPartition1.getKafkaPartitionHandle()) - 1, newPartition1.getOffset())__		assertEquals(mockRetrievedPositions.get(newPartition2.getKafkaPartitionHandle()) - 1, newPartition2.getOffset())___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_					newPartition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,initially,had,no,assignments,new,unassigned,partitions,have,undefined,offsets,e,g,sentinel,value,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,without,defined,offsets,when,no,initial,assignment,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,final,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,mock,retrieved,positions,get,new,partition1,get,kafka,partition,handle,1,new,partition1,get,offset,assert,equals,mock,retrieved,positions,get,new,partition2,get,kafka,partition,handle,1,new,partition2,get,offset,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithoutDefinedOffsetsWhenNoInitialAssignment() throws Exception;1513102156;Tests reassignment works correctly in the case when:_- the consumer initially had no assignments_- new unassigned partitions have undefined offsets (e.g. EARLIEST_OFFSET sentinel value)__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithoutDefinedOffsetsWhenNoInitialAssignment() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		final List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(mockRetrievedPositions.get(newPartition1.getKafkaPartitionHandle()) - 1, newPartition1.getOffset())__		assertEquals(mockRetrievedPositions.get(newPartition2.getKafkaPartitionHandle()) - 1, newPartition2.getOffset())___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_					newPartition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,initially,had,no,assignments,new,unassigned,partitions,have,undefined,offsets,e,g,sentinel,value,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,without,defined,offsets,when,no,initial,assignment,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,final,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,mock,retrieved,positions,get,new,partition1,get,kafka,partition,handle,1,new,partition1,get,offset,assert,equals,mock,retrieved,positions,get,new,partition2,get,kafka,partition,handle,1,new,partition2,get,offset,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithoutDefinedOffsetsWhenNoInitialAssignment() throws Exception;1517943538;Tests reassignment works correctly in the case when:_- the consumer initially had no assignments_- new unassigned partitions have undefined offsets (e.g. EARLIEST_OFFSET sentinel value)__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithoutDefinedOffsetsWhenNoInitialAssignment() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		final List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(mockRetrievedPositions.get(newPartition1.getKafkaPartitionHandle()) - 1, newPartition1.getOffset())__		assertEquals(mockRetrievedPositions.get(newPartition2.getKafkaPartitionHandle()) - 1, newPartition2.getOffset())___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_					newPartition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,initially,had,no,assignments,new,unassigned,partitions,have,undefined,offsets,e,g,sentinel,value,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,without,defined,offsets,when,no,initial,assignment,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,final,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,mock,retrieved,positions,get,new,partition1,get,kafka,partition,handle,1,new,partition1,get,offset,assert,equals,mock,retrieved,positions,get,new,partition2,get,kafka,partition,handle,1,new,partition2,get,offset,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithoutDefinedOffsetsWhenNoInitialAssignment() throws Exception;1538998760;Tests reassignment works correctly in the case when:_- the consumer initially had no assignments_- new unassigned partitions have undefined offsets (e.g. EARLIEST_OFFSET sentinel value)__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithoutDefinedOffsetsWhenNoInitialAssignment() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		final List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(mockRetrievedPositions.get(newPartition1.getKafkaPartitionHandle()) - 1, newPartition1.getOffset())__		assertEquals(mockRetrievedPositions.get(newPartition2.getKafkaPartitionHandle()) - 1, newPartition2.getOffset())___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_					newPartition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,initially,had,no,assignments,new,unassigned,partitions,have,undefined,offsets,e,g,sentinel,value,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,without,defined,offsets,when,no,initial,assignment,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,final,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,mock,retrieved,positions,get,new,partition1,get,kafka,partition,handle,1,new,partition1,get,offset,assert,equals,mock,retrieved,positions,get,new,partition2,get,kafka,partition,handle,1,new,partition2,get,offset,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithoutDefinedOffsetsWhenNoInitialAssignment() throws Exception;1539704473;Tests reassignment works correctly in the case when:_- the consumer initially had no assignments_- new unassigned partitions have undefined offsets (e.g. EARLIEST_OFFSET sentinel value)__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithoutDefinedOffsetsWhenNoInitialAssignment() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		final List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(mockRetrievedPositions.get(newPartition1.getKafkaPartitionHandle()) - 1, newPartition1.getOffset())__		assertEquals(mockRetrievedPositions.get(newPartition2.getKafkaPartitionHandle()) - 1, newPartition2.getOffset())___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_					newPartition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,initially,had,no,assignments,new,unassigned,partitions,have,undefined,offsets,e,g,sentinel,value,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,without,defined,offsets,when,no,initial,assignment,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,final,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,mock,retrieved,positions,get,new,partition1,get,kafka,partition,handle,1,new,partition1,get,offset,assert,equals,mock,retrieved,positions,get,new,partition2,get,kafka,partition,handle,1,new,partition2,get,offset,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsetsWhenEarlyWakeup() throws Exception;1498894422;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions already have defined offsets_- the consumer was woken up prior to the reassignment__<p>In this case, reassignment should not have occurred at all, and the consumer retains the original assignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsetsWhenEarlyWakeup() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(29L)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsToPositions = new LinkedHashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsToPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsToPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				true,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		_		testThread.waitPartitionReassignmentInvoked()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>())__		verify(mockConsumer, times(1)).wakeup()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(oldPartitions.size(), mockConsumerAssignmentsToPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			assertTrue(mockConsumerAssignmentsToPositions.containsKey(oldPartition.getKafkaPartitionHandle()))__			assertEquals(_					oldPartition.getOffset() + 1,_					mockConsumerAssignmentsToPositions.get(oldPartition.getKafkaPartitionHandle()).longValue())__		}__		_		assertEquals(1, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,already,have,defined,offsets,the,consumer,was,woken,up,prior,to,the,reassignment,p,in,this,case,reassignment,should,not,have,occurred,at,all,and,the,consumer,retains,the,original,assignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,when,early,wakeup,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,29l,final,map,topic,partition,long,mock,consumer,assignments,to,positions,new,linked,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,to,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,to,positions,collections,topic,partition,long,empty,map,true,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,wait,partition,reassignment,invoked,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,verify,mock,consumer,times,1,wakeup,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,old,partitions,size,mock,consumer,assignments,to,positions,size,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,assert,true,mock,consumer,assignments,to,positions,contains,key,old,partition,get,kafka,partition,handle,assert,equals,old,partition,get,offset,1,mock,consumer,assignments,to,positions,get,old,partition,get,kafka,partition,handle,long,value,assert,equals,1,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsetsWhenEarlyWakeup() throws Exception;1500818418;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions already have defined offsets_- the consumer was woken up prior to the reassignment__<p>In this case, reassignment should not have occurred at all, and the consumer retains the original assignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsetsWhenEarlyWakeup() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(29L)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsToPositions = new LinkedHashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsToPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsToPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				true,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		_		testThread.waitPartitionReassignmentInvoked()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>())__		verify(mockConsumer, times(1)).wakeup()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(oldPartitions.size(), mockConsumerAssignmentsToPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			assertTrue(mockConsumerAssignmentsToPositions.containsKey(oldPartition.getKafkaPartitionHandle()))__			assertEquals(_					oldPartition.getOffset() + 1,_					mockConsumerAssignmentsToPositions.get(oldPartition.getKafkaPartitionHandle()).longValue())__		}__		_		assertEquals(1, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,already,have,defined,offsets,the,consumer,was,woken,up,prior,to,the,reassignment,p,in,this,case,reassignment,should,not,have,occurred,at,all,and,the,consumer,retains,the,original,assignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,when,early,wakeup,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,29l,final,map,topic,partition,long,mock,consumer,assignments,to,positions,new,linked,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,to,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,to,positions,collections,topic,partition,long,empty,map,true,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,wait,partition,reassignment,invoked,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,verify,mock,consumer,times,1,wakeup,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,old,partitions,size,mock,consumer,assignments,to,positions,size,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,assert,true,mock,consumer,assignments,to,positions,contains,key,old,partition,get,kafka,partition,handle,assert,equals,old,partition,get,offset,1,mock,consumer,assignments,to,positions,get,old,partition,get,kafka,partition,handle,long,value,assert,equals,1,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsetsWhenEarlyWakeup() throws Exception;1501249950;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions already have defined offsets_- the consumer was woken up prior to the reassignment__<p>In this case, reassignment should not have occurred at all, and the consumer retains the original assignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsetsWhenEarlyWakeup() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(29L)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsToPositions = new LinkedHashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsToPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsToPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				true,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		_		testThread.waitPartitionReassignmentInvoked()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))__		verify(mockConsumer, times(1)).wakeup()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(oldPartitions.size(), mockConsumerAssignmentsToPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			assertTrue(mockConsumerAssignmentsToPositions.containsKey(oldPartition.getKafkaPartitionHandle()))__			assertEquals(_					oldPartition.getOffset() + 1,_					mockConsumerAssignmentsToPositions.get(oldPartition.getKafkaPartitionHandle()).longValue())__		}__		_		assertEquals(1, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,already,have,defined,offsets,the,consumer,was,woken,up,prior,to,the,reassignment,p,in,this,case,reassignment,should,not,have,occurred,at,all,and,the,consumer,retains,the,original,assignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,when,early,wakeup,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,29l,final,map,topic,partition,long,mock,consumer,assignments,to,positions,new,linked,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,to,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,to,positions,collections,topic,partition,long,empty,map,true,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,wait,partition,reassignment,invoked,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,times,1,wakeup,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,old,partitions,size,mock,consumer,assignments,to,positions,size,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,assert,true,mock,consumer,assignments,to,positions,contains,key,old,partition,get,kafka,partition,handle,assert,equals,old,partition,get,offset,1,mock,consumer,assignments,to,positions,get,old,partition,get,kafka,partition,handle,long,value,assert,equals,1,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsetsWhenEarlyWakeup() throws Exception;1513102156;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions already have defined offsets_- the consumer was woken up prior to the reassignment__<p>In this case, reassignment should not have occurred at all, and the consumer retains the original assignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsetsWhenEarlyWakeup() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(29L)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsToPositions = new LinkedHashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsToPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsToPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				true,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		_		testThread.waitPartitionReassignmentInvoked()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))__		verify(mockConsumer, times(1)).wakeup()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(oldPartitions.size(), mockConsumerAssignmentsToPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			assertTrue(mockConsumerAssignmentsToPositions.containsKey(oldPartition.getKafkaPartitionHandle()))__			assertEquals(_					oldPartition.getOffset() + 1,_					mockConsumerAssignmentsToPositions.get(oldPartition.getKafkaPartitionHandle()).longValue())__		}__		_		assertEquals(1, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,already,have,defined,offsets,the,consumer,was,woken,up,prior,to,the,reassignment,p,in,this,case,reassignment,should,not,have,occurred,at,all,and,the,consumer,retains,the,original,assignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,when,early,wakeup,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,29l,final,map,topic,partition,long,mock,consumer,assignments,to,positions,new,linked,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,to,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,to,positions,collections,topic,partition,long,empty,map,true,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,wait,partition,reassignment,invoked,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,times,1,wakeup,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,old,partitions,size,mock,consumer,assignments,to,positions,size,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,assert,true,mock,consumer,assignments,to,positions,contains,key,old,partition,get,kafka,partition,handle,assert,equals,old,partition,get,offset,1,mock,consumer,assignments,to,positions,get,old,partition,get,kafka,partition,handle,long,value,assert,equals,1,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsetsWhenEarlyWakeup() throws Exception;1517943538;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions already have defined offsets_- the consumer was woken up prior to the reassignment__<p>In this case, reassignment should not have occurred at all, and the consumer retains the original assignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsetsWhenEarlyWakeup() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(29L)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsToPositions = new LinkedHashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsToPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsToPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				true,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		_		testThread.waitPartitionReassignmentInvoked()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))__		verify(mockConsumer, times(1)).wakeup()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(oldPartitions.size(), mockConsumerAssignmentsToPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			assertTrue(mockConsumerAssignmentsToPositions.containsKey(oldPartition.getKafkaPartitionHandle()))__			assertEquals(_					oldPartition.getOffset() + 1,_					mockConsumerAssignmentsToPositions.get(oldPartition.getKafkaPartitionHandle()).longValue())__		}__		_		assertEquals(1, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,already,have,defined,offsets,the,consumer,was,woken,up,prior,to,the,reassignment,p,in,this,case,reassignment,should,not,have,occurred,at,all,and,the,consumer,retains,the,original,assignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,when,early,wakeup,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,29l,final,map,topic,partition,long,mock,consumer,assignments,to,positions,new,linked,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,to,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,to,positions,collections,topic,partition,long,empty,map,true,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,wait,partition,reassignment,invoked,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,times,1,wakeup,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,old,partitions,size,mock,consumer,assignments,to,positions,size,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,assert,true,mock,consumer,assignments,to,positions,contains,key,old,partition,get,kafka,partition,handle,assert,equals,old,partition,get,offset,1,mock,consumer,assignments,to,positions,get,old,partition,get,kafka,partition,handle,long,value,assert,equals,1,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsetsWhenEarlyWakeup() throws Exception;1538998760;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions already have defined offsets_- the consumer was woken up prior to the reassignment__<p>In this case, reassignment should not have occurred at all, and the consumer retains the original assignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsetsWhenEarlyWakeup() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(29L)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsToPositions = new LinkedHashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsToPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsToPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				true,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		_		testThread.waitPartitionReassignmentInvoked()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))__		verify(mockConsumer, times(1)).wakeup()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(oldPartitions.size(), mockConsumerAssignmentsToPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			assertTrue(mockConsumerAssignmentsToPositions.containsKey(oldPartition.getKafkaPartitionHandle()))__			assertEquals(_					oldPartition.getOffset() + 1,_					mockConsumerAssignmentsToPositions.get(oldPartition.getKafkaPartitionHandle()).longValue())__		}__		_		assertEquals(1, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,already,have,defined,offsets,the,consumer,was,woken,up,prior,to,the,reassignment,p,in,this,case,reassignment,should,not,have,occurred,at,all,and,the,consumer,retains,the,original,assignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,when,early,wakeup,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,29l,final,map,topic,partition,long,mock,consumer,assignments,to,positions,new,linked,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,to,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,to,positions,collections,topic,partition,long,empty,map,true,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,wait,partition,reassignment,invoked,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,times,1,wakeup,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,old,partitions,size,mock,consumer,assignments,to,positions,size,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,assert,true,mock,consumer,assignments,to,positions,contains,key,old,partition,get,kafka,partition,handle,assert,equals,old,partition,get,offset,1,mock,consumer,assignments,to,positions,get,old,partition,get,kafka,partition,handle,long,value,assert,equals,1,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsetsWhenEarlyWakeup() throws Exception;1539704473;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions already have defined offsets_- the consumer was woken up prior to the reassignment__<p>In this case, reassignment should not have occurred at all, and the consumer retains the original assignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsetsWhenEarlyWakeup() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(29L)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsToPositions = new LinkedHashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsToPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsToPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				true,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		_		testThread.waitPartitionReassignmentInvoked()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))__		verify(mockConsumer, times(1)).wakeup()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(oldPartitions.size(), mockConsumerAssignmentsToPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			assertTrue(mockConsumerAssignmentsToPositions.containsKey(oldPartition.getKafkaPartitionHandle()))__			assertEquals(_					oldPartition.getOffset() + 1,_					mockConsumerAssignmentsToPositions.get(oldPartition.getKafkaPartitionHandle()).longValue())__		}__		_		assertEquals(1, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,already,have,defined,offsets,the,consumer,was,woken,up,prior,to,the,reassignment,p,in,this,case,reassignment,should,not,have,occurred,at,all,and,the,consumer,retains,the,original,assignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,when,early,wakeup,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,29l,final,map,topic,partition,long,mock,consumer,assignments,to,positions,new,linked,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,to,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,to,positions,collections,topic,partition,long,empty,map,true,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,wait,partition,reassignment,invoked,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,times,1,wakeup,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,old,partitions,size,mock,consumer,assignments,to,positions,size,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,assert,true,mock,consumer,assignments,to,positions,contains,key,old,partition,get,kafka,partition,handle,assert,equals,old,partition,get,offset,1,mock,consumer,assignments,to,positions,get,old,partition,get,kafka,partition,handle,long,value,assert,equals,1,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithoutDefinedOffsets() throws Exception;1498894422;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions have undefined offsets (e.g. EARLIEST_OFFSET sentinel value)__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithoutDefinedOffsets() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> totalPartitions = new ArrayList<>(3)__		totalPartitions.add(oldPartition1)__		totalPartitions.add(oldPartition2)__		totalPartitions.add(newPartition)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new HashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsAndPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition.getKafkaPartitionHandle(), 30L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(mockRetrievedPositions.get(newPartition.getKafkaPartitionHandle()) - 1, newPartition.getOffset())___		__		assertEquals(totalPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		_		for (KafkaTopicPartitionState<TopicPartition> partition : totalPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(partition.getKafkaPartitionHandle()))___			_			assertEquals(_				partition.getOffset() + 1,_				mockConsumerAssignmentsAndPositions.get(partition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,have,undefined,offsets,e,g,sentinel,value,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,without,defined,offsets,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,total,partitions,new,array,list,3,total,partitions,add,old,partition1,total,partitions,add,old,partition2,total,partitions,add,new,partition,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,and,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition,get,kafka,partition,handle,30l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,mock,retrieved,positions,get,new,partition,get,kafka,partition,handle,1,new,partition,get,offset,assert,equals,total,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,partition,total,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,partition,get,kafka,partition,handle,assert,equals,partition,get,offset,1,mock,consumer,assignments,and,positions,get,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithoutDefinedOffsets() throws Exception;1500818418;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions have undefined offsets (e.g. EARLIEST_OFFSET sentinel value)__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithoutDefinedOffsets() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> totalPartitions = new ArrayList<>(3)__		totalPartitions.add(oldPartition1)__		totalPartitions.add(oldPartition2)__		totalPartitions.add(newPartition)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new HashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsAndPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition.getKafkaPartitionHandle(), 30L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(mockRetrievedPositions.get(newPartition.getKafkaPartitionHandle()) - 1, newPartition.getOffset())___		__		assertEquals(totalPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		_		for (KafkaTopicPartitionState<TopicPartition> partition : totalPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(partition.getKafkaPartitionHandle()))___			_			assertEquals(_				partition.getOffset() + 1,_				mockConsumerAssignmentsAndPositions.get(partition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,have,undefined,offsets,e,g,sentinel,value,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,without,defined,offsets,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,total,partitions,new,array,list,3,total,partitions,add,old,partition1,total,partitions,add,old,partition2,total,partitions,add,new,partition,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,and,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition,get,kafka,partition,handle,30l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,mock,retrieved,positions,get,new,partition,get,kafka,partition,handle,1,new,partition,get,offset,assert,equals,total,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,partition,total,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,partition,get,kafka,partition,handle,assert,equals,partition,get,offset,1,mock,consumer,assignments,and,positions,get,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithoutDefinedOffsets() throws Exception;1501249950;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions have undefined offsets (e.g. EARLIEST_OFFSET sentinel value)__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithoutDefinedOffsets() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> totalPartitions = new ArrayList<>(3)__		totalPartitions.add(oldPartition1)__		totalPartitions.add(oldPartition2)__		totalPartitions.add(newPartition)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new HashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsAndPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition.getKafkaPartitionHandle(), 30L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(mockRetrievedPositions.get(newPartition.getKafkaPartitionHandle()) - 1, newPartition.getOffset())___		__		assertEquals(totalPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		_		for (KafkaTopicPartitionState<TopicPartition> partition : totalPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(partition.getKafkaPartitionHandle()))___			_			assertEquals(_				partition.getOffset() + 1,_				mockConsumerAssignmentsAndPositions.get(partition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,have,undefined,offsets,e,g,sentinel,value,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,without,defined,offsets,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,total,partitions,new,array,list,3,total,partitions,add,old,partition1,total,partitions,add,old,partition2,total,partitions,add,new,partition,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,and,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition,get,kafka,partition,handle,30l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,mock,retrieved,positions,get,new,partition,get,kafka,partition,handle,1,new,partition,get,offset,assert,equals,total,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,partition,total,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,partition,get,kafka,partition,handle,assert,equals,partition,get,offset,1,mock,consumer,assignments,and,positions,get,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithoutDefinedOffsets() throws Exception;1513102156;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions have undefined offsets (e.g. EARLIEST_OFFSET sentinel value)__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithoutDefinedOffsets() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> totalPartitions = new ArrayList<>(3)__		totalPartitions.add(oldPartition1)__		totalPartitions.add(oldPartition2)__		totalPartitions.add(newPartition)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new HashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsAndPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition.getKafkaPartitionHandle(), 30L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(mockRetrievedPositions.get(newPartition.getKafkaPartitionHandle()) - 1, newPartition.getOffset())___		__		assertEquals(totalPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		_		for (KafkaTopicPartitionState<TopicPartition> partition : totalPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(partition.getKafkaPartitionHandle()))___			_			assertEquals(_				partition.getOffset() + 1,_				mockConsumerAssignmentsAndPositions.get(partition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,have,undefined,offsets,e,g,sentinel,value,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,without,defined,offsets,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,total,partitions,new,array,list,3,total,partitions,add,old,partition1,total,partitions,add,old,partition2,total,partitions,add,new,partition,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,and,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition,get,kafka,partition,handle,30l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,mock,retrieved,positions,get,new,partition,get,kafka,partition,handle,1,new,partition,get,offset,assert,equals,total,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,partition,total,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,partition,get,kafka,partition,handle,assert,equals,partition,get,offset,1,mock,consumer,assignments,and,positions,get,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithoutDefinedOffsets() throws Exception;1517943538;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions have undefined offsets (e.g. EARLIEST_OFFSET sentinel value)__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithoutDefinedOffsets() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> totalPartitions = new ArrayList<>(3)__		totalPartitions.add(oldPartition1)__		totalPartitions.add(oldPartition2)__		totalPartitions.add(newPartition)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new HashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsAndPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition.getKafkaPartitionHandle(), 30L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(mockRetrievedPositions.get(newPartition.getKafkaPartitionHandle()) - 1, newPartition.getOffset())___		__		assertEquals(totalPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		_		for (KafkaTopicPartitionState<TopicPartition> partition : totalPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(partition.getKafkaPartitionHandle()))___			_			assertEquals(_				partition.getOffset() + 1,_				mockConsumerAssignmentsAndPositions.get(partition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,have,undefined,offsets,e,g,sentinel,value,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,without,defined,offsets,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,total,partitions,new,array,list,3,total,partitions,add,old,partition1,total,partitions,add,old,partition2,total,partitions,add,new,partition,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,and,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition,get,kafka,partition,handle,30l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,mock,retrieved,positions,get,new,partition,get,kafka,partition,handle,1,new,partition,get,offset,assert,equals,total,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,partition,total,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,partition,get,kafka,partition,handle,assert,equals,partition,get,offset,1,mock,consumer,assignments,and,positions,get,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithoutDefinedOffsets() throws Exception;1538998760;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions have undefined offsets (e.g. EARLIEST_OFFSET sentinel value)__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithoutDefinedOffsets() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> totalPartitions = new ArrayList<>(3)__		totalPartitions.add(oldPartition1)__		totalPartitions.add(oldPartition2)__		totalPartitions.add(newPartition)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new HashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsAndPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition.getKafkaPartitionHandle(), 30L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(mockRetrievedPositions.get(newPartition.getKafkaPartitionHandle()) - 1, newPartition.getOffset())___		__		assertEquals(totalPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		_		for (KafkaTopicPartitionState<TopicPartition> partition : totalPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(partition.getKafkaPartitionHandle()))___			_			assertEquals(_				partition.getOffset() + 1,_				mockConsumerAssignmentsAndPositions.get(partition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,have,undefined,offsets,e,g,sentinel,value,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,without,defined,offsets,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,total,partitions,new,array,list,3,total,partitions,add,old,partition1,total,partitions,add,old,partition2,total,partitions,add,new,partition,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,and,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition,get,kafka,partition,handle,30l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,mock,retrieved,positions,get,new,partition,get,kafka,partition,handle,1,new,partition,get,offset,assert,equals,total,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,partition,total,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,partition,get,kafka,partition,handle,assert,equals,partition,get,offset,1,mock,consumer,assignments,and,positions,get,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithoutDefinedOffsets() throws Exception;1539704473;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions have undefined offsets (e.g. EARLIEST_OFFSET sentinel value)__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithoutDefinedOffsets() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> totalPartitions = new ArrayList<>(3)__		totalPartitions.add(oldPartition1)__		totalPartitions.add(oldPartition2)__		totalPartitions.add(newPartition)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new HashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsAndPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition.getKafkaPartitionHandle(), 30L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(mockRetrievedPositions.get(newPartition.getKafkaPartitionHandle()) - 1, newPartition.getOffset())___		__		assertEquals(totalPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		_		for (KafkaTopicPartitionState<TopicPartition> partition : totalPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(partition.getKafkaPartitionHandle()))___			_			assertEquals(_				partition.getOffset() + 1,_				mockConsumerAssignmentsAndPositions.get(partition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,have,undefined,offsets,e,g,sentinel,value,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,without,defined,offsets,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,total,partitions,new,array,list,3,total,partitions,add,old,partition1,total,partitions,add,old,partition2,total,partitions,add,new,partition,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,and,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition,get,kafka,partition,handle,30l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,mock,retrieved,positions,get,new,partition,get,kafka,partition,handle,1,new,partition,get,offset,assert,equals,total,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,partition,total,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,partition,get,kafka,partition,handle,assert,equals,partition,get,offset,1,mock,consumer,assignments,and,positions,get,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenEarlyWakeup() throws Exception;1498894422;Tests reassignment works correctly in the case when:_- the consumer has no initial assignments_- new unassigned partitions have undefined offsets_- the consumer was woken up prior to the reassignment__<p>In this case, reassignment should not have occurred at all, and the consumer retains the original assignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenEarlyWakeup() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				true,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		_		testThread.waitPartitionReassignmentInvoked()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>())___		_		verify(mockConsumer, times(1)).wakeup()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(0, mockConsumerAssignmentsAndPositions.size())___		_		assertEquals(2, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,has,no,initial,assignments,new,unassigned,partitions,have,undefined,offsets,the,consumer,was,woken,up,prior,to,the,reassignment,p,in,this,case,reassignment,should,not,have,occurred,at,all,and,the,consumer,retains,the,original,assignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassign,partitions,defined,offsets,without,initial,assignments,when,early,wakeup,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,true,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,wait,partition,reassignment,invoked,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,verify,mock,consumer,times,1,wakeup,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,0,mock,consumer,assignments,and,positions,size,assert,equals,2,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenEarlyWakeup() throws Exception;1500818418;Tests reassignment works correctly in the case when:_- the consumer has no initial assignments_- new unassigned partitions have undefined offsets_- the consumer was woken up prior to the reassignment__<p>In this case, reassignment should not have occurred at all, and the consumer retains the original assignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenEarlyWakeup() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				true,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		_		testThread.waitPartitionReassignmentInvoked()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>())___		_		verify(mockConsumer, times(1)).wakeup()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(0, mockConsumerAssignmentsAndPositions.size())___		_		assertEquals(2, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,has,no,initial,assignments,new,unassigned,partitions,have,undefined,offsets,the,consumer,was,woken,up,prior,to,the,reassignment,p,in,this,case,reassignment,should,not,have,occurred,at,all,and,the,consumer,retains,the,original,assignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassign,partitions,defined,offsets,without,initial,assignments,when,early,wakeup,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,true,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,wait,partition,reassignment,invoked,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,verify,mock,consumer,times,1,wakeup,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,0,mock,consumer,assignments,and,positions,size,assert,equals,2,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenEarlyWakeup() throws Exception;1501249950;Tests reassignment works correctly in the case when:_- the consumer has no initial assignments_- new unassigned partitions have undefined offsets_- the consumer was woken up prior to the reassignment__<p>In this case, reassignment should not have occurred at all, and the consumer retains the original assignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenEarlyWakeup() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				true,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		_		testThread.waitPartitionReassignmentInvoked()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))___		_		verify(mockConsumer, times(1)).wakeup()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(0, mockConsumerAssignmentsAndPositions.size())___		_		assertEquals(2, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,has,no,initial,assignments,new,unassigned,partitions,have,undefined,offsets,the,consumer,was,woken,up,prior,to,the,reassignment,p,in,this,case,reassignment,should,not,have,occurred,at,all,and,the,consumer,retains,the,original,assignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassign,partitions,defined,offsets,without,initial,assignments,when,early,wakeup,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,true,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,wait,partition,reassignment,invoked,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,times,1,wakeup,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,0,mock,consumer,assignments,and,positions,size,assert,equals,2,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenEarlyWakeup() throws Exception;1513102156;Tests reassignment works correctly in the case when:_- the consumer has no initial assignments_- new unassigned partitions have undefined offsets_- the consumer was woken up prior to the reassignment__<p>In this case, reassignment should not have occurred at all, and the consumer retains the original assignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenEarlyWakeup() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				true,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		_		testThread.waitPartitionReassignmentInvoked()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))___		_		verify(mockConsumer, times(1)).wakeup()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(0, mockConsumerAssignmentsAndPositions.size())___		_		assertEquals(2, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,has,no,initial,assignments,new,unassigned,partitions,have,undefined,offsets,the,consumer,was,woken,up,prior,to,the,reassignment,p,in,this,case,reassignment,should,not,have,occurred,at,all,and,the,consumer,retains,the,original,assignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassign,partitions,defined,offsets,without,initial,assignments,when,early,wakeup,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,true,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,wait,partition,reassignment,invoked,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,times,1,wakeup,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,0,mock,consumer,assignments,and,positions,size,assert,equals,2,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenEarlyWakeup() throws Exception;1517943538;Tests reassignment works correctly in the case when:_- the consumer has no initial assignments_- new unassigned partitions have undefined offsets_- the consumer was woken up prior to the reassignment__<p>In this case, reassignment should not have occurred at all, and the consumer retains the original assignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenEarlyWakeup() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				true,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		_		testThread.waitPartitionReassignmentInvoked()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))___		_		verify(mockConsumer, times(1)).wakeup()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(0, mockConsumerAssignmentsAndPositions.size())___		_		assertEquals(2, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,has,no,initial,assignments,new,unassigned,partitions,have,undefined,offsets,the,consumer,was,woken,up,prior,to,the,reassignment,p,in,this,case,reassignment,should,not,have,occurred,at,all,and,the,consumer,retains,the,original,assignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassign,partitions,defined,offsets,without,initial,assignments,when,early,wakeup,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,true,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,wait,partition,reassignment,invoked,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,times,1,wakeup,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,0,mock,consumer,assignments,and,positions,size,assert,equals,2,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenEarlyWakeup() throws Exception;1538998760;Tests reassignment works correctly in the case when:_- the consumer has no initial assignments_- new unassigned partitions have undefined offsets_- the consumer was woken up prior to the reassignment__<p>In this case, reassignment should not have occurred at all, and the consumer retains the original assignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenEarlyWakeup() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				true,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		_		testThread.waitPartitionReassignmentInvoked()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))___		_		verify(mockConsumer, times(1)).wakeup()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(0, mockConsumerAssignmentsAndPositions.size())___		_		assertEquals(2, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,has,no,initial,assignments,new,unassigned,partitions,have,undefined,offsets,the,consumer,was,woken,up,prior,to,the,reassignment,p,in,this,case,reassignment,should,not,have,occurred,at,all,and,the,consumer,retains,the,original,assignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassign,partitions,defined,offsets,without,initial,assignments,when,early,wakeup,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,true,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,wait,partition,reassignment,invoked,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,times,1,wakeup,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,0,mock,consumer,assignments,and,positions,size,assert,equals,2,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenEarlyWakeup() throws Exception;1539704473;Tests reassignment works correctly in the case when:_- the consumer has no initial assignments_- new unassigned partitions have undefined offsets_- the consumer was woken up prior to the reassignment__<p>In this case, reassignment should not have occurred at all, and the consumer retains the original assignment.__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassignPartitionsDefinedOffsetsWithoutInitialAssignmentsWhenEarlyWakeup() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET)___		List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		_		final Map<TopicPartition, Long> mockRetrievedPositions = new HashMap<>()__		mockRetrievedPositions.put(newPartition1.getKafkaPartitionHandle(), 23L)__		mockRetrievedPositions.put(newPartition2.getKafkaPartitionHandle(), 32L)___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				mockRetrievedPositions,_				true,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		_		testThread.waitPartitionReassignmentInvoked()___		testThread.setOffsetsToCommit(new HashMap<TopicPartition, OffsetAndMetadata>(), mock(KafkaCommitCallback.class))___		_		verify(mockConsumer, times(1)).wakeup()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		_		assertEquals(0, mockConsumerAssignmentsAndPositions.size())___		_		assertEquals(2, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,has,no,initial,assignments,new,unassigned,partitions,have,undefined,offsets,the,consumer,was,woken,up,prior,to,the,reassignment,p,in,this,case,reassignment,should,not,have,occurred,at,all,and,the,consumer,retains,the,original,assignment,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassign,partitions,defined,offsets,without,initial,assignments,when,early,wakeup,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,kafka,topic,partition,state,sentinel,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,kafka,topic,partition,state,sentinel,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,map,topic,partition,long,mock,retrieved,positions,new,hash,map,mock,retrieved,positions,put,new,partition1,get,kafka,partition,handle,23l,mock,retrieved,positions,put,new,partition2,get,kafka,partition,handle,32l,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,mock,retrieved,positions,true,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,wait,partition,reassignment,invoked,test,thread,set,offsets,to,commit,new,hash,map,topic,partition,offset,and,metadata,mock,kafka,commit,callback,class,verify,mock,consumer,times,1,wakeup,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,0,mock,consumer,assignments,and,positions,size,assert,equals,2,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsets() throws Exception;1498894422;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions already have defined offsets__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsets() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(29L)___		List<KafkaTopicPartitionState<TopicPartition>> totalPartitions = new ArrayList<>(3)__		totalPartitions.add(oldPartition1)__		totalPartitions.add(oldPartition2)__		totalPartitions.add(newPartition)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new HashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsAndPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(totalPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		_		for (KafkaTopicPartitionState<TopicPartition> partition : totalPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(partition.getKafkaPartitionHandle()))___			_			assertEquals(_					partition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(partition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,already,have,defined,offsets,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,29l,list,kafka,topic,partition,state,topic,partition,total,partitions,new,array,list,3,total,partitions,add,old,partition1,total,partitions,add,old,partition2,total,partitions,add,new,partition,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,and,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,collections,topic,partition,long,empty,map,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,total,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,partition,total,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,partition,get,kafka,partition,handle,assert,equals,partition,get,offset,1,mock,consumer,assignments,and,positions,get,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsets() throws Exception;1500818418;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions already have defined offsets__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsets() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(29L)___		List<KafkaTopicPartitionState<TopicPartition>> totalPartitions = new ArrayList<>(3)__		totalPartitions.add(oldPartition1)__		totalPartitions.add(oldPartition2)__		totalPartitions.add(newPartition)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new HashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsAndPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(totalPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		_		for (KafkaTopicPartitionState<TopicPartition> partition : totalPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(partition.getKafkaPartitionHandle()))___			_			assertEquals(_					partition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(partition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,already,have,defined,offsets,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,29l,list,kafka,topic,partition,state,topic,partition,total,partitions,new,array,list,3,total,partitions,add,old,partition1,total,partitions,add,old,partition2,total,partitions,add,new,partition,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,and,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,collections,topic,partition,long,empty,map,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,total,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,partition,total,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,partition,get,kafka,partition,handle,assert,equals,partition,get,offset,1,mock,consumer,assignments,and,positions,get,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsets() throws Exception;1501249950;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions already have defined offsets__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsets() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(29L)___		List<KafkaTopicPartitionState<TopicPartition>> totalPartitions = new ArrayList<>(3)__		totalPartitions.add(oldPartition1)__		totalPartitions.add(oldPartition2)__		totalPartitions.add(newPartition)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new HashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsAndPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(totalPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		_		for (KafkaTopicPartitionState<TopicPartition> partition : totalPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(partition.getKafkaPartitionHandle()))___			_			assertEquals(_					partition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(partition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,already,have,defined,offsets,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,29l,list,kafka,topic,partition,state,topic,partition,total,partitions,new,array,list,3,total,partitions,add,old,partition1,total,partitions,add,old,partition2,total,partitions,add,new,partition,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,and,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,collections,topic,partition,long,empty,map,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,total,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,partition,total,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,partition,get,kafka,partition,handle,assert,equals,partition,get,offset,1,mock,consumer,assignments,and,positions,get,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsets() throws Exception;1513102156;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions already have defined offsets__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsets() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(29L)___		List<KafkaTopicPartitionState<TopicPartition>> totalPartitions = new ArrayList<>(3)__		totalPartitions.add(oldPartition1)__		totalPartitions.add(oldPartition2)__		totalPartitions.add(newPartition)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new HashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsAndPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(totalPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		_		for (KafkaTopicPartitionState<TopicPartition> partition : totalPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(partition.getKafkaPartitionHandle()))___			_			assertEquals(_					partition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(partition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,already,have,defined,offsets,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,29l,list,kafka,topic,partition,state,topic,partition,total,partitions,new,array,list,3,total,partitions,add,old,partition1,total,partitions,add,old,partition2,total,partitions,add,new,partition,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,and,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,collections,topic,partition,long,empty,map,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,total,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,partition,total,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,partition,get,kafka,partition,handle,assert,equals,partition,get,offset,1,mock,consumer,assignments,and,positions,get,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsets() throws Exception;1517943538;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions already have defined offsets__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsets() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(29L)___		List<KafkaTopicPartitionState<TopicPartition>> totalPartitions = new ArrayList<>(3)__		totalPartitions.add(oldPartition1)__		totalPartitions.add(oldPartition2)__		totalPartitions.add(newPartition)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new HashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsAndPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(totalPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		_		for (KafkaTopicPartitionState<TopicPartition> partition : totalPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(partition.getKafkaPartitionHandle()))___			_			assertEquals(_					partition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(partition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,already,have,defined,offsets,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,29l,list,kafka,topic,partition,state,topic,partition,total,partitions,new,array,list,3,total,partitions,add,old,partition1,total,partitions,add,old,partition2,total,partitions,add,new,partition,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,and,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,collections,topic,partition,long,empty,map,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,total,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,partition,total,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,partition,get,kafka,partition,handle,assert,equals,partition,get,offset,1,mock,consumer,assignments,and,positions,get,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsets() throws Exception;1538998760;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions already have defined offsets__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsets() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(29L)___		List<KafkaTopicPartitionState<TopicPartition>> totalPartitions = new ArrayList<>(3)__		totalPartitions.add(oldPartition1)__		totalPartitions.add(oldPartition2)__		totalPartitions.add(newPartition)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new HashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsAndPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(totalPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		_		for (KafkaTopicPartitionState<TopicPartition> partition : totalPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(partition.getKafkaPartitionHandle()))___			_			assertEquals(_					partition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(partition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,already,have,defined,offsets,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,29l,list,kafka,topic,partition,state,topic,partition,total,partitions,new,array,list,3,total,partitions,add,old,partition1,total,partitions,add,old,partition2,total,partitions,add,new,partition,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,and,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,collections,topic,partition,long,empty,map,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,total,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,partition,total,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,partition,get,kafka,partition,handle,assert,equals,partition,get,offset,1,mock,consumer,assignments,and,positions,get,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsets() throws Exception;1539704473;Tests reassignment works correctly in the case when:_- the consumer already have some assignments_- new unassigned partitions already have defined offsets__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsets() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> oldPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		oldPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> oldPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		oldPartition2.setOffset(32L)___		List<KafkaTopicPartitionState<TopicPartition>> oldPartitions = new ArrayList<>(2)__		oldPartitions.add(oldPartition1)__		oldPartitions.add(oldPartition2)___		__		KafkaTopicPartitionState<TopicPartition> newPartition = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 2), new TopicPartition(testTopic, 2))__		newPartition.setOffset(29L)___		List<KafkaTopicPartitionState<TopicPartition>> totalPartitions = new ArrayList<>(3)__		totalPartitions.add(oldPartition1)__		totalPartitions.add(oldPartition2)__		totalPartitions.add(newPartition)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new HashMap<>()__		for (KafkaTopicPartitionState<TopicPartition> oldPartition : oldPartitions) {_			mockConsumerAssignmentsAndPositions.put(oldPartition.getKafkaPartitionHandle(), oldPartition.getOffset() + 1)__		}__		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		unassignedPartitionsQueue.add(newPartition)___		__		final TestKafkaConsumerThread testThread =_			new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(totalPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		_		for (KafkaTopicPartitionState<TopicPartition> partition : totalPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(partition.getKafkaPartitionHandle()))___			_			assertEquals(_					partition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(partition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,already,have,some,assignments,new,unassigned,partitions,already,have,defined,offsets,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,old,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,old,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,old,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,old,partition2,set,offset,32l,list,kafka,topic,partition,state,topic,partition,old,partitions,new,array,list,2,old,partitions,add,old,partition1,old,partitions,add,old,partition2,kafka,topic,partition,state,topic,partition,new,partition,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,2,new,topic,partition,test,topic,2,new,partition,set,offset,29l,list,kafka,topic,partition,state,topic,partition,total,partitions,new,array,list,3,total,partitions,add,old,partition1,total,partitions,add,old,partition2,total,partitions,add,new,partition,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,hash,map,for,kafka,topic,partition,state,topic,partition,old,partition,old,partitions,mock,consumer,assignments,and,positions,put,old,partition,get,kafka,partition,handle,old,partition,get,offset,1,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,collections,topic,partition,long,empty,map,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,total,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,partition,total,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,partition,get,kafka,partition,handle,assert,equals,partition,get,offset,1,mock,consumer,assignments,and,positions,get,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsetsWhenNoInitialAssignment() throws Exception;1498894422;Tests reassignment works correctly in the case when:_- the consumer initially had no assignments_- new unassigned partitions already have defined offsets__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsetsWhenNoInitialAssignment() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(31L)___		final List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_				new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_					newPartition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,initially,had,no,assignments,new,unassigned,partitions,already,have,defined,offsets,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,when,no,initial,assignment,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,31l,final,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,collections,topic,partition,long,empty,map,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsetsWhenNoInitialAssignment() throws Exception;1500818418;Tests reassignment works correctly in the case when:_- the consumer initially had no assignments_- new unassigned partitions already have defined offsets__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsetsWhenNoInitialAssignment() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(31L)___		final List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_				new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_					newPartition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,initially,had,no,assignments,new,unassigned,partitions,already,have,defined,offsets,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,when,no,initial,assignment,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,31l,final,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,collections,topic,partition,long,empty,map,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsetsWhenNoInitialAssignment() throws Exception;1501249950;Tests reassignment works correctly in the case when:_- the consumer initially had no assignments_- new unassigned partitions already have defined offsets__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsetsWhenNoInitialAssignment() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(31L)___		final List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_				new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_					newPartition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,initially,had,no,assignments,new,unassigned,partitions,already,have,defined,offsets,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,when,no,initial,assignment,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,31l,final,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,collections,topic,partition,long,empty,map,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsetsWhenNoInitialAssignment() throws Exception;1513102156;Tests reassignment works correctly in the case when:_- the consumer initially had no assignments_- new unassigned partitions already have defined offsets__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsetsWhenNoInitialAssignment() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(31L)___		final List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_				new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_					newPartition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,initially,had,no,assignments,new,unassigned,partitions,already,have,defined,offsets,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,when,no,initial,assignment,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,31l,final,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,collections,topic,partition,long,empty,map,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsetsWhenNoInitialAssignment() throws Exception;1517943538;Tests reassignment works correctly in the case when:_- the consumer initially had no assignments_- new unassigned partitions already have defined offsets__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsetsWhenNoInitialAssignment() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(31L)___		final List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_				new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_					newPartition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,initially,had,no,assignments,new,unassigned,partitions,already,have,defined,offsets,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,when,no,initial,assignment,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,31l,final,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,collections,topic,partition,long,empty,map,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsetsWhenNoInitialAssignment() throws Exception;1538998760;Tests reassignment works correctly in the case when:_- the consumer initially had no assignments_- new unassigned partitions already have defined offsets__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsetsWhenNoInitialAssignment() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(31L)___		final List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_				new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_					newPartition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,initially,had,no,assignments,new,unassigned,partitions,already,have,defined,offsets,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,when,no,initial,assignment,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,31l,final,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,collections,topic,partition,long,empty,map,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
KafkaConsumerThreadTest -> @SuppressWarnings("unchecked") 	@Test(timeout = 10000) 	public void testReassigningPartitionsWithDefinedOffsetsWhenNoInitialAssignment() throws Exception;1539704473;Tests reassignment works correctly in the case when:_- the consumer initially had no assignments_- new unassigned partitions already have defined offsets__<p>Setting a timeout because the test will not finish if there is logic error with_the reassignment flow.;@SuppressWarnings("unchecked")_	@Test(timeout = 10000)_	public void testReassigningPartitionsWithDefinedOffsetsWhenNoInitialAssignment() throws Exception {_		final String testTopic = "test-topic"___		__		KafkaTopicPartitionState<TopicPartition> newPartition1 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 0), new TopicPartition(testTopic, 0))__		newPartition1.setOffset(23L)___		KafkaTopicPartitionState<TopicPartition> newPartition2 = new KafkaTopicPartitionState<>(_			new KafkaTopicPartition(testTopic, 1), new TopicPartition(testTopic, 1))__		newPartition2.setOffset(31L)___		final List<KafkaTopicPartitionState<TopicPartition>> newPartitions = new ArrayList<>(2)__		newPartitions.add(newPartition1)__		newPartitions.add(newPartition2)___		__		_		final Map<TopicPartition, Long> mockConsumerAssignmentsAndPositions = new LinkedHashMap<>()___		final KafkaConsumer<byte[], byte[]> mockConsumer = createMockConsumer(_				mockConsumerAssignmentsAndPositions,_				Collections.<TopicPartition, Long>emptyMap(),_				false,_				null,_				null)___		__		final ClosableBlockingQueue<KafkaTopicPartitionState<TopicPartition>> unassignedPartitionsQueue =_			new ClosableBlockingQueue<>()___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			unassignedPartitionsQueue.add(newPartition)__		}__		__		final TestKafkaConsumerThread testThread =_				new TestKafkaConsumerThread(mockConsumer, unassignedPartitionsQueue, new Handover())__		testThread.start()___		testThread.startPartitionReassignment()__		testThread.waitPartitionReassignmentComplete()___		__		assertEquals(newPartitions.size(), mockConsumerAssignmentsAndPositions.size())___		for (KafkaTopicPartitionState<TopicPartition> newPartition : newPartitions) {_			assertTrue(mockConsumerAssignmentsAndPositions.containsKey(newPartition.getKafkaPartitionHandle()))___			_			assertEquals(_					newPartition.getOffset() + 1,_					mockConsumerAssignmentsAndPositions.get(newPartition.getKafkaPartitionHandle()).longValue())__		}__		assertEquals(0, unassignedPartitionsQueue.size())__	};tests,reassignment,works,correctly,in,the,case,when,the,consumer,initially,had,no,assignments,new,unassigned,partitions,already,have,defined,offsets,p,setting,a,timeout,because,the,test,will,not,finish,if,there,is,logic,error,with,the,reassignment,flow;suppress,warnings,unchecked,test,timeout,10000,public,void,test,reassigning,partitions,with,defined,offsets,when,no,initial,assignment,throws,exception,final,string,test,topic,test,topic,kafka,topic,partition,state,topic,partition,new,partition1,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,0,new,topic,partition,test,topic,0,new,partition1,set,offset,23l,kafka,topic,partition,state,topic,partition,new,partition2,new,kafka,topic,partition,state,new,kafka,topic,partition,test,topic,1,new,topic,partition,test,topic,1,new,partition2,set,offset,31l,final,list,kafka,topic,partition,state,topic,partition,new,partitions,new,array,list,2,new,partitions,add,new,partition1,new,partitions,add,new,partition2,final,map,topic,partition,long,mock,consumer,assignments,and,positions,new,linked,hash,map,final,kafka,consumer,byte,byte,mock,consumer,create,mock,consumer,mock,consumer,assignments,and,positions,collections,topic,partition,long,empty,map,false,null,null,final,closable,blocking,queue,kafka,topic,partition,state,topic,partition,unassigned,partitions,queue,new,closable,blocking,queue,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,unassigned,partitions,queue,add,new,partition,final,test,kafka,consumer,thread,test,thread,new,test,kafka,consumer,thread,mock,consumer,unassigned,partitions,queue,new,handover,test,thread,start,test,thread,start,partition,reassignment,test,thread,wait,partition,reassignment,complete,assert,equals,new,partitions,size,mock,consumer,assignments,and,positions,size,for,kafka,topic,partition,state,topic,partition,new,partition,new,partitions,assert,true,mock,consumer,assignments,and,positions,contains,key,new,partition,get,kafka,partition,handle,assert,equals,new,partition,get,offset,1,mock,consumer,assignments,and,positions,get,new,partition,get,kafka,partition,handle,long,value,assert,equals,0,unassigned,partitions,queue,size
