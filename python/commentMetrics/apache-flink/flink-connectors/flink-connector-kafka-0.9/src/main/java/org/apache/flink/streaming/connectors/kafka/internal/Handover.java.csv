# id;timestamp;commentText;codeText;commentWords;codeWords
Handover -> public void produce(final ConsumerRecords<byte[], byte[]> element) 			throws InterruptedException, WakeupException, ClosedException;1480685315;Hands over an element from the producer. If the Handover already has an element that was_not yet picked up by the consumer thread, this call blocks until the consumer picks up that_previous element.__<p>This behavior is similar to a "size one" blocking queue.__@param element The next element to hand over.__@throws InterruptedException_Thrown, if the thread is interrupted while blocking for the Handover to be empty._@throws WakeupException_Thrown, if the {@link #wakeupProducer()} method is called while blocking for_the Handover to be empty._@throws ClosedException_Thrown if the Handover was closed or concurrently being closed.;public void produce(final ConsumerRecords<byte[], byte[]> element)_			throws InterruptedException, WakeupException, ClosedException {__		checkNotNull(element)___		synchronized (lock) {_			while (next != null && !wakeupProducer) {_				lock.wait()__			}__			wakeupProducer = false___			_			if (next != null) {_				throw new WakeupException()__			}_			_			else if (error == null) {_				next = element__				lock.notifyAll()__			}_			_			else {_				throw new ClosedException()__			}_		}_	};hands,over,an,element,from,the,producer,if,the,handover,already,has,an,element,that,was,not,yet,picked,up,by,the,consumer,thread,this,call,blocks,until,the,consumer,picks,up,that,previous,element,p,this,behavior,is,similar,to,a,size,one,blocking,queue,param,element,the,next,element,to,hand,over,throws,interrupted,exception,thrown,if,the,thread,is,interrupted,while,blocking,for,the,handover,to,be,empty,throws,wakeup,exception,thrown,if,the,link,wakeup,producer,method,is,called,while,blocking,for,the,handover,to,be,empty,throws,closed,exception,thrown,if,the,handover,was,closed,or,concurrently,being,closed;public,void,produce,final,consumer,records,byte,byte,element,throws,interrupted,exception,wakeup,exception,closed,exception,check,not,null,element,synchronized,lock,while,next,null,wakeup,producer,lock,wait,wakeup,producer,false,if,next,null,throw,new,wakeup,exception,else,if,error,null,next,element,lock,notify,all,else,throw,new,closed,exception
Handover -> public void produce(final ConsumerRecords<byte[], byte[]> element) 			throws InterruptedException, WakeupException, ClosedException;1495923077;Hands over an element from the producer. If the Handover already has an element that was_not yet picked up by the consumer thread, this call blocks until the consumer picks up that_previous element.__<p>This behavior is similar to a "size one" blocking queue.__@param element The next element to hand over.__@throws InterruptedException_Thrown, if the thread is interrupted while blocking for the Handover to be empty._@throws WakeupException_Thrown, if the {@link #wakeupProducer()} method is called while blocking for_the Handover to be empty._@throws ClosedException_Thrown if the Handover was closed or concurrently being closed.;public void produce(final ConsumerRecords<byte[], byte[]> element)_			throws InterruptedException, WakeupException, ClosedException {__		checkNotNull(element)___		synchronized (lock) {_			while (next != null && !wakeupProducer) {_				lock.wait()__			}__			wakeupProducer = false___			_			if (next != null) {_				throw new WakeupException()__			}_			_			else if (error == null) {_				next = element__				lock.notifyAll()__			}_			_			else {_				throw new ClosedException()__			}_		}_	};hands,over,an,element,from,the,producer,if,the,handover,already,has,an,element,that,was,not,yet,picked,up,by,the,consumer,thread,this,call,blocks,until,the,consumer,picks,up,that,previous,element,p,this,behavior,is,similar,to,a,size,one,blocking,queue,param,element,the,next,element,to,hand,over,throws,interrupted,exception,thrown,if,the,thread,is,interrupted,while,blocking,for,the,handover,to,be,empty,throws,wakeup,exception,thrown,if,the,link,wakeup,producer,method,is,called,while,blocking,for,the,handover,to,be,empty,throws,closed,exception,thrown,if,the,handover,was,closed,or,concurrently,being,closed;public,void,produce,final,consumer,records,byte,byte,element,throws,interrupted,exception,wakeup,exception,closed,exception,check,not,null,element,synchronized,lock,while,next,null,wakeup,producer,lock,wait,wakeup,producer,false,if,next,null,throw,new,wakeup,exception,else,if,error,null,next,element,lock,notify,all,else,throw,new,closed,exception
Handover -> public void produce(final ConsumerRecords<byte[], byte[]> element) 			throws InterruptedException, WakeupException, ClosedException;1515757409;Hands over an element from the producer. If the Handover already has an element that was_not yet picked up by the consumer thread, this call blocks until the consumer picks up that_previous element.__<p>This behavior is similar to a "size one" blocking queue.__@param element The next element to hand over.__@throws InterruptedException_Thrown, if the thread is interrupted while blocking for the Handover to be empty._@throws WakeupException_Thrown, if the {@link #wakeupProducer()} method is called while blocking for_the Handover to be empty._@throws ClosedException_Thrown if the Handover was closed or concurrently being closed.;public void produce(final ConsumerRecords<byte[], byte[]> element)_			throws InterruptedException, WakeupException, ClosedException {__		checkNotNull(element)___		synchronized (lock) {_			while (next != null && !wakeupProducer) {_				lock.wait()__			}__			wakeupProducer = false___			_			if (next != null) {_				throw new WakeupException()__			}_			_			else if (error == null) {_				next = element__				lock.notifyAll()__			}_			_			else {_				throw new ClosedException()__			}_		}_	};hands,over,an,element,from,the,producer,if,the,handover,already,has,an,element,that,was,not,yet,picked,up,by,the,consumer,thread,this,call,blocks,until,the,consumer,picks,up,that,previous,element,p,this,behavior,is,similar,to,a,size,one,blocking,queue,param,element,the,next,element,to,hand,over,throws,interrupted,exception,thrown,if,the,thread,is,interrupted,while,blocking,for,the,handover,to,be,empty,throws,wakeup,exception,thrown,if,the,link,wakeup,producer,method,is,called,while,blocking,for,the,handover,to,be,empty,throws,closed,exception,thrown,if,the,handover,was,closed,or,concurrently,being,closed;public,void,produce,final,consumer,records,byte,byte,element,throws,interrupted,exception,wakeup,exception,closed,exception,check,not,null,element,synchronized,lock,while,next,null,wakeup,producer,lock,wait,wakeup,producer,false,if,next,null,throw,new,wakeup,exception,else,if,error,null,next,element,lock,notify,all,else,throw,new,closed,exception
Handover -> @Nonnull 	public ConsumerRecords<byte[], byte[]> pollNext() throws Exception;1480685315;Polls the next element from the Handover, possibly blocking until the next element is_available. This method behaves similar to polling from a blocking queue.__<p>If an exception was handed in by the producer ({@link #reportError(Throwable)}), then_that exception is thrown rather than an element being returned.__@return The next element (buffer of records, never null).__@throws ClosedException Thrown if the Handover was {@link #close() closed}._@throws Exception Rethrows exceptions from the {@link #reportError(Throwable)} method.;@Nonnull_	public ConsumerRecords<byte[], byte[]> pollNext() throws Exception {_		synchronized (lock) {_			while (next == null && error == null) {_				lock.wait()__			}__			ConsumerRecords<byte[], byte[]> n = next__			if (n != null) {_				next = null__				lock.notifyAll()__				return n__			}_			else {_				ExceptionUtils.rethrowException(error, error.getMessage())___				_				_				return ConsumerRecords.empty()_ _			}_		}_	};polls,the,next,element,from,the,handover,possibly,blocking,until,the,next,element,is,available,this,method,behaves,similar,to,polling,from,a,blocking,queue,p,if,an,exception,was,handed,in,by,the,producer,link,report,error,throwable,then,that,exception,is,thrown,rather,than,an,element,being,returned,return,the,next,element,buffer,of,records,never,null,throws,closed,exception,thrown,if,the,handover,was,link,close,closed,throws,exception,rethrows,exceptions,from,the,link,report,error,throwable,method;nonnull,public,consumer,records,byte,byte,poll,next,throws,exception,synchronized,lock,while,next,null,error,null,lock,wait,consumer,records,byte,byte,n,next,if,n,null,next,null,lock,notify,all,return,n,else,exception,utils,rethrow,exception,error,error,get,message,return,consumer,records,empty
Handover -> @Nonnull 	public ConsumerRecords<byte[], byte[]> pollNext() throws Exception;1495923077;Polls the next element from the Handover, possibly blocking until the next element is_available. This method behaves similar to polling from a blocking queue.__<p>If an exception was handed in by the producer ({@link #reportError(Throwable)}), then_that exception is thrown rather than an element being returned.__@return The next element (buffer of records, never null).__@throws ClosedException Thrown if the Handover was {@link #close() closed}._@throws Exception Rethrows exceptions from the {@link #reportError(Throwable)} method.;@Nonnull_	public ConsumerRecords<byte[], byte[]> pollNext() throws Exception {_		synchronized (lock) {_			while (next == null && error == null) {_				lock.wait()__			}__			ConsumerRecords<byte[], byte[]> n = next__			if (n != null) {_				next = null__				lock.notifyAll()__				return n__			}_			else {_				ExceptionUtils.rethrowException(error, error.getMessage())___				_				_				return ConsumerRecords.empty()__			}_		}_	};polls,the,next,element,from,the,handover,possibly,blocking,until,the,next,element,is,available,this,method,behaves,similar,to,polling,from,a,blocking,queue,p,if,an,exception,was,handed,in,by,the,producer,link,report,error,throwable,then,that,exception,is,thrown,rather,than,an,element,being,returned,return,the,next,element,buffer,of,records,never,null,throws,closed,exception,thrown,if,the,handover,was,link,close,closed,throws,exception,rethrows,exceptions,from,the,link,report,error,throwable,method;nonnull,public,consumer,records,byte,byte,poll,next,throws,exception,synchronized,lock,while,next,null,error,null,lock,wait,consumer,records,byte,byte,n,next,if,n,null,next,null,lock,notify,all,return,n,else,exception,utils,rethrow,exception,error,error,get,message,return,consumer,records,empty
Handover -> @Nonnull 	public ConsumerRecords<byte[], byte[]> pollNext() throws Exception;1515757409;Polls the next element from the Handover, possibly blocking until the next element is_available. This method behaves similar to polling from a blocking queue.__<p>If an exception was handed in by the producer ({@link #reportError(Throwable)}), then_that exception is thrown rather than an element being returned.__@return The next element (buffer of records, never null).__@throws ClosedException Thrown if the Handover was {@link #close() closed}._@throws Exception Rethrows exceptions from the {@link #reportError(Throwable)} method.;@Nonnull_	public ConsumerRecords<byte[], byte[]> pollNext() throws Exception {_		synchronized (lock) {_			while (next == null && error == null) {_				lock.wait()__			}__			ConsumerRecords<byte[], byte[]> n = next__			if (n != null) {_				next = null__				lock.notifyAll()__				return n__			}_			else {_				ExceptionUtils.rethrowException(error, error.getMessage())___				_				_				return ConsumerRecords.empty()__			}_		}_	};polls,the,next,element,from,the,handover,possibly,blocking,until,the,next,element,is,available,this,method,behaves,similar,to,polling,from,a,blocking,queue,p,if,an,exception,was,handed,in,by,the,producer,link,report,error,throwable,then,that,exception,is,thrown,rather,than,an,element,being,returned,return,the,next,element,buffer,of,records,never,null,throws,closed,exception,thrown,if,the,handover,was,link,close,closed,throws,exception,rethrows,exceptions,from,the,link,report,error,throwable,method;nonnull,public,consumer,records,byte,byte,poll,next,throws,exception,synchronized,lock,while,next,null,error,null,lock,wait,consumer,records,byte,byte,n,next,if,n,null,next,null,lock,notify,all,return,n,else,exception,utils,rethrow,exception,error,error,get,message,return,consumer,records,empty
Handover -> @Override 	public void close();1480685315;Closes the handover. Both the {@link #produce(ConsumerRecords)} method and the_{@link #pollNext()} will throw a {@link ClosedException} on any currently blocking and_future invocations.__<p>If an exception was previously reported via the {@link #reportError(Throwable)} method,_that exception will not be overridden. The consumer thread will throw that exception upon_calling {@link #pollNext()}, rather than the {@code ClosedException}.;@Override_	public void close() {_		synchronized (lock) {_			next = null__			wakeupProducer = false___			if (error == null) {_				error = new ClosedException()__			}_			lock.notifyAll()__		}_	};closes,the,handover,both,the,link,produce,consumer,records,method,and,the,link,poll,next,will,throw,a,link,closed,exception,on,any,currently,blocking,and,future,invocations,p,if,an,exception,was,previously,reported,via,the,link,report,error,throwable,method,that,exception,will,not,be,overridden,the,consumer,thread,will,throw,that,exception,upon,calling,link,poll,next,rather,than,the,code,closed,exception;override,public,void,close,synchronized,lock,next,null,wakeup,producer,false,if,error,null,error,new,closed,exception,lock,notify,all
Handover -> @Override 	public void close();1495923077;Closes the handover. Both the {@link #produce(ConsumerRecords)} method and the_{@link #pollNext()} will throw a {@link ClosedException} on any currently blocking and_future invocations.__<p>If an exception was previously reported via the {@link #reportError(Throwable)} method,_that exception will not be overridden. The consumer thread will throw that exception upon_calling {@link #pollNext()}, rather than the {@code ClosedException}.;@Override_	public void close() {_		synchronized (lock) {_			next = null__			wakeupProducer = false___			if (error == null) {_				error = new ClosedException()__			}_			lock.notifyAll()__		}_	};closes,the,handover,both,the,link,produce,consumer,records,method,and,the,link,poll,next,will,throw,a,link,closed,exception,on,any,currently,blocking,and,future,invocations,p,if,an,exception,was,previously,reported,via,the,link,report,error,throwable,method,that,exception,will,not,be,overridden,the,consumer,thread,will,throw,that,exception,upon,calling,link,poll,next,rather,than,the,code,closed,exception;override,public,void,close,synchronized,lock,next,null,wakeup,producer,false,if,error,null,error,new,closed,exception,lock,notify,all
Handover -> @Override 	public void close();1515757409;Closes the handover. Both the {@link #produce(ConsumerRecords)} method and the_{@link #pollNext()} will throw a {@link ClosedException} on any currently blocking and_future invocations.__<p>If an exception was previously reported via the {@link #reportError(Throwable)} method,_that exception will not be overridden. The consumer thread will throw that exception upon_calling {@link #pollNext()}, rather than the {@code ClosedException}.;@Override_	public void close() {_		synchronized (lock) {_			next = null__			wakeupProducer = false___			if (error == null) {_				error = new ClosedException()__			}_			lock.notifyAll()__		}_	};closes,the,handover,both,the,link,produce,consumer,records,method,and,the,link,poll,next,will,throw,a,link,closed,exception,on,any,currently,blocking,and,future,invocations,p,if,an,exception,was,previously,reported,via,the,link,report,error,throwable,method,that,exception,will,not,be,overridden,the,consumer,thread,will,throw,that,exception,upon,calling,link,poll,next,rather,than,the,code,closed,exception;override,public,void,close,synchronized,lock,next,null,wakeup,producer,false,if,error,null,error,new,closed,exception,lock,notify,all
Handover -> public void wakeupProducer();1480685315;Wakes the producer thread up. If the producer thread is currently blocked in_the {@link #produce(ConsumerRecords)} method, it will exit the method throwing_a {@link WakeupException}.;public void wakeupProducer() {_		synchronized (lock) {_			wakeupProducer = true__			lock.notifyAll()__		}_	};wakes,the,producer,thread,up,if,the,producer,thread,is,currently,blocked,in,the,link,produce,consumer,records,method,it,will,exit,the,method,throwing,a,link,wakeup,exception;public,void,wakeup,producer,synchronized,lock,wakeup,producer,true,lock,notify,all
Handover -> public void wakeupProducer();1495923077;Wakes the producer thread up. If the producer thread is currently blocked in_the {@link #produce(ConsumerRecords)} method, it will exit the method throwing_a {@link WakeupException}.;public void wakeupProducer() {_		synchronized (lock) {_			wakeupProducer = true__			lock.notifyAll()__		}_	};wakes,the,producer,thread,up,if,the,producer,thread,is,currently,blocked,in,the,link,produce,consumer,records,method,it,will,exit,the,method,throwing,a,link,wakeup,exception;public,void,wakeup,producer,synchronized,lock,wakeup,producer,true,lock,notify,all
Handover -> public void wakeupProducer();1515757409;Wakes the producer thread up. If the producer thread is currently blocked in_the {@link #produce(ConsumerRecords)} method, it will exit the method throwing_a {@link WakeupException}.;public void wakeupProducer() {_		synchronized (lock) {_			wakeupProducer = true__			lock.notifyAll()__		}_	};wakes,the,producer,thread,up,if,the,producer,thread,is,currently,blocked,in,the,link,produce,consumer,records,method,it,will,exit,the,method,throwing,a,link,wakeup,exception;public,void,wakeup,producer,synchronized,lock,wakeup,producer,true,lock,notify,all
Handover -> public void reportError(Throwable t);1480685315;Reports an exception. The consumer will throw the given exception immediately, if_it is currently blocked in the {@link #pollNext()} method, or the next time it_calls that method.__<p>After this method has been called, no call to either {@link #produce(ConsumerRecords)}_or {@link #pollNext()} will ever return regularly any more, but will always return_exceptionally.__<p>If another exception was already reported, this method does nothing.__<p>For the producer, the Handover will appear as if it was {@link #close() closed}.__@param t The exception to report.;public void reportError(Throwable t) {_		checkNotNull(t)___		synchronized (lock) {_			_			if (error == null) {_				error = t__			}_			next = null__			lock.notifyAll()__		}_	};reports,an,exception,the,consumer,will,throw,the,given,exception,immediately,if,it,is,currently,blocked,in,the,link,poll,next,method,or,the,next,time,it,calls,that,method,p,after,this,method,has,been,called,no,call,to,either,link,produce,consumer,records,or,link,poll,next,will,ever,return,regularly,any,more,but,will,always,return,exceptionally,p,if,another,exception,was,already,reported,this,method,does,nothing,p,for,the,producer,the,handover,will,appear,as,if,it,was,link,close,closed,param,t,the,exception,to,report;public,void,report,error,throwable,t,check,not,null,t,synchronized,lock,if,error,null,error,t,next,null,lock,notify,all
Handover -> public void reportError(Throwable t);1495923077;Reports an exception. The consumer will throw the given exception immediately, if_it is currently blocked in the {@link #pollNext()} method, or the next time it_calls that method.__<p>After this method has been called, no call to either {@link #produce(ConsumerRecords)}_or {@link #pollNext()} will ever return regularly any more, but will always return_exceptionally.__<p>If another exception was already reported, this method does nothing.__<p>For the producer, the Handover will appear as if it was {@link #close() closed}.__@param t The exception to report.;public void reportError(Throwable t) {_		checkNotNull(t)___		synchronized (lock) {_			_			if (error == null) {_				error = t__			}_			next = null__			lock.notifyAll()__		}_	};reports,an,exception,the,consumer,will,throw,the,given,exception,immediately,if,it,is,currently,blocked,in,the,link,poll,next,method,or,the,next,time,it,calls,that,method,p,after,this,method,has,been,called,no,call,to,either,link,produce,consumer,records,or,link,poll,next,will,ever,return,regularly,any,more,but,will,always,return,exceptionally,p,if,another,exception,was,already,reported,this,method,does,nothing,p,for,the,producer,the,handover,will,appear,as,if,it,was,link,close,closed,param,t,the,exception,to,report;public,void,report,error,throwable,t,check,not,null,t,synchronized,lock,if,error,null,error,t,next,null,lock,notify,all
Handover -> public void reportError(Throwable t);1515757409;Reports an exception. The consumer will throw the given exception immediately, if_it is currently blocked in the {@link #pollNext()} method, or the next time it_calls that method.__<p>After this method has been called, no call to either {@link #produce(ConsumerRecords)}_or {@link #pollNext()} will ever return regularly any more, but will always return_exceptionally.__<p>If another exception was already reported, this method does nothing.__<p>For the producer, the Handover will appear as if it was {@link #close() closed}.__@param t The exception to report.;public void reportError(Throwable t) {_		checkNotNull(t)___		synchronized (lock) {_			_			if (error == null) {_				error = t__			}_			next = null__			lock.notifyAll()__		}_	};reports,an,exception,the,consumer,will,throw,the,given,exception,immediately,if,it,is,currently,blocked,in,the,link,poll,next,method,or,the,next,time,it,calls,that,method,p,after,this,method,has,been,called,no,call,to,either,link,produce,consumer,records,or,link,poll,next,will,ever,return,regularly,any,more,but,will,always,return,exceptionally,p,if,another,exception,was,already,reported,this,method,does,nothing,p,for,the,producer,the,handover,will,appear,as,if,it,was,link,close,closed,param,t,the,exception,to,report;public,void,report,error,throwable,t,check,not,null,t,synchronized,lock,if,error,null,error,t,next,null,lock,notify,all
