commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected void initializeConnections() {     this.kafkaConsumer = new KafkaConsumer<>(kafkaProperties). }
false;protected;0;9;;@Override protected List<String> getAllTopics() throws WakeupException {     try {         return new ArrayList<>(kafkaConsumer.listTopics().keySet()).     } catch (org.apache.kafka.common.errors.WakeupException e) {         // rethrow our own wakeup exception         throw new WakeupException().     } }
false;protected;1;17;;@Override protected List<KafkaTopicPartition> getAllPartitionsForTopics(List<String> topics) throws WakeupException {     List<KafkaTopicPartition> partitions = new LinkedList<>().     try {         for (String topic : topics) {             for (PartitionInfo partitionInfo : kafkaConsumer.partitionsFor(topic)) {                 partitions.add(new KafkaTopicPartition(partitionInfo.topic(), partitionInfo.partition())).             }         }     } catch (org.apache.kafka.common.errors.WakeupException e) {         // rethrow our own wakeup exception         throw new WakeupException().     }     return partitions. }
false;protected;0;6;;@Override protected void wakeupConnections() {     if (this.kafkaConsumer != null) {         this.kafkaConsumer.wakeup().     } }
false;protected;0;9;;@Override protected void closeConnections() throws Exception {     if (this.kafkaConsumer != null) {         this.kafkaConsumer.close().         // de-reference the consumer to avoid closing multiple times         this.kafkaConsumer = null.     } }
