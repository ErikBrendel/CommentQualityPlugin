commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Creates an Elasticsearch client implementing {@link AutoCloseable}.  *  * @param clientConfig The configuration to use when constructing the client.  * @return The created client.  */ ;/**  * Creates an Elasticsearch client implementing {@link AutoCloseable}.  *  * @param clientConfig The configuration to use when constructing the client.  * @return The created client.  */ C createClient(Map<String, String> clientConfig) throws IOException.
true;;2;1;/**  * Creates a {@link BulkProcessor.Builder} for creating the bulk processor.  *  * @param client the Elasticsearch client.  * @param listener the bulk processor listender.  * @return the bulk processor builder.  */ ;/**  * Creates a {@link BulkProcessor.Builder} for creating the bulk processor.  *  * @param client the Elasticsearch client.  * @param listener the bulk processor listender.  * @return the bulk processor builder.  */ BulkProcessor.Builder createBulkProcessorBuilder(C client, BulkProcessor.Listener listener).
true;;1;1;/**  * Extracts the cause of failure of a bulk item action.  *  * @param bulkItemResponse the bulk item response to extract cause of failure  * @return the extracted {@link Throwable} from the response ({@code null} is the response is successful).  */ ;/**  * Extracts the cause of failure of a bulk item action.  *  * @param bulkItemResponse the bulk item response to extract cause of failure  * @return the extracted {@link Throwable} from the response ({@code null} is the response is successful).  */ @Nullable Throwable extractFailureCauseFromBulkItemResponse(BulkItemResponse bulkItemResponse).
true;;2;3;/**  * Set backoff-related configurations on the provided {@link BulkProcessor.Builder}.  * The builder will be later on used to instantiate the actual {@link BulkProcessor}.  *  * @param builder the {@link BulkProcessor.Builder} to configure.  * @param flushBackoffPolicy user-provided backoff retry settings ({@code null} if the user disabled backoff retries).  */ ;/**  * Set backoff-related configurations on the provided {@link BulkProcessor.Builder}.  * The builder will be later on used to instantiate the actual {@link BulkProcessor}.  *  * @param builder the {@link BulkProcessor.Builder} to configure.  * @param flushBackoffPolicy user-provided backoff retry settings ({@code null} if the user disabled backoff retries).  */ void configureBulkProcessorBackoff(BulkProcessor.Builder builder, @Nullable ElasticsearchSinkBase.BulkFlushBackoffPolicy flushBackoffPolicy).
true;default;3;9;/**  * Creates a {@link RequestIndexer} that is able to work with {@link BulkProcessor} binary compatible.  */ ;/**  * Creates a {@link RequestIndexer} that is able to work with {@link BulkProcessor} binary compatible.  */ default RequestIndexer createBulkProcessorIndexer(BulkProcessor bulkProcessor, boolean flushOnCheckpoint, AtomicLong numPendingRequestsRef) {     return new PreElasticsearch6BulkProcessorIndexer(bulkProcessor, flushOnCheckpoint, numPendingRequestsRef). }
true;default;0;3;/**  * Perform any necessary state cleanup.  */ ;/**  * Perform any necessary state cleanup.  */ default void cleanup() { // nothing to cleanup by default }
