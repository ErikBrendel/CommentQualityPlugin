commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public void validate(DescriptorProperties properties) {     super.validate(properties).     properties.validateValue(CONNECTOR_TYPE, CONNECTOR_TYPE_VALUE_ELASTICSEARCH, false).     validateVersion(properties).     validateHosts(properties).     validateGeneralProperties(properties).     validateFailureHandler(properties).     validateBulkFlush(properties).     validateConnectionProperties(properties). }
false;private;1;6;;private void validateVersion(DescriptorProperties properties) {     properties.validateEnumValues(CONNECTOR_VERSION, false, Collections.singletonList(CONNECTOR_VERSION_VALUE_6)). }
false;private;1;7;;private void validateHosts(DescriptorProperties properties) {     final Map<String, Consumer<String>> hostsValidators = new HashMap<>().     hostsValidators.put(CONNECTOR_HOSTS_HOSTNAME, (key) -> properties.validateString(key, false, 1)).     hostsValidators.put(CONNECTOR_HOSTS_PORT, (key) -> properties.validateInt(key, false, 0, 65535)).     hostsValidators.put(CONNECTOR_HOSTS_PROTOCOL, (key) -> properties.validateString(key, false, 1)).     properties.validateFixedIndexedProperties(CONNECTOR_HOSTS, false, hostsValidators). }
false;private;1;6;;private void validateGeneralProperties(DescriptorProperties properties) {     properties.validateString(CONNECTOR_INDEX, false, 1).     properties.validateString(CONNECTOR_DOCUMENT_TYPE, false, 1).     properties.validateString(CONNECTOR_KEY_DELIMITER, true).     properties.validateString(CONNECTOR_KEY_NULL_LITERAL, true). }
false;private;1;9;;private void validateFailureHandler(DescriptorProperties properties) {     final Map<String, Consumer<String>> failureHandlerValidators = new HashMap<>().     failureHandlerValidators.put(CONNECTOR_FAILURE_HANDLER_VALUE_FAIL, noValidation()).     failureHandlerValidators.put(CONNECTOR_FAILURE_HANDLER_VALUE_IGNORE, noValidation()).     failureHandlerValidators.put(CONNECTOR_FAILURE_HANDLER_VALUE_RETRY, noValidation()).     failureHandlerValidators.put(CONNECTOR_FAILURE_HANDLER_VALUE_CUSTOM, key -> properties.validateString(CONNECTOR_FAILURE_HANDLER_CLASS, false, 1)).     properties.validateEnum(CONNECTOR_FAILURE_HANDLER, true, failureHandlerValidators). }
false;private;1;14;;private void validateBulkFlush(DescriptorProperties properties) {     properties.validateBoolean(CONNECTOR_FLUSH_ON_CHECKPOINT, true).     properties.validateInt(CONNECTOR_BULK_FLUSH_MAX_ACTIONS, true, 1).     // only allow MB precision     properties.validateMemorySize(CONNECTOR_BULK_FLUSH_MAX_SIZE, true, 1024 * 1024).     properties.validateLong(CONNECTOR_BULK_FLUSH_INTERVAL, true, 0).     properties.validateEnumValues(CONNECTOR_BULK_FLUSH_BACKOFF_TYPE, true, Arrays.asList(CONNECTOR_BULK_FLUSH_BACKOFF_TYPE_VALUE_DISABLED, CONNECTOR_BULK_FLUSH_BACKOFF_TYPE_VALUE_CONSTANT, CONNECTOR_BULK_FLUSH_BACKOFF_TYPE_VALUE_EXPONENTIAL)).     properties.validateInt(CONNECTOR_BULK_FLUSH_BACKOFF_MAX_RETRIES, true, 1).     properties.validateLong(CONNECTOR_BULK_FLUSH_BACKOFF_DELAY, true, 0). }
false;private;1;4;;private void validateConnectionProperties(DescriptorProperties properties) {     properties.validateInt(CONNECTOR_CONNECTION_MAX_RETRY_TIMEOUT, true, 1).     properties.validateString(CONNECTOR_CONNECTION_PATH_PREFIX, true). }
