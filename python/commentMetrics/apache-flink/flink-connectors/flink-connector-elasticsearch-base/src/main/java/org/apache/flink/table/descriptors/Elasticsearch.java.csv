commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Sets the Elasticsearch version to be used. Required.  *  * @param version Elasticsearch version. E.g., "6".  */ ;/**  * Sets the Elasticsearch version to be used. Required.  *  * @param version Elasticsearch version. E.g., "6".  */ public Elasticsearch version(String version) {     internalProperties.putString(CONNECTOR_VERSION, version).     return this. }
true;public;3;9;/**  * Adds an Elasticsearch host to connect to. Required.  *  * <p>Multiple hosts can be declared by calling this method multiple times.  *  * @param hostname connection hostname  * @param port connection port  * @param protocol connection protocol. e.g. "http"  */ ;/**  * Adds an Elasticsearch host to connect to. Required.  *  * <p>Multiple hosts can be declared by calling this method multiple times.  *  * @param hostname connection hostname  * @param port connection port  * @param protocol connection protocol. e.g. "http"  */ public Elasticsearch host(String hostname, int port, String protocol) {     final Host host = new Host(Preconditions.checkNotNull(hostname), port, Preconditions.checkNotNull(protocol)).     hosts.add(host).     return this. }
true;public;1;4;/**  * Declares the Elasticsearch index for every record. Required.  *  * @param index Elasticsearch index  */ ;/**  * Declares the Elasticsearch index for every record. Required.  *  * @param index Elasticsearch index  */ public Elasticsearch index(String index) {     internalProperties.putString(CONNECTOR_INDEX, index).     return this. }
true;public;1;4;/**  * Declares the Elasticsearch document type for every record. Required.  *  * @param documentType Elasticsearch document type  */ ;/**  * Declares the Elasticsearch document type for every record. Required.  *  * @param documentType Elasticsearch document type  */ public Elasticsearch documentType(String documentType) {     internalProperties.putString(CONNECTOR_DOCUMENT_TYPE, documentType).     return this. }
true;public;1;4;/**  * Sets a custom key delimiter in case the Elasticsearch ID needs to be constructed from  * multiple fields. Optional.  *  * @param keyDelimiter key delimiter. e.g., "$" would result in IDs "KEY1$KEY2$KEY3"  */ ;/**  * Sets a custom key delimiter in case the Elasticsearch ID needs to be constructed from  * multiple fields. Optional.  *  * @param keyDelimiter key delimiter. e.g., "$" would result in IDs "KEY1$KEY2$KEY3"  */ public Elasticsearch keyDelimiter(String keyDelimiter) {     internalProperties.putString(CONNECTOR_KEY_DELIMITER, keyDelimiter).     return this. }
true;public;1;4;/**  * Sets a custom representation for null fields in keys. Optional.  *  * @param keyNullLiteral key null literal string. e.g. "N/A" would result in IDs "KEY1_N/A_KEY3"  */ ;/**  * Sets a custom representation for null fields in keys. Optional.  *  * @param keyNullLiteral key null literal string. e.g. "N/A" would result in IDs "KEY1_N/A_KEY3"  */ public Elasticsearch keyNullLiteral(String keyNullLiteral) {     internalProperties.putString(CONNECTOR_KEY_NULL_LITERAL, keyNullLiteral).     return this. }
true;public;0;4;/**  * Configures a failure handling strategy in case a request to Elasticsearch fails.  *  * <p>This strategy throws an exception if a request fails and thus causes a job failure.  */ ;/**  * Configures a failure handling strategy in case a request to Elasticsearch fails.  *  * <p>This strategy throws an exception if a request fails and thus causes a job failure.  */ public Elasticsearch failureHandlerFail() {     internalProperties.putString(CONNECTOR_FAILURE_HANDLER, ElasticsearchValidator.CONNECTOR_FAILURE_HANDLER_VALUE_FAIL).     return this. }
true;public;0;4;/**  * Configures a failure handling strategy in case a request to Elasticsearch fails.  *  * <p>This strategy ignores failures and drops the request.  */ ;/**  * Configures a failure handling strategy in case a request to Elasticsearch fails.  *  * <p>This strategy ignores failures and drops the request.  */ public Elasticsearch failureHandlerIgnore() {     internalProperties.putString(CONNECTOR_FAILURE_HANDLER, ElasticsearchValidator.CONNECTOR_FAILURE_HANDLER_VALUE_IGNORE).     return this. }
true;public;0;4;/**  * Configures a failure handling strategy in case a request to Elasticsearch fails.  *  * <p>This strategy re-adds requests that have failed due to queue capacity saturation.  */ ;/**  * Configures a failure handling strategy in case a request to Elasticsearch fails.  *  * <p>This strategy re-adds requests that have failed due to queue capacity saturation.  */ public Elasticsearch failureHandlerRetryRejected() {     internalProperties.putString(CONNECTOR_FAILURE_HANDLER, ElasticsearchValidator.CONNECTOR_FAILURE_HANDLER_VALUE_RETRY).     return this. }
true;public;1;5;/**  * Configures a failure handling strategy in case a request to Elasticsearch fails.  *  * <p>This strategy allows for custom failure handling using a {@link ActionRequestFailureHandler}.  */ ;/**  * Configures a failure handling strategy in case a request to Elasticsearch fails.  *  * <p>This strategy allows for custom failure handling using a {@link ActionRequestFailureHandler}.  */ public Elasticsearch failureHandlerCustom(Class<? extends ActionRequestFailureHandler> failureHandlerClass) {     internalProperties.putString(CONNECTOR_FAILURE_HANDLER, ElasticsearchValidator.CONNECTOR_FAILURE_HANDLER_VALUE_CUSTOM).     internalProperties.putClass(CONNECTOR_FAILURE_HANDLER_CLASS, failureHandlerClass).     return this. }
true;public;0;4;/**  * Disables flushing on checkpoint. When disabled, a sink will not wait for all pending action  * requests to be acknowledged by Elasticsearch on checkpoints.  *  * <p>Note: If flushing on checkpoint is disabled, a Elasticsearch sink does NOT  * provide any strong guarantees for at-least-once delivery of action requests.  */ ;/**  * Disables flushing on checkpoint. When disabled, a sink will not wait for all pending action  * requests to be acknowledged by Elasticsearch on checkpoints.  *  * <p>Note: If flushing on checkpoint is disabled, a Elasticsearch sink does NOT  * provide any strong guarantees for at-least-once delivery of action requests.  */ public Elasticsearch disableFlushOnCheckpoint() {     internalProperties.putBoolean(CONNECTOR_FLUSH_ON_CHECKPOINT, false).     return this. }
true;public;1;4;/**  * Configures how to buffer elements before sending them in bulk to the cluster for efficiency.  *  * <p>Sets the maximum number of actions to buffer for each bulk request.  *  * @param maxActions the maximum number of actions to buffer per bulk request.  */ ;/**  * Configures how to buffer elements before sending them in bulk to the cluster for efficiency.  *  * <p>Sets the maximum number of actions to buffer for each bulk request.  *  * @param maxActions the maximum number of actions to buffer per bulk request.  */ public Elasticsearch bulkFlushMaxActions(int maxActions) {     internalProperties.putInt(CONNECTOR_BULK_FLUSH_MAX_ACTIONS, maxActions).     return this. }
true;public;1;4;/**  * Configures how to buffer elements before sending them in bulk to the cluster for efficiency.  *  * <p>Sets the maximum size of buffered actions per bulk request (using the syntax of {@link MemorySize}).  */ ;/**  * Configures how to buffer elements before sending them in bulk to the cluster for efficiency.  *  * <p>Sets the maximum size of buffered actions per bulk request (using the syntax of {@link MemorySize}).  */ public Elasticsearch bulkFlushMaxSize(String maxSize) {     internalProperties.putMemorySize(CONNECTOR_BULK_FLUSH_MAX_SIZE, MemorySize.parse(maxSize, MemorySize.MemoryUnit.BYTES)).     return this. }
true;public;1;4;/**  * Configures how to buffer elements before sending them in bulk to the cluster for efficiency.  *  * <p>Sets the bulk flush interval (in milliseconds).  *  * @param interval bulk flush interval (in milliseconds).  */ ;/**  * Configures how to buffer elements before sending them in bulk to the cluster for efficiency.  *  * <p>Sets the bulk flush interval (in milliseconds).  *  * @param interval bulk flush interval (in milliseconds).  */ public Elasticsearch bulkFlushInterval(long interval) {     internalProperties.putLong(CONNECTOR_BULK_FLUSH_INTERVAL, interval).     return this. }
true;public;0;6;/**  * Configures how to buffer elements before sending them in bulk to the cluster for efficiency.  *  * <p>Sets a constant backoff type to use when flushing bulk requests.  */ ;/**  * Configures how to buffer elements before sending them in bulk to the cluster for efficiency.  *  * <p>Sets a constant backoff type to use when flushing bulk requests.  */ public Elasticsearch bulkFlushBackoffConstant() {     internalProperties.putString(CONNECTOR_BULK_FLUSH_BACKOFF_TYPE, ElasticsearchValidator.CONNECTOR_BULK_FLUSH_BACKOFF_TYPE_VALUE_CONSTANT).     return this. }
true;public;0;6;/**  * Configures how to buffer elements before sending them in bulk to the cluster for efficiency.  *  * <p>Sets an exponential backoff type to use when flushing bulk requests.  */ ;/**  * Configures how to buffer elements before sending them in bulk to the cluster for efficiency.  *  * <p>Sets an exponential backoff type to use when flushing bulk requests.  */ public Elasticsearch bulkFlushBackoffExponential() {     internalProperties.putString(CONNECTOR_BULK_FLUSH_BACKOFF_TYPE, ElasticsearchValidator.CONNECTOR_BULK_FLUSH_BACKOFF_TYPE_VALUE_EXPONENTIAL).     return this. }
true;public;1;4;/**  * Configures how to buffer elements before sending them in bulk to the cluster for efficiency.  *  * <p>Sets the maximum number of retries for a backoff attempt when flushing bulk requests.  *  * <p>Make sure to enable backoff by selecting a strategy ({@link #bulkFlushBackoffConstant()} or  * {@link #bulkFlushBackoffExponential()}).  *  * @param maxRetries the maximum number of retries.  */ ;/**  * Configures how to buffer elements before sending them in bulk to the cluster for efficiency.  *  * <p>Sets the maximum number of retries for a backoff attempt when flushing bulk requests.  *  * <p>Make sure to enable backoff by selecting a strategy ({@link #bulkFlushBackoffConstant()} or  * {@link #bulkFlushBackoffExponential()}).  *  * @param maxRetries the maximum number of retries.  */ public Elasticsearch bulkFlushBackoffMaxRetries(int maxRetries) {     internalProperties.putInt(CONNECTOR_BULK_FLUSH_BACKOFF_MAX_RETRIES, maxRetries).     return this. }
true;public;1;4;/**  * Configures how to buffer elements before sending them in bulk to the cluster for efficiency.  *  * <p>Sets the amount of delay between each backoff attempt when flushing bulk requests (in milliseconds).  *  * <p>Make sure to enable backoff by selecting a strategy ({@link #bulkFlushBackoffConstant()} or  * {@link #bulkFlushBackoffExponential()}).  *  * @param delay delay between each backoff attempt (in milliseconds).  */ ;/**  * Configures how to buffer elements before sending them in bulk to the cluster for efficiency.  *  * <p>Sets the amount of delay between each backoff attempt when flushing bulk requests (in milliseconds).  *  * <p>Make sure to enable backoff by selecting a strategy ({@link #bulkFlushBackoffConstant()} or  * {@link #bulkFlushBackoffExponential()}).  *  * @param delay delay between each backoff attempt (in milliseconds).  */ public Elasticsearch bulkFlushBackoffDelay(long delay) {     internalProperties.putLong(CONNECTOR_BULK_FLUSH_BACKOFF_DELAY, delay).     return this. }
true;public;1;4;/**  * Sets connection properties to be used during REST communication to Elasticsearch.  *  * <p>Sets the maximum timeout (in milliseconds) in case of multiple retries of the same request.  *  * @param maxRetryTimeout maximum timeout (in milliseconds)  */ ;/**  * Sets connection properties to be used during REST communication to Elasticsearch.  *  * <p>Sets the maximum timeout (in milliseconds) in case of multiple retries of the same request.  *  * @param maxRetryTimeout maximum timeout (in milliseconds)  */ public Elasticsearch connectionMaxRetryTimeout(int maxRetryTimeout) {     internalProperties.putInt(CONNECTOR_CONNECTION_MAX_RETRY_TIMEOUT, maxRetryTimeout).     return this. }
true;public;1;4;/**  * Sets connection properties to be used during REST communication to Elasticsearch.  *  * <p>Adds a path prefix to every REST communication.  *  * @param pathPrefix prefix string to be added to every REST communication  */ ;/**  * Sets connection properties to be used during REST communication to Elasticsearch.  *  * <p>Adds a path prefix to every REST communication.  *  * @param pathPrefix prefix string to be added to every REST communication  */ public Elasticsearch connectionPathPrefix(String pathPrefix) {     internalProperties.putString(CONNECTOR_CONNECTION_PATH_PREFIX, pathPrefix).     return this. }
false;protected;0;15;;@Override protected Map<String, String> toConnectorProperties() {     final DescriptorProperties properties = new DescriptorProperties().     properties.putProperties(internalProperties).     final List<List<String>> hostValues = hosts.stream().map(host -> Arrays.asList(host.hostname, String.valueOf(host.port), host.protocol)).collect(Collectors.toList()).     properties.putIndexedFixedProperties(CONNECTOR_HOSTS, Arrays.asList(CONNECTOR_HOSTS_HOSTNAME, CONNECTOR_HOSTS_PORT, CONNECTOR_HOSTS_PROTOCOL), hostValues).     return properties.asMap(). }
