commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void run(SourceFunction.SourceContext<Tuple2<Integer, String>> ctx) throws Exception {     for (int i = 0. i < NUM_ELEMENTS && running. i++) {         ctx.collect(Tuple2.of(i, DATA_PREFIX + i)).     } }
false;public;0;4;;@Override public void cancel() {     running = false. }
false;public;1;6;;public IndexRequest createIndexRequest(Tuple2<Integer, String> element) {     Map<String, Object> json = new HashMap<>().     json.put(DATA_FIELD_NAME, element.f1).     return new IndexRequest(index, TYPE_NAME, element.f0.toString()).source(json). }
false;public;3;4;;@Override public void process(Tuple2<Integer, String> element, RuntimeContext ctx, RequestIndexer indexer) {     indexer.add(createIndexRequest(element)). }
true;public,static;2;6;/**  * Verify the results in an Elasticsearch index. The results must first be produced into the index  * using a {@link TestElasticsearchSinkFunction}.  *  * @param client The client to use to connect to Elasticsearch  * @param index The index to check  */ ;/**  * Verify the results in an Elasticsearch index. The results must first be produced into the index  * using a {@link TestElasticsearchSinkFunction}.  *  * @param client The client to use to connect to Elasticsearch  * @param index The index to check  */ public static void verifyProducedSinkData(Client client, String index) {     for (int i = 0. i < NUM_ELEMENTS. i++) {         GetResponse response = client.get(new GetRequest(index, TYPE_NAME, Integer.toString(i))).actionGet().         Assert.assertEquals(DATA_PREFIX + i, response.getSource().get(DATA_FIELD_NAME)).     } }
