commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;15;;@BeforeClass public static void prepare() throws Exception {     LOG.info("-------------------------------------------------------------------------").     LOG.info("    Starting embedded Elasticsearch node ").     LOG.info("-------------------------------------------------------------------------").     // dynamically load version-specific implementation of the Elasticsearch embedded node environment     Class<?> clazz = Class.forName("org.apache.flink.streaming.connectors.elasticsearch.EmbeddedElasticsearchNodeEnvironmentImpl").     embeddedNodeEnv = (EmbeddedElasticsearchNodeEnvironment) InstantiationUtil.instantiate(clazz).     embeddedNodeEnv.start(tempFolder.newFolder(), CLUSTER_NAME). }
false;public,static;0;10;;@AfterClass public static void shutdown() throws Exception {     LOG.info("-------------------------------------------------------------------------").     LOG.info("    Shutting down embedded Elasticsearch node ").     LOG.info("-------------------------------------------------------------------------").     embeddedNodeEnv.close(). }
true;public;0;20;/**  * Tests that the Elasticsearch sink works properly.  */ ;/**  * Tests that the Elasticsearch sink works properly.  */ public void runElasticsearchSinkTest() throws Exception {     final String index = "elasticsearch-sink-test-index".     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     DataStreamSource<Tuple2<Integer, String>> source = env.addSource(new SourceSinkDataTestKit.TestDataSourceFunction()).     source.addSink(createElasticsearchSinkForEmbeddedNode(1, CLUSTER_NAME, new SourceSinkDataTestKit.TestElasticsearchSinkFunction(index))).     env.execute("Elasticsearch Sink Test").     // verify the results     Client client = embeddedNodeEnv.getClient().     SourceSinkDataTestKit.verifyProducedSinkData(client, index).     client.close(). }
true;public;0;18;/**  * Tests that the Elasticsearch sink fails eagerly if the provided list of addresses is {@code null}.  */ ;/**  * Tests that the Elasticsearch sink fails eagerly if the provided list of addresses is {@code null}.  */ public void runNullAddressesTest() throws Exception {     Map<String, String> userConfig = new HashMap<>().     userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, "1").     userConfig.put("cluster.name", CLUSTER_NAME).     try {         createElasticsearchSink(1, CLUSTER_NAME, null, new SourceSinkDataTestKit.TestElasticsearchSinkFunction("test")).     } catch (IllegalArgumentException | NullPointerException expectedException) {         // test passes         return.     }     fail(). }
true;public;0;18;/**  * Tests that the Elasticsearch sink fails eagerly if the provided list of addresses is empty.  */ ;/**  * Tests that the Elasticsearch sink fails eagerly if the provided list of addresses is empty.  */ public void runEmptyAddressesTest() throws Exception {     Map<String, String> userConfig = new HashMap<>().     userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, "1").     userConfig.put("cluster.name", CLUSTER_NAME).     try {         createElasticsearchSink(1, CLUSTER_NAME, Collections.emptyList(), new SourceSinkDataTestKit.TestElasticsearchSinkFunction("test")).     } catch (IllegalArgumentException expectedException) {         // test passes         return.     }     fail(). }
true;public;0;24;/**  * Tests whether the Elasticsearch sink fails when there is no cluster to connect to.  */ ;/**  * Tests whether the Elasticsearch sink fails when there is no cluster to connect to.  */ public void runInvalidElasticsearchClusterTest() throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     DataStreamSource<Tuple2<Integer, String>> source = env.addSource(new SourceSinkDataTestKit.TestDataSourceFunction()).     Map<String, String> userConfig = new HashMap<>().     userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, "1").     userConfig.put("cluster.name", "invalid-cluster-name").     source.addSink(createElasticsearchSinkForNode(1, "invalid-cluster-name", new SourceSinkDataTestKit.TestElasticsearchSinkFunction("test"), // incorrect ip address     "123.123.123.123")).     try {         env.execute("Elasticsearch Sink Test").     } catch (JobExecutionException expectedException) {         // test passes         return.     }     fail(). }
true;protected;2;7;/**  * Utility method to create a user config map.  */ ;/**  * Utility method to create a user config map.  */ protected Map<String, String> createUserConfig(int bulkFlushMaxActions, String clusterName) {     Map<String, String> userConfig = new HashMap<>().     userConfig.put("cluster.name", clusterName).     userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, String.valueOf(bulkFlushMaxActions)).     return userConfig. }
true;protected,abstract;4;5;/**  * Creates a version-specific Elasticsearch sink, using arbitrary transport addresses.  */ ;/**  * Creates a version-specific Elasticsearch sink, using arbitrary transport addresses.  */ protected abstract ElasticsearchSinkBase<Tuple2<Integer, String>, C> createElasticsearchSink(int bulkFlushMaxActions, String clusterName, List<A> addresses, ElasticsearchSinkFunction<Tuple2<Integer, String>> elasticsearchSinkFunction).
true;protected,abstract;3;4;/**  * Creates a version-specific Elasticsearch sink to connect to a local embedded Elasticsearch node.  *  * <p>This case is singled out from {@link ElasticsearchSinkTestBase#createElasticsearchSink(int, String, List, ElasticsearchSinkFunction)}  * because the Elasticsearch Java API to do so is incompatible across different versions.  */ ;/**  * Creates a version-specific Elasticsearch sink to connect to a local embedded Elasticsearch node.  *  * <p>This case is singled out from {@link ElasticsearchSinkTestBase#createElasticsearchSink(int, String, List, ElasticsearchSinkFunction)}  * because the Elasticsearch Java API to do so is incompatible across different versions.  */ protected abstract ElasticsearchSinkBase<Tuple2<Integer, String>, C> createElasticsearchSinkForEmbeddedNode(int bulkFlushMaxActions, String clusterName, ElasticsearchSinkFunction<Tuple2<Integer, String>> elasticsearchSinkFunction) throws Exception.
true;protected,abstract;4;5;/**  * Creates a version-specific Elasticsearch sink to connect to a specific Elasticsearch node.  */ ;/**  * Creates a version-specific Elasticsearch sink to connect to a specific Elasticsearch node.  */ protected abstract ElasticsearchSinkBase<Tuple2<Integer, String>, C> createElasticsearchSinkForNode(int bulkFlushMaxActions, String clusterName, ElasticsearchSinkFunction<Tuple2<Integer, String>> elasticsearchSinkFunction, String ipAddress) throws Exception.
