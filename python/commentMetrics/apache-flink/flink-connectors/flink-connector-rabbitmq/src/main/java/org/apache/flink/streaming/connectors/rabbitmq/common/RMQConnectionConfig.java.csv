commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return the host to use for connections  */ ;/**  * @return the host to use for connections  */ public String getHost() {     return host. }
true;public;0;3;/**  * @return the port to use for connections  */ ;/**  * @return the port to use for connections  */ public int getPort() {     return port. }
true;public;0;3;/**  * Retrieve the virtual host.  * @return the virtual host to use when connecting to the broker  */ ;/**  * Retrieve the virtual host.  * @return the virtual host to use when connecting to the broker  */ public String getVirtualHost() {     return virtualHost. }
true;public;0;3;/**  * Retrieve the user name.  * @return the AMQP user name to use when connecting to the broker  */ ;/**  * Retrieve the user name.  * @return the AMQP user name to use when connecting to the broker  */ public String getUsername() {     return username. }
true;public;0;3;/**  * Retrieve the password.  * @return the password to use when connecting to the broker  */ ;/**  * Retrieve the password.  * @return the password to use when connecting to the broker  */ public String getPassword() {     return password. }
true;public;0;3;/**  * Retrieve the URI.  * @return the connection URI when connecting to the broker  */ ;/**  * Retrieve the URI.  * @return the connection URI when connecting to the broker  */ public String getUri() {     return uri. }
true;public;0;3;/**  * Returns automatic connection recovery interval in milliseconds.  * @return how long will automatic recovery wait before attempting to reconnect, in ms. default is 5000  */ ;/**  * Returns automatic connection recovery interval in milliseconds.  * @return how long will automatic recovery wait before attempting to reconnect, in ms. default is 5000  */ public Integer getNetworkRecoveryInterval() {     return networkRecoveryInterval. }
true;public;0;3;/**  * Returns true if automatic connection recovery is enabled, false otherwise.  * @return true if automatic connection recovery is enabled, false otherwise  */ ;/**  * Returns true if automatic connection recovery is enabled, false otherwise.  * @return true if automatic connection recovery is enabled, false otherwise  */ public Boolean isAutomaticRecovery() {     return automaticRecovery. }
true;public;0;3;/**  * Returns true if topology recovery is enabled, false otherwise.  * @return true if topology recovery is enabled, false otherwise  */ ;/**  * Returns true if topology recovery is enabled, false otherwise.  * @return true if topology recovery is enabled, false otherwise  */ public Boolean isTopologyRecovery() {     return topologyRecovery. }
true;public;0;3;/**  * Retrieve the connection timeout.  * @return the connection timeout, in milliseconds. zero for infinite  */ ;/**  * Retrieve the connection timeout.  * @return the connection timeout, in milliseconds. zero for infinite  */ public Integer getConnectionTimeout() {     return connectionTimeout. }
true;public;0;3;/**  * Retrieve the requested maximum channel number.  * @return the initially requested maximum channel number. zero for unlimited  */ ;/**  * Retrieve the requested maximum channel number.  * @return the initially requested maximum channel number. zero for unlimited  */ public Integer getRequestedChannelMax() {     return requestedChannelMax. }
true;public;0;3;/**  * Retrieve the requested maximum frame size.  * @return the initially requested maximum frame size, in octets. zero for unlimited  */ ;/**  * Retrieve the requested maximum frame size.  * @return the initially requested maximum frame size, in octets. zero for unlimited  */ public Integer getRequestedFrameMax() {     return requestedFrameMax. }
true;public;0;3;/**  * Retrieve the requested heartbeat interval.  * @return the initially requested heartbeat interval, in seconds. zero for none  */ ;/**  * Retrieve the requested heartbeat interval.  * @return the initially requested heartbeat interval, in seconds. zero for none  */ public Integer getRequestedHeartbeat() {     return requestedHeartbeat. }
true;public;0;50;/**  * @return Connection Factory for RMQ  * @throws URISyntaxException if Malformed URI has been passed  * @throws NoSuchAlgorithmException if the ssl factory could not be created  * @throws KeyManagementException if the ssl context could not be initialized  */ ;/**  * @return Connection Factory for RMQ  * @throws URISyntaxException if Malformed URI has been passed  * @throws NoSuchAlgorithmException if the ssl factory could not be created  * @throws KeyManagementException if the ssl context could not be initialized  */ public ConnectionFactory getConnectionFactory() throws URISyntaxException, NoSuchAlgorithmException, KeyManagementException {     ConnectionFactory factory = new ConnectionFactory().     if (this.uri != null && !this.uri.isEmpty()) {         try {             factory.setUri(this.uri).         } catch (URISyntaxException e) {             LOG.error("Failed to parse uri", e).             throw e.         } catch (KeyManagementException e) {             // this should never happen             LOG.error("Failed to initialize ssl context.", e).             throw e.         } catch (NoSuchAlgorithmException e) {             // this should never happen             LOG.error("Failed to setup ssl factory.", e).             throw e.         }     } else {         factory.setHost(this.host).         factory.setPort(this.port).         factory.setVirtualHost(this.virtualHost).         factory.setUsername(this.username).         factory.setPassword(this.password).     }     if (this.automaticRecovery != null) {         factory.setAutomaticRecoveryEnabled(this.automaticRecovery).     }     if (this.connectionTimeout != null) {         factory.setConnectionTimeout(this.connectionTimeout).     }     if (this.networkRecoveryInterval != null) {         factory.setNetworkRecoveryInterval(this.networkRecoveryInterval).     }     if (this.requestedHeartbeat != null) {         factory.setRequestedHeartbeat(this.requestedHeartbeat).     }     if (this.topologyRecovery != null) {         factory.setTopologyRecoveryEnabled(this.topologyRecovery).     }     if (this.requestedChannelMax != null) {         factory.setRequestedChannelMax(this.requestedChannelMax).     }     if (this.requestedFrameMax != null) {         factory.setRequestedFrameMax(this.requestedFrameMax).     }     return factory. }
true;public;1;4;/**  * Set the target port.  * @param port the default port to use for connections  * @return the Builder  */ ;/**  * Set the target port.  * @param port the default port to use for connections  * @return the Builder  */ public Builder setPort(int port) {     this.port = port.     return this. }
true;public;1;4;/**  * @param host the default host to use for connections  * @return the Builder  */ ;/**  * @param host the default host to use for connections  * @return the Builder  */ public Builder setHost(String host) {     this.host = host.     return this. }
true;public;1;4;/**  * Set the virtual host.  * @param virtualHost the virtual host to use when connecting to the broker  * @return the Builder  */ ;/**  * Set the virtual host.  * @param virtualHost the virtual host to use when connecting to the broker  * @return the Builder  */ public Builder setVirtualHost(String virtualHost) {     this.virtualHost = virtualHost.     return this. }
true;public;1;4;/**  * Set the user name.  * @param username the AMQP user name to use when connecting to the broker  * @return the Builder  */ ;/**  * Set the user name.  * @param username the AMQP user name to use when connecting to the broker  * @return the Builder  */ public Builder setUserName(String username) {     this.username = username.     return this. }
true;public;1;4;/**  * Set the password.  * @param password the password to use when connecting to the broker  * @return the Builder  */ ;/**  * Set the password.  * @param password the password to use when connecting to the broker  * @return the Builder  */ public Builder setPassword(String password) {     this.password = password.     return this. }
true;public;1;4;/**  * Convenience method for setting the fields in an AMQP URI: host,  * port, username, password and virtual host.  If any part of the  * URI is omitted, the ConnectionFactory's corresponding variable  * is left unchanged.  * @param uri is the AMQP URI containing the data  * @return the Builder  */ ;/**  * Convenience method for setting the fields in an AMQP URI: host,  * port, username, password and virtual host.  If any part of the  * URI is omitted, the ConnectionFactory's corresponding variable  * is left unchanged.  * @param uri is the AMQP URI containing the data  * @return the Builder  */ public Builder setUri(String uri) {     this.uri = uri.     return this. }
true;public;1;4;/**  * Enables or disables topology recovery.  * @param topologyRecovery if true, enables topology recovery  * @return the Builder  */ ;/**  * Enables or disables topology recovery.  * @param topologyRecovery if true, enables topology recovery  * @return the Builder  */ public Builder setTopologyRecoveryEnabled(boolean topologyRecovery) {     this.topologyRecovery = topologyRecovery.     return this. }
true;public;1;4;/**  * Set the requested heartbeat.  * @param requestedHeartbeat the initially requested heartbeat interval, in seconds. zero for none  * @return the Builder  */ ;/**  * Set the requested heartbeat.  * @param requestedHeartbeat the initially requested heartbeat interval, in seconds. zero for none  * @return the Builder  */ public Builder setRequestedHeartbeat(int requestedHeartbeat) {     this.requestedHeartbeat = requestedHeartbeat.     return this. }
true;public;1;4;/**  * Set the requested maximum frame size.  * @param requestedFrameMax initially requested maximum frame size, in octets. zero for unlimited  * @return the Builder  */ ;/**  * Set the requested maximum frame size.  * @param requestedFrameMax initially requested maximum frame size, in octets. zero for unlimited  * @return the Builder  */ public Builder setRequestedFrameMax(int requestedFrameMax) {     this.requestedFrameMax = requestedFrameMax.     return this. }
true;public;1;4;/**  * Set the requested maximum channel number.  * @param requestedChannelMax initially requested maximum channel number. zero for unlimited  */ ;/**  * Set the requested maximum channel number.  * @param requestedChannelMax initially requested maximum channel number. zero for unlimited  */ public Builder setRequestedChannelMax(int requestedChannelMax) {     this.requestedChannelMax = requestedChannelMax.     return this. }
true;public;1;4;/**  * Sets connection recovery interval. Default is 5000.  * @param networkRecoveryInterval how long will automatic recovery wait before attempting to reconnect, in ms  * @return the Builder  */ ;/**  * Sets connection recovery interval. Default is 5000.  * @param networkRecoveryInterval how long will automatic recovery wait before attempting to reconnect, in ms  * @return the Builder  */ public Builder setNetworkRecoveryInterval(int networkRecoveryInterval) {     this.networkRecoveryInterval = networkRecoveryInterval.     return this. }
true;public;1;4;/**  * Set the connection timeout.  * @param connectionTimeout connection establishment timeout in milliseconds. zero for infinite  * @return the Builder  */ ;/**  * Set the connection timeout.  * @param connectionTimeout connection establishment timeout in milliseconds. zero for infinite  * @return the Builder  */ public Builder setConnectionTimeout(int connectionTimeout) {     this.connectionTimeout = connectionTimeout.     return this. }
true;public;1;4;/**  * Enables or disables automatic connection recovery.  * @param automaticRecovery if true, enables connection recovery  * @return the Builder  */ ;/**  * Enables or disables automatic connection recovery.  * @param automaticRecovery if true, enables connection recovery  * @return the Builder  */ public Builder setAutomaticRecovery(boolean automaticRecovery) {     this.automaticRecovery = automaticRecovery.     return this. }
true;public;0;11;/**  * The Builder method.  *  * <p>If URI is NULL we use host, port, vHost, username, password combination  * to initialize connection. using  {@link RMQConnectionConfig#RMQConnectionConfig(String, Integer, String, String, String,  * Integer, Boolean, Boolean, Integer, Integer, Integer, Integer)}.  *  * <p>Otherwise the URI will be used to initialize the client connection  * {@link RMQConnectionConfig#RMQConnectionConfig(String, Integer, Boolean, Boolean, Integer, Integer, Integer, Integer)}  * @return RMQConnectionConfig  */ ;/**  * The Builder method.  *  * <p>If URI is NULL we use host, port, vHost, username, password combination  * to initialize connection. using  {@link RMQConnectionConfig#RMQConnectionConfig(String, Integer, String, String, String,  * Integer, Boolean, Boolean, Integer, Integer, Integer, Integer)}.  *  * <p>Otherwise the URI will be used to initialize the client connection  * {@link RMQConnectionConfig#RMQConnectionConfig(String, Integer, Boolean, Boolean, Integer, Integer, Integer, Integer)}  * @return RMQConnectionConfig  */ public RMQConnectionConfig build() {     if (this.uri != null) {         return new RMQConnectionConfig(this.uri, this.networkRecoveryInterval, this.automaticRecovery, this.topologyRecovery, this.connectionTimeout, this.requestedChannelMax, this.requestedFrameMax, this.requestedHeartbeat).     } else {         return new RMQConnectionConfig(this.host, this.port, this.virtualHost, this.username, this.password, this.networkRecoveryInterval, this.automaticRecovery, this.topologyRecovery, this.connectionTimeout, this.requestedChannelMax, this.requestedFrameMax, this.requestedHeartbeat).     } }
