# id;timestamp;commentText;codeText;commentWords;codeWords
RMQSource -> public RMQSource(RMQConnectionConfig rmqConnectionConfig, 					String queueName, boolean usesCorrelationId, DeserializationSchema<OUT> deserializationSchema);1495923066;Creates a new RabbitMQ source. For exactly-once, you must set the correlation ids of messages_at the producer. The correlation id must be unique. Otherwise the behavior of the source is_undefined. If in doubt, set usesCorrelationId to false. When correlation ids are not_used, this source has at-least-once processing semantics when checkpointing is enabled._@param rmqConnectionConfig The RabbiMQ connection configuration {@link RMQConnectionConfig}._@param queueName The queue to receive messages from._@param usesCorrelationId Whether the messages received are supplied with a <b>unique</b>_id to deduplicate messages (in case of failed acknowledgments)._Only used when checkpointing is enabled._@param deserializationSchema A {@link DeserializationSchema} for turning the bytes received_into Java objects.;public RMQSource(RMQConnectionConfig rmqConnectionConfig,_					String queueName, boolean usesCorrelationId, DeserializationSchema<OUT> deserializationSchema) {_		super(String.class)__		this.rmqConnectionConfig = rmqConnectionConfig__		this.queueName = queueName__		this.usesCorrelationId = usesCorrelationId__		this.schema = deserializationSchema__	};creates,a,new,rabbit,mq,source,for,exactly,once,you,must,set,the,correlation,ids,of,messages,at,the,producer,the,correlation,id,must,be,unique,otherwise,the,behavior,of,the,source,is,undefined,if,in,doubt,set,uses,correlation,id,to,false,when,correlation,ids,are,not,used,this,source,has,at,least,once,processing,semantics,when,checkpointing,is,enabled,param,rmq,connection,config,the,rabbi,mq,connection,configuration,link,rmqconnection,config,param,queue,name,the,queue,to,receive,messages,from,param,uses,correlation,id,whether,the,messages,received,are,supplied,with,a,b,unique,b,id,to,deduplicate,messages,in,case,of,failed,acknowledgments,only,used,when,checkpointing,is,enabled,param,deserialization,schema,a,link,deserialization,schema,for,turning,the,bytes,received,into,java,objects;public,rmqsource,rmqconnection,config,rmq,connection,config,string,queue,name,boolean,uses,correlation,id,deserialization,schema,out,deserialization,schema,super,string,class,this,rmq,connection,config,rmq,connection,config,this,queue,name,queue,name,this,uses,correlation,id,uses,correlation,id,this,schema,deserialization,schema
RMQSource -> public RMQSource(RMQConnectionConfig rmqConnectionConfig, 					String queueName, boolean usesCorrelationId, DeserializationSchema<OUT> deserializationSchema);1506441847;Creates a new RabbitMQ source. For exactly-once, you must set the correlation ids of messages_at the producer. The correlation id must be unique. Otherwise the behavior of the source is_undefined. If in doubt, set usesCorrelationId to false. When correlation ids are not_used, this source has at-least-once processing semantics when checkpointing is enabled._@param rmqConnectionConfig The RabbiMQ connection configuration {@link RMQConnectionConfig}._@param queueName The queue to receive messages from._@param usesCorrelationId Whether the messages received are supplied with a <b>unique</b>_id to deduplicate messages (in case of failed acknowledgments)._Only used when checkpointing is enabled._@param deserializationSchema A {@link DeserializationSchema} for turning the bytes received_into Java objects.;public RMQSource(RMQConnectionConfig rmqConnectionConfig,_					String queueName, boolean usesCorrelationId, DeserializationSchema<OUT> deserializationSchema) {_		super(String.class)__		this.rmqConnectionConfig = rmqConnectionConfig__		this.queueName = queueName__		this.usesCorrelationId = usesCorrelationId__		this.schema = deserializationSchema__	};creates,a,new,rabbit,mq,source,for,exactly,once,you,must,set,the,correlation,ids,of,messages,at,the,producer,the,correlation,id,must,be,unique,otherwise,the,behavior,of,the,source,is,undefined,if,in,doubt,set,uses,correlation,id,to,false,when,correlation,ids,are,not,used,this,source,has,at,least,once,processing,semantics,when,checkpointing,is,enabled,param,rmq,connection,config,the,rabbi,mq,connection,configuration,link,rmqconnection,config,param,queue,name,the,queue,to,receive,messages,from,param,uses,correlation,id,whether,the,messages,received,are,supplied,with,a,b,unique,b,id,to,deduplicate,messages,in,case,of,failed,acknowledgments,only,used,when,checkpointing,is,enabled,param,deserialization,schema,a,link,deserialization,schema,for,turning,the,bytes,received,into,java,objects;public,rmqsource,rmqconnection,config,rmq,connection,config,string,queue,name,boolean,uses,correlation,id,deserialization,schema,out,deserialization,schema,super,string,class,this,rmq,connection,config,rmq,connection,config,this,queue,name,queue,name,this,uses,correlation,id,uses,correlation,id,this,schema,deserialization,schema
RMQSource -> public RMQSource(RMQConnectionConfig rmqConnectionConfig, 					String queueName, boolean usesCorrelationId, DeserializationSchema<OUT> deserializationSchema);1509723634;Creates a new RabbitMQ source. For exactly-once, you must set the correlation ids of messages_at the producer. The correlation id must be unique. Otherwise the behavior of the source is_undefined. If in doubt, set usesCorrelationId to false. When correlation ids are not_used, this source has at-least-once processing semantics when checkpointing is enabled._@param rmqConnectionConfig The RabbiMQ connection configuration {@link RMQConnectionConfig}._@param queueName The queue to receive messages from._@param usesCorrelationId Whether the messages received are supplied with a <b>unique</b>_id to deduplicate messages (in case of failed acknowledgments)._Only used when checkpointing is enabled._@param deserializationSchema A {@link DeserializationSchema} for turning the bytes received_into Java objects.;public RMQSource(RMQConnectionConfig rmqConnectionConfig,_					String queueName, boolean usesCorrelationId, DeserializationSchema<OUT> deserializationSchema) {_		super(String.class)__		this.rmqConnectionConfig = rmqConnectionConfig__		this.queueName = queueName__		this.usesCorrelationId = usesCorrelationId__		this.schema = deserializationSchema__	};creates,a,new,rabbit,mq,source,for,exactly,once,you,must,set,the,correlation,ids,of,messages,at,the,producer,the,correlation,id,must,be,unique,otherwise,the,behavior,of,the,source,is,undefined,if,in,doubt,set,uses,correlation,id,to,false,when,correlation,ids,are,not,used,this,source,has,at,least,once,processing,semantics,when,checkpointing,is,enabled,param,rmq,connection,config,the,rabbi,mq,connection,configuration,link,rmqconnection,config,param,queue,name,the,queue,to,receive,messages,from,param,uses,correlation,id,whether,the,messages,received,are,supplied,with,a,b,unique,b,id,to,deduplicate,messages,in,case,of,failed,acknowledgments,only,used,when,checkpointing,is,enabled,param,deserialization,schema,a,link,deserialization,schema,for,turning,the,bytes,received,into,java,objects;public,rmqsource,rmqconnection,config,rmq,connection,config,string,queue,name,boolean,uses,correlation,id,deserialization,schema,out,deserialization,schema,super,string,class,this,rmq,connection,config,rmq,connection,config,this,queue,name,queue,name,this,uses,correlation,id,uses,correlation,id,this,schema,deserialization,schema
RMQSource -> public RMQSource(RMQConnectionConfig rmqConnectionConfig, String queueName, 					DeserializationSchema<OUT> deserializationSchema);1480685315;Creates a new RabbitMQ source with at-least-once message processing guarantee when_checkpointing is enabled. No strong delivery guarantees when checkpointing is disabled._For exactly-once, please use the constructor_{@link RMQSource#RMQSource(RMQConnectionConfig, String, boolean usesCorrelationId, DeserializationSchema)},_set {@param usesCorrelationId} to true and enable checkpointing._@param rmqConnectionConfig The RabbiMQ connection configuration {@link RMQConnectionConfig}._@param queueName  The queue to receive messages from._@param deserializationSchema A {@link DeserializationSchema} for turning the bytes received_into Java objects.;public RMQSource(RMQConnectionConfig rmqConnectionConfig, String queueName,_					DeserializationSchema<OUT> deserializationSchema) {_		this(rmqConnectionConfig, queueName, false, deserializationSchema)__	};creates,a,new,rabbit,mq,source,with,at,least,once,message,processing,guarantee,when,checkpointing,is,enabled,no,strong,delivery,guarantees,when,checkpointing,is,disabled,for,exactly,once,please,use,the,constructor,link,rmqsource,rmqsource,rmqconnection,config,string,boolean,uses,correlation,id,deserialization,schema,set,param,uses,correlation,id,to,true,and,enable,checkpointing,param,rmq,connection,config,the,rabbi,mq,connection,configuration,link,rmqconnection,config,param,queue,name,the,queue,to,receive,messages,from,param,deserialization,schema,a,link,deserialization,schema,for,turning,the,bytes,received,into,java,objects;public,rmqsource,rmqconnection,config,rmq,connection,config,string,queue,name,deserialization,schema,out,deserialization,schema,this,rmq,connection,config,queue,name,false,deserialization,schema
RMQSource -> public RMQSource(RMQConnectionConfig rmqConnectionConfig, String queueName, 					DeserializationSchema<OUT> deserializationSchema);1495923066;Creates a new RabbitMQ source with at-least-once message processing guarantee when_checkpointing is enabled. No strong delivery guarantees when checkpointing is disabled.__<p>For exactly-once, please use the constructor_{@link RMQSource#RMQSource(RMQConnectionConfig, String, boolean, DeserializationSchema)}._@param rmqConnectionConfig The RabbiMQ connection configuration {@link RMQConnectionConfig}._@param queueName  The queue to receive messages from._@param deserializationSchema A {@link DeserializationSchema} for turning the bytes received_into Java objects.;public RMQSource(RMQConnectionConfig rmqConnectionConfig, String queueName,_					DeserializationSchema<OUT> deserializationSchema) {_		this(rmqConnectionConfig, queueName, false, deserializationSchema)__	};creates,a,new,rabbit,mq,source,with,at,least,once,message,processing,guarantee,when,checkpointing,is,enabled,no,strong,delivery,guarantees,when,checkpointing,is,disabled,p,for,exactly,once,please,use,the,constructor,link,rmqsource,rmqsource,rmqconnection,config,string,boolean,deserialization,schema,param,rmq,connection,config,the,rabbi,mq,connection,configuration,link,rmqconnection,config,param,queue,name,the,queue,to,receive,messages,from,param,deserialization,schema,a,link,deserialization,schema,for,turning,the,bytes,received,into,java,objects;public,rmqsource,rmqconnection,config,rmq,connection,config,string,queue,name,deserialization,schema,out,deserialization,schema,this,rmq,connection,config,queue,name,false,deserialization,schema
RMQSource -> public RMQSource(RMQConnectionConfig rmqConnectionConfig, String queueName, 					DeserializationSchema<OUT> deserializationSchema);1506441847;Creates a new RabbitMQ source with at-least-once message processing guarantee when_checkpointing is enabled. No strong delivery guarantees when checkpointing is disabled.__<p>For exactly-once, please use the constructor_{@link RMQSource#RMQSource(RMQConnectionConfig, String, boolean, DeserializationSchema)}._@param rmqConnectionConfig The RabbiMQ connection configuration {@link RMQConnectionConfig}._@param queueName  The queue to receive messages from._@param deserializationSchema A {@link DeserializationSchema} for turning the bytes received_into Java objects.;public RMQSource(RMQConnectionConfig rmqConnectionConfig, String queueName,_					DeserializationSchema<OUT> deserializationSchema) {_		this(rmqConnectionConfig, queueName, false, deserializationSchema)__	};creates,a,new,rabbit,mq,source,with,at,least,once,message,processing,guarantee,when,checkpointing,is,enabled,no,strong,delivery,guarantees,when,checkpointing,is,disabled,p,for,exactly,once,please,use,the,constructor,link,rmqsource,rmqsource,rmqconnection,config,string,boolean,deserialization,schema,param,rmq,connection,config,the,rabbi,mq,connection,configuration,link,rmqconnection,config,param,queue,name,the,queue,to,receive,messages,from,param,deserialization,schema,a,link,deserialization,schema,for,turning,the,bytes,received,into,java,objects;public,rmqsource,rmqconnection,config,rmq,connection,config,string,queue,name,deserialization,schema,out,deserialization,schema,this,rmq,connection,config,queue,name,false,deserialization,schema
RMQSource -> public RMQSource(RMQConnectionConfig rmqConnectionConfig, String queueName, 					DeserializationSchema<OUT> deserializationSchema);1509723634;Creates a new RabbitMQ source with at-least-once message processing guarantee when_checkpointing is enabled. No strong delivery guarantees when checkpointing is disabled.__<p>For exactly-once, please use the constructor_{@link RMQSource#RMQSource(RMQConnectionConfig, String, boolean, DeserializationSchema)}._@param rmqConnectionConfig The RabbiMQ connection configuration {@link RMQConnectionConfig}._@param queueName  The queue to receive messages from._@param deserializationSchema A {@link DeserializationSchema} for turning the bytes received_into Java objects.;public RMQSource(RMQConnectionConfig rmqConnectionConfig, String queueName,_					DeserializationSchema<OUT> deserializationSchema) {_		this(rmqConnectionConfig, queueName, false, deserializationSchema)__	};creates,a,new,rabbit,mq,source,with,at,least,once,message,processing,guarantee,when,checkpointing,is,enabled,no,strong,delivery,guarantees,when,checkpointing,is,disabled,p,for,exactly,once,please,use,the,constructor,link,rmqsource,rmqsource,rmqconnection,config,string,boolean,deserialization,schema,param,rmq,connection,config,the,rabbi,mq,connection,configuration,link,rmqconnection,config,param,queue,name,the,queue,to,receive,messages,from,param,deserialization,schema,a,link,deserialization,schema,for,turning,the,bytes,received,into,java,objects;public,rmqsource,rmqconnection,config,rmq,connection,config,string,queue,name,deserialization,schema,out,deserialization,schema,this,rmq,connection,config,queue,name,false,deserialization,schema
RMQSource -> protected ConnectionFactory setupConnectionFactory() throws Exception;1480685315;Initializes the connection to RMQ with a default connection factory. The user may override_this method to setup and configure their own ConnectionFactory.;protected ConnectionFactory setupConnectionFactory() throws Exception {_		return rmqConnectionConfig.getConnectionFactory()__	};initializes,the,connection,to,rmq,with,a,default,connection,factory,the,user,may,override,this,method,to,setup,and,configure,their,own,connection,factory;protected,connection,factory,setup,connection,factory,throws,exception,return,rmq,connection,config,get,connection,factory
RMQSource -> protected ConnectionFactory setupConnectionFactory() throws Exception;1495923066;Initializes the connection to RMQ with a default connection factory. The user may override_this method to setup and configure their own ConnectionFactory.;protected ConnectionFactory setupConnectionFactory() throws Exception {_		return rmqConnectionConfig.getConnectionFactory()__	};initializes,the,connection,to,rmq,with,a,default,connection,factory,the,user,may,override,this,method,to,setup,and,configure,their,own,connection,factory;protected,connection,factory,setup,connection,factory,throws,exception,return,rmq,connection,config,get,connection,factory
RMQSource -> protected ConnectionFactory setupConnectionFactory() throws Exception;1506441847;Initializes the connection to RMQ with a default connection factory. The user may override_this method to setup and configure their own ConnectionFactory.;protected ConnectionFactory setupConnectionFactory() throws Exception {_		return rmqConnectionConfig.getConnectionFactory()__	};initializes,the,connection,to,rmq,with,a,default,connection,factory,the,user,may,override,this,method,to,setup,and,configure,their,own,connection,factory;protected,connection,factory,setup,connection,factory,throws,exception,return,rmq,connection,config,get,connection,factory
RMQSource -> protected ConnectionFactory setupConnectionFactory() throws Exception;1509723634;Initializes the connection to RMQ with a default connection factory. The user may override_this method to setup and configure their own ConnectionFactory.;protected ConnectionFactory setupConnectionFactory() throws Exception {_		return rmqConnectionConfig.getConnectionFactory()__	};initializes,the,connection,to,rmq,with,a,default,connection,factory,the,user,may,override,this,method,to,setup,and,configure,their,own,connection,factory;protected,connection,factory,setup,connection,factory,throws,exception,return,rmq,connection,config,get,connection,factory
RMQSource -> protected void setupQueue() throws IOException;1480685315;Sets up the queue. The default implementation just declares the queue. The user may override_this method to have a custom setup for the queue (i.e. binding the queue to an exchange or_defining custom queue parameters);protected void setupQueue() throws IOException {_		channel.queueDeclare(queueName, true, false, false, null)__	};sets,up,the,queue,the,default,implementation,just,declares,the,queue,the,user,may,override,this,method,to,have,a,custom,setup,for,the,queue,i,e,binding,the,queue,to,an,exchange,or,defining,custom,queue,parameters;protected,void,setup,queue,throws,ioexception,channel,queue,declare,queue,name,true,false,false,null
RMQSource -> protected void setupQueue() throws IOException;1495923066;Sets up the queue. The default implementation just declares the queue. The user may override_this method to have a custom setup for the queue (i.e. binding the queue to an exchange or_defining custom queue parameters);protected void setupQueue() throws IOException {_		channel.queueDeclare(queueName, true, false, false, null)__	};sets,up,the,queue,the,default,implementation,just,declares,the,queue,the,user,may,override,this,method,to,have,a,custom,setup,for,the,queue,i,e,binding,the,queue,to,an,exchange,or,defining,custom,queue,parameters;protected,void,setup,queue,throws,ioexception,channel,queue,declare,queue,name,true,false,false,null
RMQSource -> protected void setupQueue() throws IOException;1506441847;Sets up the queue. The default implementation just declares the queue. The user may override_this method to have a custom setup for the queue (i.e. binding the queue to an exchange or_defining custom queue parameters);protected void setupQueue() throws IOException {_		channel.queueDeclare(queueName, true, false, false, null)__	};sets,up,the,queue,the,default,implementation,just,declares,the,queue,the,user,may,override,this,method,to,have,a,custom,setup,for,the,queue,i,e,binding,the,queue,to,an,exchange,or,defining,custom,queue,parameters;protected,void,setup,queue,throws,ioexception,channel,queue,declare,queue,name,true,false,false,null
RMQSource -> protected void setupQueue() throws IOException;1509723634;Sets up the queue. The default implementation just declares the queue. The user may override_this method to have a custom setup for the queue (i.e. binding the queue to an exchange or_defining custom queue parameters);protected void setupQueue() throws IOException {_		channel.queueDeclare(queueName, true, false, false, null)__	};sets,up,the,queue,the,default,implementation,just,declares,the,queue,the,user,may,override,this,method,to,have,a,custom,setup,for,the,queue,i,e,binding,the,queue,to,an,exchange,or,defining,custom,queue,parameters;protected,void,setup,queue,throws,ioexception,channel,queue,declare,queue,name,true,false,false,null
