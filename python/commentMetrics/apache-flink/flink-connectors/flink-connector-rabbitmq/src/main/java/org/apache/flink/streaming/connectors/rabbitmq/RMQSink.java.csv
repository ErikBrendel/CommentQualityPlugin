# id;timestamp;commentText;codeText;commentWords;codeWords
RMQSink -> public RMQSink(RMQConnectionConfig rmqConnectionConfig, String queueName, SerializationSchema<IN> schema);1480685315;@param rmqConnectionConfig The RabbitMQ connection configuration {@link RMQConnectionConfig}._@param queueName The queue to publish messages to._@param schema A {@link SerializationSchema} for turning the Java objects received into bytes;public RMQSink(RMQConnectionConfig rmqConnectionConfig, String queueName, SerializationSchema<IN> schema) {_		this.rmqConnectionConfig = rmqConnectionConfig__		this.queueName = queueName__		this.schema = schema__	};param,rmq,connection,config,the,rabbit,mq,connection,configuration,link,rmqconnection,config,param,queue,name,the,queue,to,publish,messages,to,param,schema,a,link,serialization,schema,for,turning,the,java,objects,received,into,bytes;public,rmqsink,rmqconnection,config,rmq,connection,config,string,queue,name,serialization,schema,in,schema,this,rmq,connection,config,rmq,connection,config,this,queue,name,queue,name,this,schema,schema
RMQSink -> public RMQSink(RMQConnectionConfig rmqConnectionConfig, String queueName, SerializationSchema<IN> schema);1495923066;@param rmqConnectionConfig The RabbitMQ connection configuration {@link RMQConnectionConfig}._@param queueName The queue to publish messages to._@param schema A {@link SerializationSchema} for turning the Java objects received into bytes;public RMQSink(RMQConnectionConfig rmqConnectionConfig, String queueName, SerializationSchema<IN> schema) {_		this.rmqConnectionConfig = rmqConnectionConfig__		this.queueName = queueName__		this.schema = schema__	};param,rmq,connection,config,the,rabbit,mq,connection,configuration,link,rmqconnection,config,param,queue,name,the,queue,to,publish,messages,to,param,schema,a,link,serialization,schema,for,turning,the,java,objects,received,into,bytes;public,rmqsink,rmqconnection,config,rmq,connection,config,string,queue,name,serialization,schema,in,schema,this,rmq,connection,config,rmq,connection,config,this,queue,name,queue,name,this,schema,schema
RMQSink -> public RMQSink(RMQConnectionConfig rmqConnectionConfig, String queueName, SerializationSchema<IN> schema);1506441847;@param rmqConnectionConfig The RabbitMQ connection configuration {@link RMQConnectionConfig}._@param queueName The queue to publish messages to._@param schema A {@link SerializationSchema} for turning the Java objects received into bytes;public RMQSink(RMQConnectionConfig rmqConnectionConfig, String queueName, SerializationSchema<IN> schema) {_		this.rmqConnectionConfig = rmqConnectionConfig__		this.queueName = queueName__		this.schema = schema__	};param,rmq,connection,config,the,rabbit,mq,connection,configuration,link,rmqconnection,config,param,queue,name,the,queue,to,publish,messages,to,param,schema,a,link,serialization,schema,for,turning,the,java,objects,received,into,bytes;public,rmqsink,rmqconnection,config,rmq,connection,config,string,queue,name,serialization,schema,in,schema,this,rmq,connection,config,rmq,connection,config,this,queue,name,queue,name,this,schema,schema
RMQSink -> public RMQSink(RMQConnectionConfig rmqConnectionConfig, String queueName, SerializationSchema<IN> schema);1509723634;@param rmqConnectionConfig The RabbitMQ connection configuration {@link RMQConnectionConfig}._@param queueName The queue to publish messages to._@param schema A {@link SerializationSchema} for turning the Java objects received into bytes;public RMQSink(RMQConnectionConfig rmqConnectionConfig, String queueName, SerializationSchema<IN> schema) {_		this.rmqConnectionConfig = rmqConnectionConfig__		this.queueName = queueName__		this.schema = schema__	};param,rmq,connection,config,the,rabbit,mq,connection,configuration,link,rmqconnection,config,param,queue,name,the,queue,to,publish,messages,to,param,schema,a,link,serialization,schema,for,turning,the,java,objects,received,into,bytes;public,rmqsink,rmqconnection,config,rmq,connection,config,string,queue,name,serialization,schema,in,schema,this,rmq,connection,config,rmq,connection,config,this,queue,name,queue,name,this,schema,schema
RMQSink -> protected void setupQueue() throws IOException;1480685315;Sets up the queue. The default implementation just declares the queue. The user may override_this method to have a custom setup for the queue (i.e. binding the queue to an exchange or_defining custom queue parameters);protected void setupQueue() throws IOException {_		channel.queueDeclare(queueName, false, false, false, null)__	};sets,up,the,queue,the,default,implementation,just,declares,the,queue,the,user,may,override,this,method,to,have,a,custom,setup,for,the,queue,i,e,binding,the,queue,to,an,exchange,or,defining,custom,queue,parameters;protected,void,setup,queue,throws,ioexception,channel,queue,declare,queue,name,false,false,false,null
RMQSink -> protected void setupQueue() throws IOException;1495923066;Sets up the queue. The default implementation just declares the queue. The user may override_this method to have a custom setup for the queue (i.e. binding the queue to an exchange or_defining custom queue parameters);protected void setupQueue() throws IOException {_		channel.queueDeclare(queueName, false, false, false, null)__	};sets,up,the,queue,the,default,implementation,just,declares,the,queue,the,user,may,override,this,method,to,have,a,custom,setup,for,the,queue,i,e,binding,the,queue,to,an,exchange,or,defining,custom,queue,parameters;protected,void,setup,queue,throws,ioexception,channel,queue,declare,queue,name,false,false,false,null
RMQSink -> protected void setupQueue() throws IOException;1506441847;Sets up the queue. The default implementation just declares the queue. The user may override_this method to have a custom setup for the queue (i.e. binding the queue to an exchange or_defining custom queue parameters);protected void setupQueue() throws IOException {_		channel.queueDeclare(queueName, false, false, false, null)__	};sets,up,the,queue,the,default,implementation,just,declares,the,queue,the,user,may,override,this,method,to,have,a,custom,setup,for,the,queue,i,e,binding,the,queue,to,an,exchange,or,defining,custom,queue,parameters;protected,void,setup,queue,throws,ioexception,channel,queue,declare,queue,name,false,false,false,null
RMQSink -> protected void setupQueue() throws IOException;1509723634;Sets up the queue. The default implementation just declares the queue. The user may override_this method to have a custom setup for the queue (i.e. binding the queue to an exchange or_defining custom queue parameters);protected void setupQueue() throws IOException {_		channel.queueDeclare(queueName, false, false, false, null)__	};sets,up,the,queue,the,default,implementation,just,declares,the,queue,the,user,may,override,this,method,to,have,a,custom,setup,for,the,queue,i,e,binding,the,queue,to,an,exchange,or,defining,custom,queue,parameters;protected,void,setup,queue,throws,ioexception,channel,queue,declare,queue,name,false,false,false,null
RMQSink -> protected void setupQueue() throws IOException;1530104684;Sets up the queue. The default implementation just declares the queue. The user may override_this method to have a custom setup for the queue (i.e. binding the queue to an exchange or_defining custom queue parameters);protected void setupQueue() throws IOException {_		if (queueName != null) {_			channel.queueDeclare(queueName, false, false, false, null)__		}_	};sets,up,the,queue,the,default,implementation,just,declares,the,queue,the,user,may,override,this,method,to,have,a,custom,setup,for,the,queue,i,e,binding,the,queue,to,an,exchange,or,defining,custom,queue,parameters;protected,void,setup,queue,throws,ioexception,if,queue,name,null,channel,queue,declare,queue,name,false,false,false,null
RMQSink -> protected void setupQueue() throws IOException;1530104684;Sets up the queue. The default implementation just declares the queue. The user may override_this method to have a custom setup for the queue (i.e. binding the queue to an exchange or_defining custom queue parameters);protected void setupQueue() throws IOException {_		if (queueName != null) {_			channel.queueDeclare(queueName, false, false, false, null)__		}_	};sets,up,the,queue,the,default,implementation,just,declares,the,queue,the,user,may,override,this,method,to,have,a,custom,setup,for,the,queue,i,e,binding,the,queue,to,an,exchange,or,defining,custom,queue,parameters;protected,void,setup,queue,throws,ioexception,if,queue,name,null,channel,queue,declare,queue,name,false,false,false,null
RMQSink -> @PublicEvolving 	public RMQSink(RMQConnectionConfig rmqConnectionConfig, String queueName, SerializationSchema<IN> schema);1530104684;@param rmqConnectionConfig The RabbitMQ connection configuration {@link RMQConnectionConfig}._@param queueName The queue to publish messages to._@param schema A {@link SerializationSchema} for turning the Java objects received into bytes;@PublicEvolving_	public RMQSink(RMQConnectionConfig rmqConnectionConfig, String queueName, SerializationSchema<IN> schema) {_		this(rmqConnectionConfig, queueName, schema, null, null)__	};param,rmq,connection,config,the,rabbit,mq,connection,configuration,link,rmqconnection,config,param,queue,name,the,queue,to,publish,messages,to,param,schema,a,link,serialization,schema,for,turning,the,java,objects,received,into,bytes;public,evolving,public,rmqsink,rmqconnection,config,rmq,connection,config,string,queue,name,serialization,schema,in,schema,this,rmq,connection,config,queue,name,schema,null,null
RMQSink -> @PublicEvolving 	public RMQSink(RMQConnectionConfig rmqConnectionConfig, String queueName, SerializationSchema<IN> schema);1530104684;@param rmqConnectionConfig The RabbitMQ connection configuration {@link RMQConnectionConfig}._@param queueName The queue to publish messages to._@param schema A {@link SerializationSchema} for turning the Java objects received into bytes;@PublicEvolving_	public RMQSink(RMQConnectionConfig rmqConnectionConfig, String queueName, SerializationSchema<IN> schema) {_		this(rmqConnectionConfig, queueName, schema, null, null)__	};param,rmq,connection,config,the,rabbit,mq,connection,configuration,link,rmqconnection,config,param,queue,name,the,queue,to,publish,messages,to,param,schema,a,link,serialization,schema,for,turning,the,java,objects,received,into,bytes;public,evolving,public,rmqsink,rmqconnection,config,rmq,connection,config,string,queue,name,serialization,schema,in,schema,this,rmq,connection,config,queue,name,schema,null,null
RMQSink -> @Override 	public void invoke(IN value);1480685315;Called when new data arrives to the sink, and forwards it to RMQ.__@param value_The incoming data;@Override_	public void invoke(IN value) {_		try {_			byte[] msg = schema.serialize(value)___			channel.basicPublish("", queueName, null, msg)__		} catch (IOException e) {_			if (logFailuresOnly) {_				LOG.error("Cannot send RMQ message {} at {}", queueName, rmqConnectionConfig.getHost(), e)__			} else {_				throw new RuntimeException("Cannot send RMQ message " + queueName +" at " + rmqConnectionConfig.getHost(), e)__			}_		}__	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,rmq,param,value,the,incoming,data;override,public,void,invoke,in,value,try,byte,msg,schema,serialize,value,channel,basic,publish,queue,name,null,msg,catch,ioexception,e,if,log,failures,only,log,error,cannot,send,rmq,message,at,queue,name,rmq,connection,config,get,host,e,else,throw,new,runtime,exception,cannot,send,rmq,message,queue,name,at,rmq,connection,config,get,host,e
RMQSink -> @Override 	public void invoke(IN value);1495923066;Called when new data arrives to the sink, and forwards it to RMQ.__@param value_The incoming data;@Override_	public void invoke(IN value) {_		try {_			byte[] msg = schema.serialize(value)___			channel.basicPublish("", queueName, null, msg)__		} catch (IOException e) {_			if (logFailuresOnly) {_				LOG.error("Cannot send RMQ message {} at {}", queueName, rmqConnectionConfig.getHost(), e)__			} else {_				throw new RuntimeException("Cannot send RMQ message " + queueName + " at " + rmqConnectionConfig.getHost(), e)__			}_		}__	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,rmq,param,value,the,incoming,data;override,public,void,invoke,in,value,try,byte,msg,schema,serialize,value,channel,basic,publish,queue,name,null,msg,catch,ioexception,e,if,log,failures,only,log,error,cannot,send,rmq,message,at,queue,name,rmq,connection,config,get,host,e,else,throw,new,runtime,exception,cannot,send,rmq,message,queue,name,at,rmq,connection,config,get,host,e
RMQSink -> @Override 	public void invoke(IN value);1506441847;Called when new data arrives to the sink, and forwards it to RMQ.__@param value_The incoming data;@Override_	public void invoke(IN value) {_		try {_			byte[] msg = schema.serialize(value)___			channel.basicPublish("", queueName, null, msg)__		} catch (IOException e) {_			if (logFailuresOnly) {_				LOG.error("Cannot send RMQ message {} at {}", queueName, rmqConnectionConfig.getHost(), e)__			} else {_				throw new RuntimeException("Cannot send RMQ message " + queueName + " at " + rmqConnectionConfig.getHost(), e)__			}_		}__	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,rmq,param,value,the,incoming,data;override,public,void,invoke,in,value,try,byte,msg,schema,serialize,value,channel,basic,publish,queue,name,null,msg,catch,ioexception,e,if,log,failures,only,log,error,cannot,send,rmq,message,at,queue,name,rmq,connection,config,get,host,e,else,throw,new,runtime,exception,cannot,send,rmq,message,queue,name,at,rmq,connection,config,get,host,e
RMQSink -> @Override 	public void invoke(IN value);1509723634;Called when new data arrives to the sink, and forwards it to RMQ.__@param value_The incoming data;@Override_	public void invoke(IN value) {_		try {_			byte[] msg = schema.serialize(value)___			channel.basicPublish("", queueName, null, msg)__		} catch (IOException e) {_			if (logFailuresOnly) {_				LOG.error("Cannot send RMQ message {} at {}", queueName, rmqConnectionConfig.getHost(), e)__			} else {_				throw new RuntimeException("Cannot send RMQ message " + queueName + " at " + rmqConnectionConfig.getHost(), e)__			}_		}__	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,rmq,param,value,the,incoming,data;override,public,void,invoke,in,value,try,byte,msg,schema,serialize,value,channel,basic,publish,queue,name,null,msg,catch,ioexception,e,if,log,failures,only,log,error,cannot,send,rmq,message,at,queue,name,rmq,connection,config,get,host,e,else,throw,new,runtime,exception,cannot,send,rmq,message,queue,name,at,rmq,connection,config,get,host,e
RMQSink -> @Override 	public void invoke(IN value);1530104684;Called when new data arrives to the sink, and forwards it to RMQ.__@param value_The incoming data;@Override_	public void invoke(IN value) {_		try {_			byte[] msg = schema.serialize(value)___			if (publishOptions == null) {_				channel.basicPublish("", queueName, null, msg)__			} else {_				boolean mandatory = publishOptions.computeMandatory(value)__				boolean immediate = publishOptions.computeImmediate(value)___				if (returnListener == null && (mandatory || immediate)) {_					throw new IllegalStateException("Setting mandatory and/or immediate flags to true requires a ReturnListener.")__				} else {_					String rk = publishOptions.computeRoutingKey(value)__					if (rk == null) {_						throw new NullPointerException("computeRoutingKey returned an anormal 'null' value.")__					}_					String exchange = publishOptions.computeExchange(value)__					if (exchange == null) {_						throw new NullPointerException("computeExchange returned an anormal 'null' value.")__					}__					channel.basicPublish(exchange, rk, mandatory, immediate,_									publishOptions.computeProperties(value), msg)__				}_			}__		} catch (IOException e) {_			if (logFailuresOnly) {_				LOG.error("Cannot send RMQ message {} at {}", queueName, rmqConnectionConfig.getHost(), e)__			} else {_				throw new RuntimeException("Cannot send RMQ message " + queueName + " at " + rmqConnectionConfig.getHost(), e)__			}_		}__	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,rmq,param,value,the,incoming,data;override,public,void,invoke,in,value,try,byte,msg,schema,serialize,value,if,publish,options,null,channel,basic,publish,queue,name,null,msg,else,boolean,mandatory,publish,options,compute,mandatory,value,boolean,immediate,publish,options,compute,immediate,value,if,return,listener,null,mandatory,immediate,throw,new,illegal,state,exception,setting,mandatory,and,or,immediate,flags,to,true,requires,a,return,listener,else,string,rk,publish,options,compute,routing,key,value,if,rk,null,throw,new,null,pointer,exception,compute,routing,key,returned,an,anormal,null,value,string,exchange,publish,options,compute,exchange,value,if,exchange,null,throw,new,null,pointer,exception,compute,exchange,returned,an,anormal,null,value,channel,basic,publish,exchange,rk,mandatory,immediate,publish,options,compute,properties,value,msg,catch,ioexception,e,if,log,failures,only,log,error,cannot,send,rmq,message,at,queue,name,rmq,connection,config,get,host,e,else,throw,new,runtime,exception,cannot,send,rmq,message,queue,name,at,rmq,connection,config,get,host,e
RMQSink -> @Override 	public void invoke(IN value);1530104684;Called when new data arrives to the sink, and forwards it to RMQ.__@param value_The incoming data;@Override_	public void invoke(IN value) {_		try {_			byte[] msg = schema.serialize(value)___			if (publishOptions == null) {_				channel.basicPublish("", queueName, null, msg)__			} else {_				boolean mandatory = publishOptions.computeMandatory(value)__				boolean immediate = publishOptions.computeImmediate(value)___				Preconditions.checkState(!(returnListener == null && (mandatory || immediate)),_					"Setting mandatory and/or immediate flags to true requires a ReturnListener.")___				String rk = publishOptions.computeRoutingKey(value)__				String exchange = publishOptions.computeExchange(value)___				channel.basicPublish(exchange, rk, mandatory, immediate,_					publishOptions.computeProperties(value), msg)__			}_		} catch (IOException e) {_			if (logFailuresOnly) {_				LOG.error("Cannot send RMQ message {} at {}", queueName, rmqConnectionConfig.getHost(), e)__			} else {_				throw new RuntimeException("Cannot send RMQ message " + queueName + " at " + rmqConnectionConfig.getHost(), e)__			}_		}__	};called,when,new,data,arrives,to,the,sink,and,forwards,it,to,rmq,param,value,the,incoming,data;override,public,void,invoke,in,value,try,byte,msg,schema,serialize,value,if,publish,options,null,channel,basic,publish,queue,name,null,msg,else,boolean,mandatory,publish,options,compute,mandatory,value,boolean,immediate,publish,options,compute,immediate,value,preconditions,check,state,return,listener,null,mandatory,immediate,setting,mandatory,and,or,immediate,flags,to,true,requires,a,return,listener,string,rk,publish,options,compute,routing,key,value,string,exchange,publish,options,compute,exchange,value,channel,basic,publish,exchange,rk,mandatory,immediate,publish,options,compute,properties,value,msg,catch,ioexception,e,if,log,failures,only,log,error,cannot,send,rmq,message,at,queue,name,rmq,connection,config,get,host,e,else,throw,new,runtime,exception,cannot,send,rmq,message,queue,name,at,rmq,connection,config,get,host,e
RMQSink -> @PublicEvolving 	public RMQSink(RMQConnectionConfig rmqConnectionConfig, SerializationSchema<IN> schema, 			RMQSinkPublishOptions<IN> publishOptions);1530104684;@param rmqConnectionConfig The RabbitMQ connection configuration {@link RMQConnectionConfig}._@param schema A {@link SerializationSchema} for turning the Java objects received into bytes_@param publishOptions A {@link RMQSinkPublishOptions} for providing message's routing key and/or properties_In this case the computeMandatoy or computeImmediate MUST return false otherwise an_IllegalStateException is raised during runtime.;@PublicEvolving_	public RMQSink(RMQConnectionConfig rmqConnectionConfig, SerializationSchema<IN> schema,_			RMQSinkPublishOptions<IN> publishOptions) {_		this(rmqConnectionConfig, null, schema, publishOptions, null)__	};param,rmq,connection,config,the,rabbit,mq,connection,configuration,link,rmqconnection,config,param,schema,a,link,serialization,schema,for,turning,the,java,objects,received,into,bytes,param,publish,options,a,link,rmqsink,publish,options,for,providing,message,s,routing,key,and,or,properties,in,this,case,the,compute,mandatoy,or,compute,immediate,must,return,false,otherwise,an,illegal,state,exception,is,raised,during,runtime;public,evolving,public,rmqsink,rmqconnection,config,rmq,connection,config,serialization,schema,in,schema,rmqsink,publish,options,in,publish,options,this,rmq,connection,config,null,schema,publish,options,null
RMQSink -> @PublicEvolving 	public RMQSink(RMQConnectionConfig rmqConnectionConfig, SerializationSchema<IN> schema, 			RMQSinkPublishOptions<IN> publishOptions);1530104684;@param rmqConnectionConfig The RabbitMQ connection configuration {@link RMQConnectionConfig}._@param schema A {@link SerializationSchema} for turning the Java objects received into bytes_@param publishOptions A {@link RMQSinkPublishOptions} for providing message's routing key and/or properties_In this case the computeMandatoy or computeImmediate MUST return false otherwise an_IllegalStateException is raised during runtime.;@PublicEvolving_	public RMQSink(RMQConnectionConfig rmqConnectionConfig, SerializationSchema<IN> schema,_			RMQSinkPublishOptions<IN> publishOptions) {_		this(rmqConnectionConfig, null, schema, publishOptions, null)__	};param,rmq,connection,config,the,rabbit,mq,connection,configuration,link,rmqconnection,config,param,schema,a,link,serialization,schema,for,turning,the,java,objects,received,into,bytes,param,publish,options,a,link,rmqsink,publish,options,for,providing,message,s,routing,key,and,or,properties,in,this,case,the,compute,mandatoy,or,compute,immediate,must,return,false,otherwise,an,illegal,state,exception,is,raised,during,runtime;public,evolving,public,rmqsink,rmqconnection,config,rmq,connection,config,serialization,schema,in,schema,rmqsink,publish,options,in,publish,options,this,rmq,connection,config,null,schema,publish,options,null
RMQSink -> public void setLogFailuresOnly(boolean logFailuresOnly);1480685315;Defines whether the producer should fail on errors, or only log them._If this is set to true, then exceptions will be only logged, if set to false,_exceptions will be eventually thrown and cause the streaming program to_fail (and enter recovery).__@param logFailuresOnly The flag to indicate logging-only on exceptions.;public void setLogFailuresOnly(boolean logFailuresOnly) {_		this.logFailuresOnly = logFailuresOnly__	};defines,whether,the,producer,should,fail,on,errors,or,only,log,them,if,this,is,set,to,true,then,exceptions,will,be,only,logged,if,set,to,false,exceptions,will,be,eventually,thrown,and,cause,the,streaming,program,to,fail,and,enter,recovery,param,log,failures,only,the,flag,to,indicate,logging,only,on,exceptions;public,void,set,log,failures,only,boolean,log,failures,only,this,log,failures,only,log,failures,only
RMQSink -> public void setLogFailuresOnly(boolean logFailuresOnly);1495923066;Defines whether the producer should fail on errors, or only log them._If this is set to true, then exceptions will be only logged, if set to false,_exceptions will be eventually thrown and cause the streaming program to_fail (and enter recovery).__@param logFailuresOnly The flag to indicate logging-only on exceptions.;public void setLogFailuresOnly(boolean logFailuresOnly) {_		this.logFailuresOnly = logFailuresOnly__	};defines,whether,the,producer,should,fail,on,errors,or,only,log,them,if,this,is,set,to,true,then,exceptions,will,be,only,logged,if,set,to,false,exceptions,will,be,eventually,thrown,and,cause,the,streaming,program,to,fail,and,enter,recovery,param,log,failures,only,the,flag,to,indicate,logging,only,on,exceptions;public,void,set,log,failures,only,boolean,log,failures,only,this,log,failures,only,log,failures,only
RMQSink -> public void setLogFailuresOnly(boolean logFailuresOnly);1506441847;Defines whether the producer should fail on errors, or only log them._If this is set to true, then exceptions will be only logged, if set to false,_exceptions will be eventually thrown and cause the streaming program to_fail (and enter recovery).__@param logFailuresOnly The flag to indicate logging-only on exceptions.;public void setLogFailuresOnly(boolean logFailuresOnly) {_		this.logFailuresOnly = logFailuresOnly__	};defines,whether,the,producer,should,fail,on,errors,or,only,log,them,if,this,is,set,to,true,then,exceptions,will,be,only,logged,if,set,to,false,exceptions,will,be,eventually,thrown,and,cause,the,streaming,program,to,fail,and,enter,recovery,param,log,failures,only,the,flag,to,indicate,logging,only,on,exceptions;public,void,set,log,failures,only,boolean,log,failures,only,this,log,failures,only,log,failures,only
RMQSink -> public void setLogFailuresOnly(boolean logFailuresOnly);1509723634;Defines whether the producer should fail on errors, or only log them._If this is set to true, then exceptions will be only logged, if set to false,_exceptions will be eventually thrown and cause the streaming program to_fail (and enter recovery).__@param logFailuresOnly The flag to indicate logging-only on exceptions.;public void setLogFailuresOnly(boolean logFailuresOnly) {_		this.logFailuresOnly = logFailuresOnly__	};defines,whether,the,producer,should,fail,on,errors,or,only,log,them,if,this,is,set,to,true,then,exceptions,will,be,only,logged,if,set,to,false,exceptions,will,be,eventually,thrown,and,cause,the,streaming,program,to,fail,and,enter,recovery,param,log,failures,only,the,flag,to,indicate,logging,only,on,exceptions;public,void,set,log,failures,only,boolean,log,failures,only,this,log,failures,only,log,failures,only
RMQSink -> public void setLogFailuresOnly(boolean logFailuresOnly);1530104684;Defines whether the producer should fail on errors, or only log them._If this is set to true, then exceptions will be only logged, if set to false,_exceptions will be eventually thrown and cause the streaming program to_fail (and enter recovery).__@param logFailuresOnly The flag to indicate logging-only on exceptions.;public void setLogFailuresOnly(boolean logFailuresOnly) {_		this.logFailuresOnly = logFailuresOnly__	};defines,whether,the,producer,should,fail,on,errors,or,only,log,them,if,this,is,set,to,true,then,exceptions,will,be,only,logged,if,set,to,false,exceptions,will,be,eventually,thrown,and,cause,the,streaming,program,to,fail,and,enter,recovery,param,log,failures,only,the,flag,to,indicate,logging,only,on,exceptions;public,void,set,log,failures,only,boolean,log,failures,only,this,log,failures,only,log,failures,only
RMQSink -> public void setLogFailuresOnly(boolean logFailuresOnly);1530104684;Defines whether the producer should fail on errors, or only log them._If this is set to true, then exceptions will be only logged, if set to false,_exceptions will be eventually thrown and cause the streaming program to_fail (and enter recovery).__@param logFailuresOnly The flag to indicate logging-only on exceptions.;public void setLogFailuresOnly(boolean logFailuresOnly) {_		this.logFailuresOnly = logFailuresOnly__	};defines,whether,the,producer,should,fail,on,errors,or,only,log,them,if,this,is,set,to,true,then,exceptions,will,be,only,logged,if,set,to,false,exceptions,will,be,eventually,thrown,and,cause,the,streaming,program,to,fail,and,enter,recovery,param,log,failures,only,the,flag,to,indicate,logging,only,on,exceptions;public,void,set,log,failures,only,boolean,log,failures,only,this,log,failures,only,log,failures,only
