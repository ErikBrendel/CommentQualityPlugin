commented;modifiers;parameterAmount;loc;comment;code
true;public;1;8;/**  * Range of available transactional ids to use is:  * [nextFreeTransactionalId, nextFreeTransactionalId + parallelism * kafkaProducersPoolSize)  * loop below picks in a deterministic way a subrange of those available transactional ids based on index of  * this subtask.  */ ;/**  * Range of available transactional ids to use is:  * [nextFreeTransactionalId, nextFreeTransactionalId + parallelism * kafkaProducersPoolSize)  * loop below picks in a deterministic way a subrange of those available transactional ids based on index of  * this subtask.  */ public Set<String> generateIdsToUse(long nextFreeTransactionalId) {     Set<String> transactionalIds = new HashSet<>().     for (int i = 0. i < poolSize. i++) {         long transactionalId = nextFreeTransactionalId + subtaskIndex * poolSize + i.         transactionalIds.add(generateTransactionalId(transactionalId)).     }     return transactionalIds. }
true;public;0;7;/**  *  If we have to abort previous transactional id in case of restart after a failure BEFORE first checkpoint  *  completed, we don't know what was the parallelism used in previous attempt. In that case we must guess the ids  *  range to abort based on current configured pool size, current parallelism and safeScaleDownFactor.  */ ;/**  *  If we have to abort previous transactional id in case of restart after a failure BEFORE first checkpoint  *  completed, we don't know what was the parallelism used in previous attempt. In that case we must guess the ids  *  range to abort based on current configured pool size, current parallelism and safeScaleDownFactor.  */ public Set<String> generateIdsToAbort() {     Set<String> idsToAbort = new HashSet<>().     for (int i = 0. i < safeScaleDownFactor. i++) {         idsToAbort.addAll(generateIdsToUse(i * poolSize * totalNumberOfSubtasks)).     }     return idsToAbort. }
false;private;1;3;;private String generateTransactionalId(long transactionalId) {     return String.format(prefix + "-%d", transactionalId). }
