commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;5;;private static void checkProperty(Properties p, String key) {     if (!p.containsKey(key)) {         throw new IllegalArgumentException("Required property '" + key + "' not set.").     } }
true;public;1;5;/**  * Set a custom endpoint initializer.  */ ;/**  * Set a custom endpoint initializer.  */ public void setCustomEndpointInitializer(EndpointInitializer initializer) {     Objects.requireNonNull(initializer, "Initializer has to be set").     ClosureCleaner.ensureSerializable(initializer).     this.initializer = initializer. }
false;public;1;4;;// ----- Source lifecycle @Override public void open(Configuration parameters) throws Exception {     waitLock = new Object(). }
false;public;1;4;;@Override public void setup(InputStream input) {     reader = new DelimitedStreamReader(input, Constants.DEFAULT_CHARSET, Integer.parseInt(properties.getProperty(CLIENT_BUFFER_SIZE, "50000"))). }
false;public;0;6;;@Override public boolean process() throws IOException, InterruptedException {     String line = reader.readLine().     ctx.collect(line).     return true. }
false;public;1;45;;@Override public void run(final SourceContext<String> ctx) throws Exception {     LOG.info("Initializing Twitter Streaming API connection").     StreamingEndpoint endpoint = initializer.createEndpoint().     Authentication auth = new OAuth1(properties.getProperty(CONSUMER_KEY), properties.getProperty(CONSUMER_SECRET), properties.getProperty(TOKEN), properties.getProperty(TOKEN_SECRET)).     client = new ClientBuilder().name(properties.getProperty(CLIENT_NAME, "flink-twitter-source")).hosts(properties.getProperty(CLIENT_HOSTS, Constants.STREAM_HOST)).endpoint(endpoint).authentication(auth).processor(new HosebirdMessageProcessor() {          public DelimitedStreamReader reader.          @Override         public void setup(InputStream input) {             reader = new DelimitedStreamReader(input, Constants.DEFAULT_CHARSET, Integer.parseInt(properties.getProperty(CLIENT_BUFFER_SIZE, "50000"))).         }          @Override         public boolean process() throws IOException, InterruptedException {             String line = reader.readLine().             ctx.collect(line).             return true.         }     }).build().     client.connect().     running = true.     LOG.info("Twitter Streaming API connection established successfully").     // just wait now     while (running) {         synchronized (waitLock) {             waitLock.wait(100L).         }     } }
false;public;0;13;;@Override public void close() {     this.running = false.     LOG.info("Closing source").     if (client != null) {         // client seems to be thread-safe         client.stop().     }     // leave main method     synchronized (waitLock) {         waitLock.notify().     } }
false;public;0;5;;@Override public void cancel() {     LOG.info("Cancelling Twitter source").     close(). }
false;public;0;5;;@Override public void stop() {     LOG.info("Stopping Twitter source").     close(). }
false;;0;1;;StreamingEndpoint createEndpoint().
false;public;0;8;;@Override public StreamingEndpoint createEndpoint() {     // this default endpoint initializer returns the sample endpoint: Returning a sample from the firehose (all tweets)     StatusesSampleEndpoint endpoint = new StatusesSampleEndpoint().     endpoint.stallWarnings(false).     endpoint.delimited(false).     return endpoint. }
