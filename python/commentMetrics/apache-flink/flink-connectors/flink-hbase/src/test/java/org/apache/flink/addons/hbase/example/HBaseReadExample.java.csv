commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public boolean filter(Tuple2<String, String> t) throws Exception {     String val = t.getField(1).     if (val.startsWith("someStr")) {         return true.     }     return false. }
false;public;0;4;;@Override public String getTableName() {     return HBaseFlinkTestConstants.TEST_TABLE_NAME. }
false;protected;0;6;;@Override protected Scan getScanner() {     Scan scan = new Scan().     scan.addColumn(HBaseFlinkTestConstants.CF_SOME, HBaseFlinkTestConstants.Q_SOME).     return scan. }
false;protected;1;8;;@Override protected Tuple2<String, String> mapResultToTuple(Result r) {     String key = Bytes.toString(r.getRow()).     String val = Bytes.toString(r.getValue(HBaseFlinkTestConstants.CF_SOME, HBaseFlinkTestConstants.Q_SOME)).     reuse.setField(key, 0).     reuse.setField(val, 1).     return reuse. }
false;public,static;1;43;;public static void main(String[] args) throws Exception {     ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     @SuppressWarnings("serial")     DataSet<Tuple2<String, String>> hbaseDs = env.createInput(new TableInputFormat<Tuple2<String, String>>() {          @Override         public String getTableName() {             return HBaseFlinkTestConstants.TEST_TABLE_NAME.         }          @Override         protected Scan getScanner() {             Scan scan = new Scan().             scan.addColumn(HBaseFlinkTestConstants.CF_SOME, HBaseFlinkTestConstants.Q_SOME).             return scan.         }          private Tuple2<String, String> reuse = new Tuple2<String, String>().          @Override         protected Tuple2<String, String> mapResultToTuple(Result r) {             String key = Bytes.toString(r.getRow()).             String val = Bytes.toString(r.getValue(HBaseFlinkTestConstants.CF_SOME, HBaseFlinkTestConstants.Q_SOME)).             reuse.setField(key, 0).             reuse.setField(val, 1).             return reuse.         }     }).filter(new FilterFunction<Tuple2<String, String>>() {          @Override         public boolean filter(Tuple2<String, String> t) throws Exception {             String val = t.getField(1).             if (val.startsWith("someStr")) {                 return true.             }             return false.         }     }).     hbaseDs.print(). }
