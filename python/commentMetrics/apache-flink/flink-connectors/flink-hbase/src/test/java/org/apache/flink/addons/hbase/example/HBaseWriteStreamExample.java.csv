commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void run(SourceContext<String> out) throws Exception {     while (isRunning) {         out.collect(String.valueOf(Math.floor(Math.random() * 100))).     } }
false;public;0;4;;@Override public void cancel() {     isRunning = false. }
false;public,static;1;27;;public static void main(String[] args) throws Exception {     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     // data stream with random numbers     DataStream<String> dataStream = env.addSource(new SourceFunction<String>() {          private static final long serialVersionUID = 1L.          private volatile boolean isRunning = true.          @Override         public void run(SourceContext<String> out) throws Exception {             while (isRunning) {                 out.collect(String.valueOf(Math.floor(Math.random() * 100))).             }         }          @Override         public void cancel() {             isRunning = false.         }     }).     dataStream.writeUsingOutputFormat(new HBaseOutputFormat()).     env.execute(). }
false;public;1;4;;@Override public void configure(Configuration parameters) {     conf = HBaseConfiguration.create(). }
false;public;2;5;;@Override public void open(int taskNumber, int numTasks) throws IOException {     table = new HTable(conf, "flinkExample").     this.taskNumber = String.valueOf(taskNumber). }
false;public;1;8;;@Override public void writeRecord(String record) throws IOException {     Put put = new Put(Bytes.toBytes(taskNumber + rowNumber)).     put.add(Bytes.toBytes("entry"), Bytes.toBytes("entry"), Bytes.toBytes(rowNumber)).     rowNumber++.     table.put(put). }
false;public;0;5;;@Override public void close() throws IOException {     table.flushCommits().     table.close(). }
