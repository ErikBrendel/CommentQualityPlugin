commented;modifiers;parameterAmount;loc;comment;code
true;public;3;3;/**  * Adds a column defined by family, qualifier, and type to the table schema.  *  * @param family    the family name  * @param qualifier the qualifier name  * @param clazz     the data type of the qualifier  */ ;/**  * Adds a column defined by family, qualifier, and type to the table schema.  *  * @param family    the family name  * @param qualifier the qualifier name  * @param clazz     the data type of the qualifier  */ public void addColumn(String family, String qualifier, Class<?> clazz) {     this.hBaseSchema.addColumn(family, qualifier, clazz). }
true;public;1;3;/**  * Specifies the charset to parse Strings to HBase byte[] keys and String values.  *  * @param charset Name of the charset to use.  */ ;/**  * Specifies the charset to parse Strings to HBase byte[] keys and String values.  *  * @param charset Name of the charset to use.  */ public void setCharset(String charset) {     this.hBaseSchema.setCharset(charset). }
false;public;0;4;;@Override public TypeInformation<Row> getReturnType() {     return new RowTypeInfo(getFieldTypes(), getFieldNames()). }
false;public;0;8;;@Override public TableSchema getTableSchema() {     if (this.tableSchema == null) {         return new TableSchema(getFieldNames(), getFieldTypes()).     } else {         return this.tableSchema.     } }
false;private;0;3;;private String[] getFieldNames() {     return hBaseSchema.getFamilyNames(). }
false;private;0;10;;private TypeInformation[] getFieldTypes() {     String[] famNames = hBaseSchema.getFamilyNames().     TypeInformation<?>[] fieldTypes = new TypeInformation[hBaseSchema.getFamilyNames().length].     int i = 0.     for (String family : famNames) {         fieldTypes[i] = new RowTypeInfo(hBaseSchema.getQualifierTypes(family), hBaseSchema.getQualifierNames(family)).         i++.     }     return fieldTypes. }
false;public;1;4;;@Override public DataSet<Row> getDataSet(ExecutionEnvironment execEnv) {     return execEnv.createInput(new HBaseRowInputFormat(conf, tableName, hBaseSchema), getReturnType()).name(explainSource()). }
false;public;1;16;;@Override public HBaseTableSource projectFields(int[] fields) {     String[] famNames = hBaseSchema.getFamilyNames().     HBaseTableSource newTableSource = new HBaseTableSource(this.conf, tableName, getTableSchema().copy()).     // Extract the family from the given fields     for (int field : fields) {         String family = famNames[field].         Map<String, TypeInformation<?>> familyInfo = hBaseSchema.getFamilyInfo(family).         for (Map.Entry<String, TypeInformation<?>> entry : familyInfo.entrySet()) {             // create the newSchema             String qualifier = entry.getKey().             newTableSource.addColumn(family, qualifier, entry.getValue().getTypeClass()).         }     }     return newTableSource. }
false;public;0;4;;@Override public String explainSource() {     return TableConnectorUtils.generateRuntimeName(this.getClass(), getFieldNames()). }
