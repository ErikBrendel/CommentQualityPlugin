commented;modifiers;parameterAmount;loc;comment;code
true;protected,abstract;0;1;/**  * Returns an instance of Scan that retrieves the required subset of records from the HBase table.  * @return The appropriate instance of Scan for this usecase.  */ ;/**  * Returns an instance of Scan that retrieves the required subset of records from the HBase table.  * @return The appropriate instance of Scan for this usecase.  */ protected abstract Scan getScanner().
true;protected,abstract;0;1;/**  * What table is to be read.  * Per instance of a TableInputFormat derivative only a single tablename is possible.  * @return The name of the table  */ ;/**  * What table is to be read.  * Per instance of a TableInputFormat derivative only a single tablename is possible.  * @return The name of the table  */ protected abstract String getTableName().
true;protected,abstract;1;1;/**  * The output from HBase is always an instance of {@link Result}.  * This method is to copy the data in the Result instance into the required {@link Tuple}  * @param r The Result instance from HBase that needs to be converted  * @return The appropriate instance of {@link Tuple} that contains the needed information.  */ ;/**  * The output from HBase is always an instance of {@link Result}.  * This method is to copy the data in the Result instance into the required {@link Tuple}  * @param r The Result instance from HBase that needs to be converted  * @return The appropriate instance of {@link Tuple} that contains the needed information.  */ protected abstract T mapResultToTuple(Result r).
true;public;1;7;/**  * Creates a {@link Scan} object and opens the {@link HTable} connection.  * These are opened here because they are needed in the createInputSplits  * which is called before the openInputFormat method.  * So the connection is opened in {@link #configure(Configuration)} and closed in {@link #closeInputFormat()}.  *  * @param parameters The configuration that is to be used  * @see Configuration  */ ;/**  * Creates a {@link Scan} object and opens the {@link HTable} connection.  * These are opened here because they are needed in the createInputSplits  * which is called before the openInputFormat method.  * So the connection is opened in {@link #configure(Configuration)} and closed in {@link #closeInputFormat()}.  *  * @param parameters The configuration that is to be used  * @see Configuration  */ @Override public void configure(Configuration parameters) {     table = createTable().     if (table != null) {         scan = getScanner().     } }
true;private;0;12;/**  * Create an {@link HTable} instance and set it into this format.  */ ;/**  * Create an {@link HTable} instance and set it into this format.  */ private HTable createTable() {     LOG.info("Initializing HBaseConfiguration").     // use files found in the classpath     org.apache.hadoop.conf.Configuration hConf = HBaseConfiguration.create().     try {         return new HTable(hConf, getTableName()).     } catch (Exception e) {         LOG.error("Error instantiating a new HTable instance", e).     }     return null. }
false;protected;1;3;;protected T mapResultToOutType(Result r) {     return mapResultToTuple(r). }
