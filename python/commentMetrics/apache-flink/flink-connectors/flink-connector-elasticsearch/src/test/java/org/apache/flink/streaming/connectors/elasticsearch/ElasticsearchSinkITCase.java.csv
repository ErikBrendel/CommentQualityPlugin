commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testElasticsearchSink() throws Exception {     runElasticsearchSinkTest(). }
false;public;0;4;;@Test public void testNullAddresses() throws Exception {     runNullAddressesTest(). }
false;public;0;4;;@Test public void testEmptyAddresses() throws Exception {     runEmptyAddressesTest(). }
false;public;0;4;;@Test public void testInvalidElasticsearchCluster() throws Exception {     runInvalidElasticsearchClusterTest(). }
true;public;0;31;/**  * Tests that behaviour of the deprecated {@link IndexRequestBuilder} constructor works properly.  */ ;// -- Tests specific to Elasticsearch 1.x -- /**  * Tests that behaviour of the deprecated {@link IndexRequestBuilder} constructor works properly.  */ @Test public void testDeprecatedIndexRequestBuilderVariant() throws Exception {     final String index = "index-req-builder-test-index".     final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment().     DataStreamSource<Tuple2<Integer, String>> source = env.addSource(new SourceSinkDataTestKit.TestDataSourceFunction()).     Map<String, String> userConfig = new HashMap<>().     // This instructs the sink to emit after every element, otherwise they would be buffered     userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, "1").     userConfig.put("cluster.name", CLUSTER_NAME).     userConfig.put("node.local", "true").     List<TransportAddress> transports = new ArrayList<>().     transports.add(new LocalTransportAddress("1")).     source.addSink(new ElasticsearchSink<>(userConfig, transports, new TestIndexRequestBuilder(index))).     env.execute("Elasticsearch Deprecated IndexRequestBuilder Bridge Test").     // verify the results     Client client = embeddedNodeEnv.getClient().     SourceSinkDataTestKit.verifyProducedSinkData(client, index).     client.close(). }
false;protected;4;12;;@Override protected ElasticsearchSinkBase<Tuple2<Integer, String>, Client> createElasticsearchSink(int bulkFlushMaxActions, String clusterName, List<InetSocketAddress> transportAddresses, ElasticsearchSinkFunction<Tuple2<Integer, String>> elasticsearchSinkFunction) {     return new ElasticsearchSink<>(Collections.unmodifiableMap(createUserConfig(bulkFlushMaxActions, clusterName)), ElasticsearchUtils.convertInetSocketAddresses(transportAddresses), elasticsearchSinkFunction). }
false;protected;3;20;;@Override protected ElasticsearchSinkBase<Tuple2<Integer, String>, Client> createElasticsearchSinkForEmbeddedNode(int bulkFlushMaxActions, String clusterName, ElasticsearchSinkFunction<Tuple2<Integer, String>> elasticsearchSinkFunction) throws Exception {     Map<String, String> userConfig = createUserConfig(bulkFlushMaxActions, clusterName).     // Elasticsearch 1.x requires this setting when using     // LocalTransportAddress to connect to a local embedded node     userConfig.put("node.local", "true").     List<TransportAddress> transports = new ArrayList<>().     transports.add(new LocalTransportAddress("1")).     return new ElasticsearchSink<>(Collections.unmodifiableMap(userConfig), transports, elasticsearchSinkFunction). }
false;protected;4;15;;@Override protected ElasticsearchSinkBase<Tuple2<Integer, String>, Client> createElasticsearchSinkForNode(int bulkFlushMaxActions, String clusterName, ElasticsearchSinkFunction<Tuple2<Integer, String>> elasticsearchSinkFunction, String ipAddress) throws Exception {     List<TransportAddress> transports = new ArrayList<>().     transports.add(new InetSocketTransportAddress(InetAddress.getByName(ipAddress), 9300)).     return new ElasticsearchSink<>(Collections.unmodifiableMap(createUserConfig(bulkFlushMaxActions, clusterName)), transports, elasticsearchSinkFunction). }
false;public;2;11;;@Override public IndexRequest createIndexRequest(Tuple2<Integer, String> element, RuntimeContext ctx) {     Map<String, Object> json = new HashMap<>().     json.put("data", element.f1).     return Requests.indexRequest().index(index).type("flink-es-test-type").id(element.f0.toString()).source(json). }
