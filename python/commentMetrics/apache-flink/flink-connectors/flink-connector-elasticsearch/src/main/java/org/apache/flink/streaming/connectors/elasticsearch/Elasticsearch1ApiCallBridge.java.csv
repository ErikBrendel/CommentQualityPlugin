commented;modifiers;parameterAmount;loc;comment;code
false;public;1;45;;@Override public Client createClient(Map<String, String> clientConfig) {     if (transportAddresses == null) {         // Make sure that we disable http access to our embedded node         Settings settings = settingsBuilder().put(clientConfig).put("http.enabled", false).build().         node = nodeBuilder().settings(settings).client(true).data(false).node().         Client client = node.client().         if (LOG.isInfoEnabled()) {             LOG.info("Created Elasticsearch client from embedded node").         }         return client.     } else {         Settings settings = settingsBuilder().put(clientConfig).build().         TransportClient transportClient = new TransportClient(settings).         for (TransportAddress transport : transportAddresses) {             transportClient.addTransportAddress(transport).         }         // verify that we actually are connected to a cluster         if (transportClient.connectedNodes().isEmpty()) {             throw new RuntimeException("Elasticsearch client is not connected to any Elasticsearch nodes!").         }         if (LOG.isInfoEnabled()) {             LOG.info("Created Elasticsearch TransportClient with connected nodes {}", transportClient.connectedNodes()).         }         return transportClient.     } }
false;public;2;4;;@Override public BulkProcessor.Builder createBulkProcessorBuilder(Client client, BulkProcessor.Listener listener) {     return BulkProcessor.builder(client, listener). }
false;public;1;8;;@Override public Throwable extractFailureCauseFromBulkItemResponse(BulkItemResponse bulkItemResponse) {     if (!bulkItemResponse.isFailed()) {         return null.     } else {         return new RuntimeException(bulkItemResponse.getFailureMessage()).     } }
false;public;2;7;;@Override public void configureBulkProcessorBackoff(BulkProcessor.Builder builder, @Nullable ElasticsearchSinkBase.BulkFlushBackoffPolicy flushBackoffPolicy) {     // Elasticsearch 1.x does not support backoff retries for failed bulk requests     LOG.warn("Elasticsearch 1.x does not support backoff retries."). }
false;public;0;7;;@Override public void cleanup() {     if (node != null && !node.isClosed()) {         node.close().         node = null.     } }
