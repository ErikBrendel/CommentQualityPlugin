commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;9;/**  * Returns {@link ParameterTool} for the arguments parsed by {@link GenericOptionsParser}.  *  * @param args Input array arguments. It should be parsable by {@link GenericOptionsParser}  * @return A {@link ParameterTool}  * @throws IOException If arguments cannot be parsed by {@link GenericOptionsParser}  * @see GenericOptionsParser  */ ;/**  * Returns {@link ParameterTool} for the arguments parsed by {@link GenericOptionsParser}.  *  * @param args Input array arguments. It should be parsable by {@link GenericOptionsParser}  * @return A {@link ParameterTool}  * @throws IOException If arguments cannot be parsed by {@link GenericOptionsParser}  * @see GenericOptionsParser  */ public static ParameterTool paramsFromGenericOptionsParser(String[] args) throws IOException {     Option[] options = new GenericOptionsParser(args).getCommandLine().getOptions().     Map<String, String> map = new HashMap<String, String>().     for (Option option : options) {         String[] split = option.getValue().split("=").         map.put(split[0], split[1]).     }     return ParameterTool.fromMap(map). }
