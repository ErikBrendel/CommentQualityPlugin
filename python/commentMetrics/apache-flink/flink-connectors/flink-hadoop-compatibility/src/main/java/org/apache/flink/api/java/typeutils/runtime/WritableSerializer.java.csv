commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@SuppressWarnings("unchecked") @Override public T createInstance() {     if (typeClass == NullWritable.class) {         return (T) NullWritable.get().     }     return InstantiationUtil.instantiate(typeClass). }
false;public;1;6;;@Override public T copy(T from) {     checkKryoInitialized().     return KryoUtils.copy(from, kryo, this). }
false;public;2;6;;@Override public T copy(T from, T reuse) {     checkKryoInitialized().     return KryoUtils.copy(from, reuse, kryo, this). }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;4;;@Override public void serialize(T record, DataOutputView target) throws IOException {     record.write(target). }
false;public;1;4;;@Override public T deserialize(DataInputView source) throws IOException {     return deserialize(createInstance(), source). }
false;public;2;5;;@Override public T deserialize(T reuse, DataInputView source) throws IOException {     reuse.readFields(source).     return reuse. }
false;public;2;6;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     ensureInstanceInstantiated().     copyInstance.readFields(source).     copyInstance.write(target). }
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public WritableSerializer<T> duplicate() {     return new WritableSerializer<T>(typeClass). }
false;private;0;5;;// -------------------------------------------------------------------------------------------- private void ensureInstanceInstantiated() {     if (copyInstance == null) {         copyInstance = createInstance().     } }
false;private;0;12;;private void checkKryoInitialized() {     if (this.kryo == null) {         this.kryo = new Kryo().         Kryo.DefaultInstantiatorStrategy instantiatorStrategy = new Kryo.DefaultInstantiatorStrategy().         instantiatorStrategy.setFallbackInstantiatorStrategy(new StdInstantiatorStrategy()).         kryo.setInstantiatorStrategy(instantiatorStrategy).         this.kryo.setAsmEnabled(true).         this.kryo.register(typeClass).     } }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int hashCode() {     return this.typeClass.hashCode(). }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj instanceof WritableSerializer) {         WritableSerializer<?> other = (WritableSerializer<?>) obj.         return typeClass == other.typeClass.     } else {         return false.     } }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // Serializer configuration snapshotting & compatibility // -------------------------------------------------------------------------------------------- @Override public TypeSerializerSnapshot<T> snapshotConfiguration() {     return new WritableSerializerSnapshot<>(typeClass). }
false;public;0;4;;@Override public int getVersion() {     return VERSION. }
false;public;1;5;;@Override public TypeSerializerSchemaCompatibility<T> resolveSchemaCompatibility(TypeSerializer<T> newSerializer) {     return new WritableSerializerSnapshot<>(getTypeClass()).resolveSchemaCompatibility(newSerializer). }
false;protected;1;4;;@Override protected TypeSerializer<T> createSerializer(Class<T> typeClass) {     return new WritableSerializer<>(typeClass). }
false;protected;1;5;;@SuppressWarnings("unchecked") @Override protected Class<T> getTypeClass(WritableSerializer serializer) {     return serializer.typeClass. }
false;protected;0;4;;@Override protected Class<?> serializerClass() {     return WritableSerializer.class. }
