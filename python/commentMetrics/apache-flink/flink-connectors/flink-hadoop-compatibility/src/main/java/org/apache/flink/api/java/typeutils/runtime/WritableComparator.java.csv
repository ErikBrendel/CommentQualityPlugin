commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public int hash(T record) {     return record.hashCode(). }
false;public;1;6;;@Override public void setReference(T toCompare) {     checkKryoInitialized().     reference = KryoUtils.copy(toCompare, kryo, new WritableSerializer<T>(type)). }
false;public;1;4;;@Override public boolean equalToReference(T candidate) {     return candidate.equals(reference). }
false;public;1;6;;@Override public int compareToReference(TypeComparator<T> referencedComparator) {     T otherRef = ((WritableComparator<T>) referencedComparator).reference.     int comp = otherRef.compareTo(reference).     return ascendingComparison ? comp : -comp. }
false;public;2;5;;@Override public int compare(T first, T second) {     int comp = first.compareTo(second).     return ascendingComparison ? comp : -comp. }
false;public;2;11;;@Override public int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException {     ensureReferenceInstantiated().     ensureTempReferenceInstantiated().     reference.readFields(firstSource).     tempReference.readFields(secondSource).     int comp = reference.compareTo(tempReference).     return ascendingComparison ? comp : -comp. }
false;public;0;4;;@Override public boolean supportsNormalizedKey() {     return NormalizableKey.class.isAssignableFrom(type). }
false;public;0;7;;@Override public int getNormalizeKeyLen() {     ensureReferenceInstantiated().     NormalizableKey<?> key = (NormalizableKey<?>) reference.     return key.getMaxNormalizedKeyLen(). }
false;public;1;4;;@Override public boolean isNormalizedKeyPrefixOnly(int keyBytes) {     return keyBytes < getNormalizeKeyLen(). }
false;public;4;5;;@Override public void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes) {     NormalizableKey<?> key = (NormalizableKey<?>) record.     key.copyNormalizedKey(target, offset, numBytes). }
false;public;0;4;;@Override public boolean invertNormalizedKey() {     return !ascendingComparison. }
false;public;0;4;;@Override public TypeComparator<T> duplicate() {     return new WritableComparator<T>(ascendingComparison, type). }
false;public;3;5;;@Override public int extractKeys(Object record, Object[] target, int index) {     target[index] = record.     return 1. }
false;public;0;5;;@SuppressWarnings("rawtypes") @Override public TypeComparator[] getFlatComparators() {     return comparators. }
false;public;0;4;;// -------------------------------------------------------------------------------------------- // unsupported normalization // -------------------------------------------------------------------------------------------- @Override public boolean supportsSerializationWithKeyNormalization() {     return false. }
false;public;2;4;;@Override public void writeWithKeyNormalization(T record, DataOutputView target) throws IOException {     throw new UnsupportedOperationException(). }
false;public;2;4;;@Override public T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException {     throw new UnsupportedOperationException(). }
false;private;0;12;;// -------------------------------------------------------------------------------------------- private void checkKryoInitialized() {     if (this.kryo == null) {         this.kryo = new Kryo().         Kryo.DefaultInstantiatorStrategy instantiatorStrategy = new Kryo.DefaultInstantiatorStrategy().         instantiatorStrategy.setFallbackInstantiatorStrategy(new StdInstantiatorStrategy()).         kryo.setInstantiatorStrategy(instantiatorStrategy).         this.kryo.setAsmEnabled(true).         this.kryo.register(type).     } }
false;private;0;5;;private void ensureReferenceInstantiated() {     if (reference == null) {         reference = InstantiationUtil.instantiate(type, Writable.class).     } }
false;private;0;5;;private void ensureTempReferenceInstantiated() {     if (tempReference == null) {         tempReference = InstantiationUtil.instantiate(type, Writable.class).     } }
