commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void open(Configuration parameters) throws Exception {     super.open(parameters).     this.mapper.configure(jobConf).     this.reporter = new HadoopDummyReporter().     this.outputCollector = new HadoopOutputCollector<KEYOUT, VALUEOUT>(). }
false;public;2;6;;@Override public void flatMap(final Tuple2<KEYIN, VALUEIN> value, final Collector<Tuple2<KEYOUT, VALUEOUT>> out) throws Exception {     outputCollector.setFlinkCollector(out).     mapper.map(value.f0, value.f1, outputCollector, reporter). }
false;public;0;10;;@SuppressWarnings("unchecked") @Override public TypeInformation<Tuple2<KEYOUT, VALUEOUT>> getProducedType() {     Class<KEYOUT> outKeyClass = (Class<KEYOUT>) TypeExtractor.getParameterType(Mapper.class, mapper.getClass(), 2).     Class<VALUEOUT> outValClass = (Class<VALUEOUT>) TypeExtractor.getParameterType(Mapper.class, mapper.getClass(), 3).     final TypeInformation<KEYOUT> keyTypeInfo = TypeExtractor.getForClass((Class<KEYOUT>) outKeyClass).     final TypeInformation<VALUEOUT> valueTypleInfo = TypeExtractor.getForClass((Class<VALUEOUT>) outValClass).     return new TupleTypeInfo<Tuple2<KEYOUT, VALUEOUT>>(keyTypeInfo, valueTypleInfo). }
true;private;1;4;/**  * Custom serialization methods.  * @see <a href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html">http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html</a>  */ ;/**  * Custom serialization methods.  * @see <a href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html">http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html</a>  */ private void writeObject(final ObjectOutputStream out) throws IOException {     out.writeObject(mapper.getClass()).     jobConf.write(out). }
false;private;1;9;;@SuppressWarnings("unchecked") private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {     Class<Mapper<KEYIN, VALUEIN, KEYOUT, VALUEOUT>> mapperClass = (Class<Mapper<KEYIN, VALUEIN, KEYOUT, VALUEOUT>>) in.readObject().     mapper = InstantiationUtil.instantiate(mapperClass).     jobConf = new JobConf().     jobConf.readFields(in). }
