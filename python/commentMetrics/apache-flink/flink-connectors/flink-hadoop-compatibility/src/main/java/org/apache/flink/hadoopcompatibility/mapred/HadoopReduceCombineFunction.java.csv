commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;@SuppressWarnings("unchecked") @Override public void open(Configuration parameters) throws Exception {     super.open(parameters).     this.reducer.configure(jobConf).     this.combiner.configure(jobConf).     this.reporter = new HadoopDummyReporter().     Class<KEYIN> inKeyClass = (Class<KEYIN>) TypeExtractor.getParameterType(Reducer.class, reducer.getClass(), 0).     TypeSerializer<KEYIN> keySerializer = TypeExtractor.getForClass(inKeyClass).createSerializer(getRuntimeContext().getExecutionConfig()).     this.valueIterator = new HadoopTupleUnwrappingIterator<>(keySerializer).     this.combineCollector = new HadoopOutputCollector<>().     this.reduceCollector = new HadoopOutputCollector<>(). }
false;public;2;7;;@Override public void reduce(final Iterable<Tuple2<KEYIN, VALUEIN>> values, final Collector<Tuple2<KEYOUT, VALUEOUT>> out) throws Exception {     reduceCollector.setFlinkCollector(out).     valueIterator.set(values.iterator()).     reducer.reduce(valueIterator.getCurrentKey(), valueIterator, reduceCollector, reporter). }
false;public;2;6;;@Override public void combine(final Iterable<Tuple2<KEYIN, VALUEIN>> values, final Collector<Tuple2<KEYIN, VALUEIN>> out) throws Exception {     combineCollector.setFlinkCollector(out).     valueIterator.set(values.iterator()).     combiner.reduce(valueIterator.getCurrentKey(), valueIterator, combineCollector, reporter). }
false;public;0;10;;@SuppressWarnings("unchecked") @Override public TypeInformation<Tuple2<KEYOUT, VALUEOUT>> getProducedType() {     Class<KEYOUT> outKeyClass = (Class<KEYOUT>) TypeExtractor.getParameterType(Reducer.class, reducer.getClass(), 2).     Class<VALUEOUT> outValClass = (Class<VALUEOUT>) TypeExtractor.getParameterType(Reducer.class, reducer.getClass(), 3).     final TypeInformation<KEYOUT> keyTypeInfo = TypeExtractor.getForClass(outKeyClass).     final TypeInformation<VALUEOUT> valueTypleInfo = TypeExtractor.getForClass(outValClass).     return new TupleTypeInfo<>(keyTypeInfo, valueTypleInfo). }
true;private;1;6;/**  * Custom serialization methods.  * @see <a href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html">http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html</a>  */ ;/**  * Custom serialization methods.  * @see <a href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html">http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html</a>  */ private void writeObject(final ObjectOutputStream out) throws IOException {     out.writeObject(reducer.getClass()).     out.writeObject(combiner.getClass()).     jobConf.write(out). }
false;private;1;14;;@SuppressWarnings("unchecked") private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {     Class<Reducer<KEYIN, VALUEIN, KEYOUT, VALUEOUT>> reducerClass = (Class<Reducer<KEYIN, VALUEIN, KEYOUT, VALUEOUT>>) in.readObject().     reducer = InstantiationUtil.instantiate(reducerClass).     Class<Reducer<KEYIN, VALUEIN, KEYIN, VALUEIN>> combinerClass = (Class<Reducer<KEYIN, VALUEIN, KEYIN, VALUEIN>>) in.readObject().     combiner = InstantiationUtil.instantiate(combinerClass).     jobConf = new JobConf().     jobConf.readFields(in). }
