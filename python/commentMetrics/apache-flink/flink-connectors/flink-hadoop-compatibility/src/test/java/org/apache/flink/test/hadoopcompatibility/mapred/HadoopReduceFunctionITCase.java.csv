commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testStandardGrouping() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple2<IntWritable, Text>> ds = HadoopTestData.getKVPairDataSet(env).map(new Mapper1()).     DataSet<Tuple2<IntWritable, IntWritable>> commentCnts = ds.groupBy(0).reduceGroup(new HadoopReduceFunction<IntWritable, Text, IntWritable, IntWritable>(new CommentCntReducer())).     String resultPath = tempFolder.newFile().toURI().toString().     commentCnts.writeAsText(resultPath).     env.execute().     String expected = "(0,0)\n" + "(1,3)\n" + "(2,5)\n" + "(3,5)\n" + "(4,2)\n".     compareResultsByLinesInMemory(expected, resultPath). }
false;public;0;18;;@Test public void testUngroupedHadoopReducer() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     DataSet<Tuple2<IntWritable, Text>> ds = HadoopTestData.getKVPairDataSet(env).     DataSet<Tuple2<IntWritable, IntWritable>> commentCnts = ds.reduceGroup(new HadoopReduceFunction<IntWritable, Text, IntWritable, IntWritable>(new AllCommentCntReducer())).     String resultPath = tempFolder.newFile().toURI().toString().     commentCnts.writeAsText(resultPath).     env.execute().     String expected = "(42,15)\n".     compareResultsByLinesInMemory(expected, resultPath). }
false;public;0;28;;@Test public void testConfigurationViaJobConf() throws Exception {     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     JobConf conf = new JobConf().     conf.set("my.cntPrefix", "Hello").     DataSet<Tuple2<IntWritable, Text>> ds = HadoopTestData.getKVPairDataSet(env).map(new Mapper2()).     DataSet<Tuple2<IntWritable, IntWritable>> helloCnts = ds.groupBy(0).reduceGroup(new HadoopReduceFunction<IntWritable, Text, IntWritable, IntWritable>(new ConfigurableCntReducer(), conf)).     String resultPath = tempFolder.newFile().toURI().toString().     helloCnts.writeAsText(resultPath).     env.execute().     String expected = "(0,0)\n" + "(1,0)\n" + "(2,1)\n" + "(3,1)\n" + "(4,1)\n".     compareResultsByLinesInMemory(expected, resultPath). }
false;public;4;12;;@Override public void reduce(IntWritable k, Iterator<Text> vs, OutputCollector<IntWritable, IntWritable> out, Reporter r) throws IOException {     int commentCnt = 0.     while (vs.hasNext()) {         String v = vs.next().toString().         if (v.startsWith("Comment")) {             commentCnt++.         }     }     out.collect(k, new IntWritable(commentCnt)). }
false;public;1;2;;@Override public void configure(final JobConf arg0) { }
false;public;0;2;;@Override public void close() throws IOException { }
false;public;4;12;;@Override public void reduce(IntWritable k, Iterator<Text> vs, OutputCollector<IntWritable, IntWritable> out, Reporter r) throws IOException {     int commentCnt = 0.     while (vs.hasNext()) {         String v = vs.next().toString().         if (v.startsWith("Comment")) {             commentCnt++.         }     }     out.collect(new IntWritable(42), new IntWritable(commentCnt)). }
false;public;1;2;;@Override public void configure(final JobConf arg0) { }
false;public;0;2;;@Override public void close() throws IOException { }
false;public;4;12;;@Override public void reduce(IntWritable k, Iterator<Text> vs, OutputCollector<IntWritable, IntWritable> out, Reporter r) throws IOException {     int commentCnt = 0.     while (vs.hasNext()) {         String v = vs.next().toString().         if (v.startsWith(this.countPrefix)) {             commentCnt++.         }     }     out.collect(k, new IntWritable(commentCnt)). }
false;public;1;4;;@Override public void configure(final JobConf c) {     this.countPrefix = c.get("my.cntPrefix"). }
false;public;0;2;;@Override public void close() throws IOException { }
false;public;1;6;;@Override public Tuple2<IntWritable, Text> map(Tuple2<IntWritable, Text> v) throws Exception {     v.f0 = new IntWritable(v.f0.get() / 5).     return v. }
false;public;1;6;;@Override public Tuple2<IntWritable, Text> map(Tuple2<IntWritable, Text> v) throws Exception {     v.f0 = new IntWritable(v.f0.get() % 5).     return v. }
