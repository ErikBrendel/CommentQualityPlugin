commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected TypeSerializer<TwoPhaseCommitSinkFunction.State<FlinkKafkaProducer011.KafkaTransactionState, FlinkKafkaProducer011.KafkaTransactionContext>> createSerializer() {     return new TwoPhaseCommitSinkFunction.StateSerializer<>(new FlinkKafkaProducer011.TransactionStateSerializer(), new FlinkKafkaProducer011.ContextStateSerializer()). }
false;protected;0;6;;@Override protected Class<TwoPhaseCommitSinkFunction.State<FlinkKafkaProducer011.KafkaTransactionState, FlinkKafkaProducer011.KafkaTransactionContext>> getTypeClass() {     return (Class) TwoPhaseCommitSinkFunction.State.class. }
false;protected;0;4;;@Override protected int getLength() {     return -1. }
false;protected;0;44;;@Override protected TwoPhaseCommitSinkFunction.State<FlinkKafkaProducer011.KafkaTransactionState, FlinkKafkaProducer011.KafkaTransactionContext>[] getTestData() {     // noinspection unchecked     return new TwoPhaseCommitSinkFunction.State[] { new TwoPhaseCommitSinkFunction.State<FlinkKafkaProducer011.KafkaTransactionState, FlinkKafkaProducer011.KafkaTransactionContext>(new TransactionHolder(new FlinkKafkaProducer011.KafkaTransactionState("fake", 1L, (short) 42, null), 0), Collections.emptyList(), Optional.empty()), new TwoPhaseCommitSinkFunction.State<FlinkKafkaProducer011.KafkaTransactionState, FlinkKafkaProducer011.KafkaTransactionContext>(new TransactionHolder(new FlinkKafkaProducer011.KafkaTransactionState("fake", 1L, (short) 42, null), 2711), Collections.singletonList(new TransactionHolder(new FlinkKafkaProducer011.KafkaTransactionState("fake", 1L, (short) 42, null), 42)), Optional.empty()), new TwoPhaseCommitSinkFunction.State<FlinkKafkaProducer011.KafkaTransactionState, FlinkKafkaProducer011.KafkaTransactionContext>(new TransactionHolder(new FlinkKafkaProducer011.KafkaTransactionState("fake", 1L, (short) 42, null), 0), Collections.emptyList(), Optional.of(new FlinkKafkaProducer011.KafkaTransactionContext(Collections.emptySet()))), new TwoPhaseCommitSinkFunction.State<FlinkKafkaProducer011.KafkaTransactionState, FlinkKafkaProducer011.KafkaTransactionContext>(new TransactionHolder(new FlinkKafkaProducer011.KafkaTransactionState("fake", 1L, (short) 42, null), 0), Collections.emptyList(), Optional.of(new FlinkKafkaProducer011.KafkaTransactionContext(Collections.singleton("hello")))), new TwoPhaseCommitSinkFunction.State<FlinkKafkaProducer011.KafkaTransactionState, FlinkKafkaProducer011.KafkaTransactionContext>(new TransactionHolder(new FlinkKafkaProducer011.KafkaTransactionState("fake", 1L, (short) 42, null), 0), Collections.singletonList(new TransactionHolder(new FlinkKafkaProducer011.KafkaTransactionState("fake", 1L, (short) 42, null), 0)), Optional.of(new FlinkKafkaProducer011.KafkaTransactionContext(Collections.emptySet()))), new TwoPhaseCommitSinkFunction.State<FlinkKafkaProducer011.KafkaTransactionState, FlinkKafkaProducer011.KafkaTransactionContext>(new TransactionHolder(new FlinkKafkaProducer011.KafkaTransactionState("fake", 1L, (short) 42, null), 0), Collections.singletonList(new TransactionHolder(new FlinkKafkaProducer011.KafkaTransactionState("fake", 1L, (short) 42, null), 0)), Optional.of(new FlinkKafkaProducer011.KafkaTransactionContext(Collections.singleton("hello")))) }. }
false;public;0;4;;@Override public void testInstantiate() { // this serializer does not support instantiation }
