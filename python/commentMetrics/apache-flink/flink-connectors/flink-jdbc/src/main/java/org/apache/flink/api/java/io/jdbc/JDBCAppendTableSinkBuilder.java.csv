commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Specify the username of the JDBC connection.  * @param username the username of the JDBC connection.  */ ;/**  * Specify the username of the JDBC connection.  * @param username the username of the JDBC connection.  */ public JDBCAppendTableSinkBuilder setUsername(String username) {     this.username = username.     return this. }
true;public;1;4;/**  * Specify the password of the JDBC connection.  * @param password the password of the JDBC connection.  */ ;/**  * Specify the password of the JDBC connection.  * @param password the password of the JDBC connection.  */ public JDBCAppendTableSinkBuilder setPassword(String password) {     this.password = password.     return this. }
true;public;1;4;/**  * Specify the name of the JDBC driver that will be used.  * @param drivername the name of the JDBC driver.  */ ;/**  * Specify the name of the JDBC driver that will be used.  * @param drivername the name of the JDBC driver.  */ public JDBCAppendTableSinkBuilder setDrivername(String drivername) {     this.driverName = drivername.     return this. }
true;public;1;4;/**  * Specify the URL of the JDBC database.  * @param dbURL the URL of the database, whose format is specified by the  *              corresponding JDBC driver.  */ ;/**  * Specify the URL of the JDBC database.  * @param dbURL the URL of the database, whose format is specified by the  *              corresponding JDBC driver.  */ public JDBCAppendTableSinkBuilder setDBUrl(String dbURL) {     this.dbURL = dbURL.     return this. }
true;public;1;4;/**  * Specify the query that the sink will execute. Usually user can specify  * INSERT, REPLACE or UPDATE to push the data to the database.  * @param query The query to be executed by the sink.  * @see org.apache.flink.api.java.io.jdbc.JDBCOutputFormat.JDBCOutputFormatBuilder#setQuery(String)  */ ;/**  * Specify the query that the sink will execute. Usually user can specify  * INSERT, REPLACE or UPDATE to push the data to the database.  * @param query The query to be executed by the sink.  * @see org.apache.flink.api.java.io.jdbc.JDBCOutputFormat.JDBCOutputFormatBuilder#setQuery(String)  */ public JDBCAppendTableSinkBuilder setQuery(String query) {     this.query = query.     return this. }
true;public;1;4;/**  * Specify the size of the batch. By default the sink will batch the query  * to improve the performance  * @param batchSize the size of batch  */ ;/**  * Specify the size of the batch. By default the sink will batch the query  * to improve the performance  * @param batchSize the size of batch  */ public JDBCAppendTableSinkBuilder setBatchSize(int batchSize) {     this.batchSize = batchSize.     return this. }
true;public;1;8;/**  * Specify the type of the rows that the sink will be accepting.  * @param types the type of each field  */ ;/**  * Specify the type of the rows that the sink will be accepting.  * @param types the type of each field  */ public JDBCAppendTableSinkBuilder setParameterTypes(TypeInformation<?>... types) {     int[] ty = new int[types.length].     for (int i = 0. i < types.length. ++i) {         ty[i] = JDBCTypeUtil.typeInformationToSqlType(types[i]).     }     this.parameterTypes = ty.     return this. }
true;public;1;4;/**  * Specify the type of the rows that the sink will be accepting.  * @param types the type of each field defined by {@see java.sql.Types}.  */ ;/**  * Specify the type of the rows that the sink will be accepting.  * @param types the type of each field defined by {@see java.sql.Types}.  */ public JDBCAppendTableSinkBuilder setParameterTypes(int... types) {     this.parameterTypes = types.     return this. }
true;public;0;17;/**  * Finalizes the configuration and checks validity.  *  * @return Configured JDBCOutputFormat  */ ;/**  * Finalizes the configuration and checks validity.  *  * @return Configured JDBCOutputFormat  */ public JDBCAppendTableSink build() {     Preconditions.checkNotNull(parameterTypes, "Types of the query parameters are not specified." + " Please specify types using the setParameterTypes() method.").     JDBCOutputFormat format = JDBCOutputFormat.buildJDBCOutputFormat().setUsername(username).setPassword(password).setDBUrl(dbURL).setQuery(query).setDrivername(driverName).setBatchInterval(batchSize).setSqlTypes(parameterTypes).finish().     return new JDBCAppendTableSink(format). }
