commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static JDBCAppendTableSinkBuilder builder() {     return new JDBCAppendTableSinkBuilder(). }
false;public;1;6;;@Override public void emitDataStream(DataStream<Row> dataStream) {     dataStream.addSink(new JDBCSinkFunction(outputFormat)).name(TableConnectorUtils.generateRuntimeName(this.getClass(), fieldNames)). }
false;public;1;4;;@Override public void emitDataSet(DataSet<Row> dataSet) {     dataSet.output(outputFormat). }
false;public;0;4;;@Override public TypeInformation<Row> getOutputType() {     return new RowTypeInfo(fieldTypes, fieldNames). }
false;public;0;4;;@Override public String[] getFieldNames() {     return fieldNames. }
false;public;0;4;;@Override public TypeInformation<?>[] getFieldTypes() {     return fieldTypes. }
false;public;2;29;;@Override public TableSink<Row> configure(String[] fieldNames, TypeInformation<?>[] fieldTypes) {     int[] types = outputFormat.getTypesArray().     String sinkSchema = String.join(", ", IntStream.of(types).mapToObj(JDBCTypeUtil::getTypeName).collect(Collectors.toList())).     String tableSchema = String.join(", ", Stream.of(fieldTypes).map(JDBCTypeUtil::getTypeName).collect(Collectors.toList())).     String msg = String.format("Schema of output table is incompatible with JDBCAppendTableSink schema. " + "Table schema: [%s], sink schema: [%s]", tableSchema, sinkSchema).     Preconditions.checkArgument(fieldTypes.length == types.length, msg).     for (int i = 0. i < types.length. ++i) {         Preconditions.checkArgument(JDBCTypeUtil.typeInformationToSqlType(fieldTypes[i]) == types[i], msg).     }     JDBCAppendTableSink copy.     try {         copy = new JDBCAppendTableSink(InstantiationUtil.clone(outputFormat)).     } catch (IOException | ClassNotFoundException e) {         throw new RuntimeException(e).     }     copy.fieldNames = fieldNames.     copy.fieldTypes = fieldTypes.     return copy. }
false;;0;4;;@VisibleForTesting JDBCOutputFormat getOutputFormat() {     return outputFormat. }
