# id;timestamp;commentText;codeText;commentWords;codeWords
JDBCInputFormat -> @Override 	public void close() throws IOException;1480685315;Closes all resources used.__@throws IOException Indicates that a resource could not be closed.;@Override_	public void close() throws IOException {_		if(resultSet == null) {_			return__		}_		try {_			resultSet.close()__		} catch (SQLException se) {_			LOG.info("Inputformat ResultSet couldn't be closed - " + se.getMessage())__		}_	};closes,all,resources,used,throws,ioexception,indicates,that,a,resource,could,not,be,closed;override,public,void,close,throws,ioexception,if,result,set,null,return,try,result,set,close,catch,sqlexception,se,log,info,inputformat,result,set,couldn,t,be,closed,se,get,message
JDBCInputFormat -> @Override 	public void close() throws IOException;1481798200;Closes all resources used.__@throws IOException Indicates that a resource could not be closed.;@Override_	public void close() throws IOException {_		if(resultSet == null) {_			return__		}_		try {_			resultSet.close()__		} catch (SQLException se) {_			LOG.info("Inputformat ResultSet couldn't be closed - " + se.getMessage())__		}_	};closes,all,resources,used,throws,ioexception,indicates,that,a,resource,could,not,be,closed;override,public,void,close,throws,ioexception,if,result,set,null,return,try,result,set,close,catch,sqlexception,se,log,info,inputformat,result,set,couldn,t,be,closed,se,get,message
JDBCInputFormat -> @Override 	public void close() throws IOException;1491500150;Closes all resources used.__@throws IOException Indicates that a resource could not be closed.;@Override_	public void close() throws IOException {_		if(resultSet == null) {_			return__		}_		try {_			resultSet.close()__		} catch (SQLException se) {_			LOG.info("Inputformat ResultSet couldn't be closed - " + se.getMessage())__		}_	};closes,all,resources,used,throws,ioexception,indicates,that,a,resource,could,not,be,closed;override,public,void,close,throws,ioexception,if,result,set,null,return,try,result,set,close,catch,sqlexception,se,log,info,inputformat,result,set,couldn,t,be,closed,se,get,message
JDBCInputFormat -> @Override 	public void close() throws IOException;1495923068;Closes all resources used.__@throws IOException Indicates that a resource could not be closed.;@Override_	public void close() throws IOException {_		if (resultSet == null) {_			return__		}_		try {_			resultSet.close()__		} catch (SQLException se) {_			LOG.info("Inputformat ResultSet couldn't be closed - " + se.getMessage())__		}_	};closes,all,resources,used,throws,ioexception,indicates,that,a,resource,could,not,be,closed;override,public,void,close,throws,ioexception,if,result,set,null,return,try,result,set,close,catch,sqlexception,se,log,info,inputformat,result,set,couldn,t,be,closed,se,get,message
JDBCInputFormat -> @Override 	public void close() throws IOException;1496409235;Closes all resources used.__@throws IOException Indicates that a resource could not be closed.;@Override_	public void close() throws IOException {_		if (resultSet == null) {_			return__		}_		try {_			resultSet.close()__		} catch (SQLException se) {_			LOG.info("Inputformat ResultSet couldn't be closed - " + se.getMessage())__		}_	};closes,all,resources,used,throws,ioexception,indicates,that,a,resource,could,not,be,closed;override,public,void,close,throws,ioexception,if,result,set,null,return,try,result,set,close,catch,sqlexception,se,log,info,inputformat,result,set,couldn,t,be,closed,se,get,message
JDBCInputFormat -> @Override 	public void close() throws IOException;1504104692;Closes all resources used.__@throws IOException Indicates that a resource could not be closed.;@Override_	public void close() throws IOException {_		if (resultSet == null) {_			return__		}_		try {_			resultSet.close()__		} catch (SQLException se) {_			LOG.info("Inputformat ResultSet couldn't be closed - " + se.getMessage())__		}_	};closes,all,resources,used,throws,ioexception,indicates,that,a,resource,could,not,be,closed;override,public,void,close,throws,ioexception,if,result,set,null,return,try,result,set,close,catch,sqlexception,se,log,info,inputformat,result,set,couldn,t,be,closed,se,get,message
JDBCInputFormat -> @Override 	public Row nextRecord(Row row) throws IOException;1480685315;Stores the next resultSet row in a tuple__@param row row to be reused._@return row containing next {@link Row}_@throws java.io.IOException;@Override_	public Row nextRecord(Row row) throws IOException {_		try {_			if (!hasNext) {_				return null__			}_			for (int pos = 0_ pos < row.productArity()_ pos++) {_				row.setField(pos, resultSet.getObject(pos + 1))__			}_			_			hasNext = resultSet.next()__			return row__		} catch (SQLException se) {_			throw new IOException("Couldn't read data - " + se.getMessage(), se)__		} catch (NullPointerException npe) {_			throw new IOException("Couldn't access resultSet", npe)__		}_	};stores,the,next,result,set,row,in,a,tuple,param,row,row,to,be,reused,return,row,containing,next,link,row,throws,java,io,ioexception;override,public,row,next,record,row,row,throws,ioexception,try,if,has,next,return,null,for,int,pos,0,pos,row,product,arity,pos,row,set,field,pos,result,set,get,object,pos,1,has,next,result,set,next,return,row,catch,sqlexception,se,throw,new,ioexception,couldn,t,read,data,se,get,message,se,catch,null,pointer,exception,npe,throw,new,ioexception,couldn,t,access,result,set,npe
JDBCInputFormat -> @Override 	public Row nextRecord(Row row) throws IOException;1481798200;Stores the next resultSet row in a tuple__@param row row to be reused._@return row containing next {@link Row}_@throws java.io.IOException;@Override_	public Row nextRecord(Row row) throws IOException {_		try {_			if (!hasNext) {_				return null__			}_			for (int pos = 0_ pos < row.getArity()_ pos++) {_				row.setField(pos, resultSet.getObject(pos + 1))__			}_			_			hasNext = resultSet.next()__			return row__		} catch (SQLException se) {_			throw new IOException("Couldn't read data - " + se.getMessage(), se)__		} catch (NullPointerException npe) {_			throw new IOException("Couldn't access resultSet", npe)__		}_	};stores,the,next,result,set,row,in,a,tuple,param,row,row,to,be,reused,return,row,containing,next,link,row,throws,java,io,ioexception;override,public,row,next,record,row,row,throws,ioexception,try,if,has,next,return,null,for,int,pos,0,pos,row,get,arity,pos,row,set,field,pos,result,set,get,object,pos,1,has,next,result,set,next,return,row,catch,sqlexception,se,throw,new,ioexception,couldn,t,read,data,se,get,message,se,catch,null,pointer,exception,npe,throw,new,ioexception,couldn,t,access,result,set,npe
JDBCInputFormat -> @Override 	public Row nextRecord(Row row) throws IOException;1491500150;Stores the next resultSet row in a tuple__@param row row to be reused._@return row containing next {@link Row}_@throws java.io.IOException;@Override_	public Row nextRecord(Row row) throws IOException {_		try {_			if (!hasNext) {_				return null__			}_			for (int pos = 0_ pos < row.getArity()_ pos++) {_				row.setField(pos, resultSet.getObject(pos + 1))__			}_			_			hasNext = resultSet.next()__			return row__		} catch (SQLException se) {_			throw new IOException("Couldn't read data - " + se.getMessage(), se)__		} catch (NullPointerException npe) {_			throw new IOException("Couldn't access resultSet", npe)__		}_	};stores,the,next,result,set,row,in,a,tuple,param,row,row,to,be,reused,return,row,containing,next,link,row,throws,java,io,ioexception;override,public,row,next,record,row,row,throws,ioexception,try,if,has,next,return,null,for,int,pos,0,pos,row,get,arity,pos,row,set,field,pos,result,set,get,object,pos,1,has,next,result,set,next,return,row,catch,sqlexception,se,throw,new,ioexception,couldn,t,read,data,se,get,message,se,catch,null,pointer,exception,npe,throw,new,ioexception,couldn,t,access,result,set,npe
JDBCInputFormat -> @Override 	public Row nextRecord(Row row) throws IOException;1495923068;Stores the next resultSet row in a tuple.__@param row row to be reused._@return row containing next {@link Row}_@throws java.io.IOException;@Override_	public Row nextRecord(Row row) throws IOException {_		try {_			if (!hasNext) {_				return null__			}_			for (int pos = 0_ pos < row.getArity()_ pos++) {_				row.setField(pos, resultSet.getObject(pos + 1))__			}_			_			hasNext = resultSet.next()__			return row__		} catch (SQLException se) {_			throw new IOException("Couldn't read data - " + se.getMessage(), se)__		} catch (NullPointerException npe) {_			throw new IOException("Couldn't access resultSet", npe)__		}_	};stores,the,next,result,set,row,in,a,tuple,param,row,row,to,be,reused,return,row,containing,next,link,row,throws,java,io,ioexception;override,public,row,next,record,row,row,throws,ioexception,try,if,has,next,return,null,for,int,pos,0,pos,row,get,arity,pos,row,set,field,pos,result,set,get,object,pos,1,has,next,result,set,next,return,row,catch,sqlexception,se,throw,new,ioexception,couldn,t,read,data,se,get,message,se,catch,null,pointer,exception,npe,throw,new,ioexception,couldn,t,access,result,set,npe
JDBCInputFormat -> @Override 	public Row nextRecord(Row row) throws IOException;1496409235;Stores the next resultSet row in a tuple.__@param row row to be reused._@return row containing next {@link Row}_@throws java.io.IOException;@Override_	public Row nextRecord(Row row) throws IOException {_		try {_			if (!hasNext) {_				return null__			}_			for (int pos = 0_ pos < row.getArity()_ pos++) {_				row.setField(pos, resultSet.getObject(pos + 1))__			}_			_			hasNext = resultSet.next()__			return row__		} catch (SQLException se) {_			throw new IOException("Couldn't read data - " + se.getMessage(), se)__		} catch (NullPointerException npe) {_			throw new IOException("Couldn't access resultSet", npe)__		}_	};stores,the,next,result,set,row,in,a,tuple,param,row,row,to,be,reused,return,row,containing,next,link,row,throws,java,io,ioexception;override,public,row,next,record,row,row,throws,ioexception,try,if,has,next,return,null,for,int,pos,0,pos,row,get,arity,pos,row,set,field,pos,result,set,get,object,pos,1,has,next,result,set,next,return,row,catch,sqlexception,se,throw,new,ioexception,couldn,t,read,data,se,get,message,se,catch,null,pointer,exception,npe,throw,new,ioexception,couldn,t,access,result,set,npe
JDBCInputFormat -> @Override 	public Row nextRecord(Row row) throws IOException;1504104692;Stores the next resultSet row in a tuple.__@param row row to be reused._@return row containing next {@link Row}_@throws java.io.IOException;@Override_	public Row nextRecord(Row row) throws IOException {_		try {_			if (!hasNext) {_				return null__			}_			for (int pos = 0_ pos < row.getArity()_ pos++) {_				row.setField(pos, resultSet.getObject(pos + 1))__			}_			_			hasNext = resultSet.next()__			return row__		} catch (SQLException se) {_			throw new IOException("Couldn't read data - " + se.getMessage(), se)__		} catch (NullPointerException npe) {_			throw new IOException("Couldn't access resultSet", npe)__		}_	};stores,the,next,result,set,row,in,a,tuple,param,row,row,to,be,reused,return,row,containing,next,link,row,throws,java,io,ioexception;override,public,row,next,record,row,row,throws,ioexception,try,if,has,next,return,null,for,int,pos,0,pos,row,get,arity,pos,row,set,field,pos,result,set,get,object,pos,1,has,next,result,set,next,return,row,catch,sqlexception,se,throw,new,ioexception,couldn,t,read,data,se,get,message,se,catch,null,pointer,exception,npe,throw,new,ioexception,couldn,t,access,result,set,npe
JDBCInputFormat -> @Override 	public void open(InputSplit inputSplit) throws IOException;1480685315;Connects to the source database and executes the query in a <b>parallel_fashion</b> if_this {@link InputFormat} is built using a parameterized query (i.e. using_a {@link PreparedStatement})_and a proper {@link ParameterValuesProvider}, in a <b>non-parallel_fashion</b> otherwise.__@param inputSplit which is ignored if this InputFormat is executed as a_non-parallel source,_a "hook" to the query parameters otherwise (using its_<i>splitNumber</i>)_@throws IOException if there's an error during the execution of the query;@Override_	public void open(InputSplit inputSplit) throws IOException {_		try {_			if (inputSplit != null && parameterValues != null) {_				for (int i = 0_ i < parameterValues[inputSplit.getSplitNumber()].length_ i++) {_					Object param = parameterValues[inputSplit.getSplitNumber()][i]__					if (param instanceof String) {_						statement.setString(i + 1, (String) param)__					} else if (param instanceof Long) {_						statement.setLong(i + 1, (Long) param)__					} else if (param instanceof Integer) {_						statement.setInt(i + 1, (Integer) param)__					} else if (param instanceof Double) {_						statement.setDouble(i + 1, (Double) param)__					} else if (param instanceof Boolean) {_						statement.setBoolean(i + 1, (Boolean) param)__					} else if (param instanceof Float) {_						statement.setFloat(i + 1, (Float) param)__					} else if (param instanceof BigDecimal) {_						statement.setBigDecimal(i + 1, (BigDecimal) param)__					} else if (param instanceof Byte) {_						statement.setByte(i + 1, (Byte) param)__					} else if (param instanceof Short) {_						statement.setShort(i + 1, (Short) param)__					} else if (param instanceof Date) {_						statement.setDate(i + 1, (Date) param)__					} else if (param instanceof Time) {_						statement.setTime(i + 1, (Time) param)__					} else if (param instanceof Timestamp) {_						statement.setTimestamp(i + 1, (Timestamp) param)__					} else if (param instanceof Array) {_						statement.setArray(i + 1, (Array) param)__					} else {_						_						throw new IllegalArgumentException("open() failed. Parameter " + i + " of type " + param.getClass() + " is not handled (yet)." )__					}_				}_				if (LOG.isDebugEnabled()) {_					LOG.debug(String.format("Executing '%s' with parameters %s", queryTemplate, Arrays.deepToString(parameterValues[inputSplit.getSplitNumber()])))__				}_			}_			resultSet = statement.executeQuery()__			hasNext = resultSet.next()__		} catch (SQLException se) {_			throw new IllegalArgumentException("open() failed." + se.getMessage(), se)__		}_	};connects,to,the,source,database,and,executes,the,query,in,a,b,parallel,fashion,b,if,this,link,input,format,is,built,using,a,parameterized,query,i,e,using,a,link,prepared,statement,and,a,proper,link,parameter,values,provider,in,a,b,non,parallel,fashion,b,otherwise,param,input,split,which,is,ignored,if,this,input,format,is,executed,as,a,non,parallel,source,a,hook,to,the,query,parameters,otherwise,using,its,i,split,number,i,throws,ioexception,if,there,s,an,error,during,the,execution,of,the,query;override,public,void,open,input,split,input,split,throws,ioexception,try,if,input,split,null,parameter,values,null,for,int,i,0,i,parameter,values,input,split,get,split,number,length,i,object,param,parameter,values,input,split,get,split,number,i,if,param,instanceof,string,statement,set,string,i,1,string,param,else,if,param,instanceof,long,statement,set,long,i,1,long,param,else,if,param,instanceof,integer,statement,set,int,i,1,integer,param,else,if,param,instanceof,double,statement,set,double,i,1,double,param,else,if,param,instanceof,boolean,statement,set,boolean,i,1,boolean,param,else,if,param,instanceof,float,statement,set,float,i,1,float,param,else,if,param,instanceof,big,decimal,statement,set,big,decimal,i,1,big,decimal,param,else,if,param,instanceof,byte,statement,set,byte,i,1,byte,param,else,if,param,instanceof,short,statement,set,short,i,1,short,param,else,if,param,instanceof,date,statement,set,date,i,1,date,param,else,if,param,instanceof,time,statement,set,time,i,1,time,param,else,if,param,instanceof,timestamp,statement,set,timestamp,i,1,timestamp,param,else,if,param,instanceof,array,statement,set,array,i,1,array,param,else,throw,new,illegal,argument,exception,open,failed,parameter,i,of,type,param,get,class,is,not,handled,yet,if,log,is,debug,enabled,log,debug,string,format,executing,s,with,parameters,s,query,template,arrays,deep,to,string,parameter,values,input,split,get,split,number,result,set,statement,execute,query,has,next,result,set,next,catch,sqlexception,se,throw,new,illegal,argument,exception,open,failed,se,get,message,se
JDBCInputFormat -> @Override 	public void open(InputSplit inputSplit) throws IOException;1481798200;Connects to the source database and executes the query in a <b>parallel_fashion</b> if_this {@link InputFormat} is built using a parameterized query (i.e. using_a {@link PreparedStatement})_and a proper {@link ParameterValuesProvider}, in a <b>non-parallel_fashion</b> otherwise.__@param inputSplit which is ignored if this InputFormat is executed as a_non-parallel source,_a "hook" to the query parameters otherwise (using its_<i>splitNumber</i>)_@throws IOException if there's an error during the execution of the query;@Override_	public void open(InputSplit inputSplit) throws IOException {_		try {_			if (inputSplit != null && parameterValues != null) {_				for (int i = 0_ i < parameterValues[inputSplit.getSplitNumber()].length_ i++) {_					Object param = parameterValues[inputSplit.getSplitNumber()][i]__					if (param instanceof String) {_						statement.setString(i + 1, (String) param)__					} else if (param instanceof Long) {_						statement.setLong(i + 1, (Long) param)__					} else if (param instanceof Integer) {_						statement.setInt(i + 1, (Integer) param)__					} else if (param instanceof Double) {_						statement.setDouble(i + 1, (Double) param)__					} else if (param instanceof Boolean) {_						statement.setBoolean(i + 1, (Boolean) param)__					} else if (param instanceof Float) {_						statement.setFloat(i + 1, (Float) param)__					} else if (param instanceof BigDecimal) {_						statement.setBigDecimal(i + 1, (BigDecimal) param)__					} else if (param instanceof Byte) {_						statement.setByte(i + 1, (Byte) param)__					} else if (param instanceof Short) {_						statement.setShort(i + 1, (Short) param)__					} else if (param instanceof Date) {_						statement.setDate(i + 1, (Date) param)__					} else if (param instanceof Time) {_						statement.setTime(i + 1, (Time) param)__					} else if (param instanceof Timestamp) {_						statement.setTimestamp(i + 1, (Timestamp) param)__					} else if (param instanceof Array) {_						statement.setArray(i + 1, (Array) param)__					} else {_						_						throw new IllegalArgumentException("open() failed. Parameter " + i + " of type " + param.getClass() + " is not handled (yet)." )__					}_				}_				if (LOG.isDebugEnabled()) {_					LOG.debug(String.format("Executing '%s' with parameters %s", queryTemplate, Arrays.deepToString(parameterValues[inputSplit.getSplitNumber()])))__				}_			}_			resultSet = statement.executeQuery()__			hasNext = resultSet.next()__		} catch (SQLException se) {_			throw new IllegalArgumentException("open() failed." + se.getMessage(), se)__		}_	};connects,to,the,source,database,and,executes,the,query,in,a,b,parallel,fashion,b,if,this,link,input,format,is,built,using,a,parameterized,query,i,e,using,a,link,prepared,statement,and,a,proper,link,parameter,values,provider,in,a,b,non,parallel,fashion,b,otherwise,param,input,split,which,is,ignored,if,this,input,format,is,executed,as,a,non,parallel,source,a,hook,to,the,query,parameters,otherwise,using,its,i,split,number,i,throws,ioexception,if,there,s,an,error,during,the,execution,of,the,query;override,public,void,open,input,split,input,split,throws,ioexception,try,if,input,split,null,parameter,values,null,for,int,i,0,i,parameter,values,input,split,get,split,number,length,i,object,param,parameter,values,input,split,get,split,number,i,if,param,instanceof,string,statement,set,string,i,1,string,param,else,if,param,instanceof,long,statement,set,long,i,1,long,param,else,if,param,instanceof,integer,statement,set,int,i,1,integer,param,else,if,param,instanceof,double,statement,set,double,i,1,double,param,else,if,param,instanceof,boolean,statement,set,boolean,i,1,boolean,param,else,if,param,instanceof,float,statement,set,float,i,1,float,param,else,if,param,instanceof,big,decimal,statement,set,big,decimal,i,1,big,decimal,param,else,if,param,instanceof,byte,statement,set,byte,i,1,byte,param,else,if,param,instanceof,short,statement,set,short,i,1,short,param,else,if,param,instanceof,date,statement,set,date,i,1,date,param,else,if,param,instanceof,time,statement,set,time,i,1,time,param,else,if,param,instanceof,timestamp,statement,set,timestamp,i,1,timestamp,param,else,if,param,instanceof,array,statement,set,array,i,1,array,param,else,throw,new,illegal,argument,exception,open,failed,parameter,i,of,type,param,get,class,is,not,handled,yet,if,log,is,debug,enabled,log,debug,string,format,executing,s,with,parameters,s,query,template,arrays,deep,to,string,parameter,values,input,split,get,split,number,result,set,statement,execute,query,has,next,result,set,next,catch,sqlexception,se,throw,new,illegal,argument,exception,open,failed,se,get,message,se
JDBCInputFormat -> @Override 	public void open(InputSplit inputSplit) throws IOException;1491500150;Connects to the source database and executes the query in a <b>parallel_fashion</b> if_this {@link InputFormat} is built using a parameterized query (i.e. using_a {@link PreparedStatement})_and a proper {@link ParameterValuesProvider}, in a <b>non-parallel_fashion</b> otherwise.__@param inputSplit which is ignored if this InputFormat is executed as a_non-parallel source,_a "hook" to the query parameters otherwise (using its_<i>splitNumber</i>)_@throws IOException if there's an error during the execution of the query;@Override_	public void open(InputSplit inputSplit) throws IOException {_		try {_			if (inputSplit != null && parameterValues != null) {_				for (int i = 0_ i < parameterValues[inputSplit.getSplitNumber()].length_ i++) {_					Object param = parameterValues[inputSplit.getSplitNumber()][i]__					if (param instanceof String) {_						statement.setString(i + 1, (String) param)__					} else if (param instanceof Long) {_						statement.setLong(i + 1, (Long) param)__					} else if (param instanceof Integer) {_						statement.setInt(i + 1, (Integer) param)__					} else if (param instanceof Double) {_						statement.setDouble(i + 1, (Double) param)__					} else if (param instanceof Boolean) {_						statement.setBoolean(i + 1, (Boolean) param)__					} else if (param instanceof Float) {_						statement.setFloat(i + 1, (Float) param)__					} else if (param instanceof BigDecimal) {_						statement.setBigDecimal(i + 1, (BigDecimal) param)__					} else if (param instanceof Byte) {_						statement.setByte(i + 1, (Byte) param)__					} else if (param instanceof Short) {_						statement.setShort(i + 1, (Short) param)__					} else if (param instanceof Date) {_						statement.setDate(i + 1, (Date) param)__					} else if (param instanceof Time) {_						statement.setTime(i + 1, (Time) param)__					} else if (param instanceof Timestamp) {_						statement.setTimestamp(i + 1, (Timestamp) param)__					} else if (param instanceof Array) {_						statement.setArray(i + 1, (Array) param)__					} else {_						_						throw new IllegalArgumentException("open() failed. Parameter " + i + " of type " + param.getClass() + " is not handled (yet)." )__					}_				}_				if (LOG.isDebugEnabled()) {_					LOG.debug(String.format("Executing '%s' with parameters %s", queryTemplate, Arrays.deepToString(parameterValues[inputSplit.getSplitNumber()])))__				}_			}_			resultSet = statement.executeQuery()__			hasNext = resultSet.next()__		} catch (SQLException se) {_			throw new IllegalArgumentException("open() failed." + se.getMessage(), se)__		}_	};connects,to,the,source,database,and,executes,the,query,in,a,b,parallel,fashion,b,if,this,link,input,format,is,built,using,a,parameterized,query,i,e,using,a,link,prepared,statement,and,a,proper,link,parameter,values,provider,in,a,b,non,parallel,fashion,b,otherwise,param,input,split,which,is,ignored,if,this,input,format,is,executed,as,a,non,parallel,source,a,hook,to,the,query,parameters,otherwise,using,its,i,split,number,i,throws,ioexception,if,there,s,an,error,during,the,execution,of,the,query;override,public,void,open,input,split,input,split,throws,ioexception,try,if,input,split,null,parameter,values,null,for,int,i,0,i,parameter,values,input,split,get,split,number,length,i,object,param,parameter,values,input,split,get,split,number,i,if,param,instanceof,string,statement,set,string,i,1,string,param,else,if,param,instanceof,long,statement,set,long,i,1,long,param,else,if,param,instanceof,integer,statement,set,int,i,1,integer,param,else,if,param,instanceof,double,statement,set,double,i,1,double,param,else,if,param,instanceof,boolean,statement,set,boolean,i,1,boolean,param,else,if,param,instanceof,float,statement,set,float,i,1,float,param,else,if,param,instanceof,big,decimal,statement,set,big,decimal,i,1,big,decimal,param,else,if,param,instanceof,byte,statement,set,byte,i,1,byte,param,else,if,param,instanceof,short,statement,set,short,i,1,short,param,else,if,param,instanceof,date,statement,set,date,i,1,date,param,else,if,param,instanceof,time,statement,set,time,i,1,time,param,else,if,param,instanceof,timestamp,statement,set,timestamp,i,1,timestamp,param,else,if,param,instanceof,array,statement,set,array,i,1,array,param,else,throw,new,illegal,argument,exception,open,failed,parameter,i,of,type,param,get,class,is,not,handled,yet,if,log,is,debug,enabled,log,debug,string,format,executing,s,with,parameters,s,query,template,arrays,deep,to,string,parameter,values,input,split,get,split,number,result,set,statement,execute,query,has,next,result,set,next,catch,sqlexception,se,throw,new,illegal,argument,exception,open,failed,se,get,message,se
JDBCInputFormat -> @Override 	public void open(InputSplit inputSplit) throws IOException;1495923068;Connects to the source database and executes the query in a <b>parallel_fashion</b> if_this {@link InputFormat} is built using a parameterized query (i.e. using_a {@link PreparedStatement})_and a proper {@link ParameterValuesProvider}, in a <b>non-parallel_fashion</b> otherwise.__@param inputSplit which is ignored if this InputFormat is executed as a_non-parallel source,_a "hook" to the query parameters otherwise (using its_<i>splitNumber</i>)_@throws IOException if there's an error during the execution of the query;@Override_	public void open(InputSplit inputSplit) throws IOException {_		try {_			if (inputSplit != null && parameterValues != null) {_				for (int i = 0_ i < parameterValues[inputSplit.getSplitNumber()].length_ i++) {_					Object param = parameterValues[inputSplit.getSplitNumber()][i]__					if (param instanceof String) {_						statement.setString(i + 1, (String) param)__					} else if (param instanceof Long) {_						statement.setLong(i + 1, (Long) param)__					} else if (param instanceof Integer) {_						statement.setInt(i + 1, (Integer) param)__					} else if (param instanceof Double) {_						statement.setDouble(i + 1, (Double) param)__					} else if (param instanceof Boolean) {_						statement.setBoolean(i + 1, (Boolean) param)__					} else if (param instanceof Float) {_						statement.setFloat(i + 1, (Float) param)__					} else if (param instanceof BigDecimal) {_						statement.setBigDecimal(i + 1, (BigDecimal) param)__					} else if (param instanceof Byte) {_						statement.setByte(i + 1, (Byte) param)__					} else if (param instanceof Short) {_						statement.setShort(i + 1, (Short) param)__					} else if (param instanceof Date) {_						statement.setDate(i + 1, (Date) param)__					} else if (param instanceof Time) {_						statement.setTime(i + 1, (Time) param)__					} else if (param instanceof Timestamp) {_						statement.setTimestamp(i + 1, (Timestamp) param)__					} else if (param instanceof Array) {_						statement.setArray(i + 1, (Array) param)__					} else {_						_						throw new IllegalArgumentException("open() failed. Parameter " + i + " of type " + param.getClass() + " is not handled (yet).")__					}_				}_				if (LOG.isDebugEnabled()) {_					LOG.debug(String.format("Executing '%s' with parameters %s", queryTemplate, Arrays.deepToString(parameterValues[inputSplit.getSplitNumber()])))__				}_			}_			resultSet = statement.executeQuery()__			hasNext = resultSet.next()__		} catch (SQLException se) {_			throw new IllegalArgumentException("open() failed." + se.getMessage(), se)__		}_	};connects,to,the,source,database,and,executes,the,query,in,a,b,parallel,fashion,b,if,this,link,input,format,is,built,using,a,parameterized,query,i,e,using,a,link,prepared,statement,and,a,proper,link,parameter,values,provider,in,a,b,non,parallel,fashion,b,otherwise,param,input,split,which,is,ignored,if,this,input,format,is,executed,as,a,non,parallel,source,a,hook,to,the,query,parameters,otherwise,using,its,i,split,number,i,throws,ioexception,if,there,s,an,error,during,the,execution,of,the,query;override,public,void,open,input,split,input,split,throws,ioexception,try,if,input,split,null,parameter,values,null,for,int,i,0,i,parameter,values,input,split,get,split,number,length,i,object,param,parameter,values,input,split,get,split,number,i,if,param,instanceof,string,statement,set,string,i,1,string,param,else,if,param,instanceof,long,statement,set,long,i,1,long,param,else,if,param,instanceof,integer,statement,set,int,i,1,integer,param,else,if,param,instanceof,double,statement,set,double,i,1,double,param,else,if,param,instanceof,boolean,statement,set,boolean,i,1,boolean,param,else,if,param,instanceof,float,statement,set,float,i,1,float,param,else,if,param,instanceof,big,decimal,statement,set,big,decimal,i,1,big,decimal,param,else,if,param,instanceof,byte,statement,set,byte,i,1,byte,param,else,if,param,instanceof,short,statement,set,short,i,1,short,param,else,if,param,instanceof,date,statement,set,date,i,1,date,param,else,if,param,instanceof,time,statement,set,time,i,1,time,param,else,if,param,instanceof,timestamp,statement,set,timestamp,i,1,timestamp,param,else,if,param,instanceof,array,statement,set,array,i,1,array,param,else,throw,new,illegal,argument,exception,open,failed,parameter,i,of,type,param,get,class,is,not,handled,yet,if,log,is,debug,enabled,log,debug,string,format,executing,s,with,parameters,s,query,template,arrays,deep,to,string,parameter,values,input,split,get,split,number,result,set,statement,execute,query,has,next,result,set,next,catch,sqlexception,se,throw,new,illegal,argument,exception,open,failed,se,get,message,se
JDBCInputFormat -> @Override 	public void open(InputSplit inputSplit) throws IOException;1496409235;Connects to the source database and executes the query in a <b>parallel_fashion</b> if_this {@link InputFormat} is built using a parameterized query (i.e. using_a {@link PreparedStatement})_and a proper {@link ParameterValuesProvider}, in a <b>non-parallel_fashion</b> otherwise.__@param inputSplit which is ignored if this InputFormat is executed as a_non-parallel source,_a "hook" to the query parameters otherwise (using its_<i>splitNumber</i>)_@throws IOException if there's an error during the execution of the query;@Override_	public void open(InputSplit inputSplit) throws IOException {_		try {_			if (inputSplit != null && parameterValues != null) {_				for (int i = 0_ i < parameterValues[inputSplit.getSplitNumber()].length_ i++) {_					Object param = parameterValues[inputSplit.getSplitNumber()][i]__					if (param instanceof String) {_						statement.setString(i + 1, (String) param)__					} else if (param instanceof Long) {_						statement.setLong(i + 1, (Long) param)__					} else if (param instanceof Integer) {_						statement.setInt(i + 1, (Integer) param)__					} else if (param instanceof Double) {_						statement.setDouble(i + 1, (Double) param)__					} else if (param instanceof Boolean) {_						statement.setBoolean(i + 1, (Boolean) param)__					} else if (param instanceof Float) {_						statement.setFloat(i + 1, (Float) param)__					} else if (param instanceof BigDecimal) {_						statement.setBigDecimal(i + 1, (BigDecimal) param)__					} else if (param instanceof Byte) {_						statement.setByte(i + 1, (Byte) param)__					} else if (param instanceof Short) {_						statement.setShort(i + 1, (Short) param)__					} else if (param instanceof Date) {_						statement.setDate(i + 1, (Date) param)__					} else if (param instanceof Time) {_						statement.setTime(i + 1, (Time) param)__					} else if (param instanceof Timestamp) {_						statement.setTimestamp(i + 1, (Timestamp) param)__					} else if (param instanceof Array) {_						statement.setArray(i + 1, (Array) param)__					} else {_						_						throw new IllegalArgumentException("open() failed. Parameter " + i + " of type " + param.getClass() + " is not handled (yet).")__					}_				}_				if (LOG.isDebugEnabled()) {_					LOG.debug(String.format("Executing '%s' with parameters %s", queryTemplate, Arrays.deepToString(parameterValues[inputSplit.getSplitNumber()])))__				}_			}_			resultSet = statement.executeQuery()__			hasNext = resultSet.next()__		} catch (SQLException se) {_			throw new IllegalArgumentException("open() failed." + se.getMessage(), se)__		}_	};connects,to,the,source,database,and,executes,the,query,in,a,b,parallel,fashion,b,if,this,link,input,format,is,built,using,a,parameterized,query,i,e,using,a,link,prepared,statement,and,a,proper,link,parameter,values,provider,in,a,b,non,parallel,fashion,b,otherwise,param,input,split,which,is,ignored,if,this,input,format,is,executed,as,a,non,parallel,source,a,hook,to,the,query,parameters,otherwise,using,its,i,split,number,i,throws,ioexception,if,there,s,an,error,during,the,execution,of,the,query;override,public,void,open,input,split,input,split,throws,ioexception,try,if,input,split,null,parameter,values,null,for,int,i,0,i,parameter,values,input,split,get,split,number,length,i,object,param,parameter,values,input,split,get,split,number,i,if,param,instanceof,string,statement,set,string,i,1,string,param,else,if,param,instanceof,long,statement,set,long,i,1,long,param,else,if,param,instanceof,integer,statement,set,int,i,1,integer,param,else,if,param,instanceof,double,statement,set,double,i,1,double,param,else,if,param,instanceof,boolean,statement,set,boolean,i,1,boolean,param,else,if,param,instanceof,float,statement,set,float,i,1,float,param,else,if,param,instanceof,big,decimal,statement,set,big,decimal,i,1,big,decimal,param,else,if,param,instanceof,byte,statement,set,byte,i,1,byte,param,else,if,param,instanceof,short,statement,set,short,i,1,short,param,else,if,param,instanceof,date,statement,set,date,i,1,date,param,else,if,param,instanceof,time,statement,set,time,i,1,time,param,else,if,param,instanceof,timestamp,statement,set,timestamp,i,1,timestamp,param,else,if,param,instanceof,array,statement,set,array,i,1,array,param,else,throw,new,illegal,argument,exception,open,failed,parameter,i,of,type,param,get,class,is,not,handled,yet,if,log,is,debug,enabled,log,debug,string,format,executing,s,with,parameters,s,query,template,arrays,deep,to,string,parameter,values,input,split,get,split,number,result,set,statement,execute,query,has,next,result,set,next,catch,sqlexception,se,throw,new,illegal,argument,exception,open,failed,se,get,message,se
JDBCInputFormat -> @Override 	public void open(InputSplit inputSplit) throws IOException;1504104692;Connects to the source database and executes the query in a <b>parallel_fashion</b> if_this {@link InputFormat} is built using a parameterized query (i.e. using_a {@link PreparedStatement})_and a proper {@link ParameterValuesProvider}, in a <b>non-parallel_fashion</b> otherwise.__@param inputSplit which is ignored if this InputFormat is executed as a_non-parallel source,_a "hook" to the query parameters otherwise (using its_<i>splitNumber</i>)_@throws IOException if there's an error during the execution of the query;@Override_	public void open(InputSplit inputSplit) throws IOException {_		try {_			if (inputSplit != null && parameterValues != null) {_				for (int i = 0_ i < parameterValues[inputSplit.getSplitNumber()].length_ i++) {_					Object param = parameterValues[inputSplit.getSplitNumber()][i]__					if (param instanceof String) {_						statement.setString(i + 1, (String) param)__					} else if (param instanceof Long) {_						statement.setLong(i + 1, (Long) param)__					} else if (param instanceof Integer) {_						statement.setInt(i + 1, (Integer) param)__					} else if (param instanceof Double) {_						statement.setDouble(i + 1, (Double) param)__					} else if (param instanceof Boolean) {_						statement.setBoolean(i + 1, (Boolean) param)__					} else if (param instanceof Float) {_						statement.setFloat(i + 1, (Float) param)__					} else if (param instanceof BigDecimal) {_						statement.setBigDecimal(i + 1, (BigDecimal) param)__					} else if (param instanceof Byte) {_						statement.setByte(i + 1, (Byte) param)__					} else if (param instanceof Short) {_						statement.setShort(i + 1, (Short) param)__					} else if (param instanceof Date) {_						statement.setDate(i + 1, (Date) param)__					} else if (param instanceof Time) {_						statement.setTime(i + 1, (Time) param)__					} else if (param instanceof Timestamp) {_						statement.setTimestamp(i + 1, (Timestamp) param)__					} else if (param instanceof Array) {_						statement.setArray(i + 1, (Array) param)__					} else {_						_						throw new IllegalArgumentException("open() failed. Parameter " + i + " of type " + param.getClass() + " is not handled (yet).")__					}_				}_				if (LOG.isDebugEnabled()) {_					LOG.debug(String.format("Executing '%s' with parameters %s", queryTemplate, Arrays.deepToString(parameterValues[inputSplit.getSplitNumber()])))__				}_			}_			resultSet = statement.executeQuery()__			hasNext = resultSet.next()__		} catch (SQLException se) {_			throw new IllegalArgumentException("open() failed." + se.getMessage(), se)__		}_	};connects,to,the,source,database,and,executes,the,query,in,a,b,parallel,fashion,b,if,this,link,input,format,is,built,using,a,parameterized,query,i,e,using,a,link,prepared,statement,and,a,proper,link,parameter,values,provider,in,a,b,non,parallel,fashion,b,otherwise,param,input,split,which,is,ignored,if,this,input,format,is,executed,as,a,non,parallel,source,a,hook,to,the,query,parameters,otherwise,using,its,i,split,number,i,throws,ioexception,if,there,s,an,error,during,the,execution,of,the,query;override,public,void,open,input,split,input,split,throws,ioexception,try,if,input,split,null,parameter,values,null,for,int,i,0,i,parameter,values,input,split,get,split,number,length,i,object,param,parameter,values,input,split,get,split,number,i,if,param,instanceof,string,statement,set,string,i,1,string,param,else,if,param,instanceof,long,statement,set,long,i,1,long,param,else,if,param,instanceof,integer,statement,set,int,i,1,integer,param,else,if,param,instanceof,double,statement,set,double,i,1,double,param,else,if,param,instanceof,boolean,statement,set,boolean,i,1,boolean,param,else,if,param,instanceof,float,statement,set,float,i,1,float,param,else,if,param,instanceof,big,decimal,statement,set,big,decimal,i,1,big,decimal,param,else,if,param,instanceof,byte,statement,set,byte,i,1,byte,param,else,if,param,instanceof,short,statement,set,short,i,1,short,param,else,if,param,instanceof,date,statement,set,date,i,1,date,param,else,if,param,instanceof,time,statement,set,time,i,1,time,param,else,if,param,instanceof,timestamp,statement,set,timestamp,i,1,timestamp,param,else,if,param,instanceof,array,statement,set,array,i,1,array,param,else,throw,new,illegal,argument,exception,open,failed,parameter,i,of,type,param,get,class,is,not,handled,yet,if,log,is,debug,enabled,log,debug,string,format,executing,s,with,parameters,s,query,template,arrays,deep,to,string,parameter,values,input,split,get,split,number,result,set,statement,execute,query,has,next,result,set,next,catch,sqlexception,se,throw,new,illegal,argument,exception,open,failed,se,get,message,se
JDBCInputFormat -> public static JDBCInputFormatBuilder buildJDBCInputFormat();1480685315;A builder used to set parameters to the output format's configuration in a fluent way._@return builder;public static JDBCInputFormatBuilder buildJDBCInputFormat() {_		return new JDBCInputFormatBuilder()__	};a,builder,used,to,set,parameters,to,the,output,format,s,configuration,in,a,fluent,way,return,builder;public,static,jdbcinput,format,builder,build,jdbcinput,format,return,new,jdbcinput,format,builder
JDBCInputFormat -> public static JDBCInputFormatBuilder buildJDBCInputFormat();1481798200;A builder used to set parameters to the output format's configuration in a fluent way._@return builder;public static JDBCInputFormatBuilder buildJDBCInputFormat() {_		return new JDBCInputFormatBuilder()__	};a,builder,used,to,set,parameters,to,the,output,format,s,configuration,in,a,fluent,way,return,builder;public,static,jdbcinput,format,builder,build,jdbcinput,format,return,new,jdbcinput,format,builder
JDBCInputFormat -> public static JDBCInputFormatBuilder buildJDBCInputFormat();1491500150;A builder used to set parameters to the output format's configuration in a fluent way._@return builder;public static JDBCInputFormatBuilder buildJDBCInputFormat() {_		return new JDBCInputFormatBuilder()__	};a,builder,used,to,set,parameters,to,the,output,format,s,configuration,in,a,fluent,way,return,builder;public,static,jdbcinput,format,builder,build,jdbcinput,format,return,new,jdbcinput,format,builder
JDBCInputFormat -> public static JDBCInputFormatBuilder buildJDBCInputFormat();1495923068;A builder used to set parameters to the output format's configuration in a fluent way._@return builder;public static JDBCInputFormatBuilder buildJDBCInputFormat() {_		return new JDBCInputFormatBuilder()__	};a,builder,used,to,set,parameters,to,the,output,format,s,configuration,in,a,fluent,way,return,builder;public,static,jdbcinput,format,builder,build,jdbcinput,format,return,new,jdbcinput,format,builder
JDBCInputFormat -> public static JDBCInputFormatBuilder buildJDBCInputFormat();1496409235;A builder used to set parameters to the output format's configuration in a fluent way._@return builder;public static JDBCInputFormatBuilder buildJDBCInputFormat() {_		return new JDBCInputFormatBuilder()__	};a,builder,used,to,set,parameters,to,the,output,format,s,configuration,in,a,fluent,way,return,builder;public,static,jdbcinput,format,builder,build,jdbcinput,format,return,new,jdbcinput,format,builder
JDBCInputFormat -> public static JDBCInputFormatBuilder buildJDBCInputFormat();1504104692;A builder used to set parameters to the output format's configuration in a fluent way._@return builder;public static JDBCInputFormatBuilder buildJDBCInputFormat() {_		return new JDBCInputFormatBuilder()__	};a,builder,used,to,set,parameters,to,the,output,format,s,configuration,in,a,fluent,way,return,builder;public,static,jdbcinput,format,builder,build,jdbcinput,format,return,new,jdbcinput,format,builder
JDBCInputFormat -> @Override 	public boolean reachedEnd() throws IOException;1480685315;Checks whether all data has been read.__@return boolean value indication whether all data has been read._@throws IOException;@Override_	public boolean reachedEnd() throws IOException {_		return !hasNext__	};checks,whether,all,data,has,been,read,return,boolean,value,indication,whether,all,data,has,been,read,throws,ioexception;override,public,boolean,reached,end,throws,ioexception,return,has,next
JDBCInputFormat -> @Override 	public boolean reachedEnd() throws IOException;1481798200;Checks whether all data has been read.__@return boolean value indication whether all data has been read._@throws IOException;@Override_	public boolean reachedEnd() throws IOException {_		return !hasNext__	};checks,whether,all,data,has,been,read,return,boolean,value,indication,whether,all,data,has,been,read,throws,ioexception;override,public,boolean,reached,end,throws,ioexception,return,has,next
JDBCInputFormat -> @Override 	public boolean reachedEnd() throws IOException;1491500150;Checks whether all data has been read.__@return boolean value indication whether all data has been read._@throws IOException;@Override_	public boolean reachedEnd() throws IOException {_		return !hasNext__	};checks,whether,all,data,has,been,read,return,boolean,value,indication,whether,all,data,has,been,read,throws,ioexception;override,public,boolean,reached,end,throws,ioexception,return,has,next
JDBCInputFormat -> @Override 	public boolean reachedEnd() throws IOException;1495923068;Checks whether all data has been read.__@return boolean value indication whether all data has been read._@throws IOException;@Override_	public boolean reachedEnd() throws IOException {_		return !hasNext__	};checks,whether,all,data,has,been,read,return,boolean,value,indication,whether,all,data,has,been,read,throws,ioexception;override,public,boolean,reached,end,throws,ioexception,return,has,next
JDBCInputFormat -> @Override 	public boolean reachedEnd() throws IOException;1496409235;Checks whether all data has been read.__@return boolean value indication whether all data has been read._@throws IOException;@Override_	public boolean reachedEnd() throws IOException {_		return !hasNext__	};checks,whether,all,data,has,been,read,return,boolean,value,indication,whether,all,data,has,been,read,throws,ioexception;override,public,boolean,reached,end,throws,ioexception,return,has,next
JDBCInputFormat -> @Override 	public boolean reachedEnd() throws IOException;1504104692;Checks whether all data has been read.__@return boolean value indication whether all data has been read._@throws IOException;@Override_	public boolean reachedEnd() throws IOException {_		return !hasNext__	};checks,whether,all,data,has,been,read,return,boolean,value,indication,whether,all,data,has,been,read,throws,ioexception;override,public,boolean,reached,end,throws,ioexception,return,has,next
