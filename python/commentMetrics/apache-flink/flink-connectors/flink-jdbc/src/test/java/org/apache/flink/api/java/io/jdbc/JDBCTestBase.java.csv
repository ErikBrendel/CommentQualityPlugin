commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;11;;public static String getCreateQuery(String tableName) {     StringBuilder sqlQueryBuilder = new StringBuilder("CREATE TABLE ").     sqlQueryBuilder.append(tableName).append(" (").     sqlQueryBuilder.append("id INT NOT NULL DEFAULT 0,").     sqlQueryBuilder.append("title VARCHAR(50) DEFAULT NULL,").     sqlQueryBuilder.append("author VARCHAR(50) DEFAULT NULL,").     sqlQueryBuilder.append("price FLOAT DEFAULT NULL,").     sqlQueryBuilder.append("qty INT DEFAULT NULL,").     sqlQueryBuilder.append("PRIMARY KEY (id))").     return sqlQueryBuilder.toString(). }
false;public,static;0;16;;public static String getInsertQuery() {     StringBuilder sqlQueryBuilder = new StringBuilder("INSERT INTO books (id, title, author, price, qty) VALUES ").     for (int i = 0. i < TEST_DATA.length. i++) {         sqlQueryBuilder.append("(").append(TEST_DATA[i].id).append(",'").append(TEST_DATA[i].title).append("','").append(TEST_DATA[i].author).append("',").append(TEST_DATA[i].price).append(",").append(TEST_DATA[i].qty).append(")").         if (i < TEST_DATA.length - 1) {             sqlQueryBuilder.append(",").         }     }     String insertQuery = sqlQueryBuilder.toString().     return insertQuery. }
false;public;1;3;;@Override public void write(int b) { }
false;public,static;0;12;;@BeforeClass public static void prepareDerbyDatabase() throws Exception {     System.setProperty("derby.stream.error.field", JDBCTestBase.class.getCanonicalName() + ".DEV_NULL").     Class.forName(DRIVER_CLASS).     try (Connection conn = DriverManager.getConnection(DB_URL + ".create=true")) {         createTable(conn, JDBCTestBase.INPUT_TABLE).         createTable(conn, OUTPUT_TABLE).         createTable(conn, OUTPUT_TABLE_2).         insertDataIntoInputTable(conn).     } }
false;private,static;2;5;;private static void createTable(Connection conn, String tableName) throws SQLException {     Statement stat = conn.createStatement().     stat.executeUpdate(getCreateQuery(tableName)).     stat.close(). }
false;private,static;1;5;;private static void insertDataIntoInputTable(Connection conn) throws SQLException {     Statement stat = conn.createStatement().     stat.execute(getInsertQuery()).     stat.close(). }
false;public,static;0;12;;@AfterClass public static void cleanUpDerbyDatabases() throws Exception {     Class.forName(DRIVER_CLASS).     try (Connection conn = DriverManager.getConnection(DB_URL + ".create=true").         Statement stat = conn.createStatement()) {         stat.executeUpdate("DROP TABLE " + INPUT_TABLE).         stat.executeUpdate("DROP TABLE " + OUTPUT_TABLE).         stat.executeUpdate("DROP TABLE " + OUTPUT_TABLE_2).     } }
