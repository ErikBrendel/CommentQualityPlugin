commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testWithoutParallelism() throws Exception {     runTest(false). }
false;public;0;4;;@Test public void testWithParallelism() throws Exception {     runTest(true). }
false;private;1;43;;private void runTest(boolean exploitParallelism) throws Exception {     ExecutionEnvironment environment = ExecutionEnvironment.getExecutionEnvironment().     JDBCInputFormatBuilder inputBuilder = JDBCInputFormat.buildJDBCInputFormat().setDrivername(JDBCTestBase.DRIVER_CLASS).setDBUrl(JDBCTestBase.DB_URL).setQuery(JDBCTestBase.SELECT_ALL_BOOKS).setRowTypeInfo(ROW_TYPE_INFO).     if (exploitParallelism) {         final int fetchSize = 1.         final long min = JDBCTestBase.TEST_DATA[0].id.         final long max = JDBCTestBase.TEST_DATA[JDBCTestBase.TEST_DATA.length - fetchSize].id.         // use a "splittable" query to exploit parallelism         inputBuilder = inputBuilder.setQuery(JDBCTestBase.SELECT_ALL_BOOKS_SPLIT_BY_ID).setParametersProvider(new NumericBetweenParametersProvider(fetchSize, min, max)).     }     DataSet<Row> source = environment.createInput(inputBuilder.finish()).     // NOTE: in this case (with Derby driver) setSqlTypes could be skipped, but     // some databases don't null values correctly when no column type was specified     // in PreparedStatement.setObject (see its javadoc for more details)     source.output(JDBCOutputFormat.buildJDBCOutputFormat().setDrivername(JDBCTestBase.DRIVER_CLASS).setDBUrl(JDBCTestBase.DB_URL).setQuery("insert into newbooks (id, title, author, price, qty) values (?,?,?,?,?)").setSqlTypes(new int[] { Types.INTEGER, Types.VARCHAR, Types.VARCHAR, Types.DOUBLE, Types.INTEGER }).finish()).     environment.execute().     try (Connection dbConn = DriverManager.getConnection(JDBCTestBase.DB_URL).         PreparedStatement statement = dbConn.prepareStatement(JDBCTestBase.SELECT_ALL_NEWBOOKS).         ResultSet resultSet = statement.executeQuery()) {         int count = 0.         while (resultSet.next()) {             count++.         }         Assert.assertEquals(JDBCTestBase.TEST_DATA.length, count).     } }
false;public;0;12;;@After public void clearOutputTable() throws Exception {     Class.forName(DRIVER_CLASS).     try (Connection conn = DriverManager.getConnection(DB_URL).         Statement stat = conn.createStatement()) {         stat.execute("DELETE FROM " + OUTPUT_TABLE).         stat.close().         conn.close().     } }
