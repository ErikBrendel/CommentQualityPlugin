commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;13;;// ------------------------------------------------------------------------ // Test setup and shutdown // ------------------------------------------------------------------------ @BeforeClass public static void createHDFS() throws Exception {     Assume.assumeTrue(!OperatingSystem.isWindows()).     final File tempDir = TEMP_DIR.newFolder().     org.apache.hadoop.conf.Configuration hdConf = new org.apache.hadoop.conf.Configuration().     hdConf.set(MiniDFSCluster.HDFS_MINIDFS_BASEDIR, tempDir.getAbsolutePath()).     MiniDFSCluster.Builder builder = new MiniDFSCluster.Builder(hdConf).     hdfsCluster = builder.build().     hdfsRootPath = new Path(hdfsCluster.getURI()). }
false;public,static;0;8;;@AfterClass public static void destroyHDFS() {     if (hdfsCluster != null) {         hdfsCluster.shutdown().     }     hdfsCluster = null.     hdfsRootPath = null. }
false;public;0;5;;@Before public void initConfig() {     hadoopConfig = new org.apache.hadoop.conf.Configuration().     hadoopConfig.set(org.apache.hadoop.fs.FileSystem.FS_DEFAULT_NAME_KEY, hdfsRootPath.toString()). }
false;public;0;36;;// ------------------------------------------------------------------------ // Tests // ------------------------------------------------------------------------ @Test public void testMissingRmConfiguration() throws Exception {     final Configuration flinkConfig = new Configuration().     // missing resource manager address     try {         new YarnPreConfiguredMasterNonHaServices(flinkConfig, hadoopConfig, HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION).         fail().     } catch (IllegalConfigurationException e) {     // expected     }     flinkConfig.setString(YarnConfigOptions.APP_MASTER_RPC_ADDRESS, "localhost").     // missing resource manager port     try {         new YarnPreConfiguredMasterNonHaServices(flinkConfig, hadoopConfig, HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION).         fail().     } catch (IllegalConfigurationException e) {     // expected     }     flinkConfig.setInteger(YarnConfigOptions.APP_MASTER_RPC_PORT, 1427).     // now everything is good .-)     new YarnPreConfiguredMasterNonHaServices(flinkConfig, hadoopConfig, HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION).closeAndCleanupAllData(). }
false;public;0;34;;@Test public void testCloseAndCleanup() throws Exception {     final Configuration flinkConfig = new Configuration().     flinkConfig.setString(YarnConfigOptions.APP_MASTER_RPC_ADDRESS, "localhost").     flinkConfig.setInteger(YarnConfigOptions.APP_MASTER_RPC_PORT, 1427).     // create the services     YarnHighAvailabilityServices services = new YarnPreConfiguredMasterNonHaServices(flinkConfig, hadoopConfig, HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION).     services.closeAndCleanupAllData().     final FileSystem fileSystem = hdfsRootPath.getFileSystem().     final Path workDir = new Path(hdfsCluster.getFileSystem().getWorkingDirectory().toString()).     try {         fileSystem.getFileStatus(new Path(workDir, YarnHighAvailabilityServices.FLINK_RECOVERY_DATA_DIR)).         fail("Flink recovery data directory still exists").     } catch (FileNotFoundException e) {     // expected, because the directory should have been cleaned up     }     assertTrue(services.isClosed()).     // doing another cleanup when the services are closed should fail     try {         services.closeAndCleanupAllData().         fail("should fail with an IllegalStateException").     } catch (IllegalStateException e) {     // expected     } }
false;public;0;56;;@Test public void testCallsOnClosedServices() throws Exception {     final Configuration flinkConfig = new Configuration().     flinkConfig.setString(YarnConfigOptions.APP_MASTER_RPC_ADDRESS, "localhost").     flinkConfig.setInteger(YarnConfigOptions.APP_MASTER_RPC_PORT, 1427).     YarnHighAvailabilityServices services = new YarnPreConfiguredMasterNonHaServices(flinkConfig, hadoopConfig, HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION).     // this method is not supported     try {         services.getSubmittedJobGraphStore().         fail().     } catch (UnsupportedOperationException ignored) {     }     services.close().     try {         services.createBlobStore().         fail().     } catch (IllegalStateException ignored) {     }     try {         services.getCheckpointRecoveryFactory().         fail().     } catch (IllegalStateException ignored) {     }     try {         services.getJobManagerLeaderElectionService(new JobID()).         fail().     } catch (IllegalStateException ignored) {     }     try {         services.getJobManagerLeaderRetriever(new JobID()).         fail().     } catch (IllegalStateException ignored) {     }     try {         services.getRunningJobsRegistry().         fail().     } catch (IllegalStateException ignored) {     }     try {         services.getResourceManagerLeaderElectionService().         fail().     } catch (IllegalStateException ignored) {     }     try {         services.getResourceManagerLeaderRetriever().         fail().     } catch (IllegalStateException ignored) {     } }
