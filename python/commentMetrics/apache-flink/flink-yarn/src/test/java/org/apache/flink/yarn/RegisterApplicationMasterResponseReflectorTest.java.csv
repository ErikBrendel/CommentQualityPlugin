commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() {     MockitoAnnotations.initMocks(this). }
false;public;0;11;;@Test public void testCallsMethodIfPresent() {     final RegisterApplicationMasterResponseReflector registerApplicationMasterResponseReflector = new RegisterApplicationMasterResponseReflector(LOG, HasMethod.class).     final List<Container> containersFromPreviousAttemptsUnsafe = registerApplicationMasterResponseReflector.getContainersFromPreviousAttemptsUnsafe(new HasMethod()).     assertThat(containersFromPreviousAttemptsUnsafe, hasSize(1)). }
false;public;0;11;;@Test public void testDoesntCallMethodIfAbsent() {     final RegisterApplicationMasterResponseReflector registerApplicationMasterResponseReflector = new RegisterApplicationMasterResponseReflector(LOG, HasMethod.class).     final List<Container> containersFromPreviousAttemptsUnsafe = registerApplicationMasterResponseReflector.getContainersFromPreviousAttemptsUnsafe(new Object()).     assertThat(containersFromPreviousAttemptsUnsafe, empty()). }
false;public;0;13;;@Test public void testGetMethodReflectiveHadoop22() {     assumeTrue("Method getContainersFromPreviousAttempts is not supported by Hadoop: " + VersionInfo.getVersion(), isHadoopVersionGreaterThanOrEquals(2, 2)).     final RegisterApplicationMasterResponseReflector registerApplicationMasterResponseReflector = new RegisterApplicationMasterResponseReflector(LOG).     final Method method = registerApplicationMasterResponseReflector.getMethod().     assertThat(method, notNullValue()). }
false;private,static;2;5;;private static boolean isHadoopVersionGreaterThanOrEquals(final int major, final int minor) {     final String[] splitVersion = VersionInfo.getVersion().split("\\.").     final int[] versions = Arrays.stream(splitVersion).mapToInt(Integer::parseInt).toArray().     return versions[0] >= major && versions[1] >= minor. }
true;public;0;4;/**  * Called from {@link #testCallsMethodIfPresent()}.  */ ;/**  * Called from {@link #testCallsMethodIfPresent()}.  */ @SuppressWarnings("unused") public List<Container> getContainersFromPreviousAttempts() {     return Collections.singletonList(mockContainer). }
