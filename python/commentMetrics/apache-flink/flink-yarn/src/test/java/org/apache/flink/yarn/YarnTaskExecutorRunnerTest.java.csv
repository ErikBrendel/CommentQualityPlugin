commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testKerberosKeytabConfiguration() throws Exception {     final String resourceDirPath = Paths.get("src", "test", "resources").toAbsolutePath().toString().     final Map<String, String> envs = new HashMap<>(2).     envs.put(YarnConfigKeys.KEYTAB_PRINCIPAL, "testuser1@domain").     envs.put(YarnConfigKeys.KEYTAB_PATH, resourceDirPath).     Configuration configuration = new Configuration().     YarnTaskExecutorRunner.setupConfigurationAndInstallSecurityContext(configuration, resourceDirPath, envs).     final List<SecurityModule> modules = SecurityUtils.getInstalledModules().     Optional<SecurityModule> moduleOpt = modules.stream().filter(module -> module instanceof HadoopModule).findFirst().     if (moduleOpt.isPresent()) {         HadoopModule hadoopModule = (HadoopModule) moduleOpt.get().         assertThat(hadoopModule.getSecurityConfig().getPrincipal(), is("testuser1@domain")).         assertThat(hadoopModule.getSecurityConfig().getKeytab(), is(new File(resourceDirPath, Utils.KEYTAB_FILE_NAME).getAbsolutePath())).     } else {         fail("Can not find HadoopModule!").     }     assertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB), is(new File(resourceDirPath, Utils.KEYTAB_FILE_NAME).getAbsolutePath())).     assertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL), is("testuser1@domain")). }
