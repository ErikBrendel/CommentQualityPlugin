commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;13;;// ------------------------------------------------------------------------ // Test setup and shutdown // ------------------------------------------------------------------------ @BeforeClass public static void createHDFS() throws Exception {     Assume.assumeTrue(!OperatingSystem.isWindows()).     final File tempDir = TEMP_DIR.newFolder().     org.apache.hadoop.conf.Configuration hdConf = new org.apache.hadoop.conf.Configuration().     hdConf.set(MiniDFSCluster.HDFS_MINIDFS_BASEDIR, tempDir.getAbsolutePath()).     MiniDFSCluster.Builder builder = new MiniDFSCluster.Builder(hdConf).     hdfsCluster = builder.build().     hdfsRootPath = new Path(hdfsCluster.getURI()). }
false;public,static;0;8;;@AfterClass public static void destroyHDFS() {     if (hdfsCluster != null) {         hdfsCluster.shutdown().     }     hdfsCluster = null.     hdfsRootPath = null. }
false;public;0;5;;@Before public void initConfig() {     hadoopConfig = new org.apache.hadoop.conf.Configuration().     hadoopConfig.set(org.apache.hadoop.fs.FileSystem.FS_DEFAULT_NAME_KEY, hdfsRootPath.toString()). }
false;public;0;10;;// ------------------------------------------------------------------------ // Tests // ------------------------------------------------------------------------ @Test public void testRepeatedClose() throws Exception {     final Configuration flinkConfig = new Configuration().     final YarnHighAvailabilityServices services = new YarnIntraNonHaMasterServices(flinkConfig, hadoopConfig).     services.closeAndCleanupAllData().     // this should not throw an exception     services.close(). }
false;public;0;22;;@Test public void testClosingReportsToLeader() throws Exception {     final Configuration flinkConfig = new Configuration().     try (YarnHighAvailabilityServices services = new YarnIntraNonHaMasterServices(flinkConfig, hadoopConfig)) {         final LeaderElectionService elector = services.getResourceManagerLeaderElectionService().         final LeaderRetrievalService retrieval = services.getResourceManagerLeaderRetriever().         final LeaderContender contender = mockContender(elector).         final LeaderRetrievalListener listener = mock(LeaderRetrievalListener.class).         elector.start(contender).         retrieval.start(listener).         // wait until the contender has become the leader         verify(listener, timeout(1000L).times(1)).notifyLeaderAddress(anyString(), any(UUID.class)).         // now we can close the election service         services.close().         verify(contender, timeout(1000L).times(1)).handleError(any(Exception.class)).     } }
false;private,static;1;4;;// ------------------------------------------------------------------------ // utilities // ------------------------------------------------------------------------ private static LeaderContender mockContender(final LeaderElectionService service) {     String address = StringUtils.getRandomString(RND, 5, 10, 'a', 'z').     return mockContender(service, address). }
false;public;1;6;;@Override public Void answer(InvocationOnMock invocation) throws Throwable {     final UUID uuid = (UUID) invocation.getArguments()[0].     service.confirmLeaderSessionID(uuid).     return null. }
false;private,static;2;16;;private static LeaderContender mockContender(final LeaderElectionService service, final String address) {     LeaderContender mockContender = mock(LeaderContender.class).     when(mockContender.getAddress()).thenReturn(address).     doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocation) throws Throwable {             final UUID uuid = (UUID) invocation.getArguments()[0].             service.confirmLeaderSessionID(uuid).             return null.         }     }).when(mockContender).grantLeadership(any(UUID.class)).     return mockContender. }
