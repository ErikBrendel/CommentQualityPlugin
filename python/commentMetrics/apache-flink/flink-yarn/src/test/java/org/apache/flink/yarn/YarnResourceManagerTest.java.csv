commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Before public void setup() {     testingFatalErrorHandler = new TestingFatalErrorHandler().     flinkConfig = new Configuration().     flinkConfig.setInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN, 100).     File root = folder.getRoot().     File home = new File(root, "home").     boolean created = home.mkdir().     assertTrue(created).     env = new HashMap<>().     env.put(ENV_APP_ID, "foo").     env.put(ENV_CLIENT_HOME_DIR, home.getAbsolutePath()).     env.put(ENV_CLIENT_SHIP_FILES, "").     env.put(ENV_FLINK_CLASSPATH, "").     env.put(ENV_HADOOP_USER_NAME, "foo").     env.put(FLINK_JAR_PATH, root.toURI().toString()). }
false;public;0;10;;@After public void teardown() throws Exception {     if (testingFatalErrorHandler != null) {         testingFatalErrorHandler.rethrowError().     }     if (env != null) {         env.clear().     } }
false;;1;3;;<T> CompletableFuture<T> runInMainThread(Callable<T> callable) {     return callAsync(callable, TIMEOUT). }
false;;0;3;;MainThreadExecutor getMainThreadExecutorForTesting() {     return super.getMainThreadExecutor(). }
false;protected;3;7;;@Override protected AMRMClientAsync<AMRMClient.ContainerRequest> createAndStartResourceManagerClient(YarnConfiguration yarnConfiguration, int yarnHeartbeatIntervalMillis, @Nullable String webInterfaceUrl) {     return mockResourceManagerClient. }
false;protected;1;4;;@Override protected NMClient createAndStartNodeManagerClient(YarnConfiguration yarnConfiguration) {     return mockNMClient. }
false;protected;1;4;;@Override protected void runAsync(final Runnable runnable) {     runnable.run(). }
false;;0;4;;void grantLeadership() throws Exception {     rmLeaderSessionId = UUID.randomUUID().     rmLeaderElectionService.isLeader(rmLeaderSessionId).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS). }
true;;0;4;/**  * Start the resource manager and grant leadership to it.  */ ;/**  * Start the resource manager and grant leadership to it.  */ void startResourceManager() throws Exception {     resourceManager.start().     rmServices.grantLeadership(). }
true;;0;3;/**  * Stop the Akka actor system.  */ ;/**  * Stop the Akka actor system.  */ void stopResourceManager() throws Exception {     rpcService.stopService().get(). }
true;;1;8;/**  * A wrapper function for running test. Deal with setup and teardown logic  * in Context.  * @param testMethod the real test body.  */ ;/**  * A wrapper function for running test. Deal with setup and teardown logic  * in Context.  * @param testMethod the real test body.  */ void runTest(RunnableWithException testMethod) throws Exception {     startResourceManager().     try {         testMethod.run().     } finally {         stopResourceManager().     } }
false;private,static;4;19;;private static Container mockContainer(String host, int port, int containerId, Resource resource) {     Container mockContainer = mock(Container.class).     NodeId mockNodeId = NodeId.newInstance(host, port).     ContainerId mockContainerId = ContainerId.newInstance(ApplicationAttemptId.newInstance(ApplicationId.newInstance(System.currentTimeMillis(), 1), 1), containerId).     when(mockContainer.getId()).thenReturn(mockContainerId).     when(mockContainer.getNodeId()).thenReturn(mockNodeId).     when(mockContainer.getResource()).thenReturn(resource).     when(mockContainer.getPriority()).thenReturn(Priority.UNDEFINED).     return mockContainer. }
false;private,static;1;10;;private static ContainerStatus mockContainerStatus(ContainerId containerId) {     ContainerStatus mockContainerStatus = mock(ContainerStatus.class).     when(mockContainerStatus.getContainerId()).thenReturn(containerId).     when(mockContainerStatus.getState()).thenReturn(ContainerState.COMPLETE).     when(mockContainerStatus.getDiagnostics()).thenReturn("Test exit").     when(mockContainerStatus.getExitStatus()).thenReturn(-1).     return mockContainerStatus. }
false;public;0;78;;@Test public void testStopWorker() throws Exception {     new Context() {          {             runTest(() -> {                 // Request slot from SlotManager.                 CompletableFuture<?> registerSlotRequestFuture = resourceManager.runInMainThread(() -> {                     rmServices.slotManager.registerSlotRequest(new SlotRequest(new JobID(), new AllocationID(), resourceProfile1, taskHost)).                     return null.                 }).                 // wait for the registerSlotRequest completion                 registerSlotRequestFuture.get().                 // Callback from YARN when container is allocated.                 Container testingContainer = mockContainer("container", 1234, 1, resourceManager.getContainerResource()).                 doReturn(Collections.singletonList(Collections.singletonList(resourceManager.getContainerRequest()))).when(mockResourceManagerClient).getMatchingRequests(any(Priority.class), anyString(), any(Resource.class)).                 resourceManager.onContainersAllocated(ImmutableList.of(testingContainer)).                 verify(mockResourceManagerClient).addContainerRequest(any(AMRMClient.ContainerRequest.class)).                 verify(mockNMClient).startContainer(eq(testingContainer), any(ContainerLaunchContext.class)).                 // Remote task executor registers with YarnResourceManager.                 TaskExecutorGateway mockTaskExecutorGateway = mock(TaskExecutorGateway.class).                 rpcService.registerGateway(taskHost, mockTaskExecutorGateway).                 final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class).                 final ResourceID taskManagerResourceId = new ResourceID(testingContainer.getId().toString()).                 final SlotReport slotReport = new SlotReport(new SlotStatus(new SlotID(taskManagerResourceId, 1), new ResourceProfile(10, 1, 1, 1, 0, Collections.emptyMap()))).                 CompletableFuture<Integer> numberRegisteredSlotsFuture = rmGateway.registerTaskExecutor(taskHost, taskManagerResourceId, dataPort, hardwareDescription, Time.seconds(10L)).thenCompose((RegistrationResponse response) -> {                     assertThat(response, instanceOf(TaskExecutorRegistrationSuccess.class)).                     final TaskExecutorRegistrationSuccess success = (TaskExecutorRegistrationSuccess) response.                     return rmGateway.sendSlotReport(taskManagerResourceId, success.getRegistrationId(), slotReport, Time.seconds(10L)).                 }).handleAsync((Acknowledge ignored, Throwable throwable) -> rmServices.slotManager.getNumberRegisteredSlots(), resourceManager.getMainThreadExecutorForTesting()).                 final int numberRegisteredSlots = numberRegisteredSlotsFuture.get().                 assertEquals(1, numberRegisteredSlots).                 // Unregister all task executors and release all containers.                 CompletableFuture<?> unregisterAndReleaseFuture = resourceManager.runInMainThread(() -> {                     rmServices.slotManager.unregisterTaskManagersAndReleaseResources().                     return null.                 }).                 unregisterAndReleaseFuture.get().                 verify(mockNMClient).stopContainer(any(ContainerId.class), any(NodeId.class)).                 verify(mockResourceManagerClient).releaseAssignedContainer(any(ContainerId.class)).             }).             // It's now safe to access the SlotManager state since the ResourceManager has been stopped.             assertThat(rmServices.slotManager.getNumberRegisteredSlots(), Matchers.equalTo(0)).             assertThat(resourceManager.getNumberOfRegisteredTaskManagers().get(), Matchers.equalTo(0)).         }     }. }
true;public;0;12;/**  * Tests that application files are deleted when the YARN application master is de-registered.  */ ;/**  * Tests that application files are deleted when the YARN application master is de-registered.  */ @Test public void testDeleteApplicationFiles() throws Exception {     new Context() {          {             final File applicationDir = folder.newFolder(".flink").             env.put(FLINK_YARN_FILES, applicationDir.getCanonicalPath()).             runTest(() -> {                 resourceManager.deregisterApplication(ApplicationStatus.SUCCEEDED, null).                 assertFalse("YARN application directory was not removed", Files.exists(applicationDir.toPath())).             }).         }     }. }
true;public;0;38;/**  * Tests that YarnResourceManager will not request more containers than needs during  * callback from Yarn when container is Completed.  */ ;/**  * Tests that YarnResourceManager will not request more containers than needs during  * callback from Yarn when container is Completed.  */ @Test public void testOnContainerCompleted() throws Exception {     new Context() {          {             runTest(() -> {                 CompletableFuture<?> registerSlotRequestFuture = resourceManager.runInMainThread(() -> {                     rmServices.slotManager.registerSlotRequest(new SlotRequest(new JobID(), new AllocationID(), resourceProfile1, taskHost)).                     return null.                 }).                 // wait for the registerSlotRequest completion                 registerSlotRequestFuture.get().                 // Callback from YARN when container is allocated.                 Container testingContainer = mockContainer("container", 1234, 1, resourceManager.getContainerResource()).                 doReturn(Collections.singletonList(Collections.singletonList(resourceManager.getContainerRequest()))).when(mockResourceManagerClient).getMatchingRequests(any(Priority.class), anyString(), any(Resource.class)).                 resourceManager.onContainersAllocated(ImmutableList.of(testingContainer)).                 verify(mockResourceManagerClient).addContainerRequest(any(AMRMClient.ContainerRequest.class)).                 verify(mockResourceManagerClient).removeContainerRequest(any(AMRMClient.ContainerRequest.class)).                 verify(mockNMClient).startContainer(eq(testingContainer), any(ContainerLaunchContext.class)).                 // Callback from YARN when container is Completed, pending request can not be fulfilled by pending                 // containers, need to request new container.                 ContainerStatus testingContainerStatus = mockContainerStatus(testingContainer.getId()).                 resourceManager.onContainersCompleted(ImmutableList.of(testingContainerStatus)).                 verify(mockResourceManagerClient, times(2)).addContainerRequest(any(AMRMClient.ContainerRequest.class)).                 // Callback from YARN when container is Completed happened before global fail, pending request                 // slot is already fulfilled by pending containers, no need to request new container.                 resourceManager.onContainersCompleted(ImmutableList.of(testingContainerStatus)).                 verify(mockResourceManagerClient, times(2)).addContainerRequest(any(AMRMClient.ContainerRequest.class)).             }).         }     }. }
