commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;10;;public static SecurityContext installSecurityContext(Configuration configuration, String workingDirectory) throws Exception {     SecurityConfiguration sc = new SecurityConfiguration(configuration).     SecurityUtils.install(sc).     return SecurityUtils.getInstalledContext(). }
false;public,static;3;71;;public static Configuration loadConfiguration(String workingDirectory, Map<String, String> env, Logger log) {     Configuration configuration = GlobalConfiguration.loadConfiguration(workingDirectory).     final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL).     final String zooKeeperNamespace = env.get(YarnConfigKeys.ENV_ZOOKEEPER_NAMESPACE).     final Map<String, String> dynamicProperties = FlinkYarnSessionCli.getDynamicProperties(env.get(YarnConfigKeys.ENV_DYNAMIC_PROPERTIES)).     final String hostname = env.get(ApplicationConstants.Environment.NM_HOST.key()).     Preconditions.checkState(hostname != null, "ApplicationMaster hostname variable %s not set", ApplicationConstants.Environment.NM_HOST.key()).     configuration.setString(JobManagerOptions.ADDRESS, hostname).     configuration.setString(RestOptions.ADDRESS, hostname).     for (Map.Entry<String, String> property : dynamicProperties.entrySet()) {         configuration.setString(property.getKey(), property.getValue()).     }     if (zooKeeperNamespace != null) {         configuration.setString(HighAvailabilityOptions.HA_CLUSTER_ID, zooKeeperNamespace).     }     // if a web monitor shall be started, set the port to random binding     if (configuration.getInteger(WebOptions.PORT, 0) >= 0) {         configuration.setInteger(WebOptions.PORT, 0).     }     // set the REST port to 0 to select it randomly     configuration.setString(RestOptions.BIND_PORT, "0").     // if the user has set the deprecated YARN-specific config keys, we add the     // corresponding generic config keys instead. that way, later code needs not     // deal with deprecated config keys     BootstrapTools.substituteDeprecatedConfigPrefix(configuration, ConfigConstants.YARN_APPLICATION_MASTER_ENV_PREFIX, ResourceManagerOptions.CONTAINERIZED_MASTER_ENV_PREFIX).     BootstrapTools.substituteDeprecatedConfigPrefix(configuration, ConfigConstants.YARN_TASK_MANAGER_ENV_PREFIX, ResourceManagerOptions.CONTAINERIZED_TASK_MANAGER_ENV_PREFIX).     final String keytabPath.     if (env.get(YarnConfigKeys.KEYTAB_PATH) == null) {         keytabPath = null.     } else {         File f = new File(workingDirectory, Utils.KEYTAB_FILE_NAME).         keytabPath = f.getAbsolutePath().     }     if (keytabPath != null && remoteKeytabPrincipal != null) {         configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath).         configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal).     }     final String localDirs = env.get(ApplicationConstants.Environment.LOCAL_DIRS.key()).     BootstrapTools.updateTmpDirectoriesInConfiguration(configuration, localDirs).     return configuration. }
false;public,static;2;12;;public static void logYarnEnvironmentInformation(Map<String, String> env, Logger log) throws IOException {     final String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME).     Preconditions.checkArgument(yarnClientUsername != null, "YARN client user name environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME).     UserGroupInformation currentUser = UserGroupInformation.getCurrentUser().     log.info("YARN daemon is running as: {} Yarn client user obtainer: {}", currentUser.getShortUserName(), yarnClientUsername). }
