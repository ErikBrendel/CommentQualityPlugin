# id;timestamp;commentText;codeText;commentWords;codeWords
YarnPreConfiguredMasterNonHaServices -> public YarnPreConfiguredMasterNonHaServices( 			Configuration config, 			org.apache.hadoop.conf.Configuration hadoopConf, 			HighAvailabilityServicesUtils.AddressResolution addressResolution) throws IOException;1493975155;Creates new YarnPreConfiguredMasterHaServices for the given Flink and YARN configuration._This constructor parses the ResourceManager address from the Flink configuration and sets_up the HDFS access to store recovery data in the YARN application's working directory.__@param config     The Flink configuration of this component / process._@param hadoopConf The Hadoop configuration for the YARN cluster.__@throws IOException_Thrown, if the initialization of the Hadoop file system used by YARN fails._@throws IllegalConfigurationException_Thrown, if the Flink configuration does not properly describe the ResourceManager address and port.;public YarnPreConfiguredMasterNonHaServices(_			Configuration config,_			org.apache.hadoop.conf.Configuration hadoopConf,_			HighAvailabilityServicesUtils.AddressResolution addressResolution) throws IOException {__		super(config, hadoopConf)___		_		boolean successful = false___		try {_			_			final String rmHost = config.getString(YarnConfigOptions.APP_MASTER_RPC_ADDRESS)__			final int rmPort = config.getInteger(YarnConfigOptions.APP_MASTER_RPC_PORT)___			if (rmHost == null) {_				throw new IllegalConfigurationException("Config parameter '" + _						YarnConfigOptions.APP_MASTER_RPC_ADDRESS.key() + "' is missing.")__			}_			if (rmPort < 0) {_				throw new IllegalConfigurationException("Config parameter '" +_						YarnConfigOptions.APP_MASTER_RPC_PORT.key() + "' is missing.")__			}_			if (rmPort <= 0 || rmPort >= 65536) {_				throw new IllegalConfigurationException("Invalid value for '" + _						YarnConfigOptions.APP_MASTER_RPC_PORT.key() + "' - port must be in [1, 65535]")__			}__			this.resourceManagerRpcUrl = AkkaRpcServiceUtils.getRpcUrl(_				rmHost,_				rmPort,_				ResourceManager.RESOURCE_MANAGER_NAME,_				addressResolution,_				config)___			_			successful = true__		}_		finally {_			if (!successful) {_				_				try {_					super.close()__				} catch (Throwable ignored) {}_			}_		}_	};creates,new,yarn,pre,configured,master,ha,services,for,the,given,flink,and,yarn,configuration,this,constructor,parses,the,resource,manager,address,from,the,flink,configuration,and,sets,up,the,hdfs,access,to,store,recovery,data,in,the,yarn,application,s,working,directory,param,config,the,flink,configuration,of,this,component,process,param,hadoop,conf,the,hadoop,configuration,for,the,yarn,cluster,throws,ioexception,thrown,if,the,initialization,of,the,hadoop,file,system,used,by,yarn,fails,throws,illegal,configuration,exception,thrown,if,the,flink,configuration,does,not,properly,describe,the,resource,manager,address,and,port;public,yarn,pre,configured,master,non,ha,services,configuration,config,org,apache,hadoop,conf,configuration,hadoop,conf,high,availability,services,utils,address,resolution,address,resolution,throws,ioexception,super,config,hadoop,conf,boolean,successful,false,try,final,string,rm,host,config,get,string,yarn,config,options,final,int,rm,port,config,get,integer,yarn,config,options,if,rm,host,null,throw,new,illegal,configuration,exception,config,parameter,yarn,config,options,key,is,missing,if,rm,port,0,throw,new,illegal,configuration,exception,config,parameter,yarn,config,options,key,is,missing,if,rm,port,0,rm,port,65536,throw,new,illegal,configuration,exception,invalid,value,for,yarn,config,options,key,port,must,be,in,1,65535,this,resource,manager,rpc,url,akka,rpc,service,utils,get,rpc,url,rm,host,rm,port,resource,manager,address,resolution,config,successful,true,finally,if,successful,try,super,close,catch,throwable,ignored
YarnPreConfiguredMasterNonHaServices -> public YarnPreConfiguredMasterNonHaServices( 			Configuration config, 			org.apache.hadoop.conf.Configuration hadoopConf, 			HighAvailabilityServicesUtils.AddressResolution addressResolution) throws IOException;1495819079;Creates new YarnPreConfiguredMasterHaServices for the given Flink and YARN configuration._This constructor parses the ResourceManager address from the Flink configuration and sets_up the HDFS access to store recovery data in the YARN application's working directory.__@param config     The Flink configuration of this component / process._@param hadoopConf The Hadoop configuration for the YARN cluster.__@throws IOException_Thrown, if the initialization of the Hadoop file system used by YARN fails._@throws IllegalConfigurationException_Thrown, if the Flink configuration does not properly describe the ResourceManager address and port.;public YarnPreConfiguredMasterNonHaServices(_			Configuration config,_			org.apache.hadoop.conf.Configuration hadoopConf,_			HighAvailabilityServicesUtils.AddressResolution addressResolution) throws IOException {__		super(config, hadoopConf)___		_		boolean successful = false___		try {_			_			final String rmHost = config.getString(YarnConfigOptions.APP_MASTER_RPC_ADDRESS)__			final int rmPort = config.getInteger(YarnConfigOptions.APP_MASTER_RPC_PORT)___			if (rmHost == null) {_				throw new IllegalConfigurationException("Config parameter '" +_						YarnConfigOptions.APP_MASTER_RPC_ADDRESS.key() + "' is missing.")__			}_			if (rmPort < 0) {_				throw new IllegalConfigurationException("Config parameter '" +_						YarnConfigOptions.APP_MASTER_RPC_PORT.key() + "' is missing.")__			}_			if (rmPort <= 0 || rmPort >= 65536) {_				throw new IllegalConfigurationException("Invalid value for '" +_						YarnConfigOptions.APP_MASTER_RPC_PORT.key() + "' - port must be in [1, 65535]")__			}__			this.resourceManagerRpcUrl = AkkaRpcServiceUtils.getRpcUrl(_				rmHost,_				rmPort,_				ResourceManager.RESOURCE_MANAGER_NAME,_				addressResolution,_				config)___			_			successful = true__		}_		finally {_			if (!successful) {_				_				try {_					super.close()__				} catch (Throwable ignored) {}_			}_		}_	};creates,new,yarn,pre,configured,master,ha,services,for,the,given,flink,and,yarn,configuration,this,constructor,parses,the,resource,manager,address,from,the,flink,configuration,and,sets,up,the,hdfs,access,to,store,recovery,data,in,the,yarn,application,s,working,directory,param,config,the,flink,configuration,of,this,component,process,param,hadoop,conf,the,hadoop,configuration,for,the,yarn,cluster,throws,ioexception,thrown,if,the,initialization,of,the,hadoop,file,system,used,by,yarn,fails,throws,illegal,configuration,exception,thrown,if,the,flink,configuration,does,not,properly,describe,the,resource,manager,address,and,port;public,yarn,pre,configured,master,non,ha,services,configuration,config,org,apache,hadoop,conf,configuration,hadoop,conf,high,availability,services,utils,address,resolution,address,resolution,throws,ioexception,super,config,hadoop,conf,boolean,successful,false,try,final,string,rm,host,config,get,string,yarn,config,options,final,int,rm,port,config,get,integer,yarn,config,options,if,rm,host,null,throw,new,illegal,configuration,exception,config,parameter,yarn,config,options,key,is,missing,if,rm,port,0,throw,new,illegal,configuration,exception,config,parameter,yarn,config,options,key,is,missing,if,rm,port,0,rm,port,65536,throw,new,illegal,configuration,exception,invalid,value,for,yarn,config,options,key,port,must,be,in,1,65535,this,resource,manager,rpc,url,akka,rpc,service,utils,get,rpc,url,rm,host,rm,port,resource,manager,address,resolution,config,successful,true,finally,if,successful,try,super,close,catch,throwable,ignored
YarnPreConfiguredMasterNonHaServices -> public YarnPreConfiguredMasterNonHaServices( 			Configuration config, 			org.apache.hadoop.conf.Configuration hadoopConf, 			HighAvailabilityServicesUtils.AddressResolution addressResolution) throws IOException;1499381502;Creates new YarnPreConfiguredMasterHaServices for the given Flink and YARN configuration._This constructor parses the ResourceManager address from the Flink configuration and sets_up the HDFS access to store recovery data in the YARN application's working directory.__@param config     The Flink configuration of this component / process._@param hadoopConf The Hadoop configuration for the YARN cluster.__@throws IOException_Thrown, if the initialization of the Hadoop file system used by YARN fails._@throws IllegalConfigurationException_Thrown, if the Flink configuration does not properly describe the ResourceManager address and port.;public YarnPreConfiguredMasterNonHaServices(_			Configuration config,_			org.apache.hadoop.conf.Configuration hadoopConf,_			HighAvailabilityServicesUtils.AddressResolution addressResolution) throws IOException {__		super(config, hadoopConf)___		_		boolean successful = false___		try {_			_			final String rmHost = config.getString(YarnConfigOptions.APP_MASTER_RPC_ADDRESS)__			final int rmPort = config.getInteger(YarnConfigOptions.APP_MASTER_RPC_PORT)___			if (rmHost == null) {_				throw new IllegalConfigurationException("Config parameter '" +_						YarnConfigOptions.APP_MASTER_RPC_ADDRESS.key() + "' is missing.")__			}_			if (rmPort < 0) {_				throw new IllegalConfigurationException("Config parameter '" +_						YarnConfigOptions.APP_MASTER_RPC_PORT.key() + "' is missing.")__			}_			if (rmPort <= 0 || rmPort >= 65536) {_				throw new IllegalConfigurationException("Invalid value for '" +_						YarnConfigOptions.APP_MASTER_RPC_PORT.key() + "' - port must be in [1, 65535]")__			}__			this.resourceManagerRpcUrl = AkkaRpcServiceUtils.getRpcUrl(_				rmHost,_				rmPort,_				ResourceManager.RESOURCE_MANAGER_NAME,_				addressResolution,_				config)___			_			successful = true__		}_		finally {_			if (!successful) {_				_				try {_					super.close()__				} catch (Throwable ignored) {}_			}_		}_	};creates,new,yarn,pre,configured,master,ha,services,for,the,given,flink,and,yarn,configuration,this,constructor,parses,the,resource,manager,address,from,the,flink,configuration,and,sets,up,the,hdfs,access,to,store,recovery,data,in,the,yarn,application,s,working,directory,param,config,the,flink,configuration,of,this,component,process,param,hadoop,conf,the,hadoop,configuration,for,the,yarn,cluster,throws,ioexception,thrown,if,the,initialization,of,the,hadoop,file,system,used,by,yarn,fails,throws,illegal,configuration,exception,thrown,if,the,flink,configuration,does,not,properly,describe,the,resource,manager,address,and,port;public,yarn,pre,configured,master,non,ha,services,configuration,config,org,apache,hadoop,conf,configuration,hadoop,conf,high,availability,services,utils,address,resolution,address,resolution,throws,ioexception,super,config,hadoop,conf,boolean,successful,false,try,final,string,rm,host,config,get,string,yarn,config,options,final,int,rm,port,config,get,integer,yarn,config,options,if,rm,host,null,throw,new,illegal,configuration,exception,config,parameter,yarn,config,options,key,is,missing,if,rm,port,0,throw,new,illegal,configuration,exception,config,parameter,yarn,config,options,key,is,missing,if,rm,port,0,rm,port,65536,throw,new,illegal,configuration,exception,invalid,value,for,yarn,config,options,key,port,must,be,in,1,65535,this,resource,manager,rpc,url,akka,rpc,service,utils,get,rpc,url,rm,host,rm,port,resource,manager,address,resolution,config,successful,true,finally,if,successful,try,super,close,catch,throwable,ignored
YarnPreConfiguredMasterNonHaServices -> public YarnPreConfiguredMasterNonHaServices( 			Configuration config, 			org.apache.hadoop.conf.Configuration hadoopConf, 			HighAvailabilityServicesUtils.AddressResolution addressResolution) throws IOException;1504472365;Creates new YarnPreConfiguredMasterHaServices for the given Flink and YARN configuration._This constructor parses the ResourceManager address from the Flink configuration and sets_up the HDFS access to store recovery data in the YARN application's working directory.__@param config     The Flink configuration of this component / process._@param hadoopConf The Hadoop configuration for the YARN cluster.__@throws IOException_Thrown, if the initialization of the Hadoop file system used by YARN fails._@throws IllegalConfigurationException_Thrown, if the Flink configuration does not properly describe the ResourceManager address and port.;public YarnPreConfiguredMasterNonHaServices(_			Configuration config,_			org.apache.hadoop.conf.Configuration hadoopConf,_			HighAvailabilityServicesUtils.AddressResolution addressResolution) throws IOException {__		super(config, hadoopConf)___		_		boolean successful = false___		try {_			_			final String rmHost = config.getString(YarnConfigOptions.APP_MASTER_RPC_ADDRESS)__			final int rmPort = config.getInteger(YarnConfigOptions.APP_MASTER_RPC_PORT)___			if (rmHost == null) {_				throw new IllegalConfigurationException("Config parameter '" +_						YarnConfigOptions.APP_MASTER_RPC_ADDRESS.key() + "' is missing.")__			}_			if (rmPort < 0) {_				throw new IllegalConfigurationException("Config parameter '" +_						YarnConfigOptions.APP_MASTER_RPC_PORT.key() + "' is missing.")__			}_			if (rmPort <= 0 || rmPort >= 65536) {_				throw new IllegalConfigurationException("Invalid value for '" +_						YarnConfigOptions.APP_MASTER_RPC_PORT.key() + "' - port must be in [1, 65535]")__			}__			this.resourceManagerRpcUrl = AkkaRpcServiceUtils.getRpcUrl(_				rmHost,_				rmPort,_				ResourceManager.RESOURCE_MANAGER_NAME,_				addressResolution,_				config)___			this.dispatcherRpcUrl = AkkaRpcServiceUtils.getRpcUrl(_				rmHost,_				rmPort,_				Dispatcher.DISPATCHER_NAME,_				addressResolution,_				config)___			_			successful = true__		}_		finally {_			if (!successful) {_				_				try {_					super.close()__				} catch (Throwable ignored) {}_			}_		}_	};creates,new,yarn,pre,configured,master,ha,services,for,the,given,flink,and,yarn,configuration,this,constructor,parses,the,resource,manager,address,from,the,flink,configuration,and,sets,up,the,hdfs,access,to,store,recovery,data,in,the,yarn,application,s,working,directory,param,config,the,flink,configuration,of,this,component,process,param,hadoop,conf,the,hadoop,configuration,for,the,yarn,cluster,throws,ioexception,thrown,if,the,initialization,of,the,hadoop,file,system,used,by,yarn,fails,throws,illegal,configuration,exception,thrown,if,the,flink,configuration,does,not,properly,describe,the,resource,manager,address,and,port;public,yarn,pre,configured,master,non,ha,services,configuration,config,org,apache,hadoop,conf,configuration,hadoop,conf,high,availability,services,utils,address,resolution,address,resolution,throws,ioexception,super,config,hadoop,conf,boolean,successful,false,try,final,string,rm,host,config,get,string,yarn,config,options,final,int,rm,port,config,get,integer,yarn,config,options,if,rm,host,null,throw,new,illegal,configuration,exception,config,parameter,yarn,config,options,key,is,missing,if,rm,port,0,throw,new,illegal,configuration,exception,config,parameter,yarn,config,options,key,is,missing,if,rm,port,0,rm,port,65536,throw,new,illegal,configuration,exception,invalid,value,for,yarn,config,options,key,port,must,be,in,1,65535,this,resource,manager,rpc,url,akka,rpc,service,utils,get,rpc,url,rm,host,rm,port,resource,manager,address,resolution,config,this,dispatcher,rpc,url,akka,rpc,service,utils,get,rpc,url,rm,host,rm,port,dispatcher,address,resolution,config,successful,true,finally,if,successful,try,super,close,catch,throwable,ignored
YarnPreConfiguredMasterNonHaServices -> public YarnPreConfiguredMasterNonHaServices( 			Configuration config, 			org.apache.hadoop.conf.Configuration hadoopConf, 			HighAvailabilityServicesUtils.AddressResolution addressResolution) throws IOException;1516971025;Creates new YarnPreConfiguredMasterHaServices for the given Flink and YARN configuration._This constructor parses the ResourceManager address from the Flink configuration and sets_up the HDFS access to store recovery data in the YARN application's working directory.__@param config     The Flink configuration of this component / process._@param hadoopConf The Hadoop configuration for the YARN cluster.__@throws IOException_Thrown, if the initialization of the Hadoop file system used by YARN fails._@throws IllegalConfigurationException_Thrown, if the Flink configuration does not properly describe the ResourceManager address and port.;public YarnPreConfiguredMasterNonHaServices(_			Configuration config,_			org.apache.hadoop.conf.Configuration hadoopConf,_			HighAvailabilityServicesUtils.AddressResolution addressResolution) throws IOException {__		super(config, hadoopConf)___		_		boolean successful = false___		try {_			_			final String rmHost = config.getString(YarnConfigOptions.APP_MASTER_RPC_ADDRESS)__			final int rmPort = config.getInteger(YarnConfigOptions.APP_MASTER_RPC_PORT)___			if (rmHost == null) {_				throw new IllegalConfigurationException("Config parameter '" +_						YarnConfigOptions.APP_MASTER_RPC_ADDRESS.key() + "' is missing.")__			}_			if (rmPort < 0) {_				throw new IllegalConfigurationException("Config parameter '" +_						YarnConfigOptions.APP_MASTER_RPC_PORT.key() + "' is missing.")__			}_			if (rmPort <= 0 || rmPort >= 65536) {_				throw new IllegalConfigurationException("Invalid value for '" +_						YarnConfigOptions.APP_MASTER_RPC_PORT.key() + "' - port must be in [1, 65535]")__			}__			this.resourceManagerRpcUrl = AkkaRpcServiceUtils.getRpcUrl(_				rmHost,_				rmPort,_				ResourceManager.RESOURCE_MANAGER_NAME,_				addressResolution,_				config)___			this.dispatcherRpcUrl = AkkaRpcServiceUtils.getRpcUrl(_				rmHost,_				rmPort,_				Dispatcher.DISPATCHER_NAME,_				addressResolution,_				config)___			_			successful = true__		}_		finally {_			if (!successful) {_				_				try {_					super.close()__				} catch (Throwable ignored) {}_			}_		}_	};creates,new,yarn,pre,configured,master,ha,services,for,the,given,flink,and,yarn,configuration,this,constructor,parses,the,resource,manager,address,from,the,flink,configuration,and,sets,up,the,hdfs,access,to,store,recovery,data,in,the,yarn,application,s,working,directory,param,config,the,flink,configuration,of,this,component,process,param,hadoop,conf,the,hadoop,configuration,for,the,yarn,cluster,throws,ioexception,thrown,if,the,initialization,of,the,hadoop,file,system,used,by,yarn,fails,throws,illegal,configuration,exception,thrown,if,the,flink,configuration,does,not,properly,describe,the,resource,manager,address,and,port;public,yarn,pre,configured,master,non,ha,services,configuration,config,org,apache,hadoop,conf,configuration,hadoop,conf,high,availability,services,utils,address,resolution,address,resolution,throws,ioexception,super,config,hadoop,conf,boolean,successful,false,try,final,string,rm,host,config,get,string,yarn,config,options,final,int,rm,port,config,get,integer,yarn,config,options,if,rm,host,null,throw,new,illegal,configuration,exception,config,parameter,yarn,config,options,key,is,missing,if,rm,port,0,throw,new,illegal,configuration,exception,config,parameter,yarn,config,options,key,is,missing,if,rm,port,0,rm,port,65536,throw,new,illegal,configuration,exception,invalid,value,for,yarn,config,options,key,port,must,be,in,1,65535,this,resource,manager,rpc,url,akka,rpc,service,utils,get,rpc,url,rm,host,rm,port,resource,manager,address,resolution,config,this,dispatcher,rpc,url,akka,rpc,service,utils,get,rpc,url,rm,host,rm,port,dispatcher,address,resolution,config,successful,true,finally,if,successful,try,super,close,catch,throwable,ignored
YarnPreConfiguredMasterNonHaServices -> public YarnPreConfiguredMasterNonHaServices( 			Configuration config, 			org.apache.hadoop.conf.Configuration hadoopConf) throws IOException;1482522867;Creates new YarnPreConfiguredMasterHaServices for the given Flink and YARN configuration._This constructor parses the ResourceManager address from the Flink configuration and sets_up the HDFS access to store recovery data in the YARN application's working directory.__@param config     The Flink configuration of this component / process._@param hadoopConf The Hadoop configuration for the YARN cluster.__@throws IOException_Thrown, if the initialization of the Hadoop file system used by YARN fails._@throws IllegalConfigurationException_Thrown, if the Flink configuration does not properly describe the ResourceManager address and port.;public YarnPreConfiguredMasterNonHaServices(_			Configuration config,_			org.apache.hadoop.conf.Configuration hadoopConf) throws IOException {__		super(config, hadoopConf)___		_		boolean successful = false___		try {_			_			final String rmHost = config.getString(YarnConfigOptions.APP_MASTER_RPC_ADDRESS)__			final int rmPort = config.getInteger(YarnConfigOptions.APP_MASTER_RPC_PORT)___			if (rmHost == null) {_				throw new IllegalConfigurationException("Config parameter '" + _						YarnConfigOptions.APP_MASTER_RPC_ADDRESS.key() + "' is missing.")__			}_			if (rmPort < 0) {_				throw new IllegalConfigurationException("Config parameter '" +_						YarnConfigOptions.APP_MASTER_RPC_PORT.key() + "' is missing.")__			}_			if (rmPort <= 0 || rmPort >= 65536) {_				throw new IllegalConfigurationException("Invalid value for '" + _						YarnConfigOptions.APP_MASTER_RPC_PORT.key() + "' - port must be in [1, 65535]")__			}__			this.resourceManagerRpcUrl = RpcServiceUtils.getRpcUrl(_					rmHost, rmPort, RESOURCE_MANAGER_RPC_ENDPOINT_NAME, config)___			_			successful = true__		}_		finally {_			if (!successful) {_				_				try {_					super.close()__				} catch (Throwable ignored) {}_			}_		}_	};creates,new,yarn,pre,configured,master,ha,services,for,the,given,flink,and,yarn,configuration,this,constructor,parses,the,resource,manager,address,from,the,flink,configuration,and,sets,up,the,hdfs,access,to,store,recovery,data,in,the,yarn,application,s,working,directory,param,config,the,flink,configuration,of,this,component,process,param,hadoop,conf,the,hadoop,configuration,for,the,yarn,cluster,throws,ioexception,thrown,if,the,initialization,of,the,hadoop,file,system,used,by,yarn,fails,throws,illegal,configuration,exception,thrown,if,the,flink,configuration,does,not,properly,describe,the,resource,manager,address,and,port;public,yarn,pre,configured,master,non,ha,services,configuration,config,org,apache,hadoop,conf,configuration,hadoop,conf,throws,ioexception,super,config,hadoop,conf,boolean,successful,false,try,final,string,rm,host,config,get,string,yarn,config,options,final,int,rm,port,config,get,integer,yarn,config,options,if,rm,host,null,throw,new,illegal,configuration,exception,config,parameter,yarn,config,options,key,is,missing,if,rm,port,0,throw,new,illegal,configuration,exception,config,parameter,yarn,config,options,key,is,missing,if,rm,port,0,rm,port,65536,throw,new,illegal,configuration,exception,invalid,value,for,yarn,config,options,key,port,must,be,in,1,65535,this,resource,manager,rpc,url,rpc,service,utils,get,rpc,url,rm,host,rm,port,config,successful,true,finally,if,successful,try,super,close,catch,throwable,ignored
YarnPreConfiguredMasterNonHaServices -> public YarnPreConfiguredMasterNonHaServices( 			Configuration config, 			org.apache.hadoop.conf.Configuration hadoopConf) throws IOException;1493146240;Creates new YarnPreConfiguredMasterHaServices for the given Flink and YARN configuration._This constructor parses the ResourceManager address from the Flink configuration and sets_up the HDFS access to store recovery data in the YARN application's working directory.__@param config     The Flink configuration of this component / process._@param hadoopConf The Hadoop configuration for the YARN cluster.__@throws IOException_Thrown, if the initialization of the Hadoop file system used by YARN fails._@throws IllegalConfigurationException_Thrown, if the Flink configuration does not properly describe the ResourceManager address and port.;public YarnPreConfiguredMasterNonHaServices(_			Configuration config,_			org.apache.hadoop.conf.Configuration hadoopConf) throws IOException {__		super(config, hadoopConf)___		_		boolean successful = false___		try {_			_			final String rmHost = config.getString(YarnConfigOptions.APP_MASTER_RPC_ADDRESS)__			final int rmPort = config.getInteger(YarnConfigOptions.APP_MASTER_RPC_PORT)___			if (rmHost == null) {_				throw new IllegalConfigurationException("Config parameter '" + _						YarnConfigOptions.APP_MASTER_RPC_ADDRESS.key() + "' is missing.")__			}_			if (rmPort < 0) {_				throw new IllegalConfigurationException("Config parameter '" +_						YarnConfigOptions.APP_MASTER_RPC_PORT.key() + "' is missing.")__			}_			if (rmPort <= 0 || rmPort >= 65536) {_				throw new IllegalConfigurationException("Invalid value for '" + _						YarnConfigOptions.APP_MASTER_RPC_PORT.key() + "' - port must be in [1, 65535]")__			}__			this.resourceManagerRpcUrl = RpcServiceUtils.getRpcUrl(_					rmHost, rmPort, FlinkResourceManager.RESOURCE_MANAGER_NAME, config)___			_			successful = true__		}_		finally {_			if (!successful) {_				_				try {_					super.close()__				} catch (Throwable ignored) {}_			}_		}_	};creates,new,yarn,pre,configured,master,ha,services,for,the,given,flink,and,yarn,configuration,this,constructor,parses,the,resource,manager,address,from,the,flink,configuration,and,sets,up,the,hdfs,access,to,store,recovery,data,in,the,yarn,application,s,working,directory,param,config,the,flink,configuration,of,this,component,process,param,hadoop,conf,the,hadoop,configuration,for,the,yarn,cluster,throws,ioexception,thrown,if,the,initialization,of,the,hadoop,file,system,used,by,yarn,fails,throws,illegal,configuration,exception,thrown,if,the,flink,configuration,does,not,properly,describe,the,resource,manager,address,and,port;public,yarn,pre,configured,master,non,ha,services,configuration,config,org,apache,hadoop,conf,configuration,hadoop,conf,throws,ioexception,super,config,hadoop,conf,boolean,successful,false,try,final,string,rm,host,config,get,string,yarn,config,options,final,int,rm,port,config,get,integer,yarn,config,options,if,rm,host,null,throw,new,illegal,configuration,exception,config,parameter,yarn,config,options,key,is,missing,if,rm,port,0,throw,new,illegal,configuration,exception,config,parameter,yarn,config,options,key,is,missing,if,rm,port,0,rm,port,65536,throw,new,illegal,configuration,exception,invalid,value,for,yarn,config,options,key,port,must,be,in,1,65535,this,resource,manager,rpc,url,rpc,service,utils,get,rpc,url,rm,host,rm,port,flink,resource,manager,config,successful,true,finally,if,successful,try,super,close,catch,throwable,ignored
