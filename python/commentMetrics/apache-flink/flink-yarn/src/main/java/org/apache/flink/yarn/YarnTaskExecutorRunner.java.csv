commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;7;/**  * The entry point for the YARN task executor runner.  *  * @param args The command line arguments.  */ ;// ------------------------------------------------------------------------ // Program entry point // ------------------------------------------------------------------------ /**  * The entry point for the YARN task executor runner.  *  * @param args The command line arguments.  */ public static void main(String[] args) {     EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args).     SignalHandler.register(LOG).     JvmShutdownSafeguard.installAsShutdownHook(LOG).     run(args). }
true;private,static;1;28;/**  * The instance entry point for the YARN task executor. Obtains user group information and calls  * the main work method {@link TaskManagerRunner#runTaskManager(Configuration, ResourceID)}  as a  * privileged action.  *  * @param args The command line arguments.  */ ;/**  * The instance entry point for the YARN task executor. Obtains user group information and calls  * the main work method {@link TaskManagerRunner#runTaskManager(Configuration, ResourceID)}  as a  * privileged action.  *  * @param args The command line arguments.  */ private static void run(String[] args) {     try {         LOG.debug("All environment variables: {}", ENV).         final String currDir = ENV.get(Environment.PWD.key()).         LOG.info("Current working Directory: {}", currDir).         final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir).         FileSystem.initialize(configuration).         setupConfigurationAndInstallSecurityContext(configuration, currDir, ENV).         final String containerId = ENV.get(YarnResourceManager.ENV_FLINK_CONTAINER_ID).         Preconditions.checkArgument(containerId != null, "ContainerId variable %s not set", YarnResourceManager.ENV_FLINK_CONTAINER_ID).         SecurityUtils.getInstalledContext().runSecured((Callable<Void>) () -> {             TaskManagerRunner.runTaskManager(configuration, new ResourceID(containerId)).             return null.         }).     } catch (Throwable t) {         final Throwable strippedThrowable = ExceptionUtils.stripException(t, UndeclaredThrowableException.class).         // make sure that everything whatever ends up in the log         LOG.error("YARN TaskManager initialization failed.", strippedThrowable).         System.exit(INIT_ERROR_EXIT_CODE).     } }
false;static;3;11;;@VisibleForTesting static void setupConfigurationAndInstallSecurityContext(Configuration configuration, String currDir, Map<String, String> variables) throws Exception {     final String localDirs = variables.get(Environment.LOCAL_DIRS.key()).     LOG.info("Current working/local Directory: {}", localDirs).     BootstrapTools.updateTmpDirectoriesInConfiguration(configuration, localDirs).     setupConfigurationFromVariables(configuration, currDir, variables).     installSecurityContext(configuration). }
false;private,static;3;35;;private static void setupConfigurationFromVariables(Configuration configuration, String currDir, Map<String, String> variables) throws IOException {     final String yarnClientUsername = variables.get(YarnConfigKeys.ENV_HADOOP_USER_NAME).     final String remoteKeytabPath = variables.get(YarnConfigKeys.KEYTAB_PATH).     LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath).     final String remoteKeytabPrincipal = variables.get(YarnConfigKeys.KEYTAB_PRINCIPAL).     LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal).     // tell akka to die in case of an error     configuration.setBoolean(AkkaOptions.JVM_EXIT_ON_FATAL_ERROR, true).     String keytabPath = null.     if (remoteKeytabPath != null) {         File f = new File(currDir, Utils.KEYTAB_FILE_NAME).         keytabPath = f.getAbsolutePath().         LOG.info("keytab path: {}", keytabPath).     }     UserGroupInformation currentUser = UserGroupInformation.getCurrentUser().     LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}", currentUser.getShortUserName(), yarnClientUsername).     if (keytabPath != null && remoteKeytabPrincipal != null) {         configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath).         configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal).     }     // use the hostname passed by job manager     final String taskExecutorHostname = variables.get(YarnResourceManager.ENV_FLINK_NODE_ID).     if (taskExecutorHostname != null) {         configuration.setString(TaskManagerOptions.HOST, taskExecutorHostname).     } }
false;private,static;1;4;;private static void installSecurityContext(Configuration configuration) throws Exception {     SecurityConfiguration sc = new SecurityConfiguration(configuration).     SecurityUtils.install(sc). }
