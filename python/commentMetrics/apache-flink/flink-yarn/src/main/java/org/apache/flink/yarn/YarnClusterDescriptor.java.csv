commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String getYarnSessionClusterEntrypoint() {     return YarnSessionClusterEntrypoint.class.getName(). }
false;protected;0;4;;@Override protected String getYarnJobClusterEntrypoint() {     return YarnJobClusterEntrypoint.class.getName(). }
false;public;3;20;;@Override public ClusterClient<ApplicationId> deployJobCluster(ClusterSpecification clusterSpecification, JobGraph jobGraph, boolean detached) throws ClusterDeploymentException {     // this is required because the slots are allocated lazily     jobGraph.setAllowQueuedScheduling(true).     try {         return deployInternal(clusterSpecification, "Flink per-job cluster", getYarnJobClusterEntrypoint(), jobGraph, detached).     } catch (Exception e) {         throw new ClusterDeploymentException("Could not deploy Yarn job cluster.", e).     } }
false;protected;6;12;;@Override protected ClusterClient<ApplicationId> createYarnClusterClient(AbstractYarnClusterDescriptor descriptor, int numberTaskManagers, int slotsPerTaskManager, ApplicationReport report, Configuration flinkConfiguration, boolean perJobCluster) throws Exception {     return new RestClusterClient<>(flinkConfiguration, report.getApplicationId()). }
