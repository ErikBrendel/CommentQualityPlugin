commented;modifiers;parameterAmount;loc;comment;code
true;;1;3;/**  * Checks if a YARN application still has registered containers. If the application master  * registered at the ResourceManager for the first time, this list will be empty. If the  * application master registered a repeated time (after a failure and recovery), this list  * will contain the containers that were previously allocated.  *  * @param response The response object from the registration at the ResourceManager.  * @return A list with containers from previous application attempt.  */ ;/**  * Checks if a YARN application still has registered containers. If the application master  * registered at the ResourceManager for the first time, this list will be empty. If the  * application master registered a repeated time (after a failure and recovery), this list  * will contain the containers that were previously allocated.  *  * @param response The response object from the registration at the ResourceManager.  * @return A list with containers from previous application attempt.  */ List<Container> getContainersFromPreviousAttempts(final RegisterApplicationMasterResponse response) {     return getContainersFromPreviousAttemptsUnsafe(response). }
true;;1;16;/**  * Same as {@link #getContainersFromPreviousAttempts(RegisterApplicationMasterResponse)} but  * allows to pass objects that are not of type {@link RegisterApplicationMasterResponse}.  */ ;/**  * Same as {@link #getContainersFromPreviousAttempts(RegisterApplicationMasterResponse)} but  * allows to pass objects that are not of type {@link RegisterApplicationMasterResponse}.  */ @VisibleForTesting List<Container> getContainersFromPreviousAttemptsUnsafe(final Object response) {     if (method != null && response != null) {         try {             @SuppressWarnings("unchecked")             final List<Container> containers = (List<Container>) method.invoke(response).             if (containers != null && !containers.isEmpty()) {                 return containers.             }         } catch (Exception t) {             logger.error("Error invoking 'getContainersFromPreviousAttempts()'", t).         }     }     return Collections.emptyList(). }
false;;0;4;;@VisibleForTesting Method getMethod() {     return method. }
