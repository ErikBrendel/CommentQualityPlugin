# id;timestamp;commentText;codeText;commentWords;codeWords
Utils -> static void require(boolean condition, String message, Object... values);1487015510;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1495819079;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1498894422;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1498894422;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1499939555;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1502357790;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1506499511;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1510999087;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1515770046;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1519839433;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1521537481;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1521537482;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1521554043;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1524050030;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1525116055;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> static void require(boolean condition, String message, Object... values);1525116069;Validates a condition, throwing a RuntimeException if the condition is violated.__@param condition The condition._@param message The message for the runtime exception, with format variables as defined by_{@link String#format(String, Object...)}._@param values The format arguments.;static void require(boolean condition, String message, Object... values) {_		if (!condition) {_			throw new RuntimeException(String.format(message, values))__		}_	};validates,a,condition,throwing,a,runtime,exception,if,the,condition,is,violated,param,condition,the,condition,param,message,the,message,for,the,runtime,exception,with,format,variables,as,defined,by,link,string,format,string,object,param,values,the,format,arguments;static,void,require,boolean,condition,string,message,object,values,if,condition,throw,new,runtime,exception,string,format,message,values
Utils -> private Utils();1443564120;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1447679882;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1449314233;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1459248706;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1467379351;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1468399420;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1473329065;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1474401809;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1487015510;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1495819079;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1498894422;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1498894422;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1499939555;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1502357790;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1506499511;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1510999087;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1515770046;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1519839433;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1521537481;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1521537482;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1521554043;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1524050030;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1525116055;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> private Utils();1525116069;Private constructor to prevent instantiation.;private Utils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,utils,throw,new,runtime,exception
Utils -> public static Path setupLocalResource( 			FileSystem fs, 			String appId, Path localRsrcPath, 			LocalResource appMasterJar, 			Path homedir) throws IOException;1459248706;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(_			FileSystem fs,_			String appId, Path localRsrcPath,_			LocalResource appMasterJar,_			Path homedir) throws IOException {__		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localRsrcPath + " to " + dst)__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource( 			FileSystem fs, 			String appId, Path localRsrcPath, 			LocalResource appMasterJar, 			Path homedir) throws IOException;1467379351;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(_			FileSystem fs,_			String appId, Path localRsrcPath,_			LocalResource appMasterJar,_			Path homedir) throws IOException {__		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localRsrcPath + " to " + dst)__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource( 			FileSystem fs, 			String appId, Path localRsrcPath, 			LocalResource appMasterJar, 			Path homedir) throws IOException;1468399420;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(_			FileSystem fs,_			String appId, Path localRsrcPath,_			LocalResource appMasterJar,_			Path homedir) throws IOException {__		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localRsrcPath + " to " + dst)__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource( 			FileSystem fs, 			String appId, Path localRsrcPath, 			LocalResource appMasterJar, 			Path homedir) throws IOException;1473329065;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(_			FileSystem fs,_			String appId, Path localRsrcPath,_			LocalResource appMasterJar,_			Path homedir) throws IOException {__		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localRsrcPath + " to " + dst)__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource( 			FileSystem fs, 			String appId, Path localRsrcPath, 			LocalResource appMasterJar, 			Path homedir) throws IOException;1474401809;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(_			FileSystem fs,_			String appId, Path localRsrcPath,_			LocalResource appMasterJar,_			Path homedir) throws IOException {__		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localRsrcPath + " to " + dst)__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource( 			FileSystem fs, 			String appId, Path localRsrcPath, 			LocalResource appMasterJar, 			Path homedir) throws IOException;1487015510;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(_			FileSystem fs,_			String appId, Path localRsrcPath,_			LocalResource appMasterJar,_			Path homedir) throws IOException {__		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localRsrcPath + " to " + dst)__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource( 			FileSystem fs, 			String appId, Path localRsrcPath, 			LocalResource appMasterJar, 			Path homedir) throws IOException;1495819079;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(_			FileSystem fs,_			String appId, Path localRsrcPath,_			LocalResource appMasterJar,_			Path homedir) throws IOException {__		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localRsrcPath + " to " + dst)__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource( 			FileSystem fs, 			String appId, Path localRsrcPath, 			LocalResource appMasterJar, 			Path homedir) throws IOException;1498894422;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(_			FileSystem fs,_			String appId, Path localRsrcPath,_			LocalResource appMasterJar,_			Path homedir) throws IOException {__		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localRsrcPath + " to " + dst)__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource( 			FileSystem fs, 			String appId, Path localRsrcPath, 			LocalResource appMasterJar, 			Path homedir) throws IOException;1498894422;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(_			FileSystem fs,_			String appId, Path localRsrcPath,_			LocalResource appMasterJar,_			Path homedir) throws IOException {__		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localRsrcPath + " to " + dst)__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource( 			FileSystem fs, 			String appId, Path localRsrcPath, 			LocalResource appMasterJar, 			Path homedir) throws IOException;1499939555;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(_			FileSystem fs,_			String appId, Path localRsrcPath,_			LocalResource appMasterJar,_			Path homedir) throws IOException {__		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localRsrcPath + " to " + dst)__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource( 			FileSystem fs, 			String appId, Path localRsrcPath, 			LocalResource appMasterJar, 			Path homedir) throws IOException;1502357790;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(_			FileSystem fs,_			String appId, Path localRsrcPath,_			LocalResource appMasterJar,_			Path homedir) throws IOException {__		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localRsrcPath + " to " + dst)__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource( 			FileSystem fs, 			String appId, Path localRsrcPath, 			LocalResource appMasterJar, 			Path homedir) throws IOException;1506499511;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(_			FileSystem fs,_			String appId, Path localRsrcPath,_			LocalResource appMasterJar,_			Path homedir) throws IOException {__		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localRsrcPath + " to " + dst)__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static int calculateHeapSize(int memory);1422034750;Calculate the heap size for the JVMs to start in the containers._Since JVMs are allocating more than just the heap space, and YARN is very_fast at killing processes that use memory beyond their limit, we have to come_up with a good heapsize._This code takes 85% of the given amount of memory (in MB). If the amount we removed by these 85%_more than 500MB (the current HEAP_LIMIT_CAP), we'll just subtract 500 MB.;public static int calculateHeapSize(int memory) {_		float memoryCutoffRatio = GlobalConfiguration.getFloat(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int heapLimitCap = GlobalConfiguration.getInteger(ConfigConstants.YARN_HEAP_LIMIT_CAP, DEFAULT_HEAP_LIMIT_CAP)___		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if( (memory - heapLimit) > heapLimitCap) {_			heapLimit = memory-heapLimitCap__		}_		return heapLimit__	};calculate,the,heap,size,for,the,jvms,to,start,in,the,containers,since,jvms,are,allocating,more,than,just,the,heap,space,and,yarn,is,very,fast,at,killing,processes,that,use,memory,beyond,their,limit,we,have,to,come,up,with,a,good,heapsize,this,code,takes,85,of,the,given,amount,of,memory,in,mb,if,the,amount,we,removed,by,these,85,more,than,500mb,the,current,we,ll,just,subtract,500,mb;public,static,int,calculate,heap,size,int,memory,float,memory,cutoff,ratio,global,configuration,get,float,config,constants,int,heap,limit,cap,global,configuration,get,integer,config,constants,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,memory,heap,limit,heap,limit,cap,heap,limit,memory,heap,limit,cap,return,heap,limit
Utils -> public static int calculateHeapSize(int memory);1423061851;Calculate the heap size for the JVMs to start in the containers._Since JVMs are allocating more than just the heap space, and YARN is very_fast at killing processes that use memory beyond their limit, we have to come_up with a good heapsize._This code takes 85% of the given amount of memory (in MB). If the amount we removed by these 85%_more than 500MB (the current HEAP_LIMIT_CAP), we'll just subtract 500 MB.;public static int calculateHeapSize(int memory) {_		float memoryCutoffRatio = GlobalConfiguration.getFloat(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int heapLimitCap = GlobalConfiguration.getInteger(ConfigConstants.YARN_HEAP_LIMIT_CAP, DEFAULT_HEAP_LIMIT_CAP)___		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if( (memory - heapLimit) > heapLimitCap) {_			heapLimit = memory-heapLimitCap__		}_		return heapLimit__	};calculate,the,heap,size,for,the,jvms,to,start,in,the,containers,since,jvms,are,allocating,more,than,just,the,heap,space,and,yarn,is,very,fast,at,killing,processes,that,use,memory,beyond,their,limit,we,have,to,come,up,with,a,good,heapsize,this,code,takes,85,of,the,given,amount,of,memory,in,mb,if,the,amount,we,removed,by,these,85,more,than,500mb,the,current,we,ll,just,subtract,500,mb;public,static,int,calculate,heap,size,int,memory,float,memory,cutoff,ratio,global,configuration,get,float,config,constants,int,heap,limit,cap,global,configuration,get,integer,config,constants,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,memory,heap,limit,heap,limit,cap,heap,limit,memory,heap,limit,cap,return,heap,limit
Utils -> public static int calculateHeapSize(int memory);1425404194;Calculate the heap size for the JVMs to start in the containers._Since JVMs are allocating more than just the heap space, and YARN is very_fast at killing processes that use memory beyond their limit, we have to come_up with a good heapsize._This code takes 85% of the given amount of memory (in MB). If the amount we removed by these 85%_more than 500MB (the current HEAP_LIMIT_CAP), we'll just subtract 500 MB.;public static int calculateHeapSize(int memory) {_		float memoryCutoffRatio = GlobalConfiguration.getFloat(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int heapLimitCap = GlobalConfiguration.getInteger(ConfigConstants.YARN_HEAP_LIMIT_CAP, DEFAULT_HEAP_LIMIT_CAP)___		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if( (memory - heapLimit) > heapLimitCap) {_			heapLimit = memory-heapLimitCap__		}_		return heapLimit__	};calculate,the,heap,size,for,the,jvms,to,start,in,the,containers,since,jvms,are,allocating,more,than,just,the,heap,space,and,yarn,is,very,fast,at,killing,processes,that,use,memory,beyond,their,limit,we,have,to,come,up,with,a,good,heapsize,this,code,takes,85,of,the,given,amount,of,memory,in,mb,if,the,amount,we,removed,by,these,85,more,than,500mb,the,current,we,ll,just,subtract,500,mb;public,static,int,calculate,heap,size,int,memory,float,memory,cutoff,ratio,global,configuration,get,float,config,constants,int,heap,limit,cap,global,configuration,get,integer,config,constants,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,memory,heap,limit,heap,limit,cap,heap,limit,memory,heap,limit,cap,return,heap,limit
Utils -> private static LocalResource registerLocalResource( 			Path remoteRsrcPath, 			long resourceSize, 			long resourceModificationTime);1521554043;Creates a YARN resource for the remote object at the given location.__@param remoteRsrcPath	remote location of the resource_@param resourceSize		size of the resource_@param resourceModificationTime last modification time of the resource__@return YARN resource;private static LocalResource registerLocalResource(_			Path remoteRsrcPath,_			long resourceSize,_			long resourceModificationTime) {_		LocalResource localResource = Records.newRecord(LocalResource.class)__		localResource.setResource(ConverterUtils.getYarnUrlFromURI(remoteRsrcPath.toUri()))__		localResource.setSize(resourceSize)__		localResource.setTimestamp(resourceModificationTime)__		localResource.setType(LocalResourceType.FILE)__		localResource.setVisibility(LocalResourceVisibility.APPLICATION)__		return localResource__	};creates,a,yarn,resource,for,the,remote,object,at,the,given,location,param,remote,rsrc,path,remote,location,of,the,resource,param,resource,size,size,of,the,resource,param,resource,modification,time,last,modification,time,of,the,resource,return,yarn,resource;private,static,local,resource,register,local,resource,path,remote,rsrc,path,long,resource,size,long,resource,modification,time,local,resource,local,resource,records,new,record,local,resource,class,local,resource,set,resource,converter,utils,get,yarn,url,from,uri,remote,rsrc,path,to,uri,local,resource,set,size,resource,size,local,resource,set,timestamp,resource,modification,time,local,resource,set,type,local,resource,type,file,local,resource,set,visibility,local,resource,visibility,application,return,local,resource
Utils -> private static LocalResource registerLocalResource( 			Path remoteRsrcPath, 			long resourceSize, 			long resourceModificationTime);1524050030;Creates a YARN resource for the remote object at the given location.__@param remoteRsrcPath	remote location of the resource_@param resourceSize		size of the resource_@param resourceModificationTime last modification time of the resource__@return YARN resource;private static LocalResource registerLocalResource(_			Path remoteRsrcPath,_			long resourceSize,_			long resourceModificationTime) {_		LocalResource localResource = Records.newRecord(LocalResource.class)__		localResource.setResource(ConverterUtils.getYarnUrlFromURI(remoteRsrcPath.toUri()))__		localResource.setSize(resourceSize)__		localResource.setTimestamp(resourceModificationTime)__		localResource.setType(LocalResourceType.FILE)__		localResource.setVisibility(LocalResourceVisibility.APPLICATION)__		return localResource__	};creates,a,yarn,resource,for,the,remote,object,at,the,given,location,param,remote,rsrc,path,remote,location,of,the,resource,param,resource,size,size,of,the,resource,param,resource,modification,time,last,modification,time,of,the,resource,return,yarn,resource;private,static,local,resource,register,local,resource,path,remote,rsrc,path,long,resource,size,long,resource,modification,time,local,resource,local,resource,records,new,record,local,resource,class,local,resource,set,resource,converter,utils,get,yarn,url,from,uri,remote,rsrc,path,to,uri,local,resource,set,size,resource,size,local,resource,set,timestamp,resource,modification,time,local,resource,set,type,local,resource,type,file,local,resource,set,visibility,local,resource,visibility,application,return,local,resource
Utils -> private static LocalResource registerLocalResource( 			Path remoteRsrcPath, 			long resourceSize, 			long resourceModificationTime);1525116055;Creates a YARN resource for the remote object at the given location.__@param remoteRsrcPath	remote location of the resource_@param resourceSize		size of the resource_@param resourceModificationTime last modification time of the resource__@return YARN resource;private static LocalResource registerLocalResource(_			Path remoteRsrcPath,_			long resourceSize,_			long resourceModificationTime) {_		LocalResource localResource = Records.newRecord(LocalResource.class)__		localResource.setResource(ConverterUtils.getYarnUrlFromURI(remoteRsrcPath.toUri()))__		localResource.setSize(resourceSize)__		localResource.setTimestamp(resourceModificationTime)__		localResource.setType(LocalResourceType.FILE)__		localResource.setVisibility(LocalResourceVisibility.APPLICATION)__		return localResource__	};creates,a,yarn,resource,for,the,remote,object,at,the,given,location,param,remote,rsrc,path,remote,location,of,the,resource,param,resource,size,size,of,the,resource,param,resource,modification,time,last,modification,time,of,the,resource,return,yarn,resource;private,static,local,resource,register,local,resource,path,remote,rsrc,path,long,resource,size,long,resource,modification,time,local,resource,local,resource,records,new,record,local,resource,class,local,resource,set,resource,converter,utils,get,yarn,url,from,uri,remote,rsrc,path,to,uri,local,resource,set,size,resource,size,local,resource,set,timestamp,resource,modification,time,local,resource,set,type,local,resource,type,file,local,resource,set,visibility,local,resource,visibility,application,return,local,resource
Utils -> private static LocalResource registerLocalResource( 			Path remoteRsrcPath, 			long resourceSize, 			long resourceModificationTime);1525116069;Creates a YARN resource for the remote object at the given location.__@param remoteRsrcPath	remote location of the resource_@param resourceSize		size of the resource_@param resourceModificationTime last modification time of the resource__@return YARN resource;private static LocalResource registerLocalResource(_			Path remoteRsrcPath,_			long resourceSize,_			long resourceModificationTime) {_		LocalResource localResource = Records.newRecord(LocalResource.class)__		localResource.setResource(ConverterUtils.getYarnUrlFromURI(remoteRsrcPath.toUri()))__		localResource.setSize(resourceSize)__		localResource.setTimestamp(resourceModificationTime)__		localResource.setType(LocalResourceType.FILE)__		localResource.setVisibility(LocalResourceVisibility.APPLICATION)__		return localResource__	};creates,a,yarn,resource,for,the,remote,object,at,the,given,location,param,remote,rsrc,path,remote,location,of,the,resource,param,resource,size,size,of,the,resource,param,resource,modification,time,last,modification,time,of,the,resource,return,yarn,resource;private,static,local,resource,register,local,resource,path,remote,rsrc,path,long,resource,size,long,resource,modification,time,local,resource,local,resource,records,new,record,local,resource,class,local,resource,set,resource,converter,utils,get,yarn,url,from,uri,remote,rsrc,path,to,uri,local,resource,set,size,resource,size,local,resource,set,timestamp,resource,modification,time,local,resource,set,type,local,resource,type,file,local,resource,set,visibility,local,resource,visibility,application,return,local,resource
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1449314233;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for(Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if(entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1459248706;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for(Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if(entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1467379351;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for(Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if(entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1468399420;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for(Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if(entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1473329065;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for(Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if(entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1474401809;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for(Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if(entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1487015510;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for(Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if(entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1495819079;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1498894422;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1498894422;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1499939555;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1502357790;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1506499511;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1510999087;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1515770046;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1519839433;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1521537481;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1521537482;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1521554043;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1524050030;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1525116055;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration);1525116069;Method to extract environment variables from the flinkConfiguration based on the given prefix String.__@param envPrefix Prefix for the environment variables key_@param flinkConfiguration The Flink config to get the environment variable defintion from;public static Map<String, String> getEnvironmentVariables(String envPrefix, org.apache.flink.configuration.Configuration flinkConfiguration) {_		Map<String, String> result  = new HashMap<>()__		for (Map.Entry<String, String> entry: flinkConfiguration.toMap().entrySet()) {_			if (entry.getKey().startsWith(envPrefix) && entry.getKey().length() > envPrefix.length()) {_				_				String key = entry.getKey().substring(envPrefix.length())__				result.put(key, entry.getValue())__			}_		}_		return result__	};method,to,extract,environment,variables,from,the,flink,configuration,based,on,the,given,prefix,string,param,env,prefix,prefix,for,the,environment,variables,key,param,flink,configuration,the,flink,config,to,get,the,environment,variable,defintion,from;public,static,map,string,string,get,environment,variables,string,env,prefix,org,apache,flink,configuration,configuration,flink,configuration,map,string,string,result,new,hash,map,for,map,entry,string,string,entry,flink,configuration,to,map,entry,set,if,entry,get,key,starts,with,env,prefix,entry,get,key,length,env,prefix,length,string,key,entry,get,key,substring,env,prefix,length,result,put,key,entry,get,value,return,result
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1422034750;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1423061851;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1425404194;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1427784999;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1430233764;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1439412404;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1443564120;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1447679882;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1449314233;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1459248706;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1467379351;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1468399420;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1473329065;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1474401809;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1487015510;Copied method from org.apache.hadoop.yarn.util.Apps_It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1495819079;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1498894422;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1498894422;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1499939555;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1502357790;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1506499511;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1510999087;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1515770046;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1519839433;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1521537481;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1521537482;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1521554043;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1524050030;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1525116055;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> public static void addToEnvironment(Map<String, String> environment, 			String variable, String value);1525116069;Copied method from org.apache.hadoop.yarn.util.Apps._It was broken by YARN-1824 (2.4.0) and fixed for 2.4.1_by https://issues.apache.org/jira/browse/YARN-1931;public static void addToEnvironment(Map<String, String> environment,_			String variable, String value) {_		String val = environment.get(variable)__		if (val == null) {_			val = value__		} else {_			val = val + File.pathSeparator + value__		}_		environment.put(StringInterner.weakIntern(variable),_				StringInterner.weakIntern(val))__	};copied,method,from,org,apache,hadoop,yarn,util,apps,it,was,broken,by,yarn,1824,2,4,0,and,fixed,for,2,4,1,by,https,issues,apache,org,jira,browse,yarn,1931;public,static,void,add,to,environment,map,string,string,environment,string,variable,string,value,string,val,environment,get,variable,if,val,null,val,value,else,val,val,file,path,separator,value,environment,put,string,interner,weak,intern,variable,string,interner,weak,intern,val
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1447679882;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class )_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch ( ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1449314233;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class )_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch ( ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1459248706;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class )_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch ( ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1467379351;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class )_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch ( ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1468399420;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class )_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch ( ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1473329065;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class )_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch ( ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1474401809;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class )_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch ( ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1487015510;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class )_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch ( ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1495819079;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1498894422;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1498894422;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1499939555;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1502357790;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1506499511;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1510999087;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1515770046;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1519839433;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1521537481;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1521537482;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1521554043;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1524050030;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1525116055;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException;1525116069;Obtain Kerberos security token for HBase.;private static void obtainTokenForHBase(Credentials credentials, Configuration conf) throws IOException {_		if (UserGroupInformation.isSecurityEnabled()) {_			LOG.info("Attempting to obtain Kerberos security token for HBase")__			try {_				_				_				Class_						.forName("org.apache.hadoop.hbase.HBaseConfiguration")_						.getMethod("addHbaseResources", Configuration.class)_						.invoke(null, conf)__				__				LOG.info("HBase security setting: {}", conf.get("hbase.security.authentication"))___				if (!"kerberos".equals(conf.get("hbase.security.authentication"))) {_					LOG.info("HBase has not been configured to use Kerberos.")__					return__				}__				LOG.info("Obtaining Kerberos security token for HBase")__				_				_				Token<?> token = (Token<?>) Class_						.forName("org.apache.hadoop.hbase.security.token.TokenUtil")_						.getMethod("obtainToken", Configuration.class)_						.invoke(null, conf)__				__				if (token == null) {_					LOG.error("No Kerberos security token for HBase available")__					return__				}__				credentials.addToken(token.getService(), token)__				LOG.info("Added HBase Kerberos security token to credentials.")__			} catch (ClassNotFoundException_					| NoSuchMethodException_					| IllegalAccessException_					| InvocationTargetException e) {_				LOG.info("HBase is not available (not packaged with this application): {} : \"{}\".",_						e.getClass().getSimpleName(), e.getMessage())__			}_		}_	};obtain,kerberos,security,token,for,hbase;private,static,void,obtain,token,for,hbase,credentials,credentials,configuration,conf,throws,ioexception,if,user,group,information,is,security,enabled,log,info,attempting,to,obtain,kerberos,security,token,for,hbase,try,class,for,name,org,apache,hadoop,hbase,hbase,configuration,get,method,add,hbase,resources,configuration,class,invoke,null,conf,log,info,hbase,security,setting,conf,get,hbase,security,authentication,if,kerberos,equals,conf,get,hbase,security,authentication,log,info,hbase,has,not,been,configured,to,use,kerberos,return,log,info,obtaining,kerberos,security,token,for,hbase,token,token,token,class,for,name,org,apache,hadoop,hbase,security,token,token,util,get,method,obtain,token,configuration,class,invoke,null,conf,if,token,null,log,error,no,kerberos,security,token,for,hbase,available,return,credentials,add,token,token,get,service,token,log,info,added,hbase,kerberos,security,token,to,credentials,catch,class,not,found,exception,no,such,method,exception,illegal,access,exception,invocation,target,exception,e,log,info,hbase,is,not,available,not,packaged,with,this,application,e,get,class,get,simple,name,e,get,message
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1487015510;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if teh launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		log.info("TM:remote keytab path obtained {}", remoteKeytabPath)___		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		log.info("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)___		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		log.info("TM:remote yarn conf path obtained {}", remoteYarnConfPath)___		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)__		log.info("TM:remote krb5 path obtained {}", remoteKrb5Path)___		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if(remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			keytabResource = Records.newRecord(LocalResource.class)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, keytabPath, keytabResource)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if(remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			yarnConfResource = Records.newRecord(LocalResource.class)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, yarnConfPath, yarnConfResource)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			krb5ConfResource = Records.newRecord(LocalResource.class)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, krb5ConfPath, krb5ConfResource)___			hasKrb5 = true__		}__		_		LocalResource flinkJar = Records.newRecord(LocalResource.class)__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, remoteJarPath, flinkJar)__		}__		_		LocalResource flinkConf = Records.newRecord(LocalResource.class)__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			Path homeDirPath = new Path(clientHomeDir)__			FileSystem fs = homeDirPath.getFileSystem(yarnConfig)__			setupLocalResource(fs, appId,_					new Path(taskManagerConfigFile.toURI()), flinkConf, new Path(clientHomeDir))___			log.info("Prepared local resource for modified yaml: {}", flinkConf)__		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if(yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if(keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				LocalResource resource = Records.newRecord(LocalResource.class)__				Path path = new Path(pathStr)__				registerLocalResource(path.getFileSystem(yarnConfig), path, resource)__				taskManagerLocalResources.put(path.getName(), resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		log.info("Starting TaskManagers with command: " + launchCommand)___		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if(remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		try (DataOutputBuffer dob = new DataOutputBuffer()) {_			log.debug("Adding security tokens to Task Executor Container launch Context....")__			UserGroupInformation user = UserGroupInformation.getCurrentUser()__			Credentials credentials = user.getCredentials()__			credentials.writeTokenStorageToStream(dob)__			ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__			ctx.setTokens(securityTokens)__		}_		catch (Throwable t) {_			log.error("Getting current user info failed when trying to launch the container", t)__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,teh,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,log,info,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,final,string,remote,krb5path,env,get,yarn,config,keys,log,info,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,keytab,resource,records,new,record,local,resource,class,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,register,local,resource,fs,keytab,path,keytab,resource,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,yarn,conf,resource,records,new,record,local,resource,class,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,register,local,resource,fs,yarn,conf,path,yarn,conf,resource,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,krb5conf,resource,records,new,record,local,resource,class,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,register,local,resource,fs,krb5conf,path,krb5conf,resource,has,krb5,true,local,resource,flink,jar,records,new,record,local,resource,class,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,register,local,resource,fs,remote,jar,path,flink,jar,local,resource,flink,conf,records,new,record,local,resource,class,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,flink,conf,new,path,client,home,dir,log,info,prepared,local,resource,for,modified,yaml,flink,conf,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,local,resource,resource,records,new,record,local,resource,class,path,path,new,path,path,str,register,local,resource,path,get,file,system,yarn,config,path,resource,task,manager,local,resources,put,path,get,name,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,log,info,starting,task,managers,with,command,launch,command,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,try,data,output,buffer,dob,new,data,output,buffer,log,debug,adding,security,tokens,to,task,executor,container,launch,context,user,group,information,user,user,group,information,get,current,user,credentials,credentials,user,get,credentials,credentials,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,getting,current,user,info,failed,when,trying,to,launch,the,container,t,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1495819079;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if teh launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		log.info("TM:remote keytab path obtained {}", remoteKeytabPath)___		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		log.info("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)___		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		log.info("TM:remote yarn conf path obtained {}", remoteYarnConfPath)___		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)__		log.info("TM:remote krb5 path obtained {}", remoteKrb5Path)___		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			keytabResource = Records.newRecord(LocalResource.class)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, keytabPath, keytabResource)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			yarnConfResource = Records.newRecord(LocalResource.class)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, yarnConfPath, yarnConfResource)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			krb5ConfResource = Records.newRecord(LocalResource.class)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, krb5ConfPath, krb5ConfResource)___			hasKrb5 = true__		}__		_		LocalResource flinkJar = Records.newRecord(LocalResource.class)__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, remoteJarPath, flinkJar)__		}__		_		LocalResource flinkConf = Records.newRecord(LocalResource.class)__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			Path homeDirPath = new Path(clientHomeDir)__			FileSystem fs = homeDirPath.getFileSystem(yarnConfig)__			setupLocalResource(fs, appId,_					new Path(taskManagerConfigFile.toURI()), flinkConf, new Path(clientHomeDir))___			log.info("Prepared local resource for modified yaml: {}", flinkConf)__		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				LocalResource resource = Records.newRecord(LocalResource.class)__				Path path = new Path(pathStr)__				registerLocalResource(path.getFileSystem(yarnConfig), path, resource)__				taskManagerLocalResources.put(path.getName(), resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		log.info("Starting TaskManagers with command: " + launchCommand)___		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		try (DataOutputBuffer dob = new DataOutputBuffer()) {_			log.debug("Adding security tokens to Task Executor Container launch Context....")__			UserGroupInformation user = UserGroupInformation.getCurrentUser()__			Credentials credentials = user.getCredentials()__			credentials.writeTokenStorageToStream(dob)__			ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__			ctx.setTokens(securityTokens)__		}_		catch (Throwable t) {_			log.error("Getting current user info failed when trying to launch the container", t)__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,teh,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,log,info,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,final,string,remote,krb5path,env,get,yarn,config,keys,log,info,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,keytab,resource,records,new,record,local,resource,class,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,register,local,resource,fs,keytab,path,keytab,resource,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,yarn,conf,resource,records,new,record,local,resource,class,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,register,local,resource,fs,yarn,conf,path,yarn,conf,resource,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,krb5conf,resource,records,new,record,local,resource,class,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,register,local,resource,fs,krb5conf,path,krb5conf,resource,has,krb5,true,local,resource,flink,jar,records,new,record,local,resource,class,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,register,local,resource,fs,remote,jar,path,flink,jar,local,resource,flink,conf,records,new,record,local,resource,class,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,flink,conf,new,path,client,home,dir,log,info,prepared,local,resource,for,modified,yaml,flink,conf,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,local,resource,resource,records,new,record,local,resource,class,path,path,new,path,path,str,register,local,resource,path,get,file,system,yarn,config,path,resource,task,manager,local,resources,put,path,get,name,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,log,info,starting,task,managers,with,command,launch,command,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,try,data,output,buffer,dob,new,data,output,buffer,log,debug,adding,security,tokens,to,task,executor,container,launch,context,user,group,information,user,user,group,information,get,current,user,credentials,credentials,user,get,credentials,credentials,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,getting,current,user,info,failed,when,trying,to,launch,the,container,t,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1498894422;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if teh launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		log.info("TM:remote keytab path obtained {}", remoteKeytabPath)___		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		log.info("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)___		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		log.info("TM:remote yarn conf path obtained {}", remoteYarnConfPath)___		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)__		log.info("TM:remote krb5 path obtained {}", remoteKrb5Path)___		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			keytabResource = Records.newRecord(LocalResource.class)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, keytabPath, keytabResource)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			yarnConfResource = Records.newRecord(LocalResource.class)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, yarnConfPath, yarnConfResource)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			krb5ConfResource = Records.newRecord(LocalResource.class)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, krb5ConfPath, krb5ConfResource)___			hasKrb5 = true__		}__		_		LocalResource flinkJar = Records.newRecord(LocalResource.class)__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, remoteJarPath, flinkJar)__		}__		_		LocalResource flinkConf = Records.newRecord(LocalResource.class)__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			Path homeDirPath = new Path(clientHomeDir)__			FileSystem fs = homeDirPath.getFileSystem(yarnConfig)__			setupLocalResource(fs, appId,_					new Path(taskManagerConfigFile.toURI()), flinkConf, new Path(clientHomeDir))___			log.info("Prepared local resource for modified yaml: {}", flinkConf)__		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				LocalResource resource = Records.newRecord(LocalResource.class)__				Path path = new Path(pathStr)__				registerLocalResource(path.getFileSystem(yarnConfig), path, resource)__				taskManagerLocalResources.put(path.getName(), resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		log.info("Starting TaskManagers with command: " + launchCommand)___		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		try (DataOutputBuffer dob = new DataOutputBuffer()) {_			log.debug("Adding security tokens to Task Executor Container launch Context....")__			_			String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)__			Method readTokenStorageFileMethod = Credentials.class.getMethod("readTokenStorageFile",_				File.class, org.apache.hadoop.conf.Configuration.class)__			Credentials cred = (Credentials) readTokenStorageFileMethod.invoke(null, new File(fileLocation),_				new SecurityUtils.SecurityConfiguration(flinkConfig).getHadoopConfiguration())__			cred.writeTokenStorageToStream(dob)__			ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__			ctx.setTokens(securityTokens)__		}_		catch (Throwable t) {_			log.error("Getting current user info failed when trying to launch the container", t)__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,teh,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,log,info,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,final,string,remote,krb5path,env,get,yarn,config,keys,log,info,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,keytab,resource,records,new,record,local,resource,class,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,register,local,resource,fs,keytab,path,keytab,resource,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,yarn,conf,resource,records,new,record,local,resource,class,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,register,local,resource,fs,yarn,conf,path,yarn,conf,resource,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,krb5conf,resource,records,new,record,local,resource,class,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,register,local,resource,fs,krb5conf,path,krb5conf,resource,has,krb5,true,local,resource,flink,jar,records,new,record,local,resource,class,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,register,local,resource,fs,remote,jar,path,flink,jar,local,resource,flink,conf,records,new,record,local,resource,class,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,flink,conf,new,path,client,home,dir,log,info,prepared,local,resource,for,modified,yaml,flink,conf,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,local,resource,resource,records,new,record,local,resource,class,path,path,new,path,path,str,register,local,resource,path,get,file,system,yarn,config,path,resource,task,manager,local,resources,put,path,get,name,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,log,info,starting,task,managers,with,command,launch,command,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,try,data,output,buffer,dob,new,data,output,buffer,log,debug,adding,security,tokens,to,task,executor,container,launch,context,string,file,location,system,getenv,user,group,information,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,new,security,utils,security,configuration,flink,config,get,hadoop,configuration,cred,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,getting,current,user,info,failed,when,trying,to,launch,the,container,t,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1498894422;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if teh launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		log.info("TM:remote keytab path obtained {}", remoteKeytabPath)___		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		log.info("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)___		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		log.info("TM:remote yarn conf path obtained {}", remoteYarnConfPath)___		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)__		log.info("TM:remote krb5 path obtained {}", remoteKrb5Path)___		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			keytabResource = Records.newRecord(LocalResource.class)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, keytabPath, keytabResource)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			yarnConfResource = Records.newRecord(LocalResource.class)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, yarnConfPath, yarnConfResource)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			krb5ConfResource = Records.newRecord(LocalResource.class)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, krb5ConfPath, krb5ConfResource)___			hasKrb5 = true__		}__		_		LocalResource flinkJar = Records.newRecord(LocalResource.class)__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, remoteJarPath, flinkJar)__		}__		_		LocalResource flinkConf = Records.newRecord(LocalResource.class)__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			Path homeDirPath = new Path(clientHomeDir)__			FileSystem fs = homeDirPath.getFileSystem(yarnConfig)__			setupLocalResource(fs, appId,_					new Path(taskManagerConfigFile.toURI()), flinkConf, new Path(clientHomeDir))___			log.info("Prepared local resource for modified yaml: {}", flinkConf)__		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				LocalResource resource = Records.newRecord(LocalResource.class)__				Path path = new Path(pathStr)__				registerLocalResource(path.getFileSystem(yarnConfig), path, resource)__				taskManagerLocalResources.put(path.getName(), resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		log.info("Starting TaskManagers with command: " + launchCommand)___		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		try (DataOutputBuffer dob = new DataOutputBuffer()) {_			log.debug("Adding security tokens to Task Executor Container launch Context....")___			_			_			_			String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)__			Method readTokenStorageFileMethod = Credentials.class.getMethod(_				"readTokenStorageFile", File.class, org.apache.hadoop.conf.Configuration.class)__			Credentials cred = (Credentials) readTokenStorageFileMethod.invoke(null, new File(fileLocation),_				new SecurityUtils.SecurityConfiguration(flinkConfig).getHadoopConfiguration())__			cred.writeTokenStorageToStream(dob)__			ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__			ctx.setTokens(securityTokens)__		}_		catch (Throwable t) {_			log.error("Getting current user info failed when trying to launch the container", t)__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,teh,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,log,info,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,final,string,remote,krb5path,env,get,yarn,config,keys,log,info,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,keytab,resource,records,new,record,local,resource,class,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,register,local,resource,fs,keytab,path,keytab,resource,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,yarn,conf,resource,records,new,record,local,resource,class,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,register,local,resource,fs,yarn,conf,path,yarn,conf,resource,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,krb5conf,resource,records,new,record,local,resource,class,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,register,local,resource,fs,krb5conf,path,krb5conf,resource,has,krb5,true,local,resource,flink,jar,records,new,record,local,resource,class,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,register,local,resource,fs,remote,jar,path,flink,jar,local,resource,flink,conf,records,new,record,local,resource,class,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,flink,conf,new,path,client,home,dir,log,info,prepared,local,resource,for,modified,yaml,flink,conf,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,local,resource,resource,records,new,record,local,resource,class,path,path,new,path,path,str,register,local,resource,path,get,file,system,yarn,config,path,resource,task,manager,local,resources,put,path,get,name,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,log,info,starting,task,managers,with,command,launch,command,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,try,data,output,buffer,dob,new,data,output,buffer,log,debug,adding,security,tokens,to,task,executor,container,launch,context,string,file,location,system,getenv,user,group,information,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,new,security,utils,security,configuration,flink,config,get,hadoop,configuration,cred,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,getting,current,user,info,failed,when,trying,to,launch,the,container,t,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1499939555;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if teh launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		log.info("TM:remote keytab path obtained {}", remoteKeytabPath)___		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		log.info("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)___		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		log.info("TM:remote yarn conf path obtained {}", remoteYarnConfPath)___		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)__		log.info("TM:remote krb5 path obtained {}", remoteKrb5Path)___		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			keytabResource = Records.newRecord(LocalResource.class)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, keytabPath, keytabResource)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			yarnConfResource = Records.newRecord(LocalResource.class)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, yarnConfPath, yarnConfResource)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			krb5ConfResource = Records.newRecord(LocalResource.class)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, krb5ConfPath, krb5ConfResource)___			hasKrb5 = true__		}__		_		LocalResource flinkJar = Records.newRecord(LocalResource.class)__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, remoteJarPath, flinkJar)__		}__		_		LocalResource flinkConf = Records.newRecord(LocalResource.class)__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			Path homeDirPath = new Path(clientHomeDir)__			FileSystem fs = homeDirPath.getFileSystem(yarnConfig)__			setupLocalResource(fs, appId,_					new Path(taskManagerConfigFile.toURI()), flinkConf, new Path(clientHomeDir))___			log.info("Prepared local resource for modified yaml: {}", flinkConf)__		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				LocalResource resource = Records.newRecord(LocalResource.class)__				Path path = new Path(pathStr)__				registerLocalResource(path.getFileSystem(yarnConfig), path, resource)__				taskManagerLocalResources.put(path.getName(), resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		log.info("Starting TaskManagers with command: " + launchCommand)___		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		try (DataOutputBuffer dob = new DataOutputBuffer()) {_			log.debug("Adding security tokens to Task Executor Container launch Context....")___			_			_			_			String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)__			Method readTokenStorageFileMethod = Credentials.class.getMethod(_				"readTokenStorageFile", File.class, org.apache.hadoop.conf.Configuration.class)__			Credentials cred = (Credentials) readTokenStorageFileMethod.invoke(null, new File(fileLocation),_				new SecurityUtils.SecurityConfiguration(flinkConfig).getHadoopConfiguration())__			cred.writeTokenStorageToStream(dob)__			ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__			ctx.setTokens(securityTokens)__		}_		catch (Throwable t) {_			log.error("Getting current user info failed when trying to launch the container", t)__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,teh,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,log,info,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,final,string,remote,krb5path,env,get,yarn,config,keys,log,info,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,keytab,resource,records,new,record,local,resource,class,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,register,local,resource,fs,keytab,path,keytab,resource,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,yarn,conf,resource,records,new,record,local,resource,class,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,register,local,resource,fs,yarn,conf,path,yarn,conf,resource,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,krb5conf,resource,records,new,record,local,resource,class,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,register,local,resource,fs,krb5conf,path,krb5conf,resource,has,krb5,true,local,resource,flink,jar,records,new,record,local,resource,class,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,register,local,resource,fs,remote,jar,path,flink,jar,local,resource,flink,conf,records,new,record,local,resource,class,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,flink,conf,new,path,client,home,dir,log,info,prepared,local,resource,for,modified,yaml,flink,conf,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,local,resource,resource,records,new,record,local,resource,class,path,path,new,path,path,str,register,local,resource,path,get,file,system,yarn,config,path,resource,task,manager,local,resources,put,path,get,name,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,log,info,starting,task,managers,with,command,launch,command,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,try,data,output,buffer,dob,new,data,output,buffer,log,debug,adding,security,tokens,to,task,executor,container,launch,context,string,file,location,system,getenv,user,group,information,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,new,security,utils,security,configuration,flink,config,get,hadoop,configuration,cred,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,getting,current,user,info,failed,when,trying,to,launch,the,container,t,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1502357790;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if teh launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		log.info("TM:remote keytab path obtained {}", remoteKeytabPath)___		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		log.info("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)___		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		log.info("TM:remote yarn conf path obtained {}", remoteYarnConfPath)___		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)__		log.info("TM:remote krb5 path obtained {}", remoteKrb5Path)___		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			keytabResource = Records.newRecord(LocalResource.class)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, keytabPath, keytabResource)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			yarnConfResource = Records.newRecord(LocalResource.class)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, yarnConfPath, yarnConfResource)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			krb5ConfResource = Records.newRecord(LocalResource.class)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, krb5ConfPath, krb5ConfResource)___			hasKrb5 = true__		}__		_		LocalResource flinkJar = Records.newRecord(LocalResource.class)__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, remoteJarPath, flinkJar)__		}__		_		LocalResource flinkConf = Records.newRecord(LocalResource.class)__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			Path homeDirPath = new Path(clientHomeDir)__			FileSystem fs = homeDirPath.getFileSystem(yarnConfig)__			setupLocalResource(fs, appId,_					new Path(taskManagerConfigFile.toURI()), flinkConf, new Path(clientHomeDir))___			log.info("Prepared local resource for modified yaml: {}", flinkConf)__		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				LocalResource resource = Records.newRecord(LocalResource.class)__				Path path = new Path(pathStr)__				registerLocalResource(path.getFileSystem(yarnConfig), path, resource)__				taskManagerLocalResources.put(path.getName(), resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		log.info("Starting TaskManagers with command: " + launchCommand)___		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		try (DataOutputBuffer dob = new DataOutputBuffer()) {_			log.debug("Adding security tokens to Task Executor Container launch Context....")___			_			_			_			String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)__			Method readTokenStorageFileMethod = Credentials.class.getMethod(_				"readTokenStorageFile", File.class, org.apache.hadoop.conf.Configuration.class)__			Credentials cred = (Credentials) readTokenStorageFileMethod.invoke(null, new File(fileLocation),_				new SecurityUtils.SecurityConfiguration(flinkConfig).getHadoopConfiguration())__			cred.writeTokenStorageToStream(dob)__			ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__			ctx.setTokens(securityTokens)__		}_		catch (Throwable t) {_			log.error("Getting current user info failed when trying to launch the container", t)__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,teh,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,log,info,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,final,string,remote,krb5path,env,get,yarn,config,keys,log,info,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,keytab,resource,records,new,record,local,resource,class,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,register,local,resource,fs,keytab,path,keytab,resource,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,yarn,conf,resource,records,new,record,local,resource,class,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,register,local,resource,fs,yarn,conf,path,yarn,conf,resource,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,krb5conf,resource,records,new,record,local,resource,class,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,register,local,resource,fs,krb5conf,path,krb5conf,resource,has,krb5,true,local,resource,flink,jar,records,new,record,local,resource,class,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,register,local,resource,fs,remote,jar,path,flink,jar,local,resource,flink,conf,records,new,record,local,resource,class,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,flink,conf,new,path,client,home,dir,log,info,prepared,local,resource,for,modified,yaml,flink,conf,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,local,resource,resource,records,new,record,local,resource,class,path,path,new,path,path,str,register,local,resource,path,get,file,system,yarn,config,path,resource,task,manager,local,resources,put,path,get,name,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,log,info,starting,task,managers,with,command,launch,command,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,try,data,output,buffer,dob,new,data,output,buffer,log,debug,adding,security,tokens,to,task,executor,container,launch,context,string,file,location,system,getenv,user,group,information,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,new,security,utils,security,configuration,flink,config,get,hadoop,configuration,cred,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,getting,current,user,info,failed,when,trying,to,launch,the,container,t,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1506499511;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if teh launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		log.info("TM:remote keytab path obtained {}", remoteKeytabPath)___		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		log.info("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)___		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		log.info("TM:remote yarn conf path obtained {}", remoteYarnConfPath)___		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)__		log.info("TM:remote krb5 path obtained {}", remoteKrb5Path)___		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			keytabResource = Records.newRecord(LocalResource.class)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, keytabPath, keytabResource)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			yarnConfResource = Records.newRecord(LocalResource.class)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, yarnConfPath, yarnConfResource)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			krb5ConfResource = Records.newRecord(LocalResource.class)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, krb5ConfPath, krb5ConfResource)___			hasKrb5 = true__		}__		_		LocalResource flinkJar = Records.newRecord(LocalResource.class)__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			registerLocalResource(fs, remoteJarPath, flinkJar)__		}__		_		LocalResource flinkConf = Records.newRecord(LocalResource.class)__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			Path homeDirPath = new Path(clientHomeDir)__			FileSystem fs = homeDirPath.getFileSystem(yarnConfig)__			setupLocalResource(fs, appId,_					new Path(taskManagerConfigFile.toURI()), flinkConf, new Path(clientHomeDir))___			log.info("Prepared local resource for modified yaml: {}", flinkConf)__		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				LocalResource resource = Records.newRecord(LocalResource.class)__				Path path = new Path(pathStr)__				registerLocalResource(path.getFileSystem(yarnConfig), path, resource)__				taskManagerLocalResources.put(path.getName(), resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		log.info("Starting TaskManagers with command: " + launchCommand)___		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		try (DataOutputBuffer dob = new DataOutputBuffer()) {_			log.debug("Adding security tokens to Task Executor Container launch Context....")___			_			_			_			String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)__			Method readTokenStorageFileMethod = Credentials.class.getMethod(_				"readTokenStorageFile", File.class, org.apache.hadoop.conf.Configuration.class)___			Credentials cred =_				(Credentials) readTokenStorageFileMethod.invoke(_					null,_					new File(fileLocation),_					HadoopUtils.getHadoopConfiguration(flinkConfig))___			cred.writeTokenStorageToStream(dob)__			ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__			ctx.setTokens(securityTokens)__		}_		catch (Throwable t) {_			log.error("Getting current user info failed when trying to launch the container", t)__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,teh,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,log,info,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,final,string,remote,krb5path,env,get,yarn,config,keys,log,info,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,keytab,resource,records,new,record,local,resource,class,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,register,local,resource,fs,keytab,path,keytab,resource,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,yarn,conf,resource,records,new,record,local,resource,class,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,register,local,resource,fs,yarn,conf,path,yarn,conf,resource,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,krb5conf,resource,records,new,record,local,resource,class,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,register,local,resource,fs,krb5conf,path,krb5conf,resource,has,krb5,true,local,resource,flink,jar,records,new,record,local,resource,class,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,register,local,resource,fs,remote,jar,path,flink,jar,local,resource,flink,conf,records,new,record,local,resource,class,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,flink,conf,new,path,client,home,dir,log,info,prepared,local,resource,for,modified,yaml,flink,conf,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,local,resource,resource,records,new,record,local,resource,class,path,path,new,path,path,str,register,local,resource,path,get,file,system,yarn,config,path,resource,task,manager,local,resources,put,path,get,name,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,log,info,starting,task,managers,with,command,launch,command,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,try,data,output,buffer,dob,new,data,output,buffer,log,debug,adding,security,tokens,to,task,executor,container,launch,context,string,file,location,system,getenv,user,group,information,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,hadoop,utils,get,hadoop,configuration,flink,config,cred,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,getting,current,user,info,failed,when,trying,to,launch,the,container,t,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1510999087;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if teh launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		log.info("TM:remote keytab path obtained {}", remoteKeytabPath)___		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		log.info("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)___		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		log.info("TM:remote yarn conf path obtained {}", remoteYarnConfPath)___		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)__		log.info("TM:remote krb5 path obtained {}", remoteKrb5Path)___		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			keytabResource = registerLocalResource(fs, keytabPath)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			yarnConfResource = registerLocalResource(fs, yarnConfPath)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			krb5ConfResource = registerLocalResource(fs, krb5ConfPath)___			hasKrb5 = true__		}__		_		final LocalResource flinkJar__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			flinkJar = registerLocalResource(fs, remoteJarPath)__		}__		_		final LocalResource flinkConf__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			Path homeDirPath = new Path(clientHomeDir)__			FileSystem fs = homeDirPath.getFileSystem(yarnConfig)___			flinkConf = setupLocalResource(_				fs,_				appId,_				new Path(taskManagerConfigFile.toURI()),_				homeDirPath,_				"").f1___			log.info("Prepared local resource for modified yaml: {}", flinkConf)__		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				String[] keyAndPath = pathStr.split("=")__				require(keyAndPath.length == 2, "Invalid entry in ship file list: %s", pathStr)__				Path path = new Path(keyAndPath[1])__				LocalResource resource = registerLocalResource(path.getFileSystem(yarnConfig), path)__				taskManagerLocalResources.put(keyAndPath[0], resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		log.info("Starting TaskManagers with command: " + launchCommand)___		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		try (DataOutputBuffer dob = new DataOutputBuffer()) {_			log.debug("Adding security tokens to Task Executor Container launch Context....")___			_			_			_			String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)__			Method readTokenStorageFileMethod = Credentials.class.getMethod(_				"readTokenStorageFile", File.class, org.apache.hadoop.conf.Configuration.class)___			Credentials cred =_				(Credentials) readTokenStorageFileMethod.invoke(_					null,_					new File(fileLocation),_					HadoopUtils.getHadoopConfiguration(flinkConfig))___			cred.writeTokenStorageToStream(dob)__			ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__			ctx.setTokens(securityTokens)__		}_		catch (Throwable t) {_			log.error("Getting current user info failed when trying to launch the container", t)__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,teh,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,log,info,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,final,string,remote,krb5path,env,get,yarn,config,keys,log,info,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,keytab,resource,register,local,resource,fs,keytab,path,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,yarn,conf,resource,register,local,resource,fs,yarn,conf,path,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,krb5conf,resource,register,local,resource,fs,krb5conf,path,has,krb5,true,final,local,resource,flink,jar,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,flink,jar,register,local,resource,fs,remote,jar,path,final,local,resource,flink,conf,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,flink,conf,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,home,dir,path,f1,log,info,prepared,local,resource,for,modified,yaml,flink,conf,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,string,key,and,path,path,str,split,require,key,and,path,length,2,invalid,entry,in,ship,file,list,s,path,str,path,path,new,path,key,and,path,1,local,resource,resource,register,local,resource,path,get,file,system,yarn,config,path,task,manager,local,resources,put,key,and,path,0,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,log,info,starting,task,managers,with,command,launch,command,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,try,data,output,buffer,dob,new,data,output,buffer,log,debug,adding,security,tokens,to,task,executor,container,launch,context,string,file,location,system,getenv,user,group,information,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,hadoop,utils,get,hadoop,configuration,flink,config,cred,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,getting,current,user,info,failed,when,trying,to,launch,the,container,t,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1515770046;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if teh launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		log.info("TM:remote keytab path obtained {}", remoteKeytabPath)___		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		log.info("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)___		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		log.info("TM:remote yarn conf path obtained {}", remoteYarnConfPath)___		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)__		log.info("TM:remote krb5 path obtained {}", remoteKrb5Path)___		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			keytabResource = registerLocalResource(fs, keytabPath)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			yarnConfResource = registerLocalResource(fs, yarnConfPath)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			krb5ConfResource = registerLocalResource(fs, krb5ConfPath)___			hasKrb5 = true__		}__		_		final LocalResource flinkJar__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			flinkJar = registerLocalResource(fs, remoteJarPath)__		}__		_		final LocalResource flinkConf__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			try {_				Path homeDirPath = new Path(clientHomeDir)__				FileSystem fs = homeDirPath.getFileSystem(yarnConfig)___				flinkConf = setupLocalResource(_					fs,_					appId,_					new Path(taskManagerConfigFile.toURI()),_					homeDirPath,_					"").f1___				log.info("Prepared local resource for modified yaml: {}", flinkConf)__			} finally {_				try {_					FileUtils.deleteFileOrDirectory(taskManagerConfigFile)__				} catch (IOException e) {_					log.info("Could not delete temporary configuration file " +_						taskManagerConfigFile.getAbsolutePath() + '.', e)__				}_			}_		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				String[] keyAndPath = pathStr.split("=")__				require(keyAndPath.length == 2, "Invalid entry in ship file list: %s", pathStr)__				Path path = new Path(keyAndPath[1])__				LocalResource resource = registerLocalResource(path.getFileSystem(yarnConfig), path)__				taskManagerLocalResources.put(keyAndPath[0], resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		log.info("Starting TaskManagers with command: " + launchCommand)___		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		try (DataOutputBuffer dob = new DataOutputBuffer()) {_			log.debug("Adding security tokens to Task Executor Container launch Context....")___			_			_			_			String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)__			Method readTokenStorageFileMethod = Credentials.class.getMethod(_				"readTokenStorageFile", File.class, org.apache.hadoop.conf.Configuration.class)___			Credentials cred =_				(Credentials) readTokenStorageFileMethod.invoke(_					null,_					new File(fileLocation),_					HadoopUtils.getHadoopConfiguration(flinkConfig))___			cred.writeTokenStorageToStream(dob)__			ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__			ctx.setTokens(securityTokens)__		}_		catch (Throwable t) {_			log.error("Getting current user info failed when trying to launch the container", t)__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,teh,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,log,info,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,final,string,remote,krb5path,env,get,yarn,config,keys,log,info,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,keytab,resource,register,local,resource,fs,keytab,path,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,yarn,conf,resource,register,local,resource,fs,yarn,conf,path,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,krb5conf,resource,register,local,resource,fs,krb5conf,path,has,krb5,true,final,local,resource,flink,jar,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,flink,jar,register,local,resource,fs,remote,jar,path,final,local,resource,flink,conf,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,try,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,flink,conf,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,home,dir,path,f1,log,info,prepared,local,resource,for,modified,yaml,flink,conf,finally,try,file,utils,delete,file,or,directory,task,manager,config,file,catch,ioexception,e,log,info,could,not,delete,temporary,configuration,file,task,manager,config,file,get,absolute,path,e,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,string,key,and,path,path,str,split,require,key,and,path,length,2,invalid,entry,in,ship,file,list,s,path,str,path,path,new,path,key,and,path,1,local,resource,resource,register,local,resource,path,get,file,system,yarn,config,path,task,manager,local,resources,put,key,and,path,0,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,log,info,starting,task,managers,with,command,launch,command,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,try,data,output,buffer,dob,new,data,output,buffer,log,debug,adding,security,tokens,to,task,executor,container,launch,context,string,file,location,system,getenv,user,group,information,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,hadoop,utils,get,hadoop,configuration,flink,config,cred,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,getting,current,user,info,failed,when,trying,to,launch,the,container,t,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1519839433;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if the launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		log.info("TM:remote keytab path obtained {}", remoteKeytabPath)___		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		log.info("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)___		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		log.info("TM:remote yarn conf path obtained {}", remoteYarnConfPath)___		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)__		log.info("TM:remote krb5 path obtained {}", remoteKrb5Path)___		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			keytabResource = registerLocalResource(fs, keytabPath)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			yarnConfResource = registerLocalResource(fs, yarnConfPath)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			krb5ConfResource = registerLocalResource(fs, krb5ConfPath)___			hasKrb5 = true__		}__		_		final LocalResource flinkJar__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			flinkJar = registerLocalResource(fs, remoteJarPath)__		}__		_		final LocalResource flinkConf__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			try {_				Path homeDirPath = new Path(clientHomeDir)__				FileSystem fs = homeDirPath.getFileSystem(yarnConfig)___				flinkConf = setupLocalResource(_					fs,_					appId,_					new Path(taskManagerConfigFile.toURI()),_					homeDirPath,_					"").f1___				log.info("Prepared local resource for modified yaml: {}", flinkConf)__			} finally {_				try {_					FileUtils.deleteFileOrDirectory(taskManagerConfigFile)__				} catch (IOException e) {_					log.info("Could not delete temporary configuration file " +_						taskManagerConfigFile.getAbsolutePath() + '.', e)__				}_			}_		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				String[] keyAndPath = pathStr.split("=")__				require(keyAndPath.length == 2, "Invalid entry in ship file list: %s", pathStr)__				Path path = new Path(keyAndPath[1])__				LocalResource resource = registerLocalResource(path.getFileSystem(yarnConfig), path)__				taskManagerLocalResources.put(keyAndPath[0], resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		log.info("Starting TaskManagers with command: " + launchCommand)___		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		try (DataOutputBuffer dob = new DataOutputBuffer()) {_			log.debug("Adding security tokens to Task Executor Container launch Context....")___			_			_			_			String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)__			Method readTokenStorageFileMethod = Credentials.class.getMethod(_				"readTokenStorageFile", File.class, org.apache.hadoop.conf.Configuration.class)___			Credentials cred =_				(Credentials) readTokenStorageFileMethod.invoke(_					null,_					new File(fileLocation),_					HadoopUtils.getHadoopConfiguration(flinkConfig))___			cred.writeTokenStorageToStream(dob)__			ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__			ctx.setTokens(securityTokens)__		}_		catch (Throwable t) {_			log.error("Getting current user info failed when trying to launch the container", t)__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,the,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,log,info,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,final,string,remote,krb5path,env,get,yarn,config,keys,log,info,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,keytab,resource,register,local,resource,fs,keytab,path,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,yarn,conf,resource,register,local,resource,fs,yarn,conf,path,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,krb5conf,resource,register,local,resource,fs,krb5conf,path,has,krb5,true,final,local,resource,flink,jar,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,flink,jar,register,local,resource,fs,remote,jar,path,final,local,resource,flink,conf,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,try,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,flink,conf,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,home,dir,path,f1,log,info,prepared,local,resource,for,modified,yaml,flink,conf,finally,try,file,utils,delete,file,or,directory,task,manager,config,file,catch,ioexception,e,log,info,could,not,delete,temporary,configuration,file,task,manager,config,file,get,absolute,path,e,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,string,key,and,path,path,str,split,require,key,and,path,length,2,invalid,entry,in,ship,file,list,s,path,str,path,path,new,path,key,and,path,1,local,resource,resource,register,local,resource,path,get,file,system,yarn,config,path,task,manager,local,resources,put,key,and,path,0,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,log,info,starting,task,managers,with,command,launch,command,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,try,data,output,buffer,dob,new,data,output,buffer,log,debug,adding,security,tokens,to,task,executor,container,launch,context,string,file,location,system,getenv,user,group,information,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,hadoop,utils,get,hadoop,configuration,flink,config,cred,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,getting,current,user,info,failed,when,trying,to,launch,the,container,t,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1521537481;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if the launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		log.info("TM:remote keytab path obtained {}", remoteKeytabPath)___		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		log.info("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)___		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		log.info("TM:remote yarn conf path obtained {}", remoteYarnConfPath)___		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)__		log.info("TM:remote krb5 path obtained {}", remoteKrb5Path)___		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			keytabResource = registerLocalResource(fs, keytabPath)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			yarnConfResource = registerLocalResource(fs, yarnConfPath)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			krb5ConfResource = registerLocalResource(fs, krb5ConfPath)___			hasKrb5 = true__		}__		_		final LocalResource flinkJar__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			flinkJar = registerLocalResource(fs, remoteJarPath)__		}__		_		final LocalResource flinkConf__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			try {_				Path homeDirPath = new Path(clientHomeDir)__				FileSystem fs = homeDirPath.getFileSystem(yarnConfig)___				flinkConf = setupLocalResource(_					fs,_					appId,_					new Path(taskManagerConfigFile.toURI()),_					homeDirPath,_					"").f1___				log.info("Prepared local resource for modified yaml: {}", flinkConf)__			} finally {_				try {_					FileUtils.deleteFileOrDirectory(taskManagerConfigFile)__				} catch (IOException e) {_					log.info("Could not delete temporary configuration file " +_						taskManagerConfigFile.getAbsolutePath() + '.', e)__				}_			}_		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				String[] keyAndPath = pathStr.split("=")__				require(keyAndPath.length == 2, "Invalid entry in ship file list: %s", pathStr)__				Path path = new Path(keyAndPath[1])__				LocalResource resource = registerLocalResource(path.getFileSystem(yarnConfig), path)__				taskManagerLocalResources.put(keyAndPath[0], resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		log.info("Starting TaskManagers with command: " + launchCommand)___		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		try (DataOutputBuffer dob = new DataOutputBuffer()) {_			log.debug("Adding security tokens to Task Executor Container launch Context....")___			_			_			_			String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)__			if (fileLocation != null) {_				Method readTokenStorageFileMethod = Credentials.class.getMethod(_					"readTokenStorageFile", File.class, org.apache.hadoop.conf.Configuration.class)___				Credentials cred =_					(Credentials) readTokenStorageFileMethod.invoke(_						null,_						new File(fileLocation),_						HadoopUtils.getHadoopConfiguration(flinkConfig))___				cred.writeTokenStorageToStream(dob)__				ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__				ctx.setTokens(securityTokens)__			}_		}_		catch (Throwable t) {_			log.error("Getting current user info failed when trying to launch the container", t)__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,the,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,log,info,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,final,string,remote,krb5path,env,get,yarn,config,keys,log,info,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,keytab,resource,register,local,resource,fs,keytab,path,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,yarn,conf,resource,register,local,resource,fs,yarn,conf,path,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,krb5conf,resource,register,local,resource,fs,krb5conf,path,has,krb5,true,final,local,resource,flink,jar,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,flink,jar,register,local,resource,fs,remote,jar,path,final,local,resource,flink,conf,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,try,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,flink,conf,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,home,dir,path,f1,log,info,prepared,local,resource,for,modified,yaml,flink,conf,finally,try,file,utils,delete,file,or,directory,task,manager,config,file,catch,ioexception,e,log,info,could,not,delete,temporary,configuration,file,task,manager,config,file,get,absolute,path,e,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,string,key,and,path,path,str,split,require,key,and,path,length,2,invalid,entry,in,ship,file,list,s,path,str,path,path,new,path,key,and,path,1,local,resource,resource,register,local,resource,path,get,file,system,yarn,config,path,task,manager,local,resources,put,key,and,path,0,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,log,info,starting,task,managers,with,command,launch,command,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,try,data,output,buffer,dob,new,data,output,buffer,log,debug,adding,security,tokens,to,task,executor,container,launch,context,string,file,location,system,getenv,user,group,information,if,file,location,null,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,hadoop,utils,get,hadoop,configuration,flink,config,cred,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,getting,current,user,info,failed,when,trying,to,launch,the,container,t,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1521537482;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if the launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		log.info("TM:remote keytab path obtained {}", remoteKeytabPath)___		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		log.info("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)___		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		log.info("TM:remote yarn conf path obtained {}", remoteYarnConfPath)___		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)__		log.info("TM:remote krb5 path obtained {}", remoteKrb5Path)___		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			keytabResource = registerLocalResource(fs, keytabPath)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			yarnConfResource = registerLocalResource(fs, yarnConfPath)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			krb5ConfResource = registerLocalResource(fs, krb5ConfPath)___			hasKrb5 = true__		}__		_		final LocalResource flinkJar__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			flinkJar = registerLocalResource(fs, remoteJarPath)__		}__		_		final LocalResource flinkConf__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			try {_				Path homeDirPath = new Path(clientHomeDir)__				FileSystem fs = homeDirPath.getFileSystem(yarnConfig)___				flinkConf = setupLocalResource(_					fs,_					appId,_					new Path(taskManagerConfigFile.toURI()),_					homeDirPath,_					"").f1___				log.info("Prepared local resource for modified yaml: {}", flinkConf)__			} finally {_				try {_					FileUtils.deleteFileOrDirectory(taskManagerConfigFile)__				} catch (IOException e) {_					log.info("Could not delete temporary configuration file " +_						taskManagerConfigFile.getAbsolutePath() + '.', e)__				}_			}_		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				String[] keyAndPath = pathStr.split("=")__				require(keyAndPath.length == 2, "Invalid entry in ship file list: %s", pathStr)__				Path path = new Path(keyAndPath[1])__				LocalResource resource = registerLocalResource(path.getFileSystem(yarnConfig), path)__				taskManagerLocalResources.put(keyAndPath[0], resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		log.info("Starting TaskManagers with command: " + launchCommand)___		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		_		_		_		final String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)___		if (fileLocation != null) {_			log.debug("Adding security tokens to TaskExecutor's container launch context.")___			try (DataOutputBuffer dob = new DataOutputBuffer()) {_				Method readTokenStorageFileMethod = Credentials.class.getMethod(_					"readTokenStorageFile", File.class, org.apache.hadoop.conf.Configuration.class)___				Credentials cred =_					(Credentials) readTokenStorageFileMethod.invoke(_						null,_						new File(fileLocation),_						HadoopUtils.getHadoopConfiguration(flinkConfig))___				cred.writeTokenStorageToStream(dob)__				ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__				ctx.setTokens(securityTokens)__			} catch (Throwable t) {_				log.error("Failed to add Hadoop's security tokens.", t)__			}_		} else {_			log.info("Could not set security tokens because Hadoop's token file location is unknown.")__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,the,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,log,info,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,final,string,remote,krb5path,env,get,yarn,config,keys,log,info,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,keytab,resource,register,local,resource,fs,keytab,path,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,yarn,conf,resource,register,local,resource,fs,yarn,conf,path,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,krb5conf,resource,register,local,resource,fs,krb5conf,path,has,krb5,true,final,local,resource,flink,jar,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,flink,jar,register,local,resource,fs,remote,jar,path,final,local,resource,flink,conf,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,try,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,flink,conf,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,home,dir,path,f1,log,info,prepared,local,resource,for,modified,yaml,flink,conf,finally,try,file,utils,delete,file,or,directory,task,manager,config,file,catch,ioexception,e,log,info,could,not,delete,temporary,configuration,file,task,manager,config,file,get,absolute,path,e,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,string,key,and,path,path,str,split,require,key,and,path,length,2,invalid,entry,in,ship,file,list,s,path,str,path,path,new,path,key,and,path,1,local,resource,resource,register,local,resource,path,get,file,system,yarn,config,path,task,manager,local,resources,put,key,and,path,0,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,log,info,starting,task,managers,with,command,launch,command,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,final,string,file,location,system,getenv,user,group,information,if,file,location,null,log,debug,adding,security,tokens,to,task,executor,s,container,launch,context,try,data,output,buffer,dob,new,data,output,buffer,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,hadoop,utils,get,hadoop,configuration,flink,config,cred,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,failed,to,add,hadoop,s,security,tokens,t,else,log,info,could,not,set,security,tokens,because,hadoop,s,token,file,location,is,unknown,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1521554043;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if the launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		log.info("TM:remote keytab path obtained {}", remoteKeytabPath)___		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		log.info("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)___		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		log.info("TM:remote yarn conf path obtained {}", remoteYarnConfPath)___		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)__		log.info("TM:remote krb5 path obtained {}", remoteKrb5Path)___		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			keytabResource = registerLocalResource(fs, keytabPath)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			yarnConfResource = registerLocalResource(fs, yarnConfPath)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			krb5ConfResource = registerLocalResource(fs, krb5ConfPath)___			hasKrb5 = true__		}__		_		final LocalResource flinkJar__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			flinkJar = registerLocalResource(fs, remoteJarPath)__		}__		_		final LocalResource flinkConf__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			try {_				Path homeDirPath = new Path(clientHomeDir)__				FileSystem fs = homeDirPath.getFileSystem(yarnConfig)___				flinkConf = setupLocalResource(_					fs,_					appId,_					new Path(taskManagerConfigFile.toURI()),_					homeDirPath,_					"").f1___				log.info("Prepared local resource for modified yaml: {}", flinkConf)__			} finally {_				try {_					FileUtils.deleteFileOrDirectory(taskManagerConfigFile)__				} catch (IOException e) {_					log.info("Could not delete temporary configuration file " +_						taskManagerConfigFile.getAbsolutePath() + '.', e)__				}_			}_		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				String[] keyAndPath = pathStr.split("=")__				require(keyAndPath.length == 2, "Invalid entry in ship file list: %s", pathStr)__				Path path = new Path(keyAndPath[1])__				LocalResource resource = registerLocalResource(path.getFileSystem(yarnConfig), path)__				taskManagerLocalResources.put(keyAndPath[0], resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		log.info("Starting TaskManagers with command: " + launchCommand)___		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		_		_		_		final String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)___		if (fileLocation != null) {_			log.debug("Adding security tokens to TaskExecutor's container launch context.")___			try (DataOutputBuffer dob = new DataOutputBuffer()) {_				Method readTokenStorageFileMethod = Credentials.class.getMethod(_					"readTokenStorageFile", File.class, org.apache.hadoop.conf.Configuration.class)___				Credentials cred =_					(Credentials) readTokenStorageFileMethod.invoke(_						null,_						new File(fileLocation),_						HadoopUtils.getHadoopConfiguration(flinkConfig))___				cred.writeTokenStorageToStream(dob)__				ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__				ctx.setTokens(securityTokens)__			} catch (Throwable t) {_				log.error("Failed to add Hadoop's security tokens.", t)__			}_		} else {_			log.info("Could not set security tokens because Hadoop's token file location is unknown.")__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,the,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,log,info,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,final,string,remote,krb5path,env,get,yarn,config,keys,log,info,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,keytab,resource,register,local,resource,fs,keytab,path,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,yarn,conf,resource,register,local,resource,fs,yarn,conf,path,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,krb5conf,resource,register,local,resource,fs,krb5conf,path,has,krb5,true,final,local,resource,flink,jar,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,flink,jar,register,local,resource,fs,remote,jar,path,final,local,resource,flink,conf,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,try,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,flink,conf,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,home,dir,path,f1,log,info,prepared,local,resource,for,modified,yaml,flink,conf,finally,try,file,utils,delete,file,or,directory,task,manager,config,file,catch,ioexception,e,log,info,could,not,delete,temporary,configuration,file,task,manager,config,file,get,absolute,path,e,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,string,key,and,path,path,str,split,require,key,and,path,length,2,invalid,entry,in,ship,file,list,s,path,str,path,path,new,path,key,and,path,1,local,resource,resource,register,local,resource,path,get,file,system,yarn,config,path,task,manager,local,resources,put,key,and,path,0,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,log,info,starting,task,managers,with,command,launch,command,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,final,string,file,location,system,getenv,user,group,information,if,file,location,null,log,debug,adding,security,tokens,to,task,executor,s,container,launch,context,try,data,output,buffer,dob,new,data,output,buffer,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,hadoop,utils,get,hadoop,configuration,flink,config,cred,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,failed,to,add,hadoop,s,security,tokens,t,else,log,info,could,not,set,security,tokens,because,hadoop,s,token,file,location,is,unknown,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1524050030;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if the launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)___		if (log.isDebugEnabled()) {_			log.debug("TM:remote keytab path obtained {}", remoteKeytabPath)__			log.debug("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)__			log.debug("TM:remote yarn conf path obtained {}", remoteYarnConfPath)__			log.debug("TM:remote krb5 path obtained {}", remoteKrb5Path)__		}__		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			keytabResource = registerLocalResource(fs, keytabPath)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			yarnConfResource = registerLocalResource(fs, yarnConfPath)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			krb5ConfResource = registerLocalResource(fs, krb5ConfPath)___			hasKrb5 = true__		}__		_		final LocalResource flinkJar__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			flinkJar = registerLocalResource(fs, remoteJarPath)__		}__		_		final LocalResource flinkConf__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			try {_				Path homeDirPath = new Path(clientHomeDir)__				FileSystem fs = homeDirPath.getFileSystem(yarnConfig)___				flinkConf = setupLocalResource(_					fs,_					appId,_					new Path(taskManagerConfigFile.toURI()),_					homeDirPath,_					"").f1___				log.debug("Prepared local resource for modified yaml: {}", flinkConf)__			} finally {_				try {_					FileUtils.deleteFileOrDirectory(taskManagerConfigFile)__				} catch (IOException e) {_					log.info("Could not delete temporary configuration file " +_						taskManagerConfigFile.getAbsolutePath() + '.', e)__				}_			}_		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				String[] keyAndPath = pathStr.split("=")__				require(keyAndPath.length == 2, "Invalid entry in ship file list: %s", pathStr)__				Path path = new Path(keyAndPath[1])__				LocalResource resource = registerLocalResource(path.getFileSystem(yarnConfig), path)__				taskManagerLocalResources.put(keyAndPath[0], resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		if (log.isDebugEnabled()) {_			log.debug("Starting TaskManagers with command: " + launchCommand)__		} else {_			log.info("Starting TaskManagers")__		}__		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		_		_		_		final String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)___		if (fileLocation != null) {_			log.debug("Adding security tokens to TaskExecutor's container launch context.")___			try (DataOutputBuffer dob = new DataOutputBuffer()) {_				Method readTokenStorageFileMethod = Credentials.class.getMethod(_					"readTokenStorageFile", File.class, org.apache.hadoop.conf.Configuration.class)___				Credentials cred =_					(Credentials) readTokenStorageFileMethod.invoke(_						null,_						new File(fileLocation),_						HadoopUtils.getHadoopConfiguration(flinkConfig))___				cred.writeTokenStorageToStream(dob)__				ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__				ctx.setTokens(securityTokens)__			} catch (Throwable t) {_				log.error("Failed to add Hadoop's security tokens.", t)__			}_		} else {_			log.info("Could not set security tokens because Hadoop's token file location is unknown.")__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,the,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,final,string,remote,keytab,principal,env,get,yarn,config,keys,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,final,string,remote,krb5path,env,get,yarn,config,keys,if,log,is,debug,enabled,log,debug,tm,remote,keytab,path,obtained,remote,keytab,path,log,debug,tm,remote,keytab,principal,obtained,remote,keytab,principal,log,debug,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,log,debug,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,keytab,resource,register,local,resource,fs,keytab,path,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,yarn,conf,resource,register,local,resource,fs,yarn,conf,path,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,krb5conf,resource,register,local,resource,fs,krb5conf,path,has,krb5,true,final,local,resource,flink,jar,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,flink,jar,register,local,resource,fs,remote,jar,path,final,local,resource,flink,conf,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,try,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,flink,conf,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,home,dir,path,f1,log,debug,prepared,local,resource,for,modified,yaml,flink,conf,finally,try,file,utils,delete,file,or,directory,task,manager,config,file,catch,ioexception,e,log,info,could,not,delete,temporary,configuration,file,task,manager,config,file,get,absolute,path,e,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,string,key,and,path,path,str,split,require,key,and,path,length,2,invalid,entry,in,ship,file,list,s,path,str,path,path,new,path,key,and,path,1,local,resource,resource,register,local,resource,path,get,file,system,yarn,config,path,task,manager,local,resources,put,key,and,path,0,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,if,log,is,debug,enabled,log,debug,starting,task,managers,with,command,launch,command,else,log,info,starting,task,managers,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,final,string,file,location,system,getenv,user,group,information,if,file,location,null,log,debug,adding,security,tokens,to,task,executor,s,container,launch,context,try,data,output,buffer,dob,new,data,output,buffer,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,hadoop,utils,get,hadoop,configuration,flink,config,cred,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,failed,to,add,hadoop,s,security,tokens,t,else,log,info,could,not,set,security,tokens,because,hadoop,s,token,file,location,is,unknown,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1525116055;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if the launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)___		if (log.isDebugEnabled()) {_			log.debug("TM:remote keytab path obtained {}", remoteKeytabPath)__			log.debug("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)__			log.debug("TM:remote yarn conf path obtained {}", remoteYarnConfPath)__			log.debug("TM:remote krb5 path obtained {}", remoteKrb5Path)__		}__		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			keytabResource = registerLocalResource(fs, keytabPath)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			yarnConfResource = registerLocalResource(fs, yarnConfPath)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			krb5ConfResource = registerLocalResource(fs, krb5ConfPath)___			hasKrb5 = true__		}__		_		final LocalResource flinkJar__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			flinkJar = registerLocalResource(fs, remoteJarPath)__		}__		_		final LocalResource flinkConf__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			try {_				Path homeDirPath = new Path(clientHomeDir)__				FileSystem fs = homeDirPath.getFileSystem(yarnConfig)___				flinkConf = setupLocalResource(_					fs,_					appId,_					new Path(taskManagerConfigFile.toURI()),_					homeDirPath,_					"").f1___				log.debug("Prepared local resource for modified yaml: {}", flinkConf)__			} finally {_				try {_					FileUtils.deleteFileOrDirectory(taskManagerConfigFile)__				} catch (IOException e) {_					log.info("Could not delete temporary configuration file " +_						taskManagerConfigFile.getAbsolutePath() + '.', e)__				}_			}_		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				String[] keyAndPath = pathStr.split("=")__				require(keyAndPath.length == 2, "Invalid entry in ship file list: %s", pathStr)__				Path path = new Path(keyAndPath[1])__				LocalResource resource = registerLocalResource(path.getFileSystem(yarnConfig), path)__				taskManagerLocalResources.put(keyAndPath[0], resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		if (log.isDebugEnabled()) {_			log.debug("Starting TaskManagers with command: " + launchCommand)__		} else {_			log.info("Starting TaskManagers")__		}__		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		_		_		_		final String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)___		if (fileLocation != null) {_			log.debug("Adding security tokens to TaskExecutor's container launch context.")___			try (DataOutputBuffer dob = new DataOutputBuffer()) {_				Method readTokenStorageFileMethod = Credentials.class.getMethod(_					"readTokenStorageFile", File.class, org.apache.hadoop.conf.Configuration.class)___				Credentials cred =_					(Credentials) readTokenStorageFileMethod.invoke(_						null,_						new File(fileLocation),_						HadoopUtils.getHadoopConfiguration(flinkConfig))___				cred.writeTokenStorageToStream(dob)__				ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__				ctx.setTokens(securityTokens)__			} catch (Throwable t) {_				log.error("Failed to add Hadoop's security tokens.", t)__			}_		} else {_			log.info("Could not set security tokens because Hadoop's token file location is unknown.")__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,the,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,final,string,remote,keytab,principal,env,get,yarn,config,keys,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,final,string,remote,krb5path,env,get,yarn,config,keys,if,log,is,debug,enabled,log,debug,tm,remote,keytab,path,obtained,remote,keytab,path,log,debug,tm,remote,keytab,principal,obtained,remote,keytab,principal,log,debug,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,log,debug,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,keytab,resource,register,local,resource,fs,keytab,path,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,yarn,conf,resource,register,local,resource,fs,yarn,conf,path,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,krb5conf,resource,register,local,resource,fs,krb5conf,path,has,krb5,true,final,local,resource,flink,jar,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,flink,jar,register,local,resource,fs,remote,jar,path,final,local,resource,flink,conf,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,try,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,flink,conf,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,home,dir,path,f1,log,debug,prepared,local,resource,for,modified,yaml,flink,conf,finally,try,file,utils,delete,file,or,directory,task,manager,config,file,catch,ioexception,e,log,info,could,not,delete,temporary,configuration,file,task,manager,config,file,get,absolute,path,e,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,string,key,and,path,path,str,split,require,key,and,path,length,2,invalid,entry,in,ship,file,list,s,path,str,path,path,new,path,key,and,path,1,local,resource,resource,register,local,resource,path,get,file,system,yarn,config,path,task,manager,local,resources,put,key,and,path,0,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,if,log,is,debug,enabled,log,debug,starting,task,managers,with,command,launch,command,else,log,info,starting,task,managers,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,final,string,file,location,system,getenv,user,group,information,if,file,location,null,log,debug,adding,security,tokens,to,task,executor,s,container,launch,context,try,data,output,buffer,dob,new,data,output,buffer,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,hadoop,utils,get,hadoop,configuration,flink,config,cred,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,failed,to,add,hadoop,s,security,tokens,t,else,log,info,could,not,set,security,tokens,because,hadoop,s,token,file,location,is,unknown,return,ctx
Utils -> static ContainerLaunchContext createTaskExecutorContext( 		org.apache.flink.configuration.Configuration flinkConfig, 		YarnConfiguration yarnConfig, 		Map<String, String> env, 		ContaineredTaskManagerParameters tmParams, 		org.apache.flink.configuration.Configuration taskManagerConfig, 		String workingDirectory, 		Class<?> taskManagerMainClass, 		Logger log) throws Exception;1525116069;Creates the launch context, which describes how to bring up a TaskExecutor / TaskManager process in_an allocated YARN container.__<p>This code is extremely YARN specific and registers all the resources that the TaskExecutor_needs (such as JAR file, config file, ...) and all environment variables in a YARN_container launch context. The launch context then ensures that those resources will be_copied into the containers transient working directory.__@param flinkConfig_The Flink configuration object._@param yarnConfig_The YARN configuration object._@param env_The environment variables._@param tmParams_The TaskExecutor container memory parameters._@param taskManagerConfig_The configuration for the TaskExecutors._@param workingDirectory_The current application master container's working directory._@param taskManagerMainClass_The class with the main method._@param log_The logger.__@return The launch context for the TaskManager processes.__@throws Exception Thrown if the launch context could not be created, for example if_the resources could not be copied.;static ContainerLaunchContext createTaskExecutorContext(_		org.apache.flink.configuration.Configuration flinkConfig,_		YarnConfiguration yarnConfig,_		Map<String, String> env,_		ContaineredTaskManagerParameters tmParams,_		org.apache.flink.configuration.Configuration taskManagerConfig,_		String workingDirectory,_		Class<?> taskManagerMainClass,_		Logger log) throws Exception {__		__		String remoteFlinkJarPath = env.get(YarnConfigKeys.FLINK_JAR_PATH)__		require(remoteFlinkJarPath != null, "Environment variable %s not set", YarnConfigKeys.FLINK_JAR_PATH)___		String appId = env.get(YarnConfigKeys.ENV_APP_ID)__		require(appId != null, "Environment variable %s not set", YarnConfigKeys.ENV_APP_ID)___		String clientHomeDir = env.get(YarnConfigKeys.ENV_CLIENT_HOME_DIR)__		require(clientHomeDir != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_HOME_DIR)___		String shipListString = env.get(YarnConfigKeys.ENV_CLIENT_SHIP_FILES)__		require(shipListString != null, "Environment variable %s not set", YarnConfigKeys.ENV_CLIENT_SHIP_FILES)___		String yarnClientUsername = env.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__		require(yarnClientUsername != null, "Environment variable %s not set", YarnConfigKeys.ENV_HADOOP_USER_NAME)___		final String remoteKeytabPath = env.get(YarnConfigKeys.KEYTAB_PATH)__		final String remoteKeytabPrincipal = env.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__		final String remoteYarnConfPath = env.get(YarnConfigKeys.ENV_YARN_SITE_XML_PATH)__		final String remoteKrb5Path = env.get(YarnConfigKeys.ENV_KRB5_PATH)___		if (log.isDebugEnabled()) {_			log.debug("TM:remote keytab path obtained {}", remoteKeytabPath)__			log.debug("TM:remote keytab principal obtained {}", remoteKeytabPrincipal)__			log.debug("TM:remote yarn conf path obtained {}", remoteYarnConfPath)__			log.debug("TM:remote krb5 path obtained {}", remoteKrb5Path)__		}__		String classPathString = env.get(ENV_FLINK_CLASSPATH)__		require(classPathString != null, "Environment variable %s not set", YarnConfigKeys.ENV_FLINK_CLASSPATH)___		_		LocalResource keytabResource = null__		if (remoteKeytabPath != null) {_			log.info("Adding keytab {} to the AM container local resource bucket", remoteKeytabPath)__			Path keytabPath = new Path(remoteKeytabPath)__			FileSystem fs = keytabPath.getFileSystem(yarnConfig)__			keytabResource = registerLocalResource(fs, keytabPath)__		}__		_		LocalResource yarnConfResource = null__		LocalResource krb5ConfResource = null__		boolean hasKrb5 = false__		if (remoteYarnConfPath != null && remoteKrb5Path != null) {_			log.info("TM:Adding remoteYarnConfPath {} to the container local resource bucket", remoteYarnConfPath)__			Path yarnConfPath = new Path(remoteYarnConfPath)__			FileSystem fs = yarnConfPath.getFileSystem(yarnConfig)__			yarnConfResource = registerLocalResource(fs, yarnConfPath)___			log.info("TM:Adding remoteKrb5Path {} to the container local resource bucket", remoteKrb5Path)__			Path krb5ConfPath = new Path(remoteKrb5Path)__			fs = krb5ConfPath.getFileSystem(yarnConfig)__			krb5ConfResource = registerLocalResource(fs, krb5ConfPath)___			hasKrb5 = true__		}__		_		final LocalResource flinkJar__		{_			Path remoteJarPath = new Path(remoteFlinkJarPath)__			FileSystem fs = remoteJarPath.getFileSystem(yarnConfig)__			flinkJar = registerLocalResource(fs, remoteJarPath)__		}__		_		final LocalResource flinkConf__		{_			_			final File taskManagerConfigFile =_					new File(workingDirectory, UUID.randomUUID() + "-taskmanager-conf.yaml")__			log.debug("Writing TaskManager configuration to {}", taskManagerConfigFile.getAbsolutePath())__			BootstrapTools.writeConfiguration(taskManagerConfig, taskManagerConfigFile)___			try {_				Path homeDirPath = new Path(clientHomeDir)__				FileSystem fs = homeDirPath.getFileSystem(yarnConfig)___				flinkConf = setupLocalResource(_					fs,_					appId,_					new Path(taskManagerConfigFile.toURI()),_					homeDirPath,_					"").f1___				log.debug("Prepared local resource for modified yaml: {}", flinkConf)__			} finally {_				try {_					FileUtils.deleteFileOrDirectory(taskManagerConfigFile)__				} catch (IOException e) {_					log.info("Could not delete temporary configuration file " +_						taskManagerConfigFile.getAbsolutePath() + '.', e)__				}_			}_		}__		Map<String, LocalResource> taskManagerLocalResources = new HashMap<>()__		taskManagerLocalResources.put("flink.jar", flinkJar)__		taskManagerLocalResources.put("flink-conf.yaml", flinkConf)___		_		if (yarnConfResource != null && krb5ConfResource != null) {_			taskManagerLocalResources.put(YARN_SITE_FILE_NAME, yarnConfResource)__			taskManagerLocalResources.put(KRB5_FILE_NAME, krb5ConfResource)__		}__		if (keytabResource != null) {_			taskManagerLocalResources.put(KEYTAB_FILE_NAME, keytabResource)__		}__		_		for (String pathStr : shipListString.split(",")) {_			if (!pathStr.isEmpty()) {_				String[] keyAndPath = pathStr.split("=")__				require(keyAndPath.length == 2, "Invalid entry in ship file list: %s", pathStr)__				Path path = new Path(keyAndPath[1])__				LocalResource resource = registerLocalResource(path.getFileSystem(yarnConfig), path)__				taskManagerLocalResources.put(keyAndPath[0], resource)__			}_		}__		__		log.info("Creating container launch context for TaskManagers")___		boolean hasLogback = new File(workingDirectory, "logback.xml").exists()__		boolean hasLog4j = new File(workingDirectory, "log4j.properties").exists()___		String launchCommand = BootstrapTools.getTaskManagerShellCommand(_				flinkConfig, tmParams, ".", ApplicationConstants.LOG_DIR_EXPANSION_VAR,_				hasLogback, hasLog4j, hasKrb5, taskManagerMainClass)___		if (log.isDebugEnabled()) {_			log.debug("Starting TaskManagers with command: " + launchCommand)__		} else {_			log.info("Starting TaskManagers")__		}__		ContainerLaunchContext ctx = Records.newRecord(ContainerLaunchContext.class)__		ctx.setCommands(Collections.singletonList(launchCommand))__		ctx.setLocalResources(taskManagerLocalResources)___		Map<String, String> containerEnv = new HashMap<>()__		containerEnv.putAll(tmParams.taskManagerEnv())___		_		containerEnv.put(ENV_FLINK_CLASSPATH, classPathString)__		setupYarnClassPath(yarnConfig, containerEnv)___		containerEnv.put(YarnConfigKeys.ENV_HADOOP_USER_NAME, UserGroupInformation.getCurrentUser().getUserName())___		if (remoteKeytabPath != null && remoteKeytabPrincipal != null) {_			containerEnv.put(YarnConfigKeys.KEYTAB_PATH, remoteKeytabPath)__			containerEnv.put(YarnConfigKeys.KEYTAB_PRINCIPAL, remoteKeytabPrincipal)__		}__		ctx.setEnvironment(containerEnv)___		_		_		_		final String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)___		if (fileLocation != null) {_			log.debug("Adding security tokens to TaskExecutor's container launch context.")___			try (DataOutputBuffer dob = new DataOutputBuffer()) {_				Method readTokenStorageFileMethod = Credentials.class.getMethod(_					"readTokenStorageFile", File.class, org.apache.hadoop.conf.Configuration.class)___				Credentials cred =_					(Credentials) readTokenStorageFileMethod.invoke(_						null,_						new File(fileLocation),_						HadoopUtils.getHadoopConfiguration(flinkConfig))___				cred.writeTokenStorageToStream(dob)__				ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())__				ctx.setTokens(securityTokens)__			} catch (Throwable t) {_				log.error("Failed to add Hadoop's security tokens.", t)__			}_		} else {_			log.info("Could not set security tokens because Hadoop's token file location is unknown.")__		}__		return ctx__	};creates,the,launch,context,which,describes,how,to,bring,up,a,task,executor,task,manager,process,in,an,allocated,yarn,container,p,this,code,is,extremely,yarn,specific,and,registers,all,the,resources,that,the,task,executor,needs,such,as,jar,file,config,file,and,all,environment,variables,in,a,yarn,container,launch,context,the,launch,context,then,ensures,that,those,resources,will,be,copied,into,the,containers,transient,working,directory,param,flink,config,the,flink,configuration,object,param,yarn,config,the,yarn,configuration,object,param,env,the,environment,variables,param,tm,params,the,task,executor,container,memory,parameters,param,task,manager,config,the,configuration,for,the,task,executors,param,working,directory,the,current,application,master,container,s,working,directory,param,task,manager,main,class,the,class,with,the,main,method,param,log,the,logger,return,the,launch,context,for,the,task,manager,processes,throws,exception,thrown,if,the,launch,context,could,not,be,created,for,example,if,the,resources,could,not,be,copied;static,container,launch,context,create,task,executor,context,org,apache,flink,configuration,configuration,flink,config,yarn,configuration,yarn,config,map,string,string,env,containered,task,manager,parameters,tm,params,org,apache,flink,configuration,configuration,task,manager,config,string,working,directory,class,task,manager,main,class,logger,log,throws,exception,string,remote,flink,jar,path,env,get,yarn,config,keys,require,remote,flink,jar,path,null,environment,variable,s,not,set,yarn,config,keys,string,app,id,env,get,yarn,config,keys,require,app,id,null,environment,variable,s,not,set,yarn,config,keys,string,client,home,dir,env,get,yarn,config,keys,require,client,home,dir,null,environment,variable,s,not,set,yarn,config,keys,string,ship,list,string,env,get,yarn,config,keys,require,ship,list,string,null,environment,variable,s,not,set,yarn,config,keys,string,yarn,client,username,env,get,yarn,config,keys,require,yarn,client,username,null,environment,variable,s,not,set,yarn,config,keys,final,string,remote,keytab,path,env,get,yarn,config,keys,final,string,remote,keytab,principal,env,get,yarn,config,keys,final,string,remote,yarn,conf,path,env,get,yarn,config,keys,final,string,remote,krb5path,env,get,yarn,config,keys,if,log,is,debug,enabled,log,debug,tm,remote,keytab,path,obtained,remote,keytab,path,log,debug,tm,remote,keytab,principal,obtained,remote,keytab,principal,log,debug,tm,remote,yarn,conf,path,obtained,remote,yarn,conf,path,log,debug,tm,remote,krb5,path,obtained,remote,krb5path,string,class,path,string,env,get,require,class,path,string,null,environment,variable,s,not,set,yarn,config,keys,local,resource,keytab,resource,null,if,remote,keytab,path,null,log,info,adding,keytab,to,the,am,container,local,resource,bucket,remote,keytab,path,path,keytab,path,new,path,remote,keytab,path,file,system,fs,keytab,path,get,file,system,yarn,config,keytab,resource,register,local,resource,fs,keytab,path,local,resource,yarn,conf,resource,null,local,resource,krb5conf,resource,null,boolean,has,krb5,false,if,remote,yarn,conf,path,null,remote,krb5path,null,log,info,tm,adding,remote,yarn,conf,path,to,the,container,local,resource,bucket,remote,yarn,conf,path,path,yarn,conf,path,new,path,remote,yarn,conf,path,file,system,fs,yarn,conf,path,get,file,system,yarn,config,yarn,conf,resource,register,local,resource,fs,yarn,conf,path,log,info,tm,adding,remote,krb5path,to,the,container,local,resource,bucket,remote,krb5path,path,krb5conf,path,new,path,remote,krb5path,fs,krb5conf,path,get,file,system,yarn,config,krb5conf,resource,register,local,resource,fs,krb5conf,path,has,krb5,true,final,local,resource,flink,jar,path,remote,jar,path,new,path,remote,flink,jar,path,file,system,fs,remote,jar,path,get,file,system,yarn,config,flink,jar,register,local,resource,fs,remote,jar,path,final,local,resource,flink,conf,final,file,task,manager,config,file,new,file,working,directory,uuid,random,uuid,taskmanager,conf,yaml,log,debug,writing,task,manager,configuration,to,task,manager,config,file,get,absolute,path,bootstrap,tools,write,configuration,task,manager,config,task,manager,config,file,try,path,home,dir,path,new,path,client,home,dir,file,system,fs,home,dir,path,get,file,system,yarn,config,flink,conf,setup,local,resource,fs,app,id,new,path,task,manager,config,file,to,uri,home,dir,path,f1,log,debug,prepared,local,resource,for,modified,yaml,flink,conf,finally,try,file,utils,delete,file,or,directory,task,manager,config,file,catch,ioexception,e,log,info,could,not,delete,temporary,configuration,file,task,manager,config,file,get,absolute,path,e,map,string,local,resource,task,manager,local,resources,new,hash,map,task,manager,local,resources,put,flink,jar,flink,jar,task,manager,local,resources,put,flink,conf,yaml,flink,conf,if,yarn,conf,resource,null,krb5conf,resource,null,task,manager,local,resources,put,yarn,conf,resource,task,manager,local,resources,put,krb5conf,resource,if,keytab,resource,null,task,manager,local,resources,put,keytab,resource,for,string,path,str,ship,list,string,split,if,path,str,is,empty,string,key,and,path,path,str,split,require,key,and,path,length,2,invalid,entry,in,ship,file,list,s,path,str,path,path,new,path,key,and,path,1,local,resource,resource,register,local,resource,path,get,file,system,yarn,config,path,task,manager,local,resources,put,key,and,path,0,resource,log,info,creating,container,launch,context,for,task,managers,boolean,has,logback,new,file,working,directory,logback,xml,exists,boolean,has,log4j,new,file,working,directory,log4j,properties,exists,string,launch,command,bootstrap,tools,get,task,manager,shell,command,flink,config,tm,params,application,constants,has,logback,has,log4j,has,krb5,task,manager,main,class,if,log,is,debug,enabled,log,debug,starting,task,managers,with,command,launch,command,else,log,info,starting,task,managers,container,launch,context,ctx,records,new,record,container,launch,context,class,ctx,set,commands,collections,singleton,list,launch,command,ctx,set,local,resources,task,manager,local,resources,map,string,string,container,env,new,hash,map,container,env,put,all,tm,params,task,manager,env,container,env,put,class,path,string,setup,yarn,class,path,yarn,config,container,env,container,env,put,yarn,config,keys,user,group,information,get,current,user,get,user,name,if,remote,keytab,path,null,remote,keytab,principal,null,container,env,put,yarn,config,keys,remote,keytab,path,container,env,put,yarn,config,keys,remote,keytab,principal,ctx,set,environment,container,env,final,string,file,location,system,getenv,user,group,information,if,file,location,null,log,debug,adding,security,tokens,to,task,executor,s,container,launch,context,try,data,output,buffer,dob,new,data,output,buffer,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,hadoop,utils,get,hadoop,configuration,flink,config,cred,write,token,storage,to,stream,dob,byte,buffer,security,tokens,byte,buffer,wrap,dob,get,data,0,dob,get,length,ctx,set,tokens,security,tokens,catch,throwable,t,log,error,failed,to,add,hadoop,s,security,tokens,t,else,log,info,could,not,set,security,tokens,because,hadoop,s,token,file,location,is,unknown,return,ctx
Utils -> static Tuple2<Path, LocalResource> setupLocalResource( 		FileSystem fs, 		String appId, 		Path localSrcPath, 		Path homedir, 		String relativeTargetPath) throws IOException;1510999087;Copy a local file to a remote file system.__@param fs_remote filesystem_@param appId_application ID_@param localSrcPath_path to the local file_@param homedir_remote home directory base (will be extended)_@param relativeTargetPath_relative target path of the file (will be prefixed be the full home directory we set up)__@return Path to remote file (usually hdfs);static Tuple2<Path, LocalResource> setupLocalResource(_		FileSystem fs,_		String appId,_		Path localSrcPath,_		Path homedir,_		String relativeTargetPath) throws IOException {__		if (new File(localSrcPath.toUri().getPath()).isDirectory()) {_			throw new IllegalArgumentException("File to copy must not be a directory: " +_				localSrcPath)__		}__		_		String suffix =_			".flink/"_				+ appId_				+ (relativeTargetPath.isEmpty() ? "" : "/" + relativeTargetPath)_				+ "/" + localSrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localSrcPath + " to " + dst)___		fs.copyFromLocalFile(false, true, localSrcPath, dst)___		_		LocalResource resource = registerLocalResource(fs, dst)__		return Tuple2.of(dst, resource)__	};copy,a,local,file,to,a,remote,file,system,param,fs,remote,filesystem,param,app,id,application,id,param,local,src,path,path,to,the,local,file,param,homedir,remote,home,directory,base,will,be,extended,param,relative,target,path,relative,target,path,of,the,file,will,be,prefixed,be,the,full,home,directory,we,set,up,return,path,to,remote,file,usually,hdfs;static,tuple2,path,local,resource,setup,local,resource,file,system,fs,string,app,id,path,local,src,path,path,homedir,string,relative,target,path,throws,ioexception,if,new,file,local,src,path,to,uri,get,path,is,directory,throw,new,illegal,argument,exception,file,to,copy,must,not,be,a,directory,local,src,path,string,suffix,flink,app,id,relative,target,path,is,empty,relative,target,path,local,src,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,src,path,to,dst,fs,copy,from,local,file,false,true,local,src,path,dst,local,resource,resource,register,local,resource,fs,dst,return,tuple2,of,dst,resource
Utils -> static Tuple2<Path, LocalResource> setupLocalResource( 		FileSystem fs, 		String appId, 		Path localSrcPath, 		Path homedir, 		String relativeTargetPath) throws IOException;1515770046;Copy a local file to a remote file system.__@param fs_remote filesystem_@param appId_application ID_@param localSrcPath_path to the local file_@param homedir_remote home directory base (will be extended)_@param relativeTargetPath_relative target path of the file (will be prefixed be the full home directory we set up)__@return Path to remote file (usually hdfs);static Tuple2<Path, LocalResource> setupLocalResource(_		FileSystem fs,_		String appId,_		Path localSrcPath,_		Path homedir,_		String relativeTargetPath) throws IOException {__		if (new File(localSrcPath.toUri().getPath()).isDirectory()) {_			throw new IllegalArgumentException("File to copy must not be a directory: " +_				localSrcPath)__		}__		_		String suffix =_			".flink/"_				+ appId_				+ (relativeTargetPath.isEmpty() ? "" : "/" + relativeTargetPath)_				+ "/" + localSrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localSrcPath + " to " + dst)___		fs.copyFromLocalFile(false, true, localSrcPath, dst)___		_		LocalResource resource = registerLocalResource(fs, dst)__		return Tuple2.of(dst, resource)__	};copy,a,local,file,to,a,remote,file,system,param,fs,remote,filesystem,param,app,id,application,id,param,local,src,path,path,to,the,local,file,param,homedir,remote,home,directory,base,will,be,extended,param,relative,target,path,relative,target,path,of,the,file,will,be,prefixed,be,the,full,home,directory,we,set,up,return,path,to,remote,file,usually,hdfs;static,tuple2,path,local,resource,setup,local,resource,file,system,fs,string,app,id,path,local,src,path,path,homedir,string,relative,target,path,throws,ioexception,if,new,file,local,src,path,to,uri,get,path,is,directory,throw,new,illegal,argument,exception,file,to,copy,must,not,be,a,directory,local,src,path,string,suffix,flink,app,id,relative,target,path,is,empty,relative,target,path,local,src,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,src,path,to,dst,fs,copy,from,local,file,false,true,local,src,path,dst,local,resource,resource,register,local,resource,fs,dst,return,tuple2,of,dst,resource
Utils -> static Tuple2<Path, LocalResource> setupLocalResource( 		FileSystem fs, 		String appId, 		Path localSrcPath, 		Path homedir, 		String relativeTargetPath) throws IOException;1519839433;Copy a local file to a remote file system.__@param fs_remote filesystem_@param appId_application ID_@param localSrcPath_path to the local file_@param homedir_remote home directory base (will be extended)_@param relativeTargetPath_relative target path of the file (will be prefixed be the full home directory we set up)__@return Path to remote file (usually hdfs);static Tuple2<Path, LocalResource> setupLocalResource(_		FileSystem fs,_		String appId,_		Path localSrcPath,_		Path homedir,_		String relativeTargetPath) throws IOException {__		if (new File(localSrcPath.toUri().getPath()).isDirectory()) {_			throw new IllegalArgumentException("File to copy must not be a directory: " +_				localSrcPath)__		}__		_		String suffix =_			".flink/"_				+ appId_				+ (relativeTargetPath.isEmpty() ? "" : "/" + relativeTargetPath)_				+ "/" + localSrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localSrcPath + " to " + dst)___		fs.copyFromLocalFile(false, true, localSrcPath, dst)___		_		LocalResource resource = registerLocalResource(fs, dst)__		return Tuple2.of(dst, resource)__	};copy,a,local,file,to,a,remote,file,system,param,fs,remote,filesystem,param,app,id,application,id,param,local,src,path,path,to,the,local,file,param,homedir,remote,home,directory,base,will,be,extended,param,relative,target,path,relative,target,path,of,the,file,will,be,prefixed,be,the,full,home,directory,we,set,up,return,path,to,remote,file,usually,hdfs;static,tuple2,path,local,resource,setup,local,resource,file,system,fs,string,app,id,path,local,src,path,path,homedir,string,relative,target,path,throws,ioexception,if,new,file,local,src,path,to,uri,get,path,is,directory,throw,new,illegal,argument,exception,file,to,copy,must,not,be,a,directory,local,src,path,string,suffix,flink,app,id,relative,target,path,is,empty,relative,target,path,local,src,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,src,path,to,dst,fs,copy,from,local,file,false,true,local,src,path,dst,local,resource,resource,register,local,resource,fs,dst,return,tuple2,of,dst,resource
Utils -> static Tuple2<Path, LocalResource> setupLocalResource( 		FileSystem fs, 		String appId, 		Path localSrcPath, 		Path homedir, 		String relativeTargetPath) throws IOException;1521537481;Copy a local file to a remote file system.__@param fs_remote filesystem_@param appId_application ID_@param localSrcPath_path to the local file_@param homedir_remote home directory base (will be extended)_@param relativeTargetPath_relative target path of the file (will be prefixed be the full home directory we set up)__@return Path to remote file (usually hdfs);static Tuple2<Path, LocalResource> setupLocalResource(_		FileSystem fs,_		String appId,_		Path localSrcPath,_		Path homedir,_		String relativeTargetPath) throws IOException {__		if (new File(localSrcPath.toUri().getPath()).isDirectory()) {_			throw new IllegalArgumentException("File to copy must not be a directory: " +_				localSrcPath)__		}__		_		String suffix =_			".flink/"_				+ appId_				+ (relativeTargetPath.isEmpty() ? "" : "/" + relativeTargetPath)_				+ "/" + localSrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localSrcPath + " to " + dst)___		fs.copyFromLocalFile(false, true, localSrcPath, dst)___		_		LocalResource resource = registerLocalResource(fs, dst)__		return Tuple2.of(dst, resource)__	};copy,a,local,file,to,a,remote,file,system,param,fs,remote,filesystem,param,app,id,application,id,param,local,src,path,path,to,the,local,file,param,homedir,remote,home,directory,base,will,be,extended,param,relative,target,path,relative,target,path,of,the,file,will,be,prefixed,be,the,full,home,directory,we,set,up,return,path,to,remote,file,usually,hdfs;static,tuple2,path,local,resource,setup,local,resource,file,system,fs,string,app,id,path,local,src,path,path,homedir,string,relative,target,path,throws,ioexception,if,new,file,local,src,path,to,uri,get,path,is,directory,throw,new,illegal,argument,exception,file,to,copy,must,not,be,a,directory,local,src,path,string,suffix,flink,app,id,relative,target,path,is,empty,relative,target,path,local,src,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,src,path,to,dst,fs,copy,from,local,file,false,true,local,src,path,dst,local,resource,resource,register,local,resource,fs,dst,return,tuple2,of,dst,resource
Utils -> static Tuple2<Path, LocalResource> setupLocalResource( 		FileSystem fs, 		String appId, 		Path localSrcPath, 		Path homedir, 		String relativeTargetPath) throws IOException;1521537482;Copy a local file to a remote file system.__@param fs_remote filesystem_@param appId_application ID_@param localSrcPath_path to the local file_@param homedir_remote home directory base (will be extended)_@param relativeTargetPath_relative target path of the file (will be prefixed be the full home directory we set up)__@return Path to remote file (usually hdfs);static Tuple2<Path, LocalResource> setupLocalResource(_		FileSystem fs,_		String appId,_		Path localSrcPath,_		Path homedir,_		String relativeTargetPath) throws IOException {__		if (new File(localSrcPath.toUri().getPath()).isDirectory()) {_			throw new IllegalArgumentException("File to copy must not be a directory: " +_				localSrcPath)__		}__		_		String suffix =_			".flink/"_				+ appId_				+ (relativeTargetPath.isEmpty() ? "" : "/" + relativeTargetPath)_				+ "/" + localSrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localSrcPath + " to " + dst)___		fs.copyFromLocalFile(false, true, localSrcPath, dst)___		_		LocalResource resource = registerLocalResource(fs, dst)__		return Tuple2.of(dst, resource)__	};copy,a,local,file,to,a,remote,file,system,param,fs,remote,filesystem,param,app,id,application,id,param,local,src,path,path,to,the,local,file,param,homedir,remote,home,directory,base,will,be,extended,param,relative,target,path,relative,target,path,of,the,file,will,be,prefixed,be,the,full,home,directory,we,set,up,return,path,to,remote,file,usually,hdfs;static,tuple2,path,local,resource,setup,local,resource,file,system,fs,string,app,id,path,local,src,path,path,homedir,string,relative,target,path,throws,ioexception,if,new,file,local,src,path,to,uri,get,path,is,directory,throw,new,illegal,argument,exception,file,to,copy,must,not,be,a,directory,local,src,path,string,suffix,flink,app,id,relative,target,path,is,empty,relative,target,path,local,src,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,src,path,to,dst,fs,copy,from,local,file,false,true,local,src,path,dst,local,resource,resource,register,local,resource,fs,dst,return,tuple2,of,dst,resource
Utils -> static Tuple2<Path, LocalResource> setupLocalResource( 		FileSystem fs, 		String appId, 		Path localSrcPath, 		Path homedir, 		String relativeTargetPath) throws IOException;1521554043;Copy a local file to a remote file system.__@param fs_remote filesystem_@param appId_application ID_@param localSrcPath_path to the local file_@param homedir_remote home directory base (will be extended)_@param relativeTargetPath_relative target path of the file (will be prefixed be the full home directory we set up)__@return Path to remote file (usually hdfs);static Tuple2<Path, LocalResource> setupLocalResource(_		FileSystem fs,_		String appId,_		Path localSrcPath,_		Path homedir,_		String relativeTargetPath) throws IOException {__		File localFile = new File(localSrcPath.toUri().getPath())__		if (localFile.isDirectory()) {_			throw new IllegalArgumentException("File to copy must not be a directory: " +_				localSrcPath)__		}__		_		String suffix =_			".flink/"_				+ appId_				+ (relativeTargetPath.isEmpty() ? "" : "/" + relativeTargetPath)_				+ "/" + localSrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.info("Copying from " + localSrcPath + " to " + dst)___		fs.copyFromLocalFile(false, true, localSrcPath, dst)___		_		_		_		_		_		fs.setTimes(dst, localFile.lastModified(), -1)__		_		LocalResource resource = registerLocalResource(dst, localFile.length(), localFile.lastModified())___		return Tuple2.of(dst, resource)__	};copy,a,local,file,to,a,remote,file,system,param,fs,remote,filesystem,param,app,id,application,id,param,local,src,path,path,to,the,local,file,param,homedir,remote,home,directory,base,will,be,extended,param,relative,target,path,relative,target,path,of,the,file,will,be,prefixed,be,the,full,home,directory,we,set,up,return,path,to,remote,file,usually,hdfs;static,tuple2,path,local,resource,setup,local,resource,file,system,fs,string,app,id,path,local,src,path,path,homedir,string,relative,target,path,throws,ioexception,file,local,file,new,file,local,src,path,to,uri,get,path,if,local,file,is,directory,throw,new,illegal,argument,exception,file,to,copy,must,not,be,a,directory,local,src,path,string,suffix,flink,app,id,relative,target,path,is,empty,relative,target,path,local,src,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,src,path,to,dst,fs,copy,from,local,file,false,true,local,src,path,dst,fs,set,times,dst,local,file,last,modified,1,local,resource,resource,register,local,resource,dst,local,file,length,local,file,last,modified,return,tuple2,of,dst,resource
Utils -> static Tuple2<Path, LocalResource> setupLocalResource( 		FileSystem fs, 		String appId, 		Path localSrcPath, 		Path homedir, 		String relativeTargetPath) throws IOException;1524050030;Copy a local file to a remote file system.__@param fs_remote filesystem_@param appId_application ID_@param localSrcPath_path to the local file_@param homedir_remote home directory base (will be extended)_@param relativeTargetPath_relative target path of the file (will be prefixed be the full home directory we set up)__@return Path to remote file (usually hdfs);static Tuple2<Path, LocalResource> setupLocalResource(_		FileSystem fs,_		String appId,_		Path localSrcPath,_		Path homedir,_		String relativeTargetPath) throws IOException {__		File localFile = new File(localSrcPath.toUri().getPath())__		if (localFile.isDirectory()) {_			throw new IllegalArgumentException("File to copy must not be a directory: " +_				localSrcPath)__		}__		_		String suffix =_			".flink/"_				+ appId_				+ (relativeTargetPath.isEmpty() ? "" : "/" + relativeTargetPath)_				+ "/" + localSrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.debug("Copying from " + localSrcPath + " to " + dst)___		fs.copyFromLocalFile(false, true, localSrcPath, dst)___		_		_		_		_		_		fs.setTimes(dst, localFile.lastModified(), -1)__		_		LocalResource resource = registerLocalResource(dst, localFile.length(), localFile.lastModified())___		return Tuple2.of(dst, resource)__	};copy,a,local,file,to,a,remote,file,system,param,fs,remote,filesystem,param,app,id,application,id,param,local,src,path,path,to,the,local,file,param,homedir,remote,home,directory,base,will,be,extended,param,relative,target,path,relative,target,path,of,the,file,will,be,prefixed,be,the,full,home,directory,we,set,up,return,path,to,remote,file,usually,hdfs;static,tuple2,path,local,resource,setup,local,resource,file,system,fs,string,app,id,path,local,src,path,path,homedir,string,relative,target,path,throws,ioexception,file,local,file,new,file,local,src,path,to,uri,get,path,if,local,file,is,directory,throw,new,illegal,argument,exception,file,to,copy,must,not,be,a,directory,local,src,path,string,suffix,flink,app,id,relative,target,path,is,empty,relative,target,path,local,src,path,get,name,path,dst,new,path,homedir,suffix,log,debug,copying,from,local,src,path,to,dst,fs,copy,from,local,file,false,true,local,src,path,dst,fs,set,times,dst,local,file,last,modified,1,local,resource,resource,register,local,resource,dst,local,file,length,local,file,last,modified,return,tuple2,of,dst,resource
Utils -> static Tuple2<Path, LocalResource> setupLocalResource( 		FileSystem fs, 		String appId, 		Path localSrcPath, 		Path homedir, 		String relativeTargetPath) throws IOException;1525116055;Copy a local file to a remote file system.__@param fs_remote filesystem_@param appId_application ID_@param localSrcPath_path to the local file_@param homedir_remote home directory base (will be extended)_@param relativeTargetPath_relative target path of the file (will be prefixed be the full home directory we set up)__@return Path to remote file (usually hdfs);static Tuple2<Path, LocalResource> setupLocalResource(_		FileSystem fs,_		String appId,_		Path localSrcPath,_		Path homedir,_		String relativeTargetPath) throws IOException {__		File localFile = new File(localSrcPath.toUri().getPath())__		if (localFile.isDirectory()) {_			throw new IllegalArgumentException("File to copy must not be a directory: " +_				localSrcPath)__		}__		_		String suffix =_			".flink/"_				+ appId_				+ (relativeTargetPath.isEmpty() ? "" : "/" + relativeTargetPath)_				+ "/" + localSrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.debug("Copying from {} to {}", localSrcPath, dst)___		fs.copyFromLocalFile(false, true, localSrcPath, dst)___		_		_		_		_		_		fs.setTimes(dst, localFile.lastModified(), -1)__		_		LocalResource resource = registerLocalResource(dst, localFile.length(), localFile.lastModified())___		return Tuple2.of(dst, resource)__	};copy,a,local,file,to,a,remote,file,system,param,fs,remote,filesystem,param,app,id,application,id,param,local,src,path,path,to,the,local,file,param,homedir,remote,home,directory,base,will,be,extended,param,relative,target,path,relative,target,path,of,the,file,will,be,prefixed,be,the,full,home,directory,we,set,up,return,path,to,remote,file,usually,hdfs;static,tuple2,path,local,resource,setup,local,resource,file,system,fs,string,app,id,path,local,src,path,path,homedir,string,relative,target,path,throws,ioexception,file,local,file,new,file,local,src,path,to,uri,get,path,if,local,file,is,directory,throw,new,illegal,argument,exception,file,to,copy,must,not,be,a,directory,local,src,path,string,suffix,flink,app,id,relative,target,path,is,empty,relative,target,path,local,src,path,get,name,path,dst,new,path,homedir,suffix,log,debug,copying,from,to,local,src,path,dst,fs,copy,from,local,file,false,true,local,src,path,dst,fs,set,times,dst,local,file,last,modified,1,local,resource,resource,register,local,resource,dst,local,file,length,local,file,last,modified,return,tuple2,of,dst,resource
Utils -> static Tuple2<Path, LocalResource> setupLocalResource( 		FileSystem fs, 		String appId, 		Path localSrcPath, 		Path homedir, 		String relativeTargetPath) throws IOException;1525116069;Copy a local file to a remote file system.__@param fs_remote filesystem_@param appId_application ID_@param localSrcPath_path to the local file_@param homedir_remote home directory base (will be extended)_@param relativeTargetPath_relative target path of the file (will be prefixed be the full home directory we set up)__@return Path to remote file (usually hdfs);static Tuple2<Path, LocalResource> setupLocalResource(_		FileSystem fs,_		String appId,_		Path localSrcPath,_		Path homedir,_		String relativeTargetPath) throws IOException {__		File localFile = new File(localSrcPath.toUri().getPath())__		if (localFile.isDirectory()) {_			throw new IllegalArgumentException("File to copy must not be a directory: " +_				localSrcPath)__		}__		_		String suffix =_			".flink/"_				+ appId_				+ (relativeTargetPath.isEmpty() ? "" : "/" + relativeTargetPath)_				+ "/" + localSrcPath.getName()___		Path dst = new Path(homedir, suffix)___		LOG.debug("Copying from {} to {}", localSrcPath, dst)___		fs.copyFromLocalFile(false, true, localSrcPath, dst)___		_		_		_		_		_		fs.setTimes(dst, localFile.lastModified(), -1)__		_		LocalResource resource = registerLocalResource(dst, localFile.length(), localFile.lastModified())___		return Tuple2.of(dst, resource)__	};copy,a,local,file,to,a,remote,file,system,param,fs,remote,filesystem,param,app,id,application,id,param,local,src,path,path,to,the,local,file,param,homedir,remote,home,directory,base,will,be,extended,param,relative,target,path,relative,target,path,of,the,file,will,be,prefixed,be,the,full,home,directory,we,set,up,return,path,to,remote,file,usually,hdfs;static,tuple2,path,local,resource,setup,local,resource,file,system,fs,string,app,id,path,local,src,path,path,homedir,string,relative,target,path,throws,ioexception,file,local,file,new,file,local,src,path,to,uri,get,path,if,local,file,is,directory,throw,new,illegal,argument,exception,file,to,copy,must,not,be,a,directory,local,src,path,string,suffix,flink,app,id,relative,target,path,is,empty,relative,target,path,local,src,path,get,name,path,dst,new,path,homedir,suffix,log,debug,copying,from,to,local,src,path,dst,fs,copy,from,local,file,false,true,local,src,path,dst,fs,set,times,dst,local,file,last,modified,1,local,resource,resource,register,local,resource,dst,local,file,length,local,file,last,modified,return,tuple2,of,dst,resource
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1427784999;Calculate the heap size for the JVMs to start in the containers._Since JVMs are allocating more than just the heap space, and YARN is very_fast at killing processes that use memory beyond their limit, we have to come_up with a good heapsize._This code takes 85% of the given amount of memory (in MB). If the amount we removed by these 85%_more than 500MB (the current HEAP_LIMIT_CAP), we'll just subtract 500 MB.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {_		float memoryCutoffRatio = conf.getFloat(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int heapLimitCap = conf.getInteger(ConfigConstants.YARN_HEAP_LIMIT_CAP, DEFAULT_HEAP_LIMIT_CAP)___		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if( (memory - heapLimit) > heapLimitCap) {_			heapLimit = memory-heapLimitCap__		}_		return heapLimit__	};calculate,the,heap,size,for,the,jvms,to,start,in,the,containers,since,jvms,are,allocating,more,than,just,the,heap,space,and,yarn,is,very,fast,at,killing,processes,that,use,memory,beyond,their,limit,we,have,to,come,up,with,a,good,heapsize,this,code,takes,85,of,the,given,amount,of,memory,in,mb,if,the,amount,we,removed,by,these,85,more,than,500mb,the,current,we,ll,just,subtract,500,mb;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,config,constants,int,heap,limit,cap,conf,get,integer,config,constants,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,memory,heap,limit,heap,limit,cap,heap,limit,memory,heap,limit,cap,return,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1430233764;See documentation;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {_		float memoryCutoffRatio = conf.getFloat(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.DEFAULT_YARN_MIN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"+ConfigConstants.YARN_HEAP_CUTOFF_RATIO+"' must be between 0 and 1. Value given="+memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"+ConfigConstants.YARN_HEAP_CUTOFF_MIN +"' is higher ("+minCutoff+") than the requested amount of memory "+memory)__		}__		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1439412404;See documentation;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {_		float memoryCutoffRatio = conf.getFloat(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.DEFAULT_YARN_MIN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '" + ConfigConstants.YARN_HEAP_CUTOFF_RATIO + "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '" + ConfigConstants.YARN_HEAP_CUTOFF_MIN + "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1443564120;See documentation;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {_		float memoryCutoffRatio = conf.getFloat(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.DEFAULT_YARN_MIN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '" + ConfigConstants.YARN_HEAP_CUTOFF_RATIO + "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '" + ConfigConstants.YARN_HEAP_CUTOFF_MIN + "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1447679882;See documentation;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {_		float memoryCutoffRatio = conf.getFloat(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.DEFAULT_YARN_MIN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '" + ConfigConstants.YARN_HEAP_CUTOFF_RATIO + "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '" + ConfigConstants.YARN_HEAP_CUTOFF_MIN + "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1449314233;See documentation;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {_		float memoryCutoffRatio = conf.getFloat(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.DEFAULT_YARN_MIN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '" + ConfigConstants.YARN_HEAP_CUTOFF_RATIO + "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '" + ConfigConstants.YARN_HEAP_CUTOFF_MIN + "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1459248706;See documentation;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.CONTAINERED_HEAP_CUTOFF_RATIO)__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.CONTAINERED_HEAP_CUTOFF_MIN)___		float memoryCutoffRatio = conf.getFloat(ConfigConstants.CONTAINERED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.CONTAINERED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERED_HEAP_CUTOFF_RATIO_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERED_HEAP_CUTOFF_MIN_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1467379351;See documentation;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.CONTAINERED_HEAP_CUTOFF_RATIO)__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.CONTAINERED_HEAP_CUTOFF_MIN)___		float memoryCutoffRatio = conf.getFloat(ConfigConstants.CONTAINERED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.CONTAINERED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERED_HEAP_CUTOFF_RATIO_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERED_HEAP_CUTOFF_MIN_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1468399420;See documentation;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN)___		float memoryCutoffRatio = conf.getFloat(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1473329065;See documentation;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN)___		float memoryCutoffRatio = conf.getFloat(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1474401809;See documentation;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN)___		float memoryCutoffRatio = conf.getFloat(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1487015510;See documentation;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN)___		float memoryCutoffRatio = conf.getFloat(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int)((float)memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1495819079;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN)___		float memoryCutoffRatio = conf.getFloat(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1498894422;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN)___		float memoryCutoffRatio = conf.getFloat(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1498894422;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN)___		float memoryCutoffRatio = conf.getFloat(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1499939555;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_RATIO, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		BootstrapTools.substituteDeprecatedConfigKey(conf,_			ConfigConstants.YARN_HEAP_CUTOFF_MIN, ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN)___		float memoryCutoffRatio = conf.getFloat(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN,_			ConfigConstants.DEFAULT_YARN_HEAP_CUTOFF)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,bootstrap,tools,substitute,deprecated,config,key,conf,config,constants,config,constants,float,memory,cutoff,ratio,conf,get,float,config,constants,config,constants,int,min,cutoff,conf,get,integer,config,constants,config,constants,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,config,constants,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,config,constants,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1502357790;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		float memoryCutoffRatio = conf.getFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key()_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key()_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,resource,manager,options,int,min,cutoff,conf,get,integer,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1506499511;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		float memoryCutoffRatio = conf.getFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key()_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key()_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,resource,manager,options,int,min,cutoff,conf,get,integer,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1510999087;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		float memoryCutoffRatio = conf.getFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key()_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key()_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,resource,manager,options,int,min,cutoff,conf,get,integer,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1515770046;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		float memoryCutoffRatio = conf.getFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key()_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key()_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,resource,manager,options,int,min,cutoff,conf,get,integer,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1519839433;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		float memoryCutoffRatio = conf.getFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key()_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key()_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,resource,manager,options,int,min,cutoff,conf,get,integer,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1521537481;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		float memoryCutoffRatio = conf.getFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key()_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key()_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,resource,manager,options,int,min,cutoff,conf,get,integer,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1521537482;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		float memoryCutoffRatio = conf.getFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key()_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key()_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,resource,manager,options,int,min,cutoff,conf,get,integer,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1521554043;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		float memoryCutoffRatio = conf.getFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key()_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key()_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,resource,manager,options,int,min,cutoff,conf,get,integer,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1524050030;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		float memoryCutoffRatio = conf.getFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key()_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key()_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,resource,manager,options,int,min,cutoff,conf,get,integer,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1525116055;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		float memoryCutoffRatio = conf.getFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key()_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key()_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,resource,manager,options,int,min,cutoff,conf,get,integer,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf);1525116069;See documentation.;public static int calculateHeapSize(int memory, org.apache.flink.configuration.Configuration conf) {__		float memoryCutoffRatio = conf.getFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO)__		int minCutoff = conf.getInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN)___		if (memoryCutoffRatio > 1 || memoryCutoffRatio < 0) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key()_				+ "' must be between 0 and 1. Value given=" + memoryCutoffRatio)__		}_		if (minCutoff > memory) {_			throw new IllegalArgumentException("The configuration value '"_				+ ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key()_				+ "' is higher (" + minCutoff + ") than the requested amount of memory " + memory)__		}__		int heapLimit = (int) ((float) memory * memoryCutoffRatio)__		if (heapLimit < minCutoff) {_			heapLimit = minCutoff__		}_		return memory - heapLimit__	};see,documentation;public,static,int,calculate,heap,size,int,memory,org,apache,flink,configuration,configuration,conf,float,memory,cutoff,ratio,conf,get,float,resource,manager,options,int,min,cutoff,conf,get,integer,resource,manager,options,if,memory,cutoff,ratio,1,memory,cutoff,ratio,0,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,must,be,between,0,and,1,value,given,memory,cutoff,ratio,if,min,cutoff,memory,throw,new,illegal,argument,exception,the,configuration,value,resource,manager,options,key,is,higher,min,cutoff,than,the,requested,amount,of,memory,memory,int,heap,limit,int,float,memory,memory,cutoff,ratio,if,heap,limit,min,cutoff,heap,limit,min,cutoff,return,memory,heap,limit
Utils -> public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir) 			throws IOException;1422034750;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir)_			throws IOException {_		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()__		_		Path dst = new Path(homedir, suffix)__		_		LOG.info("Copying from "+localRsrcPath+" to "+dst )__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,configuration,conf,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir) 			throws IOException;1423061851;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir)_			throws IOException {_		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()__		_		Path dst = new Path(homedir, suffix)__		_		LOG.info("Copying from "+localRsrcPath+" to "+dst )__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,configuration,conf,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir) 			throws IOException;1425404194;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir)_			throws IOException {_		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()__		_		Path dst = new Path(homedir, suffix)__		_		LOG.info("Copying from "+localRsrcPath+" to "+dst )__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,configuration,conf,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir) 			throws IOException;1427784999;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir)_			throws IOException {_		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()__		_		Path dst = new Path(homedir, suffix)__		_		LOG.info("Copying from "+localRsrcPath+" to "+dst )__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,configuration,conf,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir) 			throws IOException;1430233764;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir)_			throws IOException {_		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()__		_		Path dst = new Path(homedir, suffix)__		_		LOG.info("Copying from "+localRsrcPath+" to "+dst )__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,configuration,conf,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir) 			throws IOException;1439412404;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir)_			throws IOException {_		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()__		_		Path dst = new Path(homedir, suffix)__		_		LOG.info("Copying from " + localRsrcPath + " to " + dst )__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,configuration,conf,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir) 			throws IOException;1443564120;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir)_			throws IOException {_		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()__		_		Path dst = new Path(homedir, suffix)__		_		LOG.info("Copying from " + localRsrcPath + " to " + dst )__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,configuration,conf,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir) 			throws IOException;1447679882;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir)_			throws IOException {_		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()__		_		Path dst = new Path(homedir, suffix)__		_		LOG.info("Copying from " + localRsrcPath + " to " + dst )__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,configuration,conf,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
Utils -> public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir) 			throws IOException;1449314233;@return Path to remote file (usually hdfs)_@throws IOException;public static Path setupLocalResource(Configuration conf, FileSystem fs, String appId, Path localRsrcPath, LocalResource appMasterJar, Path homedir)_			throws IOException {_		_		String suffix = ".flink/" + appId + "/" + localRsrcPath.getName()__		_		Path dst = new Path(homedir, suffix)__		_		LOG.info("Copying from " + localRsrcPath + " to " + dst)__		fs.copyFromLocalFile(localRsrcPath, dst)__		registerLocalResource(fs, dst, appMasterJar)__		return dst__	};return,path,to,remote,file,usually,hdfs,throws,ioexception;public,static,path,setup,local,resource,configuration,conf,file,system,fs,string,app,id,path,local,rsrc,path,local,resource,app,master,jar,path,homedir,throws,ioexception,string,suffix,flink,app,id,local,rsrc,path,get,name,path,dst,new,path,homedir,suffix,log,info,copying,from,local,rsrc,path,to,dst,fs,copy,from,local,file,local,rsrc,path,dst,register,local,resource,fs,dst,app,master,jar,return,dst
