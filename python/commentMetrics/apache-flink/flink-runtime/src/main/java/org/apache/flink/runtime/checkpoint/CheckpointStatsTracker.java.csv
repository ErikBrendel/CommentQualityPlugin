# id;timestamp;commentText;codeText;commentWords;codeWords
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportFailedCheckpoint(FailedCheckpointStats failed);1484038132;Report a failed checkpoint.__@param failed The failed checkpoint.;void reportFailedCheckpoint(FailedCheckpointStats failed) {_			CheckpointStatsTracker.this.reportFailedCheckpoint(failed)__		};report,a,failed,checkpoint,param,failed,the,failed,checkpoint;void,report,failed,checkpoint,failed,checkpoint,stats,failed,checkpoint,stats,tracker,this,report,failed,checkpoint,failed
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportFailedCheckpoint(FailedCheckpointStats failed);1485790402;Report a failed checkpoint.__@param failed The failed checkpoint.;void reportFailedCheckpoint(FailedCheckpointStats failed) {_			CheckpointStatsTracker.this.reportFailedCheckpoint(failed)__		};report,a,failed,checkpoint,param,failed,the,failed,checkpoint;void,report,failed,checkpoint,failed,checkpoint,stats,failed,checkpoint,stats,tracker,this,report,failed,checkpoint,failed
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportFailedCheckpoint(FailedCheckpointStats failed);1490214056;Report a failed checkpoint.__@param failed The failed checkpoint.;void reportFailedCheckpoint(FailedCheckpointStats failed) {_			CheckpointStatsTracker.this.reportFailedCheckpoint(failed)__		};report,a,failed,checkpoint,param,failed,the,failed,checkpoint;void,report,failed,checkpoint,failed,checkpoint,stats,failed,checkpoint,stats,tracker,this,report,failed,checkpoint,failed
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportFailedCheckpoint(FailedCheckpointStats failed);1492678790;Report a failed checkpoint.__@param failed The failed checkpoint.;void reportFailedCheckpoint(FailedCheckpointStats failed) {_			CheckpointStatsTracker.this.reportFailedCheckpoint(failed)__		};report,a,failed,checkpoint,param,failed,the,failed,checkpoint;void,report,failed,checkpoint,failed,checkpoint,stats,failed,checkpoint,stats,tracker,this,report,failed,checkpoint,failed
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportFailedCheckpoint(FailedCheckpointStats failed);1505995902;Report a failed checkpoint.__@param failed The failed checkpoint.;void reportFailedCheckpoint(FailedCheckpointStats failed) {_			CheckpointStatsTracker.this.reportFailedCheckpoint(failed)__		};report,a,failed,checkpoint,param,failed,the,failed,checkpoint;void,report,failed,checkpoint,failed,checkpoint,stats,failed,checkpoint,stats,tracker,this,report,failed,checkpoint,failed
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportFailedCheckpoint(FailedCheckpointStats failed);1506590912;Report a failed checkpoint.__@param failed The failed checkpoint.;void reportFailedCheckpoint(FailedCheckpointStats failed) {_			CheckpointStatsTracker.this.reportFailedCheckpoint(failed)__		};report,a,failed,checkpoint,param,failed,the,failed,checkpoint;void,report,failed,checkpoint,failed,checkpoint,stats,failed,checkpoint,stats,tracker,this,report,failed,checkpoint,failed
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportFailedCheckpoint(FailedCheckpointStats failed);1506618381;Report a failed checkpoint.__@param failed The failed checkpoint.;void reportFailedCheckpoint(FailedCheckpointStats failed) {_			CheckpointStatsTracker.this.reportFailedCheckpoint(failed)__		};report,a,failed,checkpoint,param,failed,the,failed,checkpoint;void,report,failed,checkpoint,failed,checkpoint,stats,failed,checkpoint,stats,tracker,this,report,failed,checkpoint,failed
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportFailedCheckpoint(FailedCheckpointStats failed);1521741862;Report a failed checkpoint.__@param failed The failed checkpoint.;void reportFailedCheckpoint(FailedCheckpointStats failed) {_			CheckpointStatsTracker.this.reportFailedCheckpoint(failed)__		};report,a,failed,checkpoint,param,failed,the,failed,checkpoint;void,report,failed,checkpoint,failed,checkpoint,stats,failed,checkpoint,stats,tracker,this,report,failed,checkpoint,failed
CheckpointStatsTracker -> private void reportCompletedCheckpoint(CompletedCheckpointStats completed);1484038132;Callback when a checkpoint completes.__@param completed The completed checkpoint stats.;private void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_		statsReadWriteLock.lock()__		try {_			counts.incrementCompletedCheckpoints()__			history.replacePendingCheckpointById(completed)___			summary.updateSummary(completed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,completes,param,completed,the,completed,checkpoint,stats;private,void,report,completed,checkpoint,completed,checkpoint,stats,completed,stats,read,write,lock,lock,try,counts,increment,completed,checkpoints,history,replace,pending,checkpoint,by,id,completed,summary,update,summary,completed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void reportCompletedCheckpoint(CompletedCheckpointStats completed);1485790402;Callback when a checkpoint completes.__@param completed The completed checkpoint stats.;private void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_		statsReadWriteLock.lock()__		try {_			counts.incrementCompletedCheckpoints()__			history.replacePendingCheckpointById(completed)___			summary.updateSummary(completed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,completes,param,completed,the,completed,checkpoint,stats;private,void,report,completed,checkpoint,completed,checkpoint,stats,completed,stats,read,write,lock,lock,try,counts,increment,completed,checkpoints,history,replace,pending,checkpoint,by,id,completed,summary,update,summary,completed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void reportCompletedCheckpoint(CompletedCheckpointStats completed);1490214056;Callback when a checkpoint completes.__@param completed The completed checkpoint stats.;private void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_		statsReadWriteLock.lock()__		try {_			latestCompletedCheckpoint = completed___			counts.incrementCompletedCheckpoints()__			history.replacePendingCheckpointById(completed)___			summary.updateSummary(completed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,completes,param,completed,the,completed,checkpoint,stats;private,void,report,completed,checkpoint,completed,checkpoint,stats,completed,stats,read,write,lock,lock,try,latest,completed,checkpoint,completed,counts,increment,completed,checkpoints,history,replace,pending,checkpoint,by,id,completed,summary,update,summary,completed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void reportCompletedCheckpoint(CompletedCheckpointStats completed);1492678790;Callback when a checkpoint completes.__@param completed The completed checkpoint stats.;private void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_		statsReadWriteLock.lock()__		try {_			latestCompletedCheckpoint = completed___			counts.incrementCompletedCheckpoints()__			history.replacePendingCheckpointById(completed)___			summary.updateSummary(completed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,completes,param,completed,the,completed,checkpoint,stats;private,void,report,completed,checkpoint,completed,checkpoint,stats,completed,stats,read,write,lock,lock,try,latest,completed,checkpoint,completed,counts,increment,completed,checkpoints,history,replace,pending,checkpoint,by,id,completed,summary,update,summary,completed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void reportCompletedCheckpoint(CompletedCheckpointStats completed);1505995902;Callback when a checkpoint completes.__@param completed The completed checkpoint stats.;private void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_		statsReadWriteLock.lock()__		try {_			latestCompletedCheckpoint = completed___			counts.incrementCompletedCheckpoints()__			history.replacePendingCheckpointById(completed)___			summary.updateSummary(completed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,completes,param,completed,the,completed,checkpoint,stats;private,void,report,completed,checkpoint,completed,checkpoint,stats,completed,stats,read,write,lock,lock,try,latest,completed,checkpoint,completed,counts,increment,completed,checkpoints,history,replace,pending,checkpoint,by,id,completed,summary,update,summary,completed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void reportCompletedCheckpoint(CompletedCheckpointStats completed);1506590912;Callback when a checkpoint completes.__@param completed The completed checkpoint stats.;private void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_		statsReadWriteLock.lock()__		try {_			latestCompletedCheckpoint = completed___			counts.incrementCompletedCheckpoints()__			history.replacePendingCheckpointById(completed)___			summary.updateSummary(completed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,completes,param,completed,the,completed,checkpoint,stats;private,void,report,completed,checkpoint,completed,checkpoint,stats,completed,stats,read,write,lock,lock,try,latest,completed,checkpoint,completed,counts,increment,completed,checkpoints,history,replace,pending,checkpoint,by,id,completed,summary,update,summary,completed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void reportCompletedCheckpoint(CompletedCheckpointStats completed);1506618381;Callback when a checkpoint completes.__@param completed The completed checkpoint stats.;private void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_		statsReadWriteLock.lock()__		try {_			latestCompletedCheckpoint = completed___			counts.incrementCompletedCheckpoints()__			history.replacePendingCheckpointById(completed)___			summary.updateSummary(completed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,completes,param,completed,the,completed,checkpoint,stats;private,void,report,completed,checkpoint,completed,checkpoint,stats,completed,stats,read,write,lock,lock,try,latest,completed,checkpoint,completed,counts,increment,completed,checkpoints,history,replace,pending,checkpoint,by,id,completed,summary,update,summary,completed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void reportCompletedCheckpoint(CompletedCheckpointStats completed);1521741862;Callback when a checkpoint completes.__@param completed The completed checkpoint stats.;private void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_		statsReadWriteLock.lock()__		try {_			latestCompletedCheckpoint = completed___			counts.incrementCompletedCheckpoints()__			history.replacePendingCheckpointById(completed)___			summary.updateSummary(completed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,completes,param,completed,the,completed,checkpoint,stats;private,void,report,completed,checkpoint,completed,checkpoint,stats,completed,stats,read,write,lock,lock,try,latest,completed,checkpoint,completed,counts,increment,completed,checkpoints,history,replace,pending,checkpoint,by,id,completed,summary,update,summary,completed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> void reportRestoredCheckpoint(RestoredCheckpointStats restored);1485790402;Callback when a checkpoint is restored.__@param restored The restored checkpoint stats.;void reportRestoredCheckpoint(RestoredCheckpointStats restored) {_		checkNotNull(restored, "Restored checkpoint")___		statsReadWriteLock.lock()__		try {_			counts.incrementRestoredCheckpoints()__			latestRestoredCheckpoint = restored___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,is,restored,param,restored,the,restored,checkpoint,stats;void,report,restored,checkpoint,restored,checkpoint,stats,restored,check,not,null,restored,restored,checkpoint,stats,read,write,lock,lock,try,counts,increment,restored,checkpoints,latest,restored,checkpoint,restored,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> void reportRestoredCheckpoint(RestoredCheckpointStats restored);1490214056;Callback when a checkpoint is restored.__@param restored The restored checkpoint stats.;void reportRestoredCheckpoint(RestoredCheckpointStats restored) {_		checkNotNull(restored, "Restored checkpoint")___		statsReadWriteLock.lock()__		try {_			counts.incrementRestoredCheckpoints()__			latestRestoredCheckpoint = restored___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,is,restored,param,restored,the,restored,checkpoint,stats;void,report,restored,checkpoint,restored,checkpoint,stats,restored,check,not,null,restored,restored,checkpoint,stats,read,write,lock,lock,try,counts,increment,restored,checkpoints,latest,restored,checkpoint,restored,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> void reportRestoredCheckpoint(RestoredCheckpointStats restored);1492678790;Callback when a checkpoint is restored.__@param restored The restored checkpoint stats.;void reportRestoredCheckpoint(RestoredCheckpointStats restored) {_		checkNotNull(restored, "Restored checkpoint")___		statsReadWriteLock.lock()__		try {_			counts.incrementRestoredCheckpoints()__			latestRestoredCheckpoint = restored___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,is,restored,param,restored,the,restored,checkpoint,stats;void,report,restored,checkpoint,restored,checkpoint,stats,restored,check,not,null,restored,restored,checkpoint,stats,read,write,lock,lock,try,counts,increment,restored,checkpoints,latest,restored,checkpoint,restored,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> void reportRestoredCheckpoint(RestoredCheckpointStats restored);1505995902;Callback when a checkpoint is restored.__@param restored The restored checkpoint stats.;void reportRestoredCheckpoint(RestoredCheckpointStats restored) {_		checkNotNull(restored, "Restored checkpoint")___		statsReadWriteLock.lock()__		try {_			counts.incrementRestoredCheckpoints()__			latestRestoredCheckpoint = restored___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,is,restored,param,restored,the,restored,checkpoint,stats;void,report,restored,checkpoint,restored,checkpoint,stats,restored,check,not,null,restored,restored,checkpoint,stats,read,write,lock,lock,try,counts,increment,restored,checkpoints,latest,restored,checkpoint,restored,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> void reportRestoredCheckpoint(RestoredCheckpointStats restored);1506590912;Callback when a checkpoint is restored.__@param restored The restored checkpoint stats.;void reportRestoredCheckpoint(RestoredCheckpointStats restored) {_		checkNotNull(restored, "Restored checkpoint")___		statsReadWriteLock.lock()__		try {_			counts.incrementRestoredCheckpoints()__			latestRestoredCheckpoint = restored___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,is,restored,param,restored,the,restored,checkpoint,stats;void,report,restored,checkpoint,restored,checkpoint,stats,restored,check,not,null,restored,restored,checkpoint,stats,read,write,lock,lock,try,counts,increment,restored,checkpoints,latest,restored,checkpoint,restored,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> void reportRestoredCheckpoint(RestoredCheckpointStats restored);1506618381;Callback when a checkpoint is restored.__@param restored The restored checkpoint stats.;void reportRestoredCheckpoint(RestoredCheckpointStats restored) {_		checkNotNull(restored, "Restored checkpoint")___		statsReadWriteLock.lock()__		try {_			counts.incrementRestoredCheckpoints()__			latestRestoredCheckpoint = restored___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,is,restored,param,restored,the,restored,checkpoint,stats;void,report,restored,checkpoint,restored,checkpoint,stats,restored,check,not,null,restored,restored,checkpoint,stats,read,write,lock,lock,try,counts,increment,restored,checkpoints,latest,restored,checkpoint,restored,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> void reportRestoredCheckpoint(RestoredCheckpointStats restored);1521741862;Callback when a checkpoint is restored.__@param restored The restored checkpoint stats.;void reportRestoredCheckpoint(RestoredCheckpointStats restored) {_		checkNotNull(restored, "Restored checkpoint")___		statsReadWriteLock.lock()__		try {_			counts.incrementRestoredCheckpoints()__			latestRestoredCheckpoint = restored___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,is,restored,param,restored,the,restored,checkpoint,stats;void,report,restored,checkpoint,restored,checkpoint,stats,restored,check,not,null,restored,restored,checkpoint,stats,read,write,lock,lock,try,counts,increment,restored,checkpoints,latest,restored,checkpoint,restored,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> public JobCheckpointingSettings getSnapshottingSettings();1492678790;Returns the job's snapshotting settings which are derived from the_CheckpointConfig.__@return The job's snapshotting settings.;public JobCheckpointingSettings getSnapshottingSettings() {_		return jobCheckpointingSettings__	};returns,the,job,s,snapshotting,settings,which,are,derived,from,the,checkpoint,config,return,the,job,s,snapshotting,settings;public,job,checkpointing,settings,get,snapshotting,settings,return,job,checkpointing,settings
CheckpointStatsTracker -> public JobCheckpointingSettings getSnapshottingSettings();1505995902;Returns the job's snapshotting settings which are derived from the_CheckpointConfig.__@return The job's snapshotting settings.;public JobCheckpointingSettings getSnapshottingSettings() {_		return jobCheckpointingSettings__	};returns,the,job,s,snapshotting,settings,which,are,derived,from,the,checkpoint,config,return,the,job,s,snapshotting,settings;public,job,checkpointing,settings,get,snapshotting,settings,return,job,checkpointing,settings
CheckpointStatsTracker -> public JobCheckpointingSettings getSnapshottingSettings();1506590912;Returns the job's snapshotting settings which are derived from the_CheckpointConfig.__@return The job's snapshotting settings.;public JobCheckpointingSettings getSnapshottingSettings() {_		return jobCheckpointingSettings__	};returns,the,job,s,snapshotting,settings,which,are,derived,from,the,checkpoint,config,return,the,job,s,snapshotting,settings;public,job,checkpointing,settings,get,snapshotting,settings,return,job,checkpointing,settings
CheckpointStatsTracker -> public CheckpointCoordinatorConfiguration getJobCheckpointingConfiguration();1506618381;Returns the job's checkpointing configuration which is derived from the_CheckpointConfig.__@return The job's checkpointing configuration.;public CheckpointCoordinatorConfiguration getJobCheckpointingConfiguration() {_		return jobCheckpointingConfiguration__	};returns,the,job,s,checkpointing,configuration,which,is,derived,from,the,checkpoint,config,return,the,job,s,checkpointing,configuration;public,checkpoint,coordinator,configuration,get,job,checkpointing,configuration,return,job,checkpointing,configuration
CheckpointStatsTracker -> public CheckpointCoordinatorConfiguration getJobCheckpointingConfiguration();1521741862;Returns the job's checkpointing configuration which is derived from the_CheckpointConfig.__@return The job's checkpointing configuration.;public CheckpointCoordinatorConfiguration getJobCheckpointingConfiguration() {_		return jobCheckpointingConfiguration__	};returns,the,job,s,checkpointing,configuration,which,is,derived,from,the,checkpoint,config,return,the,job,s,checkpointing,configuration;public,checkpoint,coordinator,configuration,get,job,checkpointing,configuration,return,job,checkpointing,configuration
CheckpointStatsTracker -> private void reportFailedCheckpoint(FailedCheckpointStats failed);1484038132;Callback when a checkpoint fails.__@param failed The failed checkpoint stats.;private void reportFailedCheckpoint(FailedCheckpointStats failed) {_		statsReadWriteLock.lock()__		try {_			counts.incrementFailedCheckpoints()__			history.replacePendingCheckpointById(failed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,fails,param,failed,the,failed,checkpoint,stats;private,void,report,failed,checkpoint,failed,checkpoint,stats,failed,stats,read,write,lock,lock,try,counts,increment,failed,checkpoints,history,replace,pending,checkpoint,by,id,failed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void reportFailedCheckpoint(FailedCheckpointStats failed);1485790402;Callback when a checkpoint fails.__@param failed The failed checkpoint stats.;private void reportFailedCheckpoint(FailedCheckpointStats failed) {_		statsReadWriteLock.lock()__		try {_			counts.incrementFailedCheckpoints()__			history.replacePendingCheckpointById(failed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,fails,param,failed,the,failed,checkpoint,stats;private,void,report,failed,checkpoint,failed,checkpoint,stats,failed,stats,read,write,lock,lock,try,counts,increment,failed,checkpoints,history,replace,pending,checkpoint,by,id,failed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void reportFailedCheckpoint(FailedCheckpointStats failed);1490214056;Callback when a checkpoint fails.__@param failed The failed checkpoint stats.;private void reportFailedCheckpoint(FailedCheckpointStats failed) {_		statsReadWriteLock.lock()__		try {_			counts.incrementFailedCheckpoints()__			history.replacePendingCheckpointById(failed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,fails,param,failed,the,failed,checkpoint,stats;private,void,report,failed,checkpoint,failed,checkpoint,stats,failed,stats,read,write,lock,lock,try,counts,increment,failed,checkpoints,history,replace,pending,checkpoint,by,id,failed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void reportFailedCheckpoint(FailedCheckpointStats failed);1492678790;Callback when a checkpoint fails.__@param failed The failed checkpoint stats.;private void reportFailedCheckpoint(FailedCheckpointStats failed) {_		statsReadWriteLock.lock()__		try {_			counts.incrementFailedCheckpoints()__			history.replacePendingCheckpointById(failed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,fails,param,failed,the,failed,checkpoint,stats;private,void,report,failed,checkpoint,failed,checkpoint,stats,failed,stats,read,write,lock,lock,try,counts,increment,failed,checkpoints,history,replace,pending,checkpoint,by,id,failed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void reportFailedCheckpoint(FailedCheckpointStats failed);1505995902;Callback when a checkpoint fails.__@param failed The failed checkpoint stats.;private void reportFailedCheckpoint(FailedCheckpointStats failed) {_		statsReadWriteLock.lock()__		try {_			counts.incrementFailedCheckpoints()__			history.replacePendingCheckpointById(failed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,fails,param,failed,the,failed,checkpoint,stats;private,void,report,failed,checkpoint,failed,checkpoint,stats,failed,stats,read,write,lock,lock,try,counts,increment,failed,checkpoints,history,replace,pending,checkpoint,by,id,failed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void reportFailedCheckpoint(FailedCheckpointStats failed);1506590912;Callback when a checkpoint fails.__@param failed The failed checkpoint stats.;private void reportFailedCheckpoint(FailedCheckpointStats failed) {_		statsReadWriteLock.lock()__		try {_			counts.incrementFailedCheckpoints()__			history.replacePendingCheckpointById(failed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,fails,param,failed,the,failed,checkpoint,stats;private,void,report,failed,checkpoint,failed,checkpoint,stats,failed,stats,read,write,lock,lock,try,counts,increment,failed,checkpoints,history,replace,pending,checkpoint,by,id,failed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void reportFailedCheckpoint(FailedCheckpointStats failed);1506618381;Callback when a checkpoint fails.__@param failed The failed checkpoint stats.;private void reportFailedCheckpoint(FailedCheckpointStats failed) {_		statsReadWriteLock.lock()__		try {_			counts.incrementFailedCheckpoints()__			history.replacePendingCheckpointById(failed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,fails,param,failed,the,failed,checkpoint,stats;private,void,report,failed,checkpoint,failed,checkpoint,stats,failed,stats,read,write,lock,lock,try,counts,increment,failed,checkpoints,history,replace,pending,checkpoint,by,id,failed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void reportFailedCheckpoint(FailedCheckpointStats failed);1521741862;Callback when a checkpoint fails.__@param failed The failed checkpoint stats.;private void reportFailedCheckpoint(FailedCheckpointStats failed) {_		statsReadWriteLock.lock()__		try {_			counts.incrementFailedCheckpoints()__			history.replacePendingCheckpointById(failed)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}_	};callback,when,a,checkpoint,fails,param,failed,the,failed,checkpoint,stats;private,void,report,failed,checkpoint,failed,checkpoint,stats,failed,stats,read,write,lock,lock,try,counts,increment,failed,checkpoints,history,replace,pending,checkpoint,by,id,failed,dirty,true,finally,stats,read,write,lock,unlock
CheckpointStatsTracker -> private void registerMetrics(MetricGroup metricGroup);1484038132;Register the exposed metrics.__@param metricGroup Metric group to use for the metrics.;private void registerMetrics(MetricGroup metricGroup) {_		metricGroup.gauge(NUMBER_OF_CHECKPOINTS_METRIC, new CheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_IN_PROGRESS_CHECKPOINTS_METRIC, new InProgressCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_COMPLETED_CHECKPOINTS_METRIC, new CompletedCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_FAILED_CHECKPOINTS_METRIC, new FailedCheckpointsCounter())__		metricGroup.gauge(LATEST_RESTORED_CHECKPOINT_TIMESTAMP_METRIC, new LatestRestoredCheckpointTimestampGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_SIZE_METRIC, new LatestCompletedCheckpointSizeGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_DURATION_METRIC, new LatestCompletedCheckpointDurationGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_ALIGNMENT_BUFFERED_METRIC, new LatestCompletedCheckpointAlignmentBufferedGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_EXTERNAL_PATH_METRIC, new LatestCompletedCheckpointExternalPathGauge())__	};register,the,exposed,metrics,param,metric,group,metric,group,to,use,for,the,metrics;private,void,register,metrics,metric,group,metric,group,metric,group,gauge,new,checkpoints,counter,metric,group,gauge,new,in,progress,checkpoints,counter,metric,group,gauge,new,completed,checkpoints,counter,metric,group,gauge,new,failed,checkpoints,counter,metric,group,gauge,new,latest,restored,checkpoint,timestamp,gauge,metric,group,gauge,new,latest,completed,checkpoint,size,gauge,metric,group,gauge,new,latest,completed,checkpoint,duration,gauge,metric,group,gauge,new,latest,completed,checkpoint,alignment,buffered,gauge,metric,group,gauge,new,latest,completed,checkpoint,external,path,gauge
CheckpointStatsTracker -> private void registerMetrics(MetricGroup metricGroup);1485790402;Register the exposed metrics.__@param metricGroup Metric group to use for the metrics.;private void registerMetrics(MetricGroup metricGroup) {_		metricGroup.gauge(NUMBER_OF_CHECKPOINTS_METRIC, new CheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_IN_PROGRESS_CHECKPOINTS_METRIC, new InProgressCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_COMPLETED_CHECKPOINTS_METRIC, new CompletedCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_FAILED_CHECKPOINTS_METRIC, new FailedCheckpointsCounter())__		metricGroup.gauge(LATEST_RESTORED_CHECKPOINT_TIMESTAMP_METRIC, new LatestRestoredCheckpointTimestampGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_SIZE_METRIC, new LatestCompletedCheckpointSizeGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_DURATION_METRIC, new LatestCompletedCheckpointDurationGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_ALIGNMENT_BUFFERED_METRIC, new LatestCompletedCheckpointAlignmentBufferedGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_EXTERNAL_PATH_METRIC, new LatestCompletedCheckpointExternalPathGauge())__	};register,the,exposed,metrics,param,metric,group,metric,group,to,use,for,the,metrics;private,void,register,metrics,metric,group,metric,group,metric,group,gauge,new,checkpoints,counter,metric,group,gauge,new,in,progress,checkpoints,counter,metric,group,gauge,new,completed,checkpoints,counter,metric,group,gauge,new,failed,checkpoints,counter,metric,group,gauge,new,latest,restored,checkpoint,timestamp,gauge,metric,group,gauge,new,latest,completed,checkpoint,size,gauge,metric,group,gauge,new,latest,completed,checkpoint,duration,gauge,metric,group,gauge,new,latest,completed,checkpoint,alignment,buffered,gauge,metric,group,gauge,new,latest,completed,checkpoint,external,path,gauge
CheckpointStatsTracker -> private void registerMetrics(MetricGroup metricGroup);1490214056;Register the exposed metrics.__@param metricGroup Metric group to use for the metrics.;private void registerMetrics(MetricGroup metricGroup) {_		metricGroup.gauge(NUMBER_OF_CHECKPOINTS_METRIC, new CheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_IN_PROGRESS_CHECKPOINTS_METRIC, new InProgressCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_COMPLETED_CHECKPOINTS_METRIC, new CompletedCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_FAILED_CHECKPOINTS_METRIC, new FailedCheckpointsCounter())__		metricGroup.gauge(LATEST_RESTORED_CHECKPOINT_TIMESTAMP_METRIC, new LatestRestoredCheckpointTimestampGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_SIZE_METRIC, new LatestCompletedCheckpointSizeGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_DURATION_METRIC, new LatestCompletedCheckpointDurationGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_ALIGNMENT_BUFFERED_METRIC, new LatestCompletedCheckpointAlignmentBufferedGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_EXTERNAL_PATH_METRIC, new LatestCompletedCheckpointExternalPathGauge())__	};register,the,exposed,metrics,param,metric,group,metric,group,to,use,for,the,metrics;private,void,register,metrics,metric,group,metric,group,metric,group,gauge,new,checkpoints,counter,metric,group,gauge,new,in,progress,checkpoints,counter,metric,group,gauge,new,completed,checkpoints,counter,metric,group,gauge,new,failed,checkpoints,counter,metric,group,gauge,new,latest,restored,checkpoint,timestamp,gauge,metric,group,gauge,new,latest,completed,checkpoint,size,gauge,metric,group,gauge,new,latest,completed,checkpoint,duration,gauge,metric,group,gauge,new,latest,completed,checkpoint,alignment,buffered,gauge,metric,group,gauge,new,latest,completed,checkpoint,external,path,gauge
CheckpointStatsTracker -> private void registerMetrics(MetricGroup metricGroup);1492678790;Register the exposed metrics.__@param metricGroup Metric group to use for the metrics.;private void registerMetrics(MetricGroup metricGroup) {_		metricGroup.gauge(NUMBER_OF_CHECKPOINTS_METRIC, new CheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_IN_PROGRESS_CHECKPOINTS_METRIC, new InProgressCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_COMPLETED_CHECKPOINTS_METRIC, new CompletedCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_FAILED_CHECKPOINTS_METRIC, new FailedCheckpointsCounter())__		metricGroup.gauge(LATEST_RESTORED_CHECKPOINT_TIMESTAMP_METRIC, new LatestRestoredCheckpointTimestampGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_SIZE_METRIC, new LatestCompletedCheckpointSizeGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_DURATION_METRIC, new LatestCompletedCheckpointDurationGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_ALIGNMENT_BUFFERED_METRIC, new LatestCompletedCheckpointAlignmentBufferedGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_EXTERNAL_PATH_METRIC, new LatestCompletedCheckpointExternalPathGauge())__	};register,the,exposed,metrics,param,metric,group,metric,group,to,use,for,the,metrics;private,void,register,metrics,metric,group,metric,group,metric,group,gauge,new,checkpoints,counter,metric,group,gauge,new,in,progress,checkpoints,counter,metric,group,gauge,new,completed,checkpoints,counter,metric,group,gauge,new,failed,checkpoints,counter,metric,group,gauge,new,latest,restored,checkpoint,timestamp,gauge,metric,group,gauge,new,latest,completed,checkpoint,size,gauge,metric,group,gauge,new,latest,completed,checkpoint,duration,gauge,metric,group,gauge,new,latest,completed,checkpoint,alignment,buffered,gauge,metric,group,gauge,new,latest,completed,checkpoint,external,path,gauge
CheckpointStatsTracker -> private void registerMetrics(MetricGroup metricGroup);1505995902;Register the exposed metrics.__@param metricGroup Metric group to use for the metrics.;private void registerMetrics(MetricGroup metricGroup) {_		metricGroup.gauge(NUMBER_OF_CHECKPOINTS_METRIC, new CheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_IN_PROGRESS_CHECKPOINTS_METRIC, new InProgressCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_COMPLETED_CHECKPOINTS_METRIC, new CompletedCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_FAILED_CHECKPOINTS_METRIC, new FailedCheckpointsCounter())__		metricGroup.gauge(LATEST_RESTORED_CHECKPOINT_TIMESTAMP_METRIC, new LatestRestoredCheckpointTimestampGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_SIZE_METRIC, new LatestCompletedCheckpointSizeGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_DURATION_METRIC, new LatestCompletedCheckpointDurationGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_ALIGNMENT_BUFFERED_METRIC, new LatestCompletedCheckpointAlignmentBufferedGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_EXTERNAL_PATH_METRIC, new LatestCompletedCheckpointExternalPathGauge())__	};register,the,exposed,metrics,param,metric,group,metric,group,to,use,for,the,metrics;private,void,register,metrics,metric,group,metric,group,metric,group,gauge,new,checkpoints,counter,metric,group,gauge,new,in,progress,checkpoints,counter,metric,group,gauge,new,completed,checkpoints,counter,metric,group,gauge,new,failed,checkpoints,counter,metric,group,gauge,new,latest,restored,checkpoint,timestamp,gauge,metric,group,gauge,new,latest,completed,checkpoint,size,gauge,metric,group,gauge,new,latest,completed,checkpoint,duration,gauge,metric,group,gauge,new,latest,completed,checkpoint,alignment,buffered,gauge,metric,group,gauge,new,latest,completed,checkpoint,external,path,gauge
CheckpointStatsTracker -> private void registerMetrics(MetricGroup metricGroup);1506590912;Register the exposed metrics.__@param metricGroup Metric group to use for the metrics.;private void registerMetrics(MetricGroup metricGroup) {_		metricGroup.gauge(NUMBER_OF_CHECKPOINTS_METRIC, new CheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_IN_PROGRESS_CHECKPOINTS_METRIC, new InProgressCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_COMPLETED_CHECKPOINTS_METRIC, new CompletedCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_FAILED_CHECKPOINTS_METRIC, new FailedCheckpointsCounter())__		metricGroup.gauge(LATEST_RESTORED_CHECKPOINT_TIMESTAMP_METRIC, new LatestRestoredCheckpointTimestampGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_SIZE_METRIC, new LatestCompletedCheckpointSizeGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_DURATION_METRIC, new LatestCompletedCheckpointDurationGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_ALIGNMENT_BUFFERED_METRIC, new LatestCompletedCheckpointAlignmentBufferedGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_EXTERNAL_PATH_METRIC, new LatestCompletedCheckpointExternalPathGauge())__	};register,the,exposed,metrics,param,metric,group,metric,group,to,use,for,the,metrics;private,void,register,metrics,metric,group,metric,group,metric,group,gauge,new,checkpoints,counter,metric,group,gauge,new,in,progress,checkpoints,counter,metric,group,gauge,new,completed,checkpoints,counter,metric,group,gauge,new,failed,checkpoints,counter,metric,group,gauge,new,latest,restored,checkpoint,timestamp,gauge,metric,group,gauge,new,latest,completed,checkpoint,size,gauge,metric,group,gauge,new,latest,completed,checkpoint,duration,gauge,metric,group,gauge,new,latest,completed,checkpoint,alignment,buffered,gauge,metric,group,gauge,new,latest,completed,checkpoint,external,path,gauge
CheckpointStatsTracker -> private void registerMetrics(MetricGroup metricGroup);1506618381;Register the exposed metrics.__@param metricGroup Metric group to use for the metrics.;private void registerMetrics(MetricGroup metricGroup) {_		metricGroup.gauge(NUMBER_OF_CHECKPOINTS_METRIC, new CheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_IN_PROGRESS_CHECKPOINTS_METRIC, new InProgressCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_COMPLETED_CHECKPOINTS_METRIC, new CompletedCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_FAILED_CHECKPOINTS_METRIC, new FailedCheckpointsCounter())__		metricGroup.gauge(LATEST_RESTORED_CHECKPOINT_TIMESTAMP_METRIC, new LatestRestoredCheckpointTimestampGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_SIZE_METRIC, new LatestCompletedCheckpointSizeGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_DURATION_METRIC, new LatestCompletedCheckpointDurationGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_ALIGNMENT_BUFFERED_METRIC, new LatestCompletedCheckpointAlignmentBufferedGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_EXTERNAL_PATH_METRIC, new LatestCompletedCheckpointExternalPathGauge())__	};register,the,exposed,metrics,param,metric,group,metric,group,to,use,for,the,metrics;private,void,register,metrics,metric,group,metric,group,metric,group,gauge,new,checkpoints,counter,metric,group,gauge,new,in,progress,checkpoints,counter,metric,group,gauge,new,completed,checkpoints,counter,metric,group,gauge,new,failed,checkpoints,counter,metric,group,gauge,new,latest,restored,checkpoint,timestamp,gauge,metric,group,gauge,new,latest,completed,checkpoint,size,gauge,metric,group,gauge,new,latest,completed,checkpoint,duration,gauge,metric,group,gauge,new,latest,completed,checkpoint,alignment,buffered,gauge,metric,group,gauge,new,latest,completed,checkpoint,external,path,gauge
CheckpointStatsTracker -> private void registerMetrics(MetricGroup metricGroup);1521741862;Register the exposed metrics.__@param metricGroup Metric group to use for the metrics.;private void registerMetrics(MetricGroup metricGroup) {_		metricGroup.gauge(NUMBER_OF_CHECKPOINTS_METRIC, new CheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_IN_PROGRESS_CHECKPOINTS_METRIC, new InProgressCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_COMPLETED_CHECKPOINTS_METRIC, new CompletedCheckpointsCounter())__		metricGroup.gauge(NUMBER_OF_FAILED_CHECKPOINTS_METRIC, new FailedCheckpointsCounter())__		metricGroup.gauge(LATEST_RESTORED_CHECKPOINT_TIMESTAMP_METRIC, new LatestRestoredCheckpointTimestampGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_SIZE_METRIC, new LatestCompletedCheckpointSizeGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_DURATION_METRIC, new LatestCompletedCheckpointDurationGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_ALIGNMENT_BUFFERED_METRIC, new LatestCompletedCheckpointAlignmentBufferedGauge())__		metricGroup.gauge(LATEST_COMPLETED_CHECKPOINT_EXTERNAL_PATH_METRIC, new LatestCompletedCheckpointExternalPathGauge())__	};register,the,exposed,metrics,param,metric,group,metric,group,to,use,for,the,metrics;private,void,register,metrics,metric,group,metric,group,metric,group,gauge,new,checkpoints,counter,metric,group,gauge,new,in,progress,checkpoints,counter,metric,group,gauge,new,completed,checkpoints,counter,metric,group,gauge,new,failed,checkpoints,counter,metric,group,gauge,new,latest,restored,checkpoint,timestamp,gauge,metric,group,gauge,new,latest,completed,checkpoint,size,gauge,metric,group,gauge,new,latest,completed,checkpoint,duration,gauge,metric,group,gauge,new,latest,completed,checkpoint,alignment,buffered,gauge,metric,group,gauge,new,latest,completed,checkpoint,external,path,gauge
CheckpointStatsTracker -> public CheckpointStatsSnapshot createSnapshot();1484038132;Creates a new snapshot of the available stats.__@return The latest statistics snapshot.;public CheckpointStatsSnapshot createSnapshot() {_		CheckpointStatsSnapshot snapshot = latestSnapshot___		_		_		if (dirty && statsReadWriteLock.tryLock()) {_			try {_				_				snapshot = new CheckpointStatsSnapshot(_					counts.createSnapshot(),_					summary.createSnapshot(),_					history.createSnapshot(),_					latestRestoredCheckpoint)___				latestSnapshot = snapshot___				dirty = false__			} finally {_				statsReadWriteLock.unlock()__			}_		}__		return snapshot__	};creates,a,new,snapshot,of,the,available,stats,return,the,latest,statistics,snapshot;public,checkpoint,stats,snapshot,create,snapshot,checkpoint,stats,snapshot,snapshot,latest,snapshot,if,dirty,stats,read,write,lock,try,lock,try,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,latest,restored,checkpoint,latest,snapshot,snapshot,dirty,false,finally,stats,read,write,lock,unlock,return,snapshot
CheckpointStatsTracker -> public CheckpointStatsSnapshot createSnapshot();1485790402;Creates a new snapshot of the available stats.__@return The latest statistics snapshot.;public CheckpointStatsSnapshot createSnapshot() {_		CheckpointStatsSnapshot snapshot = latestSnapshot___		_		_		if (dirty && statsReadWriteLock.tryLock()) {_			try {_				_				snapshot = new CheckpointStatsSnapshot(_					counts.createSnapshot(),_					summary.createSnapshot(),_					history.createSnapshot(),_					latestRestoredCheckpoint)___				latestSnapshot = snapshot___				dirty = false__			} finally {_				statsReadWriteLock.unlock()__			}_		}__		return snapshot__	};creates,a,new,snapshot,of,the,available,stats,return,the,latest,statistics,snapshot;public,checkpoint,stats,snapshot,create,snapshot,checkpoint,stats,snapshot,snapshot,latest,snapshot,if,dirty,stats,read,write,lock,try,lock,try,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,latest,restored,checkpoint,latest,snapshot,snapshot,dirty,false,finally,stats,read,write,lock,unlock,return,snapshot
CheckpointStatsTracker -> public CheckpointStatsSnapshot createSnapshot();1490214056;Creates a new snapshot of the available stats.__@return The latest statistics snapshot.;public CheckpointStatsSnapshot createSnapshot() {_		CheckpointStatsSnapshot snapshot = latestSnapshot___		_		_		if (dirty && statsReadWriteLock.tryLock()) {_			try {_				_				snapshot = new CheckpointStatsSnapshot(_					counts.createSnapshot(),_					summary.createSnapshot(),_					history.createSnapshot(),_					latestRestoredCheckpoint)___				latestSnapshot = snapshot___				dirty = false__			} finally {_				statsReadWriteLock.unlock()__			}_		}__		return snapshot__	};creates,a,new,snapshot,of,the,available,stats,return,the,latest,statistics,snapshot;public,checkpoint,stats,snapshot,create,snapshot,checkpoint,stats,snapshot,snapshot,latest,snapshot,if,dirty,stats,read,write,lock,try,lock,try,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,latest,restored,checkpoint,latest,snapshot,snapshot,dirty,false,finally,stats,read,write,lock,unlock,return,snapshot
CheckpointStatsTracker -> public CheckpointStatsSnapshot createSnapshot();1492678790;Creates a new snapshot of the available stats.__@return The latest statistics snapshot.;public CheckpointStatsSnapshot createSnapshot() {_		CheckpointStatsSnapshot snapshot = latestSnapshot___		_		_		if (dirty && statsReadWriteLock.tryLock()) {_			try {_				_				snapshot = new CheckpointStatsSnapshot(_					counts.createSnapshot(),_					summary.createSnapshot(),_					history.createSnapshot(),_					latestRestoredCheckpoint)___				latestSnapshot = snapshot___				dirty = false__			} finally {_				statsReadWriteLock.unlock()__			}_		}__		return snapshot__	};creates,a,new,snapshot,of,the,available,stats,return,the,latest,statistics,snapshot;public,checkpoint,stats,snapshot,create,snapshot,checkpoint,stats,snapshot,snapshot,latest,snapshot,if,dirty,stats,read,write,lock,try,lock,try,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,latest,restored,checkpoint,latest,snapshot,snapshot,dirty,false,finally,stats,read,write,lock,unlock,return,snapshot
CheckpointStatsTracker -> public CheckpointStatsSnapshot createSnapshot();1505995902;Creates a new snapshot of the available stats.__@return The latest statistics snapshot.;public CheckpointStatsSnapshot createSnapshot() {_		CheckpointStatsSnapshot snapshot = latestSnapshot___		_		_		if (dirty && statsReadWriteLock.tryLock()) {_			try {_				_				snapshot = new CheckpointStatsSnapshot(_					counts.createSnapshot(),_					summary.createSnapshot(),_					history.createSnapshot(),_					latestRestoredCheckpoint)___				latestSnapshot = snapshot___				dirty = false__			} finally {_				statsReadWriteLock.unlock()__			}_		}__		return snapshot__	};creates,a,new,snapshot,of,the,available,stats,return,the,latest,statistics,snapshot;public,checkpoint,stats,snapshot,create,snapshot,checkpoint,stats,snapshot,snapshot,latest,snapshot,if,dirty,stats,read,write,lock,try,lock,try,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,latest,restored,checkpoint,latest,snapshot,snapshot,dirty,false,finally,stats,read,write,lock,unlock,return,snapshot
CheckpointStatsTracker -> public CheckpointStatsSnapshot createSnapshot();1506590912;Creates a new snapshot of the available stats.__@return The latest statistics snapshot.;public CheckpointStatsSnapshot createSnapshot() {_		CheckpointStatsSnapshot snapshot = latestSnapshot___		_		_		if (dirty && statsReadWriteLock.tryLock()) {_			try {_				_				snapshot = new CheckpointStatsSnapshot(_					counts.createSnapshot(),_					summary.createSnapshot(),_					history.createSnapshot(),_					latestRestoredCheckpoint)___				latestSnapshot = snapshot___				dirty = false__			} finally {_				statsReadWriteLock.unlock()__			}_		}__		return snapshot__	};creates,a,new,snapshot,of,the,available,stats,return,the,latest,statistics,snapshot;public,checkpoint,stats,snapshot,create,snapshot,checkpoint,stats,snapshot,snapshot,latest,snapshot,if,dirty,stats,read,write,lock,try,lock,try,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,latest,restored,checkpoint,latest,snapshot,snapshot,dirty,false,finally,stats,read,write,lock,unlock,return,snapshot
CheckpointStatsTracker -> public CheckpointStatsSnapshot createSnapshot();1506618381;Creates a new snapshot of the available stats.__@return The latest statistics snapshot.;public CheckpointStatsSnapshot createSnapshot() {_		CheckpointStatsSnapshot snapshot = latestSnapshot___		_		_		if (dirty && statsReadWriteLock.tryLock()) {_			try {_				_				snapshot = new CheckpointStatsSnapshot(_					counts.createSnapshot(),_					summary.createSnapshot(),_					history.createSnapshot(),_					latestRestoredCheckpoint)___				latestSnapshot = snapshot___				dirty = false__			} finally {_				statsReadWriteLock.unlock()__			}_		}__		return snapshot__	};creates,a,new,snapshot,of,the,available,stats,return,the,latest,statistics,snapshot;public,checkpoint,stats,snapshot,create,snapshot,checkpoint,stats,snapshot,snapshot,latest,snapshot,if,dirty,stats,read,write,lock,try,lock,try,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,latest,restored,checkpoint,latest,snapshot,snapshot,dirty,false,finally,stats,read,write,lock,unlock,return,snapshot
CheckpointStatsTracker -> public CheckpointStatsSnapshot createSnapshot();1521741862;Creates a new snapshot of the available stats.__@return The latest statistics snapshot.;public CheckpointStatsSnapshot createSnapshot() {_		CheckpointStatsSnapshot snapshot = latestSnapshot___		_		_		if (dirty && statsReadWriteLock.tryLock()) {_			try {_				_				snapshot = new CheckpointStatsSnapshot(_					counts.createSnapshot(),_					summary.createSnapshot(),_					history.createSnapshot(),_					latestRestoredCheckpoint)___				latestSnapshot = snapshot___				dirty = false__			} finally {_				statsReadWriteLock.unlock()__			}_		}__		return snapshot__	};creates,a,new,snapshot,of,the,available,stats,return,the,latest,statistics,snapshot;public,checkpoint,stats,snapshot,create,snapshot,checkpoint,stats,snapshot,snapshot,latest,snapshot,if,dirty,stats,read,write,lock,try,lock,try,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,latest,restored,checkpoint,latest,snapshot,snapshot,dirty,false,finally,stats,read,write,lock,unlock,return,snapshot
CheckpointStatsTracker -> public JobSnapshottingSettings getSnapshottingSettings();1484038132;Returns the job's snapshotting settings which are derived from the_CheckpointConfig.__@return The job's snapshotting settings.;public JobSnapshottingSettings getSnapshottingSettings() {_		return jobSnapshottingSettings__	};returns,the,job,s,snapshotting,settings,which,are,derived,from,the,checkpoint,config,return,the,job,s,snapshotting,settings;public,job,snapshotting,settings,get,snapshotting,settings,return,job,snapshotting,settings
CheckpointStatsTracker -> public JobSnapshottingSettings getSnapshottingSettings();1485790402;Returns the job's snapshotting settings which are derived from the_CheckpointConfig.__@return The job's snapshotting settings.;public JobSnapshottingSettings getSnapshottingSettings() {_		return jobSnapshottingSettings__	};returns,the,job,s,snapshotting,settings,which,are,derived,from,the,checkpoint,config,return,the,job,s,snapshotting,settings;public,job,snapshotting,settings,get,snapshotting,settings,return,job,snapshotting,settings
CheckpointStatsTracker -> public JobSnapshottingSettings getSnapshottingSettings();1490214056;Returns the job's snapshotting settings which are derived from the_CheckpointConfig.__@return The job's snapshotting settings.;public JobSnapshottingSettings getSnapshottingSettings() {_		return jobSnapshottingSettings__	};returns,the,job,s,snapshotting,settings,which,are,derived,from,the,checkpoint,config,return,the,job,s,snapshotting,settings;public,job,snapshotting,settings,get,snapshotting,settings,return,job,snapshotting,settings
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportCompletedCheckpoint(CompletedCheckpointStats completed);1484038132;Report a completed checkpoint.__@param completed The completed checkpoint.;void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_			CheckpointStatsTracker.this.reportCompletedCheckpoint(completed)__		};report,a,completed,checkpoint,param,completed,the,completed,checkpoint;void,report,completed,checkpoint,completed,checkpoint,stats,completed,checkpoint,stats,tracker,this,report,completed,checkpoint,completed
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportCompletedCheckpoint(CompletedCheckpointStats completed);1485790402;Report a completed checkpoint.__@param completed The completed checkpoint.;void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_			CheckpointStatsTracker.this.reportCompletedCheckpoint(completed)__		};report,a,completed,checkpoint,param,completed,the,completed,checkpoint;void,report,completed,checkpoint,completed,checkpoint,stats,completed,checkpoint,stats,tracker,this,report,completed,checkpoint,completed
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportCompletedCheckpoint(CompletedCheckpointStats completed);1490214056;Report a completed checkpoint.__@param completed The completed checkpoint.;void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_			CheckpointStatsTracker.this.reportCompletedCheckpoint(completed)__		};report,a,completed,checkpoint,param,completed,the,completed,checkpoint;void,report,completed,checkpoint,completed,checkpoint,stats,completed,checkpoint,stats,tracker,this,report,completed,checkpoint,completed
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportCompletedCheckpoint(CompletedCheckpointStats completed);1492678790;Report a completed checkpoint.__@param completed The completed checkpoint.;void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_			CheckpointStatsTracker.this.reportCompletedCheckpoint(completed)__		};report,a,completed,checkpoint,param,completed,the,completed,checkpoint;void,report,completed,checkpoint,completed,checkpoint,stats,completed,checkpoint,stats,tracker,this,report,completed,checkpoint,completed
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportCompletedCheckpoint(CompletedCheckpointStats completed);1505995902;Report a completed checkpoint.__@param completed The completed checkpoint.;void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_			CheckpointStatsTracker.this.reportCompletedCheckpoint(completed)__		};report,a,completed,checkpoint,param,completed,the,completed,checkpoint;void,report,completed,checkpoint,completed,checkpoint,stats,completed,checkpoint,stats,tracker,this,report,completed,checkpoint,completed
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportCompletedCheckpoint(CompletedCheckpointStats completed);1506590912;Report a completed checkpoint.__@param completed The completed checkpoint.;void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_			CheckpointStatsTracker.this.reportCompletedCheckpoint(completed)__		};report,a,completed,checkpoint,param,completed,the,completed,checkpoint;void,report,completed,checkpoint,completed,checkpoint,stats,completed,checkpoint,stats,tracker,this,report,completed,checkpoint,completed
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportCompletedCheckpoint(CompletedCheckpointStats completed);1506618381;Report a completed checkpoint.__@param completed The completed checkpoint.;void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_			CheckpointStatsTracker.this.reportCompletedCheckpoint(completed)__		};report,a,completed,checkpoint,param,completed,the,completed,checkpoint;void,report,completed,checkpoint,completed,checkpoint,stats,completed,checkpoint,stats,tracker,this,report,completed,checkpoint,completed
CheckpointStatsTracker -> PendingCheckpointStatsCallback -> void reportCompletedCheckpoint(CompletedCheckpointStats completed);1521741862;Report a completed checkpoint.__@param completed The completed checkpoint.;void reportCompletedCheckpoint(CompletedCheckpointStats completed) {_			CheckpointStatsTracker.this.reportCompletedCheckpoint(completed)__		};report,a,completed,checkpoint,param,completed,the,completed,checkpoint;void,report,completed,checkpoint,completed,checkpoint,stats,completed,checkpoint,stats,tracker,this,report,completed,checkpoint,completed
CheckpointStatsTracker -> public CheckpointStatsTracker( 		int numRememberedCheckpoints, 		List<ExecutionJobVertex> jobVertices, 		CheckpointCoordinatorConfiguration jobCheckpointingConfiguration, 		MetricGroup metricGroup);1506618381;Creates a new checkpoint stats tracker.__@param numRememberedCheckpoints Maximum number of checkpoints to remember, including in progress ones._@param jobVertices Job vertices involved in the checkpoints._@param jobCheckpointingConfiguration Checkpointing configuration._@param metricGroup Metric group for exposed metrics;public CheckpointStatsTracker(_		int numRememberedCheckpoints,_		List<ExecutionJobVertex> jobVertices,_		CheckpointCoordinatorConfiguration jobCheckpointingConfiguration,_		MetricGroup metricGroup) {__		checkArgument(numRememberedCheckpoints >= 0, "Negative number of remembered checkpoints")__		this.history = new CheckpointStatsHistory(numRememberedCheckpoints)__		this.jobVertices = checkNotNull(jobVertices, "JobVertices")__		this.jobCheckpointingConfiguration = checkNotNull(jobCheckpointingConfiguration)___		_		_		int count = 0__		for (ExecutionJobVertex vertex : jobVertices) {_			count += vertex.getParallelism()__		}_		this.totalSubtaskCount = count___		_		latestSnapshot = new CheckpointStatsSnapshot(_			counts.createSnapshot(),_			summary.createSnapshot(),_			history.createSnapshot(),_			null)___		_		registerMetrics(metricGroup)__	};creates,a,new,checkpoint,stats,tracker,param,num,remembered,checkpoints,maximum,number,of,checkpoints,to,remember,including,in,progress,ones,param,job,vertices,job,vertices,involved,in,the,checkpoints,param,job,checkpointing,configuration,checkpointing,configuration,param,metric,group,metric,group,for,exposed,metrics;public,checkpoint,stats,tracker,int,num,remembered,checkpoints,list,execution,job,vertex,job,vertices,checkpoint,coordinator,configuration,job,checkpointing,configuration,metric,group,metric,group,check,argument,num,remembered,checkpoints,0,negative,number,of,remembered,checkpoints,this,history,new,checkpoint,stats,history,num,remembered,checkpoints,this,job,vertices,check,not,null,job,vertices,job,vertices,this,job,checkpointing,configuration,check,not,null,job,checkpointing,configuration,int,count,0,for,execution,job,vertex,vertex,job,vertices,count,vertex,get,parallelism,this,total,subtask,count,count,latest,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,null,register,metrics,metric,group
CheckpointStatsTracker -> public CheckpointStatsTracker( 		int numRememberedCheckpoints, 		List<ExecutionJobVertex> jobVertices, 		CheckpointCoordinatorConfiguration jobCheckpointingConfiguration, 		MetricGroup metricGroup);1521741862;Creates a new checkpoint stats tracker.__@param numRememberedCheckpoints Maximum number of checkpoints to remember, including in progress ones._@param jobVertices Job vertices involved in the checkpoints._@param jobCheckpointingConfiguration Checkpointing configuration._@param metricGroup Metric group for exposed metrics;public CheckpointStatsTracker(_		int numRememberedCheckpoints,_		List<ExecutionJobVertex> jobVertices,_		CheckpointCoordinatorConfiguration jobCheckpointingConfiguration,_		MetricGroup metricGroup) {__		checkArgument(numRememberedCheckpoints >= 0, "Negative number of remembered checkpoints")__		this.history = new CheckpointStatsHistory(numRememberedCheckpoints)__		this.jobVertices = checkNotNull(jobVertices, "JobVertices")__		this.jobCheckpointingConfiguration = checkNotNull(jobCheckpointingConfiguration)___		_		_		int count = 0__		for (ExecutionJobVertex vertex : jobVertices) {_			count += vertex.getParallelism()__		}_		this.totalSubtaskCount = count___		_		latestSnapshot = new CheckpointStatsSnapshot(_			counts.createSnapshot(),_			summary.createSnapshot(),_			history.createSnapshot(),_			null)___		_		registerMetrics(metricGroup)__	};creates,a,new,checkpoint,stats,tracker,param,num,remembered,checkpoints,maximum,number,of,checkpoints,to,remember,including,in,progress,ones,param,job,vertices,job,vertices,involved,in,the,checkpoints,param,job,checkpointing,configuration,checkpointing,configuration,param,metric,group,metric,group,for,exposed,metrics;public,checkpoint,stats,tracker,int,num,remembered,checkpoints,list,execution,job,vertex,job,vertices,checkpoint,coordinator,configuration,job,checkpointing,configuration,metric,group,metric,group,check,argument,num,remembered,checkpoints,0,negative,number,of,remembered,checkpoints,this,history,new,checkpoint,stats,history,num,remembered,checkpoints,this,job,vertices,check,not,null,job,vertices,job,vertices,this,job,checkpointing,configuration,check,not,null,job,checkpointing,configuration,int,count,0,for,execution,job,vertex,vertex,job,vertices,count,vertex,get,parallelism,this,total,subtask,count,count,latest,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,null,register,metrics,metric,group
CheckpointStatsTracker -> public CheckpointStatsTracker( 		int numRememberedCheckpoints, 		List<ExecutionJobVertex> jobVertices, 		JobSnapshottingSettings jobSnapshottingSettings, 		MetricGroup metricGroup);1484038132;Creates a new checkpoint stats tracker.__@param numRememberedCheckpoints Maximum number of checkpoints to remember, including in progress ones._@param jobVertices Job vertices involved in the checkpoints._@param jobSnapshottingSettings Snapshotting settings created from the CheckpointConfig._@param metricGroup Metric group for exposed metrics;public CheckpointStatsTracker(_		int numRememberedCheckpoints,_		List<ExecutionJobVertex> jobVertices,_		JobSnapshottingSettings jobSnapshottingSettings,_		MetricGroup metricGroup) {__		checkArgument(numRememberedCheckpoints >= 0, "Negative number of remembered checkpoints")__		this.history = new CheckpointStatsHistory(numRememberedCheckpoints)__		this.jobVertices = checkNotNull(jobVertices, "JobVertices")__		this.jobSnapshottingSettings = checkNotNull(jobSnapshottingSettings)___		_		_		int count = 0__		for (ExecutionJobVertex vertex : jobVertices) {_			count += vertex.getParallelism()__		}_		this.totalSubtaskCount = count___		_		latestSnapshot = new CheckpointStatsSnapshot(_			counts.createSnapshot(),_			summary.createSnapshot(),_			history.createSnapshot(),_			null)___		_		registerMetrics(metricGroup)__	};creates,a,new,checkpoint,stats,tracker,param,num,remembered,checkpoints,maximum,number,of,checkpoints,to,remember,including,in,progress,ones,param,job,vertices,job,vertices,involved,in,the,checkpoints,param,job,snapshotting,settings,snapshotting,settings,created,from,the,checkpoint,config,param,metric,group,metric,group,for,exposed,metrics;public,checkpoint,stats,tracker,int,num,remembered,checkpoints,list,execution,job,vertex,job,vertices,job,snapshotting,settings,job,snapshotting,settings,metric,group,metric,group,check,argument,num,remembered,checkpoints,0,negative,number,of,remembered,checkpoints,this,history,new,checkpoint,stats,history,num,remembered,checkpoints,this,job,vertices,check,not,null,job,vertices,job,vertices,this,job,snapshotting,settings,check,not,null,job,snapshotting,settings,int,count,0,for,execution,job,vertex,vertex,job,vertices,count,vertex,get,parallelism,this,total,subtask,count,count,latest,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,null,register,metrics,metric,group
CheckpointStatsTracker -> public CheckpointStatsTracker( 		int numRememberedCheckpoints, 		List<ExecutionJobVertex> jobVertices, 		JobSnapshottingSettings jobSnapshottingSettings, 		MetricGroup metricGroup);1485790402;Creates a new checkpoint stats tracker.__@param numRememberedCheckpoints Maximum number of checkpoints to remember, including in progress ones._@param jobVertices Job vertices involved in the checkpoints._@param jobSnapshottingSettings Snapshotting settings created from the CheckpointConfig._@param metricGroup Metric group for exposed metrics;public CheckpointStatsTracker(_		int numRememberedCheckpoints,_		List<ExecutionJobVertex> jobVertices,_		JobSnapshottingSettings jobSnapshottingSettings,_		MetricGroup metricGroup) {__		checkArgument(numRememberedCheckpoints >= 0, "Negative number of remembered checkpoints")__		this.history = new CheckpointStatsHistory(numRememberedCheckpoints)__		this.jobVertices = checkNotNull(jobVertices, "JobVertices")__		this.jobSnapshottingSettings = checkNotNull(jobSnapshottingSettings)___		_		_		int count = 0__		for (ExecutionJobVertex vertex : jobVertices) {_			count += vertex.getParallelism()__		}_		this.totalSubtaskCount = count___		_		latestSnapshot = new CheckpointStatsSnapshot(_			counts.createSnapshot(),_			summary.createSnapshot(),_			history.createSnapshot(),_			null)___		_		registerMetrics(metricGroup)__	};creates,a,new,checkpoint,stats,tracker,param,num,remembered,checkpoints,maximum,number,of,checkpoints,to,remember,including,in,progress,ones,param,job,vertices,job,vertices,involved,in,the,checkpoints,param,job,snapshotting,settings,snapshotting,settings,created,from,the,checkpoint,config,param,metric,group,metric,group,for,exposed,metrics;public,checkpoint,stats,tracker,int,num,remembered,checkpoints,list,execution,job,vertex,job,vertices,job,snapshotting,settings,job,snapshotting,settings,metric,group,metric,group,check,argument,num,remembered,checkpoints,0,negative,number,of,remembered,checkpoints,this,history,new,checkpoint,stats,history,num,remembered,checkpoints,this,job,vertices,check,not,null,job,vertices,job,vertices,this,job,snapshotting,settings,check,not,null,job,snapshotting,settings,int,count,0,for,execution,job,vertex,vertex,job,vertices,count,vertex,get,parallelism,this,total,subtask,count,count,latest,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,null,register,metrics,metric,group
CheckpointStatsTracker -> public CheckpointStatsTracker( 		int numRememberedCheckpoints, 		List<ExecutionJobVertex> jobVertices, 		JobSnapshottingSettings jobSnapshottingSettings, 		MetricGroup metricGroup);1490214056;Creates a new checkpoint stats tracker.__@param numRememberedCheckpoints Maximum number of checkpoints to remember, including in progress ones._@param jobVertices Job vertices involved in the checkpoints._@param jobSnapshottingSettings Snapshotting settings created from the CheckpointConfig._@param metricGroup Metric group for exposed metrics;public CheckpointStatsTracker(_		int numRememberedCheckpoints,_		List<ExecutionJobVertex> jobVertices,_		JobSnapshottingSettings jobSnapshottingSettings,_		MetricGroup metricGroup) {__		checkArgument(numRememberedCheckpoints >= 0, "Negative number of remembered checkpoints")__		this.history = new CheckpointStatsHistory(numRememberedCheckpoints)__		this.jobVertices = checkNotNull(jobVertices, "JobVertices")__		this.jobSnapshottingSettings = checkNotNull(jobSnapshottingSettings)___		_		_		int count = 0__		for (ExecutionJobVertex vertex : jobVertices) {_			count += vertex.getParallelism()__		}_		this.totalSubtaskCount = count___		_		latestSnapshot = new CheckpointStatsSnapshot(_			counts.createSnapshot(),_			summary.createSnapshot(),_			history.createSnapshot(),_			null)___		_		registerMetrics(metricGroup)__	};creates,a,new,checkpoint,stats,tracker,param,num,remembered,checkpoints,maximum,number,of,checkpoints,to,remember,including,in,progress,ones,param,job,vertices,job,vertices,involved,in,the,checkpoints,param,job,snapshotting,settings,snapshotting,settings,created,from,the,checkpoint,config,param,metric,group,metric,group,for,exposed,metrics;public,checkpoint,stats,tracker,int,num,remembered,checkpoints,list,execution,job,vertex,job,vertices,job,snapshotting,settings,job,snapshotting,settings,metric,group,metric,group,check,argument,num,remembered,checkpoints,0,negative,number,of,remembered,checkpoints,this,history,new,checkpoint,stats,history,num,remembered,checkpoints,this,job,vertices,check,not,null,job,vertices,job,vertices,this,job,snapshotting,settings,check,not,null,job,snapshotting,settings,int,count,0,for,execution,job,vertex,vertex,job,vertices,count,vertex,get,parallelism,this,total,subtask,count,count,latest,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,null,register,metrics,metric,group
CheckpointStatsTracker -> private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap();1484038132;Creates an empty map with a {@link TaskStateStats} instance per task_that is involved in the checkpoint.__@return An empty map with an {@link TaskStateStats} entry for each task that is involved in the checkpoint.;private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap() {_		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStatsMap = new ConcurrentHashMap<>(jobVertices.size())__		for (ExecutionJobVertex vertex : jobVertices) {_			TaskStateStats taskStats = new TaskStateStats(vertex.getJobVertexId(), vertex.getParallelism())__			taskStatsMap.put(vertex.getJobVertexId(), taskStats)__		}_		return taskStatsMap__	};creates,an,empty,map,with,a,link,task,state,stats,instance,per,task,that,is,involved,in,the,checkpoint,return,an,empty,map,with,an,link,task,state,stats,entry,for,each,task,that,is,involved,in,the,checkpoint;private,concurrent,hash,map,job,vertex,id,task,state,stats,create,empty,task,state,stats,map,concurrent,hash,map,job,vertex,id,task,state,stats,task,stats,map,new,concurrent,hash,map,job,vertices,size,for,execution,job,vertex,vertex,job,vertices,task,state,stats,task,stats,new,task,state,stats,vertex,get,job,vertex,id,vertex,get,parallelism,task,stats,map,put,vertex,get,job,vertex,id,task,stats,return,task,stats,map
CheckpointStatsTracker -> private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap();1485790402;Creates an empty map with a {@link TaskStateStats} instance per task_that is involved in the checkpoint.__@return An empty map with an {@link TaskStateStats} entry for each task that is involved in the checkpoint.;private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap() {_		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStatsMap = new ConcurrentHashMap<>(jobVertices.size())__		for (ExecutionJobVertex vertex : jobVertices) {_			TaskStateStats taskStats = new TaskStateStats(vertex.getJobVertexId(), vertex.getParallelism())__			taskStatsMap.put(vertex.getJobVertexId(), taskStats)__		}_		return taskStatsMap__	};creates,an,empty,map,with,a,link,task,state,stats,instance,per,task,that,is,involved,in,the,checkpoint,return,an,empty,map,with,an,link,task,state,stats,entry,for,each,task,that,is,involved,in,the,checkpoint;private,concurrent,hash,map,job,vertex,id,task,state,stats,create,empty,task,state,stats,map,concurrent,hash,map,job,vertex,id,task,state,stats,task,stats,map,new,concurrent,hash,map,job,vertices,size,for,execution,job,vertex,vertex,job,vertices,task,state,stats,task,stats,new,task,state,stats,vertex,get,job,vertex,id,vertex,get,parallelism,task,stats,map,put,vertex,get,job,vertex,id,task,stats,return,task,stats,map
CheckpointStatsTracker -> private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap();1490214056;Creates an empty map with a {@link TaskStateStats} instance per task_that is involved in the checkpoint.__@return An empty map with an {@link TaskStateStats} entry for each task that is involved in the checkpoint.;private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap() {_		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStatsMap = new ConcurrentHashMap<>(jobVertices.size())__		for (ExecutionJobVertex vertex : jobVertices) {_			TaskStateStats taskStats = new TaskStateStats(vertex.getJobVertexId(), vertex.getParallelism())__			taskStatsMap.put(vertex.getJobVertexId(), taskStats)__		}_		return taskStatsMap__	};creates,an,empty,map,with,a,link,task,state,stats,instance,per,task,that,is,involved,in,the,checkpoint,return,an,empty,map,with,an,link,task,state,stats,entry,for,each,task,that,is,involved,in,the,checkpoint;private,concurrent,hash,map,job,vertex,id,task,state,stats,create,empty,task,state,stats,map,concurrent,hash,map,job,vertex,id,task,state,stats,task,stats,map,new,concurrent,hash,map,job,vertices,size,for,execution,job,vertex,vertex,job,vertices,task,state,stats,task,stats,new,task,state,stats,vertex,get,job,vertex,id,vertex,get,parallelism,task,stats,map,put,vertex,get,job,vertex,id,task,stats,return,task,stats,map
CheckpointStatsTracker -> private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap();1492678790;Creates an empty map with a {@link TaskStateStats} instance per task_that is involved in the checkpoint.__@return An empty map with an {@link TaskStateStats} entry for each task that is involved in the checkpoint.;private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap() {_		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStatsMap = new ConcurrentHashMap<>(jobVertices.size())__		for (ExecutionJobVertex vertex : jobVertices) {_			TaskStateStats taskStats = new TaskStateStats(vertex.getJobVertexId(), vertex.getParallelism())__			taskStatsMap.put(vertex.getJobVertexId(), taskStats)__		}_		return taskStatsMap__	};creates,an,empty,map,with,a,link,task,state,stats,instance,per,task,that,is,involved,in,the,checkpoint,return,an,empty,map,with,an,link,task,state,stats,entry,for,each,task,that,is,involved,in,the,checkpoint;private,concurrent,hash,map,job,vertex,id,task,state,stats,create,empty,task,state,stats,map,concurrent,hash,map,job,vertex,id,task,state,stats,task,stats,map,new,concurrent,hash,map,job,vertices,size,for,execution,job,vertex,vertex,job,vertices,task,state,stats,task,stats,new,task,state,stats,vertex,get,job,vertex,id,vertex,get,parallelism,task,stats,map,put,vertex,get,job,vertex,id,task,stats,return,task,stats,map
CheckpointStatsTracker -> private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap();1505995902;Creates an empty map with a {@link TaskStateStats} instance per task_that is involved in the checkpoint.__@return An empty map with an {@link TaskStateStats} entry for each task that is involved in the checkpoint.;private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap() {_		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStatsMap = new ConcurrentHashMap<>(jobVertices.size())__		for (ExecutionJobVertex vertex : jobVertices) {_			TaskStateStats taskStats = new TaskStateStats(vertex.getJobVertexId(), vertex.getParallelism())__			taskStatsMap.put(vertex.getJobVertexId(), taskStats)__		}_		return taskStatsMap__	};creates,an,empty,map,with,a,link,task,state,stats,instance,per,task,that,is,involved,in,the,checkpoint,return,an,empty,map,with,an,link,task,state,stats,entry,for,each,task,that,is,involved,in,the,checkpoint;private,concurrent,hash,map,job,vertex,id,task,state,stats,create,empty,task,state,stats,map,concurrent,hash,map,job,vertex,id,task,state,stats,task,stats,map,new,concurrent,hash,map,job,vertices,size,for,execution,job,vertex,vertex,job,vertices,task,state,stats,task,stats,new,task,state,stats,vertex,get,job,vertex,id,vertex,get,parallelism,task,stats,map,put,vertex,get,job,vertex,id,task,stats,return,task,stats,map
CheckpointStatsTracker -> private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap();1506590912;Creates an empty map with a {@link TaskStateStats} instance per task_that is involved in the checkpoint.__@return An empty map with an {@link TaskStateStats} entry for each task that is involved in the checkpoint.;private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap() {_		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStatsMap = new ConcurrentHashMap<>(jobVertices.size())__		for (ExecutionJobVertex vertex : jobVertices) {_			TaskStateStats taskStats = new TaskStateStats(vertex.getJobVertexId(), vertex.getParallelism())__			taskStatsMap.put(vertex.getJobVertexId(), taskStats)__		}_		return taskStatsMap__	};creates,an,empty,map,with,a,link,task,state,stats,instance,per,task,that,is,involved,in,the,checkpoint,return,an,empty,map,with,an,link,task,state,stats,entry,for,each,task,that,is,involved,in,the,checkpoint;private,concurrent,hash,map,job,vertex,id,task,state,stats,create,empty,task,state,stats,map,concurrent,hash,map,job,vertex,id,task,state,stats,task,stats,map,new,concurrent,hash,map,job,vertices,size,for,execution,job,vertex,vertex,job,vertices,task,state,stats,task,stats,new,task,state,stats,vertex,get,job,vertex,id,vertex,get,parallelism,task,stats,map,put,vertex,get,job,vertex,id,task,stats,return,task,stats,map
CheckpointStatsTracker -> private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap();1506618381;Creates an empty map with a {@link TaskStateStats} instance per task_that is involved in the checkpoint.__@return An empty map with an {@link TaskStateStats} entry for each task that is involved in the checkpoint.;private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap() {_		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStatsMap = new ConcurrentHashMap<>(jobVertices.size())__		for (ExecutionJobVertex vertex : jobVertices) {_			TaskStateStats taskStats = new TaskStateStats(vertex.getJobVertexId(), vertex.getParallelism())__			taskStatsMap.put(vertex.getJobVertexId(), taskStats)__		}_		return taskStatsMap__	};creates,an,empty,map,with,a,link,task,state,stats,instance,per,task,that,is,involved,in,the,checkpoint,return,an,empty,map,with,an,link,task,state,stats,entry,for,each,task,that,is,involved,in,the,checkpoint;private,concurrent,hash,map,job,vertex,id,task,state,stats,create,empty,task,state,stats,map,concurrent,hash,map,job,vertex,id,task,state,stats,task,stats,map,new,concurrent,hash,map,job,vertices,size,for,execution,job,vertex,vertex,job,vertices,task,state,stats,task,stats,new,task,state,stats,vertex,get,job,vertex,id,vertex,get,parallelism,task,stats,map,put,vertex,get,job,vertex,id,task,stats,return,task,stats,map
CheckpointStatsTracker -> private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap();1521741862;Creates an empty map with a {@link TaskStateStats} instance per task_that is involved in the checkpoint.__@return An empty map with an {@link TaskStateStats} entry for each task that is involved in the checkpoint.;private ConcurrentHashMap<JobVertexID, TaskStateStats> createEmptyTaskStateStatsMap() {_		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStatsMap = new ConcurrentHashMap<>(jobVertices.size())__		for (ExecutionJobVertex vertex : jobVertices) {_			TaskStateStats taskStats = new TaskStateStats(vertex.getJobVertexId(), vertex.getParallelism())__			taskStatsMap.put(vertex.getJobVertexId(), taskStats)__		}_		return taskStatsMap__	};creates,an,empty,map,with,a,link,task,state,stats,instance,per,task,that,is,involved,in,the,checkpoint,return,an,empty,map,with,an,link,task,state,stats,entry,for,each,task,that,is,involved,in,the,checkpoint;private,concurrent,hash,map,job,vertex,id,task,state,stats,create,empty,task,state,stats,map,concurrent,hash,map,job,vertex,id,task,state,stats,task,stats,map,new,concurrent,hash,map,job,vertices,size,for,execution,job,vertex,vertex,job,vertices,task,state,stats,task,stats,new,task,state,stats,vertex,get,job,vertex,id,vertex,get,parallelism,task,stats,map,put,vertex,get,job,vertex,id,task,stats,return,task,stats,map
CheckpointStatsTracker -> PendingCheckpointStats reportPendingCheckpoint( 			long checkpointId, 			long triggerTimestamp, 			CheckpointProperties props);1484038132;Creates a new pending checkpoint tracker.__@param checkpointId ID of the checkpoint._@param triggerTimestamp Trigger timestamp of the checkpoint._@param props The checkpoint properties._@return Tracker for statistics gathering.;PendingCheckpointStats reportPendingCheckpoint(_			long checkpointId,_			long triggerTimestamp,_			CheckpointProperties props) {__		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStateStats = createEmptyTaskStateStatsMap()___		PendingCheckpointStats pending = new PendingCheckpointStats(_				checkpointId,_				triggerTimestamp,_				props,_				totalSubtaskCount,_				taskStateStats,_				new PendingCheckpointStatsCallback())___		statsReadWriteLock.lock()__		try {_			counts.incrementInProgressCheckpoints()__			history.addInProgressCheckpoint(pending)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}__		return pending__	};creates,a,new,pending,checkpoint,tracker,param,checkpoint,id,id,of,the,checkpoint,param,trigger,timestamp,trigger,timestamp,of,the,checkpoint,param,props,the,checkpoint,properties,return,tracker,for,statistics,gathering;pending,checkpoint,stats,report,pending,checkpoint,long,checkpoint,id,long,trigger,timestamp,checkpoint,properties,props,concurrent,hash,map,job,vertex,id,task,state,stats,task,state,stats,create,empty,task,state,stats,map,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,checkpoint,id,trigger,timestamp,props,total,subtask,count,task,state,stats,new,pending,checkpoint,stats,callback,stats,read,write,lock,lock,try,counts,increment,in,progress,checkpoints,history,add,in,progress,checkpoint,pending,dirty,true,finally,stats,read,write,lock,unlock,return,pending
CheckpointStatsTracker -> PendingCheckpointStats reportPendingCheckpoint( 			long checkpointId, 			long triggerTimestamp, 			CheckpointProperties props);1485790402;Creates a new pending checkpoint tracker.__@param checkpointId ID of the checkpoint._@param triggerTimestamp Trigger timestamp of the checkpoint._@param props The checkpoint properties._@return Tracker for statistics gathering.;PendingCheckpointStats reportPendingCheckpoint(_			long checkpointId,_			long triggerTimestamp,_			CheckpointProperties props) {__		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStateStats = createEmptyTaskStateStatsMap()___		PendingCheckpointStats pending = new PendingCheckpointStats(_				checkpointId,_				triggerTimestamp,_				props,_				totalSubtaskCount,_				taskStateStats,_				new PendingCheckpointStatsCallback())___		statsReadWriteLock.lock()__		try {_			counts.incrementInProgressCheckpoints()__			history.addInProgressCheckpoint(pending)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}__		return pending__	};creates,a,new,pending,checkpoint,tracker,param,checkpoint,id,id,of,the,checkpoint,param,trigger,timestamp,trigger,timestamp,of,the,checkpoint,param,props,the,checkpoint,properties,return,tracker,for,statistics,gathering;pending,checkpoint,stats,report,pending,checkpoint,long,checkpoint,id,long,trigger,timestamp,checkpoint,properties,props,concurrent,hash,map,job,vertex,id,task,state,stats,task,state,stats,create,empty,task,state,stats,map,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,checkpoint,id,trigger,timestamp,props,total,subtask,count,task,state,stats,new,pending,checkpoint,stats,callback,stats,read,write,lock,lock,try,counts,increment,in,progress,checkpoints,history,add,in,progress,checkpoint,pending,dirty,true,finally,stats,read,write,lock,unlock,return,pending
CheckpointStatsTracker -> PendingCheckpointStats reportPendingCheckpoint( 			long checkpointId, 			long triggerTimestamp, 			CheckpointProperties props);1490214056;Creates a new pending checkpoint tracker.__@param checkpointId ID of the checkpoint._@param triggerTimestamp Trigger timestamp of the checkpoint._@param props The checkpoint properties._@return Tracker for statistics gathering.;PendingCheckpointStats reportPendingCheckpoint(_			long checkpointId,_			long triggerTimestamp,_			CheckpointProperties props) {__		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStateStats = createEmptyTaskStateStatsMap()___		PendingCheckpointStats pending = new PendingCheckpointStats(_				checkpointId,_				triggerTimestamp,_				props,_				totalSubtaskCount,_				taskStateStats,_				new PendingCheckpointStatsCallback())___		statsReadWriteLock.lock()__		try {_			counts.incrementInProgressCheckpoints()__			history.addInProgressCheckpoint(pending)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}__		return pending__	};creates,a,new,pending,checkpoint,tracker,param,checkpoint,id,id,of,the,checkpoint,param,trigger,timestamp,trigger,timestamp,of,the,checkpoint,param,props,the,checkpoint,properties,return,tracker,for,statistics,gathering;pending,checkpoint,stats,report,pending,checkpoint,long,checkpoint,id,long,trigger,timestamp,checkpoint,properties,props,concurrent,hash,map,job,vertex,id,task,state,stats,task,state,stats,create,empty,task,state,stats,map,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,checkpoint,id,trigger,timestamp,props,total,subtask,count,task,state,stats,new,pending,checkpoint,stats,callback,stats,read,write,lock,lock,try,counts,increment,in,progress,checkpoints,history,add,in,progress,checkpoint,pending,dirty,true,finally,stats,read,write,lock,unlock,return,pending
CheckpointStatsTracker -> PendingCheckpointStats reportPendingCheckpoint( 			long checkpointId, 			long triggerTimestamp, 			CheckpointProperties props);1492678790;Creates a new pending checkpoint tracker.__@param checkpointId ID of the checkpoint._@param triggerTimestamp Trigger timestamp of the checkpoint._@param props The checkpoint properties._@return Tracker for statistics gathering.;PendingCheckpointStats reportPendingCheckpoint(_			long checkpointId,_			long triggerTimestamp,_			CheckpointProperties props) {__		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStateStats = createEmptyTaskStateStatsMap()___		PendingCheckpointStats pending = new PendingCheckpointStats(_				checkpointId,_				triggerTimestamp,_				props,_				totalSubtaskCount,_				taskStateStats,_				new PendingCheckpointStatsCallback())___		statsReadWriteLock.lock()__		try {_			counts.incrementInProgressCheckpoints()__			history.addInProgressCheckpoint(pending)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}__		return pending__	};creates,a,new,pending,checkpoint,tracker,param,checkpoint,id,id,of,the,checkpoint,param,trigger,timestamp,trigger,timestamp,of,the,checkpoint,param,props,the,checkpoint,properties,return,tracker,for,statistics,gathering;pending,checkpoint,stats,report,pending,checkpoint,long,checkpoint,id,long,trigger,timestamp,checkpoint,properties,props,concurrent,hash,map,job,vertex,id,task,state,stats,task,state,stats,create,empty,task,state,stats,map,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,checkpoint,id,trigger,timestamp,props,total,subtask,count,task,state,stats,new,pending,checkpoint,stats,callback,stats,read,write,lock,lock,try,counts,increment,in,progress,checkpoints,history,add,in,progress,checkpoint,pending,dirty,true,finally,stats,read,write,lock,unlock,return,pending
CheckpointStatsTracker -> PendingCheckpointStats reportPendingCheckpoint( 			long checkpointId, 			long triggerTimestamp, 			CheckpointProperties props);1505995902;Creates a new pending checkpoint tracker.__@param checkpointId ID of the checkpoint._@param triggerTimestamp Trigger timestamp of the checkpoint._@param props The checkpoint properties._@return Tracker for statistics gathering.;PendingCheckpointStats reportPendingCheckpoint(_			long checkpointId,_			long triggerTimestamp,_			CheckpointProperties props) {__		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStateStats = createEmptyTaskStateStatsMap()___		PendingCheckpointStats pending = new PendingCheckpointStats(_				checkpointId,_				triggerTimestamp,_				props,_				totalSubtaskCount,_				taskStateStats,_				new PendingCheckpointStatsCallback())___		statsReadWriteLock.lock()__		try {_			counts.incrementInProgressCheckpoints()__			history.addInProgressCheckpoint(pending)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}__		return pending__	};creates,a,new,pending,checkpoint,tracker,param,checkpoint,id,id,of,the,checkpoint,param,trigger,timestamp,trigger,timestamp,of,the,checkpoint,param,props,the,checkpoint,properties,return,tracker,for,statistics,gathering;pending,checkpoint,stats,report,pending,checkpoint,long,checkpoint,id,long,trigger,timestamp,checkpoint,properties,props,concurrent,hash,map,job,vertex,id,task,state,stats,task,state,stats,create,empty,task,state,stats,map,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,checkpoint,id,trigger,timestamp,props,total,subtask,count,task,state,stats,new,pending,checkpoint,stats,callback,stats,read,write,lock,lock,try,counts,increment,in,progress,checkpoints,history,add,in,progress,checkpoint,pending,dirty,true,finally,stats,read,write,lock,unlock,return,pending
CheckpointStatsTracker -> PendingCheckpointStats reportPendingCheckpoint( 			long checkpointId, 			long triggerTimestamp, 			CheckpointProperties props);1506590912;Creates a new pending checkpoint tracker.__@param checkpointId ID of the checkpoint._@param triggerTimestamp Trigger timestamp of the checkpoint._@param props The checkpoint properties._@return Tracker for statistics gathering.;PendingCheckpointStats reportPendingCheckpoint(_			long checkpointId,_			long triggerTimestamp,_			CheckpointProperties props) {__		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStateStats = createEmptyTaskStateStatsMap()___		PendingCheckpointStats pending = new PendingCheckpointStats(_				checkpointId,_				triggerTimestamp,_				props,_				totalSubtaskCount,_				taskStateStats,_				new PendingCheckpointStatsCallback())___		statsReadWriteLock.lock()__		try {_			counts.incrementInProgressCheckpoints()__			history.addInProgressCheckpoint(pending)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}__		return pending__	};creates,a,new,pending,checkpoint,tracker,param,checkpoint,id,id,of,the,checkpoint,param,trigger,timestamp,trigger,timestamp,of,the,checkpoint,param,props,the,checkpoint,properties,return,tracker,for,statistics,gathering;pending,checkpoint,stats,report,pending,checkpoint,long,checkpoint,id,long,trigger,timestamp,checkpoint,properties,props,concurrent,hash,map,job,vertex,id,task,state,stats,task,state,stats,create,empty,task,state,stats,map,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,checkpoint,id,trigger,timestamp,props,total,subtask,count,task,state,stats,new,pending,checkpoint,stats,callback,stats,read,write,lock,lock,try,counts,increment,in,progress,checkpoints,history,add,in,progress,checkpoint,pending,dirty,true,finally,stats,read,write,lock,unlock,return,pending
CheckpointStatsTracker -> PendingCheckpointStats reportPendingCheckpoint( 			long checkpointId, 			long triggerTimestamp, 			CheckpointProperties props);1506618381;Creates a new pending checkpoint tracker.__@param checkpointId ID of the checkpoint._@param triggerTimestamp Trigger timestamp of the checkpoint._@param props The checkpoint properties._@return Tracker for statistics gathering.;PendingCheckpointStats reportPendingCheckpoint(_			long checkpointId,_			long triggerTimestamp,_			CheckpointProperties props) {__		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStateStats = createEmptyTaskStateStatsMap()___		PendingCheckpointStats pending = new PendingCheckpointStats(_				checkpointId,_				triggerTimestamp,_				props,_				totalSubtaskCount,_				taskStateStats,_				new PendingCheckpointStatsCallback())___		statsReadWriteLock.lock()__		try {_			counts.incrementInProgressCheckpoints()__			history.addInProgressCheckpoint(pending)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}__		return pending__	};creates,a,new,pending,checkpoint,tracker,param,checkpoint,id,id,of,the,checkpoint,param,trigger,timestamp,trigger,timestamp,of,the,checkpoint,param,props,the,checkpoint,properties,return,tracker,for,statistics,gathering;pending,checkpoint,stats,report,pending,checkpoint,long,checkpoint,id,long,trigger,timestamp,checkpoint,properties,props,concurrent,hash,map,job,vertex,id,task,state,stats,task,state,stats,create,empty,task,state,stats,map,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,checkpoint,id,trigger,timestamp,props,total,subtask,count,task,state,stats,new,pending,checkpoint,stats,callback,stats,read,write,lock,lock,try,counts,increment,in,progress,checkpoints,history,add,in,progress,checkpoint,pending,dirty,true,finally,stats,read,write,lock,unlock,return,pending
CheckpointStatsTracker -> PendingCheckpointStats reportPendingCheckpoint( 			long checkpointId, 			long triggerTimestamp, 			CheckpointProperties props);1521741862;Creates a new pending checkpoint tracker.__@param checkpointId ID of the checkpoint._@param triggerTimestamp Trigger timestamp of the checkpoint._@param props The checkpoint properties._@return Tracker for statistics gathering.;PendingCheckpointStats reportPendingCheckpoint(_			long checkpointId,_			long triggerTimestamp,_			CheckpointProperties props) {__		ConcurrentHashMap<JobVertexID, TaskStateStats> taskStateStats = createEmptyTaskStateStatsMap()___		PendingCheckpointStats pending = new PendingCheckpointStats(_				checkpointId,_				triggerTimestamp,_				props,_				totalSubtaskCount,_				taskStateStats,_				new PendingCheckpointStatsCallback())___		statsReadWriteLock.lock()__		try {_			counts.incrementInProgressCheckpoints()__			history.addInProgressCheckpoint(pending)___			dirty = true__		} finally {_			statsReadWriteLock.unlock()__		}__		return pending__	};creates,a,new,pending,checkpoint,tracker,param,checkpoint,id,id,of,the,checkpoint,param,trigger,timestamp,trigger,timestamp,of,the,checkpoint,param,props,the,checkpoint,properties,return,tracker,for,statistics,gathering;pending,checkpoint,stats,report,pending,checkpoint,long,checkpoint,id,long,trigger,timestamp,checkpoint,properties,props,concurrent,hash,map,job,vertex,id,task,state,stats,task,state,stats,create,empty,task,state,stats,map,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,checkpoint,id,trigger,timestamp,props,total,subtask,count,task,state,stats,new,pending,checkpoint,stats,callback,stats,read,write,lock,lock,try,counts,increment,in,progress,checkpoints,history,add,in,progress,checkpoint,pending,dirty,true,finally,stats,read,write,lock,unlock,return,pending
CheckpointStatsTracker -> public CheckpointStatsTracker( 		int numRememberedCheckpoints, 		List<ExecutionJobVertex> jobVertices, 		JobCheckpointingSettings jobCheckpointingSettings, 		MetricGroup metricGroup);1492678790;Creates a new checkpoint stats tracker.__@param numRememberedCheckpoints Maximum number of checkpoints to remember, including in progress ones._@param jobVertices Job vertices involved in the checkpoints._@param jobCheckpointingSettings Snapshotting settings created from the CheckpointConfig._@param metricGroup Metric group for exposed metrics;public CheckpointStatsTracker(_		int numRememberedCheckpoints,_		List<ExecutionJobVertex> jobVertices,_		JobCheckpointingSettings jobCheckpointingSettings,_		MetricGroup metricGroup) {__		checkArgument(numRememberedCheckpoints >= 0, "Negative number of remembered checkpoints")__		this.history = new CheckpointStatsHistory(numRememberedCheckpoints)__		this.jobVertices = checkNotNull(jobVertices, "JobVertices")__		this.jobCheckpointingSettings = checkNotNull(jobCheckpointingSettings)___		_		_		int count = 0__		for (ExecutionJobVertex vertex : jobVertices) {_			count += vertex.getParallelism()__		}_		this.totalSubtaskCount = count___		_		latestSnapshot = new CheckpointStatsSnapshot(_			counts.createSnapshot(),_			summary.createSnapshot(),_			history.createSnapshot(),_			null)___		_		registerMetrics(metricGroup)__	};creates,a,new,checkpoint,stats,tracker,param,num,remembered,checkpoints,maximum,number,of,checkpoints,to,remember,including,in,progress,ones,param,job,vertices,job,vertices,involved,in,the,checkpoints,param,job,checkpointing,settings,snapshotting,settings,created,from,the,checkpoint,config,param,metric,group,metric,group,for,exposed,metrics;public,checkpoint,stats,tracker,int,num,remembered,checkpoints,list,execution,job,vertex,job,vertices,job,checkpointing,settings,job,checkpointing,settings,metric,group,metric,group,check,argument,num,remembered,checkpoints,0,negative,number,of,remembered,checkpoints,this,history,new,checkpoint,stats,history,num,remembered,checkpoints,this,job,vertices,check,not,null,job,vertices,job,vertices,this,job,checkpointing,settings,check,not,null,job,checkpointing,settings,int,count,0,for,execution,job,vertex,vertex,job,vertices,count,vertex,get,parallelism,this,total,subtask,count,count,latest,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,null,register,metrics,metric,group
CheckpointStatsTracker -> public CheckpointStatsTracker( 		int numRememberedCheckpoints, 		List<ExecutionJobVertex> jobVertices, 		JobCheckpointingSettings jobCheckpointingSettings, 		MetricGroup metricGroup);1505995902;Creates a new checkpoint stats tracker.__@param numRememberedCheckpoints Maximum number of checkpoints to remember, including in progress ones._@param jobVertices Job vertices involved in the checkpoints._@param jobCheckpointingSettings Snapshotting settings created from the CheckpointConfig._@param metricGroup Metric group for exposed metrics;public CheckpointStatsTracker(_		int numRememberedCheckpoints,_		List<ExecutionJobVertex> jobVertices,_		JobCheckpointingSettings jobCheckpointingSettings,_		MetricGroup metricGroup) {__		checkArgument(numRememberedCheckpoints >= 0, "Negative number of remembered checkpoints")__		this.history = new CheckpointStatsHistory(numRememberedCheckpoints)__		this.jobVertices = checkNotNull(jobVertices, "JobVertices")__		this.jobCheckpointingSettings = checkNotNull(jobCheckpointingSettings)___		_		_		int count = 0__		for (ExecutionJobVertex vertex : jobVertices) {_			count += vertex.getParallelism()__		}_		this.totalSubtaskCount = count___		_		latestSnapshot = new CheckpointStatsSnapshot(_			counts.createSnapshot(),_			summary.createSnapshot(),_			history.createSnapshot(),_			null)___		_		registerMetrics(metricGroup)__	};creates,a,new,checkpoint,stats,tracker,param,num,remembered,checkpoints,maximum,number,of,checkpoints,to,remember,including,in,progress,ones,param,job,vertices,job,vertices,involved,in,the,checkpoints,param,job,checkpointing,settings,snapshotting,settings,created,from,the,checkpoint,config,param,metric,group,metric,group,for,exposed,metrics;public,checkpoint,stats,tracker,int,num,remembered,checkpoints,list,execution,job,vertex,job,vertices,job,checkpointing,settings,job,checkpointing,settings,metric,group,metric,group,check,argument,num,remembered,checkpoints,0,negative,number,of,remembered,checkpoints,this,history,new,checkpoint,stats,history,num,remembered,checkpoints,this,job,vertices,check,not,null,job,vertices,job,vertices,this,job,checkpointing,settings,check,not,null,job,checkpointing,settings,int,count,0,for,execution,job,vertex,vertex,job,vertices,count,vertex,get,parallelism,this,total,subtask,count,count,latest,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,null,register,metrics,metric,group
CheckpointStatsTracker -> public CheckpointStatsTracker( 		int numRememberedCheckpoints, 		List<ExecutionJobVertex> jobVertices, 		JobCheckpointingSettings jobCheckpointingSettings, 		MetricGroup metricGroup);1506590912;Creates a new checkpoint stats tracker.__@param numRememberedCheckpoints Maximum number of checkpoints to remember, including in progress ones._@param jobVertices Job vertices involved in the checkpoints._@param jobCheckpointingSettings Snapshotting settings created from the CheckpointConfig._@param metricGroup Metric group for exposed metrics;public CheckpointStatsTracker(_		int numRememberedCheckpoints,_		List<ExecutionJobVertex> jobVertices,_		JobCheckpointingSettings jobCheckpointingSettings,_		MetricGroup metricGroup) {__		checkArgument(numRememberedCheckpoints >= 0, "Negative number of remembered checkpoints")__		this.history = new CheckpointStatsHistory(numRememberedCheckpoints)__		this.jobVertices = checkNotNull(jobVertices, "JobVertices")__		this.jobCheckpointingSettings = checkNotNull(jobCheckpointingSettings)___		_		_		int count = 0__		for (ExecutionJobVertex vertex : jobVertices) {_			count += vertex.getParallelism()__		}_		this.totalSubtaskCount = count___		_		latestSnapshot = new CheckpointStatsSnapshot(_			counts.createSnapshot(),_			summary.createSnapshot(),_			history.createSnapshot(),_			null)___		_		registerMetrics(metricGroup)__	};creates,a,new,checkpoint,stats,tracker,param,num,remembered,checkpoints,maximum,number,of,checkpoints,to,remember,including,in,progress,ones,param,job,vertices,job,vertices,involved,in,the,checkpoints,param,job,checkpointing,settings,snapshotting,settings,created,from,the,checkpoint,config,param,metric,group,metric,group,for,exposed,metrics;public,checkpoint,stats,tracker,int,num,remembered,checkpoints,list,execution,job,vertex,job,vertices,job,checkpointing,settings,job,checkpointing,settings,metric,group,metric,group,check,argument,num,remembered,checkpoints,0,negative,number,of,remembered,checkpoints,this,history,new,checkpoint,stats,history,num,remembered,checkpoints,this,job,vertices,check,not,null,job,vertices,job,vertices,this,job,checkpointing,settings,check,not,null,job,checkpointing,settings,int,count,0,for,execution,job,vertex,vertex,job,vertices,count,vertex,get,parallelism,this,total,subtask,count,count,latest,snapshot,new,checkpoint,stats,snapshot,counts,create,snapshot,summary,create,snapshot,history,create,snapshot,null,register,metrics,metric,group
