commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getAddress() {     return taskExecutorGateway.getAddress(). }
false;public;6;17;;@Override public CompletableFuture<StackTraceSampleResponse> requestStackTraceSample(ExecutionAttemptID executionAttemptID, int sampleId, int numSamples, Time delayBetweenSamples, int maxStackTraceDepth, Time timeout) {     return taskExecutorGateway.requestStackTraceSample(executionAttemptID, sampleId, numSamples, delayBetweenSamples, maxStackTraceDepth, timeout). }
false;public;2;4;;@Override public CompletableFuture<Acknowledge> submitTask(TaskDeploymentDescriptor tdd, Time timeout) {     return taskExecutorGateway.submitTask(tdd, jobMasterId, timeout). }
false;public;2;4;;@Override public CompletableFuture<Acknowledge> stopTask(ExecutionAttemptID executionAttemptID, Time timeout) {     return taskExecutorGateway.stopTask(executionAttemptID, timeout). }
false;public;2;4;;@Override public CompletableFuture<Acknowledge> cancelTask(ExecutionAttemptID executionAttemptID, Time timeout) {     return taskExecutorGateway.cancelTask(executionAttemptID, timeout). }
false;public;3;4;;@Override public CompletableFuture<Acknowledge> updatePartitions(ExecutionAttemptID executionAttemptID, Iterable<PartitionInfo> partitionInfos, Time timeout) {     return taskExecutorGateway.updatePartitions(executionAttemptID, partitionInfos, timeout). }
false;public;1;4;;@Override public void failPartition(ExecutionAttemptID executionAttemptID) {     taskExecutorGateway.failPartition(executionAttemptID). }
false;public;4;4;;@Override public void notifyCheckpointComplete(ExecutionAttemptID executionAttemptID, JobID jobId, long checkpointId, long timestamp) {     taskExecutorGateway.confirmCheckpoint(executionAttemptID, checkpointId, timestamp). }
false;public;5;8;;@Override public void triggerCheckpoint(ExecutionAttemptID executionAttemptID, JobID jobId, long checkpointId, long timestamp, CheckpointOptions checkpointOptions) {     taskExecutorGateway.triggerCheckpoint(executionAttemptID, checkpointId, timestamp, checkpointOptions). }
false;public;3;7;;@Override public CompletableFuture<Acknowledge> freeSlot(AllocationID allocationId, Throwable cause, Time timeout) {     return taskExecutorGateway.freeSlot(allocationId, cause, timeout). }
