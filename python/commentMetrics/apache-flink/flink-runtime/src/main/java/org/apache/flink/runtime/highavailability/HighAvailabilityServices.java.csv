commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Gets the leader retriever for the cluster's resource manager.  */ ;// ------------------------------------------------------------------------ // Services // ------------------------------------------------------------------------ /**  * Gets the leader retriever for the cluster's resource manager.  */ LeaderRetrievalService getResourceManagerLeaderRetriever().
true;;0;1;/**  * Gets the leader retriever for the dispatcher. This leader retrieval service  * is not always accessible.  */ ;/**  * Gets the leader retriever for the dispatcher. This leader retrieval service  * is not always accessible.  */ LeaderRetrievalService getDispatcherLeaderRetriever().
true;;1;2;/**  * Gets the leader retriever for the job JobMaster which is responsible for the given job  *  * @param jobID The identifier of the job.  * @return Leader retrieval service to retrieve the job manager for the given job  * @deprecated This method should only be used by the legacy code where the JobManager acts as the master.  */ ;/**  * Gets the leader retriever for the job JobMaster which is responsible for the given job  *  * @param jobID The identifier of the job.  * @return Leader retrieval service to retrieve the job manager for the given job  * @deprecated This method should only be used by the legacy code where the JobManager acts as the master.  */ @Deprecated LeaderRetrievalService getJobManagerLeaderRetriever(JobID jobID).
true;;2;1;/**  * Gets the leader retriever for the job JobMaster which is responsible for the given job  *  * @param jobID The identifier of the job.  * @param defaultJobManagerAddress JobManager address which will be returned by  *                              a static leader retrieval service.  * @return Leader retrieval service to retrieve the job manager for the given job  */ ;/**  * Gets the leader retriever for the job JobMaster which is responsible for the given job  *  * @param jobID The identifier of the job.  * @param defaultJobManagerAddress JobManager address which will be returned by  *                              a static leader retrieval service.  * @return Leader retrieval service to retrieve the job manager for the given job  */ LeaderRetrievalService getJobManagerLeaderRetriever(JobID jobID, String defaultJobManagerAddress).
false;;0;1;;LeaderRetrievalService getWebMonitorLeaderRetriever().
true;;0;1;/**  * Gets the leader election service for the cluster's resource manager.  *  * @return Leader election service for the resource manager leader election  */ ;/**  * Gets the leader election service for the cluster's resource manager.  *  * @return Leader election service for the resource manager leader election  */ LeaderElectionService getResourceManagerLeaderElectionService().
true;;0;1;/**  * Gets the leader election service for the cluster's dispatcher.  *  * @return Leader election service for the dispatcher leader election  */ ;/**  * Gets the leader election service for the cluster's dispatcher.  *  * @return Leader election service for the dispatcher leader election  */ LeaderElectionService getDispatcherLeaderElectionService().
true;;1;1;/**  * Gets the leader election service for the given job.  *  * @param jobID The identifier of the job running the election.  * @return Leader election service for the job manager leader election  */ ;/**  * Gets the leader election service for the given job.  *  * @param jobID The identifier of the job running the election.  * @return Leader election service for the job manager leader election  */ LeaderElectionService getJobManagerLeaderElectionService(JobID jobID).
false;;0;1;;LeaderElectionService getWebMonitorLeaderElectionService().
true;;0;1;/**  * Gets the checkpoint recovery factory for the job manager  *  * @return Checkpoint recovery factory  */ ;/**  * Gets the checkpoint recovery factory for the job manager  *  * @return Checkpoint recovery factory  */ CheckpointRecoveryFactory getCheckpointRecoveryFactory().
true;;0;1;/**  * Gets the submitted job graph store for the job manager  *  * @return Submitted job graph store  * @throws Exception if the submitted job graph store could not be created  */ ;/**  * Gets the submitted job graph store for the job manager  *  * @return Submitted job graph store  * @throws Exception if the submitted job graph store could not be created  */ SubmittedJobGraphStore getSubmittedJobGraphStore() throws Exception.
true;;0;1;/**  * Gets the registry that holds information about whether jobs are currently running.  *  * @return Running job registry to retrieve running jobs  */ ;/**  * Gets the registry that holds information about whether jobs are currently running.  *  * @return Running job registry to retrieve running jobs  */ RunningJobsRegistry getRunningJobsRegistry() throws Exception.
true;;0;1;/**  * Creates the BLOB store in which BLOBs are stored in a highly-available fashion.  *  * @return Blob store  * @throws IOException if the blob store could not be created  */ ;/**  * Creates the BLOB store in which BLOBs are stored in a highly-available fashion.  *  * @return Blob store  * @throws IOException if the blob store could not be created  */ BlobStore createBlobStore() throws IOException.
true;;0;2;/**  * Closes the high availability services, releasing all resources.  *  * <p>This method <b>does not delete or clean up</b> any data stored in external stores  * (file systems, ZooKeeper, etc). Another instance of the high availability  * services will be able to recover the job.  *  * <p>If an exception occurs during closing services, this method will attempt to  * continue closing other services and report exceptions only after all services  * have been attempted to be closed.  *  * @throws Exception Thrown, if an exception occurred while closing these services.  */ ;// ------------------------------------------------------------------------ // Shutdown and Cleanup // ------------------------------------------------------------------------ /**  * Closes the high availability services, releasing all resources.  *  * <p>This method <b>does not delete or clean up</b> any data stored in external stores  * (file systems, ZooKeeper, etc). Another instance of the high availability  * services will be able to recover the job.  *  * <p>If an exception occurs during closing services, this method will attempt to  * continue closing other services and report exceptions only after all services  * have been attempted to be closed.  *  * @throws Exception Thrown, if an exception occurred while closing these services.  */ @Override void close() throws Exception.
true;;0;1;/**  * Closes the high availability services (releasing all resources) and deletes  * all data stored by these services in external stores.  *  * <p>After this method was called, the any job or session that was managed by  * these high availability services will be unrecoverable.  *  * <p>If an exception occurs during cleanup, this method will attempt to  * continue the cleanup and report exceptions only after all cleanup steps have  * been attempted.  *  * @throws Exception Thrown, if an exception occurred while closing these services  *                   or cleaning up data stored by them.  */ ;/**  * Closes the high availability services (releasing all resources) and deletes  * all data stored by these services in external stores.  *  * <p>After this method was called, the any job or session that was managed by  * these high availability services will be unrecoverable.  *  * <p>If an exception occurs during cleanup, this method will attempt to  * continue the cleanup and report exceptions only after all cleanup steps have  * been attempted.  *  * @throws Exception Thrown, if an exception occurred while closing these services  *                   or cleaning up data stored by them.  */ void closeAndCleanupAllData() throws Exception.
