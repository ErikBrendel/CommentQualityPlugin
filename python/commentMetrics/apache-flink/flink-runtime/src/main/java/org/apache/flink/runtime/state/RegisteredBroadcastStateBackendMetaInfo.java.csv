commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Creates a deep copy of the itself.  */ ;/**  * Creates a deep copy of the itself.  */ @Nonnull public RegisteredBroadcastStateBackendMetaInfo<K, V> deepCopy() {     return new RegisteredBroadcastStateBackendMetaInfo<>(this). }
false;public;0;5;;@Nonnull @Override public StateMetaInfoSnapshot snapshot() {     return computeSnapshot(). }
false;public;0;4;;@Nonnull public TypeSerializer<K> getKeySerializer() {     return keySerializerProvider.currentSchemaSerializer(). }
false;public;1;4;;@Nonnull public TypeSerializerSchemaCompatibility<K> updateKeySerializer(TypeSerializer<K> newKeySerializer) {     return keySerializerProvider.registerNewSerializerForRestoredState(newKeySerializer). }
false;public;0;4;;@Nullable public TypeSerializer<K> getPreviousKeySerializer() {     return keySerializerProvider.previousSchemaSerializer(). }
false;public;0;4;;@Nonnull public TypeSerializer<V> getValueSerializer() {     return valueSerializerProvider.currentSchemaSerializer(). }
false;public;1;4;;@Nonnull public TypeSerializerSchemaCompatibility<V> updateValueSerializer(TypeSerializer<V> newValueSerializer) {     return valueSerializerProvider.registerNewSerializerForRestoredState(newValueSerializer). }
false;public;0;4;;@Nullable public TypeSerializer<V> getPreviousValueSerializer() {     return valueSerializerProvider.previousSchemaSerializer(). }
false;public;0;4;;@Nonnull public OperatorStateHandle.Mode getAssignmentMode() {     return assignmentMode. }
false;public;1;18;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (!(obj instanceof RegisteredBroadcastStateBackendMetaInfo)) {         return false.     }     final RegisteredBroadcastStateBackendMetaInfo other = (RegisteredBroadcastStateBackendMetaInfo) obj.     return Objects.equals(name, other.getName()) && Objects.equals(assignmentMode, other.getAssignmentMode()) && Objects.equals(getKeySerializer(), other.getKeySerializer()) && Objects.equals(getValueSerializer(), other.getValueSerializer()). }
false;public;0;8;;@Override public int hashCode() {     int result = name.hashCode().     result = 31 * result + assignmentMode.hashCode().     result = 31 * result + getKeySerializer().hashCode().     result = 31 * result + getValueSerializer().hashCode().     return result. }
false;public;0;9;;@Override public String toString() {     return "RegisteredBroadcastBackendStateMetaInfo{" + "name='" + name + '\'' + ", keySerializer=" + getKeySerializer() + ", valueSerializer=" + getValueSerializer() + ", assignmentMode=" + assignmentMode + '}'. }
false;private;0;25;;@Nonnull private StateMetaInfoSnapshot computeSnapshot() {     Map<String, String> optionsMap = Collections.singletonMap(StateMetaInfoSnapshot.CommonOptionsKeys.OPERATOR_STATE_DISTRIBUTION_MODE.toString(), assignmentMode.toString()).     Map<String, TypeSerializer<?>> serializerMap = new HashMap<>(2).     Map<String, TypeSerializerSnapshot<?>> serializerConfigSnapshotsMap = new HashMap<>(2).     String keySerializerKey = StateMetaInfoSnapshot.CommonSerializerKeys.KEY_SERIALIZER.toString().     String valueSerializerKey = StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER.toString().     TypeSerializer<K> keySerializer = getKeySerializer().     serializerMap.put(keySerializerKey, keySerializer.duplicate()).     serializerConfigSnapshotsMap.put(keySerializerKey, keySerializer.snapshotConfiguration()).     TypeSerializer<V> valueSerializer = getValueSerializer().     serializerMap.put(valueSerializerKey, valueSerializer.duplicate()).     serializerConfigSnapshotsMap.put(valueSerializerKey, valueSerializer.snapshotConfiguration()).     return new StateMetaInfoSnapshot(name, StateMetaInfoSnapshot.BackendStateType.BROADCAST, optionsMap, serializerConfigSnapshotsMap, serializerMap). }
