commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public String getType() {     return type. }
false;public;0;3;;public String getValue() {     return value. }
true;public,static;1;14;/**  * Flatten a map of accumulator names to Accumulator instances into an array of StringifiedAccumulatorResult values.  */ ;// ------------------------------------------------------------------------ // Utilities // ------------------------------------------------------------------------ /**  * Flatten a map of accumulator names to Accumulator instances into an array of StringifiedAccumulatorResult values.  */ public static StringifiedAccumulatorResult[] stringifyAccumulatorResults(Map<String, OptionalFailure<Accumulator<?, ?>>> accs) {     if (accs == null || accs.isEmpty()) {         return new StringifiedAccumulatorResult[0].     } else {         StringifiedAccumulatorResult[] results = new StringifiedAccumulatorResult[accs.size()].         int i = 0.         for (Map.Entry<String, OptionalFailure<Accumulator<?, ?>>> entry : accs.entrySet()) {             results[i++] = stringifyAccumulatorResult(entry.getKey(), entry.getValue()).         }         return results.     } }
false;private,static;2;26;;private static StringifiedAccumulatorResult stringifyAccumulatorResult(String name, @Nullable OptionalFailure<Accumulator<?, ?>> accumulator) {     if (accumulator == null) {         return new StringifiedAccumulatorResult(name, "null", "null").     } else if (accumulator.isFailure()) {         return new StringifiedAccumulatorResult(name, "null", ExceptionUtils.stringifyException(accumulator.getFailureCause())).     } else {         Object localValue.         String simpleName = "null".         try {             simpleName = accumulator.getUnchecked().getClass().getSimpleName().             localValue = accumulator.getUnchecked().getLocalValue().         } catch (RuntimeException exception) {             LOG.error("Failed to stringify accumulator [" + name + "]", exception).             localValue = ExceptionUtils.stringifyException(exception).         }         return new StringifiedAccumulatorResult(name, simpleName, localValue != null ? localValue.toString() : "null").     } }
