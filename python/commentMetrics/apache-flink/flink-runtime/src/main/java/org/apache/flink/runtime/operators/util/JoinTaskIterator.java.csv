commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * General-purpose open method. Initializes the internal strategy (for example triggers the  * sorting of the inputs or starts building hash tables).  *  * @throws IOException Thrown, if an I/O error occurred while preparing the data. An example is a failing  *                     external sort.  * @throws MemoryAllocationException Thrown, if the internal strategy could not allocate the memory it needs.  * @throws InterruptedException Thrown, if the thread was interrupted during the initialization process.  */ ;/**  * General-purpose open method. Initializes the internal strategy (for example triggers the  * sorting of the inputs or starts building hash tables).  *  * @throws IOException Thrown, if an I/O error occurred while preparing the data. An example is a failing  *                     external sort.  * @throws MemoryAllocationException Thrown, if the internal strategy could not allocate the memory it needs.  * @throws InterruptedException Thrown, if the thread was interrupted during the initialization process.  */ void open() throws IOException, MemoryAllocationException, InterruptedException.
true;;0;1;/**  * General-purpose close method. Works after the principle of best effort. The internal structures are  * released, but errors that occur on the way are not reported.  */ ;/**  * General-purpose close method. Works after the principle of best effort. The internal structures are  * released, but errors that occur on the way are not reported.  */ void close().
true;;2;1;/**  * Moves the internal pointer to the next key that both inputs share. It calls the match stub with the  * cross product of all values that share the same key.  *  * @param matchFunction The match stub containing the match function which is called with the keys.  * @param collector The collector to pass the match function.  * @return True, if a next key exists, false if no more keys exist.  * @throws Exception Exceptions from the user code are forwarded.  */ ;/**  * Moves the internal pointer to the next key that both inputs share. It calls the match stub with the  * cross product of all values that share the same key.  *  * @param matchFunction The match stub containing the match function which is called with the keys.  * @param collector The collector to pass the match function.  * @return True, if a next key exists, false if no more keys exist.  * @throws Exception Exceptions from the user code are forwarded.  */ boolean callWithNextKey(FlatJoinFunction<V1, V2, O> matchFunction, Collector<O> collector) throws Exception.
true;;0;1;/**  * Aborts the matching process. This extra abort method is supplied, because a significant time may pass while  * calling the match stub with the cross product of all values that share the same key. A call to this abort  * method signals an interrupt to that procedure.  */ ;/**  * Aborts the matching process. This extra abort method is supplied, because a significant time may pass while  * calling the match stub with the cross product of all values that share the same key. A call to this abort  * method signals an interrupt to that procedure.  */ void abort().
