commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Gets the reference bytes.  *  * <p><b>Important:</b> For efficiency, this method does not make a defensive copy,  * so the caller must not modify the bytes in the array.  */ ;// ------------------------------------------------------------------------ /**  * Gets the reference bytes.  *  * <p><b>Important:</b> For efficiency, this method does not make a defensive copy,  * so the caller must not modify the bytes in the array.  */ public byte[] getReferenceBytes() {     // return a non null object always     return encodedReference != null ? encodedReference : new byte[0]. }
true;public;0;3;/**  * Returns true, if this object is the default reference.  */ ;/**  * Returns true, if this object is the default reference.  */ public boolean isDefaultReference() {     return encodedReference == null. }
false;public;0;4;;// ------------------------------------------------------------------------ @Override public int hashCode() {     return encodedReference == null ? 2059243550 : Arrays.hashCode(encodedReference). }
false;public;1;6;;@Override public boolean equals(Object obj) {     return obj == this || obj != null && obj.getClass() == CheckpointStorageLocationReference.class && Arrays.equals(encodedReference, ((CheckpointStorageLocationReference) obj).encodedReference). }
false;public;0;5;;@Override public String toString() {     return encodedReference == null ? "(default)" : StringUtils.byteToHexString(encodedReference, 0, encodedReference.length). }
true;protected,final;0;3;/**  * readResolve() preserves the singleton property of the default value.  */ ;/**  * readResolve() preserves the singleton property of the default value.  */ protected final Object readResolve() throws ObjectStreamException {     return encodedReference == null ? DEFAULT : this. }
false;public,static;0;3;;public static CheckpointStorageLocationReference getDefault() {     return DEFAULT. }
