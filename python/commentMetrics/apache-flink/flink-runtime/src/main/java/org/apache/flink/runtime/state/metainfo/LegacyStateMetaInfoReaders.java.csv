commented;modifiers;parameterAmount;loc;comment;code
false;public;2;26;;@Nonnull @Override public StateMetaInfoSnapshot readStateMetaInfoSnapshot(@Nonnull DataInputView in, @Nonnull ClassLoader userCodeClassLoader) throws IOException {     final StateDescriptor.Type stateDescType = StateDescriptor.Type.values()[in.readInt()].     final String stateName = in.readUTF().     List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> serializersAndConfigs = TypeSerializerSerializationUtil.readSerializersAndConfigsWithResilience(in, userCodeClassLoader).     Map<String, String> optionsMap = Collections.singletonMap(StateMetaInfoSnapshot.CommonOptionsKeys.KEYED_STATE_TYPE.toString(), stateDescType.toString()).     Map<String, TypeSerializerSnapshot<?>> serializerConfigSnapshotMap = new HashMap<>(2).     serializerConfigSnapshotMap.put(StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER.toString(), serializersAndConfigs.get(0).f1).     serializerConfigSnapshotMap.put(StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER.toString(), serializersAndConfigs.get(1).f1).     return new StateMetaInfoSnapshot(stateName, StateMetaInfoSnapshot.BackendStateType.KEY_VALUE, optionsMap, serializerConfigSnapshotMap). }
false;public;2;29;;@Nonnull @Override public StateMetaInfoSnapshot readStateMetaInfoSnapshot(@Nonnull DataInputView in, @Nonnull ClassLoader userCodeClassLoader) throws IOException {     final StateDescriptor.Type stateDescType = StateDescriptor.Type.values()[in.readInt()].     final String stateName = in.readUTF().     Map<String, String> optionsMap = Collections.singletonMap(StateMetaInfoSnapshot.CommonOptionsKeys.KEYED_STATE_TYPE.toString(), stateDescType.toString()).     Map<String, TypeSerializerSnapshot<?>> serializerConfigSnapshotMap = new HashMap<>(2).     serializerConfigSnapshotMap.put(StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER.toString(), new BackwardsCompatibleSerializerSnapshot<>(TypeSerializerSerializationUtil.tryReadSerializer(in, userCodeClassLoader, true))).     serializerConfigSnapshotMap.put(StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER.toString(), new BackwardsCompatibleSerializerSnapshot<>(TypeSerializerSerializationUtil.tryReadSerializer(in, userCodeClassLoader, true))).     return new StateMetaInfoSnapshot(stateName, StateMetaInfoSnapshot.BackendStateType.KEY_VALUE, optionsMap, serializerConfigSnapshotMap). }
false;public;2;46;;@Nonnull @Override public StateMetaInfoSnapshot readStateMetaInfoSnapshot(@Nonnull DataInputView in, @Nonnull ClassLoader userCodeClassLoader) throws IOException {     final String name = in.readUTF().     final OperatorStateHandle.Mode mode = OperatorStateHandle.Mode.values()[in.readByte()].     Map<String, String> optionsMap = Collections.singletonMap(StateMetaInfoSnapshot.CommonOptionsKeys.OPERATOR_STATE_DISTRIBUTION_MODE.toString(), mode.toString()).     List<Tuple2<TypeSerializer<?>, TypeSerializerSnapshot<?>>> stateSerializerAndConfigList = TypeSerializerSerializationUtil.readSerializersAndConfigsWithResilience(in, userCodeClassLoader).     final int listSize = stateSerializerAndConfigList.size().     StateMetaInfoSnapshot.BackendStateType stateType = listSize == 1 ? StateMetaInfoSnapshot.BackendStateType.OPERATOR : StateMetaInfoSnapshot.BackendStateType.BROADCAST.     Map<String, TypeSerializerSnapshot<?>> serializerConfigsMap = new HashMap<>(listSize).     switch(stateType) {         case OPERATOR:             serializerConfigsMap.put(StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER.toString(), stateSerializerAndConfigList.get(0).f1).             break.         case BROADCAST:             serializerConfigsMap.put(StateMetaInfoSnapshot.CommonSerializerKeys.KEY_SERIALIZER.toString(), stateSerializerAndConfigList.get(0).f1).             serializerConfigsMap.put(StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER.toString(), stateSerializerAndConfigList.get(1).f1).             break.         default:             throw new IllegalStateException("Unknown operator state type " + stateType).     }     return new StateMetaInfoSnapshot(name, stateType, optionsMap, serializerConfigsMap). }
false;public;2;33;;@Nonnull @Override public StateMetaInfoSnapshot readStateMetaInfoSnapshot(@Nonnull DataInputView in, @Nonnull ClassLoader userCodeClassLoader) throws IOException {     final String name = in.readUTF().     final OperatorStateHandle.Mode mode = OperatorStateHandle.Mode.values()[in.readByte()].     final Map<String, String> optionsMap = Collections.singletonMap(StateMetaInfoSnapshot.CommonOptionsKeys.OPERATOR_STATE_DISTRIBUTION_MODE.toString(), mode.toString()).     DataInputViewStream dis = new DataInputViewStream(in).     ClassLoader previousClassLoader = Thread.currentThread().getContextClassLoader().     try (InstantiationUtil.FailureTolerantObjectInputStream ois = new InstantiationUtil.FailureTolerantObjectInputStream(dis, userCodeClassLoader)) {         Thread.currentThread().setContextClassLoader(userCodeClassLoader).         TypeSerializer<?> stateSerializer = (TypeSerializer<?>) ois.readObject().         return new StateMetaInfoSnapshot(name, StateMetaInfoSnapshot.BackendStateType.OPERATOR, optionsMap, Collections.singletonMap(StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER.toString(), new BackwardsCompatibleSerializerSnapshot<>(stateSerializer))).     } catch (ClassNotFoundException exception) {         throw new IOException(exception).     } finally {         Thread.currentThread().setContextClassLoader(previousClassLoader).     } }
