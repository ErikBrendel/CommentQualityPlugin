commented;modifiers;parameterAmount;loc;comment;code
true;;5;6;/**  * Allocating slot with specific requirement.  *  * @param slotRequestId identifying the slot request  * @param scheduledUnit The task to allocate the slot for  * @param slotProfile profile of the requested slot  * @param allowQueuedScheduling Whether allow the task be queued if we do not have enough resource  * @param allocationTimeout after which the allocation fails with a timeout exception  * @return The future of the allocation  */ ;/**  * Allocating slot with specific requirement.  *  * @param slotRequestId identifying the slot request  * @param scheduledUnit The task to allocate the slot for  * @param slotProfile profile of the requested slot  * @param allowQueuedScheduling Whether allow the task be queued if we do not have enough resource  * @param allocationTimeout after which the allocation fails with a timeout exception  * @return The future of the allocation  */ CompletableFuture<LogicalSlot> allocateSlot(SlotRequestId slotRequestId, ScheduledUnit scheduledUnit, SlotProfile slotProfile, boolean allowQueuedScheduling, Time allocationTimeout).
true;default;4;12;/**  * Allocating slot with specific requirement.  *  * @param scheduledUnit The task to allocate the slot for  * @param allowQueued Whether allow the task be queued if we do not have enough resource  * @param slotProfile profile of the requested slot  * @param allocationTimeout after which the allocation fails with a timeout exception  * @return The future of the allocation  */ ;/**  * Allocating slot with specific requirement.  *  * @param scheduledUnit The task to allocate the slot for  * @param allowQueued Whether allow the task be queued if we do not have enough resource  * @param slotProfile profile of the requested slot  * @param allocationTimeout after which the allocation fails with a timeout exception  * @return The future of the allocation  */ default CompletableFuture<LogicalSlot> allocateSlot(ScheduledUnit scheduledUnit, boolean allowQueued, SlotProfile slotProfile, Time allocationTimeout) {     return allocateSlot(new SlotRequestId(), scheduledUnit, slotProfile, allowQueued, allocationTimeout). }
true;;3;4;/**  * Cancels the slot request with the given {@link SlotRequestId} and {@link SlotSharingGroupId}.  *  * @param slotRequestId identifying the slot request to cancel  * @param slotSharingGroupId identifying the slot request to cancel  * @param cause of the cancellation  */ ;/**  * Cancels the slot request with the given {@link SlotRequestId} and {@link SlotSharingGroupId}.  *  * @param slotRequestId identifying the slot request to cancel  * @param slotSharingGroupId identifying the slot request to cancel  * @param cause of the cancellation  */ void cancelSlotRequest(SlotRequestId slotRequestId, @Nullable SlotSharingGroupId slotSharingGroupId, Throwable cause).
