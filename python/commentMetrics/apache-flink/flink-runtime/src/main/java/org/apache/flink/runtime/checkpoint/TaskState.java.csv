commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public JobVertexID getJobVertexID() {     return jobVertexID. }
false;public;2;10;;public void putState(int subtaskIndex, SubtaskState subtaskState) {     Preconditions.checkNotNull(subtaskState).     if (subtaskIndex < 0 || subtaskIndex >= parallelism) {         throw new IndexOutOfBoundsException("The given sub task index " + subtaskIndex + " exceeds the maximum number of sub tasks " + subtaskStates.size()).     } else {         subtaskStates.put(subtaskIndex, subtaskState).     } }
false;public;1;8;;public SubtaskState getState(int subtaskIndex) {     if (subtaskIndex < 0 || subtaskIndex >= parallelism) {         throw new IndexOutOfBoundsException("The given sub task index " + subtaskIndex + " exceeds the maximum number of sub tasks " + subtaskStates.size()).     } else {         return subtaskStates.get(subtaskIndex).     } }
false;public;0;3;;public Collection<SubtaskState> getStates() {     return subtaskStates.values(). }
false;public;0;3;;public int getNumberCollectedStates() {     return subtaskStates.size(). }
false;public;0;3;;public int getParallelism() {     return parallelism. }
false;public;0;3;;public int getMaxParallelism() {     return maxParallelism. }
false;public;0;3;;public int getChainLength() {     return chainLength. }
false;public;0;6;;@Override public void discardState() throws Exception {     for (SubtaskState subtaskState : subtaskStates.values()) {         subtaskState.discardState().     } }
false;public;1;6;;@Override public void registerSharedStates(SharedStateRegistry sharedStateRegistry) {     for (SubtaskState subtaskState : subtaskStates.values()) {         subtaskState.registerSharedStates(sharedStateRegistry).     } }
false;public;0;13;;@Override public long getStateSize() {     long result = 0L.     for (int i = 0. i < parallelism. i++) {         SubtaskState subtaskState = subtaskStates.get(i).         if (subtaskState != null) {             result += subtaskState.getStateSize().         }     }     return result. }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (obj instanceof TaskState) {         TaskState other = (TaskState) obj.         return jobVertexID.equals(other.jobVertexID) && parallelism == other.parallelism && subtaskStates.equals(other.subtaskStates).     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return parallelism + 31 * Objects.hash(jobVertexID, subtaskStates). }
false;public;0;3;;public Map<Integer, SubtaskState> getSubtaskStates() {     return Collections.unmodifiableMap(subtaskStates). }
false;public;0;11;;@Override public String toString() {     // confuse users that don't care about how we store it internally.     return "TaskState(" + "jobVertexID: " + jobVertexID + ", parallelism: " + parallelism + ", sub task states: " + subtaskStates.size() + ", total size (bytes): " + getStateSize() + ')'. }
