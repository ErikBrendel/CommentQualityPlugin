commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * General-purpose open method.  *  * @throws IOException  * @throws MemoryAllocationException  * @throws InterruptedException  */ ;/**  * General-purpose open method.  *  * @throws IOException  * @throws MemoryAllocationException  * @throws InterruptedException  */ void open() throws IOException, MemoryAllocationException, InterruptedException.
true;;0;1;/**  * General-purpose close method.  */ ;/**  * General-purpose close method.  */ void close().
true;;0;1;/**  * Moves the internal pointer to the next key (if present). Returns true if the operation was  * successful or false if no more keys are present.  * <p>  * The key is not necessarily shared by both inputs. In that case an empty iterator is  * returned by getValues1() or getValues2().  *  * @return true on success, false if no more keys are present  * @throws IOException  */ ;/**  * Moves the internal pointer to the next key (if present). Returns true if the operation was  * successful or false if no more keys are present.  * <p>  * The key is not necessarily shared by both inputs. In that case an empty iterator is  * returned by getValues1() or getValues2().  *  * @return true on success, false if no more keys are present  * @throws IOException  */ boolean next() throws IOException.
true;;0;1;/**  * Returns an iterable over the left input values for the current key.  *  * @return an iterable over the left input values for the current key.  */ ;/**  * Returns an iterable over the left input values for the current key.  *  * @return an iterable over the left input values for the current key.  */ Iterable<T1> getValues1().
true;;0;1;/**  * Returns an iterable over the left input values for the current key.  *  * @return an iterable over the left input values for the current key.  */ ;/**  * Returns an iterable over the left input values for the current key.  *  * @return an iterable over the left input values for the current key.  */ Iterable<T2> getValues2().
