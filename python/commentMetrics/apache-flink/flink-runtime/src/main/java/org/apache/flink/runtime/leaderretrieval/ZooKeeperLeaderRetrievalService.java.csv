commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public void stateChanged(CuratorFramework client, ConnectionState newState) {     handleStateChange(newState). }
false;public;1;20;;@Override public void start(LeaderRetrievalListener listener) throws Exception {     Preconditions.checkNotNull(listener, "Listener must not be null.").     Preconditions.checkState(leaderListener == null, "ZooKeeperLeaderRetrievalService can " + "only be started once.").     LOG.info("Starting ZooKeeperLeaderRetrievalService {}.", retrievalPath).     synchronized (lock) {         leaderListener = listener.         client.getUnhandledErrorListenable().addListener(this).         cache.getListenable().addListener(this).         cache.start().         client.getConnectionStateListenable().addListener(connectionStateListener).         running = true.     } }
false;public;0;21;;@Override public void stop() throws Exception {     LOG.info("Stopping ZooKeeperLeaderRetrievalService {}.", retrievalPath).     synchronized (lock) {         if (!running) {             return.         }         running = false.     }     client.getUnhandledErrorListenable().removeListener(this).     client.getConnectionStateListenable().removeListener(connectionStateListener).     try {         cache.close().     } catch (IOException e) {         throw new Exception("Could not properly stop the ZooKeeperLeaderRetrievalService.", e).     } }
false;public;0;50;;@Override public void nodeChanged() throws Exception {     synchronized (lock) {         if (running) {             try {                 LOG.debug("Leader node has changed.").                 ChildData childData = cache.getCurrentData().                 String leaderAddress.                 UUID leaderSessionID.                 if (childData == null) {                     leaderAddress = null.                     leaderSessionID = null.                 } else {                     byte[] data = childData.getData().                     if (data == null || data.length == 0) {                         leaderAddress = null.                         leaderSessionID = null.                     } else {                         ByteArrayInputStream bais = new ByteArrayInputStream(data).                         ObjectInputStream ois = new ObjectInputStream(bais).                         leaderAddress = ois.readUTF().                         leaderSessionID = (UUID) ois.readObject().                     }                 }                 if (!(Objects.equals(leaderAddress, lastLeaderAddress) && Objects.equals(leaderSessionID, lastLeaderSessionID))) {                     LOG.debug("New leader information: Leader={}, session ID={}.", leaderAddress, leaderSessionID).                     lastLeaderAddress = leaderAddress.                     lastLeaderSessionID = leaderSessionID.                     leaderListener.notifyLeaderAddress(leaderAddress, leaderSessionID).                 }             } catch (Exception e) {                 leaderListener.handleError(new Exception("Could not handle node changed event.", e)).                 throw e.             }         } else {             LOG.debug("Ignoring node change notification since the service has already been stopped.").         }     } }
false;protected;1;18;;protected void handleStateChange(ConnectionState newState) {     switch(newState) {         case CONNECTED:             LOG.debug("Connected to ZooKeeper quorum. Leader retrieval can start.").             break.         case SUSPENDED:             LOG.warn("Connection to ZooKeeper suspended. Can no longer retrieve the leader from " + "ZooKeeper.").             break.         case RECONNECTED:             LOG.info("Connection to ZooKeeper was reconnected. Leader retrieval can be restarted.").             break.         case LOST:             LOG.warn("Connection to ZooKeeper lost. Can no longer retrieve the leader from " + "ZooKeeper.").             break.     } }
false;public;2;4;;@Override public void unhandledError(String s, Throwable throwable) {     leaderListener.handleError(new FlinkException("Unhandled error in ZooKeeperLeaderRetrievalService:" + s, throwable)). }
