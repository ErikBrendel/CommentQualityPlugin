commented;modifiers;parameterAmount;loc;comment;code
false;public;2;28;;@Override public void mergeNamespaces(N target, Collection<N> sources) throws Exception {     if (sources == null || sources.isEmpty()) {         // nothing to do         return.     }     final StateTable<K, N, SV> map = stateTable.     SV merged = null.     // merge the sources     for (N source : sources) {         // get and remove the next source per namespace/key         SV sourceState = map.removeAndGetOld(source).         if (merged != null && sourceState != null) {             merged = mergeState(merged, sourceState).         } else if (merged == null) {             merged = sourceState.         }     }     // merge into the target, if needed     if (merged != null) {         map.transform(target, merged, mergeTransformation).     } }
false;protected,abstract;2;1;;protected abstract SV mergeState(SV a, SV b) throws Exception.
false;public;2;8;;@Override public SV apply(SV targetState, SV merged) throws Exception {     if (targetState != null) {         return mergeState(targetState, merged).     } else {         return merged.     } }
