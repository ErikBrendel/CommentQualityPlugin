commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;44;;@Override protected List<Tuple2<RestHandlerSpecification, ChannelInboundHandler>> initializeHandlers(final CompletableFuture<String> localAddressFuture) {     List<Tuple2<RestHandlerSpecification, ChannelInboundHandler>> handlers = super.initializeHandlers(localAddressFuture).     // Add the Dispatcher specific handlers     final Time timeout = restConfiguration.getTimeout().     JobSubmitHandler jobSubmitHandler = new JobSubmitHandler(leaderRetriever, timeout, responseHeaders, executor, clusterConfiguration).     if (clusterConfiguration.getBoolean(WebOptions.SUBMIT_ENABLE)) {         try {             webSubmissionExtension = WebMonitorUtils.loadWebSubmissionExtension(leaderRetriever, timeout, responseHeaders, localAddressFuture, uploadDir, executor, clusterConfiguration).             // register extension handlers             handlers.addAll(webSubmissionExtension.getHandlers()).         } catch (FlinkException e) {             if (log.isDebugEnabled()) {                 log.debug("Failed to load web based job submission extension.", e).             } else {                 log.info("Failed to load web based job submission extension. " + "Probable reason: flink-runtime-web is not in the classpath.").             }         }     } else {         log.info("Web-based job submission is not enabled.").     }     handlers.add(Tuple2.of(jobSubmitHandler.getMessageHeaders(), jobSubmitHandler)).     return handlers. }
false;protected;0;23;;@Override protected CompletableFuture<Void> shutDownInternal() {     final CompletableFuture<Void> shutdownFuture = super.shutDownInternal().     final CompletableFuture<Void> shutdownResultFuture = new CompletableFuture<>().     shutdownFuture.whenComplete((Void ignored, Throwable throwable) -> {         webSubmissionExtension.closeAsync().whenComplete((Void innerIgnored, Throwable innerThrowable) -> {             if (innerThrowable != null) {                 shutdownResultFuture.completeExceptionally(ExceptionUtils.firstOrSuppressed(innerThrowable, throwable)).             } else if (throwable != null) {                 shutdownResultFuture.completeExceptionally(throwable).             } else {                 shutdownResultFuture.complete(null).             }         }).     }).     return shutdownResultFuture. }
