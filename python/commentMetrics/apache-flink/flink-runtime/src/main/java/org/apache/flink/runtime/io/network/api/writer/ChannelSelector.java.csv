commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Initializes the channel selector with the number of output channels.  *  * @param numberOfChannels the total number of output channels which are attached  * 		to respective output gate.  */ ;/**  * Initializes the channel selector with the number of output channels.  *  * @param numberOfChannels the total number of output channels which are attached  * 		to respective output gate.  */ void setup(int numberOfChannels).
true;;1;1;/**  * Returns the logical channel index, to which the given record should be written. It is  * illegal to call this method for broadcast channel selectors and this method can remain  * not implemented in that case (for example by throwing {@link UnsupportedOperationException}).  *  * @param record the record to determine the output channels for.  * @return an integer number which indicates the index of the output  * 		channel through which the record shall be forwarded.  */ ;/**  * Returns the logical channel index, to which the given record should be written. It is  * illegal to call this method for broadcast channel selectors and this method can remain  * not implemented in that case (for example by throwing {@link UnsupportedOperationException}).  *  * @param record the record to determine the output channels for.  * @return an integer number which indicates the index of the output  * 		channel through which the record shall be forwarded.  */ int selectChannel(T record).
true;;0;1;/**  * Returns whether the channel selector always selects all the output channels.  *  * @return true if the selector is for broadcast mode.  */ ;/**  * Returns whether the channel selector always selects all the output channels.  *  * @return true if the selector is for broadcast mode.  */ boolean isBroadcast().
