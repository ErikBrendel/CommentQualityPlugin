commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void enterMainThread() {     assert (endpoint.currentMainThread.compareAndSet(null, Thread.currentThread())) : "The RpcEndpoint has concurrent access from " + endpoint.currentMainThread.get(). }
false;public;0;4;;public void exitMainThread() {     assert (endpoint.currentMainThread.compareAndSet(Thread.currentThread(), null)) : "The RpcEndpoint has concurrent access from " + endpoint.currentMainThread.get(). }
true;public,static;1;14;/**  * Returns true iff the current thread is equals to the provided expected thread and logs violations.  *  * @param expected the expected main thread.  * @return true iff the current thread is equals to the provided expected thread.  */ ;/**  * Returns true iff the current thread is equals to the provided expected thread and logs violations.  *  * @param expected the expected main thread.  * @return true iff the current thread is equals to the provided expected thread.  */ public static boolean isRunningInExpectedThread(@Nullable Thread expected) {     Thread actual = Thread.currentThread().     if (expected != actual) {         String violationMsg = "Violation of main thread constraint detected: expected <" + expected + "> but running in <" + actual + ">.".         log.warn(violationMsg, new Exception(violationMsg)).         return false.     }     return true. }
