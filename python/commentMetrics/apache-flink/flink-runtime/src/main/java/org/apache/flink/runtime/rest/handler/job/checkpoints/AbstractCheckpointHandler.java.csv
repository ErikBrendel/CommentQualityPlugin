commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;24;;@Override protected R handleRequest(HandlerRequest<EmptyRequestBody, M> request, AccessExecutionGraph executionGraph) throws RestHandlerException {     final long checkpointId = request.getPathParameter(CheckpointIdPathParameter.class).     final CheckpointStatsSnapshot checkpointStatsSnapshot = executionGraph.getCheckpointStatsSnapshot().     if (checkpointStatsSnapshot != null) {         AbstractCheckpointStats checkpointStats = checkpointStatsSnapshot.getHistory().getCheckpointById(checkpointId).         if (checkpointStats != null) {             checkpointStatsCache.tryAdd(checkpointStats).         } else {             checkpointStats = checkpointStatsCache.tryGet(checkpointId).         }         if (checkpointStats != null) {             return handleCheckpointRequest(request, checkpointStats).         } else {             throw new RestHandlerException("Could not find checkpointing statistics for checkpoint " + checkpointId + '.', HttpResponseStatus.NOT_FOUND).         }     } else {         throw new RestHandlerException("Checkpointing was not enabled for job " + executionGraph.getJobID() + '.', HttpResponseStatus.NOT_FOUND).     } }
true;protected,abstract;2;1;/**  * Called for each request with the corresponding {@link AbstractCheckpointStats} instance.  *  * @param request for further information  * @param checkpointStats for which the handler is called  * @return Response  * @throws RestHandlerException if the handler could not handle the request  */ ;/**  * Called for each request with the corresponding {@link AbstractCheckpointStats} instance.  *  * @param request for further information  * @param checkpointStats for which the handler is called  * @return Response  * @throws RestHandlerException if the handler could not handle the request  */ protected abstract R handleCheckpointRequest(HandlerRequest<EmptyRequestBody, M> request, AbstractCheckpointStats checkpointStats) throws RestHandlerException.
