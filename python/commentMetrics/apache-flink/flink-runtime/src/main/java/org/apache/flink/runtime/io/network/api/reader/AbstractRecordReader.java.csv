commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;51;;protected boolean getNextRecord(T target) throws IOException, InterruptedException {     if (isFinished) {         return false.     }     while (true) {         if (currentRecordDeserializer != null) {             DeserializationResult result = currentRecordDeserializer.getNextRecord(target).             if (result.isBufferConsumed()) {                 final Buffer currentBuffer = currentRecordDeserializer.getCurrentBuffer().                 currentBuffer.recycleBuffer().                 currentRecordDeserializer = null.             }             if (result.isFullRecord()) {                 return true.             }         }         final BufferOrEvent bufferOrEvent = inputGate.getNextBufferOrEvent().orElseThrow(IllegalStateException::new).         if (bufferOrEvent.isBuffer()) {             currentRecordDeserializer = recordDeserializers[bufferOrEvent.getChannelIndex()].             currentRecordDeserializer.setNextBuffer(bufferOrEvent.getBuffer()).         } else {             // records, not in the middle of a fragment             if (recordDeserializers[bufferOrEvent.getChannelIndex()].hasUnfinishedData()) {                 throw new IOException("Received an event in channel " + bufferOrEvent.getChannelIndex() + " while still having " + "data from a record. This indicates broken serialization logic. " + "If you are using custom serialization code (Writable or Value types), check their " + "serialization routines. In the case of Kryo, check the respective Kryo serializer.").             }             if (handleEvent(bufferOrEvent.getEvent())) {                 if (inputGate.isFinished()) {                     isFinished = true.                     return false.                 } else if (hasReachedEndOfSuperstep()) {                     return false.                 }             // else: More data is coming...             }         }     } }
false;public;0;9;;public void clearBuffers() {     for (RecordDeserializer<?> deserializer : recordDeserializers) {         Buffer buffer = deserializer.getCurrentBuffer().         if (buffer != null && !buffer.isRecycled()) {             buffer.recycleBuffer().         }         deserializer.clear().     } }
