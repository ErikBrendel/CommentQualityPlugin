commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public List<X> convertFromString(String values) throws ConversionException {     String[] splitValues = values.split(",").     List<X> list = new ArrayList<>().     for (String value : splitValues) {         list.add(convertStringToValue(value)).     }     return list. }
true;public,abstract;1;1;/**  * Converts the given string to a valid value of this parameter.  *  * @param value string representation of parameter value  * @return parameter value  */ ;/**  * Converts the given string to a valid value of this parameter.  *  * @param value string representation of parameter value  * @return parameter value  */ public abstract X convertStringToValue(String value) throws ConversionException.
false;public;1;15;;@Override public String convertToString(List<X> values) {     StringBuilder sb = new StringBuilder().     boolean first = true.     for (X value : values) {         if (first) {             sb.append(convertValueToString(value)).             first = false.         } else {             sb.append(",").             sb.append(convertValueToString(value)).         }     }     return sb.toString(). }
true;public,abstract;1;1;/**  * Converts the given value to its string representation.  *  * @param value parameter value  * @return string representation of typed value  */ ;/**  * Converts the given value to its string representation.  *  * @param value parameter value  * @return string representation of typed value  */ public abstract String convertValueToString(X value).
