commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Callback which is called if a heartbeat for the machine identified by the given resource  * ID times out.  *  * @param resourceID Resource ID of the machine whose heartbeat has timed out  */ ;/**  * Callback which is called if a heartbeat for the machine identified by the given resource  * ID times out.  *  * @param resourceID Resource ID of the machine whose heartbeat has timed out  */ void notifyHeartbeatTimeout(ResourceID resourceID).
true;;2;1;/**  * Callback which is called whenever a heartbeat with an associated payload is received. The  * carried payload is given to this method.  *  * @param resourceID Resource ID identifying the sender of the payload  * @param payload Payload of the received heartbeat  */ ;/**  * Callback which is called whenever a heartbeat with an associated payload is received. The  * carried payload is given to this method.  *  * @param resourceID Resource ID identifying the sender of the payload  * @param payload Payload of the received heartbeat  */ void reportPayload(ResourceID resourceID, I payload).
true;;1;1;/**  * Retrieves the payload value for the next heartbeat message. Since the operation can happen  * asynchronously, the result is returned wrapped in a future.  *  * @param resourceID Resource ID identifying the receiver of the payload  * @return Future containing the next payload for heartbeats  */ ;/**  * Retrieves the payload value for the next heartbeat message. Since the operation can happen  * asynchronously, the result is returned wrapped in a future.  *  * @param resourceID Resource ID identifying the receiver of the payload  * @return Future containing the next payload for heartbeats  */ CompletableFuture<O> retrievePayload(ResourceID resourceID).
