commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;// ------------------------------------------------------------------------ @Override public void setup(TaskContext<FlatJoinFunction<IT1, IT2, OT>, OT> context) {     this.taskContext = context.     this.running = true. }
false;public;0;4;;@Override public int getNumberOfInputs() {     return 2. }
false;public;0;6;;@Override public Class<FlatJoinFunction<IT1, IT2, OT>> getStubType() {     @SuppressWarnings("unchecked")     final Class<FlatJoinFunction<IT1, IT2, OT>> clazz = (Class<FlatJoinFunction<IT1, IT2, OT>>) (Class<?>) FlatJoinFunction.class.     return clazz. }
false;public;0;4;;@Override public int getNumberOfDriverComparators() {     return 2. }
false;public;0;73;;@Override public void prepare() throws Exception {     final TaskConfig config = this.taskContext.getTaskConfig().     // obtain task manager's memory manager and I/O manager     final MemoryManager memoryManager = this.taskContext.getMemoryManager().     final IOManager ioManager = this.taskContext.getIOManager().     // set up memory and I/O parameters     final double driverMemFraction = config.getRelativeMemoryDriver().     final DriverStrategy ls = config.getDriverStrategy().     final Counter numRecordsIn = this.taskContext.getMetricGroup().getIOMetricGroup().getNumRecordsInCounter().     final MutableObjectIterator<IT1> in1 = new CountingMutableObjectIterator<>(this.taskContext.<IT1>getInput(0), numRecordsIn).     final MutableObjectIterator<IT2> in2 = new CountingMutableObjectIterator<>(this.taskContext.<IT2>getInput(1), numRecordsIn).     // get serializers and comparators     final TypeSerializer<IT1> serializer1 = this.taskContext.<IT1>getInputSerializer(0).getSerializer().     final TypeSerializer<IT2> serializer2 = this.taskContext.<IT2>getInputSerializer(1).getSerializer().     final TypeComparator<IT1> comparator1 = this.taskContext.getDriverComparator(0).     final TypeComparator<IT2> comparator2 = this.taskContext.getDriverComparator(1).     final TypePairComparatorFactory<IT1, IT2> pairComparatorFactory = config.getPairComparatorFactory(this.taskContext.getUserCodeClassLoader()).     if (pairComparatorFactory == null) {         throw new Exception("Missing pair comparator factory for outer join driver").     }     ExecutionConfig executionConfig = taskContext.getExecutionConfig().     boolean objectReuseEnabled = executionConfig.isObjectReuseEnabled().     if (LOG.isDebugEnabled()) {         LOG.debug("Outer Join Driver object reuse: " + (objectReuseEnabled ? "ENABLED" : "DISABLED") + ".").     }     // create and return outer join iterator according to provided local strategy.     if (objectReuseEnabled) {         this.outerJoinIterator = getReusingOuterJoinIterator(ls, in1, in2, serializer1, comparator1, serializer2, comparator2, pairComparatorFactory, memoryManager, ioManager, driverMemFraction).     } else {         this.outerJoinIterator = getNonReusingOuterJoinIterator(ls, in1, in2, serializer1, comparator1, serializer2, comparator2, pairComparatorFactory, memoryManager, ioManager, driverMemFraction).     }     this.outerJoinIterator.open().     if (LOG.isDebugEnabled()) {         LOG.debug(this.taskContext.formatLogString("outer join task iterator ready.")).     } }
false;public;0;11;;@Override public void run() throws Exception {     final Counter numRecordsOut = this.taskContext.getMetricGroup().getIOMetricGroup().getNumRecordsOutCounter().     final FlatJoinFunction<IT1, IT2, OT> joinStub = this.taskContext.getStub().     final Collector<OT> collector = new CountingCollector<>(this.taskContext.getOutputCollector(), numRecordsOut).     final JoinTaskIterator<IT1, IT2, OT> outerJoinIterator = this.outerJoinIterator.     while (this.running && outerJoinIterator.callWithNextKey(joinStub, collector)) {     } }
false;public;0;7;;@Override public void cleanup() throws Exception {     if (this.outerJoinIterator != null) {         this.outerJoinIterator.close().         this.outerJoinIterator = null.     } }
false;public;0;7;;@Override public void cancel() {     this.running = false.     if (this.outerJoinIterator != null) {         this.outerJoinIterator.abort().     } }
false;protected,abstract;11;13;;protected abstract JoinTaskIterator<IT1, IT2, OT> getReusingOuterJoinIterator(DriverStrategy driverStrategy, MutableObjectIterator<IT1> in1, MutableObjectIterator<IT2> in2, TypeSerializer<IT1> serializer1, TypeComparator<IT1> comparator1, TypeSerializer<IT2> serializer2, TypeComparator<IT2> comparator2, TypePairComparatorFactory<IT1, IT2> pairComparatorFactory, MemoryManager memoryManager, IOManager ioManager, double driverMemFraction) throws Exception.
false;protected,abstract;11;13;;protected abstract JoinTaskIterator<IT1, IT2, OT> getNonReusingOuterJoinIterator(DriverStrategy driverStrategy, MutableObjectIterator<IT1> in1, MutableObjectIterator<IT2> in2, TypeSerializer<IT1> serializer1, TypeComparator<IT1> comparator1, TypeSerializer<IT2> serializer2, TypeComparator<IT2> comparator2, TypePairComparatorFactory<IT1, IT2> pairComparatorFactory, MemoryManager memoryManager, IOManager ioManager, double driverMemFraction) throws Exception.
