commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getName() {     return ROUTER_HANDLER_NAME. }
false;protected;2;19;;@Override protected void channelRead0(ChannelHandlerContext channelHandlerContext, HttpRequest httpRequest) {     if (HttpHeaders.is100ContinueExpected(httpRequest)) {         channelHandlerContext.writeAndFlush(new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.CONTINUE)).         return.     }     // Route     HttpMethod method = httpRequest.getMethod().     QueryStringDecoder qsd = new QueryStringDecoder(httpRequest.uri()).     RouteResult<?> routeResult = router.route(method, qsd.path(), qsd.parameters()).     if (routeResult == null) {         respondNotFound(channelHandlerContext, httpRequest).         return.     }     routed(channelHandlerContext, routeResult, httpRequest). }
false;private;3;20;;private void routed(ChannelHandlerContext channelHandlerContext, RouteResult<?> routeResult, HttpRequest httpRequest) {     ChannelInboundHandler handler = (ChannelInboundHandler) routeResult.target().     // The handler may have been added (keep alive)     ChannelPipeline pipeline = channelHandlerContext.pipeline().     ChannelHandler addedHandler = pipeline.get(ROUTED_HANDLER_NAME).     if (handler != addedHandler) {         if (addedHandler == null) {             pipeline.addAfter(ROUTER_HANDLER_NAME, ROUTED_HANDLER_NAME, handler).         } else {             pipeline.replace(addedHandler, ROUTED_HANDLER_NAME, handler).         }     }     RoutedRequest<?> request = new RoutedRequest<>(routeResult, httpRequest).     channelHandlerContext.fireChannelRead(request.retain()). }
false;private;2;9;;private void respondNotFound(ChannelHandlerContext channelHandlerContext, HttpRequest request) {     LOG.trace("Request could not be routed to any handler. Uri:{} Method:{}", request.getUri(), request.getMethod()).     HandlerUtils.sendErrorResponse(channelHandlerContext, request, new ErrorResponseBody("Not found."), HttpResponseStatus.NOT_FOUND, responseHeaders). }
