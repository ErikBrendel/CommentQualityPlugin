commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;40;;@Override protected CompletableFuture<JobSubmitResponseBody> handleRequest(@Nonnull HandlerRequest<JobSubmitRequestBody, EmptyMessageParameters> request, @Nonnull DispatcherGateway gateway) throws RestHandlerException {     final Collection<File> uploadedFiles = request.getUploadedFiles().     final Map<String, Path> nameToFile = uploadedFiles.stream().collect(Collectors.toMap(File::getName, Path::fromLocalFile)).     if (uploadedFiles.size() != nameToFile.size()) {         throw new RestHandlerException(String.format("The number of uploaded files was %s than the expected count. Expected: %s Actual %s", uploadedFiles.size() < nameToFile.size() ? "lower" : "higher", nameToFile.size(), uploadedFiles.size()), HttpResponseStatus.BAD_REQUEST).     }     final JobSubmitRequestBody requestBody = request.getRequestBody().     if (requestBody.jobGraphFileName == null) {         throw new RestHandlerException(String.format("The %s field must not be omitted or be null.", JobSubmitRequestBody.FIELD_NAME_JOB_GRAPH), HttpResponseStatus.BAD_REQUEST).     }     CompletableFuture<JobGraph> jobGraphFuture = loadJobGraph(requestBody, nameToFile).     Collection<Path> jarFiles = getJarFilesToUpload(requestBody.jarFileNames, nameToFile).     Collection<Tuple2<String, Path>> artifacts = getArtifactFilesToUpload(requestBody.artifactFileNames, nameToFile).     CompletableFuture<JobGraph> finalizedJobGraphFuture = uploadJobGraphFiles(gateway, jobGraphFuture, jarFiles, artifacts, configuration).     CompletableFuture<Acknowledge> jobSubmissionFuture = finalizedJobGraphFuture.thenCompose(jobGraph -> gateway.submitJob(jobGraph, timeout)).     return jobSubmissionFuture.thenCombine(jobGraphFuture, (ack, jobGraph) -> new JobSubmitResponseBody("/jobs/" + jobGraph.getJobID())). }
false;private;2;16;;private CompletableFuture<JobGraph> loadJobGraph(JobSubmitRequestBody requestBody, Map<String, Path> nameToFile) throws MissingFileException {     final Path jobGraphFile = getPathAndAssertUpload(requestBody.jobGraphFileName, FILE_TYPE_JOB_GRAPH, nameToFile).     return CompletableFuture.supplyAsync(() -> {         JobGraph jobGraph.         try (ObjectInputStream objectIn = new ObjectInputStream(jobGraphFile.getFileSystem().open(jobGraphFile))) {             jobGraph = (JobGraph) objectIn.readObject().         } catch (Exception e) {             throw new CompletionException(new RestHandlerException("Failed to deserialize JobGraph.", HttpResponseStatus.BAD_REQUEST, e)).         }         return jobGraph.     }, executor). }
false;private,static;2;8;;private static Collection<Path> getJarFilesToUpload(Collection<String> jarFileNames, Map<String, Path> nameToFileMap) throws MissingFileException {     Collection<Path> jarFiles = new ArrayList<>(jarFileNames.size()).     for (String jarFileName : jarFileNames) {         Path jarFile = getPathAndAssertUpload(jarFileName, FILE_TYPE_JAR, nameToFileMap).         jarFiles.add(new Path(jarFile.toString())).     }     return jarFiles. }
false;private,static;2;10;;private static Collection<Tuple2<String, Path>> getArtifactFilesToUpload(Collection<JobSubmitRequestBody.DistributedCacheFile> artifactEntries, Map<String, Path> nameToFileMap) throws MissingFileException {     Collection<Tuple2<String, Path>> artifacts = new ArrayList<>(artifactEntries.size()).     for (JobSubmitRequestBody.DistributedCacheFile artifactFileName : artifactEntries) {         Path artifactFile = getPathAndAssertUpload(artifactFileName.fileName, FILE_TYPE_ARTIFACT, nameToFileMap).         artifacts.add(Tuple2.of(artifactFileName.entryName, new Path(artifactFile.toString()))).     }     return artifacts. }
false;private;5;21;;private CompletableFuture<JobGraph> uploadJobGraphFiles(DispatcherGateway gateway, CompletableFuture<JobGraph> jobGraphFuture, Collection<Path> jarFiles, Collection<Tuple2<String, Path>> artifacts, Configuration configuration) {     CompletableFuture<Integer> blobServerPortFuture = gateway.getBlobServerPort(timeout).     return jobGraphFuture.thenCombine(blobServerPortFuture, (JobGraph jobGraph, Integer blobServerPort) -> {         final InetSocketAddress address = new InetSocketAddress(gateway.getHostname(), blobServerPort).         try {             ClientUtils.uploadJobGraphFiles(jobGraph, jarFiles, artifacts, () -> new BlobClient(address, configuration)).         } catch (FlinkException e) {             throw new CompletionException(new RestHandlerException("Could not upload job files.", HttpResponseStatus.INTERNAL_SERVER_ERROR, e)).         }         return jobGraph.     }). }
false;private,static;3;7;;private static Path getPathAndAssertUpload(String fileName, String type, Map<String, Path> uploadedFiles) throws MissingFileException {     final Path file = uploadedFiles.get(fileName).     if (file == null) {         throw new MissingFileException(type, fileName).     }     return file. }
