commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Compares two objects for priority. Returns a negative integer, zero, or a positive integer as the first  * argument has lower, equal to, or higher priority than the second.  * @param left left operand in the comparison by priority.  * @param right left operand in the comparison by priority.  * @return a negative integer, zero, or a positive integer as the first argument has lower, equal to, or higher  * priority than the second.  */ ;/**  * Compares two objects for priority. Returns a negative integer, zero, or a positive integer as the first  * argument has lower, equal to, or higher priority than the second.  * @param left left operand in the comparison by priority.  * @param right left operand in the comparison by priority.  * @return a negative integer, zero, or a positive integer as the first argument has lower, equal to, or higher  * priority than the second.  */ int comparePriority(T left, T right).
false;static;0;4;;@SuppressWarnings("unchecked") static <T extends PriorityComparable<?>> PriorityComparator<T> forPriorityComparableObjects() {     return (PriorityComparator<T>) FOR_PRIORITY_COMPARABLE_OBJECTS. }
