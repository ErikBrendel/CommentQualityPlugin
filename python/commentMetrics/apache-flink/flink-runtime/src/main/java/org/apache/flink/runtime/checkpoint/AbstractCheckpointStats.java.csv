commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;0;1;/**  * Returns the status of this checkpoint.  *  * @return Status of this checkpoint  */ ;/**  * Returns the status of this checkpoint.  *  * @return Status of this checkpoint  */ public abstract CheckpointStatsStatus getStatus().
true;public,abstract;0;1;/**  * Returns the number of acknowledged subtasks.  *  * @return The number of acknowledged subtasks.  */ ;/**  * Returns the number of acknowledged subtasks.  *  * @return The number of acknowledged subtasks.  */ public abstract int getNumberOfAcknowledgedSubtasks().
true;public,abstract;0;1;/**  * Returns the total checkpoint state size over all subtasks.  *  * @return Total checkpoint state size over all subtasks.  */ ;/**  * Returns the total checkpoint state size over all subtasks.  *  * @return Total checkpoint state size over all subtasks.  */ public abstract long getStateSize().
true;public,abstract;0;1;/**  * Returns the total buffered bytes during alignment over all subtasks.  *  * <p>Can return <code>-1</code> if the runtime did not report this.  *  * @return Total buffered bytes during alignment over all subtasks.  */ ;/**  * Returns the total buffered bytes during alignment over all subtasks.  *  * <p>Can return <code>-1</code> if the runtime did not report this.  *  * @return Total buffered bytes during alignment over all subtasks.  */ public abstract long getAlignmentBuffered().
true;public,abstract;0;2;/**  * Returns the latest acknowledged subtask stats or <code>null</code> if  * none was acknowledged yet.  *  * @return Latest acknowledged subtask stats or <code>null</code>  */ ;/**  * Returns the latest acknowledged subtask stats or <code>null</code> if  * none was acknowledged yet.  *  * @return Latest acknowledged subtask stats or <code>null</code>  */ @Nullable public abstract SubtaskStateStats getLatestAcknowledgedSubtaskStats().
true;public;0;3;/**  * Returns the ID of this checkpoint.  *  * @return ID of this checkpoint.  */ ;/**  * Returns the ID of this checkpoint.  *  * @return ID of this checkpoint.  */ public long getCheckpointId() {     return checkpointId. }
true;public;0;3;/**  * Returns the timestamp when the checkpoint was triggered.  *  * @return Timestamp when the checkpoint was triggered.  */ ;/**  * Returns the timestamp when the checkpoint was triggered.  *  * @return Timestamp when the checkpoint was triggered.  */ public long getTriggerTimestamp() {     return triggerTimestamp. }
true;public;0;3;/**  * Returns the properties of this checkpoint.  *  * @return Properties of this checkpoint.  */ ;/**  * Returns the properties of this checkpoint.  *  * @return Properties of this checkpoint.  */ public CheckpointProperties getProperties() {     return props. }
true;public;0;3;/**  * Returns the total number of subtasks involved in this checkpoint.  *  * @return Total number of subtasks involved in this checkpoint.  */ ;/**  * Returns the total number of subtasks involved in this checkpoint.  *  * @return Total number of subtasks involved in this checkpoint.  */ public int getNumberOfSubtasks() {     return numberOfSubtasks. }
true;public;1;3;/**  * Returns the task state stats for the given job vertex ID or  * <code>null</code> if no task with such an ID is available.  *  * @param jobVertexId Job vertex ID of the task stats to look up.  * @return The task state stats instance for the given ID or <code>null</code>.  */ ;/**  * Returns the task state stats for the given job vertex ID or  * <code>null</code> if no task with such an ID is available.  *  * @param jobVertexId Job vertex ID of the task stats to look up.  * @return The task state stats instance for the given ID or <code>null</code>.  */ public TaskStateStats getTaskStateStats(JobVertexID jobVertexId) {     return taskStats.get(jobVertexId). }
true;public;0;3;/**  * Returns all task state stats instances.  *  * @return All task state stats instances.  */ ;/**  * Returns all task state stats instances.  *  * @return All task state stats instances.  */ public Collection<TaskStateStats> getAllTaskStateStats() {     return taskStats.values(). }
true;public;0;8;/**  * Returns the ack timestamp of the latest acknowledged subtask or  * <code>-1</code> if none was acknowledged yet.  *  * @return Ack timestamp of the latest acknowledged subtask or <code>-1</code>.  */ ;/**  * Returns the ack timestamp of the latest acknowledged subtask or  * <code>-1</code> if none was acknowledged yet.  *  * @return Ack timestamp of the latest acknowledged subtask or <code>-1</code>.  */ public long getLatestAckTimestamp() {     SubtaskStateStats subtask = getLatestAcknowledgedSubtaskStats().     if (subtask != null) {         return subtask.getAckTimestamp().     } else {         return -1.     } }
true;public;0;8;/**  * Returns the duration of this checkpoint calculated as the time since  * triggering until the latest acknowledged subtask or <code>-1</code> if  * no subtask was acknowledged yet.  *  * @return Duration of this checkpoint or <code>-1</code> if no subtask was acknowledged yet.  */ ;/**  * Returns the duration of this checkpoint calculated as the time since  * triggering until the latest acknowledged subtask or <code>-1</code> if  * no subtask was acknowledged yet.  *  * @return Duration of this checkpoint or <code>-1</code> if no subtask was acknowledged yet.  */ public long getEndToEndDuration() {     SubtaskStateStats subtask = getLatestAcknowledgedSubtaskStats().     if (subtask != null) {         return Math.max(0, subtask.getAckTimestamp() - triggerTimestamp).     } else {         return -1.     } }
