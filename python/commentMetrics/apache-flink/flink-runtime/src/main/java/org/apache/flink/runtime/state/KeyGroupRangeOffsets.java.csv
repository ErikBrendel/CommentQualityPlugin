commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Returns the offset for the given key-group. The key-group must be contained in the range.  *  * @param keyGroup Key-group for which we query the offset. Key-group must be contained in the range.  * @return The offset for the given key-group which must be contained in the range.  */ ;/**  * Returns the offset for the given key-group. The key-group must be contained in the range.  *  * @param keyGroup Key-group for which we query the offset. Key-group must be contained in the range.  * @return The offset for the given key-group which must be contained in the range.  */ public long getKeyGroupOffset(int keyGroup) {     return offsets[computeKeyGroupIndex(keyGroup)]. }
true;public;2;3;/**  * Sets the offset for the given key-group. The key-group must be contained in the range.  *  * @param keyGroup Key-group for which we set the offset. Must be contained in the range.  * @param offset Offset for the key-group.  */ ;/**  * Sets the offset for the given key-group. The key-group must be contained in the range.  *  * @param keyGroup Key-group for which we set the offset. Must be contained in the range.  * @param offset Offset for the key-group.  */ public void setKeyGroupOffset(int keyGroup, long offset) {     offsets[computeKeyGroupIndex(keyGroup)] = offset. }
true;public;1;14;/**  * Returns a key-group range with offsets which is the intersection of the internal key-group range with the given  * key-group range.  *  * @param keyGroupRange Key-group range to intersect with the internal key-group range.  * @return The key-group range with offsets for the intersection of the internal key-group range with the given  *         key-group range.  */ ;/**  * Returns a key-group range with offsets which is the intersection of the internal key-group range with the given  * key-group range.  *  * @param keyGroupRange Key-group range to intersect with the internal key-group range.  * @return The key-group range with offsets for the intersection of the internal key-group range with the given  *         key-group range.  */ public KeyGroupRangeOffsets getIntersection(KeyGroupRange keyGroupRange) {     Preconditions.checkNotNull(keyGroupRange).     KeyGroupRange intersection = this.keyGroupRange.getIntersection(keyGroupRange).     long[] subOffsets = new long[intersection.getNumberOfKeyGroups()].     if (subOffsets.length > 0) {         System.arraycopy(offsets, computeKeyGroupIndex(intersection.getStartKeyGroup()), subOffsets, 0, subOffsets.length).     }     return new KeyGroupRangeOffsets(intersection, subOffsets). }
false;public;0;3;;public KeyGroupRange getKeyGroupRange() {     return keyGroupRange. }
false;public;0;4;;@Override public Iterator<Tuple2<Integer, Long>> iterator() {     return new KeyGroupOffsetsIterator(). }
false;private;1;7;;private int computeKeyGroupIndex(int keyGroup) {     int idx = keyGroup - keyGroupRange.getStartKeyGroup().     if (idx < 0 || idx >= offsets.length) {         throw new IllegalArgumentException("Key group " + keyGroup + " is not in " + keyGroupRange + ".").     }     return idx. }
false;public;0;4;;@Override public boolean hasNext() {     return keyGroupIterator.hasNext(). }
false;public;0;8;;@Override public Tuple2<Integer, Long> next() {     Integer currentKeyGroup = keyGroupIterator.next().     Tuple2<Integer, Long> result = new Tuple2<>(currentKeyGroup, offsets[currentKeyGroup - keyGroupRange.getStartKeyGroup()]).     return result. }
false;public;0;4;;@Override public void remove() {     throw new UnsupportedOperationException("Unsupported by this iterator!"). }
false;public;1;16;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (!(o instanceof KeyGroupRangeOffsets)) {         return false.     }     KeyGroupRangeOffsets that = (KeyGroupRangeOffsets) o.     if (keyGroupRange != null ? !keyGroupRange.equals(that.keyGroupRange) : that.keyGroupRange != null) {         return false.     }     return Arrays.equals(offsets, that.offsets). }
false;public;0;6;;@Override public int hashCode() {     int result = keyGroupRange != null ? keyGroupRange.hashCode() : 0.     result = 31 * result + Arrays.hashCode(offsets).     return result. }
false;public;0;7;;@Override public String toString() {     return "KeyGroupRangeOffsets{" + "keyGroupRange=" + keyGroupRange + ", offsets=" + Arrays.toString(offsets) + '}'. }
