commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public TypeSerializer<K> getKeySerializer() {     return keySerializer. }
false;public;0;4;;@Override public TypeSerializer<N> getNamespaceSerializer() {     return namespaceSerializer. }
false;public;0;4;;@Override public TypeSerializer<V> getValueSerializer() {     return valueSerializer. }
false;public;0;10;;@Override public V value() {     final V result = stateTable.get(currentNamespace).     if (result == null) {         return getDefaultValue().     }     return result. }
false;public;1;10;;@Override public void update(V value) {     if (value == null) {         clear().         return.     }     stateTable.put(currentNamespace, value). }
false;static;3;12;;@SuppressWarnings("unchecked") static <K, N, SV, S extends State, IS extends S> IS create(StateDescriptor<S, SV> stateDesc, StateTable<K, N, SV> stateTable, TypeSerializer<K> keySerializer) {     return (IS) new HeapValueState<>(stateTable, keySerializer, stateTable.getStateSerializer(), stateTable.getNamespaceSerializer(), stateDesc.getDefaultValue()). }
