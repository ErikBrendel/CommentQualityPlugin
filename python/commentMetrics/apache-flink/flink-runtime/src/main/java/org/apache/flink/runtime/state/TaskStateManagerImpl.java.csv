commented;modifiers;parameterAmount;loc;comment;code
false;public;4;18;;@Override public void reportTaskStateSnapshots(@Nonnull CheckpointMetaData checkpointMetaData, @Nonnull CheckpointMetrics checkpointMetrics, @Nullable TaskStateSnapshot acknowledgedState, @Nullable TaskStateSnapshot localState) {     long checkpointId = checkpointMetaData.getCheckpointId().     localStateStore.storeLocalState(checkpointId, localState).     checkpointResponder.acknowledgeCheckpoint(jobId, executionAttemptID, checkpointId, checkpointMetrics, acknowledgedState). }
false;public;1;45;;@Nonnull @Override public PrioritizedOperatorSubtaskState prioritizedOperatorState(OperatorID operatorID) {     if (jobManagerTaskRestore == null) {         return PrioritizedOperatorSubtaskState.emptyNotRestored().     }     TaskStateSnapshot jobManagerStateSnapshot = jobManagerTaskRestore.getTaskStateSnapshot().     OperatorSubtaskState jobManagerSubtaskState = jobManagerStateSnapshot.getSubtaskStateByOperatorID(operatorID).     if (jobManagerSubtaskState == null) {         return PrioritizedOperatorSubtaskState.emptyNotRestored().     }     long restoreCheckpointId = jobManagerTaskRestore.getRestoreCheckpointId().     TaskStateSnapshot localStateSnapshot = localStateStore.retrieveLocalState(restoreCheckpointId).     localStateStore.pruneMatchingCheckpoints((long checkpointId) -> checkpointId != restoreCheckpointId).     List<OperatorSubtaskState> alternativesByPriority = Collections.emptyList().     if (localStateSnapshot != null) {         OperatorSubtaskState localSubtaskState = localStateSnapshot.getSubtaskStateByOperatorID(operatorID).         if (localSubtaskState != null) {             alternativesByPriority = Collections.singletonList(localSubtaskState).         }     }     LOG.debug("Operator {} has remote state {} from job manager and local state alternatives {} from local " + "state store {}.", operatorID, jobManagerSubtaskState, alternativesByPriority, localStateStore).     PrioritizedOperatorSubtaskState.Builder builder = new PrioritizedOperatorSubtaskState.Builder(jobManagerSubtaskState, alternativesByPriority, true).     return builder.build(). }
false;public;0;5;;@Nonnull @Override public LocalRecoveryConfig createLocalRecoveryConfig() {     return localStateStore.getLocalRecoveryConfig(). }
true;public;1;4;/**  * Tracking when local state can be disposed.  */ ;/**  * Tracking when local state can be disposed.  */ @Override public void notifyCheckpointComplete(long checkpointId) throws Exception {     localStateStore.confirmCheckpoint(checkpointId). }
