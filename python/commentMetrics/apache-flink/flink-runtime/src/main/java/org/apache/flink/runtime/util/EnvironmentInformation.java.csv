# id;timestamp;commentText;codeText;commentWords;codeWords
EnvironmentInformation -> public static void checkJavaVersion();1424806229;Checks whether the Java version is lower than Java 7 (Java 1.7) and_prints a warning message in that case.;public static void checkJavaVersion() {_		try {_			String versionString = System.getProperty("java.version").substring(0, 3)__			double versionDouble = Double.parseDouble(versionString)__			if (versionDouble < 1.7) {_				LOG.warn("Flink has been started with Java 6. " +_						"Java 6 is not maintained any more by Oracle or the OpenJDK community. " +_						"Flink may drop support for Java 6 in future releases, due to the " +_						"unavailability of bug fixes security patches.")__			}_		}_		catch (Exception e) {_			LOG.warn("Could not parse java version for startup checks")__			LOG.debug("Exception when parsing java version", e)__		}_	};checks,whether,the,java,version,is,lower,than,java,7,java,1,7,and,prints,a,warning,message,in,that,case;public,static,void,check,java,version,try,string,version,string,system,get,property,java,version,substring,0,3,double,version,double,double,parse,double,version,string,if,version,double,1,7,log,warn,flink,has,been,started,with,java,6,java,6,is,not,maintained,any,more,by,oracle,or,the,open,jdk,community,flink,may,drop,support,for,java,6,in,future,releases,due,to,the,unavailability,of,bug,fixes,security,patches,catch,exception,e,log,warn,could,not,parse,java,version,for,startup,checks,log,debug,exception,when,parsing,java,version,e
EnvironmentInformation -> public static void checkJavaVersion();1424868960;Checks whether the Java version is lower than Java 7 (Java 1.7) and_prints a warning message in that case.;public static void checkJavaVersion() {_		try {_			String versionString = System.getProperty("java.version").substring(0, 3)__			double versionDouble = Double.parseDouble(versionString)__			if (versionDouble < 1.7) {_				LOG.warn("Flink has been started with Java 6. " +_						"Java 6 is not maintained any more by Oracle or the OpenJDK community. " +_						"Flink may drop support for Java 6 in future releases, due to the " +_						"unavailability of bug fixes security patches.")__			}_		}_		catch (Exception e) {_			LOG.warn("Could not parse java version for startup checks")__			LOG.debug("Exception when parsing java version", e)__		}_	};checks,whether,the,java,version,is,lower,than,java,7,java,1,7,and,prints,a,warning,message,in,that,case;public,static,void,check,java,version,try,string,version,string,system,get,property,java,version,substring,0,3,double,version,double,double,parse,double,version,string,if,version,double,1,7,log,warn,flink,has,been,started,with,java,6,java,6,is,not,maintained,any,more,by,oracle,or,the,open,jdk,community,flink,may,drop,support,for,java,6,in,future,releases,due,to,the,unavailability,of,bug,fixes,security,patches,catch,exception,e,log,warn,could,not,parse,java,version,for,startup,checks,log,debug,exception,when,parsing,java,version,e
EnvironmentInformation -> public static void checkJavaVersion();1425317807;Checks whether the Java version is lower than Java 7 (Java 1.7) and_prints a warning message in that case.;public static void checkJavaVersion() {_		try {_			String versionString = System.getProperty("java.version").substring(0, 3)__			double versionDouble = Double.parseDouble(versionString)__			if (versionDouble < 1.7) {_				LOG.warn("Flink has been started with Java 6. " +_						"Java 6 is not maintained any more by Oracle or the OpenJDK community. " +_						"Flink may drop support for Java 6 in future releases, due to the " +_						"unavailability of bug fixes security patches.")__			}_		}_		catch (Exception e) {_			LOG.warn("Could not parse java version for startup checks")__			LOG.debug("Exception when parsing java version", e)__		}_	};checks,whether,the,java,version,is,lower,than,java,7,java,1,7,and,prints,a,warning,message,in,that,case;public,static,void,check,java,version,try,string,version,string,system,get,property,java,version,substring,0,3,double,version,double,double,parse,double,version,string,if,version,double,1,7,log,warn,flink,has,been,started,with,java,6,java,6,is,not,maintained,any,more,by,oracle,or,the,open,jdk,community,flink,may,drop,support,for,java,6,in,future,releases,due,to,the,unavailability,of,bug,fixes,security,patches,catch,exception,e,log,warn,could,not,parse,java,version,for,startup,checks,log,debug,exception,when,parsing,java,version,e
EnvironmentInformation -> public static void checkJavaVersion();1425601895;Checks whether the Java version is lower than Java 7 (Java 1.7) and_prints a warning message in that case.;public static void checkJavaVersion() {_		try {_			String versionString = System.getProperty("java.version").substring(0, 3)__			double versionDouble = Double.parseDouble(versionString)__			if (versionDouble < 1.7) {_				LOG.warn("Flink has been started with Java 6. " +_						"Java 6 is not maintained any more by Oracle or the OpenJDK community. " +_						"Flink may drop support for Java 6 in future releases, due to the " +_						"unavailability of bug fixes security patches.")__			}_		}_		catch (Exception e) {_			LOG.warn("Could not parse java version for startup checks")__			LOG.debug("Exception when parsing java version", e)__		}_	};checks,whether,the,java,version,is,lower,than,java,7,java,1,7,and,prints,a,warning,message,in,that,case;public,static,void,check,java,version,try,string,version,string,system,get,property,java,version,substring,0,3,double,version,double,double,parse,double,version,string,if,version,double,1,7,log,warn,flink,has,been,started,with,java,6,java,6,is,not,maintained,any,more,by,oracle,or,the,open,jdk,community,flink,may,drop,support,for,java,6,in,future,releases,due,to,the,unavailability,of,bug,fixes,security,patches,catch,exception,e,log,warn,could,not,parse,java,version,for,startup,checks,log,debug,exception,when,parsing,java,version,e
EnvironmentInformation -> public static void checkJavaVersion();1436380120;Checks whether the Java version is lower than Java 7 (Java 1.7) and_prints a warning message in that case.;public static void checkJavaVersion() {_		try {_			String versionString = System.getProperty("java.version").substring(0, 3)__			double versionDouble = Double.parseDouble(versionString)__			if (versionDouble < 1.7) {_				LOG.warn("Flink has been started with Java 6. " +_						"Java 6 is not maintained any more by Oracle or the OpenJDK community. " +_						"Flink may drop support for Java 6 in future releases, due to the " +_						"unavailability of bug fixes security patches.")__			}_		}_		catch (Exception e) {_			LOG.warn("Could not parse java version for startup checks")__			LOG.debug("Exception when parsing java version", e)__		}_	};checks,whether,the,java,version,is,lower,than,java,7,java,1,7,and,prints,a,warning,message,in,that,case;public,static,void,check,java,version,try,string,version,string,system,get,property,java,version,substring,0,3,double,version,double,double,parse,double,version,string,if,version,double,1,7,log,warn,flink,has,been,started,with,java,6,java,6,is,not,maintained,any,more,by,oracle,or,the,open,jdk,community,flink,may,drop,support,for,java,6,in,future,releases,due,to,the,unavailability,of,bug,fixes,security,patches,catch,exception,e,log,warn,could,not,parse,java,version,for,startup,checks,log,debug,exception,when,parsing,java,version,e
EnvironmentInformation -> public static void checkJavaVersion();1436802871;Checks whether the Java version is lower than Java 7 (Java 1.7) and_prints a warning message in that case.;public static void checkJavaVersion() {_		try {_			String versionString = System.getProperty("java.version").substring(0, 3)__			double versionDouble = Double.parseDouble(versionString)__			if (versionDouble < 1.7) {_				LOG.warn("Flink has been started with Java 6. " +_						"Java 6 is not maintained any more by Oracle or the OpenJDK community. " +_						"Flink may drop support for Java 6 in future releases, due to the " +_						"unavailability of bug fixes security patches.")__			}_		}_		catch (Exception e) {_			LOG.warn("Could not parse java version for startup checks")__			LOG.debug("Exception when parsing java version", e)__		}_	};checks,whether,the,java,version,is,lower,than,java,7,java,1,7,and,prints,a,warning,message,in,that,case;public,static,void,check,java,version,try,string,version,string,system,get,property,java,version,substring,0,3,double,version,double,double,parse,double,version,string,if,version,double,1,7,log,warn,flink,has,been,started,with,java,6,java,6,is,not,maintained,any,more,by,oracle,or,the,open,jdk,community,flink,may,drop,support,for,java,6,in,future,releases,due,to,the,unavailability,of,bug,fixes,security,patches,catch,exception,e,log,warn,could,not,parse,java,version,for,startup,checks,log,debug,exception,when,parsing,java,version,e
EnvironmentInformation -> public static void checkJavaVersion();1436802871;Checks whether the Java version is lower than Java 7 (Java 1.7) and_prints a warning message in that case.;public static void checkJavaVersion() {_		try {_			String versionString = System.getProperty("java.version").substring(0, 3)__			double versionDouble = Double.parseDouble(versionString)__			if (versionDouble < 1.7) {_				LOG.warn("Flink has been started with Java 6. " +_						"Java 6 is not maintained any more by Oracle or the OpenJDK community. " +_						"Flink may drop support for Java 6 in future releases, due to the " +_						"unavailability of bug fixes security patches.")__			}_		}_		catch (Exception e) {_			LOG.warn("Could not parse java version for startup checks")__			LOG.debug("Exception when parsing java version", e)__		}_	};checks,whether,the,java,version,is,lower,than,java,7,java,1,7,and,prints,a,warning,message,in,that,case;public,static,void,check,java,version,try,string,version,string,system,get,property,java,version,substring,0,3,double,version,double,double,parse,double,version,string,if,version,double,1,7,log,warn,flink,has,been,started,with,java,6,java,6,is,not,maintained,any,more,by,oracle,or,the,open,jdk,community,flink,may,drop,support,for,java,6,in,future,releases,due,to,the,unavailability,of,bug,fixes,security,patches,catch,exception,e,log,warn,could,not,parse,java,version,for,startup,checks,log,debug,exception,when,parsing,java,version,e
EnvironmentInformation -> public static void checkJavaVersion();1440934092;Checks whether the Java version is lower than Java 7 (Java 1.7) and_prints a warning message in that case.;public static void checkJavaVersion() {_		try {_			String versionString = System.getProperty("java.version").substring(0, 3)__			double versionDouble = Double.parseDouble(versionString)__			if (versionDouble < 1.7) {_				LOG.warn("Flink has been started with Java 6. " +_						"Java 6 is not maintained any more by Oracle or the OpenJDK community. " +_						"Flink may drop support for Java 6 in future releases, due to the " +_						"unavailability of bug fixes security patches.")__			}_		}_		catch (Exception e) {_			LOG.warn("Could not parse java version for startup checks")__			LOG.debug("Exception when parsing java version", e)__		}_	};checks,whether,the,java,version,is,lower,than,java,7,java,1,7,and,prints,a,warning,message,in,that,case;public,static,void,check,java,version,try,string,version,string,system,get,property,java,version,substring,0,3,double,version,double,double,parse,double,version,string,if,version,double,1,7,log,warn,flink,has,been,started,with,java,6,java,6,is,not,maintained,any,more,by,oracle,or,the,open,jdk,community,flink,may,drop,support,for,java,6,in,future,releases,due,to,the,unavailability,of,bug,fixes,security,patches,catch,exception,e,log,warn,could,not,parse,java,version,for,startup,checks,log,debug,exception,when,parsing,java,version,e
EnvironmentInformation -> public static void checkJavaVersion();1441738685;Checks whether the Java version is lower than Java 7 (Java 1.7) and_prints a warning message in that case.;public static void checkJavaVersion() {_		try {_			String versionString = System.getProperty("java.version").substring(0, 3)__			double versionDouble = Double.parseDouble(versionString)__			if (versionDouble < 1.7) {_				LOG.warn("Flink has been started with Java 6. " +_						"Java 6 is not maintained any more by Oracle or the OpenJDK community. " +_						"Flink may drop support for Java 6 in future releases, due to the " +_						"unavailability of bug fixes security patches.")__			}_		}_		catch (Exception e) {_			LOG.warn("Could not parse java version for startup checks")__			LOG.debug("Exception when parsing java version", e)__		}_	};checks,whether,the,java,version,is,lower,than,java,7,java,1,7,and,prints,a,warning,message,in,that,case;public,static,void,check,java,version,try,string,version,string,system,get,property,java,version,substring,0,3,double,version,double,double,parse,double,version,string,if,version,double,1,7,log,warn,flink,has,been,started,with,java,6,java,6,is,not,maintained,any,more,by,oracle,or,the,open,jdk,community,flink,may,drop,support,for,java,6,in,future,releases,due,to,the,unavailability,of,bug,fixes,security,patches,catch,exception,e,log,warn,could,not,parse,java,version,for,startup,checks,log,debug,exception,when,parsing,java,version,e
EnvironmentInformation -> public static void checkJavaVersion();1447950693;Checks whether the Java version is lower than Java 7 (Java 1.7) and_prints a warning message in that case.;public static void checkJavaVersion() {_		try {_			String versionString = System.getProperty("java.version").substring(0, 3)__			double versionDouble = Double.parseDouble(versionString)__			if (versionDouble < 1.7) {_				LOG.warn("Flink has been started with Java 6. " +_						"Java 6 is not maintained any more by Oracle or the OpenJDK community. " +_						"Flink may drop support for Java 6 in future releases, due to the " +_						"unavailability of bug fixes security patches.")__			}_		}_		catch (Exception e) {_			LOG.warn("Could not parse java version for startup checks")__			LOG.debug("Exception when parsing java version", e)__		}_	};checks,whether,the,java,version,is,lower,than,java,7,java,1,7,and,prints,a,warning,message,in,that,case;public,static,void,check,java,version,try,string,version,string,system,get,property,java,version,substring,0,3,double,version,double,double,parse,double,version,string,if,version,double,1,7,log,warn,flink,has,been,started,with,java,6,java,6,is,not,maintained,any,more,by,oracle,or,the,open,jdk,community,flink,may,drop,support,for,java,6,in,future,releases,due,to,the,unavailability,of,bug,fixes,security,patches,catch,exception,e,log,warn,could,not,parse,java,version,for,startup,checks,log,debug,exception,when,parsing,java,version,e
EnvironmentInformation -> public static void checkJavaVersion();1449948123;Checks whether the Java version is lower than Java 7 (Java 1.7) and_prints a warning message in that case.;public static void checkJavaVersion() {_		try {_			String versionString = System.getProperty("java.version").substring(0, 3)__			double versionDouble = Double.parseDouble(versionString)__			if (versionDouble < 1.7) {_				LOG.warn("Flink has been started with Java 6. " +_						"Java 6 is not maintained any more by Oracle or the OpenJDK community. " +_						"Flink may drop support for Java 6 in future releases, due to the " +_						"unavailability of bug fixes security patches.")__			}_		}_		catch (Exception e) {_			LOG.warn("Could not parse java version for startup checks")__			LOG.debug("Exception when parsing java version", e)__		}_	};checks,whether,the,java,version,is,lower,than,java,7,java,1,7,and,prints,a,warning,message,in,that,case;public,static,void,check,java,version,try,string,version,string,system,get,property,java,version,substring,0,3,double,version,double,double,parse,double,version,string,if,version,double,1,7,log,warn,flink,has,been,started,with,java,6,java,6,is,not,maintained,any,more,by,oracle,or,the,open,jdk,community,flink,may,drop,support,for,java,6,in,future,releases,due,to,the,unavailability,of,bug,fixes,security,patches,catch,exception,e,log,warn,could,not,parse,java,version,for,startup,checks,log,debug,exception,when,parsing,java,version,e
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName);1424806229;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log.;public static void logEnvironmentInfo(Logger log, String componentName) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String options = getJvmStartupOptions()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Startup Options: " + options)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "not set" : javaHome))__			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log;public,static,void,log,environment,info,logger,log,string,component,name,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,startup,options,options,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName);1424868960;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log.;public static void logEnvironmentInfo(Logger log, String componentName) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)___			if (options.length == 0) {_				log.info(" Startup Options: (none)")__			}_			else {_				log.info(" Startup Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "not set" : javaHome))__			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log;public,static,void,log,environment,info,logger,log,string,component,name,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,if,options,length,0,log,info,startup,options,none,else,log,info,startup,options,for,string,s,options,log,info,s,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,log,info
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1411236167;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		return r.maxMemory() - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,return,r,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1411236168;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		return r.maxMemory() - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,return,r,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1411473593;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		return r.maxMemory() - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,return,r,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1415702894;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		return r.maxMemory() - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,return,r,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1424806229;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		return r.maxMemory() - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,return,r,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1424868960;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		return r.maxMemory() - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,return,r,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1425317807;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		return r.maxMemory() - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,return,r,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1425601895;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		return r.maxMemory() - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,return,r,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1436380120;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		return r.maxMemory() - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,return,r,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1436802871;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		long maxMemory = r.maxMemory()___		if (maxMemory == Long.MAX_VALUE) {_			_			try {_				_				OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()__				Class<?> clazz = Class.forName("com.sun.management.OperatingSystemMXBean")__				Method method = clazz.getMethod("getTotalPhysicalMemorySize")__				maxMemory = (Long) method.invoke(operatingSystemMXBean) / 4__			} catch (Throwable e) {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}__		return maxMemory - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,long,max,memory,r,max,memory,if,max,memory,long,try,operating,system,mxbean,operating,system,mxbean,management,factory,get,operating,system,mxbean,class,clazz,class,for,name,com,sun,management,operating,system,mxbean,method,method,clazz,get,method,get,total,physical,memory,size,max,memory,long,method,invoke,operating,system,mxbean,4,catch,throwable,e,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes,return,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1436802871;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		long maxMemory = r.maxMemory()___		if (maxMemory == Long.MAX_VALUE) {_			_			try {_				_				OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()__				Class<?> clazz = Class.forName("com.sun.management.OperatingSystemMXBean")__				Method method = clazz.getMethod("getTotalPhysicalMemorySize")__				maxMemory = (Long) method.invoke(operatingSystemMXBean) / 4__			} catch (Throwable e) {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}__		return maxMemory - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,long,max,memory,r,max,memory,if,max,memory,long,try,operating,system,mxbean,operating,system,mxbean,management,factory,get,operating,system,mxbean,class,clazz,class,for,name,com,sun,management,operating,system,mxbean,method,method,clazz,get,method,get,total,physical,memory,size,max,memory,long,method,invoke,operating,system,mxbean,4,catch,throwable,e,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes,return,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1440934092;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		long maxMemory = r.maxMemory()___		if (maxMemory == Long.MAX_VALUE) {_			_			try {_				_				OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()__				Class<?> clazz = Class.forName("com.sun.management.OperatingSystemMXBean")__				Method method = clazz.getMethod("getTotalPhysicalMemorySize")__				maxMemory = (Long) method.invoke(operatingSystemMXBean) / 4__			} catch (Throwable e) {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}__		return maxMemory - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,long,max,memory,r,max,memory,if,max,memory,long,try,operating,system,mxbean,operating,system,mxbean,management,factory,get,operating,system,mxbean,class,clazz,class,for,name,com,sun,management,operating,system,mxbean,method,method,clazz,get,method,get,total,physical,memory,size,max,memory,long,method,invoke,operating,system,mxbean,4,catch,throwable,e,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes,return,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1441738685;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		long maxMemory = r.maxMemory()___		if (maxMemory == Long.MAX_VALUE) {_			_			try {_				_				OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()__				Class<?> clazz = Class.forName("com.sun.management.OperatingSystemMXBean")__				Method method = clazz.getMethod("getTotalPhysicalMemorySize")__				maxMemory = (Long) method.invoke(operatingSystemMXBean) / 4__			} catch (Throwable e) {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}__		return maxMemory - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,long,max,memory,r,max,memory,if,max,memory,long,try,operating,system,mxbean,operating,system,mxbean,management,factory,get,operating,system,mxbean,class,clazz,class,for,name,com,sun,management,operating,system,mxbean,method,method,clazz,get,method,get,total,physical,memory,size,max,memory,long,method,invoke,operating,system,mxbean,4,catch,throwable,e,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes,return,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1447950693;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		long maxMemory = r.maxMemory()___		if (maxMemory == Long.MAX_VALUE) {_			_			try {_				_				OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()__				Class<?> clazz = Class.forName("com.sun.management.OperatingSystemMXBean")__				Method method = clazz.getMethod("getTotalPhysicalMemorySize")__				maxMemory = (Long) method.invoke(operatingSystemMXBean) / 4__			} catch (Throwable e) {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}__		return maxMemory - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,long,max,memory,r,max,memory,if,max,memory,long,try,operating,system,mxbean,operating,system,mxbean,management,factory,get,operating,system,mxbean,class,clazz,class,for,name,com,sun,management,operating,system,mxbean,method,method,clazz,get,method,get,total,physical,memory,size,max,memory,long,method,invoke,operating,system,mxbean,4,catch,throwable,e,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes,return,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1449948123;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		long maxMemory = r.maxMemory()___		if (maxMemory == Long.MAX_VALUE) {_			_			try {_				_				OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()__				Class<?> clazz = Class.forName("com.sun.management.OperatingSystemMXBean")__				Method method = clazz.getMethod("getTotalPhysicalMemorySize")__				maxMemory = (Long) method.invoke(operatingSystemMXBean) / 4__			} catch (Throwable e) {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}__		return maxMemory - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,long,max,memory,r,max,memory,if,max,memory,long,try,operating,system,mxbean,operating,system,mxbean,management,factory,get,operating,system,mxbean,class,clazz,class,for,name,com,sun,management,operating,system,mxbean,method,method,clazz,get,method,get,total,physical,memory,size,max,memory,long,method,invoke,operating,system,mxbean,4,catch,throwable,e,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes,return,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1451574482;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		long maxMemory = r.maxMemory()___		if (maxMemory == Long.MAX_VALUE) {_			_			try {_				_				OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()__				Class<?> clazz = Class.forName("com.sun.management.OperatingSystemMXBean")__				Method method = clazz.getMethod("getTotalPhysicalMemorySize")__				maxMemory = (Long) method.invoke(operatingSystemMXBean) / 4__			} catch (Throwable e) {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}__		return maxMemory - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,long,max,memory,r,max,memory,if,max,memory,long,try,operating,system,mxbean,operating,system,mxbean,management,factory,get,operating,system,mxbean,class,clazz,class,for,name,com,sun,management,operating,system,mxbean,method,method,clazz,get,method,get,total,physical,memory,size,max,memory,long,method,invoke,operating,system,mxbean,4,catch,throwable,e,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes,return,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1453987292;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		long maxMemory = r.maxMemory()___		if (maxMemory == Long.MAX_VALUE) {_			_			try {_				_				OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()__				Class<?> clazz = Class.forName("com.sun.management.OperatingSystemMXBean")__				Method method = clazz.getMethod("getTotalPhysicalMemorySize")__				maxMemory = (Long) method.invoke(operatingSystemMXBean) / 4__			} catch (Throwable e) {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}__		return maxMemory - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,long,max,memory,r,max,memory,if,max,memory,long,try,operating,system,mxbean,operating,system,mxbean,management,factory,get,operating,system,mxbean,class,clazz,class,for,name,com,sun,management,operating,system,mxbean,method,method,clazz,get,method,get,total,physical,memory,size,max,memory,long,method,invoke,operating,system,mxbean,4,catch,throwable,e,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes,return,max,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1468411826;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		return getMaxJvmHeapMemory() - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,return,get,max,jvm,heap,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1472660282;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		return getMaxJvmHeapMemory() - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,return,get,max,jvm,heap,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1495720603;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		return getMaxJvmHeapMemory() - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,return,get,max,jvm,heap,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1506499511;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		return getMaxJvmHeapMemory() - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,return,get,max,jvm,heap,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemory();1513572729;Gets an estimate of the size of the free heap memory. The estimate may vary, depending on the current_level of memory fragmentation and the number of dead objects. For a better (but more heavy-weight)_estimate, use {@link #getSizeOfFreeHeapMemoryWithDefrag()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemory() {_		Runtime r = Runtime.getRuntime()__		return getMaxJvmHeapMemory() - r.totalMemory() + r.freeMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,the,estimate,may,vary,depending,on,the,current,level,of,memory,fragmentation,and,the,number,of,dead,objects,for,a,better,but,more,heavy,weight,estimate,use,link,get,size,of,free,heap,memory,with,defrag,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,runtime,r,runtime,get,runtime,return,get,max,jvm,heap,memory,r,total,memory,r,free,memory
EnvironmentInformation -> public static String getJvmVersion();1424806229;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1424868960;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1425317807;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1425601895;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1436380120;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1436802871;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1436802871;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1440934092;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1441738685;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1447950693;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1449948123;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1451574482;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1453987292;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1468411826;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1472660282;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1495720603;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1506499511;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmVersion();1513572729;Gets the version of the JVM in the form "VM_Name - Vendor  - Spec/Version".__@return The JVM version.;public static String getJvmVersion() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			return bean.getVmName() + " - " + bean.getVmVendor() + " - " + bean.getSpecVersion() + '/' + bean.getVmVersion()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,version,of,the,jvm,in,the,form,vendor,spec,version,return,the,jvm,version;public,static,string,get,jvm,version,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,return,bean,get,vm,name,bean,get,vm,vendor,bean,get,spec,version,bean,get,vm,version,catch,throwable,t,return,unknown
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1411236167;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		return Runtime.getRuntime().maxMemory()__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,return,runtime,get,runtime,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1411236168;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		return Runtime.getRuntime().maxMemory()__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,return,runtime,get,runtime,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1411473593;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		return Runtime.getRuntime().maxMemory()__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,return,runtime,get,runtime,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1415702894;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		return Runtime.getRuntime().maxMemory()__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,return,runtime,get,runtime,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1424806229;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		return Runtime.getRuntime().maxMemory()__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,return,runtime,get,runtime,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1424868960;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		return Runtime.getRuntime().maxMemory()__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,return,runtime,get,runtime,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1425317807;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		return Runtime.getRuntime().maxMemory()__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,return,runtime,get,runtime,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1425601895;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		return Runtime.getRuntime().maxMemory()__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,return,runtime,get,runtime,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1436380120;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		return Runtime.getRuntime().maxMemory()__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,return,runtime,get,runtime,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1436802871;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		return Runtime.getRuntime().maxMemory()__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,return,runtime,get,runtime,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1436802871;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		return Runtime.getRuntime().maxMemory()__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,return,runtime,get,runtime,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1440934092;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		return Runtime.getRuntime().maxMemory()__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,return,runtime,get,runtime,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1441738685;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		long maxMemory = Runtime.getRuntime().maxMemory()___		if (maxMemory == Long.MAX_VALUE) {_			_			try {_				_				OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()__				Class<?> clazz = Class.forName("com.sun.management.OperatingSystemMXBean")__				Method method = clazz.getMethod("getTotalPhysicalMemorySize")__				maxMemory = (Long) method.invoke(operatingSystemMXBean) / 4__			}_			catch (Throwable e) {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}_		_		return maxMemory__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,long,max,memory,runtime,get,runtime,max,memory,if,max,memory,long,try,operating,system,mxbean,operating,system,mxbean,management,factory,get,operating,system,mxbean,class,clazz,class,for,name,com,sun,management,operating,system,mxbean,method,method,clazz,get,method,get,total,physical,memory,size,max,memory,long,method,invoke,operating,system,mxbean,4,catch,throwable,e,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes,return,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1447950693;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		long maxMemory = Runtime.getRuntime().maxMemory()___		if (maxMemory == Long.MAX_VALUE) {_			_			try {_				_				OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()__				Class<?> clazz = Class.forName("com.sun.management.OperatingSystemMXBean")__				Method method = clazz.getMethod("getTotalPhysicalMemorySize")__				maxMemory = (Long) method.invoke(operatingSystemMXBean) / 4__			}_			catch (Throwable e) {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}_		_		return maxMemory__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,long,max,memory,runtime,get,runtime,max,memory,if,max,memory,long,try,operating,system,mxbean,operating,system,mxbean,management,factory,get,operating,system,mxbean,class,clazz,class,for,name,com,sun,management,operating,system,mxbean,method,method,clazz,get,method,get,total,physical,memory,size,max,memory,long,method,invoke,operating,system,mxbean,4,catch,throwable,e,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes,return,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1449948123;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		long maxMemory = Runtime.getRuntime().maxMemory()___		if (maxMemory == Long.MAX_VALUE) {_			_			try {_				_				OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()__				Class<?> clazz = Class.forName("com.sun.management.OperatingSystemMXBean")__				Method method = clazz.getMethod("getTotalPhysicalMemorySize")__				maxMemory = (Long) method.invoke(operatingSystemMXBean) / 4__			}_			catch (Throwable e) {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}_		_		return maxMemory__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,long,max,memory,runtime,get,runtime,max,memory,if,max,memory,long,try,operating,system,mxbean,operating,system,mxbean,management,factory,get,operating,system,mxbean,class,clazz,class,for,name,com,sun,management,operating,system,mxbean,method,method,clazz,get,method,get,total,physical,memory,size,max,memory,long,method,invoke,operating,system,mxbean,4,catch,throwable,e,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes,return,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1451574482;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		long maxMemory = Runtime.getRuntime().maxMemory()___		if (maxMemory == Long.MAX_VALUE) {_			_			try {_				_				OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()__				Class<?> clazz = Class.forName("com.sun.management.OperatingSystemMXBean")__				Method method = clazz.getMethod("getTotalPhysicalMemorySize")__				maxMemory = (Long) method.invoke(operatingSystemMXBean) / 4__			}_			catch (Throwable e) {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}_		_		return maxMemory__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,long,max,memory,runtime,get,runtime,max,memory,if,max,memory,long,try,operating,system,mxbean,operating,system,mxbean,management,factory,get,operating,system,mxbean,class,clazz,class,for,name,com,sun,management,operating,system,mxbean,method,method,clazz,get,method,get,total,physical,memory,size,max,memory,long,method,invoke,operating,system,mxbean,4,catch,throwable,e,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes,return,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1453987292;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		long maxMemory = Runtime.getRuntime().maxMemory()___		if (maxMemory == Long.MAX_VALUE) {_			_			try {_				_				OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()__				Class<?> clazz = Class.forName("com.sun.management.OperatingSystemMXBean")__				Method method = clazz.getMethod("getTotalPhysicalMemorySize")__				maxMemory = (Long) method.invoke(operatingSystemMXBean) / 4__			}_			catch (Throwable e) {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}_		_		return maxMemory__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,long,max,memory,runtime,get,runtime,max,memory,if,max,memory,long,try,operating,system,mxbean,operating,system,mxbean,management,factory,get,operating,system,mxbean,class,clazz,class,for,name,com,sun,management,operating,system,mxbean,method,method,clazz,get,method,get,total,physical,memory,size,max,memory,long,method,invoke,operating,system,mxbean,4,catch,throwable,e,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes,return,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1468411826;The maximum JVM heap size, in bytes.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		long maxMemory = Runtime.getRuntime().maxMemory()___		if (maxMemory == Long.MAX_VALUE) {_			_			try {_				_				OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()__				Class<?> clazz = Class.forName("com.sun.management.OperatingSystemMXBean")__				Method method = clazz.getMethod("getTotalPhysicalMemorySize")__				maxMemory = (Long) method.invoke(operatingSystemMXBean) / 4__			}_			catch (Throwable e) {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}_		_		return maxMemory__	};the,maximum,jvm,heap,size,in,bytes,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,long,max,memory,runtime,get,runtime,max,memory,if,max,memory,long,try,operating,system,mxbean,operating,system,mxbean,management,factory,get,operating,system,mxbean,class,clazz,class,for,name,com,sun,management,operating,system,mxbean,method,method,clazz,get,method,get,total,physical,memory,size,max,memory,long,method,invoke,operating,system,mxbean,4,catch,throwable,e,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes,return,max,memory
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1472660282;The maximum JVM heap size, in bytes.__<p>This method uses the <i>-Xmx</i> value of the JVM, if set. If not set, it returns (as_a heuristic) 1/4th of the physical memory size.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		final long maxMemory = Runtime.getRuntime().maxMemory()__		if (maxMemory != Long.MAX_VALUE) {_			_			return maxMemory__		} else {_			_			final long physicalMemory = Hardware.getSizeOfPhysicalMemory()__			if (physicalMemory != -1) {_				_				return physicalMemory / 4__			} else {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}_	};the,maximum,jvm,heap,size,in,bytes,p,this,method,uses,the,i,xmx,i,value,of,the,jvm,if,set,if,not,set,it,returns,as,a,heuristic,1,4th,of,the,physical,memory,size,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,final,long,max,memory,runtime,get,runtime,max,memory,if,max,memory,long,return,max,memory,else,final,long,physical,memory,hardware,get,size,of,physical,memory,if,physical,memory,1,return,physical,memory,4,else,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1495720603;The maximum JVM heap size, in bytes.__<p>This method uses the <i>-Xmx</i> value of the JVM, if set. If not set, it returns (as_a heuristic) 1/4th of the physical memory size.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		final long maxMemory = Runtime.getRuntime().maxMemory()__		if (maxMemory != Long.MAX_VALUE) {_			_			return maxMemory__		} else {_			_			final long physicalMemory = Hardware.getSizeOfPhysicalMemory()__			if (physicalMemory != -1) {_				_				return physicalMemory / 4__			} else {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}_	};the,maximum,jvm,heap,size,in,bytes,p,this,method,uses,the,i,xmx,i,value,of,the,jvm,if,set,if,not,set,it,returns,as,a,heuristic,1,4th,of,the,physical,memory,size,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,final,long,max,memory,runtime,get,runtime,max,memory,if,max,memory,long,return,max,memory,else,final,long,physical,memory,hardware,get,size,of,physical,memory,if,physical,memory,1,return,physical,memory,4,else,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1506499511;The maximum JVM heap size, in bytes.__<p>This method uses the <i>-Xmx</i> value of the JVM, if set. If not set, it returns (as_a heuristic) 1/4th of the physical memory size.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		final long maxMemory = Runtime.getRuntime().maxMemory()__		if (maxMemory != Long.MAX_VALUE) {_			_			return maxMemory__		} else {_			_			final long physicalMemory = Hardware.getSizeOfPhysicalMemory()__			if (physicalMemory != -1) {_				_				return physicalMemory / 4__			} else {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}_	};the,maximum,jvm,heap,size,in,bytes,p,this,method,uses,the,i,xmx,i,value,of,the,jvm,if,set,if,not,set,it,returns,as,a,heuristic,1,4th,of,the,physical,memory,size,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,final,long,max,memory,runtime,get,runtime,max,memory,if,max,memory,long,return,max,memory,else,final,long,physical,memory,hardware,get,size,of,physical,memory,if,physical,memory,1,return,physical,memory,4,else,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes
EnvironmentInformation -> public static long getMaxJvmHeapMemory();1513572729;The maximum JVM heap size, in bytes.__<p>This method uses the <i>-Xmx</i> value of the JVM, if set. If not set, it returns (as_a heuristic) 1/4th of the physical memory size.__@return The maximum JVM heap size, in bytes.;public static long getMaxJvmHeapMemory() {_		final long maxMemory = Runtime.getRuntime().maxMemory()__		if (maxMemory != Long.MAX_VALUE) {_			_			return maxMemory__		} else {_			_			final long physicalMemory = Hardware.getSizeOfPhysicalMemory()__			if (physicalMemory != -1) {_				_				return physicalMemory / 4__			} else {_				throw new RuntimeException("Could not determine the amount of free memory.\n" +_						"Please set the maximum memory for the JVM, e.g. -Xmx512M for 512 megabytes.")__			}_		}_	};the,maximum,jvm,heap,size,in,bytes,p,this,method,uses,the,i,xmx,i,value,of,the,jvm,if,set,if,not,set,it,returns,as,a,heuristic,1,4th,of,the,physical,memory,size,return,the,maximum,jvm,heap,size,in,bytes;public,static,long,get,max,jvm,heap,memory,final,long,max,memory,runtime,get,runtime,max,memory,if,max,memory,long,return,max,memory,else,final,long,physical,memory,hardware,get,size,of,physical,memory,if,physical,memory,1,return,physical,memory,4,else,throw,new,runtime,exception,could,not,determine,the,amount,of,free,memory,n,please,set,the,maximum,memory,for,the,jvm,e,g,xmx512m,for,512,megabytes
EnvironmentInformation -> private EnvironmentInformation();1424806229;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1424868960;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1425317807;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1425601895;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1436380120;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1436802871;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1436802871;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1440934092;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1441738685;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1447950693;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1449948123;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1451574482;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1453987292;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1468411826;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1472660282;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1495720603;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1506499511;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> private EnvironmentInformation();1513572729;Don't instantiate this class;private EnvironmentInformation() {};don,t,instantiate,this,class;private,environment,information
EnvironmentInformation -> public static String getHadoopUser();1506499511;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getHadoopUser() {_		try {_			Class<?> ugiClass = Class.forName(_				"org.apache.hadoop.security.UserGroupInformation",_				false,_				EnvironmentInformation.class.getClassLoader())___			Method currentUserMethod = ugiClass.getMethod("getCurrentUser")__			Method shortUserNameMethod = ugiClass.getMethod("getShortUserName")__			Object ugi = currentUserMethod.invoke(null)__			return (String) shortUserNameMethod.invoke(ugi)__		}_		catch (ClassNotFoundException e) {_			return "<no hadoop dependency found>"__		}_		catch (LinkageError e) {_			_			LOG.debug("Cannot determine user/group information using Hadoop utils. " +_					"Hadoop classes not loaded or compatible", e)__		}_		catch (Throwable t) {_			_			LOG.warn("Error while accessing user/group information via Hadoop utils.", t)__		}_		_		return UNKNOWN__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,hadoop,user,try,class,ugi,class,class,for,name,org,apache,hadoop,security,user,group,information,false,environment,information,class,get,class,loader,method,current,user,method,ugi,class,get,method,get,current,user,method,short,user,name,method,ugi,class,get,method,get,short,user,name,object,ugi,current,user,method,invoke,null,return,string,short,user,name,method,invoke,ugi,catch,class,not,found,exception,e,return,no,hadoop,dependency,found,catch,linkage,error,e,log,debug,cannot,determine,user,group,information,using,hadoop,utils,hadoop,classes,not,loaded,or,compatible,e,catch,throwable,t,log,warn,error,while,accessing,user,group,information,via,hadoop,utils,t,return,unknown
EnvironmentInformation -> public static String getHadoopUser();1513572729;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getHadoopUser() {_		try {_			Class<?> ugiClass = Class.forName(_				"org.apache.hadoop.security.UserGroupInformation",_				false,_				EnvironmentInformation.class.getClassLoader())___			Method currentUserMethod = ugiClass.getMethod("getCurrentUser")__			Method shortUserNameMethod = ugiClass.getMethod("getShortUserName")__			Object ugi = currentUserMethod.invoke(null)__			return (String) shortUserNameMethod.invoke(ugi)__		}_		catch (ClassNotFoundException e) {_			return "<no hadoop dependency found>"__		}_		catch (LinkageError e) {_			_			LOG.debug("Cannot determine user/group information using Hadoop utils. " +_					"Hadoop classes not loaded or compatible", e)__		}_		catch (Throwable t) {_			_			LOG.warn("Error while accessing user/group information via Hadoop utils.", t)__		}_		_		return UNKNOWN__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,hadoop,user,try,class,ugi,class,class,for,name,org,apache,hadoop,security,user,group,information,false,environment,information,class,get,class,loader,method,current,user,method,ugi,class,get,method,get,current,user,method,short,user,name,method,ugi,class,get,method,get,short,user,name,object,ugi,current,user,method,invoke,null,return,string,short,user,name,method,invoke,ugi,catch,class,not,found,exception,e,return,no,hadoop,dependency,found,catch,linkage,error,e,log,debug,cannot,determine,user,group,information,using,hadoop,utils,hadoop,classes,not,loaded,or,compatible,e,catch,throwable,t,log,warn,error,while,accessing,user,group,information,via,hadoop,utils,t,return,unknown
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1425317807;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))___			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1425601895;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))___			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1436380120;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))___			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1436802871;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))___			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1436802871;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))___			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1440934092;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))__			log.info(" Hadoop version: " + VersionInfo.getVersion())___			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,log,info,hadoop,version,version,info,get,version,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1441738685;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))__			log.info(" Hadoop version: " + VersionInfo.getVersion())___			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,log,info,hadoop,version,version,info,get,version,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1447950693;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))__			log.info(" Hadoop version: " + VersionInfo.getVersion())___			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info(" Classpath: " + System.getProperty("java.class.path"))___			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,log,info,hadoop,version,version,info,get,version,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info,classpath,system,get,property,java,class,path,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1449948123;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))__			log.info(" Hadoop version: " + VersionInfo.getVersion())___			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info(" Classpath: " + System.getProperty("java.class.path"))___			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,log,info,hadoop,version,version,info,get,version,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info,classpath,system,get,property,java,class,path,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1451574482;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))__			log.info(" Hadoop version: " + VersionInfo.getVersion())___			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info(" Classpath: " + System.getProperty("java.class.path"))___			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,log,info,hadoop,version,version,info,get,version,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info,classpath,system,get,property,java,class,path,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1453987292;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))__			log.info(" Hadoop version: " + VersionInfo.getVersion())___			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info(" Classpath: " + System.getProperty("java.class.path"))___			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,log,info,hadoop,version,version,info,get,version,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info,classpath,system,get,property,java,class,path,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1468411826;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))__			log.info(" Hadoop version: " + VersionInfo.getVersion())___			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info(" Classpath: " + System.getProperty("java.class.path"))___			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,log,info,hadoop,version,version,info,get,version,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info,classpath,system,get,property,java,class,path,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1472660282;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))__			log.info(" Hadoop version: " + VersionInfo.getVersion())___			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info(" Classpath: " + System.getProperty("java.class.path"))___			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,log,info,hadoop,version,version,info,get,version,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info,classpath,system,get,property,java,class,path,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1495720603;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String user = getUserRunning()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" Current user: " + user)__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))__			log.info(" Hadoop version: " + VersionInfo.getVersion())___			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info(" Classpath: " + System.getProperty("java.class.path"))___			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,user,get,user,running,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,current,user,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,log,info,hadoop,version,version,info,get,version,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info,classpath,system,get,property,java,class,path,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1506499511;Logs a information about the environment, like code revision, current user, java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" OS current user: " + System.getProperty("user.name"))__			log.info(" Current Hadoop/Kerberos user: " + getHadoopUser())__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))___			String hadoopVersionString = getHadoopVersionString()__			if (hadoopVersionString != null) {_				log.info(" Hadoop version: " + hadoopVersionString)__			} else {_				log.info(" No Hadoop Dependency available")__			}__			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info(" Classpath: " + System.getProperty("java.class.path"))___			log.info("--------------------------------------------------------------------------------")__		}_	};logs,a,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,os,current,user,system,get,property,user,name,log,info,current,hadoop,kerberos,user,get,hadoop,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,string,hadoop,version,string,get,hadoop,version,string,if,hadoop,version,string,null,log,info,hadoop,version,hadoop,version,string,else,log,info,no,hadoop,dependency,available,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info,classpath,system,get,property,java,class,path,log,info
EnvironmentInformation -> public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs);1513572729;Logs information about the environment, like code revision, current user, Java version,_and JVM parameters.__@param log The logger to log the information to._@param componentName The component name to mention in the log._@param commandLineArgs The arguments accompanying the starting the component.;public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {_		if (log.isInfoEnabled()) {_			RevisionInformation rev = getRevisionInformation()__			String version = getVersion()__			_			String jvmVersion = getJvmVersion()__			String[] options = getJvmStartupOptionsArray()__			_			String javaHome = System.getenv("JAVA_HOME")__			_			long maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20__			_			log.info("--------------------------------------------------------------------------------")__			log.info(" Starting " + componentName + " (Version: " + version + ", "_					+ "Rev:" + rev.commitId + ", " + "Date:" + rev.commitDate + ")")__			log.info(" OS current user: " + System.getProperty("user.name"))__			log.info(" Current Hadoop/Kerberos user: " + getHadoopUser())__			log.info(" JVM: " + jvmVersion)__			log.info(" Maximum heap size: " + maxHeapMegabytes + " MiBytes")__			log.info(" JAVA_HOME: " + (javaHome == null ? "(not set)" : javaHome))___			String hadoopVersionString = getHadoopVersionString()__			if (hadoopVersionString != null) {_				log.info(" Hadoop version: " + hadoopVersionString)__			} else {_				log.info(" No Hadoop Dependency available")__			}__			if (options.length == 0) {_				log.info(" JVM Options: (none)")__			}_			else {_				log.info(" JVM Options:")__				for (String s: options) {_					log.info("    " + s)__				}_			}__			if (commandLineArgs == null || commandLineArgs.length == 0) {_				log.info(" Program Arguments: (none)")__			}_			else {_				log.info(" Program Arguments:")__				for (String s: commandLineArgs) {_					log.info("    " + s)__				}_			}__			log.info(" Classpath: " + System.getProperty("java.class.path"))___			log.info("--------------------------------------------------------------------------------")__		}_	};logs,information,about,the,environment,like,code,revision,current,user,java,version,and,jvm,parameters,param,log,the,logger,to,log,the,information,to,param,component,name,the,component,name,to,mention,in,the,log,param,command,line,args,the,arguments,accompanying,the,starting,the,component;public,static,void,log,environment,info,logger,log,string,component,name,string,command,line,args,if,log,is,info,enabled,revision,information,rev,get,revision,information,string,version,get,version,string,jvm,version,get,jvm,version,string,options,get,jvm,startup,options,array,string,java,home,system,getenv,long,max,heap,megabytes,get,max,jvm,heap,memory,20,log,info,log,info,starting,component,name,version,version,rev,rev,commit,id,date,rev,commit,date,log,info,os,current,user,system,get,property,user,name,log,info,current,hadoop,kerberos,user,get,hadoop,user,log,info,jvm,jvm,version,log,info,maximum,heap,size,max,heap,megabytes,mi,bytes,log,info,java,home,null,not,set,java,home,string,hadoop,version,string,get,hadoop,version,string,if,hadoop,version,string,null,log,info,hadoop,version,hadoop,version,string,else,log,info,no,hadoop,dependency,available,if,options,length,0,log,info,jvm,options,none,else,log,info,jvm,options,for,string,s,options,log,info,s,if,command,line,args,null,command,line,args,length,0,log,info,program,arguments,none,else,log,info,program,arguments,for,string,s,command,line,args,log,info,s,log,info,classpath,system,get,property,java,class,path,log,info
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1411236167;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1411236168;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1411473593;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1415702894;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1424806229;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1424868960;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1425317807;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1425601895;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1436380120;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1436802871;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1436802871;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1440934092;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1441738685;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1447950693;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1449948123;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1451574482;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1453987292;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1468411826;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1472660282;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1495720603;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1506499511;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static long getSizeOfFreeHeapMemoryWithDefrag();1513572729;Gets an estimate of the size of the free heap memory.__NOTE: This method is heavy-weight. It triggers a garbage collection to reduce fragmentation and get_a better estimate at the size of free memory. It is typically more accurate than the plain version_{@link #getSizeOfFreeHeapMemory()}.__@return An estimate of the size of the free heap memory, in bytes.;public static long getSizeOfFreeHeapMemoryWithDefrag() {_		_		System.gc()__		_		return getSizeOfFreeHeapMemory()__	};gets,an,estimate,of,the,size,of,the,free,heap,memory,note,this,method,is,heavy,weight,it,triggers,a,garbage,collection,to,reduce,fragmentation,and,get,a,better,estimate,at,the,size,of,free,memory,it,is,typically,more,accurate,than,the,plain,version,link,get,size,of,free,heap,memory,return,an,estimate,of,the,size,of,the,free,heap,memory,in,bytes;public,static,long,get,size,of,free,heap,memory,with,defrag,system,gc,return,get,size,of,free,heap,memory
EnvironmentInformation -> public static String getTemporaryFileDirectory();1424806229;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1424868960;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1425317807;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1425601895;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1436380120;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1436802871;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1436802871;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1440934092;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1441738685;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1447950693;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1449948123;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1451574482;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1453987292;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1468411826;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1472660282;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1495720603;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1506499511;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getTemporaryFileDirectory();1513572729;Gets the directory for temporary files, as returned by the JVM system property "java.io.tmpdir".__@return The directory for temporary files.;public static String getTemporaryFileDirectory() {_		return System.getProperty("java.io.tmpdir")__	};gets,the,directory,for,temporary,files,as,returned,by,the,jvm,system,property,java,io,tmpdir,return,the,directory,for,temporary,files;public,static,string,get,temporary,file,directory,return,system,get,property,java,io,tmpdir
EnvironmentInformation -> public static String getUserRunning();1411236167;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (Throwable t) {_			if (LOG.isDebugEnabled() && !(t instanceof ClassNotFoundException)) {_				LOG.debug("Cannot determine user/group information using Hadoop utils.", t)__			}_		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,throwable,t,if,log,is,debug,enabled,t,instanceof,class,not,found,exception,log,debug,cannot,determine,user,group,information,using,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1411236168;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (Throwable t) {_			if (LOG.isDebugEnabled() && !(t instanceof ClassNotFoundException)) {_				LOG.debug("Cannot determine user/group information using Hadoop utils.", t)__			}_		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,throwable,t,if,log,is,debug,enabled,t,instanceof,class,not,found,exception,log,debug,cannot,determine,user,group,information,using,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1411473593;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (Throwable t) {_			if (LOG.isDebugEnabled() && !(t instanceof ClassNotFoundException)) {_				LOG.debug("Cannot determine user/group information using Hadoop utils.", t)__			}_		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,throwable,t,if,log,is,debug,enabled,t,instanceof,class,not,found,exception,log,debug,cannot,determine,user,group,information,using,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1415702894;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (Throwable t) {_			if (LOG.isDebugEnabled() && !(t instanceof ClassNotFoundException)) {_				LOG.debug("Cannot determine user/group information using Hadoop utils.", t)__			}_		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,throwable,t,if,log,is,debug,enabled,t,instanceof,class,not,found,exception,log,debug,cannot,determine,user,group,information,using,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1424806229;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (Throwable t) {_			if (LOG.isDebugEnabled() && !(t instanceof ClassNotFoundException)) {_				LOG.debug("Cannot determine user/group information using Hadoop utils.", t)__			}_		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,throwable,t,if,log,is,debug,enabled,t,instanceof,class,not,found,exception,log,debug,cannot,determine,user,group,information,using,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1424868960;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (Throwable t) {_			if (LOG.isDebugEnabled() && !(t instanceof ClassNotFoundException)) {_				LOG.debug("Cannot determine user/group information using Hadoop utils.", t)__			}_		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,throwable,t,if,log,is,debug,enabled,t,instanceof,class,not,found,exception,log,debug,cannot,determine,user,group,information,using,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1425317807;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (Throwable t) {_			if (LOG.isDebugEnabled() && !(t instanceof ClassNotFoundException)) {_				LOG.debug("Cannot determine user/group information using Hadoop utils.", t)__			}_		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,throwable,t,if,log,is,debug,enabled,t,instanceof,class,not,found,exception,log,debug,cannot,determine,user,group,information,using,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1425601895;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (Throwable t) {_			if (LOG.isDebugEnabled() && !(t instanceof ClassNotFoundException)) {_				LOG.debug("Cannot determine user/group information using Hadoop utils.", t)__			}_		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,throwable,t,if,log,is,debug,enabled,t,instanceof,class,not,found,exception,log,debug,cannot,determine,user,group,information,using,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1436380120;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (Throwable t) {_			if (LOG.isDebugEnabled() && !(t instanceof ClassNotFoundException)) {_				LOG.debug("Cannot determine user/group information using Hadoop utils.", t)__			}_		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,throwable,t,if,log,is,debug,enabled,t,instanceof,class,not,found,exception,log,debug,cannot,determine,user,group,information,using,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1436802871;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (Throwable t) {_			if (LOG.isDebugEnabled() && !(t instanceof ClassNotFoundException)) {_				LOG.debug("Cannot determine user/group information using Hadoop utils.", t)__			}_		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,throwable,t,if,log,is,debug,enabled,t,instanceof,class,not,found,exception,log,debug,cannot,determine,user,group,information,using,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1436802871;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (LinkageError e) {_			_			LOG.debug("Cannot determine user/group information using Hadoop utils. " +_					"Hadoop classes not loaded or compatible", e)__		}_		catch (Throwable t) {_			_			LOG.warn("Error while accessing user/group information via Hadoop utils.", t)__		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,linkage,error,e,log,debug,cannot,determine,user,group,information,using,hadoop,utils,hadoop,classes,not,loaded,or,compatible,e,catch,throwable,t,log,warn,error,while,accessing,user,group,information,via,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1440934092;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (LinkageError e) {_			_			LOG.debug("Cannot determine user/group information using Hadoop utils. " +_					"Hadoop classes not loaded or compatible", e)__		}_		catch (Throwable t) {_			_			LOG.warn("Error while accessing user/group information via Hadoop utils.", t)__		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,linkage,error,e,log,debug,cannot,determine,user,group,information,using,hadoop,utils,hadoop,classes,not,loaded,or,compatible,e,catch,throwable,t,log,warn,error,while,accessing,user,group,information,via,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1441738685;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (LinkageError e) {_			_			LOG.debug("Cannot determine user/group information using Hadoop utils. " +_					"Hadoop classes not loaded or compatible", e)__		}_		catch (Throwable t) {_			_			LOG.warn("Error while accessing user/group information via Hadoop utils.", t)__		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,linkage,error,e,log,debug,cannot,determine,user,group,information,using,hadoop,utils,hadoop,classes,not,loaded,or,compatible,e,catch,throwable,t,log,warn,error,while,accessing,user,group,information,via,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1447950693;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (LinkageError e) {_			_			LOG.debug("Cannot determine user/group information using Hadoop utils. " +_					"Hadoop classes not loaded or compatible", e)__		}_		catch (Throwable t) {_			_			LOG.warn("Error while accessing user/group information via Hadoop utils.", t)__		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,linkage,error,e,log,debug,cannot,determine,user,group,information,using,hadoop,utils,hadoop,classes,not,loaded,or,compatible,e,catch,throwable,t,log,warn,error,while,accessing,user,group,information,via,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1449948123;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (LinkageError e) {_			_			LOG.debug("Cannot determine user/group information using Hadoop utils. " +_					"Hadoop classes not loaded or compatible", e)__		}_		catch (Throwable t) {_			_			LOG.warn("Error while accessing user/group information via Hadoop utils.", t)__		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,linkage,error,e,log,debug,cannot,determine,user,group,information,using,hadoop,utils,hadoop,classes,not,loaded,or,compatible,e,catch,throwable,t,log,warn,error,while,accessing,user,group,information,via,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1451574482;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (LinkageError e) {_			_			LOG.debug("Cannot determine user/group information using Hadoop utils. " +_					"Hadoop classes not loaded or compatible", e)__		}_		catch (Throwable t) {_			_			LOG.warn("Error while accessing user/group information via Hadoop utils.", t)__		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,linkage,error,e,log,debug,cannot,determine,user,group,information,using,hadoop,utils,hadoop,classes,not,loaded,or,compatible,e,catch,throwable,t,log,warn,error,while,accessing,user,group,information,via,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1453987292;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (LinkageError e) {_			_			LOG.debug("Cannot determine user/group information using Hadoop utils. " +_					"Hadoop classes not loaded or compatible", e)__		}_		catch (Throwable t) {_			_			LOG.warn("Error while accessing user/group information via Hadoop utils.", t)__		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,linkage,error,e,log,debug,cannot,determine,user,group,information,using,hadoop,utils,hadoop,classes,not,loaded,or,compatible,e,catch,throwable,t,log,warn,error,while,accessing,user,group,information,via,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1468411826;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (LinkageError e) {_			_			LOG.debug("Cannot determine user/group information using Hadoop utils. " +_					"Hadoop classes not loaded or compatible", e)__		}_		catch (Throwable t) {_			_			LOG.warn("Error while accessing user/group information via Hadoop utils.", t)__		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine user/group information for the current user.")__			}_		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,linkage,error,e,log,debug,cannot,determine,user,group,information,using,hadoop,utils,hadoop,classes,not,loaded,or,compatible,e,catch,throwable,t,log,warn,error,while,accessing,user,group,information,via,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,if,log,is,debug,enabled,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1472660282;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (LinkageError e) {_			_			LOG.debug("Cannot determine user/group information using Hadoop utils. " +_					"Hadoop classes not loaded or compatible", e)__		}_		catch (Throwable t) {_			_			LOG.warn("Error while accessing user/group information via Hadoop utils.", t)__		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			LOG.debug("Cannot determine user/group information for the current user.")__		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,linkage,error,e,log,debug,cannot,determine,user,group,information,using,hadoop,utils,hadoop,classes,not,loaded,or,compatible,e,catch,throwable,t,log,warn,error,while,accessing,user,group,information,via,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String getUserRunning();1495720603;Gets the name of the user that is running the JVM.__@return The name of the user that is running the JVM.;public static String getUserRunning() {_		try {_			return UserGroupInformation.getCurrentUser().getShortUserName()__		}_		catch (LinkageError e) {_			_			LOG.debug("Cannot determine user/group information using Hadoop utils. " +_					"Hadoop classes not loaded or compatible", e)__		}_		catch (Throwable t) {_			_			LOG.warn("Error while accessing user/group information via Hadoop utils.", t)__		}_		_		String user = System.getProperty("user.name")__		if (user == null) {_			user = UNKNOWN__			LOG.debug("Cannot determine user/group information for the current user.")__		}_		return user__	};gets,the,name,of,the,user,that,is,running,the,jvm,return,the,name,of,the,user,that,is,running,the,jvm;public,static,string,get,user,running,try,return,user,group,information,get,current,user,get,short,user,name,catch,linkage,error,e,log,debug,cannot,determine,user,group,information,using,hadoop,utils,hadoop,classes,not,loaded,or,compatible,e,catch,throwable,t,log,warn,error,while,accessing,user,group,information,via,hadoop,utils,t,string,user,system,get,property,user,name,if,user,null,user,unknown,log,debug,cannot,determine,user,group,information,for,the,current,user,return,user
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1424868960;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1425317807;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1425601895;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1436380120;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1436802871;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1436802871;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1440934092;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1441738685;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1447950693;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1449948123;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1451574482;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1453987292;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1468411826;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1472660282;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1495720603;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1506499511;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String[] getJvmStartupOptionsArray();1513572729;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String[] getJvmStartupOptionsArray() {_		try {_			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			List<String> options = bean.getInputArguments()__			return options.toArray(new String[options.size()])__		}_		catch (Throwable t) {_			return new String[0]__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,array,try,runtime,mxbean,bean,management,factory,get,runtime,mxbean,list,string,options,bean,get,input,arguments,return,options,to,array,new,string,options,size,catch,throwable,t,return,new,string,0
EnvironmentInformation -> public static String getVersion();1405024514;Returns the version of the code as String. If version == null, then the JobManager does not run from a_maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		return EnvironmentInformation.class.getPackage().getImplementationVersion()__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,return,environment,information,class,get,package,get,implementation,version
EnvironmentInformation -> public static String getVersion();1405090423;Returns the version of the code as String. If version == null, then the JobManager does not run from a_maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		return EnvironmentInformation.class.getPackage().getImplementationVersion()__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,return,environment,information,class,get,package,get,implementation,version
EnvironmentInformation -> public static String getVersion();1407957596;Returns the version of the code as String. If version == null, then the JobManager does not run from a_maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		return EnvironmentInformation.class.getPackage().getImplementationVersion()__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,return,environment,information,class,get,package,get,implementation,version
EnvironmentInformation -> public static String getVersion();1409911022;Returns the version of the code as String. If version == null, then the JobManager does not run from a_maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		return EnvironmentInformation.class.getPackage().getImplementationVersion()__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,return,environment,information,class,get,package,get,implementation,version
EnvironmentInformation -> public static String getVersion();1411236167;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1411236168;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1411473593;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1415702894;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1424806229;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1424868960;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1425317807;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1425601895;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1436380120;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1436802871;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1436802871;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1440934092;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1441738685;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1447950693;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1449948123;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1451574482;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1453987292;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1468411826;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1472660282;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1495720603;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1506499511;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static String getVersion();1513572729;Returns the version of the code as String. If version == null, then the JobManager does not run from a_Maven build. An example is a source code checkout, compile, and run from inside an IDE.__@return The version string.;public static String getVersion() {_		String version = EnvironmentInformation.class.getPackage().getImplementationVersion()__		return version != null ? version : UNKNOWN__	};returns,the,version,of,the,code,as,string,if,version,null,then,the,job,manager,does,not,run,from,a,maven,build,an,example,is,a,source,code,checkout,compile,and,run,from,inside,an,ide,return,the,version,string;public,static,string,get,version,string,version,environment,information,class,get,package,get,implementation,version,return,version,null,version,unknown
EnvironmentInformation -> public static long getOpenFileHandlesLimit();1436380120;Tries to retrieve the maximum number of open file handles. This method will only work on_UNIX-based operating systems with Sun/Oracle Java versions.__<p>If the number of max open file handles cannot be determined, this method returns {@code -1}.</p>__@return The limit of open file handles, or {@code -1}, if the limit could not be determined.;public static long getOpenFileHandlesLimit() {_		Class<?> sunBeanClass__		try {_			sunBeanClass = Class.forName("com.sun.management.UnixOperatingSystemMXBean")__		}_		catch (ClassNotFoundException e) {_			return -1L__		}_		_		try {_			Method fhLimitMethod = sunBeanClass.getMethod("getMaxFileDescriptorCount")__			Object result = fhLimitMethod.invoke(ManagementFactory.getOperatingSystemMXBean())__			return (Long) result__		}_		catch (Throwable t) {_			LOG.warn("Unexpected error when accessing file handle limit", t)__			return -1L__		}_	};tries,to,retrieve,the,maximum,number,of,open,file,handles,this,method,will,only,work,on,unix,based,operating,systems,with,sun,oracle,java,versions,p,if,the,number,of,max,open,file,handles,cannot,be,determined,this,method,returns,code,1,p,return,the,limit,of,open,file,handles,or,code,1,if,the,limit,could,not,be,determined;public,static,long,get,open,file,handles,limit,class,sun,bean,class,try,sun,bean,class,class,for,name,com,sun,management,unix,operating,system,mxbean,catch,class,not,found,exception,e,return,1l,try,method,fh,limit,method,sun,bean,class,get,method,get,max,file,descriptor,count,object,result,fh,limit,method,invoke,management,factory,get,operating,system,mxbean,return,long,result,catch,throwable,t,log,warn,unexpected,error,when,accessing,file,handle,limit,t,return,1l
EnvironmentInformation -> public static long getOpenFileHandlesLimit();1436802871;Tries to retrieve the maximum number of open file handles. This method will only work on_UNIX-based operating systems with Sun/Oracle Java versions.__<p>If the number of max open file handles cannot be determined, this method returns {@code -1}.</p>__@return The limit of open file handles, or {@code -1}, if the limit could not be determined.;public static long getOpenFileHandlesLimit() {_		Class<?> sunBeanClass__		try {_			sunBeanClass = Class.forName("com.sun.management.UnixOperatingSystemMXBean")__		}_		catch (ClassNotFoundException e) {_			return -1L__		}_		_		try {_			Method fhLimitMethod = sunBeanClass.getMethod("getMaxFileDescriptorCount")__			Object result = fhLimitMethod.invoke(ManagementFactory.getOperatingSystemMXBean())__			return (Long) result__		}_		catch (Throwable t) {_			LOG.warn("Unexpected error when accessing file handle limit", t)__			return -1L__		}_	};tries,to,retrieve,the,maximum,number,of,open,file,handles,this,method,will,only,work,on,unix,based,operating,systems,with,sun,oracle,java,versions,p,if,the,number,of,max,open,file,handles,cannot,be,determined,this,method,returns,code,1,p,return,the,limit,of,open,file,handles,or,code,1,if,the,limit,could,not,be,determined;public,static,long,get,open,file,handles,limit,class,sun,bean,class,try,sun,bean,class,class,for,name,com,sun,management,unix,operating,system,mxbean,catch,class,not,found,exception,e,return,1l,try,method,fh,limit,method,sun,bean,class,get,method,get,max,file,descriptor,count,object,result,fh,limit,method,invoke,management,factory,get,operating,system,mxbean,return,long,result,catch,throwable,t,log,warn,unexpected,error,when,accessing,file,handle,limit,t,return,1l
EnvironmentInformation -> public static long getOpenFileHandlesLimit();1436802871;Tries to retrieve the maximum number of open file handles. This method will only work on_UNIX-based operating systems with Sun/Oracle Java versions.__<p>If the number of max open file handles cannot be determined, this method returns {@code -1}.</p>__@return The limit of open file handles, or {@code -1}, if the limit could not be determined.;public static long getOpenFileHandlesLimit() {_		Class<?> sunBeanClass__		try {_			sunBeanClass = Class.forName("com.sun.management.UnixOperatingSystemMXBean")__		}_		catch (ClassNotFoundException e) {_			return -1L__		}_		_		try {_			Method fhLimitMethod = sunBeanClass.getMethod("getMaxFileDescriptorCount")__			Object result = fhLimitMethod.invoke(ManagementFactory.getOperatingSystemMXBean())__			return (Long) result__		}_		catch (Throwable t) {_			LOG.warn("Unexpected error when accessing file handle limit", t)__			return -1L__		}_	};tries,to,retrieve,the,maximum,number,of,open,file,handles,this,method,will,only,work,on,unix,based,operating,systems,with,sun,oracle,java,versions,p,if,the,number,of,max,open,file,handles,cannot,be,determined,this,method,returns,code,1,p,return,the,limit,of,open,file,handles,or,code,1,if,the,limit,could,not,be,determined;public,static,long,get,open,file,handles,limit,class,sun,bean,class,try,sun,bean,class,class,for,name,com,sun,management,unix,operating,system,mxbean,catch,class,not,found,exception,e,return,1l,try,method,fh,limit,method,sun,bean,class,get,method,get,max,file,descriptor,count,object,result,fh,limit,method,invoke,management,factory,get,operating,system,mxbean,return,long,result,catch,throwable,t,log,warn,unexpected,error,when,accessing,file,handle,limit,t,return,1l
EnvironmentInformation -> public static long getOpenFileHandlesLimit();1440934092;Tries to retrieve the maximum number of open file handles. This method will only work on_UNIX-based operating systems with Sun/Oracle Java versions.__<p>If the number of max open file handles cannot be determined, this method returns {@code -1}.</p>__@return The limit of open file handles, or {@code -1}, if the limit could not be determined.;public static long getOpenFileHandlesLimit() {_		Class<?> sunBeanClass__		try {_			sunBeanClass = Class.forName("com.sun.management.UnixOperatingSystemMXBean")__		}_		catch (ClassNotFoundException e) {_			return -1L__		}_		_		try {_			Method fhLimitMethod = sunBeanClass.getMethod("getMaxFileDescriptorCount")__			Object result = fhLimitMethod.invoke(ManagementFactory.getOperatingSystemMXBean())__			return (Long) result__		}_		catch (Throwable t) {_			LOG.warn("Unexpected error when accessing file handle limit", t)__			return -1L__		}_	};tries,to,retrieve,the,maximum,number,of,open,file,handles,this,method,will,only,work,on,unix,based,operating,systems,with,sun,oracle,java,versions,p,if,the,number,of,max,open,file,handles,cannot,be,determined,this,method,returns,code,1,p,return,the,limit,of,open,file,handles,or,code,1,if,the,limit,could,not,be,determined;public,static,long,get,open,file,handles,limit,class,sun,bean,class,try,sun,bean,class,class,for,name,com,sun,management,unix,operating,system,mxbean,catch,class,not,found,exception,e,return,1l,try,method,fh,limit,method,sun,bean,class,get,method,get,max,file,descriptor,count,object,result,fh,limit,method,invoke,management,factory,get,operating,system,mxbean,return,long,result,catch,throwable,t,log,warn,unexpected,error,when,accessing,file,handle,limit,t,return,1l
EnvironmentInformation -> public static long getOpenFileHandlesLimit();1441738685;Tries to retrieve the maximum number of open file handles. This method will only work on_UNIX-based operating systems with Sun/Oracle Java versions.__<p>If the number of max open file handles cannot be determined, this method returns {@code -1}.</p>__@return The limit of open file handles, or {@code -1}, if the limit could not be determined.;public static long getOpenFileHandlesLimit() {_		Class<?> sunBeanClass__		try {_			sunBeanClass = Class.forName("com.sun.management.UnixOperatingSystemMXBean")__		}_		catch (ClassNotFoundException e) {_			return -1L__		}_		_		try {_			Method fhLimitMethod = sunBeanClass.getMethod("getMaxFileDescriptorCount")__			Object result = fhLimitMethod.invoke(ManagementFactory.getOperatingSystemMXBean())__			return (Long) result__		}_		catch (Throwable t) {_			LOG.warn("Unexpected error when accessing file handle limit", t)__			return -1L__		}_	};tries,to,retrieve,the,maximum,number,of,open,file,handles,this,method,will,only,work,on,unix,based,operating,systems,with,sun,oracle,java,versions,p,if,the,number,of,max,open,file,handles,cannot,be,determined,this,method,returns,code,1,p,return,the,limit,of,open,file,handles,or,code,1,if,the,limit,could,not,be,determined;public,static,long,get,open,file,handles,limit,class,sun,bean,class,try,sun,bean,class,class,for,name,com,sun,management,unix,operating,system,mxbean,catch,class,not,found,exception,e,return,1l,try,method,fh,limit,method,sun,bean,class,get,method,get,max,file,descriptor,count,object,result,fh,limit,method,invoke,management,factory,get,operating,system,mxbean,return,long,result,catch,throwable,t,log,warn,unexpected,error,when,accessing,file,handle,limit,t,return,1l
EnvironmentInformation -> public static long getOpenFileHandlesLimit();1447950693;Tries to retrieve the maximum number of open file handles. This method will only work on_UNIX-based operating systems with Sun/Oracle Java versions.__<p>If the number of max open file handles cannot be determined, this method returns {@code -1}.</p>__@return The limit of open file handles, or {@code -1}, if the limit could not be determined.;public static long getOpenFileHandlesLimit() {_		Class<?> sunBeanClass__		try {_			sunBeanClass = Class.forName("com.sun.management.UnixOperatingSystemMXBean")__		}_		catch (ClassNotFoundException e) {_			return -1L__		}_		_		try {_			Method fhLimitMethod = sunBeanClass.getMethod("getMaxFileDescriptorCount")__			Object result = fhLimitMethod.invoke(ManagementFactory.getOperatingSystemMXBean())__			return (Long) result__		}_		catch (Throwable t) {_			LOG.warn("Unexpected error when accessing file handle limit", t)__			return -1L__		}_	};tries,to,retrieve,the,maximum,number,of,open,file,handles,this,method,will,only,work,on,unix,based,operating,systems,with,sun,oracle,java,versions,p,if,the,number,of,max,open,file,handles,cannot,be,determined,this,method,returns,code,1,p,return,the,limit,of,open,file,handles,or,code,1,if,the,limit,could,not,be,determined;public,static,long,get,open,file,handles,limit,class,sun,bean,class,try,sun,bean,class,class,for,name,com,sun,management,unix,operating,system,mxbean,catch,class,not,found,exception,e,return,1l,try,method,fh,limit,method,sun,bean,class,get,method,get,max,file,descriptor,count,object,result,fh,limit,method,invoke,management,factory,get,operating,system,mxbean,return,long,result,catch,throwable,t,log,warn,unexpected,error,when,accessing,file,handle,limit,t,return,1l
EnvironmentInformation -> public static long getOpenFileHandlesLimit();1449948123;Tries to retrieve the maximum number of open file handles. This method will only work on_UNIX-based operating systems with Sun/Oracle Java versions.__<p>If the number of max open file handles cannot be determined, this method returns {@code -1}.</p>__@return The limit of open file handles, or {@code -1}, if the limit could not be determined.;public static long getOpenFileHandlesLimit() {_		Class<?> sunBeanClass__		try {_			sunBeanClass = Class.forName("com.sun.management.UnixOperatingSystemMXBean")__		}_		catch (ClassNotFoundException e) {_			return -1L__		}_		_		try {_			Method fhLimitMethod = sunBeanClass.getMethod("getMaxFileDescriptorCount")__			Object result = fhLimitMethod.invoke(ManagementFactory.getOperatingSystemMXBean())__			return (Long) result__		}_		catch (Throwable t) {_			LOG.warn("Unexpected error when accessing file handle limit", t)__			return -1L__		}_	};tries,to,retrieve,the,maximum,number,of,open,file,handles,this,method,will,only,work,on,unix,based,operating,systems,with,sun,oracle,java,versions,p,if,the,number,of,max,open,file,handles,cannot,be,determined,this,method,returns,code,1,p,return,the,limit,of,open,file,handles,or,code,1,if,the,limit,could,not,be,determined;public,static,long,get,open,file,handles,limit,class,sun,bean,class,try,sun,bean,class,class,for,name,com,sun,management,unix,operating,system,mxbean,catch,class,not,found,exception,e,return,1l,try,method,fh,limit,method,sun,bean,class,get,method,get,max,file,descriptor,count,object,result,fh,limit,method,invoke,management,factory,get,operating,system,mxbean,return,long,result,catch,throwable,t,log,warn,unexpected,error,when,accessing,file,handle,limit,t,return,1l
EnvironmentInformation -> public static long getOpenFileHandlesLimit();1451574482;Tries to retrieve the maximum number of open file handles. This method will only work on_UNIX-based operating systems with Sun/Oracle Java versions.__<p>If the number of max open file handles cannot be determined, this method returns {@code -1}.</p>__@return The limit of open file handles, or {@code -1}, if the limit could not be determined.;public static long getOpenFileHandlesLimit() {_		Class<?> sunBeanClass__		try {_			sunBeanClass = Class.forName("com.sun.management.UnixOperatingSystemMXBean")__		}_		catch (ClassNotFoundException e) {_			return -1L__		}_		_		try {_			Method fhLimitMethod = sunBeanClass.getMethod("getMaxFileDescriptorCount")__			Object result = fhLimitMethod.invoke(ManagementFactory.getOperatingSystemMXBean())__			return (Long) result__		}_		catch (Throwable t) {_			LOG.warn("Unexpected error when accessing file handle limit", t)__			return -1L__		}_	};tries,to,retrieve,the,maximum,number,of,open,file,handles,this,method,will,only,work,on,unix,based,operating,systems,with,sun,oracle,java,versions,p,if,the,number,of,max,open,file,handles,cannot,be,determined,this,method,returns,code,1,p,return,the,limit,of,open,file,handles,or,code,1,if,the,limit,could,not,be,determined;public,static,long,get,open,file,handles,limit,class,sun,bean,class,try,sun,bean,class,class,for,name,com,sun,management,unix,operating,system,mxbean,catch,class,not,found,exception,e,return,1l,try,method,fh,limit,method,sun,bean,class,get,method,get,max,file,descriptor,count,object,result,fh,limit,method,invoke,management,factory,get,operating,system,mxbean,return,long,result,catch,throwable,t,log,warn,unexpected,error,when,accessing,file,handle,limit,t,return,1l
EnvironmentInformation -> public static long getOpenFileHandlesLimit();1453987292;Tries to retrieve the maximum number of open file handles. This method will only work on_UNIX-based operating systems with Sun/Oracle Java versions.__<p>If the number of max open file handles cannot be determined, this method returns {@code -1}.</p>__@return The limit of open file handles, or {@code -1}, if the limit could not be determined.;public static long getOpenFileHandlesLimit() {_		Class<?> sunBeanClass__		try {_			sunBeanClass = Class.forName("com.sun.management.UnixOperatingSystemMXBean")__		}_		catch (ClassNotFoundException e) {_			return -1L__		}_		_		try {_			Method fhLimitMethod = sunBeanClass.getMethod("getMaxFileDescriptorCount")__			Object result = fhLimitMethod.invoke(ManagementFactory.getOperatingSystemMXBean())__			return (Long) result__		}_		catch (Throwable t) {_			LOG.warn("Unexpected error when accessing file handle limit", t)__			return -1L__		}_	};tries,to,retrieve,the,maximum,number,of,open,file,handles,this,method,will,only,work,on,unix,based,operating,systems,with,sun,oracle,java,versions,p,if,the,number,of,max,open,file,handles,cannot,be,determined,this,method,returns,code,1,p,return,the,limit,of,open,file,handles,or,code,1,if,the,limit,could,not,be,determined;public,static,long,get,open,file,handles,limit,class,sun,bean,class,try,sun,bean,class,class,for,name,com,sun,management,unix,operating,system,mxbean,catch,class,not,found,exception,e,return,1l,try,method,fh,limit,method,sun,bean,class,get,method,get,max,file,descriptor,count,object,result,fh,limit,method,invoke,management,factory,get,operating,system,mxbean,return,long,result,catch,throwable,t,log,warn,unexpected,error,when,accessing,file,handle,limit,t,return,1l
EnvironmentInformation -> public static long getOpenFileHandlesLimit();1468411826;Tries to retrieve the maximum number of open file handles. This method will only work on_UNIX-based operating systems with Sun/Oracle Java versions.__<p>If the number of max open file handles cannot be determined, this method returns {@code -1}.</p>__@return The limit of open file handles, or {@code -1}, if the limit could not be determined.;public static long getOpenFileHandlesLimit() {_		Class<?> sunBeanClass__		try {_			sunBeanClass = Class.forName("com.sun.management.UnixOperatingSystemMXBean")__		}_		catch (ClassNotFoundException e) {_			return -1L__		}_		_		try {_			Method fhLimitMethod = sunBeanClass.getMethod("getMaxFileDescriptorCount")__			Object result = fhLimitMethod.invoke(ManagementFactory.getOperatingSystemMXBean())__			return (Long) result__		}_		catch (Throwable t) {_			LOG.warn("Unexpected error when accessing file handle limit", t)__			return -1L__		}_	};tries,to,retrieve,the,maximum,number,of,open,file,handles,this,method,will,only,work,on,unix,based,operating,systems,with,sun,oracle,java,versions,p,if,the,number,of,max,open,file,handles,cannot,be,determined,this,method,returns,code,1,p,return,the,limit,of,open,file,handles,or,code,1,if,the,limit,could,not,be,determined;public,static,long,get,open,file,handles,limit,class,sun,bean,class,try,sun,bean,class,class,for,name,com,sun,management,unix,operating,system,mxbean,catch,class,not,found,exception,e,return,1l,try,method,fh,limit,method,sun,bean,class,get,method,get,max,file,descriptor,count,object,result,fh,limit,method,invoke,management,factory,get,operating,system,mxbean,return,long,result,catch,throwable,t,log,warn,unexpected,error,when,accessing,file,handle,limit,t,return,1l
EnvironmentInformation -> public static long getOpenFileHandlesLimit();1472660282;Tries to retrieve the maximum number of open file handles. This method will only work on_UNIX-based operating systems with Sun/Oracle Java versions.__<p>If the number of max open file handles cannot be determined, this method returns {@code -1}.</p>__@return The limit of open file handles, or {@code -1}, if the limit could not be determined.;public static long getOpenFileHandlesLimit() {_		Class<?> sunBeanClass__		try {_			sunBeanClass = Class.forName("com.sun.management.UnixOperatingSystemMXBean")__		}_		catch (ClassNotFoundException e) {_			return -1L__		}_		_		try {_			Method fhLimitMethod = sunBeanClass.getMethod("getMaxFileDescriptorCount")__			Object result = fhLimitMethod.invoke(ManagementFactory.getOperatingSystemMXBean())__			return (Long) result__		}_		catch (Throwable t) {_			LOG.warn("Unexpected error when accessing file handle limit", t)__			return -1L__		}_	};tries,to,retrieve,the,maximum,number,of,open,file,handles,this,method,will,only,work,on,unix,based,operating,systems,with,sun,oracle,java,versions,p,if,the,number,of,max,open,file,handles,cannot,be,determined,this,method,returns,code,1,p,return,the,limit,of,open,file,handles,or,code,1,if,the,limit,could,not,be,determined;public,static,long,get,open,file,handles,limit,class,sun,bean,class,try,sun,bean,class,class,for,name,com,sun,management,unix,operating,system,mxbean,catch,class,not,found,exception,e,return,1l,try,method,fh,limit,method,sun,bean,class,get,method,get,max,file,descriptor,count,object,result,fh,limit,method,invoke,management,factory,get,operating,system,mxbean,return,long,result,catch,throwable,t,log,warn,unexpected,error,when,accessing,file,handle,limit,t,return,1l
EnvironmentInformation -> public static long getOpenFileHandlesLimit();1495720603;Tries to retrieve the maximum number of open file handles. This method will only work on_UNIX-based operating systems with Sun/Oracle Java versions.__<p>If the number of max open file handles cannot be determined, this method returns {@code -1}.</p>__@return The limit of open file handles, or {@code -1}, if the limit could not be determined.;public static long getOpenFileHandlesLimit() {_		if (OperatingSystem.isWindows()) { _			return -1L__		}_		Class<?> sunBeanClass__		try {_			sunBeanClass = Class.forName("com.sun.management.UnixOperatingSystemMXBean")__		}_		catch (ClassNotFoundException e) {_			return -1L__		}_		_		try {_			Method fhLimitMethod = sunBeanClass.getMethod("getMaxFileDescriptorCount")__			Object result = fhLimitMethod.invoke(ManagementFactory.getOperatingSystemMXBean())__			return (Long) result__		}_		catch (Throwable t) {_			LOG.warn("Unexpected error when accessing file handle limit", t)__			return -1L__		}_	};tries,to,retrieve,the,maximum,number,of,open,file,handles,this,method,will,only,work,on,unix,based,operating,systems,with,sun,oracle,java,versions,p,if,the,number,of,max,open,file,handles,cannot,be,determined,this,method,returns,code,1,p,return,the,limit,of,open,file,handles,or,code,1,if,the,limit,could,not,be,determined;public,static,long,get,open,file,handles,limit,if,operating,system,is,windows,return,1l,class,sun,bean,class,try,sun,bean,class,class,for,name,com,sun,management,unix,operating,system,mxbean,catch,class,not,found,exception,e,return,1l,try,method,fh,limit,method,sun,bean,class,get,method,get,max,file,descriptor,count,object,result,fh,limit,method,invoke,management,factory,get,operating,system,mxbean,return,long,result,catch,throwable,t,log,warn,unexpected,error,when,accessing,file,handle,limit,t,return,1l
EnvironmentInformation -> public static long getOpenFileHandlesLimit();1506499511;Tries to retrieve the maximum number of open file handles. This method will only work on_UNIX-based operating systems with Sun/Oracle Java versions.__<p>If the number of max open file handles cannot be determined, this method returns {@code -1}.</p>__@return The limit of open file handles, or {@code -1}, if the limit could not be determined.;public static long getOpenFileHandlesLimit() {_		if (OperatingSystem.isWindows()) { _			return -1L__		}_		Class<?> sunBeanClass__		try {_			sunBeanClass = Class.forName("com.sun.management.UnixOperatingSystemMXBean")__		}_		catch (ClassNotFoundException e) {_			return -1L__		}_		_		try {_			Method fhLimitMethod = sunBeanClass.getMethod("getMaxFileDescriptorCount")__			Object result = fhLimitMethod.invoke(ManagementFactory.getOperatingSystemMXBean())__			return (Long) result__		}_		catch (Throwable t) {_			LOG.warn("Unexpected error when accessing file handle limit", t)__			return -1L__		}_	};tries,to,retrieve,the,maximum,number,of,open,file,handles,this,method,will,only,work,on,unix,based,operating,systems,with,sun,oracle,java,versions,p,if,the,number,of,max,open,file,handles,cannot,be,determined,this,method,returns,code,1,p,return,the,limit,of,open,file,handles,or,code,1,if,the,limit,could,not,be,determined;public,static,long,get,open,file,handles,limit,if,operating,system,is,windows,return,1l,class,sun,bean,class,try,sun,bean,class,class,for,name,com,sun,management,unix,operating,system,mxbean,catch,class,not,found,exception,e,return,1l,try,method,fh,limit,method,sun,bean,class,get,method,get,max,file,descriptor,count,object,result,fh,limit,method,invoke,management,factory,get,operating,system,mxbean,return,long,result,catch,throwable,t,log,warn,unexpected,error,when,accessing,file,handle,limit,t,return,1l
EnvironmentInformation -> public static long getOpenFileHandlesLimit();1513572729;Tries to retrieve the maximum number of open file handles. This method will only work on_UNIX-based operating systems with Sun/Oracle Java versions.__<p>If the number of max open file handles cannot be determined, this method returns {@code -1}.</p>__@return The limit of open file handles, or {@code -1}, if the limit could not be determined.;public static long getOpenFileHandlesLimit() {_		if (OperatingSystem.isWindows()) { _			return -1L__		}_		Class<?> sunBeanClass__		try {_			sunBeanClass = Class.forName("com.sun.management.UnixOperatingSystemMXBean")__		}_		catch (ClassNotFoundException e) {_			return -1L__		}_		_		try {_			Method fhLimitMethod = sunBeanClass.getMethod("getMaxFileDescriptorCount")__			Object result = fhLimitMethod.invoke(ManagementFactory.getOperatingSystemMXBean())__			return (Long) result__		}_		catch (Throwable t) {_			LOG.warn("Unexpected error when accessing file handle limit", t)__			return -1L__		}_	};tries,to,retrieve,the,maximum,number,of,open,file,handles,this,method,will,only,work,on,unix,based,operating,systems,with,sun,oracle,java,versions,p,if,the,number,of,max,open,file,handles,cannot,be,determined,this,method,returns,code,1,p,return,the,limit,of,open,file,handles,or,code,1,if,the,limit,could,not,be,determined;public,static,long,get,open,file,handles,limit,if,operating,system,is,windows,return,1l,class,sun,bean,class,try,sun,bean,class,class,for,name,com,sun,management,unix,operating,system,mxbean,catch,class,not,found,exception,e,return,1l,try,method,fh,limit,method,sun,bean,class,get,method,get,max,file,descriptor,count,object,result,fh,limit,method,invoke,management,factory,get,operating,system,mxbean,return,long,result,catch,throwable,t,log,warn,unexpected,error,when,accessing,file,handle,limit,t,return,1l
EnvironmentInformation -> public static String getJvmStartupOptions();1424806229;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1424868960;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1425317807;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1425601895;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1436380120;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1436802871;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1436802871;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1440934092;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1441738685;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1447950693;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1449948123;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1451574482;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1453987292;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1468411826;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1472660282;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1495720603;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1506499511;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static String getJvmStartupOptions();1513572729;Gets the system parameters and environment parameters that were passed to the JVM on startup.__@return The options passed to the JVM on startup.;public static String getJvmStartupOptions() {_		try {_			final RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean()__			final StringBuilder bld = new StringBuilder()__			_			for (String s : bean.getInputArguments()) {_				bld.append(s).append(' ')__			}__			return bld.toString()__		}_		catch (Throwable t) {_			return UNKNOWN__		}_	};gets,the,system,parameters,and,environment,parameters,that,were,passed,to,the,jvm,on,startup,return,the,options,passed,to,the,jvm,on,startup;public,static,string,get,jvm,startup,options,try,final,runtime,mxbean,bean,management,factory,get,runtime,mxbean,final,string,builder,bld,new,string,builder,for,string,s,bean,get,input,arguments,bld,append,s,append,return,bld,to,string,catch,throwable,t,return,unknown
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1405024514;Returns the code revision (commit and commit date) of Flink.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1405090423;Returns the code revision (commit and commit date) of Flink.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1407957596;Returns the code revision (commit and commit date) of Flink.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1409911022;Returns the code revision (commit and commit date) of Flink.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1411236167;Returns the code revision (commit and commit date) of Flink.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1411236168;Returns the code revision (commit and commit date) of Flink.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1411473593;Returns the code revision (commit and commit date) of Flink.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1415702894;Returns the code revision (commit and commit date) of Flink.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1424806229;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1424868960;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1425317807;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1425601895;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1436380120;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1436802871;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1436802871;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1440934092;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1441738685;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1447950693;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1449948123;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		RevisionInformation info = new RevisionInformation()__		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			Properties properties = new Properties()__			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				properties.load(propFile)__				revision = properties.getProperty("git.commit.id.abbrev")__				commitDate = properties.getProperty("git.commit.time")__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable ro read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable ro read version property file.")__			}_		}_		info.commitId = revision__		info.commitDate = commitDate__		return info__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,revision,information,info,new,revision,information,string,revision,unknown,string,commit,date,unknown,try,properties,properties,new,properties,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,load,prop,file,revision,properties,get,property,git,commit,id,abbrev,commit,date,properties,get,property,git,commit,time,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,ro,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,ro,read,version,property,file,info,commit,id,revision,info,commit,date,commit,date,return,info
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1451574482;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try {_			InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")__			if (propFile != null) {_				Properties properties = new Properties()__				properties.load(propFile)__				String propRevision = properties.getProperty("git.commit.id.abbrev")__				String propCommitDate = properties.getProperty("git.commit.time")__				revision = propRevision != null ? propRevision : UNKNOWN__				commitDate = propCommitDate != null ? propCommitDate : UNKNOWN__			}_		}_		catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable to read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable to read version property file.")__			}_		}_		_		return new RevisionInformation(revision, commitDate)__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,string,revision,unknown,string,commit,date,unknown,try,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,properties,new,properties,properties,load,prop,file,string,prop,revision,properties,get,property,git,commit,id,abbrev,string,prop,commit,date,properties,get,property,git,commit,time,revision,prop,revision,null,prop,revision,unknown,commit,date,prop,commit,date,null,prop,commit,date,unknown,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,to,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,to,read,version,property,file,return,new,revision,information,revision,commit,date
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1453987292;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")) {_			if (propFile != null) {_				Properties properties = new Properties()__				properties.load(propFile)__				String propRevision = properties.getProperty("git.commit.id.abbrev")__				String propCommitDate = properties.getProperty("git.commit.time")__				revision = propRevision != null ? propRevision : UNKNOWN__				commitDate = propCommitDate != null ? propCommitDate : UNKNOWN__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable to read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable to read version property file.")__			}_		}_		_		return new RevisionInformation(revision, commitDate)__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,string,revision,unknown,string,commit,date,unknown,try,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,properties,new,properties,properties,load,prop,file,string,prop,revision,properties,get,property,git,commit,id,abbrev,string,prop,commit,date,properties,get,property,git,commit,time,revision,prop,revision,null,prop,revision,unknown,commit,date,prop,commit,date,null,prop,commit,date,unknown,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,to,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,to,read,version,property,file,return,new,revision,information,revision,commit,date
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1468411826;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")) {_			if (propFile != null) {_				Properties properties = new Properties()__				properties.load(propFile)__				String propRevision = properties.getProperty("git.commit.id.abbrev")__				String propCommitDate = properties.getProperty("git.commit.time")__				revision = propRevision != null ? propRevision : UNKNOWN__				commitDate = propCommitDate != null ? propCommitDate : UNKNOWN__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable to read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable to read version property file.")__			}_		}_		_		return new RevisionInformation(revision, commitDate)__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,string,revision,unknown,string,commit,date,unknown,try,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,properties,new,properties,properties,load,prop,file,string,prop,revision,properties,get,property,git,commit,id,abbrev,string,prop,commit,date,properties,get,property,git,commit,time,revision,prop,revision,null,prop,revision,unknown,commit,date,prop,commit,date,null,prop,commit,date,unknown,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,to,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,to,read,version,property,file,return,new,revision,information,revision,commit,date
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1472660282;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")) {_			if (propFile != null) {_				Properties properties = new Properties()__				properties.load(propFile)__				String propRevision = properties.getProperty("git.commit.id.abbrev")__				String propCommitDate = properties.getProperty("git.commit.time")__				revision = propRevision != null ? propRevision : UNKNOWN__				commitDate = propCommitDate != null ? propCommitDate : UNKNOWN__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable to read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable to read version property file.")__			}_		}_		_		return new RevisionInformation(revision, commitDate)__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,string,revision,unknown,string,commit,date,unknown,try,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,properties,new,properties,properties,load,prop,file,string,prop,revision,properties,get,property,git,commit,id,abbrev,string,prop,commit,date,properties,get,property,git,commit,time,revision,prop,revision,null,prop,revision,unknown,commit,date,prop,commit,date,null,prop,commit,date,unknown,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,to,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,to,read,version,property,file,return,new,revision,information,revision,commit,date
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1495720603;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")) {_			if (propFile != null) {_				Properties properties = new Properties()__				properties.load(propFile)__				String propRevision = properties.getProperty("git.commit.id.abbrev")__				String propCommitDate = properties.getProperty("git.commit.time")__				revision = propRevision != null ? propRevision : UNKNOWN__				commitDate = propCommitDate != null ? propCommitDate : UNKNOWN__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable to read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable to read version property file.")__			}_		}_		_		return new RevisionInformation(revision, commitDate)__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,string,revision,unknown,string,commit,date,unknown,try,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,properties,new,properties,properties,load,prop,file,string,prop,revision,properties,get,property,git,commit,id,abbrev,string,prop,commit,date,properties,get,property,git,commit,time,revision,prop,revision,null,prop,revision,unknown,commit,date,prop,commit,date,null,prop,commit,date,unknown,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,to,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,to,read,version,property,file,return,new,revision,information,revision,commit,date
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1506499511;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")) {_			if (propFile != null) {_				Properties properties = new Properties()__				properties.load(propFile)__				String propRevision = properties.getProperty("git.commit.id.abbrev")__				String propCommitDate = properties.getProperty("git.commit.time")__				revision = propRevision != null ? propRevision : UNKNOWN__				commitDate = propCommitDate != null ? propCommitDate : UNKNOWN__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable to read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable to read version property file.")__			}_		}_		_		return new RevisionInformation(revision, commitDate)__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,string,revision,unknown,string,commit,date,unknown,try,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,properties,new,properties,properties,load,prop,file,string,prop,revision,properties,get,property,git,commit,id,abbrev,string,prop,commit,date,properties,get,property,git,commit,time,revision,prop,revision,null,prop,revision,unknown,commit,date,prop,commit,date,null,prop,commit,date,unknown,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,to,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,to,read,version,property,file,return,new,revision,information,revision,commit,date
EnvironmentInformation -> public static RevisionInformation getRevisionInformation();1513572729;Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.__@return The code revision.;public static RevisionInformation getRevisionInformation() {_		String revision = UNKNOWN__		String commitDate = UNKNOWN__		try (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(".version.properties")) {_			if (propFile != null) {_				Properties properties = new Properties()__				properties.load(propFile)__				String propRevision = properties.getProperty("git.commit.id.abbrev")__				String propCommitDate = properties.getProperty("git.commit.time")__				revision = propRevision != null ? propRevision : UNKNOWN__				commitDate = propCommitDate != null ? propCommitDate : UNKNOWN__			}_		} catch (Throwable t) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Cannot determine code revision: Unable to read version property file.", t)__			} else {_				LOG.info("Cannot determine code revision: Unable to read version property file.")__			}_		}_		_		return new RevisionInformation(revision, commitDate)__	};returns,the,code,revision,commit,and,commit,date,of,flink,as,generated,by,the,maven,builds,return,the,code,revision;public,static,revision,information,get,revision,information,string,revision,unknown,string,commit,date,unknown,try,input,stream,prop,file,environment,information,class,get,class,loader,get,resource,as,stream,version,properties,if,prop,file,null,properties,properties,new,properties,properties,load,prop,file,string,prop,revision,properties,get,property,git,commit,id,abbrev,string,prop,commit,date,properties,get,property,git,commit,time,revision,prop,revision,null,prop,revision,unknown,commit,date,prop,commit,date,null,prop,commit,date,unknown,catch,throwable,t,if,log,is,debug,enabled,log,debug,cannot,determine,code,revision,unable,to,read,version,property,file,t,else,log,info,cannot,determine,code,revision,unable,to,read,version,property,file,return,new,revision,information,revision,commit,date
