commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Returns the subtask state for the given operator id (or null if not contained).  */ ;/**  * Returns the subtask state for the given operator id (or null if not contained).  */ @Nullable public OperatorSubtaskState getSubtaskStateByOperatorID(OperatorID operatorID) {     return subtaskStatesByOperatorID.get(operatorID). }
true;public;2;6;/**  * Maps the given operator id to the given subtask state. Returns the subtask state of a previous mapping, if such  * a mapping existed or null otherwise.  */ ;/**  * Maps the given operator id to the given subtask state. Returns the subtask state of a previous mapping, if such  * a mapping existed or null otherwise.  */ public OperatorSubtaskState putSubtaskStateByOperatorID(@Nonnull OperatorID operatorID, @Nonnull OperatorSubtaskState state) {     return subtaskStatesByOperatorID.put(operatorID, Preconditions.checkNotNull(state)). }
true;public;0;3;/**  * Returns the set of all mappings from operator id to the corresponding subtask state.  */ ;/**  * Returns the set of all mappings from operator id to the corresponding subtask state.  */ public Set<Map.Entry<OperatorID, OperatorSubtaskState>> getSubtaskStateMappings() {     return subtaskStatesByOperatorID.entrySet(). }
true;public;0;8;/**  * Returns true if at least one {@link OperatorSubtaskState} in subtaskStatesByOperatorID has state.  */ ;/**  * Returns true if at least one {@link OperatorSubtaskState} in subtaskStatesByOperatorID has state.  */ public boolean hasState() {     for (OperatorSubtaskState operatorSubtaskState : subtaskStatesByOperatorID.values()) {         if (operatorSubtaskState != null && operatorSubtaskState.hasState()) {             return true.         }     }     return false. }
false;public;0;4;;@Override public void discardState() throws Exception {     StateUtil.bestEffortDiscardAllStateObjects(subtaskStatesByOperatorID.values()). }
false;public;0;12;;@Override public long getStateSize() {     long size = 0L.     for (OperatorSubtaskState subtaskState : subtaskStatesByOperatorID.values()) {         if (subtaskState != null) {             size += subtaskState.getStateSize().         }     }     return size. }
false;public;1;8;;@Override public void registerSharedStates(SharedStateRegistry stateRegistry) {     for (OperatorSubtaskState operatorSubtaskState : subtaskStatesByOperatorID.values()) {         if (operatorSubtaskState != null) {             operatorSubtaskState.registerSharedStates(stateRegistry).         }     } }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     TaskStateSnapshot that = (TaskStateSnapshot) o.     return subtaskStatesByOperatorID.equals(that.subtaskStatesByOperatorID). }
false;public;0;4;;@Override public int hashCode() {     return subtaskStatesByOperatorID.hashCode(). }
false;public;0;6;;@Override public String toString() {     return "TaskOperatorSubtaskStates{" + "subtaskStatesByOperatorID=" + subtaskStatesByOperatorID + '}'. }
