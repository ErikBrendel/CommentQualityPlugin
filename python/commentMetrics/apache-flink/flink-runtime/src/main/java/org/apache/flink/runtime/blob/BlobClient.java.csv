# id;timestamp;commentText;codeText;commentWords;codeWords
BlobClient -> public BlobKey put(final byte[] value, final int offset, final int len) throws IOException;1412605211;Uploads data from the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(final byte[] value, final int offset, final int len) throws IOException {__		return putBuffer(null, null, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,final,byte,value,final,int,offset,final,int,len,throws,ioexception,return,put,buffer,null,null,value,offset,len
BlobClient -> public BlobKey put(final byte[] value, final int offset, final int len) throws IOException;1418925511;Uploads data from the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(final byte[] value, final int offset, final int len) throws IOException {__		return putBuffer(null, null, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,final,byte,value,final,int,offset,final,int,len,throws,ioexception,return,put,buffer,null,null,value,offset,len
BlobClient -> InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey) 			throws IOException;1507212387;Downloads the BLOB identified by the given BLOB key from the BLOB server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return an input stream to read the retrieved data from__@throws FileNotFoundException_if there is no such file__@throws IOException_if an I/O error occurs during the download;InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug("GET BLOB {}/{} from {}.", jobId, blobKey,_				socket.getLocalSocketAddress())__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, jobId, blobKey)__			receiveAndCheckGetResponse(is)___			return new BlobInputStream(is, blobKey, os)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,an,input,stream,to,read,the,retrieved,data,from,throws,file,not,found,exception,if,there,is,no,such,file,throws,ioexception,if,an,i,o,error,occurs,during,the,download;input,stream,get,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,get,blob,from,job,id,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,blob,key,receive,and,check,get,response,is,return,new,blob,input,stream,is,blob,key,os,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey) 			throws IOException;1508138617;Downloads the BLOB identified by the given BLOB key from the BLOB server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return an input stream to read the retrieved data from__@throws FileNotFoundException_if there is no such file__@throws IOException_if an I/O error occurs during the download;InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug("GET BLOB {}/{} from {}.", jobId, blobKey,_				socket.getLocalSocketAddress())__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, jobId, blobKey)__			receiveAndCheckGetResponse(is)___			return new BlobInputStream(is, blobKey, os)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,an,input,stream,to,read,the,retrieved,data,from,throws,file,not,found,exception,if,there,is,no,such,file,throws,ioexception,if,an,i,o,error,occurs,during,the,download;input,stream,get,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,get,blob,from,job,id,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,blob,key,receive,and,check,get,response,is,return,new,blob,input,stream,is,blob,key,os,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey) 			throws IOException;1515428991;Downloads the BLOB identified by the given BLOB key from the BLOB server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return an input stream to read the retrieved data from__@throws FileNotFoundException_if there is no such file__@throws IOException_if an I/O error occurs during the download;InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug("GET BLOB {}/{} from {}.", jobId, blobKey,_				socket.getLocalSocketAddress())__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, jobId, blobKey)__			receiveAndCheckGetResponse(is)___			return new BlobInputStream(is, blobKey, os)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,an,input,stream,to,read,the,retrieved,data,from,throws,file,not,found,exception,if,there,is,no,such,file,throws,ioexception,if,an,i,o,error,occurs,during,the,download;input,stream,get,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,get,blob,from,job,id,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,blob,key,receive,and,check,get,response,is,return,new,blob,input,stream,is,blob,key,os,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey) 			throws IOException;1525420604;Downloads the BLOB identified by the given BLOB key from the BLOB server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return an input stream to read the retrieved data from__@throws FileNotFoundException_if there is no such file__@throws IOException_if an I/O error occurs during the download;InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug("GET BLOB {}/{} from {}.", jobId, blobKey,_				socket.getLocalSocketAddress())__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, jobId, blobKey)__			receiveAndCheckGetResponse(is)___			return new BlobInputStream(is, blobKey, os)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,an,input,stream,to,read,the,retrieved,data,from,throws,file,not,found,exception,if,there,is,no,such,file,throws,ioexception,if,an,i,o,error,occurs,during,the,download;input,stream,get,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,get,blob,from,job,id,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,blob,key,receive,and,check,get,response,is,return,new,blob,input,stream,is,blob,key,os,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey) 			throws IOException;1529583969;Downloads the BLOB identified by the given BLOB key from the BLOB server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return an input stream to read the retrieved data from__@throws FileNotFoundException_if there is no such file__@throws IOException_if an I/O error occurs during the download;InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug("GET BLOB {}/{} from {}.", jobId, blobKey,_				socket.getLocalSocketAddress())__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, jobId, blobKey)__			receiveAndCheckGetResponse(is)___			return new BlobInputStream(is, blobKey, os)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,an,input,stream,to,read,the,retrieved,data,from,throws,file,not,found,exception,if,there,is,no,such,file,throws,ioexception,if,an,i,o,error,occurs,during,the,download;input,stream,get,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,get,blob,from,job,id,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,blob,key,receive,and,check,get,response,is,return,new,blob,input,stream,is,blob,key,os,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey) 			throws IOException;1531721446;Downloads the BLOB identified by the given BLOB key from the BLOB server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return an input stream to read the retrieved data from__@throws FileNotFoundException_if there is no such file__@throws IOException_if an I/O error occurs during the download;InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug("GET BLOB {}/{} from {}.", jobId, blobKey,_				socket.getLocalSocketAddress())__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, jobId, blobKey)__			receiveAndCheckGetResponse(is)___			return new BlobInputStream(is, blobKey, os)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,an,input,stream,to,read,the,retrieved,data,from,throws,file,not,found,exception,if,there,is,no,such,file,throws,ioexception,if,an,i,o,error,occurs,during,the,download;input,stream,get,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,get,blob,from,job,id,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,blob,key,receive,and,check,get,response,is,return,new,blob,input,stream,is,blob,key,os,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey) 			throws IOException;1531721446;Downloads the BLOB identified by the given BLOB key from the BLOB server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return an input stream to read the retrieved data from__@throws FileNotFoundException_if there is no such file__@throws IOException_if an I/O error occurs during the download;InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug("GET BLOB {}/{} from {}.", jobId, blobKey,_				socket.getLocalSocketAddress())__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, jobId, blobKey)__			receiveAndCheckGetResponse(is)___			return new BlobInputStream(is, blobKey, os)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,an,input,stream,to,read,the,retrieved,data,from,throws,file,not,found,exception,if,there,is,no,such,file,throws,ioexception,if,an,i,o,error,occurs,during,the,download;input,stream,get,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,get,blob,from,job,id,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,blob,key,receive,and,check,get,response,is,return,new,blob,input,stream,is,blob,key,os,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> private BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream) throws IOException;1502701584;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param inputStream_the input stream to read the data from__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(inputStream)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB stream to {}.", socket.getLocalSocketAddress())__		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = BlobUtils.createMessageDigest()__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId)___			while (true) {_				_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					md.update(xferBuf, 0, read)__				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receiveAndCheckPutResponse(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,input,stream,if,log,is,debug,enabled,log,debug,put,blob,stream,to,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,blob,utils,create,message,digest,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,and,check,put,response,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream) throws IOException;1503041372;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param inputStream_the input stream to read the data from__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(inputStream)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB stream to {}.", socket.getLocalSocketAddress())__		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = BlobUtils.createMessageDigest()__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId)___			while (true) {_				_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					md.update(xferBuf, 0, read)__				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receiveAndCheckPutResponse(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,input,stream,if,log,is,debug,enabled,log,debug,put,blob,stream,to,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,blob,utils,create,message,digest,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,and,check,put,response,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private void sendGetHeader(final OutputStream outputStream, final JobID jobID, final String key, 			final BlobKey key2, final byte[] buf) throws IOException;1412605211;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobID_the job ID identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used_to identify the BLOB on the server instead_@param key_the key identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used to_identify the BLOB on the server instead_@param key2_the BLOB key to identify the BLOB to download if either the job ID or the regular key are_<code>null</code>_@param buf_auxiliary buffer used for data serialization_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendGetHeader(final OutputStream outputStream, final JobID jobID, final String key,_			final BlobKey key2, final byte[] buf) throws IOException {__		_		outputStream.write(BlobServer.GET_OPERATION)___		_		if (jobID == null || key == null) {_			outputStream.write(1)__			key2.writeToOutputStream(outputStream)__		} else {_			outputStream.write(0)__			_			final ByteBuffer bb = ByteBuffer.wrap(buf)__			jobID.write(bb)__			outputStream.write(buf)___			_			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			BlobServer.writeLength(keyBytes.length, buf, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,the,job,id,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,key,the,key,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,key2,the,blob,key,to,identify,the,blob,to,download,if,either,the,job,id,or,the,regular,key,are,code,null,code,param,buf,auxiliary,buffer,used,for,data,serialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,get,header,final,output,stream,output,stream,final,job,id,job,id,final,string,key,final,blob,key,key2,final,byte,buf,throws,ioexception,output,stream,write,blob,server,if,job,id,null,key,null,output,stream,write,1,key2,write,to,output,stream,output,stream,else,output,stream,write,0,final,byte,buffer,bb,byte,buffer,wrap,buf,job,id,write,bb,output,stream,write,buf,byte,key,bytes,key,get,bytes,blob,utils,blob,server,write,length,key,bytes,length,buf,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendGetHeader(final OutputStream outputStream, final JobID jobID, final String key, 			final BlobKey key2, final byte[] buf) throws IOException;1418925511;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobID_the job ID identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used_to identify the BLOB on the server instead_@param key_the key identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used to_identify the BLOB on the server instead_@param key2_the BLOB key to identify the BLOB to download if either the job ID or the regular key are_<code>null</code>_@param buf_auxiliary buffer used for data serialization_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendGetHeader(final OutputStream outputStream, final JobID jobID, final String key,_			final BlobKey key2, final byte[] buf) throws IOException {__		_		outputStream.write(BlobServer.GET_OPERATION)___		_		if (jobID == null || key == null) {_			outputStream.write(1)__			key2.writeToOutputStream(outputStream)__		} else {_			outputStream.write(0)__			_			final ByteBuffer bb = ByteBuffer.wrap(buf)__			jobID.write(bb)__			outputStream.write(buf)___			_			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			BlobServer.writeLength(keyBytes.length, buf, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,the,job,id,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,key,the,key,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,key2,the,blob,key,to,identify,the,blob,to,download,if,either,the,job,id,or,the,regular,key,are,code,null,code,param,buf,auxiliary,buffer,used,for,data,serialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,get,header,final,output,stream,output,stream,final,job,id,job,id,final,string,key,final,blob,key,key2,final,byte,buf,throws,ioexception,output,stream,write,blob,server,if,job,id,null,key,null,output,stream,write,1,key2,write,to,output,stream,output,stream,else,output,stream,write,0,final,byte,buffer,bb,byte,buffer,wrap,buf,job,id,write,bb,output,stream,write,buf,byte,key,bytes,key,get,bytes,blob,utils,blob,server,write,length,key,bytes,length,buf,output,stream,output,stream,write,key,bytes
BlobClient -> public BlobKey put(byte[] value, int offset, int len) throws IOException;1424264340;Uploads data from the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value, int offset, int len) throws IOException {_		return putBuffer(null, null, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,int,offset,int,len,throws,ioexception,return,put,buffer,null,null,value,offset,len
BlobClient -> public BlobKey put(byte[] value, int offset, int len) throws IOException;1427784999;Uploads data from the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value, int offset, int len) throws IOException {_		return putBuffer(null, null, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,int,offset,int,len,throws,ioexception,return,put,buffer,null,null,value,offset,len
BlobClient -> public BlobKey put(byte[] value, int offset, int len) throws IOException;1468854249;Uploads data from the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value, int offset, int len) throws IOException {_		return putBuffer(null, null, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,int,offset,int,len,throws,ioexception,return,put,buffer,null,null,value,offset,len
BlobClient -> public BlobKey put(byte[] value, int offset, int len) throws IOException;1476696544;Uploads data from the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value, int offset, int len) throws IOException {_		return putBuffer(null, null, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,int,offset,int,len,throws,ioexception,return,put,buffer,null,null,value,offset,len
BlobClient -> public BlobKey put(byte[] value, int offset, int len) throws IOException;1487441974;Uploads data from the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value, int offset, int len) throws IOException {_		return putBuffer(null, null, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,int,offset,int,len,throws,ioexception,return,put,buffer,null,null,value,offset,len
BlobClient -> public BlobKey put(byte[] value, int offset, int len) throws IOException;1494690800;Uploads data from the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value, int offset, int len) throws IOException {_		return putBuffer(null, null, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,int,offset,int,len,throws,ioexception,return,put,buffer,null,null,value,offset,len
BlobClient -> public BlobKey put(byte[] value, int offset, int len) throws IOException;1495001945;Uploads data from the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value, int offset, int len) throws IOException {_		return putBuffer(null, null, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,int,offset,int,len,throws,ioexception,return,put,buffer,null,null,value,offset,len
BlobClient -> public BlobKey put(byte[] value, int offset, int len) throws IOException;1499173045;Uploads data from the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value, int offset, int len) throws IOException {_		return putBuffer(null, null, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,int,offset,int,len,throws,ioexception,return,put,buffer,null,null,value,offset,len
BlobClient -> public BlobKey put(byte[] value, int offset, int len) throws IOException;1499789965;Uploads data from the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value, int offset, int len) throws IOException {_		return putBuffer(null, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,int,offset,int,len,throws,ioexception,return,put,buffer,null,value,offset,len
BlobClient -> public BlobKey put(byte[] value, int offset, int len) throws IOException;1502355408;Uploads data from the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value, int offset, int len) throws IOException {_		return putBuffer(null, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,int,offset,int,len,throws,ioexception,return,put,buffer,null,value,offset,len
BlobClient -> public static List<BlobKey> uploadJarFiles( 			InetSocketAddress serverAddress, 			Configuration clientConfig, 			List<Path> jars) throws IOException;1502355408;Uploads the JAR files to a {@link BlobServer} at the given address.__@param serverAddress Server address of the {@link BlobServer}_@param clientConfig Any additional configuration for the blob client_@param jars List of JAR files to upload_@throws IOException Thrown if the upload fails;public static List<BlobKey> uploadJarFiles(_			InetSocketAddress serverAddress,_			Configuration clientConfig,_			List<Path> jars) throws IOException {_		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<BlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path jar : jars) {_					final FileSystem fs = jar.getFileSystem()__					FSDataInputStream is = null__					try {_						is = fs.open(jar)__						final BlobKey key = blobClient.put(is)__						blobKeys.add(key)__					} finally {_						if (is != null) {_							is.close()__						}_					}_				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,a,link,blob,server,at,the,given,address,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,jars,list,of,jar,files,to,upload,throws,ioexception,thrown,if,the,upload,fails;public,static,list,blob,key,upload,jar,files,inet,socket,address,server,address,configuration,client,config,list,path,jars,throws,ioexception,if,jars,is,empty,return,collections,empty,list,else,list,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,jar,jars,final,file,system,fs,jar,get,file,system,fsdata,input,stream,is,null,try,is,fs,open,jar,final,blob,key,key,blob,client,put,is,blob,keys,add,key,finally,if,is,null,is,close,return,blob,keys
BlobClient -> public static List<BlobKey> uploadJarFiles( 			InetSocketAddress serverAddress, 			Configuration clientConfig, 			List<Path> jars) throws IOException;1502701584;Uploads the JAR files to a {@link BlobServer} at the given address._<p>_TODO: add jobId to signature after adapting the BlobLibraryCacheManager__@param serverAddress_Server address of the {@link BlobServer}_@param clientConfig_Any additional configuration for the blob client_@param jars_List of JAR files to upload__@throws IOException_if the upload fails;public static List<BlobKey> uploadJarFiles(_			InetSocketAddress serverAddress,_			Configuration clientConfig,_			List<Path> jars) throws IOException {_		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<BlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path jar : jars) {_					final FileSystem fs = jar.getFileSystem()__					FSDataInputStream is = null__					try {_						is = fs.open(jar)__						final BlobKey key = blobClient.putInputStream(null, is)__						blobKeys.add(key)__					} finally {_						if (is != null) {_							is.close()__						}_					}_				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,a,link,blob,server,at,the,given,address,p,todo,add,job,id,to,signature,after,adapting,the,blob,library,cache,manager,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,jars,list,of,jar,files,to,upload,throws,ioexception,if,the,upload,fails;public,static,list,blob,key,upload,jar,files,inet,socket,address,server,address,configuration,client,config,list,path,jars,throws,ioexception,if,jars,is,empty,return,collections,empty,list,else,list,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,jar,jars,final,file,system,fs,jar,get,file,system,fsdata,input,stream,is,null,try,is,fs,open,jar,final,blob,key,key,blob,client,put,input,stream,null,is,blob,keys,add,key,finally,if,is,null,is,close,return,blob,keys
BlobClient -> private static void sendPutHeader( 			OutputStream outputStream, @Nullable JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1507212387;Constructs and writes the header data for a PUT request to the given output stream.__@param outputStream_the output stream to write the PUT header data to_@param jobId_the ID of job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param blobType_whether the BLOB should become permanent or transient__@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private static void sendPutHeader(_			OutputStream outputStream, @Nullable JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		_		outputStream.write(PUT_OPERATION)__		if (jobId == null) {_			outputStream.write(JOB_UNRELATED_CONTENT)__		} else {_			outputStream.write(JOB_RELATED_CONTENT)__			outputStream.write(jobId.getBytes())__		}_		outputStream.write(blobType.ordinal())__	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,static,void,send,put,header,output,stream,output,stream,nullable,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes,output,stream,write,blob,type,ordinal
BlobClient -> private static void sendPutHeader( 			OutputStream outputStream, @Nullable JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1508138617;Constructs and writes the header data for a PUT request to the given output stream.__@param outputStream_the output stream to write the PUT header data to_@param jobId_the ID of job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param blobType_whether the BLOB should become permanent or transient__@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private static void sendPutHeader(_			OutputStream outputStream, @Nullable JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		_		outputStream.write(PUT_OPERATION)__		if (jobId == null) {_			outputStream.write(JOB_UNRELATED_CONTENT)__		} else {_			outputStream.write(JOB_RELATED_CONTENT)__			outputStream.write(jobId.getBytes())__		}_		outputStream.write(blobType.ordinal())__	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,static,void,send,put,header,output,stream,output,stream,nullable,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes,output,stream,write,blob,type,ordinal
BlobClient -> private static void sendPutHeader( 			OutputStream outputStream, @Nullable JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1515428991;Constructs and writes the header data for a PUT request to the given output stream.__@param outputStream_the output stream to write the PUT header data to_@param jobId_the ID of job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param blobType_whether the BLOB should become permanent or transient__@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private static void sendPutHeader(_			OutputStream outputStream, @Nullable JobID jobId, BlobKey.BlobType blobType)_			throws IOException {_		_		outputStream.write(PUT_OPERATION)__		if (jobId == null) {_			outputStream.write(JOB_UNRELATED_CONTENT)__		} else {_			outputStream.write(JOB_RELATED_CONTENT)__			outputStream.write(jobId.getBytes())__		}_		outputStream.write(blobType.ordinal())__	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,static,void,send,put,header,output,stream,output,stream,nullable,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes,output,stream,write,blob,type,ordinal
BlobClient -> public void delete(JobID jobId, String key) throws IOException;1424264340;Deletes the BLOB identified by the given job ID and key from the BLOB server.__@param jobId_the job ID to identify the BLOB_@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void delete(JobID jobId, String key) throws IOException {_		if (jobId == null) {_			throw new IllegalArgumentException("JobID must not be null")__		}_		if (key == null) {_			throw new IllegalArgumentException("Key must not be null")__		}_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		deleteInternal(jobId, key, null)__	};deletes,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,job,id,job,id,string,key,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,job,id,must,not,be,null,if,key,null,throw,new,illegal,argument,exception,key,must,not,be,null,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,delete,internal,job,id,key,null
BlobClient -> public void delete(JobID jobId, String key) throws IOException;1427784999;Deletes the BLOB identified by the given job ID and key from the BLOB server.__@param jobId_the job ID to identify the BLOB_@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void delete(JobID jobId, String key) throws IOException {_		if (jobId == null) {_			throw new IllegalArgumentException("JobID must not be null")__		}_		if (key == null) {_			throw new IllegalArgumentException("Key must not be null")__		}_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		deleteInternal(jobId, key, null)__	};deletes,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,job,id,job,id,string,key,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,job,id,must,not,be,null,if,key,null,throw,new,illegal,argument,exception,key,must,not,be,null,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,delete,internal,job,id,key,null
BlobClient -> public void delete(JobID jobId, String key) throws IOException;1468854249;Deletes the BLOB identified by the given job ID and key from the BLOB server.__@param jobId_the job ID to identify the BLOB_@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void delete(JobID jobId, String key) throws IOException {_		if (jobId == null) {_			throw new IllegalArgumentException("JobID must not be null")__		}_		if (key == null) {_			throw new IllegalArgumentException("Key must not be null")__		}_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		deleteInternal(jobId, key, null)__	};deletes,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,job,id,job,id,string,key,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,job,id,must,not,be,null,if,key,null,throw,new,illegal,argument,exception,key,must,not,be,null,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,delete,internal,job,id,key,null
BlobClient -> public void delete(JobID jobId, String key) throws IOException;1476696544;Deletes the BLOB identified by the given job ID and key from the BLOB server.__@param jobId_the job ID to identify the BLOB_@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void delete(JobID jobId, String key) throws IOException {_		if (jobId == null) {_			throw new IllegalArgumentException("JobID must not be null")__		}_		if (key == null) {_			throw new IllegalArgumentException("Key must not be null")__		}_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		deleteInternal(jobId, key, null)__	};deletes,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,job,id,job,id,string,key,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,job,id,must,not,be,null,if,key,null,throw,new,illegal,argument,exception,key,must,not,be,null,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,delete,internal,job,id,key,null
BlobClient -> public void delete(JobID jobId, String key) throws IOException;1487441974;Deletes the BLOB identified by the given job ID and key from the BLOB server.__@param jobId_the job ID to identify the BLOB_@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void delete(JobID jobId, String key) throws IOException {_		if (jobId == null) {_			throw new IllegalArgumentException("JobID must not be null")__		}_		if (key == null) {_			throw new IllegalArgumentException("Key must not be null")__		}_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		deleteInternal(jobId, key, null)__	};deletes,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,job,id,job,id,string,key,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,job,id,must,not,be,null,if,key,null,throw,new,illegal,argument,exception,key,must,not,be,null,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,delete,internal,job,id,key,null
BlobClient -> public void delete(JobID jobId, String key) throws IOException;1494690800;Deletes the BLOB identified by the given job ID and key from the BLOB server.__@param jobId_the job ID to identify the BLOB_@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void delete(JobID jobId, String key) throws IOException {_		if (jobId == null) {_			throw new IllegalArgumentException("JobID must not be null")__		}_		if (key == null) {_			throw new IllegalArgumentException("Key must not be null")__		}_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		deleteInternal(jobId, key, null)__	};deletes,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,job,id,job,id,string,key,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,job,id,must,not,be,null,if,key,null,throw,new,illegal,argument,exception,key,must,not,be,null,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,delete,internal,job,id,key,null
BlobClient -> public void delete(JobID jobId, String key) throws IOException;1495001945;Deletes the BLOB identified by the given job ID and key from the BLOB server.__@param jobId_the job ID to identify the BLOB_@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void delete(JobID jobId, String key) throws IOException {_		if (jobId == null) {_			throw new IllegalArgumentException("JobID must not be null")__		}_		if (key == null) {_			throw new IllegalArgumentException("Key must not be null")__		}_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		deleteInternal(jobId, key, null)__	};deletes,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,job,id,job,id,string,key,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,job,id,must,not,be,null,if,key,null,throw,new,illegal,argument,exception,key,must,not,be,null,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,delete,internal,job,id,key,null
BlobClient -> public void delete(JobID jobId, String key) throws IOException;1499173045;Deletes the BLOB identified by the given job ID and key from the BLOB server.__@param jobId_the job ID to identify the BLOB_@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void delete(JobID jobId, String key) throws IOException {_		checkArgument(jobId != null, "Job id must not be null.")__		checkArgument(key != null, "BLOB name must not be null.")__		_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		deleteInternal(jobId, key, null)__	};deletes,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,job,id,job,id,string,key,throws,ioexception,check,argument,job,id,null,job,id,must,not,be,null,check,argument,key,null,blob,name,must,not,be,null,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,delete,internal,job,id,key,null
BlobClient -> static void downloadFromBlobServer( 			@Nullable JobID jobId, 			BlobKey blobKey, 			File localJarFile, 			InetSocketAddress serverAddress, 			Configuration blobClientConfig, 			int numFetchRetries) throws IOException;1507212387;Downloads the given BLOB from the given server and stores its contents to a (local) file.__<p>Transient BLOB files are deleted after a successful copy of the server's data into the_given <tt>localJarFile</tt>.__@param jobId_job ID the BLOB belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key_@param localJarFile_the local file to write to_@param serverAddress_address of the server to download from_@param blobClientConfig_client configuration for the connection_@param numFetchRetries_number of retries before failing__@throws IOException_if an I/O error occurs during the download;static void downloadFromBlobServer(_			@Nullable JobID jobId,_			BlobKey blobKey,_			File localJarFile,_			InetSocketAddress serverAddress,_			Configuration blobClientConfig,_			int numFetchRetries) throws IOException {__		final byte[] buf = new byte[BUFFER_SIZE]__		LOG.info("Downloading {}/{} from {}", jobId, blobKey, serverAddress)___		_		int attempt = 0__		while (true) {_			try (_				final BlobClient bc = new BlobClient(serverAddress, blobClientConfig)__				final InputStream is = bc.getInternal(jobId, blobKey)__				final OutputStream os = new FileOutputStream(localJarFile)_			) {_				while (true) {_					final int read = is.read(buf)__					if (read < 0) {_						break__					}_					os.write(buf, 0, read)__				}__				return__			}_			catch (Throwable t) {_				String message = "Failed to fetch BLOB " + jobId + "/" + blobKey + " from " + serverAddress +_					" and store it under " + localJarFile.getAbsolutePath()__				if (attempt < numFetchRetries) {_					if (LOG.isDebugEnabled()) {_						LOG.error(message + " Retrying...", t)__					} else {_						LOG.error(message + " Retrying...")__					}_				}_				else {_					LOG.error(message + " No retries left.", t)__					throw new IOException(message, t)__				}__				_				++attempt__				LOG.info("Downloading {}/{} from {} (retry {})", jobId, blobKey, serverAddress, attempt)__			}_		} _	};downloads,the,given,blob,from,the,given,server,and,stores,its,contents,to,a,local,file,p,transient,blob,files,are,deleted,after,a,successful,copy,of,the,server,s,data,into,the,given,tt,local,jar,file,tt,param,job,id,job,id,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,param,local,jar,file,the,local,file,to,write,to,param,server,address,address,of,the,server,to,download,from,param,blob,client,config,client,configuration,for,the,connection,param,num,fetch,retries,number,of,retries,before,failing,throws,ioexception,if,an,i,o,error,occurs,during,the,download;static,void,download,from,blob,server,nullable,job,id,job,id,blob,key,blob,key,file,local,jar,file,inet,socket,address,server,address,configuration,blob,client,config,int,num,fetch,retries,throws,ioexception,final,byte,buf,new,byte,log,info,downloading,from,job,id,blob,key,server,address,int,attempt,0,while,true,try,final,blob,client,bc,new,blob,client,server,address,blob,client,config,final,input,stream,is,bc,get,internal,job,id,blob,key,final,output,stream,os,new,file,output,stream,local,jar,file,while,true,final,int,read,is,read,buf,if,read,0,break,os,write,buf,0,read,return,catch,throwable,t,string,message,failed,to,fetch,blob,job,id,blob,key,from,server,address,and,store,it,under,local,jar,file,get,absolute,path,if,attempt,num,fetch,retries,if,log,is,debug,enabled,log,error,message,retrying,t,else,log,error,message,retrying,else,log,error,message,no,retries,left,t,throw,new,ioexception,message,t,attempt,log,info,downloading,from,retry,job,id,blob,key,server,address,attempt
BlobClient -> static void downloadFromBlobServer( 			@Nullable JobID jobId, 			BlobKey blobKey, 			File localJarFile, 			InetSocketAddress serverAddress, 			Configuration blobClientConfig, 			int numFetchRetries) throws IOException;1508138617;Downloads the given BLOB from the given server and stores its contents to a (local) file.__<p>Transient BLOB files are deleted after a successful copy of the server's data into the_given <tt>localJarFile</tt>.__@param jobId_job ID the BLOB belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key_@param localJarFile_the local file to write to_@param serverAddress_address of the server to download from_@param blobClientConfig_client configuration for the connection_@param numFetchRetries_number of retries before failing__@throws IOException_if an I/O error occurs during the download;static void downloadFromBlobServer(_			@Nullable JobID jobId,_			BlobKey blobKey,_			File localJarFile,_			InetSocketAddress serverAddress,_			Configuration blobClientConfig,_			int numFetchRetries) throws IOException {__		final byte[] buf = new byte[BUFFER_SIZE]__		LOG.info("Downloading {}/{} from {}", jobId, blobKey, serverAddress)___		_		int attempt = 0__		while (true) {_			try (_				final BlobClient bc = new BlobClient(serverAddress, blobClientConfig)__				final InputStream is = bc.getInternal(jobId, blobKey)__				final OutputStream os = new FileOutputStream(localJarFile)_			) {_				while (true) {_					final int read = is.read(buf)__					if (read < 0) {_						break__					}_					os.write(buf, 0, read)__				}__				return__			}_			catch (Throwable t) {_				String message = "Failed to fetch BLOB " + jobId + "/" + blobKey + " from " + serverAddress +_					" and store it under " + localJarFile.getAbsolutePath()__				if (attempt < numFetchRetries) {_					if (LOG.isDebugEnabled()) {_						LOG.error(message + " Retrying...", t)__					} else {_						LOG.error(message + " Retrying...")__					}_				}_				else {_					LOG.error(message + " No retries left.", t)__					throw new IOException(message, t)__				}__				_				++attempt__				LOG.info("Downloading {}/{} from {} (retry {})", jobId, blobKey, serverAddress, attempt)__			}_		} _	};downloads,the,given,blob,from,the,given,server,and,stores,its,contents,to,a,local,file,p,transient,blob,files,are,deleted,after,a,successful,copy,of,the,server,s,data,into,the,given,tt,local,jar,file,tt,param,job,id,job,id,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,param,local,jar,file,the,local,file,to,write,to,param,server,address,address,of,the,server,to,download,from,param,blob,client,config,client,configuration,for,the,connection,param,num,fetch,retries,number,of,retries,before,failing,throws,ioexception,if,an,i,o,error,occurs,during,the,download;static,void,download,from,blob,server,nullable,job,id,job,id,blob,key,blob,key,file,local,jar,file,inet,socket,address,server,address,configuration,blob,client,config,int,num,fetch,retries,throws,ioexception,final,byte,buf,new,byte,log,info,downloading,from,job,id,blob,key,server,address,int,attempt,0,while,true,try,final,blob,client,bc,new,blob,client,server,address,blob,client,config,final,input,stream,is,bc,get,internal,job,id,blob,key,final,output,stream,os,new,file,output,stream,local,jar,file,while,true,final,int,read,is,read,buf,if,read,0,break,os,write,buf,0,read,return,catch,throwable,t,string,message,failed,to,fetch,blob,job,id,blob,key,from,server,address,and,store,it,under,local,jar,file,get,absolute,path,if,attempt,num,fetch,retries,if,log,is,debug,enabled,log,error,message,retrying,t,else,log,error,message,retrying,else,log,error,message,no,retries,left,t,throw,new,ioexception,message,t,attempt,log,info,downloading,from,retry,job,id,blob,key,server,address,attempt
BlobClient -> static void downloadFromBlobServer( 			@Nullable JobID jobId, 			BlobKey blobKey, 			File localJarFile, 			InetSocketAddress serverAddress, 			Configuration blobClientConfig, 			int numFetchRetries) throws IOException;1515428991;Downloads the given BLOB from the given server and stores its contents to a (local) file.__<p>Transient BLOB files are deleted after a successful copy of the server's data into the_given <tt>localJarFile</tt>.__@param jobId_job ID the BLOB belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key_@param localJarFile_the local file to write to_@param serverAddress_address of the server to download from_@param blobClientConfig_client configuration for the connection_@param numFetchRetries_number of retries before failing__@throws IOException_if an I/O error occurs during the download;static void downloadFromBlobServer(_			@Nullable JobID jobId,_			BlobKey blobKey,_			File localJarFile,_			InetSocketAddress serverAddress,_			Configuration blobClientConfig,_			int numFetchRetries) throws IOException {__		final byte[] buf = new byte[BUFFER_SIZE]__		LOG.info("Downloading {}/{} from {}", jobId, blobKey, serverAddress)___		_		int attempt = 0__		while (true) {_			try (_				final BlobClient bc = new BlobClient(serverAddress, blobClientConfig)__				final InputStream is = bc.getInternal(jobId, blobKey)__				final OutputStream os = new FileOutputStream(localJarFile)_			) {_				while (true) {_					final int read = is.read(buf)__					if (read < 0) {_						break__					}_					os.write(buf, 0, read)__				}__				return__			}_			catch (Throwable t) {_				String message = "Failed to fetch BLOB " + jobId + "/" + blobKey + " from " + serverAddress +_					" and store it under " + localJarFile.getAbsolutePath()__				if (attempt < numFetchRetries) {_					if (LOG.isDebugEnabled()) {_						LOG.error(message + " Retrying...", t)__					} else {_						LOG.error(message + " Retrying...")__					}_				}_				else {_					LOG.error(message + " No retries left.", t)__					throw new IOException(message, t)__				}__				_				++attempt__				LOG.info("Downloading {}/{} from {} (retry {})", jobId, blobKey, serverAddress, attempt)__			}_		} _	};downloads,the,given,blob,from,the,given,server,and,stores,its,contents,to,a,local,file,p,transient,blob,files,are,deleted,after,a,successful,copy,of,the,server,s,data,into,the,given,tt,local,jar,file,tt,param,job,id,job,id,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,param,local,jar,file,the,local,file,to,write,to,param,server,address,address,of,the,server,to,download,from,param,blob,client,config,client,configuration,for,the,connection,param,num,fetch,retries,number,of,retries,before,failing,throws,ioexception,if,an,i,o,error,occurs,during,the,download;static,void,download,from,blob,server,nullable,job,id,job,id,blob,key,blob,key,file,local,jar,file,inet,socket,address,server,address,configuration,blob,client,config,int,num,fetch,retries,throws,ioexception,final,byte,buf,new,byte,log,info,downloading,from,job,id,blob,key,server,address,int,attempt,0,while,true,try,final,blob,client,bc,new,blob,client,server,address,blob,client,config,final,input,stream,is,bc,get,internal,job,id,blob,key,final,output,stream,os,new,file,output,stream,local,jar,file,while,true,final,int,read,is,read,buf,if,read,0,break,os,write,buf,0,read,return,catch,throwable,t,string,message,failed,to,fetch,blob,job,id,blob,key,from,server,address,and,store,it,under,local,jar,file,get,absolute,path,if,attempt,num,fetch,retries,if,log,is,debug,enabled,log,error,message,retrying,t,else,log,error,message,retrying,else,log,error,message,no,retries,left,t,throw,new,ioexception,message,t,attempt,log,info,downloading,from,retry,job,id,blob,key,server,address,attempt
BlobClient -> static void downloadFromBlobServer( 			@Nullable JobID jobId, 			BlobKey blobKey, 			File localJarFile, 			InetSocketAddress serverAddress, 			Configuration blobClientConfig, 			int numFetchRetries) throws IOException;1525420604;Downloads the given BLOB from the given server and stores its contents to a (local) file.__<p>Transient BLOB files are deleted after a successful copy of the server's data into the_given <tt>localJarFile</tt>.__@param jobId_job ID the BLOB belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key_@param localJarFile_the local file to write to_@param serverAddress_address of the server to download from_@param blobClientConfig_client configuration for the connection_@param numFetchRetries_number of retries before failing__@throws IOException_if an I/O error occurs during the download;static void downloadFromBlobServer(_			@Nullable JobID jobId,_			BlobKey blobKey,_			File localJarFile,_			InetSocketAddress serverAddress,_			Configuration blobClientConfig,_			int numFetchRetries) throws IOException {__		final byte[] buf = new byte[BUFFER_SIZE]__		LOG.info("Downloading {}/{} from {}", jobId, blobKey, serverAddress)___		_		int attempt = 0__		while (true) {_			try (_				final BlobClient bc = new BlobClient(serverAddress, blobClientConfig)__				final InputStream is = bc.getInternal(jobId, blobKey)__				final OutputStream os = new FileOutputStream(localJarFile)_			) {_				while (true) {_					final int read = is.read(buf)__					if (read < 0) {_						break__					}_					os.write(buf, 0, read)__				}__				return__			}_			catch (Throwable t) {_				String message = "Failed to fetch BLOB " + jobId + "/" + blobKey + " from " + serverAddress +_					" and store it under " + localJarFile.getAbsolutePath()__				if (attempt < numFetchRetries) {_					if (LOG.isDebugEnabled()) {_						LOG.error(message + " Retrying...", t)__					} else {_						LOG.error(message + " Retrying...")__					}_				}_				else {_					LOG.error(message + " No retries left.", t)__					throw new IOException(message, t)__				}__				_				++attempt__				LOG.info("Downloading {}/{} from {} (retry {})", jobId, blobKey, serverAddress, attempt)__			}_		} _	};downloads,the,given,blob,from,the,given,server,and,stores,its,contents,to,a,local,file,p,transient,blob,files,are,deleted,after,a,successful,copy,of,the,server,s,data,into,the,given,tt,local,jar,file,tt,param,job,id,job,id,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,param,local,jar,file,the,local,file,to,write,to,param,server,address,address,of,the,server,to,download,from,param,blob,client,config,client,configuration,for,the,connection,param,num,fetch,retries,number,of,retries,before,failing,throws,ioexception,if,an,i,o,error,occurs,during,the,download;static,void,download,from,blob,server,nullable,job,id,job,id,blob,key,blob,key,file,local,jar,file,inet,socket,address,server,address,configuration,blob,client,config,int,num,fetch,retries,throws,ioexception,final,byte,buf,new,byte,log,info,downloading,from,job,id,blob,key,server,address,int,attempt,0,while,true,try,final,blob,client,bc,new,blob,client,server,address,blob,client,config,final,input,stream,is,bc,get,internal,job,id,blob,key,final,output,stream,os,new,file,output,stream,local,jar,file,while,true,final,int,read,is,read,buf,if,read,0,break,os,write,buf,0,read,return,catch,throwable,t,string,message,failed,to,fetch,blob,job,id,blob,key,from,server,address,and,store,it,under,local,jar,file,get,absolute,path,if,attempt,num,fetch,retries,if,log,is,debug,enabled,log,error,message,retrying,t,else,log,error,message,retrying,else,log,error,message,no,retries,left,t,throw,new,ioexception,message,t,attempt,log,info,downloading,from,retry,job,id,blob,key,server,address,attempt
BlobClient -> static void downloadFromBlobServer( 			@Nullable JobID jobId, 			BlobKey blobKey, 			File localJarFile, 			InetSocketAddress serverAddress, 			Configuration blobClientConfig, 			int numFetchRetries) throws IOException;1529583969;Downloads the given BLOB from the given server and stores its contents to a (local) file.__<p>Transient BLOB files are deleted after a successful copy of the server's data into the_given <tt>localJarFile</tt>.__@param jobId_job ID the BLOB belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key_@param localJarFile_the local file to write to_@param serverAddress_address of the server to download from_@param blobClientConfig_client configuration for the connection_@param numFetchRetries_number of retries before failing__@throws IOException_if an I/O error occurs during the download;static void downloadFromBlobServer(_			@Nullable JobID jobId,_			BlobKey blobKey,_			File localJarFile,_			InetSocketAddress serverAddress,_			Configuration blobClientConfig,_			int numFetchRetries) throws IOException {__		final byte[] buf = new byte[BUFFER_SIZE]__		LOG.info("Downloading {}/{} from {}", jobId, blobKey, serverAddress)___		_		int attempt = 0__		while (true) {_			try (_				final BlobClient bc = new BlobClient(serverAddress, blobClientConfig)__				final InputStream is = bc.getInternal(jobId, blobKey)__				final OutputStream os = new FileOutputStream(localJarFile)_			) {_				while (true) {_					final int read = is.read(buf)__					if (read < 0) {_						break__					}_					os.write(buf, 0, read)__				}__				return__			}_			catch (Throwable t) {_				String message = "Failed to fetch BLOB " + jobId + "/" + blobKey + " from " + serverAddress +_					" and store it under " + localJarFile.getAbsolutePath()__				if (attempt < numFetchRetries) {_					if (LOG.isDebugEnabled()) {_						LOG.error(message + " Retrying...", t)__					} else {_						LOG.error(message + " Retrying...")__					}_				}_				else {_					LOG.error(message + " No retries left.", t)__					throw new IOException(message, t)__				}__				_				++attempt__				LOG.info("Downloading {}/{} from {} (retry {})", jobId, blobKey, serverAddress, attempt)__			}_		} _	};downloads,the,given,blob,from,the,given,server,and,stores,its,contents,to,a,local,file,p,transient,blob,files,are,deleted,after,a,successful,copy,of,the,server,s,data,into,the,given,tt,local,jar,file,tt,param,job,id,job,id,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,param,local,jar,file,the,local,file,to,write,to,param,server,address,address,of,the,server,to,download,from,param,blob,client,config,client,configuration,for,the,connection,param,num,fetch,retries,number,of,retries,before,failing,throws,ioexception,if,an,i,o,error,occurs,during,the,download;static,void,download,from,blob,server,nullable,job,id,job,id,blob,key,blob,key,file,local,jar,file,inet,socket,address,server,address,configuration,blob,client,config,int,num,fetch,retries,throws,ioexception,final,byte,buf,new,byte,log,info,downloading,from,job,id,blob,key,server,address,int,attempt,0,while,true,try,final,blob,client,bc,new,blob,client,server,address,blob,client,config,final,input,stream,is,bc,get,internal,job,id,blob,key,final,output,stream,os,new,file,output,stream,local,jar,file,while,true,final,int,read,is,read,buf,if,read,0,break,os,write,buf,0,read,return,catch,throwable,t,string,message,failed,to,fetch,blob,job,id,blob,key,from,server,address,and,store,it,under,local,jar,file,get,absolute,path,if,attempt,num,fetch,retries,if,log,is,debug,enabled,log,error,message,retrying,t,else,log,error,message,retrying,else,log,error,message,no,retries,left,t,throw,new,ioexception,message,t,attempt,log,info,downloading,from,retry,job,id,blob,key,server,address,attempt
BlobClient -> static void downloadFromBlobServer( 			@Nullable JobID jobId, 			BlobKey blobKey, 			File localJarFile, 			InetSocketAddress serverAddress, 			Configuration blobClientConfig, 			int numFetchRetries) throws IOException;1531721446;Downloads the given BLOB from the given server and stores its contents to a (local) file.__<p>Transient BLOB files are deleted after a successful copy of the server's data into the_given <tt>localJarFile</tt>.__@param jobId_job ID the BLOB belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key_@param localJarFile_the local file to write to_@param serverAddress_address of the server to download from_@param blobClientConfig_client configuration for the connection_@param numFetchRetries_number of retries before failing__@throws IOException_if an I/O error occurs during the download;static void downloadFromBlobServer(_			@Nullable JobID jobId,_			BlobKey blobKey,_			File localJarFile,_			InetSocketAddress serverAddress,_			Configuration blobClientConfig,_			int numFetchRetries) throws IOException {__		final byte[] buf = new byte[BUFFER_SIZE]__		LOG.info("Downloading {}/{} from {}", jobId, blobKey, serverAddress)___		_		int attempt = 0__		while (true) {_			try (_				final BlobClient bc = new BlobClient(serverAddress, blobClientConfig)__				final InputStream is = bc.getInternal(jobId, blobKey)__				final OutputStream os = new FileOutputStream(localJarFile)_			) {_				while (true) {_					final int read = is.read(buf)__					if (read < 0) {_						break__					}_					os.write(buf, 0, read)__				}__				return__			}_			catch (Throwable t) {_				String message = "Failed to fetch BLOB " + jobId + "/" + blobKey + " from " + serverAddress +_					" and store it under " + localJarFile.getAbsolutePath()__				if (attempt < numFetchRetries) {_					if (LOG.isDebugEnabled()) {_						LOG.error(message + " Retrying...", t)__					} else {_						LOG.error(message + " Retrying...")__					}_				}_				else {_					LOG.error(message + " No retries left.", t)__					throw new IOException(message, t)__				}__				_				++attempt__				LOG.info("Downloading {}/{} from {} (retry {})", jobId, blobKey, serverAddress, attempt)__			}_		} _	};downloads,the,given,blob,from,the,given,server,and,stores,its,contents,to,a,local,file,p,transient,blob,files,are,deleted,after,a,successful,copy,of,the,server,s,data,into,the,given,tt,local,jar,file,tt,param,job,id,job,id,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,param,local,jar,file,the,local,file,to,write,to,param,server,address,address,of,the,server,to,download,from,param,blob,client,config,client,configuration,for,the,connection,param,num,fetch,retries,number,of,retries,before,failing,throws,ioexception,if,an,i,o,error,occurs,during,the,download;static,void,download,from,blob,server,nullable,job,id,job,id,blob,key,blob,key,file,local,jar,file,inet,socket,address,server,address,configuration,blob,client,config,int,num,fetch,retries,throws,ioexception,final,byte,buf,new,byte,log,info,downloading,from,job,id,blob,key,server,address,int,attempt,0,while,true,try,final,blob,client,bc,new,blob,client,server,address,blob,client,config,final,input,stream,is,bc,get,internal,job,id,blob,key,final,output,stream,os,new,file,output,stream,local,jar,file,while,true,final,int,read,is,read,buf,if,read,0,break,os,write,buf,0,read,return,catch,throwable,t,string,message,failed,to,fetch,blob,job,id,blob,key,from,server,address,and,store,it,under,local,jar,file,get,absolute,path,if,attempt,num,fetch,retries,if,log,is,debug,enabled,log,error,message,retrying,t,else,log,error,message,retrying,else,log,error,message,no,retries,left,t,throw,new,ioexception,message,t,attempt,log,info,downloading,from,retry,job,id,blob,key,server,address,attempt
BlobClient -> static void downloadFromBlobServer( 			@Nullable JobID jobId, 			BlobKey blobKey, 			File localJarFile, 			InetSocketAddress serverAddress, 			Configuration blobClientConfig, 			int numFetchRetries) throws IOException;1531721446;Downloads the given BLOB from the given server and stores its contents to a (local) file.__<p>Transient BLOB files are deleted after a successful copy of the server's data into the_given <tt>localJarFile</tt>.__@param jobId_job ID the BLOB belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key_@param localJarFile_the local file to write to_@param serverAddress_address of the server to download from_@param blobClientConfig_client configuration for the connection_@param numFetchRetries_number of retries before failing__@throws IOException_if an I/O error occurs during the download;static void downloadFromBlobServer(_			@Nullable JobID jobId,_			BlobKey blobKey,_			File localJarFile,_			InetSocketAddress serverAddress,_			Configuration blobClientConfig,_			int numFetchRetries) throws IOException {__		final byte[] buf = new byte[BUFFER_SIZE]__		LOG.info("Downloading {}/{} from {}", jobId, blobKey, serverAddress)___		_		int attempt = 0__		while (true) {_			try (_				final BlobClient bc = new BlobClient(serverAddress, blobClientConfig)__				final InputStream is = bc.getInternal(jobId, blobKey)__				final OutputStream os = new FileOutputStream(localJarFile)_			) {_				while (true) {_					final int read = is.read(buf)__					if (read < 0) {_						break__					}_					os.write(buf, 0, read)__				}__				return__			}_			catch (Throwable t) {_				String message = "Failed to fetch BLOB " + jobId + "/" + blobKey + " from " + serverAddress +_					" and store it under " + localJarFile.getAbsolutePath()__				if (attempt < numFetchRetries) {_					if (LOG.isDebugEnabled()) {_						LOG.error(message + " Retrying...", t)__					} else {_						LOG.error(message + " Retrying...")__					}_				}_				else {_					LOG.error(message + " No retries left.", t)__					throw new IOException(message, t)__				}__				_				++attempt__				LOG.info("Downloading {}/{} from {} (retry {})", jobId, blobKey, serverAddress, attempt)__			}_		} _	};downloads,the,given,blob,from,the,given,server,and,stores,its,contents,to,a,local,file,p,transient,blob,files,are,deleted,after,a,successful,copy,of,the,server,s,data,into,the,given,tt,local,jar,file,tt,param,job,id,job,id,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,param,local,jar,file,the,local,file,to,write,to,param,server,address,address,of,the,server,to,download,from,param,blob,client,config,client,configuration,for,the,connection,param,num,fetch,retries,number,of,retries,before,failing,throws,ioexception,if,an,i,o,error,occurs,during,the,download;static,void,download,from,blob,server,nullable,job,id,job,id,blob,key,blob,key,file,local,jar,file,inet,socket,address,server,address,configuration,blob,client,config,int,num,fetch,retries,throws,ioexception,final,byte,buf,new,byte,log,info,downloading,from,job,id,blob,key,server,address,int,attempt,0,while,true,try,final,blob,client,bc,new,blob,client,server,address,blob,client,config,final,input,stream,is,bc,get,internal,job,id,blob,key,final,output,stream,os,new,file,output,stream,local,jar,file,while,true,final,int,read,is,read,buf,if,read,0,break,os,write,buf,0,read,return,catch,throwable,t,string,message,failed,to,fetch,blob,job,id,blob,key,from,server,address,and,store,it,under,local,jar,file,get,absolute,path,if,attempt,num,fetch,retries,if,log,is,debug,enabled,log,error,message,retrying,t,else,log,error,message,retrying,else,log,error,message,no,retries,left,t,throw,new,ioexception,message,t,attempt,log,info,downloading,from,retry,job,id,blob,key,server,address,attempt
BlobClient -> public BlobKey put(final InputStream inputStream) throws IOException;1412605211;Uploads the data from the given input stream to the BLOB server in a content-addressable manner.__@param inputStream_the input stream to read the data from_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public BlobKey put(final InputStream inputStream) throws IOException {__		return putInputStream(null, null, inputStream)__	};uploads,the,data,from,the,given,input,stream,to,the,blob,server,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,blob,key,put,final,input,stream,input,stream,throws,ioexception,return,put,input,stream,null,null,input,stream
BlobClient -> public BlobKey put(final InputStream inputStream) throws IOException;1418925511;Uploads the data from the given input stream to the BLOB server in a content-addressable manner.__@param inputStream_the input stream to read the data from_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public BlobKey put(final InputStream inputStream) throws IOException {__		return putInputStream(null, null, inputStream)__	};uploads,the,data,from,the,given,input,stream,to,the,blob,server,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,blob,key,put,final,input,stream,input,stream,throws,ioexception,return,put,input,stream,null,null,input,stream
BlobClient -> public InputStream get(final JobID jobID, final String key) throws IOException;1412605211;Downloads the BLOB identified by the given job ID and key from the BLOB server. If no such BLOB exists on the_server, a {@link FileNotFoundException} is thrown.__@param jobID_the job ID identifying the BLOB to download_@param key_the key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(final JobID jobID, final String key) throws IOException {__		if (key.length() > BlobServer.MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + BlobServer.MAX_KEY_LENGTH)__		}__		final OutputStream os = this.socket.getOutputStream()__		final byte[] buf = new byte[AbstractID.SIZE]___		_		sendGetHeader(os, jobID, key, null, buf)___		return new BlobInputStream(this.socket.getInputStream(), null, buf)__	};downloads,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,job,id,the,job,id,identifying,the,blob,to,download,param,key,the,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,final,job,id,job,id,final,string,key,throws,ioexception,if,key,length,blob,server,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,blob,server,final,output,stream,os,this,socket,get,output,stream,final,byte,buf,new,byte,abstract,id,size,send,get,header,os,job,id,key,null,buf,return,new,blob,input,stream,this,socket,get,input,stream,null,buf
BlobClient -> public InputStream get(final JobID jobID, final String key) throws IOException;1418925511;Downloads the BLOB identified by the given job ID and key from the BLOB server. If no such BLOB exists on the_server, a {@link FileNotFoundException} is thrown.__@param jobID_the job ID identifying the BLOB to download_@param key_the key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(final JobID jobID, final String key) throws IOException {__		if (key.length() > BlobServer.MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + BlobServer.MAX_KEY_LENGTH)__		}__		final OutputStream os = this.socket.getOutputStream()__		final byte[] buf = new byte[AbstractID.SIZE]___		_		sendGetHeader(os, jobID, key, null, buf)___		return new BlobInputStream(this.socket.getInputStream(), null, buf)__	};downloads,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,job,id,the,job,id,identifying,the,blob,to,download,param,key,the,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,final,job,id,job,id,final,string,key,throws,ioexception,if,key,length,blob,server,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,blob,server,final,output,stream,os,this,socket,get,output,stream,final,byte,buf,new,byte,abstract,id,size,send,get,header,os,job,id,key,null,buf,return,new,blob,input,stream,this,socket,get,input,stream,null,buf
BlobClient -> private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException;1424264340;Delete one or multiple BLOBs from the BLOB server.__@param jobId The job ID to identify the BLOB(s) to be deleted._@param key The key to identify the specific BLOB to delete or <code>null</code> to delete_all BLOBs associated with the job id._@param bKey The blob key to identify a specific content addressable BLOB. This parameter_is exclusive with jobId and key._@throws IOException Thrown if an I/O error occurs while transferring the request to the BLOB server.;private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException {_		if ((jobId != null && bKey != null) || (jobId == null && bKey == null)) {_			throw new IllegalArgumentException()__		}__		try {_			final OutputStream outputStream = this.socket.getOutputStream()__			final InputStream inputStream = this.socket.getInputStream()___			_			outputStream.write(DELETE_OPERATION)___			_			if (jobId == null) {_				_				outputStream.write(CONTENT_ADDRESSABLE)__				bKey.writeToOutputStream(outputStream)__			}_			else if (key != null) {_				_				outputStream.write(NAME_ADDRESSABLE)__				_				byte[] idBytes = jobId.getBytes()__				byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__				outputStream.write(idBytes)__				writeLength(keyBytes.length, outputStream)__				outputStream.write(keyBytes)__			}_			else {_				_				outputStream.write(JOB_ID_SCOPE)__				byte[] idBytes = jobId.getBytes()__				outputStream.write(idBytes)__			}__			int response = inputStream.read()__			if (response < 0) {_				throw new EOFException("Premature end of response")__			}_			if (response == RETURN_ERROR) {_				Throwable cause = readExceptionFromStream(inputStream)__				throw new IOException("Server side error: " + cause.getMessage(), cause)__			}_			else if (response != RETURN_OKAY) {_				throw new IOException("Unrecognized response")__			}_		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("DELETE operation failed: " + t.getMessage(), t)__		}_	};delete,one,or,multiple,blobs,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,s,to,be,deleted,param,key,the,key,to,identify,the,specific,blob,to,delete,or,code,null,code,to,delete,all,blobs,associated,with,the,job,id,param,b,key,the,blob,key,to,identify,a,specific,content,addressable,blob,this,parameter,is,exclusive,with,job,id,and,key,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;private,void,delete,internal,job,id,job,id,string,key,blob,key,b,key,throws,ioexception,if,job,id,null,b,key,null,job,id,null,b,key,null,throw,new,illegal,argument,exception,try,final,output,stream,output,stream,this,socket,get,output,stream,final,input,stream,input,stream,this,socket,get,input,stream,output,stream,write,if,job,id,null,output,stream,write,b,key,write,to,output,stream,output,stream,else,if,key,null,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes,else,output,stream,write,byte,id,bytes,job,id,get,bytes,output,stream,write,id,bytes,int,response,input,stream,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,input,stream,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,delete,operation,failed,t,get,message,t
BlobClient -> private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException;1427784999;Delete one or multiple BLOBs from the BLOB server.__@param jobId The job ID to identify the BLOB(s) to be deleted._@param key The key to identify the specific BLOB to delete or <code>null</code> to delete_all BLOBs associated with the job id._@param bKey The blob key to identify a specific content addressable BLOB. This parameter_is exclusive with jobId and key._@throws IOException Thrown if an I/O error occurs while transferring the request to the BLOB server.;private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException {_		if ((jobId != null && bKey != null) || (jobId == null && bKey == null)) {_			throw new IllegalArgumentException()__		}__		try {_			final OutputStream outputStream = this.socket.getOutputStream()__			final InputStream inputStream = this.socket.getInputStream()___			_			outputStream.write(DELETE_OPERATION)___			_			if (jobId == null) {_				_				outputStream.write(CONTENT_ADDRESSABLE)__				bKey.writeToOutputStream(outputStream)__			}_			else if (key != null) {_				_				outputStream.write(NAME_ADDRESSABLE)__				_				byte[] idBytes = jobId.getBytes()__				byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__				outputStream.write(idBytes)__				writeLength(keyBytes.length, outputStream)__				outputStream.write(keyBytes)__			}_			else {_				_				outputStream.write(JOB_ID_SCOPE)__				byte[] idBytes = jobId.getBytes()__				outputStream.write(idBytes)__			}__			int response = inputStream.read()__			if (response < 0) {_				throw new EOFException("Premature end of response")__			}_			if (response == RETURN_ERROR) {_				Throwable cause = readExceptionFromStream(inputStream)__				throw new IOException("Server side error: " + cause.getMessage(), cause)__			}_			else if (response != RETURN_OKAY) {_				throw new IOException("Unrecognized response")__			}_		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("DELETE operation failed: " + t.getMessage(), t)__		}_	};delete,one,or,multiple,blobs,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,s,to,be,deleted,param,key,the,key,to,identify,the,specific,blob,to,delete,or,code,null,code,to,delete,all,blobs,associated,with,the,job,id,param,b,key,the,blob,key,to,identify,a,specific,content,addressable,blob,this,parameter,is,exclusive,with,job,id,and,key,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;private,void,delete,internal,job,id,job,id,string,key,blob,key,b,key,throws,ioexception,if,job,id,null,b,key,null,job,id,null,b,key,null,throw,new,illegal,argument,exception,try,final,output,stream,output,stream,this,socket,get,output,stream,final,input,stream,input,stream,this,socket,get,input,stream,output,stream,write,if,job,id,null,output,stream,write,b,key,write,to,output,stream,output,stream,else,if,key,null,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes,else,output,stream,write,byte,id,bytes,job,id,get,bytes,output,stream,write,id,bytes,int,response,input,stream,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,input,stream,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,delete,operation,failed,t,get,message,t
BlobClient -> private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException;1468854249;Delete one or multiple BLOBs from the BLOB server.__@param jobId The job ID to identify the BLOB(s) to be deleted._@param key The key to identify the specific BLOB to delete or <code>null</code> to delete_all BLOBs associated with the job id._@param bKey The blob key to identify a specific content addressable BLOB. This parameter_is exclusive with jobId and key._@throws IOException Thrown if an I/O error occurs while transferring the request to the BLOB server.;private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException {_		if ((jobId != null && bKey != null) || (jobId == null && bKey == null)) {_			throw new IllegalArgumentException()__		}__		try {_			final OutputStream outputStream = this.socket.getOutputStream()__			final InputStream inputStream = this.socket.getInputStream()___			_			outputStream.write(DELETE_OPERATION)___			_			if (jobId == null) {_				_				outputStream.write(CONTENT_ADDRESSABLE)__				bKey.writeToOutputStream(outputStream)__			}_			else if (key != null) {_				_				outputStream.write(NAME_ADDRESSABLE)__				_				byte[] idBytes = jobId.getBytes()__				byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__				outputStream.write(idBytes)__				writeLength(keyBytes.length, outputStream)__				outputStream.write(keyBytes)__			}_			else {_				_				outputStream.write(JOB_ID_SCOPE)__				byte[] idBytes = jobId.getBytes()__				outputStream.write(idBytes)__			}__			int response = inputStream.read()__			if (response < 0) {_				throw new EOFException("Premature end of response")__			}_			if (response == RETURN_ERROR) {_				Throwable cause = readExceptionFromStream(inputStream)__				throw new IOException("Server side error: " + cause.getMessage(), cause)__			}_			else if (response != RETURN_OKAY) {_				throw new IOException("Unrecognized response")__			}_		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("DELETE operation failed: " + t.getMessage(), t)__		}_	};delete,one,or,multiple,blobs,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,s,to,be,deleted,param,key,the,key,to,identify,the,specific,blob,to,delete,or,code,null,code,to,delete,all,blobs,associated,with,the,job,id,param,b,key,the,blob,key,to,identify,a,specific,content,addressable,blob,this,parameter,is,exclusive,with,job,id,and,key,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;private,void,delete,internal,job,id,job,id,string,key,blob,key,b,key,throws,ioexception,if,job,id,null,b,key,null,job,id,null,b,key,null,throw,new,illegal,argument,exception,try,final,output,stream,output,stream,this,socket,get,output,stream,final,input,stream,input,stream,this,socket,get,input,stream,output,stream,write,if,job,id,null,output,stream,write,b,key,write,to,output,stream,output,stream,else,if,key,null,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes,else,output,stream,write,byte,id,bytes,job,id,get,bytes,output,stream,write,id,bytes,int,response,input,stream,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,input,stream,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,delete,operation,failed,t,get,message,t
BlobClient -> private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException;1476696544;Delete one or multiple BLOBs from the BLOB server.__@param jobId The job ID to identify the BLOB(s) to be deleted._@param key The key to identify the specific BLOB to delete or <code>null</code> to delete_all BLOBs associated with the job id._@param bKey The blob key to identify a specific content addressable BLOB. This parameter_is exclusive with jobId and key._@throws IOException Thrown if an I/O error occurs while transferring the request to the BLOB server.;private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException {_		if ((jobId != null && bKey != null) || (jobId == null && bKey == null)) {_			throw new IllegalArgumentException()__		}__		try {_			final OutputStream outputStream = this.socket.getOutputStream()__			final InputStream inputStream = this.socket.getInputStream()___			_			outputStream.write(DELETE_OPERATION)___			_			if (jobId == null) {_				_				outputStream.write(CONTENT_ADDRESSABLE)__				bKey.writeToOutputStream(outputStream)__			}_			else if (key != null) {_				_				outputStream.write(NAME_ADDRESSABLE)__				_				byte[] idBytes = jobId.getBytes()__				byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__				outputStream.write(idBytes)__				writeLength(keyBytes.length, outputStream)__				outputStream.write(keyBytes)__			}_			else {_				_				outputStream.write(JOB_ID_SCOPE)__				byte[] idBytes = jobId.getBytes()__				outputStream.write(idBytes)__			}__			int response = inputStream.read()__			if (response < 0) {_				throw new EOFException("Premature end of response")__			}_			if (response == RETURN_ERROR) {_				Throwable cause = readExceptionFromStream(inputStream)__				throw new IOException("Server side error: " + cause.getMessage(), cause)__			}_			else if (response != RETURN_OKAY) {_				throw new IOException("Unrecognized response")__			}_		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("DELETE operation failed: " + t.getMessage(), t)__		}_	};delete,one,or,multiple,blobs,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,s,to,be,deleted,param,key,the,key,to,identify,the,specific,blob,to,delete,or,code,null,code,to,delete,all,blobs,associated,with,the,job,id,param,b,key,the,blob,key,to,identify,a,specific,content,addressable,blob,this,parameter,is,exclusive,with,job,id,and,key,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;private,void,delete,internal,job,id,job,id,string,key,blob,key,b,key,throws,ioexception,if,job,id,null,b,key,null,job,id,null,b,key,null,throw,new,illegal,argument,exception,try,final,output,stream,output,stream,this,socket,get,output,stream,final,input,stream,input,stream,this,socket,get,input,stream,output,stream,write,if,job,id,null,output,stream,write,b,key,write,to,output,stream,output,stream,else,if,key,null,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes,else,output,stream,write,byte,id,bytes,job,id,get,bytes,output,stream,write,id,bytes,int,response,input,stream,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,input,stream,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,delete,operation,failed,t,get,message,t
BlobClient -> private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException;1487441974;Delete one or multiple BLOBs from the BLOB server.__@param jobId The job ID to identify the BLOB(s) to be deleted._@param key The key to identify the specific BLOB to delete or <code>null</code> to delete_all BLOBs associated with the job id._@param bKey The blob key to identify a specific content addressable BLOB. This parameter_is exclusive with jobId and key._@throws IOException Thrown if an I/O error occurs while transferring the request to the BLOB server.;private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException {_		if ((jobId != null && bKey != null) || (jobId == null && bKey == null)) {_			throw new IllegalArgumentException()__		}__		try {_			final OutputStream outputStream = this.socket.getOutputStream()__			final InputStream inputStream = this.socket.getInputStream()___			_			outputStream.write(DELETE_OPERATION)___			_			if (jobId == null) {_				_				outputStream.write(CONTENT_ADDRESSABLE)__				bKey.writeToOutputStream(outputStream)__			}_			else if (key != null) {_				_				outputStream.write(NAME_ADDRESSABLE)__				_				byte[] idBytes = jobId.getBytes()__				byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__				outputStream.write(idBytes)__				writeLength(keyBytes.length, outputStream)__				outputStream.write(keyBytes)__			}_			else {_				_				outputStream.write(JOB_ID_SCOPE)__				byte[] idBytes = jobId.getBytes()__				outputStream.write(idBytes)__			}__			int response = inputStream.read()__			if (response < 0) {_				throw new EOFException("Premature end of response")__			}_			if (response == RETURN_ERROR) {_				Throwable cause = readExceptionFromStream(inputStream)__				throw new IOException("Server side error: " + cause.getMessage(), cause)__			}_			else if (response != RETURN_OKAY) {_				throw new IOException("Unrecognized response")__			}_		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("DELETE operation failed: " + t.getMessage(), t)__		}_	};delete,one,or,multiple,blobs,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,s,to,be,deleted,param,key,the,key,to,identify,the,specific,blob,to,delete,or,code,null,code,to,delete,all,blobs,associated,with,the,job,id,param,b,key,the,blob,key,to,identify,a,specific,content,addressable,blob,this,parameter,is,exclusive,with,job,id,and,key,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;private,void,delete,internal,job,id,job,id,string,key,blob,key,b,key,throws,ioexception,if,job,id,null,b,key,null,job,id,null,b,key,null,throw,new,illegal,argument,exception,try,final,output,stream,output,stream,this,socket,get,output,stream,final,input,stream,input,stream,this,socket,get,input,stream,output,stream,write,if,job,id,null,output,stream,write,b,key,write,to,output,stream,output,stream,else,if,key,null,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes,else,output,stream,write,byte,id,bytes,job,id,get,bytes,output,stream,write,id,bytes,int,response,input,stream,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,input,stream,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,delete,operation,failed,t,get,message,t
BlobClient -> private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException;1494690800;Delete one or multiple BLOBs from the BLOB server.__@param jobId The job ID to identify the BLOB(s) to be deleted._@param key The key to identify the specific BLOB to delete or <code>null</code> to delete_all BLOBs associated with the job id._@param bKey The blob key to identify a specific content addressable BLOB. This parameter_is exclusive with jobId and key._@throws IOException Thrown if an I/O error occurs while transferring the request to the BLOB server.;private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException {_		if ((jobId != null && bKey != null) || (jobId == null && bKey == null)) {_			throw new IllegalArgumentException()__		}__		try {_			final OutputStream outputStream = this.socket.getOutputStream()__			final InputStream inputStream = this.socket.getInputStream()___			_			outputStream.write(DELETE_OPERATION)___			_			if (jobId == null) {_				_				outputStream.write(CONTENT_ADDRESSABLE)__				bKey.writeToOutputStream(outputStream)__			}_			else if (key != null) {_				_				outputStream.write(NAME_ADDRESSABLE)__				_				byte[] idBytes = jobId.getBytes()__				byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__				outputStream.write(idBytes)__				writeLength(keyBytes.length, outputStream)__				outputStream.write(keyBytes)__			}_			else {_				_				outputStream.write(JOB_ID_SCOPE)__				byte[] idBytes = jobId.getBytes()__				outputStream.write(idBytes)__			}__			int response = inputStream.read()__			if (response < 0) {_				throw new EOFException("Premature end of response")__			}_			if (response == RETURN_ERROR) {_				Throwable cause = readExceptionFromStream(inputStream)__				throw new IOException("Server side error: " + cause.getMessage(), cause)__			}_			else if (response != RETURN_OKAY) {_				throw new IOException("Unrecognized response")__			}_		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("DELETE operation failed: " + t.getMessage(), t)__		}_	};delete,one,or,multiple,blobs,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,s,to,be,deleted,param,key,the,key,to,identify,the,specific,blob,to,delete,or,code,null,code,to,delete,all,blobs,associated,with,the,job,id,param,b,key,the,blob,key,to,identify,a,specific,content,addressable,blob,this,parameter,is,exclusive,with,job,id,and,key,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;private,void,delete,internal,job,id,job,id,string,key,blob,key,b,key,throws,ioexception,if,job,id,null,b,key,null,job,id,null,b,key,null,throw,new,illegal,argument,exception,try,final,output,stream,output,stream,this,socket,get,output,stream,final,input,stream,input,stream,this,socket,get,input,stream,output,stream,write,if,job,id,null,output,stream,write,b,key,write,to,output,stream,output,stream,else,if,key,null,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes,else,output,stream,write,byte,id,bytes,job,id,get,bytes,output,stream,write,id,bytes,int,response,input,stream,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,input,stream,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,delete,operation,failed,t,get,message,t
BlobClient -> private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException;1495001945;Delete one or multiple BLOBs from the BLOB server.__@param jobId The job ID to identify the BLOB(s) to be deleted._@param key The key to identify the specific BLOB to delete or <code>null</code> to delete_all BLOBs associated with the job id._@param bKey The blob key to identify a specific content addressable BLOB. This parameter_is exclusive with jobId and key._@throws IOException Thrown if an I/O error occurs while transferring the request to the BLOB server.;private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException {_		if ((jobId != null && bKey != null) || (jobId == null && bKey == null)) {_			throw new IllegalArgumentException()__		}__		try {_			final OutputStream outputStream = this.socket.getOutputStream()__			final InputStream inputStream = this.socket.getInputStream()___			_			outputStream.write(DELETE_OPERATION)___			_			if (jobId == null) {_				_				outputStream.write(CONTENT_ADDRESSABLE)__				bKey.writeToOutputStream(outputStream)__			}_			else if (key != null) {_				_				outputStream.write(NAME_ADDRESSABLE)__				_				byte[] idBytes = jobId.getBytes()__				byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__				outputStream.write(idBytes)__				writeLength(keyBytes.length, outputStream)__				outputStream.write(keyBytes)__			}_			else {_				_				outputStream.write(JOB_ID_SCOPE)__				byte[] idBytes = jobId.getBytes()__				outputStream.write(idBytes)__			}__			int response = inputStream.read()__			if (response < 0) {_				throw new EOFException("Premature end of response")__			}_			if (response == RETURN_ERROR) {_				Throwable cause = readExceptionFromStream(inputStream)__				throw new IOException("Server side error: " + cause.getMessage(), cause)__			}_			else if (response != RETURN_OKAY) {_				throw new IOException("Unrecognized response")__			}_		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("DELETE operation failed: " + t.getMessage(), t)__		}_	};delete,one,or,multiple,blobs,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,s,to,be,deleted,param,key,the,key,to,identify,the,specific,blob,to,delete,or,code,null,code,to,delete,all,blobs,associated,with,the,job,id,param,b,key,the,blob,key,to,identify,a,specific,content,addressable,blob,this,parameter,is,exclusive,with,job,id,and,key,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;private,void,delete,internal,job,id,job,id,string,key,blob,key,b,key,throws,ioexception,if,job,id,null,b,key,null,job,id,null,b,key,null,throw,new,illegal,argument,exception,try,final,output,stream,output,stream,this,socket,get,output,stream,final,input,stream,input,stream,this,socket,get,input,stream,output,stream,write,if,job,id,null,output,stream,write,b,key,write,to,output,stream,output,stream,else,if,key,null,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes,else,output,stream,write,byte,id,bytes,job,id,get,bytes,output,stream,write,id,bytes,int,response,input,stream,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,input,stream,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,delete,operation,failed,t,get,message,t
BlobClient -> private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException;1499173045;Delete one or multiple BLOBs from the BLOB server.__@param jobId The job ID to identify the BLOB(s) to be deleted._@param key The key to identify the specific BLOB to delete or <code>null</code> to delete_all BLOBs associated with the job id._@param bKey The blob key to identify a specific content addressable BLOB. This parameter_is exclusive with jobId and key._@throws IOException Thrown if an I/O error occurs while transferring the request to the BLOB server.;private void deleteInternal(JobID jobId, String key, BlobKey bKey) throws IOException {_		if ((jobId != null && bKey != null) || (jobId == null && bKey == null)) {_			throw new IllegalArgumentException()__		}__		try {_			final OutputStream outputStream = this.socket.getOutputStream()__			final InputStream inputStream = this.socket.getInputStream()___			_			outputStream.write(DELETE_OPERATION)___			_			if (jobId == null) {_				_				outputStream.write(CONTENT_ADDRESSABLE)__				bKey.writeToOutputStream(outputStream)__			}_			else if (key != null) {_				_				outputStream.write(NAME_ADDRESSABLE)__				_				byte[] idBytes = jobId.getBytes()__				byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__				outputStream.write(idBytes)__				writeLength(keyBytes.length, outputStream)__				outputStream.write(keyBytes)__			}_			else {_				_				outputStream.write(JOB_ID_SCOPE)__				byte[] idBytes = jobId.getBytes()__				outputStream.write(idBytes)__			}__			int response = inputStream.read()__			if (response < 0) {_				throw new EOFException("Premature end of response")__			}_			if (response == RETURN_ERROR) {_				Throwable cause = readExceptionFromStream(inputStream)__				throw new IOException("Server side error: " + cause.getMessage(), cause)__			}_			else if (response != RETURN_OKAY) {_				throw new IOException("Unrecognized response")__			}_		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("DELETE operation failed: " + t.getMessage(), t)__		}_	};delete,one,or,multiple,blobs,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,s,to,be,deleted,param,key,the,key,to,identify,the,specific,blob,to,delete,or,code,null,code,to,delete,all,blobs,associated,with,the,job,id,param,b,key,the,blob,key,to,identify,a,specific,content,addressable,blob,this,parameter,is,exclusive,with,job,id,and,key,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;private,void,delete,internal,job,id,job,id,string,key,blob,key,b,key,throws,ioexception,if,job,id,null,b,key,null,job,id,null,b,key,null,throw,new,illegal,argument,exception,try,final,output,stream,output,stream,this,socket,get,output,stream,final,input,stream,input,stream,this,socket,get,input,stream,output,stream,write,if,job,id,null,output,stream,write,b,key,write,to,output,stream,output,stream,else,if,key,null,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes,else,output,stream,write,byte,id,bytes,job,id,get,bytes,output,stream,write,id,bytes,int,response,input,stream,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,input,stream,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,delete,operation,failed,t,get,message,t
BlobClient -> BlobKey putBuffer( 			@Nullable JobID jobId, byte[] value, int offset, int len, BlobKey.BlobType blobType) 			throws IOException;1507212387;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@param blobType_whether the BLOB should become permanent or transient__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;BlobKey putBuffer(_			@Nullable JobID jobId, byte[] value, int offset, int len, BlobKey.BlobType blobType)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(value)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB buffer (" + len + " bytes) to " + socket.getLocalSocketAddress() + ".")__		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = BlobUtils.createMessageDigest()___			_			sendPutHeader(os, jobId, blobType)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				_				_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				md.update(value, offset, bytesToSend)___				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receiveAndCheckPutResponse(is, md, blobType)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;blob,key,put,buffer,nullable,job,id,job,id,byte,value,int,offset,int,len,blob,key,blob,type,blob,type,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,value,if,log,is,debug,enabled,log,debug,put,blob,buffer,len,bytes,to,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,blob,utils,create,message,digest,send,put,header,os,job,id,blob,type,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,and,check,put,response,is,md,blob,type,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> BlobKey putBuffer( 			@Nullable JobID jobId, byte[] value, int offset, int len, BlobKey.BlobType blobType) 			throws IOException;1508138617;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@param blobType_whether the BLOB should become permanent or transient__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;BlobKey putBuffer(_			@Nullable JobID jobId, byte[] value, int offset, int len, BlobKey.BlobType blobType)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(value)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB buffer (" + len + " bytes) to " + socket.getLocalSocketAddress() + ".")__		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = BlobUtils.createMessageDigest()___			_			sendPutHeader(os, jobId, blobType)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				_				_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				md.update(value, offset, bytesToSend)___				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receiveAndCheckPutResponse(is, md, blobType)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;blob,key,put,buffer,nullable,job,id,job,id,byte,value,int,offset,int,len,blob,key,blob,type,blob,type,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,value,if,log,is,debug,enabled,log,debug,put,blob,buffer,len,bytes,to,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,blob,utils,create,message,digest,send,put,header,os,job,id,blob,type,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,and,check,put,response,is,md,blob,type,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> BlobKey putBuffer( 			@Nullable JobID jobId, byte[] value, int offset, int len, BlobKey.BlobType blobType) 			throws IOException;1515428991;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@param blobType_whether the BLOB should become permanent or transient__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;BlobKey putBuffer(_			@Nullable JobID jobId, byte[] value, int offset, int len, BlobKey.BlobType blobType)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(value)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB buffer (" + len + " bytes) to " + socket.getLocalSocketAddress() + ".")__		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = BlobUtils.createMessageDigest()___			_			sendPutHeader(os, jobId, blobType)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				_				_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				md.update(value, offset, bytesToSend)___				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receiveAndCheckPutResponse(is, md, blobType)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;blob,key,put,buffer,nullable,job,id,job,id,byte,value,int,offset,int,len,blob,key,blob,type,blob,type,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,value,if,log,is,debug,enabled,log,debug,put,blob,buffer,len,bytes,to,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,blob,utils,create,message,digest,send,put,header,os,job,id,blob,type,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,and,check,put,response,is,md,blob,type,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> BlobKey putBuffer( 			@Nullable JobID jobId, byte[] value, int offset, int len, BlobKey.BlobType blobType) 			throws IOException;1525420604;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@param blobType_whether the BLOB should become permanent or transient__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;BlobKey putBuffer(_			@Nullable JobID jobId, byte[] value, int offset, int len, BlobKey.BlobType blobType)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(value)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB buffer (" + len + " bytes) to " + socket.getLocalSocketAddress() + ".")__		}__		try (BlobOutputStream os = new BlobOutputStream(jobId, blobType, socket)) {_			os.write(value, offset, len)__			_			return os.finish()__		} catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;blob,key,put,buffer,nullable,job,id,job,id,byte,value,int,offset,int,len,blob,key,blob,type,blob,type,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,value,if,log,is,debug,enabled,log,debug,put,blob,buffer,len,bytes,to,socket,get,local,socket,address,try,blob,output,stream,os,new,blob,output,stream,job,id,blob,type,socket,os,write,value,offset,len,return,os,finish,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> BlobKey putBuffer( 			@Nullable JobID jobId, byte[] value, int offset, int len, BlobKey.BlobType blobType) 			throws IOException;1529583969;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@param blobType_whether the BLOB should become permanent or transient__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;BlobKey putBuffer(_			@Nullable JobID jobId, byte[] value, int offset, int len, BlobKey.BlobType blobType)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(value)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB buffer (" + len + " bytes) to " + socket.getLocalSocketAddress() + ".")__		}__		try (BlobOutputStream os = new BlobOutputStream(jobId, blobType, socket)) {_			os.write(value, offset, len)__			_			return os.finish()__		} catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;blob,key,put,buffer,nullable,job,id,job,id,byte,value,int,offset,int,len,blob,key,blob,type,blob,type,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,value,if,log,is,debug,enabled,log,debug,put,blob,buffer,len,bytes,to,socket,get,local,socket,address,try,blob,output,stream,os,new,blob,output,stream,job,id,blob,type,socket,os,write,value,offset,len,return,os,finish,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> BlobKey putBuffer( 			@Nullable JobID jobId, byte[] value, int offset, int len, BlobKey.BlobType blobType) 			throws IOException;1531721446;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@param blobType_whether the BLOB should become permanent or transient__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;BlobKey putBuffer(_			@Nullable JobID jobId, byte[] value, int offset, int len, BlobKey.BlobType blobType)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(value)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB buffer (" + len + " bytes) to " + socket.getLocalSocketAddress() + ".")__		}__		try (BlobOutputStream os = new BlobOutputStream(jobId, blobType, socket)) {_			os.write(value, offset, len)__			_			return os.finish()__		} catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;blob,key,put,buffer,nullable,job,id,job,id,byte,value,int,offset,int,len,blob,key,blob,type,blob,type,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,value,if,log,is,debug,enabled,log,debug,put,blob,buffer,len,bytes,to,socket,get,local,socket,address,try,blob,output,stream,os,new,blob,output,stream,job,id,blob,type,socket,os,write,value,offset,len,return,os,finish,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> BlobKey putBuffer( 			@Nullable JobID jobId, byte[] value, int offset, int len, BlobKey.BlobType blobType) 			throws IOException;1531721446;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@param blobType_whether the BLOB should become permanent or transient__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;BlobKey putBuffer(_			@Nullable JobID jobId, byte[] value, int offset, int len, BlobKey.BlobType blobType)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(value)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB buffer (" + len + " bytes) to " + socket.getLocalSocketAddress() + ".")__		}__		try (BlobOutputStream os = new BlobOutputStream(jobId, blobType, socket)) {_			os.write(value, offset, len)__			_			return os.finish()__		} catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;blob,key,put,buffer,nullable,job,id,job,id,byte,value,int,offset,int,len,blob,key,blob,type,blob,type,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,value,if,log,is,debug,enabled,log,debug,put,blob,buffer,len,bytes,to,socket,get,local,socket,address,try,blob,output,stream,os,new,blob,output,stream,job,id,blob,type,socket,os,write,value,offset,len,return,os,finish,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> public void put(final JobID jobId, final String key, final InputStream inputStream) throws IOException;1412605211;Uploads data from the given input stream to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param inputStream_the input stream to read the data from_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public void put(final JobID jobId, final String key, final InputStream inputStream) throws IOException {__		if (key.length() > BlobServer.MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + BlobServer.MAX_KEY_LENGTH)__		}__		putInputStream(jobId, key, inputStream)__	};uploads,data,from,the,given,input,stream,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,input,stream,the,input,stream,to,read,the,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,void,put,final,job,id,job,id,final,string,key,final,input,stream,input,stream,throws,ioexception,if,key,length,blob,server,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,blob,server,put,input,stream,job,id,key,input,stream
BlobClient -> public void put(final JobID jobId, final String key, final InputStream inputStream) throws IOException;1418925511;Uploads data from the given input stream to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param inputStream_the input stream to read the data from_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public void put(final JobID jobId, final String key, final InputStream inputStream) throws IOException {__		if (key.length() > BlobServer.MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + BlobServer.MAX_KEY_LENGTH)__		}__		putInputStream(jobId, key, inputStream)__	};uploads,data,from,the,given,input,stream,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,input,stream,the,input,stream,to,read,the,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,void,put,final,job,id,job,id,final,string,key,final,input,stream,input,stream,throws,ioexception,if,key,length,blob,server,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,blob,server,put,input,stream,job,id,key,input,stream
BlobClient -> private BlobKey putInputStream(final JobID jobId, final String key, final InputStream inputStream) 			throws IOException;1412605211;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param inputStream_the input stream to read the data from_@return he computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putInputStream(final JobID jobId, final String key, final InputStream inputStream)_			throws IOException {__		final OutputStream os = this.socket.getOutputStream()__		final MessageDigest md = (jobId == null || key == null) ? BlobUtils.createMessageDigest_				() : null__		final byte[] buf = new byte[AbstractID.SIZE]__		final byte[] xferBuf = new byte[BlobServer.BUFFER_SIZE]___		_		sendPutHeader(os, jobId, key, buf)___		while (true) {__			final int read = inputStream.read(xferBuf)__			if (read < 0) {_				break__			}_			if (read > 0) {_				BlobServer.writeLength(read, buf, os)__				os.write(xferBuf, 0, read)__				if (md != null) {_					md.update(xferBuf, 0, read)__				}_			}_		}__		if (md == null) {_			return null__		}__		_		final InputStream is = this.socket.getInputStream()__		final BlobKey localKey = new BlobKey(md.digest())__		final BlobKey remoteKey = BlobKey.readFromInputStream(is)___		if (!localKey.equals(remoteKey)) {_			throw new IOException("Detected data corruption during transfer")__		}__		return localKey__	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,he,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,input,stream,final,job,id,job,id,final,string,key,final,input,stream,input,stream,throws,ioexception,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,key,null,blob,utils,create,message,digest,null,final,byte,buf,new,byte,abstract,id,size,final,byte,xfer,buf,new,byte,blob,server,send,put,header,os,job,id,key,buf,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,break,if,read,0,blob,server,write,length,read,buf,os,os,write,xfer,buf,0,read,if,md,null,md,update,xfer,buf,0,read,if,md,null,return,null,final,input,stream,is,this,socket,get,input,stream,final,blob,key,local,key,new,blob,key,md,digest,final,blob,key,remote,key,blob,key,read,from,input,stream,is,if,local,key,equals,remote,key,throw,new,ioexception,detected,data,corruption,during,transfer,return,local,key
BlobClient -> private BlobKey putInputStream(final JobID jobId, final String key, final InputStream inputStream) 			throws IOException;1418925511;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param inputStream_the input stream to read the data from_@return he computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putInputStream(final JobID jobId, final String key, final InputStream inputStream)_			throws IOException {__		final OutputStream os = this.socket.getOutputStream()__		final MessageDigest md = (jobId == null || key == null) ? BlobUtils.createMessageDigest_				() : null__		final byte[] buf = new byte[AbstractID.SIZE]__		final byte[] xferBuf = new byte[BlobServer.BUFFER_SIZE]___		_		sendPutHeader(os, jobId, key, buf)___		while (true) {__			final int read = inputStream.read(xferBuf)__			if (read < 0) {_				break__			}_			if (read > 0) {_				BlobServer.writeLength(read, buf, os)__				os.write(xferBuf, 0, read)__				if (md != null) {_					md.update(xferBuf, 0, read)__				}_			}_		}__		if (md == null) {_			return null__		}__		_		final InputStream is = this.socket.getInputStream()__		final BlobKey localKey = new BlobKey(md.digest())__		final BlobKey remoteKey = BlobKey.readFromInputStream(is)___		if (!localKey.equals(remoteKey)) {_			throw new IOException("Detected data corruption during transfer")__		}__		return localKey__	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,he,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,input,stream,final,job,id,job,id,final,string,key,final,input,stream,input,stream,throws,ioexception,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,key,null,blob,utils,create,message,digest,null,final,byte,buf,new,byte,abstract,id,size,final,byte,xfer,buf,new,byte,blob,server,send,put,header,os,job,id,key,buf,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,break,if,read,0,blob,server,write,length,read,buf,os,os,write,xfer,buf,0,read,if,md,null,md,update,xfer,buf,0,read,if,md,null,return,null,final,input,stream,is,this,socket,get,input,stream,final,blob,key,local,key,new,blob,key,md,digest,final,blob,key,remote,key,blob,key,read,from,input,stream,is,if,local,key,equals,remote,key,throw,new,ioexception,detected,data,corruption,during,transfer,return,local,key
BlobClient -> public InputStream get(final BlobKey blobKey) throws IOException;1412605211;Downloads the BLOB identified by the given BLOB key from the BLOB server. If no such BLOB exists on the server, a_{@link FileNotFoundException} is thrown.__@param blobKey_the BLOB key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(final BlobKey blobKey) throws IOException {__		final OutputStream os = this.socket.getOutputStream()__		final byte[] buf = new byte[AbstractID.SIZE]___		_		sendGetHeader(os, null, null, blobKey, buf)___		return new BlobInputStream(this.socket.getInputStream(), blobKey, buf)__	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,blob,key,the,blob,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,final,blob,key,blob,key,throws,ioexception,final,output,stream,os,this,socket,get,output,stream,final,byte,buf,new,byte,abstract,id,size,send,get,header,os,null,null,blob,key,buf,return,new,blob,input,stream,this,socket,get,input,stream,blob,key,buf
BlobClient -> public InputStream get(final BlobKey blobKey) throws IOException;1418925511;Downloads the BLOB identified by the given BLOB key from the BLOB server. If no such BLOB exists on the server, a_{@link FileNotFoundException} is thrown.__@param blobKey_the BLOB key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(final BlobKey blobKey) throws IOException {__		final OutputStream os = this.socket.getOutputStream()__		final byte[] buf = new byte[AbstractID.SIZE]___		_		sendGetHeader(os, null, null, blobKey, buf)___		return new BlobInputStream(this.socket.getInputStream(), blobKey, buf)__	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,blob,key,the,blob,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,final,blob,key,blob,key,throws,ioexception,final,output,stream,os,this,socket,get,output,stream,final,byte,buf,new,byte,abstract,id,size,send,get,header,os,null,null,blob,key,buf,return,new,blob,input,stream,this,socket,get,input,stream,blob,key,buf
BlobClient -> public void deleteAll(final JobID jobId) throws IOException;1412605211;Deletes all BLOBs belonging to the job with the given ID from the BLOB server__@param jobId_the job ID to identify the BLOBs to be deleted_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void deleteAll(final JobID jobId) throws IOException {__		if (jobId == null) {_			throw new IllegalArgumentException("Argument jobID must not be null")__		}__		deleteInternal(jobId, null)__	};deletes,all,blobs,belonging,to,the,job,with,the,given,id,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blobs,to,be,deleted,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,all,final,job,id,job,id,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,argument,job,id,must,not,be,null,delete,internal,job,id,null
BlobClient -> public void deleteAll(final JobID jobId) throws IOException;1418925511;Deletes all BLOBs belonging to the job with the given ID from the BLOB server__@param jobId_the job ID to identify the BLOBs to be deleted_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void deleteAll(final JobID jobId) throws IOException {__		if (jobId == null) {_			throw new IllegalArgumentException("Argument jobID must not be null")__		}__		deleteInternal(jobId, null)__	};deletes,all,blobs,belonging,to,the,job,with,the,given,id,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blobs,to,be,deleted,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,all,final,job,id,job,id,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,argument,job,id,must,not,be,null,delete,internal,job,id,null
BlobClient -> public void put(JobID jobId, String key, byte[] value) throws IOException;1424264340;Uploads the data of the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value) throws IOException {_		put(jobId, key, value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,throws,ioexception,put,job,id,key,value,0,value,length
BlobClient -> public void put(JobID jobId, String key, byte[] value) throws IOException;1427784999;Uploads the data of the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value) throws IOException {_		put(jobId, key, value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,throws,ioexception,put,job,id,key,value,0,value,length
BlobClient -> public void put(JobID jobId, String key, byte[] value) throws IOException;1468854249;Uploads the data of the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value) throws IOException {_		put(jobId, key, value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,throws,ioexception,put,job,id,key,value,0,value,length
BlobClient -> public void put(JobID jobId, String key, byte[] value) throws IOException;1476696544;Uploads the data of the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value) throws IOException {_		put(jobId, key, value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,throws,ioexception,put,job,id,key,value,0,value,length
BlobClient -> public void put(JobID jobId, String key, byte[] value) throws IOException;1487441974;Uploads the data of the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value) throws IOException {_		put(jobId, key, value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,throws,ioexception,put,job,id,key,value,0,value,length
BlobClient -> public void put(JobID jobId, String key, byte[] value) throws IOException;1494690800;Uploads the data of the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value) throws IOException {_		put(jobId, key, value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,throws,ioexception,put,job,id,key,value,0,value,length
BlobClient -> public void put(JobID jobId, String key, byte[] value) throws IOException;1495001945;Uploads the data of the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value) throws IOException {_		put(jobId, key, value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,throws,ioexception,put,job,id,key,value,0,value,length
BlobClient -> public void put(JobID jobId, String key, byte[] value) throws IOException;1499173045;Uploads the data of the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value) throws IOException {_		put(jobId, key, value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,throws,ioexception,put,job,id,key,value,0,value,length
BlobClient -> public static List<PermanentBlobKey> uploadFiles( 			InetSocketAddress serverAddress, Configuration clientConfig, JobID jobId, List<Path> files) 			throws IOException;1525420604;Uploads the JAR files to the {@link PermanentBlobService} of the {@link BlobServer} at the_given address with HA as configured.__@param serverAddress_Server address of the {@link BlobServer}_@param clientConfig_Any additional configuration for the blob client_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param files_List of files to upload__@throws IOException_if the upload fails;public static List<PermanentBlobKey> uploadFiles(_			InetSocketAddress serverAddress, Configuration clientConfig, JobID jobId, List<Path> files)_			throws IOException {__		checkNotNull(jobId)___		if (files.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<PermanentBlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path file : files) {_					final PermanentBlobKey key = blobClient.uploadFile(jobId, file)__					blobKeys.add(key)__				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,the,link,permanent,blob,service,of,the,link,blob,server,at,the,given,address,with,ha,as,configured,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,files,list,of,files,to,upload,throws,ioexception,if,the,upload,fails;public,static,list,permanent,blob,key,upload,files,inet,socket,address,server,address,configuration,client,config,job,id,job,id,list,path,files,throws,ioexception,check,not,null,job,id,if,files,is,empty,return,collections,empty,list,else,list,permanent,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,file,files,final,permanent,blob,key,key,blob,client,upload,file,job,id,file,blob,keys,add,key,return,blob,keys
BlobClient -> public static List<PermanentBlobKey> uploadFiles( 			InetSocketAddress serverAddress, Configuration clientConfig, JobID jobId, List<Path> files) 			throws IOException;1529583969;Uploads the JAR files to the {@link PermanentBlobService} of the {@link BlobServer} at the_given address with HA as configured.__@param serverAddress_Server address of the {@link BlobServer}_@param clientConfig_Any additional configuration for the blob client_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param files_List of files to upload__@throws IOException_if the upload fails;public static List<PermanentBlobKey> uploadFiles(_			InetSocketAddress serverAddress, Configuration clientConfig, JobID jobId, List<Path> files)_			throws IOException {__		checkNotNull(jobId)___		if (files.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<PermanentBlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path file : files) {_					final PermanentBlobKey key = blobClient.uploadFile(jobId, file)__					blobKeys.add(key)__				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,the,link,permanent,blob,service,of,the,link,blob,server,at,the,given,address,with,ha,as,configured,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,files,list,of,files,to,upload,throws,ioexception,if,the,upload,fails;public,static,list,permanent,blob,key,upload,files,inet,socket,address,server,address,configuration,client,config,job,id,job,id,list,path,files,throws,ioexception,check,not,null,job,id,if,files,is,empty,return,collections,empty,list,else,list,permanent,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,file,files,final,permanent,blob,key,key,blob,client,upload,file,job,id,file,blob,keys,add,key,return,blob,keys
BlobClient -> public static List<PermanentBlobKey> uploadFiles( 			InetSocketAddress serverAddress, Configuration clientConfig, JobID jobId, List<Path> files) 			throws IOException;1531721446;Uploads the JAR files to the {@link PermanentBlobService} of the {@link BlobServer} at the_given address with HA as configured.__@param serverAddress_Server address of the {@link BlobServer}_@param clientConfig_Any additional configuration for the blob client_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param files_List of files to upload__@throws IOException_if the upload fails;public static List<PermanentBlobKey> uploadFiles(_			InetSocketAddress serverAddress, Configuration clientConfig, JobID jobId, List<Path> files)_			throws IOException {__		checkNotNull(jobId)___		if (files.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<PermanentBlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path file : files) {_					final PermanentBlobKey key = blobClient.uploadFile(jobId, file)__					blobKeys.add(key)__				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,the,link,permanent,blob,service,of,the,link,blob,server,at,the,given,address,with,ha,as,configured,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,files,list,of,files,to,upload,throws,ioexception,if,the,upload,fails;public,static,list,permanent,blob,key,upload,files,inet,socket,address,server,address,configuration,client,config,job,id,job,id,list,path,files,throws,ioexception,check,not,null,job,id,if,files,is,empty,return,collections,empty,list,else,list,permanent,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,file,files,final,permanent,blob,key,key,blob,client,upload,file,job,id,file,blob,keys,add,key,return,blob,keys
BlobClient -> public static List<PermanentBlobKey> uploadFiles( 			InetSocketAddress serverAddress, Configuration clientConfig, JobID jobId, List<Path> files) 			throws IOException;1531721446;Uploads the JAR files to the {@link PermanentBlobService} of the {@link BlobServer} at the_given address with HA as configured.__@param serverAddress_Server address of the {@link BlobServer}_@param clientConfig_Any additional configuration for the blob client_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param files_List of files to upload__@throws IOException_if the upload fails;public static List<PermanentBlobKey> uploadFiles(_			InetSocketAddress serverAddress, Configuration clientConfig, JobID jobId, List<Path> files)_			throws IOException {__		checkNotNull(jobId)___		if (files.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<PermanentBlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path file : files) {_					final PermanentBlobKey key = blobClient.uploadFile(jobId, file)__					blobKeys.add(key)__				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,the,link,permanent,blob,service,of,the,link,blob,server,at,the,given,address,with,ha,as,configured,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,files,list,of,files,to,upload,throws,ioexception,if,the,upload,fails;public,static,list,permanent,blob,key,upload,files,inet,socket,address,server,address,configuration,client,config,job,id,job,id,list,path,files,throws,ioexception,check,not,null,job,id,if,files,is,empty,return,collections,empty,list,else,list,permanent,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,file,files,final,permanent,blob,key,key,blob,client,upload,file,job,id,file,blob,keys,add,key,return,blob,keys
BlobClient -> private static BlobKey receiveAndCheckPutResponse(InputStream is, MessageDigest md) 			throws IOException;1502701584;Reads the response from the input stream and throws in case of errors__@param is_stream to read from_@param md_message digest to check the response against__@throws IOException_if the response is an error, the message digest does not match or reading the response_failed;private static BlobKey receiveAndCheckPutResponse(InputStream is, MessageDigest md)_			throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		else if (response == RETURN_OKAY) {__			BlobKey remoteKey = BlobKey.readFromInputStream(is)__			BlobKey localKey = new BlobKey(md.digest())___			if (!localKey.equals(remoteKey)) {_				throw new IOException("Detected data corruption during transfer")__			}__			return localKey__		}_		else if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else {_			throw new IOException("Unrecognized response: " + response + '.')__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,param,md,message,digest,to,check,the,response,against,throws,ioexception,if,the,response,is,an,error,the,message,digest,does,not,match,or,reading,the,response,failed;private,static,blob,key,receive,and,check,put,response,input,stream,is,message,digest,md,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,else,if,response,blob,key,remote,key,blob,key,read,from,input,stream,is,blob,key,local,key,new,blob,key,md,digest,if,local,key,equals,remote,key,throw,new,ioexception,detected,data,corruption,during,transfer,return,local,key,else,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,throw,new,ioexception,unrecognized,response,response
BlobClient -> private static BlobKey receiveAndCheckPutResponse(InputStream is, MessageDigest md) 			throws IOException;1503041372;Reads the response from the input stream and throws in case of errors__@param is_stream to read from_@param md_message digest to check the response against__@throws IOException_if the response is an error, the message digest does not match or reading the response_failed;private static BlobKey receiveAndCheckPutResponse(InputStream is, MessageDigest md)_			throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		else if (response == RETURN_OKAY) {__			BlobKey remoteKey = BlobKey.readFromInputStream(is)__			BlobKey localKey = new BlobKey(md.digest())___			if (!localKey.equals(remoteKey)) {_				throw new IOException("Detected data corruption during transfer")__			}__			return localKey__		}_		else if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else {_			throw new IOException("Unrecognized response: " + response + '.')__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,param,md,message,digest,to,check,the,response,against,throws,ioexception,if,the,response,is,an,error,the,message,digest,does,not,match,or,reading,the,response,failed;private,static,blob,key,receive,and,check,put,response,input,stream,is,message,digest,md,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,else,if,response,blob,key,remote,key,blob,key,read,from,input,stream,is,blob,key,local,key,new,blob,key,md,digest,if,local,key,equals,remote,key,throw,new,ioexception,detected,data,corruption,during,transfer,return,local,key,else,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,throw,new,ioexception,unrecognized,response,response
BlobClient -> private static BlobKey receiveAndCheckPutResponse(InputStream is, MessageDigest md) 			throws IOException;1507212387;Reads the response from the input stream and throws in case of errors__@param is_stream to read from_@param md_message digest to check the response against__@throws IOException_if the response is an error, the message digest does not match or reading the response_failed;private static BlobKey receiveAndCheckPutResponse(InputStream is, MessageDigest md)_			throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		else if (response == RETURN_OKAY) {__			BlobKey remoteKey = BlobKey.readFromInputStream(is)__			BlobKey localKey = new BlobKey(md.digest())___			if (!localKey.equals(remoteKey)) {_				throw new IOException("Detected data corruption during transfer")__			}__			return localKey__		}_		else if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else {_			throw new IOException("Unrecognized response: " + response + '.')__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,param,md,message,digest,to,check,the,response,against,throws,ioexception,if,the,response,is,an,error,the,message,digest,does,not,match,or,reading,the,response,failed;private,static,blob,key,receive,and,check,put,response,input,stream,is,message,digest,md,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,else,if,response,blob,key,remote,key,blob,key,read,from,input,stream,is,blob,key,local,key,new,blob,key,md,digest,if,local,key,equals,remote,key,throw,new,ioexception,detected,data,corruption,during,transfer,return,local,key,else,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,throw,new,ioexception,unrecognized,response,response
BlobClient -> public BlobKey put(byte[] value) throws IOException;1424264340;Uploads the data of the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value) throws IOException {_		return put(value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,throws,ioexception,return,put,value,0,value,length
BlobClient -> public BlobKey put(byte[] value) throws IOException;1427784999;Uploads the data of the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value) throws IOException {_		return put(value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,throws,ioexception,return,put,value,0,value,length
BlobClient -> public BlobKey put(byte[] value) throws IOException;1468854249;Uploads the data of the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value) throws IOException {_		return put(value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,throws,ioexception,return,put,value,0,value,length
BlobClient -> public BlobKey put(byte[] value) throws IOException;1476696544;Uploads the data of the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value) throws IOException {_		return put(value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,throws,ioexception,return,put,value,0,value,length
BlobClient -> public BlobKey put(byte[] value) throws IOException;1487441974;Uploads the data of the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value) throws IOException {_		return put(value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,throws,ioexception,return,put,value,0,value,length
BlobClient -> public BlobKey put(byte[] value) throws IOException;1494690800;Uploads the data of the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value) throws IOException {_		return put(value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,throws,ioexception,return,put,value,0,value,length
BlobClient -> public BlobKey put(byte[] value) throws IOException;1495001945;Uploads the data of the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value) throws IOException {_		return put(value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,throws,ioexception,return,put,value,0,value,length
BlobClient -> public BlobKey put(byte[] value) throws IOException;1499173045;Uploads the data of the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value) throws IOException {_		return put(value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,throws,ioexception,return,put,value,0,value,length
BlobClient -> public BlobKey put(byte[] value) throws IOException;1499789965;Uploads the data of the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value) throws IOException {_		return put(value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,throws,ioexception,return,put,value,0,value,length
BlobClient -> public BlobKey put(byte[] value) throws IOException;1502355408;Uploads the data of the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(byte[] value) throws IOException {_		return put(value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,byte,value,throws,ioexception,return,put,value,0,value,length
BlobClient -> private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException;1424264340;Constructs and writes the header data for a PUT request to the given output stream._NOTE: If the jobId and key are null, we send the data to the content addressable section.__@param outputStream_the output stream to write the PUT header data to_@param jobID_the ID of job the BLOB belongs to or <code>null</code> to indicate the upload of a_content-addressable BLOB_@param key_the key of the BLOB to upload or <code>null</code> to indicate the upload of a content-addressable BLOB_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException {_		_		if ((jobID != null || key != null) && !(jobID != null && key != null)) {_			throw new IllegalArgumentException()__		}__		_		outputStream.write(PUT_OPERATION)___		_		if (jobID == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			byte[] idBytes = jobID.getBytes()__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			outputStream.write(idBytes)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,note,if,the,job,id,and,key,are,null,we,send,the,data,to,the,content,addressable,section,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,param,key,the,key,of,the,blob,to,upload,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,put,header,output,stream,output,stream,job,id,job,id,string,key,throws,ioexception,if,job,id,null,key,null,job,id,null,key,null,throw,new,illegal,argument,exception,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException;1427784999;Constructs and writes the header data for a PUT request to the given output stream._NOTE: If the jobId and key are null, we send the data to the content addressable section.__@param outputStream_the output stream to write the PUT header data to_@param jobID_the ID of job the BLOB belongs to or <code>null</code> to indicate the upload of a_content-addressable BLOB_@param key_the key of the BLOB to upload or <code>null</code> to indicate the upload of a content-addressable BLOB_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException {_		_		if ((jobID != null || key != null) && !(jobID != null && key != null)) {_			throw new IllegalArgumentException()__		}__		_		outputStream.write(PUT_OPERATION)___		_		if (jobID == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			byte[] idBytes = jobID.getBytes()__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			outputStream.write(idBytes)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,note,if,the,job,id,and,key,are,null,we,send,the,data,to,the,content,addressable,section,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,param,key,the,key,of,the,blob,to,upload,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,put,header,output,stream,output,stream,job,id,job,id,string,key,throws,ioexception,if,job,id,null,key,null,job,id,null,key,null,throw,new,illegal,argument,exception,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException;1468854249;Constructs and writes the header data for a PUT request to the given output stream._NOTE: If the jobId and key are null, we send the data to the content addressable section.__@param outputStream_the output stream to write the PUT header data to_@param jobID_the ID of job the BLOB belongs to or <code>null</code> to indicate the upload of a_content-addressable BLOB_@param key_the key of the BLOB to upload or <code>null</code> to indicate the upload of a content-addressable BLOB_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException {_		_		if ((jobID != null || key != null) && !(jobID != null && key != null)) {_			throw new IllegalArgumentException()__		}__		_		outputStream.write(PUT_OPERATION)___		_		if (jobID == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			byte[] idBytes = jobID.getBytes()__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			outputStream.write(idBytes)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,note,if,the,job,id,and,key,are,null,we,send,the,data,to,the,content,addressable,section,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,param,key,the,key,of,the,blob,to,upload,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,put,header,output,stream,output,stream,job,id,job,id,string,key,throws,ioexception,if,job,id,null,key,null,job,id,null,key,null,throw,new,illegal,argument,exception,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException;1476696544;Constructs and writes the header data for a PUT request to the given output stream._NOTE: If the jobId and key are null, we send the data to the content addressable section.__@param outputStream_the output stream to write the PUT header data to_@param jobID_the ID of job the BLOB belongs to or <code>null</code> to indicate the upload of a_content-addressable BLOB_@param key_the key of the BLOB to upload or <code>null</code> to indicate the upload of a content-addressable BLOB_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException {_		_		if ((jobID != null || key != null) && !(jobID != null && key != null)) {_			throw new IllegalArgumentException()__		}__		_		outputStream.write(PUT_OPERATION)___		_		if (jobID == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			byte[] idBytes = jobID.getBytes()__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			outputStream.write(idBytes)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,note,if,the,job,id,and,key,are,null,we,send,the,data,to,the,content,addressable,section,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,param,key,the,key,of,the,blob,to,upload,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,put,header,output,stream,output,stream,job,id,job,id,string,key,throws,ioexception,if,job,id,null,key,null,job,id,null,key,null,throw,new,illegal,argument,exception,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException;1487441974;Constructs and writes the header data for a PUT request to the given output stream._NOTE: If the jobId and key are null, we send the data to the content addressable section.__@param outputStream_the output stream to write the PUT header data to_@param jobID_the ID of job the BLOB belongs to or <code>null</code> to indicate the upload of a_content-addressable BLOB_@param key_the key of the BLOB to upload or <code>null</code> to indicate the upload of a content-addressable BLOB_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException {_		_		if ((jobID != null || key != null) && !(jobID != null && key != null)) {_			throw new IllegalArgumentException()__		}__		_		outputStream.write(PUT_OPERATION)___		_		if (jobID == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			byte[] idBytes = jobID.getBytes()__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			outputStream.write(idBytes)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,note,if,the,job,id,and,key,are,null,we,send,the,data,to,the,content,addressable,section,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,param,key,the,key,of,the,blob,to,upload,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,put,header,output,stream,output,stream,job,id,job,id,string,key,throws,ioexception,if,job,id,null,key,null,job,id,null,key,null,throw,new,illegal,argument,exception,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException;1494690800;Constructs and writes the header data for a PUT request to the given output stream._NOTE: If the jobId and key are null, we send the data to the content addressable section.__@param outputStream_the output stream to write the PUT header data to_@param jobID_the ID of job the BLOB belongs to or <code>null</code> to indicate the upload of a_content-addressable BLOB_@param key_the key of the BLOB to upload or <code>null</code> to indicate the upload of a content-addressable BLOB_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException {_		_		if ((jobID != null || key != null) && !(jobID != null && key != null)) {_			throw new IllegalArgumentException()__		}__		_		outputStream.write(PUT_OPERATION)___		_		if (jobID == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			byte[] idBytes = jobID.getBytes()__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			outputStream.write(idBytes)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,note,if,the,job,id,and,key,are,null,we,send,the,data,to,the,content,addressable,section,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,param,key,the,key,of,the,blob,to,upload,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,put,header,output,stream,output,stream,job,id,job,id,string,key,throws,ioexception,if,job,id,null,key,null,job,id,null,key,null,throw,new,illegal,argument,exception,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException;1495001945;Constructs and writes the header data for a PUT request to the given output stream._NOTE: If the jobId and key are null, we send the data to the content addressable section.__@param outputStream_the output stream to write the PUT header data to_@param jobID_the ID of job the BLOB belongs to or <code>null</code> to indicate the upload of a_content-addressable BLOB_@param key_the key of the BLOB to upload or <code>null</code> to indicate the upload of a content-addressable BLOB_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException {_		_		if ((jobID != null || key != null) && !(jobID != null && key != null)) {_			throw new IllegalArgumentException()__		}__		_		outputStream.write(PUT_OPERATION)___		_		if (jobID == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			byte[] idBytes = jobID.getBytes()__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			outputStream.write(idBytes)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,note,if,the,job,id,and,key,are,null,we,send,the,data,to,the,content,addressable,section,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,param,key,the,key,of,the,blob,to,upload,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,put,header,output,stream,output,stream,job,id,job,id,string,key,throws,ioexception,if,job,id,null,key,null,job,id,null,key,null,throw,new,illegal,argument,exception,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException;1499173045;Constructs and writes the header data for a PUT request to the given output stream._NOTE: If the jobId and key are null, we send the data to the content addressable section.__@param outputStream_the output stream to write the PUT header data to_@param jobID_the ID of job the BLOB belongs to or <code>null</code> to indicate the upload of a_content-addressable BLOB_@param key_the key of the BLOB to upload or <code>null</code> to indicate the upload of a content-addressable BLOB_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendPutHeader(OutputStream outputStream, JobID jobID, String key) throws IOException {_		_		if ((jobID != null || key != null) && !(jobID != null && key != null)) {_			throw new IllegalArgumentException()__		}__		_		outputStream.write(PUT_OPERATION)___		_		if (jobID == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			byte[] idBytes = jobID.getBytes()__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			outputStream.write(idBytes)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,note,if,the,job,id,and,key,are,null,we,send,the,data,to,the,content,addressable,section,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,param,key,the,key,of,the,blob,to,upload,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,put,header,output,stream,output,stream,job,id,job,id,string,key,throws,ioexception,if,job,id,null,key,null,job,id,null,key,null,throw,new,illegal,argument,exception,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,byte,id,bytes,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,output,stream,write,id,bytes,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> public void delete(BlobKey key) throws IOException;1424264340;Deletes the BLOB identified by the given BLOB key from the BLOB server.__@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void delete(BlobKey key) throws IOException {_		if (key == null) {_			throw new IllegalArgumentException("BLOB key must not be null")__		}__		deleteInternal(null, null, key)__	};deletes,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,blob,key,key,throws,ioexception,if,key,null,throw,new,illegal,argument,exception,blob,key,must,not,be,null,delete,internal,null,null,key
BlobClient -> public void delete(BlobKey key) throws IOException;1427784999;Deletes the BLOB identified by the given BLOB key from the BLOB server.__@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void delete(BlobKey key) throws IOException {_		if (key == null) {_			throw new IllegalArgumentException("BLOB key must not be null")__		}__		deleteInternal(null, null, key)__	};deletes,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,blob,key,key,throws,ioexception,if,key,null,throw,new,illegal,argument,exception,blob,key,must,not,be,null,delete,internal,null,null,key
BlobClient -> public void delete(BlobKey key) throws IOException;1468854249;Deletes the BLOB identified by the given BLOB key from the BLOB server.__@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void delete(BlobKey key) throws IOException {_		if (key == null) {_			throw new IllegalArgumentException("BLOB key must not be null")__		}__		deleteInternal(null, null, key)__	};deletes,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,blob,key,key,throws,ioexception,if,key,null,throw,new,illegal,argument,exception,blob,key,must,not,be,null,delete,internal,null,null,key
BlobClient -> public void delete(BlobKey key) throws IOException;1476696544;Deletes the BLOB identified by the given BLOB key from the BLOB server.__@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void delete(BlobKey key) throws IOException {_		if (key == null) {_			throw new IllegalArgumentException("BLOB key must not be null")__		}__		deleteInternal(null, null, key)__	};deletes,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,blob,key,key,throws,ioexception,if,key,null,throw,new,illegal,argument,exception,blob,key,must,not,be,null,delete,internal,null,null,key
BlobClient -> public void delete(BlobKey key) throws IOException;1487441974;Deletes the BLOB identified by the given BLOB key from the BLOB server.__@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to_the BLOB server or if the BLOB server cannot delete the file;public void delete(BlobKey key) throws IOException {_		if (key == null) {_			throw new IllegalArgumentException("BLOB key must not be null")__		}__		deleteInternal(null, null, key)__	};deletes,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server,or,if,the,blob,server,cannot,delete,the,file;public,void,delete,blob,key,key,throws,ioexception,if,key,null,throw,new,illegal,argument,exception,blob,key,must,not,be,null,delete,internal,null,null,key
BlobClient -> public void delete(BlobKey key) throws IOException;1494690800;Deletes the BLOB identified by the given BLOB key from the BLOB server.__@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to_the BLOB server or if the BLOB server cannot delete the file;public void delete(BlobKey key) throws IOException {_		if (key == null) {_			throw new IllegalArgumentException("BLOB key must not be null")__		}__		deleteInternal(null, null, key)__	};deletes,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server,or,if,the,blob,server,cannot,delete,the,file;public,void,delete,blob,key,key,throws,ioexception,if,key,null,throw,new,illegal,argument,exception,blob,key,must,not,be,null,delete,internal,null,null,key
BlobClient -> public void delete(BlobKey key) throws IOException;1495001945;Deletes the BLOB identified by the given BLOB key from the BLOB server.__@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to_the BLOB server or if the BLOB server cannot delete the file;public void delete(BlobKey key) throws IOException {_		if (key == null) {_			throw new IllegalArgumentException("BLOB key must not be null")__		}__		deleteInternal(null, null, key)__	};deletes,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server,or,if,the,blob,server,cannot,delete,the,file;public,void,delete,blob,key,key,throws,ioexception,if,key,null,throw,new,illegal,argument,exception,blob,key,must,not,be,null,delete,internal,null,null,key
BlobClient -> public void delete(BlobKey key) throws IOException;1499173045;Deletes the BLOB identified by the given BLOB key from the BLOB server.__@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to_the BLOB server or if the BLOB server cannot delete the file;public void delete(BlobKey key) throws IOException {_		checkArgument(key != null, "BLOB key must not be null.")___		deleteInternal(null, null, key)__	};deletes,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server,or,if,the,blob,server,cannot,delete,the,file;public,void,delete,blob,key,key,throws,ioexception,check,argument,key,null,blob,key,must,not,be,null,delete,internal,null,null,key
BlobClient -> public void delete(BlobKey key) throws IOException;1502701584;Deletes the (job-unrelated) BLOB identified by the given BLOB key from the BLOB server.__@param key_the key to identify the BLOB__@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server or if the_BLOB server cannot delete the file;public void delete(BlobKey key) throws IOException {_		deleteInternal(null, key)__	};deletes,the,job,unrelated,blob,identified,by,the,given,blob,key,from,the,blob,server,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server,or,if,the,blob,server,cannot,delete,the,file;public,void,delete,blob,key,key,throws,ioexception,delete,internal,null,key
BlobClient -> public void delete(BlobKey key) throws IOException;1503041372;Deletes the (job-unrelated) BLOB identified by the given BLOB key from the BLOB server.__@param key_the key to identify the BLOB__@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server or if the_BLOB server cannot delete the file;public void delete(BlobKey key) throws IOException {_		deleteInternal(null, key)__	};deletes,the,job,unrelated,blob,identified,by,the,given,blob,key,from,the,blob,server,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server,or,if,the,blob,server,cannot,delete,the,file;public,void,delete,blob,key,key,throws,ioexception,delete,internal,null,key
BlobClient -> public InputStream get(JobID jobID, String key) throws IOException;1424264340;Downloads the BLOB identified by the given job ID and key from the BLOB server. If no such BLOB exists on the_server, a {@link FileNotFoundException} is thrown.__@param jobID_the job ID identifying the BLOB to download_@param key_the key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(JobID jobID, String key) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET BLOB %s / \"%s\" from %s", jobID, key, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			sendGetHeader(os, jobID, key, null)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, null)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,job,id,the,job,id,identifying,the,blob,to,download,param,key,the,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,job,id,job,id,string,key,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,blob,s,s,from,s,job,id,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,key,null,receive,and,check,response,is,return,new,blob,input,stream,is,null,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(JobID jobID, String key) throws IOException;1427784999;Downloads the BLOB identified by the given job ID and key from the BLOB server. If no such BLOB exists on the_server, a {@link FileNotFoundException} is thrown.__@param jobID_the job ID identifying the BLOB to download_@param key_the key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(JobID jobID, String key) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET BLOB %s / \"%s\" from %s", jobID, key, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			sendGetHeader(os, jobID, key, null)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, null)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,job,id,the,job,id,identifying,the,blob,to,download,param,key,the,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,job,id,job,id,string,key,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,blob,s,s,from,s,job,id,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,key,null,receive,and,check,response,is,return,new,blob,input,stream,is,null,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(JobID jobID, String key) throws IOException;1468854249;Downloads the BLOB identified by the given job ID and key from the BLOB server. If no such BLOB exists on the_server, a {@link FileNotFoundException} is thrown.__@param jobID_the job ID identifying the BLOB to download_@param key_the key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(JobID jobID, String key) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET BLOB %s / \"%s\" from %s", jobID, key, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			sendGetHeader(os, jobID, key, null)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, null)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,job,id,the,job,id,identifying,the,blob,to,download,param,key,the,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,job,id,job,id,string,key,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,blob,s,s,from,s,job,id,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,key,null,receive,and,check,response,is,return,new,blob,input,stream,is,null,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(JobID jobID, String key) throws IOException;1476696544;Downloads the BLOB identified by the given job ID and key from the BLOB server. If no such BLOB exists on the_server, a {@link FileNotFoundException} is thrown.__@param jobID_the job ID identifying the BLOB to download_@param key_the key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(JobID jobID, String key) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET BLOB %s / \"%s\" from %s", jobID, key, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			sendGetHeader(os, jobID, key, null)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, null)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,job,id,the,job,id,identifying,the,blob,to,download,param,key,the,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,job,id,job,id,string,key,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,blob,s,s,from,s,job,id,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,key,null,receive,and,check,response,is,return,new,blob,input,stream,is,null,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(JobID jobID, String key) throws IOException;1487441974;Downloads the BLOB identified by the given job ID and key from the BLOB server. If no such BLOB exists on the_server, a {@link FileNotFoundException} is thrown.__@param jobID_the job ID identifying the BLOB to download_@param key_the key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(JobID jobID, String key) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET BLOB %s / \"%s\" from %s", jobID, key, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			sendGetHeader(os, jobID, key, null)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, null)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,job,id,the,job,id,identifying,the,blob,to,download,param,key,the,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,job,id,job,id,string,key,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,blob,s,s,from,s,job,id,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,key,null,receive,and,check,response,is,return,new,blob,input,stream,is,null,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(JobID jobID, String key) throws IOException;1494690800;Downloads the BLOB identified by the given job ID and key from the BLOB server. If no such BLOB exists on the_server, a {@link FileNotFoundException} is thrown.__@param jobID_the job ID identifying the BLOB to download_@param key_the key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(JobID jobID, String key) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET BLOB %s / \"%s\" from %s", jobID, key, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			sendGetHeader(os, jobID, key, null)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, null)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,job,id,the,job,id,identifying,the,blob,to,download,param,key,the,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,job,id,job,id,string,key,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,blob,s,s,from,s,job,id,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,key,null,receive,and,check,response,is,return,new,blob,input,stream,is,null,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(JobID jobID, String key) throws IOException;1495001945;Downloads the BLOB identified by the given job ID and key from the BLOB server. If no such BLOB exists on the_server, a {@link FileNotFoundException} is thrown.__@param jobID_the job ID identifying the BLOB to download_@param key_the key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(JobID jobID, String key) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET BLOB %s / \"%s\" from %s", jobID, key, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			sendGetHeader(os, jobID, key, null)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, null)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,job,id,the,job,id,identifying,the,blob,to,download,param,key,the,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,job,id,job,id,string,key,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,blob,s,s,from,s,job,id,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,key,null,receive,and,check,response,is,return,new,blob,input,stream,is,null,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(JobID jobID, String key) throws IOException;1499173045;Downloads the BLOB identified by the given job ID and key from the BLOB server. If no such BLOB exists on the_server, a {@link FileNotFoundException} is thrown.__@param jobID_the job ID identifying the BLOB to download_@param key_the key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(JobID jobID, String key) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET BLOB %s / \"%s\" from %s", jobID, key, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			sendGetHeader(os, jobID, key, null)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, null)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,job,id,the,job,id,identifying,the,blob,to,download,param,key,the,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,job,id,job,id,string,key,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,blob,s,s,from,s,job,id,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,key,null,receive,and,check,response,is,return,new,blob,input,stream,is,null,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(BlobKey blobKey) throws IOException;1424264340;Downloads the BLOB identified by the given BLOB key from the BLOB server. If no such BLOB exists on the server, a_{@link FileNotFoundException} is thrown.__@param blobKey_the BLOB key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(BlobKey blobKey) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET content addressable BLOB %s from %s", blobKey, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, null, null, blobKey)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, blobKey)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,blob,key,the,blob,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,content,addressable,blob,s,from,s,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,null,null,blob,key,receive,and,check,response,is,return,new,blob,input,stream,is,blob,key,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(BlobKey blobKey) throws IOException;1427784999;Downloads the BLOB identified by the given BLOB key from the BLOB server. If no such BLOB exists on the server, a_{@link FileNotFoundException} is thrown.__@param blobKey_the BLOB key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(BlobKey blobKey) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET content addressable BLOB %s from %s", blobKey, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, null, null, blobKey)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, blobKey)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,blob,key,the,blob,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,content,addressable,blob,s,from,s,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,null,null,blob,key,receive,and,check,response,is,return,new,blob,input,stream,is,blob,key,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(BlobKey blobKey) throws IOException;1468854249;Downloads the BLOB identified by the given BLOB key from the BLOB server. If no such BLOB exists on the server, a_{@link FileNotFoundException} is thrown.__@param blobKey_the BLOB key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(BlobKey blobKey) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET content addressable BLOB %s from %s", blobKey, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, null, null, blobKey)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, blobKey)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,blob,key,the,blob,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,content,addressable,blob,s,from,s,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,null,null,blob,key,receive,and,check,response,is,return,new,blob,input,stream,is,blob,key,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(BlobKey blobKey) throws IOException;1476696544;Downloads the BLOB identified by the given BLOB key from the BLOB server. If no such BLOB exists on the server, a_{@link FileNotFoundException} is thrown.__@param blobKey_the BLOB key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(BlobKey blobKey) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET content addressable BLOB %s from %s", blobKey, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, null, null, blobKey)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, blobKey)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,blob,key,the,blob,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,content,addressable,blob,s,from,s,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,null,null,blob,key,receive,and,check,response,is,return,new,blob,input,stream,is,blob,key,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(BlobKey blobKey) throws IOException;1487441974;Downloads the BLOB identified by the given BLOB key from the BLOB server. If no such BLOB exists on the server, a_{@link FileNotFoundException} is thrown.__@param blobKey_the BLOB key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(BlobKey blobKey) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET content addressable BLOB %s from %s", blobKey, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, null, null, blobKey)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, blobKey)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,blob,key,the,blob,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,content,addressable,blob,s,from,s,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,null,null,blob,key,receive,and,check,response,is,return,new,blob,input,stream,is,blob,key,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(BlobKey blobKey) throws IOException;1494690800;Downloads the BLOB identified by the given BLOB key from the BLOB server. If no such BLOB exists on the server, a_{@link FileNotFoundException} is thrown.__@param blobKey_the BLOB key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(BlobKey blobKey) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET content addressable BLOB %s from %s", blobKey, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, null, null, blobKey)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, blobKey)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,blob,key,the,blob,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,content,addressable,blob,s,from,s,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,null,null,blob,key,receive,and,check,response,is,return,new,blob,input,stream,is,blob,key,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(BlobKey blobKey) throws IOException;1495001945;Downloads the BLOB identified by the given BLOB key from the BLOB server. If no such BLOB exists on the server, a_{@link FileNotFoundException} is thrown.__@param blobKey_the BLOB key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(BlobKey blobKey) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET content addressable BLOB %s from %s", blobKey, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, null, null, blobKey)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, blobKey)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,blob,key,the,blob,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,content,addressable,blob,s,from,s,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,null,null,blob,key,receive,and,check,response,is,return,new,blob,input,stream,is,blob,key,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(BlobKey blobKey) throws IOException;1499173045;Downloads the BLOB identified by the given BLOB key from the BLOB server. If no such BLOB exists on the server, a_{@link FileNotFoundException} is thrown.__@param blobKey_the BLOB key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(BlobKey blobKey) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET content addressable BLOB %s from %s", blobKey, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, null, null, blobKey)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, blobKey)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,blob,key,the,blob,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,content,addressable,blob,s,from,s,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,null,null,blob,key,receive,and,check,response,is,return,new,blob,input,stream,is,blob,key,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(BlobKey blobKey) throws IOException;1499789965;Downloads the BLOB identified by the given BLOB key from the BLOB server. If no such BLOB exists on the server, a_{@link FileNotFoundException} is thrown.__@param blobKey_the BLOB key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(BlobKey blobKey) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET content addressable BLOB %s from %s", blobKey, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, null, blobKey)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, blobKey)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,blob,key,the,blob,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,content,addressable,blob,s,from,s,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,null,blob,key,receive,and,check,response,is,return,new,blob,input,stream,is,blob,key,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(BlobKey blobKey) throws IOException;1502355408;Downloads the BLOB identified by the given BLOB key from the BLOB server. If no such BLOB exists on the server, a_{@link FileNotFoundException} is thrown.__@param blobKey_the BLOB key identifying the BLOB to download_@return an input stream to read the retrieved data from_@throws IOException_thrown if an I/O error occurs during the download;public InputStream get(BlobKey blobKey) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug(String.format("GET content addressable BLOB %s from %s", blobKey, socket.getLocalSocketAddress()))__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, null, blobKey)__			receiveAndCheckResponse(is)___			return new BlobInputStream(is, blobKey)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,if,no,such,blob,exists,on,the,server,a,link,file,not,found,exception,is,thrown,param,blob,key,the,blob,key,identifying,the,blob,to,download,return,an,input,stream,to,read,the,retrieved,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,string,format,get,content,addressable,blob,s,from,s,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,null,blob,key,receive,and,check,response,is,return,new,blob,input,stream,is,blob,key,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> public InputStream get(BlobKey blobKey) throws IOException;1502701584;Downloads the (job-unrelated) BLOB identified by the given BLOB key from the BLOB server.__@param blobKey_blob key associated with the requested file__@return an input stream to read the retrieved data from__@throws FileNotFoundException_if there is no such file__@throws IOException_if an I/O error occurs during the download;public InputStream get(BlobKey blobKey) throws IOException {_		return getInternal(null, blobKey)__	};downloads,the,job,unrelated,blob,identified,by,the,given,blob,key,from,the,blob,server,param,blob,key,blob,key,associated,with,the,requested,file,return,an,input,stream,to,read,the,retrieved,data,from,throws,file,not,found,exception,if,there,is,no,such,file,throws,ioexception,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,blob,key,blob,key,throws,ioexception,return,get,internal,null,blob,key
BlobClient -> public InputStream get(BlobKey blobKey) throws IOException;1503041372;Downloads the (job-unrelated) BLOB identified by the given BLOB key from the BLOB server.__@param blobKey_blob key associated with the requested file__@return an input stream to read the retrieved data from__@throws FileNotFoundException_if there is no such file__@throws IOException_if an I/O error occurs during the download;public InputStream get(BlobKey blobKey) throws IOException {_		return getInternal(null, blobKey)__	};downloads,the,job,unrelated,blob,identified,by,the,given,blob,key,from,the,blob,server,param,blob,key,blob,key,associated,with,the,requested,file,return,an,input,stream,to,read,the,retrieved,data,from,throws,file,not,found,exception,if,there,is,no,such,file,throws,ioexception,if,an,i,o,error,occurs,during,the,download;public,input,stream,get,blob,key,blob,key,throws,ioexception,return,get,internal,null,blob,key
BlobClient -> public static List<BlobKey> uploadJarFiles( 			ActorGateway jobManager, 			FiniteDuration askTimeout, 			Configuration clientConfig, 			List<Path> jars) throws IOException;1476696544;Retrieves the {@link BlobServer} address from the JobManager and uploads_the JAR files to it.__@param jobManager   Server address of the {@link BlobServer}_@param askTimeout   Ask timeout for blob server address retrieval_@param clientConfig Any additional configuration for the blob client_@param jars         List of JAR files to upload_@throws IOException Thrown if the address retrieval or upload fails;public static List<BlobKey> uploadJarFiles(_			ActorGateway jobManager,_			FiniteDuration askTimeout,_			Configuration clientConfig,_			List<Path> jars) throws IOException {__		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			Object msg = JobManagerMessages.getRequestBlobManagerPort()__			Future<Object> futureBlobPort = jobManager.ask(msg, askTimeout)___			try {_				_				Object result = Await.result(futureBlobPort, askTimeout)__				if (result instanceof Integer) {_					int port = (Integer) result__					LOG.info("Blob client connecting to " + jobManager.path())___					Option<String> jmHost = jobManager.actor().path().address().host()__					String jmHostname = jmHost.isDefined() ? jmHost.get() : "localhost"__					InetSocketAddress serverAddress = new InetSocketAddress(jmHostname, port)___					_					return uploadJarFiles(serverAddress, clientConfig, jars)__				} else {_					throw new Exception("Expected port number (int) as answer, received " + result)__				}_			} catch (Exception e) {_				throw new IOException("Could not retrieve the JobManager's blob port.", e)__			}_		}_	};retrieves,the,link,blob,server,address,from,the,job,manager,and,uploads,the,jar,files,to,it,param,job,manager,server,address,of,the,link,blob,server,param,ask,timeout,ask,timeout,for,blob,server,address,retrieval,param,client,config,any,additional,configuration,for,the,blob,client,param,jars,list,of,jar,files,to,upload,throws,ioexception,thrown,if,the,address,retrieval,or,upload,fails;public,static,list,blob,key,upload,jar,files,actor,gateway,job,manager,finite,duration,ask,timeout,configuration,client,config,list,path,jars,throws,ioexception,if,jars,is,empty,return,collections,empty,list,else,object,msg,job,manager,messages,get,request,blob,manager,port,future,object,future,blob,port,job,manager,ask,msg,ask,timeout,try,object,result,await,result,future,blob,port,ask,timeout,if,result,instanceof,integer,int,port,integer,result,log,info,blob,client,connecting,to,job,manager,path,option,string,jm,host,job,manager,actor,path,address,host,string,jm,hostname,jm,host,is,defined,jm,host,get,localhost,inet,socket,address,server,address,new,inet,socket,address,jm,hostname,port,return,upload,jar,files,server,address,client,config,jars,else,throw,new,exception,expected,port,number,int,as,answer,received,result,catch,exception,e,throw,new,ioexception,could,not,retrieve,the,job,manager,s,blob,port,e
BlobClient -> public static List<BlobKey> uploadJarFiles( 			ActorGateway jobManager, 			FiniteDuration askTimeout, 			Configuration clientConfig, 			List<Path> jars) throws IOException;1487441974;Retrieves the {@link BlobServer} address from the JobManager and uploads_the JAR files to it.__@param jobManager   Server address of the {@link BlobServer}_@param askTimeout   Ask timeout for blob server address retrieval_@param clientConfig Any additional configuration for the blob client_@param jars         List of JAR files to upload_@throws IOException Thrown if the address retrieval or upload fails;public static List<BlobKey> uploadJarFiles(_			ActorGateway jobManager,_			FiniteDuration askTimeout,_			Configuration clientConfig,_			List<Path> jars) throws IOException {__		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			Object msg = JobManagerMessages.getRequestBlobManagerPort()__			Future<Object> futureBlobPort = jobManager.ask(msg, askTimeout)___			try {_				_				Object result = Await.result(futureBlobPort, askTimeout)__				if (result instanceof Integer) {_					int port = (Integer) result__					LOG.info("Blob client connecting to " + jobManager.path())___					Option<String> jmHost = jobManager.actor().path().address().host()__					String jmHostname = jmHost.isDefined() ? jmHost.get() : "localhost"__					InetSocketAddress serverAddress = new InetSocketAddress(jmHostname, port)___					_					return uploadJarFiles(serverAddress, clientConfig, jars)__				} else {_					throw new Exception("Expected port number (int) as answer, received " + result)__				}_			} catch (Exception e) {_				throw new IOException("Could not retrieve the JobManager's blob port.", e)__			}_		}_	};retrieves,the,link,blob,server,address,from,the,job,manager,and,uploads,the,jar,files,to,it,param,job,manager,server,address,of,the,link,blob,server,param,ask,timeout,ask,timeout,for,blob,server,address,retrieval,param,client,config,any,additional,configuration,for,the,blob,client,param,jars,list,of,jar,files,to,upload,throws,ioexception,thrown,if,the,address,retrieval,or,upload,fails;public,static,list,blob,key,upload,jar,files,actor,gateway,job,manager,finite,duration,ask,timeout,configuration,client,config,list,path,jars,throws,ioexception,if,jars,is,empty,return,collections,empty,list,else,object,msg,job,manager,messages,get,request,blob,manager,port,future,object,future,blob,port,job,manager,ask,msg,ask,timeout,try,object,result,await,result,future,blob,port,ask,timeout,if,result,instanceof,integer,int,port,integer,result,log,info,blob,client,connecting,to,job,manager,path,option,string,jm,host,job,manager,actor,path,address,host,string,jm,hostname,jm,host,is,defined,jm,host,get,localhost,inet,socket,address,server,address,new,inet,socket,address,jm,hostname,port,return,upload,jar,files,server,address,client,config,jars,else,throw,new,exception,expected,port,number,int,as,answer,received,result,catch,exception,e,throw,new,ioexception,could,not,retrieve,the,job,manager,s,blob,port,e
BlobClient -> public static List<BlobKey> uploadJarFiles( 			ActorGateway jobManager, 			FiniteDuration askTimeout, 			Configuration clientConfig, 			List<Path> jars) throws IOException;1494690800;Retrieves the {@link BlobServer} address from the JobManager and uploads_the JAR files to it.__@param jobManager   Server address of the {@link BlobServer}_@param askTimeout   Ask timeout for blob server address retrieval_@param clientConfig Any additional configuration for the blob client_@param jars         List of JAR files to upload_@throws IOException Thrown if the address retrieval or upload fails;public static List<BlobKey> uploadJarFiles(_			ActorGateway jobManager,_			FiniteDuration askTimeout,_			Configuration clientConfig,_			List<Path> jars) throws IOException {__		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			Object msg = JobManagerMessages.getRequestBlobManagerPort()__			Future<Object> futureBlobPort = jobManager.ask(msg, askTimeout)___			try {_				_				Object result = Await.result(futureBlobPort, askTimeout)__				if (result instanceof Integer) {_					int port = (Integer) result__					LOG.info("Blob client connecting to " + jobManager.path())___					Option<String> jmHost = jobManager.actor().path().address().host()__					String jmHostname = jmHost.isDefined() ? jmHost.get() : "localhost"__					InetSocketAddress serverAddress = new InetSocketAddress(jmHostname, port)___					_					return uploadJarFiles(serverAddress, clientConfig, jars)__				} else {_					throw new Exception("Expected port number (int) as answer, received " + result)__				}_			} catch (Exception e) {_				throw new IOException("Could not retrieve the JobManager's blob port.", e)__			}_		}_	};retrieves,the,link,blob,server,address,from,the,job,manager,and,uploads,the,jar,files,to,it,param,job,manager,server,address,of,the,link,blob,server,param,ask,timeout,ask,timeout,for,blob,server,address,retrieval,param,client,config,any,additional,configuration,for,the,blob,client,param,jars,list,of,jar,files,to,upload,throws,ioexception,thrown,if,the,address,retrieval,or,upload,fails;public,static,list,blob,key,upload,jar,files,actor,gateway,job,manager,finite,duration,ask,timeout,configuration,client,config,list,path,jars,throws,ioexception,if,jars,is,empty,return,collections,empty,list,else,object,msg,job,manager,messages,get,request,blob,manager,port,future,object,future,blob,port,job,manager,ask,msg,ask,timeout,try,object,result,await,result,future,blob,port,ask,timeout,if,result,instanceof,integer,int,port,integer,result,log,info,blob,client,connecting,to,job,manager,path,option,string,jm,host,job,manager,actor,path,address,host,string,jm,hostname,jm,host,is,defined,jm,host,get,localhost,inet,socket,address,server,address,new,inet,socket,address,jm,hostname,port,return,upload,jar,files,server,address,client,config,jars,else,throw,new,exception,expected,port,number,int,as,answer,received,result,catch,exception,e,throw,new,ioexception,could,not,retrieve,the,job,manager,s,blob,port,e
BlobClient -> public static List<BlobKey> uploadJarFiles( 			ActorGateway jobManager, 			FiniteDuration askTimeout, 			Configuration clientConfig, 			List<Path> jars) throws IOException;1495001945;Retrieves the {@link BlobServer} address from the JobManager and uploads_the JAR files to it.__@param jobManager   Server address of the {@link BlobServer}_@param askTimeout   Ask timeout for blob server address retrieval_@param clientConfig Any additional configuration for the blob client_@param jars         List of JAR files to upload_@throws IOException Thrown if the address retrieval or upload fails;public static List<BlobKey> uploadJarFiles(_			ActorGateway jobManager,_			FiniteDuration askTimeout,_			Configuration clientConfig,_			List<Path> jars) throws IOException {__		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			Object msg = JobManagerMessages.getRequestBlobManagerPort()__			Future<Object> futureBlobPort = jobManager.ask(msg, askTimeout)___			try {_				_				Object result = Await.result(futureBlobPort, askTimeout)__				if (result instanceof Integer) {_					int port = (Integer) result__					LOG.info("Blob client connecting to " + jobManager.path())___					Option<String> jmHost = jobManager.actor().path().address().host()__					String jmHostname = jmHost.isDefined() ? jmHost.get() : "localhost"__					InetSocketAddress serverAddress = new InetSocketAddress(jmHostname, port)___					_					return uploadJarFiles(serverAddress, clientConfig, jars)__				} else {_					throw new Exception("Expected port number (int) as answer, received " + result)__				}_			} catch (Exception e) {_				throw new IOException("Could not retrieve the JobManager's blob port.", e)__			}_		}_	};retrieves,the,link,blob,server,address,from,the,job,manager,and,uploads,the,jar,files,to,it,param,job,manager,server,address,of,the,link,blob,server,param,ask,timeout,ask,timeout,for,blob,server,address,retrieval,param,client,config,any,additional,configuration,for,the,blob,client,param,jars,list,of,jar,files,to,upload,throws,ioexception,thrown,if,the,address,retrieval,or,upload,fails;public,static,list,blob,key,upload,jar,files,actor,gateway,job,manager,finite,duration,ask,timeout,configuration,client,config,list,path,jars,throws,ioexception,if,jars,is,empty,return,collections,empty,list,else,object,msg,job,manager,messages,get,request,blob,manager,port,future,object,future,blob,port,job,manager,ask,msg,ask,timeout,try,object,result,await,result,future,blob,port,ask,timeout,if,result,instanceof,integer,int,port,integer,result,log,info,blob,client,connecting,to,job,manager,path,option,string,jm,host,job,manager,actor,path,address,host,string,jm,hostname,jm,host,is,defined,jm,host,get,localhost,inet,socket,address,server,address,new,inet,socket,address,jm,hostname,port,return,upload,jar,files,server,address,client,config,jars,else,throw,new,exception,expected,port,number,int,as,answer,received,result,catch,exception,e,throw,new,ioexception,could,not,retrieve,the,job,manager,s,blob,port,e
BlobClient -> public static List<BlobKey> uploadJarFiles( 			ActorGateway jobManager, 			FiniteDuration askTimeout, 			Configuration clientConfig, 			List<Path> jars) throws IOException;1499173045;Retrieves the {@link BlobServer} address from the JobManager and uploads_the JAR files to it.__@param jobManager   Server address of the {@link BlobServer}_@param askTimeout   Ask timeout for blob server address retrieval_@param clientConfig Any additional configuration for the blob client_@param jars         List of JAR files to upload_@throws IOException Thrown if the address retrieval or upload fails;public static List<BlobKey> uploadJarFiles(_			ActorGateway jobManager,_			FiniteDuration askTimeout,_			Configuration clientConfig,_			List<Path> jars) throws IOException {__		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			Object msg = JobManagerMessages.getRequestBlobManagerPort()__			Future<Object> futureBlobPort = jobManager.ask(msg, askTimeout)___			try {_				_				Object result = Await.result(futureBlobPort, askTimeout)__				if (result instanceof Integer) {_					int port = (Integer) result__					LOG.info("Blob client connecting to " + jobManager.path())___					Option<String> jmHost = jobManager.actor().path().address().host()__					String jmHostname = jmHost.isDefined() ? jmHost.get() : "localhost"__					InetSocketAddress serverAddress = new InetSocketAddress(jmHostname, port)___					_					return uploadJarFiles(serverAddress, clientConfig, jars)__				} else {_					throw new Exception("Expected port number (int) as answer, received " + result)__				}_			} catch (Exception e) {_				throw new IOException("Could not retrieve the JobManager's blob port.", e)__			}_		}_	};retrieves,the,link,blob,server,address,from,the,job,manager,and,uploads,the,jar,files,to,it,param,job,manager,server,address,of,the,link,blob,server,param,ask,timeout,ask,timeout,for,blob,server,address,retrieval,param,client,config,any,additional,configuration,for,the,blob,client,param,jars,list,of,jar,files,to,upload,throws,ioexception,thrown,if,the,address,retrieval,or,upload,fails;public,static,list,blob,key,upload,jar,files,actor,gateway,job,manager,finite,duration,ask,timeout,configuration,client,config,list,path,jars,throws,ioexception,if,jars,is,empty,return,collections,empty,list,else,object,msg,job,manager,messages,get,request,blob,manager,port,future,object,future,blob,port,job,manager,ask,msg,ask,timeout,try,object,result,await,result,future,blob,port,ask,timeout,if,result,instanceof,integer,int,port,integer,result,log,info,blob,client,connecting,to,job,manager,path,option,string,jm,host,job,manager,actor,path,address,host,string,jm,hostname,jm,host,is,defined,jm,host,get,localhost,inet,socket,address,server,address,new,inet,socket,address,jm,hostname,port,return,upload,jar,files,server,address,client,config,jars,else,throw,new,exception,expected,port,number,int,as,answer,received,result,catch,exception,e,throw,new,ioexception,could,not,retrieve,the,job,manager,s,blob,port,e
BlobClient -> public static List<BlobKey> uploadJarFiles( 			ActorGateway jobManager, 			FiniteDuration askTimeout, 			Configuration clientConfig, 			List<Path> jars) throws IOException;1499789965;Retrieves the {@link BlobServer} address from the JobManager and uploads_the JAR files to it.__@param jobManager   Server address of the {@link BlobServer}_@param askTimeout   Ask timeout for blob server address retrieval_@param clientConfig Any additional configuration for the blob client_@param jars         List of JAR files to upload_@throws IOException Thrown if the address retrieval or upload fails;public static List<BlobKey> uploadJarFiles(_			ActorGateway jobManager,_			FiniteDuration askTimeout,_			Configuration clientConfig,_			List<Path> jars) throws IOException {__		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			Object msg = JobManagerMessages.getRequestBlobManagerPort()__			Future<Object> futureBlobPort = jobManager.ask(msg, askTimeout)___			try {_				_				Object result = Await.result(futureBlobPort, askTimeout)__				if (result instanceof Integer) {_					int port = (Integer) result__					LOG.info("Blob client connecting to " + jobManager.path())___					Option<String> jmHost = jobManager.actor().path().address().host()__					String jmHostname = jmHost.isDefined() ? jmHost.get() : "localhost"__					InetSocketAddress serverAddress = new InetSocketAddress(jmHostname, port)___					_					return uploadJarFiles(serverAddress, clientConfig, jars)__				} else {_					throw new Exception("Expected port number (int) as answer, received " + result)__				}_			} catch (Exception e) {_				throw new IOException("Could not retrieve the JobManager's blob port.", e)__			}_		}_	};retrieves,the,link,blob,server,address,from,the,job,manager,and,uploads,the,jar,files,to,it,param,job,manager,server,address,of,the,link,blob,server,param,ask,timeout,ask,timeout,for,blob,server,address,retrieval,param,client,config,any,additional,configuration,for,the,blob,client,param,jars,list,of,jar,files,to,upload,throws,ioexception,thrown,if,the,address,retrieval,or,upload,fails;public,static,list,blob,key,upload,jar,files,actor,gateway,job,manager,finite,duration,ask,timeout,configuration,client,config,list,path,jars,throws,ioexception,if,jars,is,empty,return,collections,empty,list,else,object,msg,job,manager,messages,get,request,blob,manager,port,future,object,future,blob,port,job,manager,ask,msg,ask,timeout,try,object,result,await,result,future,blob,port,ask,timeout,if,result,instanceof,integer,int,port,integer,result,log,info,blob,client,connecting,to,job,manager,path,option,string,jm,host,job,manager,actor,path,address,host,string,jm,hostname,jm,host,is,defined,jm,host,get,localhost,inet,socket,address,server,address,new,inet,socket,address,jm,hostname,port,return,upload,jar,files,server,address,client,config,jars,else,throw,new,exception,expected,port,number,int,as,answer,received,result,catch,exception,e,throw,new,ioexception,could,not,retrieve,the,job,manager,s,blob,port,e
BlobClient -> private BlobKey putInputStream(JobID jobId, InputStream inputStream) throws IOException;1499789965;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param inputStream_the input stream to read the data from_@return he computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putInputStream(JobID jobId, InputStream inputStream) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB stream to %s",_						socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId)___			while (true) {_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					if (md != null) {_						md.update(xferBuf, 0, read)__					}_				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,he,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,input,stream,job,id,job,id,input,stream,input,stream,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,stream,to,s,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,if,md,null,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putInputStream(JobID jobId, InputStream inputStream) throws IOException;1502355408;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param inputStream_the input stream to read the data from_@return he computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putInputStream(JobID jobId, InputStream inputStream) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB stream to %s",_						socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId)___			while (true) {_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					if (md != null) {_						md.update(xferBuf, 0, read)__					}_				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,he,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,input,stream,job,id,job,id,input,stream,input,stream,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,stream,to,s,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,if,md,null,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> public PermanentBlobKey uploadFile(JobID jobId, Path file) throws IOException;1525420604;Uploads a single file to the {@link PermanentBlobService} of the given {@link BlobServer}.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param file_file to upload__@throws IOException_if the upload fails;public PermanentBlobKey uploadFile(JobID jobId, Path file) throws IOException {_		final FileSystem fs = file.getFileSystem()__		if (fs.getFileStatus(file).isDir()) {_			return uploadDirectory(jobId, file, fs)__		} else {_			try (InputStream is = fs.open(file)) {_				return (PermanentBlobKey) putInputStream(jobId, is, PERMANENT_BLOB)__			}_		}_	};uploads,a,single,file,to,the,link,permanent,blob,service,of,the,given,link,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,file,file,to,upload,throws,ioexception,if,the,upload,fails;public,permanent,blob,key,upload,file,job,id,job,id,path,file,throws,ioexception,final,file,system,fs,file,get,file,system,if,fs,get,file,status,file,is,dir,return,upload,directory,job,id,file,fs,else,try,input,stream,is,fs,open,file,return,permanent,blob,key,put,input,stream,job,id,is
BlobClient -> public PermanentBlobKey uploadFile(JobID jobId, Path file) throws IOException;1529583969;Uploads a single file to the {@link PermanentBlobService} of the given {@link BlobServer}.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param file_file to upload__@throws IOException_if the upload fails;public PermanentBlobKey uploadFile(JobID jobId, Path file) throws IOException {_		final FileSystem fs = file.getFileSystem()__		try (InputStream is = fs.open(file)) {_			return (PermanentBlobKey) putInputStream(jobId, is, PERMANENT_BLOB)__		}_	};uploads,a,single,file,to,the,link,permanent,blob,service,of,the,given,link,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,file,file,to,upload,throws,ioexception,if,the,upload,fails;public,permanent,blob,key,upload,file,job,id,job,id,path,file,throws,ioexception,final,file,system,fs,file,get,file,system,try,input,stream,is,fs,open,file,return,permanent,blob,key,put,input,stream,job,id,is
BlobClient -> public PermanentBlobKey uploadFile(JobID jobId, Path file) throws IOException;1531721446;Uploads a single file to the {@link PermanentBlobService} of the given {@link BlobServer}.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param file_file to upload__@throws IOException_if the upload fails;public PermanentBlobKey uploadFile(JobID jobId, Path file) throws IOException {_		final FileSystem fs = file.getFileSystem()__		try (InputStream is = fs.open(file)) {_			return (PermanentBlobKey) putInputStream(jobId, is, PERMANENT_BLOB)__		}_	};uploads,a,single,file,to,the,link,permanent,blob,service,of,the,given,link,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,file,file,to,upload,throws,ioexception,if,the,upload,fails;public,permanent,blob,key,upload,file,job,id,job,id,path,file,throws,ioexception,final,file,system,fs,file,get,file,system,try,input,stream,is,fs,open,file,return,permanent,blob,key,put,input,stream,job,id,is
BlobClient -> public PermanentBlobKey uploadFile(JobID jobId, Path file) throws IOException;1531721446;Uploads a single file to the {@link PermanentBlobService} of the given {@link BlobServer}.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param file_file to upload__@throws IOException_if the upload fails;public PermanentBlobKey uploadFile(JobID jobId, Path file) throws IOException {_		final FileSystem fs = file.getFileSystem()__		try (InputStream is = fs.open(file)) {_			return (PermanentBlobKey) putInputStream(jobId, is, PERMANENT_BLOB)__		}_	};uploads,a,single,file,to,the,link,permanent,blob,service,of,the,given,link,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,file,file,to,upload,throws,ioexception,if,the,upload,fails;public,permanent,blob,key,upload,file,job,id,job,id,path,file,throws,ioexception,final,file,system,fs,file,get,file,system,try,input,stream,is,fs,open,file,return,permanent,blob,key,put,input,stream,job,id,is
BlobClient -> public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1424264340;Uploads data from the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putBuffer(jobId, key, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,buffer,job,id,key,value,offset,len
BlobClient -> public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1427784999;Uploads data from the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putBuffer(jobId, key, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,buffer,job,id,key,value,offset,len
BlobClient -> public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1468854249;Uploads data from the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putBuffer(jobId, key, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,buffer,job,id,key,value,offset,len
BlobClient -> public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1476696544;Uploads data from the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putBuffer(jobId, key, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,buffer,job,id,key,value,offset,len
BlobClient -> public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1487441974;Uploads data from the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putBuffer(jobId, key, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,buffer,job,id,key,value,offset,len
BlobClient -> public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1494690800;Uploads data from the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putBuffer(jobId, key, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,buffer,job,id,key,value,offset,len
BlobClient -> public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1495001945;Uploads data from the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putBuffer(jobId, key, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,buffer,job,id,key,value,offset,len
BlobClient -> public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1499173045;Uploads data from the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putBuffer(jobId, key, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,buffer,job,id,key,value,offset,len
BlobClient -> public void delete(BlobKey blobKey) throws IOException;1499789965;Deletes the BLOB identified by the given BLOB key from the BLOB server.__@param blobKey_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to_the BLOB server or if the BLOB server cannot delete the file;public void delete(BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key must not be null.")___		try {_			final OutputStream outputStream = this.socket.getOutputStream()__			final InputStream inputStream = this.socket.getInputStream()___			_			outputStream.write(DELETE_OPERATION)___			_			outputStream.write(CONTENT_ADDRESSABLE)__			blobKey.writeToOutputStream(outputStream)___			int response = inputStream.read()__			if (response < 0) {_				throw new EOFException("Premature end of response")__			}_			if (response == RETURN_ERROR) {_				Throwable cause = readExceptionFromStream(inputStream)__				throw new IOException("Server side error: " + cause.getMessage(), cause)__			}_			else if (response != RETURN_OKAY) {_				throw new IOException("Unrecognized response")__			}_		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("DELETE operation failed: " + t.getMessage(), t)__		}_	};deletes,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,blob,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server,or,if,the,blob,server,cannot,delete,the,file;public,void,delete,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,must,not,be,null,try,final,output,stream,output,stream,this,socket,get,output,stream,final,input,stream,input,stream,this,socket,get,input,stream,output,stream,write,output,stream,write,blob,key,write,to,output,stream,output,stream,int,response,input,stream,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,input,stream,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,delete,operation,failed,t,get,message,t
BlobClient -> public void delete(BlobKey blobKey) throws IOException;1502355408;Deletes the BLOB identified by the given BLOB key from the BLOB server.__@param blobKey_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to_the BLOB server or if the BLOB server cannot delete the file;public void delete(BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key must not be null.")___		try {_			final OutputStream outputStream = this.socket.getOutputStream()__			final InputStream inputStream = this.socket.getInputStream()___			_			outputStream.write(DELETE_OPERATION)___			_			outputStream.write(CONTENT_ADDRESSABLE)__			blobKey.writeToOutputStream(outputStream)___			int response = inputStream.read()__			if (response < 0) {_				throw new EOFException("Premature end of response")__			}_			if (response == RETURN_ERROR) {_				Throwable cause = readExceptionFromStream(inputStream)__				throw new IOException("Server side error: " + cause.getMessage(), cause)__			}_			else if (response != RETURN_OKAY) {_				throw new IOException("Unrecognized response")__			}_		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("DELETE operation failed: " + t.getMessage(), t)__		}_	};deletes,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,blob,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server,or,if,the,blob,server,cannot,delete,the,file;public,void,delete,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,must,not,be,null,try,final,output,stream,output,stream,this,socket,get,output,stream,final,input,stream,input,stream,this,socket,get,input,stream,output,stream,write,output,stream,write,blob,key,write,to,output,stream,output,stream,int,response,input,stream,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,input,stream,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,delete,operation,failed,t,get,message,t
BlobClient -> @VisibleForTesting 	public BlobKey put(@Nullable JobID jobId, byte[] value, int offset, int len) throws IOException;1502701584;Uploads data from the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;@VisibleForTesting_	public BlobKey put(@Nullable JobID jobId, byte[] value, int offset, int len) throws IOException {_		return putBuffer(jobId, value, offset, len)__	};uploads,data,from,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;visible,for,testing,public,blob,key,put,nullable,job,id,job,id,byte,value,int,offset,int,len,throws,ioexception,return,put,buffer,job,id,value,offset,len
BlobClient -> @VisibleForTesting 	public BlobKey put(@Nullable JobID jobId, byte[] value, int offset, int len) throws IOException;1503041372;Uploads data from the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;@VisibleForTesting_	public BlobKey put(@Nullable JobID jobId, byte[] value, int offset, int len) throws IOException {_		return putBuffer(jobId, value, offset, len)__	};uploads,data,from,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;visible,for,testing,public,blob,key,put,nullable,job,id,job,id,byte,value,int,offset,int,len,throws,ioexception,return,put,buffer,job,id,value,offset,len
BlobClient -> private static void sendPutHeader(OutputStream outputStream, @Nullable JobID jobId) throws IOException;1502701584;Constructs and writes the header data for a PUT request to the given output stream.__@param outputStream_the output stream to write the PUT header data to_@param jobId_the ID of job the BLOB belongs to (or <tt>null</tt> if job-unrelated)__@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private static void sendPutHeader(OutputStream outputStream, @Nullable JobID jobId) throws IOException {_		_		outputStream.write(PUT_OPERATION)__		if (jobId == null) {_			outputStream.write(CONTENT_NO_JOB)__		} else {_			outputStream.write(CONTENT_FOR_JOB)__			outputStream.write(jobId.getBytes())__		}_	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,static,void,send,put,header,output,stream,output,stream,nullable,job,id,job,id,throws,ioexception,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes
BlobClient -> private static void sendPutHeader(OutputStream outputStream, @Nullable JobID jobId) throws IOException;1503041372;Constructs and writes the header data for a PUT request to the given output stream.__@param outputStream_the output stream to write the PUT header data to_@param jobId_the ID of job the BLOB belongs to (or <tt>null</tt> if job-unrelated)__@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private static void sendPutHeader(OutputStream outputStream, @Nullable JobID jobId) throws IOException {_		_		outputStream.write(PUT_OPERATION)__		if (jobId == null) {_			outputStream.write(CONTENT_NO_JOB)__		} else {_			outputStream.write(CONTENT_FOR_JOB)__			outputStream.write(jobId.getBytes())__		}_	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,static,void,send,put,header,output,stream,output,stream,nullable,job,id,job,id,throws,ioexception,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes
BlobClient -> private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException;1424264340;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param inputStream_the input stream to read the data from_@return he computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB stream to %s",_						socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB stream under %s / \"%s\" to %s",_						jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId, key)___			while (true) {_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					if (md != null) {_						md.update(xferBuf, 0, read)__					}_				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,he,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,input,stream,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,stream,to,s,socket,get,local,socket,address,else,log,debug,string,format,put,blob,stream,under,s,s,to,s,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,key,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,if,md,null,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException;1427784999;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param inputStream_the input stream to read the data from_@return he computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB stream to %s",_						socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB stream under %s / \"%s\" to %s",_						jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId, key)___			while (true) {_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					if (md != null) {_						md.update(xferBuf, 0, read)__					}_				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,he,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,input,stream,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,stream,to,s,socket,get,local,socket,address,else,log,debug,string,format,put,blob,stream,under,s,s,to,s,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,key,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,if,md,null,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException;1468854249;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param inputStream_the input stream to read the data from_@return he computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB stream to %s",_						socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB stream under %s / \"%s\" to %s",_						jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId, key)___			while (true) {_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					if (md != null) {_						md.update(xferBuf, 0, read)__					}_				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,he,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,input,stream,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,stream,to,s,socket,get,local,socket,address,else,log,debug,string,format,put,blob,stream,under,s,s,to,s,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,key,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,if,md,null,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException;1476696544;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param inputStream_the input stream to read the data from_@return he computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB stream to %s",_						socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB stream under %s / \"%s\" to %s",_						jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId, key)___			while (true) {_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					if (md != null) {_						md.update(xferBuf, 0, read)__					}_				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,he,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,input,stream,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,stream,to,s,socket,get,local,socket,address,else,log,debug,string,format,put,blob,stream,under,s,s,to,s,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,key,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,if,md,null,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException;1487441974;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param inputStream_the input stream to read the data from_@return he computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB stream to %s",_						socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB stream under %s / \"%s\" to %s",_						jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId, key)___			while (true) {_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					if (md != null) {_						md.update(xferBuf, 0, read)__					}_				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,he,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,input,stream,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,stream,to,s,socket,get,local,socket,address,else,log,debug,string,format,put,blob,stream,under,s,s,to,s,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,key,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,if,md,null,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException;1494690800;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param inputStream_the input stream to read the data from_@return he computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB stream to %s",_						socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB stream under %s / \"%s\" to %s",_						jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId, key)___			while (true) {_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					if (md != null) {_						md.update(xferBuf, 0, read)__					}_				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,he,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,input,stream,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,stream,to,s,socket,get,local,socket,address,else,log,debug,string,format,put,blob,stream,under,s,s,to,s,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,key,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,if,md,null,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException;1495001945;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param inputStream_the input stream to read the data from_@return he computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB stream to %s",_						socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB stream under %s / \"%s\" to %s",_						jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId, key)___			while (true) {_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					if (md != null) {_						md.update(xferBuf, 0, read)__					}_				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,he,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,input,stream,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,stream,to,s,socket,get,local,socket,address,else,log,debug,string,format,put,blob,stream,under,s,s,to,s,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,key,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,if,md,null,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException;1499173045;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param inputStream_the input stream to read the data from_@return he computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putInputStream(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB stream to %s",_						socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB stream under %s / \"%s\" to %s",_						jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId, key)___			while (true) {_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					if (md != null) {_						md.update(xferBuf, 0, read)__					}_				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,he,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,input,stream,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,stream,to,s,socket,get,local,socket,address,else,log,debug,string,format,put,blob,stream,under,s,s,to,s,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,key,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,if,md,null,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> public BlobClient(InetSocketAddress serverAddress) throws IOException;1424264340;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress) throws IOException {_		this.socket = new Socket()__		try {_			this.socket.connect(serverAddress)__		}_		catch(IOException e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,throws,ioexception,this,socket,new,socket,try,this,socket,connect,server,address,catch,ioexception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress) throws IOException;1427784999;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress) throws IOException {_		this.socket = new Socket()__		try {_			this.socket.connect(serverAddress)__		}_		catch(IOException e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,throws,ioexception,this,socket,new,socket,try,this,socket,connect,server,address,catch,ioexception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress) throws IOException;1468854249;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress) throws IOException {_		this.socket = new Socket()__		try {_			this.socket.connect(serverAddress)__		}_		catch(IOException e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,throws,ioexception,this,socket,new,socket,try,this,socket,connect,server,address,catch,ioexception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1424264340;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@return the computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB buffer (%d bytes) to %s",_						len, socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB buffer (%d bytes) under %s / \"%s\" to %s",_						len, jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null___			_			sendPutHeader(os, jobId, key)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				if (md != null) {_					md.update(value, offset, bytesToSend)__				}__				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,return,the,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,buffer,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,buffer,d,bytes,to,s,len,socket,get,local,socket,address,else,log,debug,string,format,put,blob,buffer,d,bytes,under,s,s,to,s,len,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,send,put,header,os,job,id,key,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,if,md,null,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1427784999;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@return the computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB buffer (%d bytes) to %s",_						len, socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB buffer (%d bytes) under %s / \"%s\" to %s",_						len, jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null___			_			sendPutHeader(os, jobId, key)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				if (md != null) {_					md.update(value, offset, bytesToSend)__				}__				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,return,the,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,buffer,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,buffer,d,bytes,to,s,len,socket,get,local,socket,address,else,log,debug,string,format,put,blob,buffer,d,bytes,under,s,s,to,s,len,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,send,put,header,os,job,id,key,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,if,md,null,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1468854249;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@return the computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB buffer (%d bytes) to %s",_						len, socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB buffer (%d bytes) under %s / \"%s\" to %s",_						len, jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null___			_			sendPutHeader(os, jobId, key)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				if (md != null) {_					md.update(value, offset, bytesToSend)__				}__				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,return,the,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,buffer,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,buffer,d,bytes,to,s,len,socket,get,local,socket,address,else,log,debug,string,format,put,blob,buffer,d,bytes,under,s,s,to,s,len,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,send,put,header,os,job,id,key,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,if,md,null,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1476696544;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@return the computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB buffer (%d bytes) to %s",_						len, socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB buffer (%d bytes) under %s / \"%s\" to %s",_						len, jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null___			_			sendPutHeader(os, jobId, key)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				if (md != null) {_					md.update(value, offset, bytesToSend)__				}__				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,return,the,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,buffer,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,buffer,d,bytes,to,s,len,socket,get,local,socket,address,else,log,debug,string,format,put,blob,buffer,d,bytes,under,s,s,to,s,len,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,send,put,header,os,job,id,key,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,if,md,null,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1487441974;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@return the computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB buffer (%d bytes) to %s",_						len, socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB buffer (%d bytes) under %s / \"%s\" to %s",_						len, jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null___			_			sendPutHeader(os, jobId, key)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				if (md != null) {_					md.update(value, offset, bytesToSend)__				}__				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,return,the,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,buffer,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,buffer,d,bytes,to,s,len,socket,get,local,socket,address,else,log,debug,string,format,put,blob,buffer,d,bytes,under,s,s,to,s,len,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,send,put,header,os,job,id,key,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,if,md,null,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1494690800;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@return the computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB buffer (%d bytes) to %s",_						len, socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB buffer (%d bytes) under %s / \"%s\" to %s",_						len, jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null___			_			sendPutHeader(os, jobId, key)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				if (md != null) {_					md.update(value, offset, bytesToSend)__				}__				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,return,the,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,buffer,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,buffer,d,bytes,to,s,len,socket,get,local,socket,address,else,log,debug,string,format,put,blob,buffer,d,bytes,under,s,s,to,s,len,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,send,put,header,os,job,id,key,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,if,md,null,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1495001945;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@return the computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB buffer (%d bytes) to %s",_						len, socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB buffer (%d bytes) under %s / \"%s\" to %s",_						len, jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null___			_			sendPutHeader(os, jobId, key)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				if (md != null) {_					md.update(value, offset, bytesToSend)__				}__				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,return,the,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,buffer,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,buffer,d,bytes,to,s,len,socket,get,local,socket,address,else,log,debug,string,format,put,blob,buffer,d,bytes,under,s,s,to,s,len,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,send,put,header,os,job,id,key,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,if,md,null,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException;1499173045;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@return the computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putBuffer(JobID jobId, String key, byte[] value, int offset, int len) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB buffer (%d bytes) to %s",_						len, socket.getLocalSocketAddress()))__			} else {_				LOG.debug(String.format("PUT BLOB buffer (%d bytes) under %s / \"%s\" to %s",_						len, jobId, key, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null___			_			sendPutHeader(os, jobId, key)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				if (md != null) {_					md.update(value, offset, bytesToSend)__				}__				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,return,the,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,buffer,job,id,job,id,string,key,byte,value,int,offset,int,len,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,buffer,d,bytes,to,s,len,socket,get,local,socket,address,else,log,debug,string,format,put,blob,buffer,d,bytes,under,s,s,to,s,len,job,id,key,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,send,put,header,os,job,id,key,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,if,md,null,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private void sendGetHeader(OutputStream outputStream, JobID jobID, BlobKey blobKey) throws IOException;1499789965;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobID_the job ID identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used_to identify the BLOB on the server instead_@param blobKey_the BLOB key to identify the BLOB to download if either the job ID or the regular key are_<code>null</code>_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendGetHeader(OutputStream outputStream, JobID jobID, BlobKey blobKey) throws IOException {_		checkArgument(jobID == null)___		_		outputStream.write(GET_OPERATION)___		_		if (jobID == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__			blobKey.writeToOutputStream(outputStream)__		}_	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,the,job,id,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,blob,key,the,blob,key,to,identify,the,blob,to,download,if,either,the,job,id,or,the,regular,key,are,code,null,code,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,get,header,output,stream,output,stream,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,job,id,null,output,stream,write,if,job,id,null,output,stream,write,blob,key,write,to,output,stream,output,stream
BlobClient -> private void sendGetHeader(OutputStream outputStream, JobID jobID, BlobKey blobKey) throws IOException;1502355408;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobID_the job ID identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used_to identify the BLOB on the server instead_@param blobKey_the BLOB key to identify the BLOB to download if either the job ID or the regular key are_<code>null</code>_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendGetHeader(OutputStream outputStream, JobID jobID, BlobKey blobKey) throws IOException {_		checkArgument(jobID == null)___		_		outputStream.write(GET_OPERATION)___		_		if (jobID == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__			blobKey.writeToOutputStream(outputStream)__		}_	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,the,job,id,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,blob,key,the,blob,key,to,identify,the,blob,to,download,if,either,the,job,id,or,the,regular,key,are,code,null,code,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,get,header,output,stream,output,stream,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,job,id,null,output,stream,write,if,job,id,null,output,stream,write,blob,key,write,to,output,stream,output,stream
BlobClient -> public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress, 			Configuration clientConfig, List<Path> jars) throws IOException;1476696544;Uploads the JAR files to a {@link BlobServer} at the given address.__@param serverAddress Server address of the {@link BlobServer}_@param clientConfig Any additional configuration for the blob client_@param jars List of JAR files to upload_@throws IOException Thrown if the upload fails;public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress,_			Configuration clientConfig, List<Path> jars) throws IOException {_		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<BlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path jar : jars) {_					final FileSystem fs = jar.getFileSystem()__					FSDataInputStream is = null__					try {_						is = fs.open(jar)__						final BlobKey key = blobClient.put(is)__						blobKeys.add(key)__					} finally {_						if (is != null) {_							is.close()__						}_					}_				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,a,link,blob,server,at,the,given,address,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,jars,list,of,jar,files,to,upload,throws,ioexception,thrown,if,the,upload,fails;public,static,list,blob,key,upload,jar,files,inet,socket,address,server,address,configuration,client,config,list,path,jars,throws,ioexception,if,jars,is,empty,return,collections,empty,list,else,list,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,jar,jars,final,file,system,fs,jar,get,file,system,fsdata,input,stream,is,null,try,is,fs,open,jar,final,blob,key,key,blob,client,put,is,blob,keys,add,key,finally,if,is,null,is,close,return,blob,keys
BlobClient -> public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress, 			Configuration clientConfig, List<Path> jars) throws IOException;1487441974;Uploads the JAR files to a {@link BlobServer} at the given address.__@param serverAddress Server address of the {@link BlobServer}_@param clientConfig Any additional configuration for the blob client_@param jars List of JAR files to upload_@throws IOException Thrown if the upload fails;public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress,_			Configuration clientConfig, List<Path> jars) throws IOException {_		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<BlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path jar : jars) {_					final FileSystem fs = jar.getFileSystem()__					FSDataInputStream is = null__					try {_						is = fs.open(jar)__						final BlobKey key = blobClient.put(is)__						blobKeys.add(key)__					} finally {_						if (is != null) {_							is.close()__						}_					}_				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,a,link,blob,server,at,the,given,address,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,jars,list,of,jar,files,to,upload,throws,ioexception,thrown,if,the,upload,fails;public,static,list,blob,key,upload,jar,files,inet,socket,address,server,address,configuration,client,config,list,path,jars,throws,ioexception,if,jars,is,empty,return,collections,empty,list,else,list,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,jar,jars,final,file,system,fs,jar,get,file,system,fsdata,input,stream,is,null,try,is,fs,open,jar,final,blob,key,key,blob,client,put,is,blob,keys,add,key,finally,if,is,null,is,close,return,blob,keys
BlobClient -> public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress, 			Configuration clientConfig, List<Path> jars) throws IOException;1494690800;Uploads the JAR files to a {@link BlobServer} at the given address.__@param serverAddress Server address of the {@link BlobServer}_@param clientConfig Any additional configuration for the blob client_@param jars List of JAR files to upload_@throws IOException Thrown if the upload fails;public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress,_			Configuration clientConfig, List<Path> jars) throws IOException {_		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<BlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path jar : jars) {_					final FileSystem fs = jar.getFileSystem()__					FSDataInputStream is = null__					try {_						is = fs.open(jar)__						final BlobKey key = blobClient.put(is)__						blobKeys.add(key)__					} finally {_						if (is != null) {_							is.close()__						}_					}_				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,a,link,blob,server,at,the,given,address,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,jars,list,of,jar,files,to,upload,throws,ioexception,thrown,if,the,upload,fails;public,static,list,blob,key,upload,jar,files,inet,socket,address,server,address,configuration,client,config,list,path,jars,throws,ioexception,if,jars,is,empty,return,collections,empty,list,else,list,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,jar,jars,final,file,system,fs,jar,get,file,system,fsdata,input,stream,is,null,try,is,fs,open,jar,final,blob,key,key,blob,client,put,is,blob,keys,add,key,finally,if,is,null,is,close,return,blob,keys
BlobClient -> public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress, 			Configuration clientConfig, List<Path> jars) throws IOException;1495001945;Uploads the JAR files to a {@link BlobServer} at the given address.__@param serverAddress Server address of the {@link BlobServer}_@param clientConfig Any additional configuration for the blob client_@param jars List of JAR files to upload_@throws IOException Thrown if the upload fails;public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress,_			Configuration clientConfig, List<Path> jars) throws IOException {_		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<BlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path jar : jars) {_					final FileSystem fs = jar.getFileSystem()__					FSDataInputStream is = null__					try {_						is = fs.open(jar)__						final BlobKey key = blobClient.put(is)__						blobKeys.add(key)__					} finally {_						if (is != null) {_							is.close()__						}_					}_				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,a,link,blob,server,at,the,given,address,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,jars,list,of,jar,files,to,upload,throws,ioexception,thrown,if,the,upload,fails;public,static,list,blob,key,upload,jar,files,inet,socket,address,server,address,configuration,client,config,list,path,jars,throws,ioexception,if,jars,is,empty,return,collections,empty,list,else,list,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,jar,jars,final,file,system,fs,jar,get,file,system,fsdata,input,stream,is,null,try,is,fs,open,jar,final,blob,key,key,blob,client,put,is,blob,keys,add,key,finally,if,is,null,is,close,return,blob,keys
BlobClient -> public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress, 			Configuration clientConfig, List<Path> jars) throws IOException;1499173045;Uploads the JAR files to a {@link BlobServer} at the given address.__@param serverAddress Server address of the {@link BlobServer}_@param clientConfig Any additional configuration for the blob client_@param jars List of JAR files to upload_@throws IOException Thrown if the upload fails;public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress,_			Configuration clientConfig, List<Path> jars) throws IOException {_		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<BlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path jar : jars) {_					final FileSystem fs = jar.getFileSystem()__					FSDataInputStream is = null__					try {_						is = fs.open(jar)__						final BlobKey key = blobClient.put(is)__						blobKeys.add(key)__					} finally {_						if (is != null) {_							is.close()__						}_					}_				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,a,link,blob,server,at,the,given,address,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,jars,list,of,jar,files,to,upload,throws,ioexception,thrown,if,the,upload,fails;public,static,list,blob,key,upload,jar,files,inet,socket,address,server,address,configuration,client,config,list,path,jars,throws,ioexception,if,jars,is,empty,return,collections,empty,list,else,list,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,jar,jars,final,file,system,fs,jar,get,file,system,fsdata,input,stream,is,null,try,is,fs,open,jar,final,blob,key,key,blob,client,put,is,blob,keys,add,key,finally,if,is,null,is,close,return,blob,keys
BlobClient -> public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress, 			Configuration clientConfig, List<Path> jars) throws IOException;1499789965;Uploads the JAR files to a {@link BlobServer} at the given address.__@param serverAddress Server address of the {@link BlobServer}_@param clientConfig Any additional configuration for the blob client_@param jars List of JAR files to upload_@throws IOException Thrown if the upload fails;public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress,_			Configuration clientConfig, List<Path> jars) throws IOException {_		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<BlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path jar : jars) {_					final FileSystem fs = jar.getFileSystem()__					FSDataInputStream is = null__					try {_						is = fs.open(jar)__						final BlobKey key = blobClient.put(is)__						blobKeys.add(key)__					} finally {_						if (is != null) {_							is.close()__						}_					}_				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,a,link,blob,server,at,the,given,address,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,jars,list,of,jar,files,to,upload,throws,ioexception,thrown,if,the,upload,fails;public,static,list,blob,key,upload,jar,files,inet,socket,address,server,address,configuration,client,config,list,path,jars,throws,ioexception,if,jars,is,empty,return,collections,empty,list,else,list,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,jar,jars,final,file,system,fs,jar,get,file,system,fsdata,input,stream,is,null,try,is,fs,open,jar,final,blob,key,key,blob,client,put,is,blob,keys,add,key,finally,if,is,null,is,close,return,blob,keys
BlobClient -> BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1507212387;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param inputStream_the input stream to read the data from_@param blobType_whether the BLOB should become permanent or transient__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(inputStream)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB stream to {}.", socket.getLocalSocketAddress())__		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = BlobUtils.createMessageDigest()__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId, blobType)___			while (true) {_				_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					md.update(xferBuf, 0, read)__				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receiveAndCheckPutResponse(is, md, blobType)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,input,stream,if,log,is,debug,enabled,log,debug,put,blob,stream,to,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,blob,utils,create,message,digest,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,blob,type,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,and,check,put,response,is,md,blob,type,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1508138617;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param inputStream_the input stream to read the data from_@param blobType_whether the BLOB should become permanent or transient__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(inputStream)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB stream to {}.", socket.getLocalSocketAddress())__		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = BlobUtils.createMessageDigest()__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId, blobType)___			while (true) {_				_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					md.update(xferBuf, 0, read)__				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receiveAndCheckPutResponse(is, md, blobType)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,input,stream,if,log,is,debug,enabled,log,debug,put,blob,stream,to,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,blob,utils,create,message,digest,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,blob,type,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,and,check,put,response,is,md,blob,type,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1515428991;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param inputStream_the input stream to read the data from_@param blobType_whether the BLOB should become permanent or transient__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(inputStream)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB stream to {}.", socket.getLocalSocketAddress())__		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = BlobUtils.createMessageDigest()__			final byte[] xferBuf = new byte[BUFFER_SIZE]___			_			sendPutHeader(os, jobId, blobType)___			while (true) {_				_				final int read = inputStream.read(xferBuf)__				if (read < 0) {_					_					writeLength(-1, os)__					break__				}_				if (read > 0) {_					writeLength(read, os)__					os.write(xferBuf, 0, read)__					md.update(xferBuf, 0, read)__				}_			}__			_			final InputStream is = this.socket.getInputStream()__			return receiveAndCheckPutResponse(is, md, blobType)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,input,stream,if,log,is,debug,enabled,log,debug,put,blob,stream,to,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,blob,utils,create,message,digest,final,byte,xfer,buf,new,byte,send,put,header,os,job,id,blob,type,while,true,final,int,read,input,stream,read,xfer,buf,if,read,0,write,length,1,os,break,if,read,0,write,length,read,os,os,write,xfer,buf,0,read,md,update,xfer,buf,0,read,final,input,stream,is,this,socket,get,input,stream,return,receive,and,check,put,response,is,md,blob,type,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1525420604;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param inputStream_the input stream to read the data from_@param blobType_whether the BLOB should become permanent or transient__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(inputStream)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB stream to {}.", socket.getLocalSocketAddress())__		}__		try (BlobOutputStream os = new BlobOutputStream(jobId, blobType, socket)) {_			IOUtils.copyBytes(inputStream, os, BUFFER_SIZE, false)__			return os.finish()__		} catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,input,stream,if,log,is,debug,enabled,log,debug,put,blob,stream,to,socket,get,local,socket,address,try,blob,output,stream,os,new,blob,output,stream,job,id,blob,type,socket,ioutils,copy,bytes,input,stream,os,false,return,os,finish,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1529583969;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param inputStream_the input stream to read the data from_@param blobType_whether the BLOB should become permanent or transient__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(inputStream)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB stream to {}.", socket.getLocalSocketAddress())__		}__		try (BlobOutputStream os = new BlobOutputStream(jobId, blobType, socket)) {_			IOUtils.copyBytes(inputStream, os, BUFFER_SIZE, false)__			return os.finish()__		} catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,input,stream,if,log,is,debug,enabled,log,debug,put,blob,stream,to,socket,get,local,socket,address,try,blob,output,stream,os,new,blob,output,stream,job,id,blob,type,socket,ioutils,copy,bytes,input,stream,os,false,return,os,finish,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1531721446;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param inputStream_the input stream to read the data from_@param blobType_whether the BLOB should become permanent or transient__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(inputStream)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB stream to {}.", socket.getLocalSocketAddress())__		}__		try (BlobOutputStream os = new BlobOutputStream(jobId, blobType, socket)) {_			IOUtils.copyBytes(inputStream, os, BUFFER_SIZE, false)__			return os.finish()__		} catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,input,stream,if,log,is,debug,enabled,log,debug,put,blob,stream,to,socket,get,local,socket,address,try,blob,output,stream,os,new,blob,output,stream,job,id,blob,type,socket,ioutils,copy,bytes,input,stream,os,false,return,os,finish,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1531721446;Uploads data from the given input stream to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param inputStream_the input stream to read the data from_@param blobType_whether the BLOB should become permanent or transient__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;BlobKey putInputStream(@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(inputStream)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB stream to {}.", socket.getLocalSocketAddress())__		}__		try (BlobOutputStream os = new BlobOutputStream(jobId, blobType, socket)) {_			IOUtils.copyBytes(inputStream, os, BUFFER_SIZE, false)__			return os.finish()__		} catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,input,stream,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,the,blob,should,become,permanent,or,transient,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,input,stream,if,log,is,debug,enabled,log,debug,put,blob,stream,to,socket,get,local,socket,address,try,blob,output,stream,os,new,blob,output,stream,job,id,blob,type,socket,ioutils,copy,bytes,input,stream,os,false,return,os,finish,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> public void put(final JobID jobId, final String key, final byte[] value, final int offset, final int len) 			throws IOException;1412605211;Uploads data from the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(final JobID jobId, final String key, final byte[] value, final int offset, final int len)_			throws IOException {__		if (key.length() > BlobServer.MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + BlobServer.MAX_KEY_LENGTH)__		}__		putBuffer(jobId, key, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,final,job,id,job,id,final,string,key,final,byte,value,final,int,offset,final,int,len,throws,ioexception,if,key,length,blob,server,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,blob,server,put,buffer,job,id,key,value,offset,len
BlobClient -> public void put(final JobID jobId, final String key, final byte[] value, final int offset, final int len) 			throws IOException;1418925511;Uploads data from the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload data from_@param offset_the read offset within the buffer_@param len_the number of bytes to upload from the buffer_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(final JobID jobId, final String key, final byte[] value, final int offset, final int len)_			throws IOException {__		if (key.length() > BlobServer.MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + BlobServer.MAX_KEY_LENGTH)__		}__		putBuffer(jobId, key, value, offset, len)__	};uploads,data,from,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,upload,from,the,buffer,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,final,job,id,job,id,final,string,key,final,byte,value,final,int,offset,final,int,len,throws,ioexception,if,key,length,blob,server,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,blob,server,put,buffer,job,id,key,value,offset,len
BlobClient -> public void deleteAll(JobID jobId) throws IOException;1424264340;Deletes all BLOBs belonging to the job with the given ID from the BLOB server__@param jobId_the job ID to identify the BLOBs to be deleted_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void deleteAll(JobID jobId) throws IOException {_		if (jobId == null) {_			throw new IllegalArgumentException("Argument jobID must not be null")__		}__		deleteInternal(jobId, null, null)__	};deletes,all,blobs,belonging,to,the,job,with,the,given,id,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blobs,to,be,deleted,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,all,job,id,job,id,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,argument,job,id,must,not,be,null,delete,internal,job,id,null,null
BlobClient -> public void deleteAll(JobID jobId) throws IOException;1427784999;Deletes all BLOBs belonging to the job with the given ID from the BLOB server__@param jobId_the job ID to identify the BLOBs to be deleted_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void deleteAll(JobID jobId) throws IOException {_		if (jobId == null) {_			throw new IllegalArgumentException("Argument jobID must not be null")__		}__		deleteInternal(jobId, null, null)__	};deletes,all,blobs,belonging,to,the,job,with,the,given,id,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blobs,to,be,deleted,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,all,job,id,job,id,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,argument,job,id,must,not,be,null,delete,internal,job,id,null,null
BlobClient -> public void deleteAll(JobID jobId) throws IOException;1468854249;Deletes all BLOBs belonging to the job with the given ID from the BLOB server__@param jobId_the job ID to identify the BLOBs to be deleted_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void deleteAll(JobID jobId) throws IOException {_		if (jobId == null) {_			throw new IllegalArgumentException("Argument jobID must not be null")__		}__		deleteInternal(jobId, null, null)__	};deletes,all,blobs,belonging,to,the,job,with,the,given,id,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blobs,to,be,deleted,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,all,job,id,job,id,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,argument,job,id,must,not,be,null,delete,internal,job,id,null,null
BlobClient -> public void deleteAll(JobID jobId) throws IOException;1476696544;Deletes all BLOBs belonging to the job with the given ID from the BLOB server__@param jobId_the job ID to identify the BLOBs to be deleted_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void deleteAll(JobID jobId) throws IOException {_		if (jobId == null) {_			throw new IllegalArgumentException("Argument jobID must not be null")__		}__		deleteInternal(jobId, null, null)__	};deletes,all,blobs,belonging,to,the,job,with,the,given,id,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blobs,to,be,deleted,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,all,job,id,job,id,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,argument,job,id,must,not,be,null,delete,internal,job,id,null,null
BlobClient -> public void deleteAll(JobID jobId) throws IOException;1487441974;Deletes all BLOBs belonging to the job with the given ID from the BLOB server__@param jobId_the job ID to identify the BLOBs to be deleted_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void deleteAll(JobID jobId) throws IOException {_		if (jobId == null) {_			throw new IllegalArgumentException("Argument jobID must not be null")__		}__		deleteInternal(jobId, null, null)__	};deletes,all,blobs,belonging,to,the,job,with,the,given,id,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blobs,to,be,deleted,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,all,job,id,job,id,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,argument,job,id,must,not,be,null,delete,internal,job,id,null,null
BlobClient -> public void deleteAll(JobID jobId) throws IOException;1494690800;Deletes all BLOBs belonging to the job with the given ID from the BLOB server__@param jobId_the job ID to identify the BLOBs to be deleted_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void deleteAll(JobID jobId) throws IOException {_		if (jobId == null) {_			throw new IllegalArgumentException("Argument jobID must not be null")__		}__		deleteInternal(jobId, null, null)__	};deletes,all,blobs,belonging,to,the,job,with,the,given,id,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blobs,to,be,deleted,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,all,job,id,job,id,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,argument,job,id,must,not,be,null,delete,internal,job,id,null,null
BlobClient -> public void deleteAll(JobID jobId) throws IOException;1495001945;Deletes all BLOBs belonging to the job with the given ID from the BLOB server__@param jobId_the job ID to identify the BLOBs to be deleted_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void deleteAll(JobID jobId) throws IOException {_		if (jobId == null) {_			throw new IllegalArgumentException("Argument jobID must not be null")__		}__		deleteInternal(jobId, null, null)__	};deletes,all,blobs,belonging,to,the,job,with,the,given,id,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blobs,to,be,deleted,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,all,job,id,job,id,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,argument,job,id,must,not,be,null,delete,internal,job,id,null,null
BlobClient -> public void deleteAll(JobID jobId) throws IOException;1499173045;Deletes all BLOBs belonging to the job with the given ID from the BLOB server__@param jobId_the job ID to identify the BLOBs to be deleted_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void deleteAll(JobID jobId) throws IOException {_		checkArgument(jobId != null, "Job id must not be null.")___		deleteInternal(jobId, null, null)__	};deletes,all,blobs,belonging,to,the,job,with,the,given,id,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blobs,to,be,deleted,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,all,job,id,job,id,throws,ioexception,check,argument,job,id,null,job,id,must,not,be,null,delete,internal,job,id,null,null
BlobClient -> public void deleteInternal(@Nullable JobID jobId, BlobKey key) throws IOException;1502701584;Deletes the BLOB identified by the given BLOB key and job ID from the BLOB server.__@param jobId_the ID of job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param key_the key to identify the BLOB__@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server or if the_BLOB server cannot delete the file;public void deleteInternal(@Nullable JobID jobId, BlobKey key) throws IOException {_		checkNotNull(key)___		try {_			final OutputStream outputStream = this.socket.getOutputStream()__			final InputStream inputStream = this.socket.getInputStream()___			_			outputStream.write(DELETE_OPERATION)___			_			if (jobId == null) {_				outputStream.write(CONTENT_NO_JOB)__			} else {_				outputStream.write(CONTENT_FOR_JOB)__				outputStream.write(jobId.getBytes())__			}_			key.writeToOutputStream(outputStream)___			_			receiveAndCheckGetResponse(inputStream)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("DELETE operation failed: " + t.getMessage(), t)__		}_	};deletes,the,blob,identified,by,the,given,blob,key,and,job,id,from,the,blob,server,param,job,id,the,id,of,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server,or,if,the,blob,server,cannot,delete,the,file;public,void,delete,internal,nullable,job,id,job,id,blob,key,key,throws,ioexception,check,not,null,key,try,final,output,stream,output,stream,this,socket,get,output,stream,final,input,stream,input,stream,this,socket,get,input,stream,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes,key,write,to,output,stream,output,stream,receive,and,check,get,response,input,stream,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,delete,operation,failed,t,get,message,t
BlobClient -> public void deleteInternal(@Nullable JobID jobId, BlobKey key) throws IOException;1503041372;Deletes the BLOB identified by the given BLOB key and job ID from the BLOB server.__@param jobId_the ID of job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param key_the key to identify the BLOB__@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server or if the_BLOB server cannot delete the file;public void deleteInternal(@Nullable JobID jobId, BlobKey key) throws IOException {_		checkNotNull(key)___		try {_			final OutputStream outputStream = this.socket.getOutputStream()__			final InputStream inputStream = this.socket.getInputStream()___			_			outputStream.write(DELETE_OPERATION)___			_			if (jobId == null) {_				outputStream.write(CONTENT_NO_JOB)__			} else {_				outputStream.write(CONTENT_FOR_JOB)__				outputStream.write(jobId.getBytes())__			}_			key.writeToOutputStream(outputStream)___			_			receiveAndCheckGetResponse(inputStream)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("DELETE operation failed: " + t.getMessage(), t)__		}_	};deletes,the,blob,identified,by,the,given,blob,key,and,job,id,from,the,blob,server,param,job,id,the,id,of,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server,or,if,the,blob,server,cannot,delete,the,file;public,void,delete,internal,nullable,job,id,job,id,blob,key,key,throws,ioexception,check,not,null,key,try,final,output,stream,output,stream,this,socket,get,output,stream,final,input,stream,input,stream,this,socket,get,input,stream,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes,key,write,to,output,stream,output,stream,receive,and,check,get,response,input,stream,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,delete,operation,failed,t,get,message,t
BlobClient -> public BlobKey put(final byte[] value) throws IOException;1412605211;Uploads the data of the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(final byte[] value) throws IOException {__		return put(value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,final,byte,value,throws,ioexception,return,put,value,0,value,length
BlobClient -> public BlobKey put(final byte[] value) throws IOException;1418925511;Uploads the data of the given byte array to the BLOB server in a content-addressable manner.__@param value_the buffer to upload_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public BlobKey put(final byte[] value) throws IOException {__		return put(value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,in,a,content,addressable,manner,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,blob,key,put,final,byte,value,throws,ioexception,return,put,value,0,value,length
BlobClient -> public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress, 			Configuration clientConfig, JobID jobId, List<Path> jars) throws IOException;1503041372;Uploads the JAR files to a {@link BlobServer} at the given address.__@param serverAddress_Server address of the {@link BlobServer}_@param clientConfig_Any additional configuration for the blob client_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param jars_List of JAR files to upload__@throws IOException_if the upload fails;public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress,_			Configuration clientConfig, JobID jobId, List<Path> jars) throws IOException {checkNotNull(jobId)__		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<BlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path jar : jars) {_					final FileSystem fs = jar.getFileSystem()__					FSDataInputStream is = null__					try {_						is = fs.open(jar)__						final BlobKey key = blobClient.putInputStream(jobId, is)__						blobKeys.add(key)__					} finally {_						if (is != null) {_							is.close()__						}_					}_				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,a,link,blob,server,at,the,given,address,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,jars,list,of,jar,files,to,upload,throws,ioexception,if,the,upload,fails;public,static,list,blob,key,upload,jar,files,inet,socket,address,server,address,configuration,client,config,job,id,job,id,list,path,jars,throws,ioexception,check,not,null,job,id,if,jars,is,empty,return,collections,empty,list,else,list,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,jar,jars,final,file,system,fs,jar,get,file,system,fsdata,input,stream,is,null,try,is,fs,open,jar,final,blob,key,key,blob,client,put,input,stream,job,id,is,blob,keys,add,key,finally,if,is,null,is,close,return,blob,keys
BlobClient -> public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress, 			Configuration clientConfig, JobID jobId, List<Path> jars) throws IOException;1507212387;Uploads the JAR files to the {@link PermanentBlobService} of the {@link BlobServer} at the_given address with HA as configured.__@param serverAddress_Server address of the {@link BlobServer}_@param clientConfig_Any additional configuration for the blob client_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param jars_List of JAR files to upload__@throws IOException_if the upload fails;public static List<BlobKey> uploadJarFiles(InetSocketAddress serverAddress,_			Configuration clientConfig, JobID jobId, List<Path> jars) throws IOException {checkNotNull(jobId)__		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<BlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path jar : jars) {_					final FileSystem fs = jar.getFileSystem()__					FSDataInputStream is = null__					try {_						is = fs.open(jar)__						final BlobKey key = blobClient.putInputStream(jobId, is, true)__						blobKeys.add(key)__					} finally {_						if (is != null) {_							is.close()__						}_					}_				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,the,link,permanent,blob,service,of,the,link,blob,server,at,the,given,address,with,ha,as,configured,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,jars,list,of,jar,files,to,upload,throws,ioexception,if,the,upload,fails;public,static,list,blob,key,upload,jar,files,inet,socket,address,server,address,configuration,client,config,job,id,job,id,list,path,jars,throws,ioexception,check,not,null,job,id,if,jars,is,empty,return,collections,empty,list,else,list,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,jar,jars,final,file,system,fs,jar,get,file,system,fsdata,input,stream,is,null,try,is,fs,open,jar,final,blob,key,key,blob,client,put,input,stream,job,id,is,true,blob,keys,add,key,finally,if,is,null,is,close,return,blob,keys
BlobClient -> private BlobKey putBuffer(final JobID jobId, final String key, final byte[] value, final int offset, final int len) 			throws IOException;1412605211;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@return the computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putBuffer(final JobID jobId, final String key, final byte[] value, final int offset, final int len)_			throws IOException {__		final OutputStream os = this.socket.getOutputStream()__		final MessageDigest md = (jobId == null || key == null) ? BlobUtils.createMessageDigest() :_				null__		final byte[] buf = new byte[AbstractID.SIZE]___		_		sendPutHeader(os, jobId, key, buf)___		_		int remainingBytes = value.length__		int bytesSent = 0___		while (remainingBytes > 0) {__			final int bytesToSend = Math.min(BlobServer.BUFFER_SIZE, remainingBytes)__			BlobServer.writeLength(bytesToSend, buf, os)___			os.write(value, offset + bytesSent, bytesToSend)___			_			if (md != null) {_				md.update(value, offset + bytesSent, bytesToSend)__			}__			remainingBytes -= bytesToSend__			bytesSent += bytesToSend__		}__		if (md == null) {_			return null__		}__		_		final InputStream is = this.socket.getInputStream()__		final BlobKey localKey = new BlobKey(md.digest())__		final BlobKey remoteKey = BlobKey.readFromInputStream(is)___		if (!localKey.equals(remoteKey)) {_			throw new IOException("Detected data corruption during transfer")__		}__		return localKey__	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,return,the,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,buffer,final,job,id,job,id,final,string,key,final,byte,value,final,int,offset,final,int,len,throws,ioexception,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,key,null,blob,utils,create,message,digest,null,final,byte,buf,new,byte,abstract,id,size,send,put,header,os,job,id,key,buf,int,remaining,bytes,value,length,int,bytes,sent,0,while,remaining,bytes,0,final,int,bytes,to,send,math,min,blob,server,remaining,bytes,blob,server,write,length,bytes,to,send,buf,os,os,write,value,offset,bytes,sent,bytes,to,send,if,md,null,md,update,value,offset,bytes,sent,bytes,to,send,remaining,bytes,bytes,to,send,bytes,sent,bytes,to,send,if,md,null,return,null,final,input,stream,is,this,socket,get,input,stream,final,blob,key,local,key,new,blob,key,md,digest,final,blob,key,remote,key,blob,key,read,from,input,stream,is,if,local,key,equals,remote,key,throw,new,ioexception,detected,data,corruption,during,transfer,return,local,key
BlobClient -> private BlobKey putBuffer(final JobID jobId, final String key, final byte[] value, final int offset, final int len) 			throws IOException;1418925511;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param key_the key to identify the BLOB on the server or <code>null</code> to store the BLOB in a content-addressable_manner_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@return the computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putBuffer(final JobID jobId, final String key, final byte[] value, final int offset, final int len)_			throws IOException {__		final OutputStream os = this.socket.getOutputStream()__		final MessageDigest md = (jobId == null || key == null) ? BlobUtils.createMessageDigest() :_				null__		final byte[] buf = new byte[AbstractID.SIZE]___		_		sendPutHeader(os, jobId, key, buf)___		_		int remainingBytes = value.length__		int bytesSent = 0___		while (remainingBytes > 0) {__			final int bytesToSend = Math.min(BlobServer.BUFFER_SIZE, remainingBytes)__			BlobServer.writeLength(bytesToSend, buf, os)___			os.write(value, offset + bytesSent, bytesToSend)___			_			if (md != null) {_				md.update(value, offset + bytesSent, bytesToSend)__			}__			remainingBytes -= bytesToSend__			bytesSent += bytesToSend__		}__		if (md == null) {_			return null__		}__		_		final InputStream is = this.socket.getInputStream()__		final BlobKey localKey = new BlobKey(md.digest())__		final BlobKey remoteKey = BlobKey.readFromInputStream(is)___		if (!localKey.equals(remoteKey)) {_			throw new IOException("Detected data corruption during transfer")__		}__		return localKey__	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,key,the,key,to,identify,the,blob,on,the,server,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,return,the,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,buffer,final,job,id,job,id,final,string,key,final,byte,value,final,int,offset,final,int,len,throws,ioexception,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,key,null,blob,utils,create,message,digest,null,final,byte,buf,new,byte,abstract,id,size,send,put,header,os,job,id,key,buf,int,remaining,bytes,value,length,int,bytes,sent,0,while,remaining,bytes,0,final,int,bytes,to,send,math,min,blob,server,remaining,bytes,blob,server,write,length,bytes,to,send,buf,os,os,write,value,offset,bytes,sent,bytes,to,send,if,md,null,md,update,value,offset,bytes,sent,bytes,to,send,remaining,bytes,bytes,to,send,bytes,sent,bytes,to,send,if,md,null,return,null,final,input,stream,is,this,socket,get,input,stream,final,blob,key,local,key,new,blob,key,md,digest,final,blob,key,remote,key,blob,key,read,from,input,stream,is,if,local,key,equals,remote,key,throw,new,ioexception,detected,data,corruption,during,transfer,return,local,key
BlobClient -> private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException;1424264340;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobID_the job ID identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used_to identify the BLOB on the server instead_@param key_the key identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used to_identify the BLOB on the server instead_@param blobKey_the BLOB key to identify the BLOB to download if either the job ID or the regular key are_<code>null</code>_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException {__		_		outputStream.write(GET_OPERATION)___		_		if (jobID == null || key == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__			blobKey.writeToOutputStream(outputStream)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			outputStream.write(jobID.getBytes())__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,the,job,id,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,key,the,key,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,blob,key,the,blob,key,to,identify,the,blob,to,download,if,either,the,job,id,or,the,regular,key,are,code,null,code,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,get,header,output,stream,output,stream,job,id,job,id,string,key,blob,key,blob,key,throws,ioexception,output,stream,write,if,job,id,null,key,null,output,stream,write,blob,key,write,to,output,stream,output,stream,else,output,stream,write,output,stream,write,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException;1427784999;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobID_the job ID identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used_to identify the BLOB on the server instead_@param key_the key identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used to_identify the BLOB on the server instead_@param blobKey_the BLOB key to identify the BLOB to download if either the job ID or the regular key are_<code>null</code>_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException {__		_		outputStream.write(GET_OPERATION)___		_		if (jobID == null || key == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__			blobKey.writeToOutputStream(outputStream)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			outputStream.write(jobID.getBytes())__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,the,job,id,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,key,the,key,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,blob,key,the,blob,key,to,identify,the,blob,to,download,if,either,the,job,id,or,the,regular,key,are,code,null,code,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,get,header,output,stream,output,stream,job,id,job,id,string,key,blob,key,blob,key,throws,ioexception,output,stream,write,if,job,id,null,key,null,output,stream,write,blob,key,write,to,output,stream,output,stream,else,output,stream,write,output,stream,write,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException;1468854249;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobID_the job ID identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used_to identify the BLOB on the server instead_@param key_the key identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used to_identify the BLOB on the server instead_@param blobKey_the BLOB key to identify the BLOB to download if either the job ID or the regular key are_<code>null</code>_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException {__		_		outputStream.write(GET_OPERATION)___		_		if (jobID == null || key == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__			blobKey.writeToOutputStream(outputStream)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			outputStream.write(jobID.getBytes())__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,the,job,id,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,key,the,key,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,blob,key,the,blob,key,to,identify,the,blob,to,download,if,either,the,job,id,or,the,regular,key,are,code,null,code,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,get,header,output,stream,output,stream,job,id,job,id,string,key,blob,key,blob,key,throws,ioexception,output,stream,write,if,job,id,null,key,null,output,stream,write,blob,key,write,to,output,stream,output,stream,else,output,stream,write,output,stream,write,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException;1476696544;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobID_the job ID identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used_to identify the BLOB on the server instead_@param key_the key identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used to_identify the BLOB on the server instead_@param blobKey_the BLOB key to identify the BLOB to download if either the job ID or the regular key are_<code>null</code>_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException {__		_		outputStream.write(GET_OPERATION)___		_		if (jobID == null || key == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__			blobKey.writeToOutputStream(outputStream)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			outputStream.write(jobID.getBytes())__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,the,job,id,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,key,the,key,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,blob,key,the,blob,key,to,identify,the,blob,to,download,if,either,the,job,id,or,the,regular,key,are,code,null,code,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,get,header,output,stream,output,stream,job,id,job,id,string,key,blob,key,blob,key,throws,ioexception,output,stream,write,if,job,id,null,key,null,output,stream,write,blob,key,write,to,output,stream,output,stream,else,output,stream,write,output,stream,write,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException;1487441974;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobID_the job ID identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used_to identify the BLOB on the server instead_@param key_the key identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used to_identify the BLOB on the server instead_@param blobKey_the BLOB key to identify the BLOB to download if either the job ID or the regular key are_<code>null</code>_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException {__		_		outputStream.write(GET_OPERATION)___		_		if (jobID == null || key == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__			blobKey.writeToOutputStream(outputStream)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			outputStream.write(jobID.getBytes())__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,the,job,id,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,key,the,key,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,blob,key,the,blob,key,to,identify,the,blob,to,download,if,either,the,job,id,or,the,regular,key,are,code,null,code,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,get,header,output,stream,output,stream,job,id,job,id,string,key,blob,key,blob,key,throws,ioexception,output,stream,write,if,job,id,null,key,null,output,stream,write,blob,key,write,to,output,stream,output,stream,else,output,stream,write,output,stream,write,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException;1494690800;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobID_the job ID identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used_to identify the BLOB on the server instead_@param key_the key identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used to_identify the BLOB on the server instead_@param blobKey_the BLOB key to identify the BLOB to download if either the job ID or the regular key are_<code>null</code>_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException {__		_		outputStream.write(GET_OPERATION)___		_		if (jobID == null || key == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__			blobKey.writeToOutputStream(outputStream)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			outputStream.write(jobID.getBytes())__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,the,job,id,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,key,the,key,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,blob,key,the,blob,key,to,identify,the,blob,to,download,if,either,the,job,id,or,the,regular,key,are,code,null,code,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,get,header,output,stream,output,stream,job,id,job,id,string,key,blob,key,blob,key,throws,ioexception,output,stream,write,if,job,id,null,key,null,output,stream,write,blob,key,write,to,output,stream,output,stream,else,output,stream,write,output,stream,write,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException;1495001945;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobID_the job ID identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used_to identify the BLOB on the server instead_@param key_the key identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used to_identify the BLOB on the server instead_@param blobKey_the BLOB key to identify the BLOB to download if either the job ID or the regular key are_<code>null</code>_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException {__		_		outputStream.write(GET_OPERATION)___		_		if (jobID == null || key == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__			blobKey.writeToOutputStream(outputStream)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			outputStream.write(jobID.getBytes())__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,the,job,id,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,key,the,key,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,blob,key,the,blob,key,to,identify,the,blob,to,download,if,either,the,job,id,or,the,regular,key,are,code,null,code,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,get,header,output,stream,output,stream,job,id,job,id,string,key,blob,key,blob,key,throws,ioexception,output,stream,write,if,job,id,null,key,null,output,stream,write,blob,key,write,to,output,stream,output,stream,else,output,stream,write,output,stream,write,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException;1499173045;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobID_the job ID identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used_to identify the BLOB on the server instead_@param key_the key identifying the BLOB to download or <code>null</code> to indicate the BLOB key should be used to_identify the BLOB on the server instead_@param blobKey_the BLOB key to identify the BLOB to download if either the job ID or the regular key are_<code>null</code>_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendGetHeader(OutputStream outputStream, JobID jobID, String key, BlobKey blobKey) throws IOException {__		_		outputStream.write(GET_OPERATION)___		_		if (jobID == null || key == null) {_			outputStream.write(CONTENT_ADDRESSABLE)__			blobKey.writeToOutputStream(outputStream)__		}_		else {_			outputStream.write(NAME_ADDRESSABLE)__			_			outputStream.write(jobID.getBytes())__			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			writeLength(keyBytes.length, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,the,job,id,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,key,the,key,identifying,the,blob,to,download,or,code,null,code,to,indicate,the,blob,key,should,be,used,to,identify,the,blob,on,the,server,instead,param,blob,key,the,blob,key,to,identify,the,blob,to,download,if,either,the,job,id,or,the,regular,key,are,code,null,code,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,get,header,output,stream,output,stream,job,id,job,id,string,key,blob,key,blob,key,throws,ioexception,output,stream,write,if,job,id,null,key,null,output,stream,write,blob,key,write,to,output,stream,output,stream,else,output,stream,write,output,stream,write,job,id,get,bytes,byte,key,bytes,key,get,bytes,blob,utils,write,length,key,bytes,length,output,stream,output,stream,write,key,bytes
BlobClient -> InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1502701584;Downloads the BLOB identified by the given BLOB key from the BLOB server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return an input stream to read the retrieved data from__@throws FileNotFoundException_if there is no such file__@throws IOException_if an I/O error occurs during the download;InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug("GET BLOB {}/{} from {}.", jobId, blobKey,_				socket.getLocalSocketAddress())__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, jobId, blobKey)__			receiveAndCheckGetResponse(is)___			return new BlobInputStream(is, blobKey)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,an,input,stream,to,read,the,retrieved,data,from,throws,file,not,found,exception,if,there,is,no,such,file,throws,ioexception,if,an,i,o,error,occurs,during,the,download;input,stream,get,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,get,blob,from,job,id,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,blob,key,receive,and,check,get,response,is,return,new,blob,input,stream,is,blob,key,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1503041372;Downloads the BLOB identified by the given BLOB key from the BLOB server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return an input stream to read the retrieved data from__@throws FileNotFoundException_if there is no such file__@throws IOException_if an I/O error occurs during the download;InputStream getInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		if (LOG.isDebugEnabled()) {_			LOG.debug("GET BLOB {}/{} from {}.", jobId, blobKey,_				socket.getLocalSocketAddress())__		}__		try {_			OutputStream os = this.socket.getOutputStream()__			InputStream is = this.socket.getInputStream()___			_			sendGetHeader(os, jobId, blobKey)__			receiveAndCheckGetResponse(is)___			return new BlobInputStream(is, blobKey)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("GET operation failed: " + t.getMessage(), t)__		}_	};downloads,the,blob,identified,by,the,given,blob,key,from,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,an,input,stream,to,read,the,retrieved,data,from,throws,file,not,found,exception,if,there,is,no,such,file,throws,ioexception,if,an,i,o,error,occurs,during,the,download;input,stream,get,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,log,debug,get,blob,from,job,id,blob,key,socket,get,local,socket,address,try,output,stream,os,this,socket,get,output,stream,input,stream,is,this,socket,get,input,stream,send,get,header,os,job,id,blob,key,receive,and,check,get,response,is,return,new,blob,input,stream,is,blob,key,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,get,operation,failed,t,get,message,t
BlobClient -> private static void sendGetHeader(OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey) throws IOException;1502701584;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private static void sendGetHeader(OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkNotNull(blobKey)___		_		outputStream.write(GET_OPERATION)___		_		if (jobId == null) {_			outputStream.write(CONTENT_NO_JOB)__		} else {_			outputStream.write(CONTENT_FOR_JOB)__			outputStream.write(jobId.getBytes())__		}_		blobKey.writeToOutputStream(outputStream)__	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,static,void,send,get,header,output,stream,output,stream,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,not,null,blob,key,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes,blob,key,write,to,output,stream,output,stream
BlobClient -> private static void sendGetHeader(OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey) throws IOException;1503041372;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private static void sendGetHeader(OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkNotNull(blobKey)___		_		outputStream.write(GET_OPERATION)___		_		if (jobId == null) {_			outputStream.write(CONTENT_NO_JOB)__		} else {_			outputStream.write(CONTENT_FOR_JOB)__			outputStream.write(jobId.getBytes())__		}_		blobKey.writeToOutputStream(outputStream)__	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,static,void,send,get,header,output,stream,output,stream,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,not,null,blob,key,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes,blob,key,write,to,output,stream,output,stream
BlobClient -> private BlobKey putBuffer(JobID jobId, byte[] value, int offset, int len) throws IOException;1499789965;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@return the computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putBuffer(JobID jobId, byte[] value, int offset, int len) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB buffer (%d bytes) to %s",_						len, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null___			_			sendPutHeader(os, jobId)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				if (md != null) {_					md.update(value, offset, bytesToSend)__				}__				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,return,the,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,buffer,job,id,job,id,byte,value,int,offset,int,len,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,buffer,d,bytes,to,s,len,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,send,put,header,os,job,id,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,if,md,null,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putBuffer(JobID jobId, byte[] value, int offset, int len) throws IOException;1502355408;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to or <code>null</code> to store the BLOB in a content-addressable_manner_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer_@return the computed BLOB key if the BLOB has been stored in a content-addressable manner, <code>null</code>_otherwise_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putBuffer(JobID jobId, byte[] value, int offset, int len) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}__		if (LOG.isDebugEnabled()) {_			if (jobId == null) {_				LOG.debug(String.format("PUT content addressable BLOB buffer (%d bytes) to %s",_						len, socket.getLocalSocketAddress()))__			}_		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = jobId == null ? BlobUtils.createMessageDigest() : null___			_			sendPutHeader(os, jobId)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				if (md != null) {_					md.update(value, offset, bytesToSend)__				}__				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receivePutResponseAndCompare(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,code,null,code,to,store,the,blob,in,a,content,addressable,manner,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,return,the,computed,blob,key,if,the,blob,has,been,stored,in,a,content,addressable,manner,code,null,code,otherwise,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,buffer,job,id,job,id,byte,value,int,offset,int,len,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,if,log,is,debug,enabled,if,job,id,null,log,debug,string,format,put,content,addressable,blob,buffer,d,bytes,to,s,len,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,job,id,null,blob,utils,create,message,digest,null,send,put,header,os,job,id,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,if,md,null,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,put,response,and,compare,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> public void put(JobID jobId, String key, InputStream inputStream) throws IOException;1424264340;Uploads data from the given input stream to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param inputStream_the input stream to read the data from_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public void put(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putInputStream(jobId, key, inputStream)__	};uploads,data,from,the,given,input,stream,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,input,stream,the,input,stream,to,read,the,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,input,stream,job,id,key,input,stream
BlobClient -> public void put(JobID jobId, String key, InputStream inputStream) throws IOException;1427784999;Uploads data from the given input stream to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param inputStream_the input stream to read the data from_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public void put(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putInputStream(jobId, key, inputStream)__	};uploads,data,from,the,given,input,stream,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,input,stream,the,input,stream,to,read,the,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,input,stream,job,id,key,input,stream
BlobClient -> public void put(JobID jobId, String key, InputStream inputStream) throws IOException;1468854249;Uploads data from the given input stream to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param inputStream_the input stream to read the data from_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public void put(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putInputStream(jobId, key, inputStream)__	};uploads,data,from,the,given,input,stream,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,input,stream,the,input,stream,to,read,the,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,input,stream,job,id,key,input,stream
BlobClient -> public void put(JobID jobId, String key, InputStream inputStream) throws IOException;1476696544;Uploads data from the given input stream to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param inputStream_the input stream to read the data from_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public void put(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putInputStream(jobId, key, inputStream)__	};uploads,data,from,the,given,input,stream,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,input,stream,the,input,stream,to,read,the,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,input,stream,job,id,key,input,stream
BlobClient -> public void put(JobID jobId, String key, InputStream inputStream) throws IOException;1487441974;Uploads data from the given input stream to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param inputStream_the input stream to read the data from_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public void put(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putInputStream(jobId, key, inputStream)__	};uploads,data,from,the,given,input,stream,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,input,stream,the,input,stream,to,read,the,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,input,stream,job,id,key,input,stream
BlobClient -> public void put(JobID jobId, String key, InputStream inputStream) throws IOException;1494690800;Uploads data from the given input stream to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param inputStream_the input stream to read the data from_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public void put(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putInputStream(jobId, key, inputStream)__	};uploads,data,from,the,given,input,stream,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,input,stream,the,input,stream,to,read,the,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,input,stream,job,id,key,input,stream
BlobClient -> public void put(JobID jobId, String key, InputStream inputStream) throws IOException;1495001945;Uploads data from the given input stream to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param inputStream_the input stream to read the data from_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public void put(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putInputStream(jobId, key, inputStream)__	};uploads,data,from,the,given,input,stream,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,input,stream,the,input,stream,to,read,the,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,input,stream,job,id,key,input,stream
BlobClient -> public void put(JobID jobId, String key, InputStream inputStream) throws IOException;1499173045;Uploads data from the given input stream to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param inputStream_the input stream to read the data from_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public void put(JobID jobId, String key, InputStream inputStream) throws IOException {_		if (key.length() > MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + MAX_KEY_LENGTH)__		}__		putInputStream(jobId, key, inputStream)__	};uploads,data,from,the,given,input,stream,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,input,stream,the,input,stream,to,read,the,data,from,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,void,put,job,id,job,id,string,key,input,stream,input,stream,throws,ioexception,if,key,length,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,put,input,stream,job,id,key,input,stream
BlobClient -> public BlobClient(final InetSocketAddress serverAddress) throws IOException;1412605211;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(final InetSocketAddress serverAddress) throws IOException {__		this.socket = new Socket()__		this.socket.connect(serverAddress)__	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,final,inet,socket,address,server,address,throws,ioexception,this,socket,new,socket,this,socket,connect,server,address
BlobClient -> public BlobClient(final InetSocketAddress serverAddress) throws IOException;1418925511;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(final InetSocketAddress serverAddress) throws IOException {__		this.socket = new Socket()__		try {_			this.socket.connect(serverAddress)__		}catch(IOException e){_			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,final,inet,socket,address,server,address,throws,ioexception,this,socket,new,socket,try,this,socket,connect,server,address,catch,ioexception,e,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, int offset, int len) throws IOException;1502701584;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, int offset, int len) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(value)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB buffer ({} bytes) to {}.", len, socket.getLocalSocketAddress())__		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = BlobUtils.createMessageDigest()___			_			sendPutHeader(os, jobId)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				_				_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				md.update(value, offset, bytesToSend)___				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receiveAndCheckPutResponse(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,int,offset,int,len,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,value,if,log,is,debug,enabled,log,debug,put,blob,buffer,bytes,to,len,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,blob,utils,create,message,digest,send,put,header,os,job,id,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,and,check,put,response,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, int offset, int len) throws IOException;1503041372;Uploads data from the given byte buffer to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param value_the buffer to read the data from_@param offset_the read offset within the buffer_@param len_the number of bytes to read from the buffer__@return the computed BLOB key of the uploaded BLOB__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, int offset, int len) throws IOException {_		if (this.socket.isClosed()) {_			throw new IllegalStateException("BLOB Client is not connected. " +_					"Client has been shut down or encountered an error before.")__		}_		checkNotNull(value)___		if (LOG.isDebugEnabled()) {_			LOG.debug("PUT BLOB buffer (" + len + " bytes) to " + socket.getLocalSocketAddress() + ".")__		}__		try {_			final OutputStream os = this.socket.getOutputStream()__			final MessageDigest md = BlobUtils.createMessageDigest()___			_			sendPutHeader(os, jobId)___			_			int remainingBytes = len___			while (remainingBytes > 0) {_				_				_				final int bytesToSend = Math.min(BUFFER_SIZE, remainingBytes)__				writeLength(bytesToSend, os)___				os.write(value, offset, bytesToSend)___				_				md.update(value, offset, bytesToSend)___				remainingBytes -= bytesToSend__				offset += bytesToSend__			}_			_			writeLength(-1, os)___			_			final InputStream is = this.socket.getInputStream()__			return receiveAndCheckPutResponse(is, md)__		}_		catch (Throwable t) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("PUT operation failed: " + t.getMessage(), t)__		}_	};uploads,data,from,the,given,byte,buffer,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,value,the,buffer,to,read,the,data,from,param,offset,the,read,offset,within,the,buffer,param,len,the,number,of,bytes,to,read,from,the,buffer,return,the,computed,blob,key,of,the,uploaded,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,int,offset,int,len,throws,ioexception,if,this,socket,is,closed,throw,new,illegal,state,exception,blob,client,is,not,connected,client,has,been,shut,down,or,encountered,an,error,before,check,not,null,value,if,log,is,debug,enabled,log,debug,put,blob,buffer,len,bytes,to,socket,get,local,socket,address,try,final,output,stream,os,this,socket,get,output,stream,final,message,digest,md,blob,utils,create,message,digest,send,put,header,os,job,id,int,remaining,bytes,len,while,remaining,bytes,0,final,int,bytes,to,send,math,min,remaining,bytes,write,length,bytes,to,send,os,os,write,value,offset,bytes,to,send,md,update,value,offset,bytes,to,send,remaining,bytes,bytes,to,send,offset,bytes,to,send,write,length,1,os,final,input,stream,is,this,socket,get,input,stream,return,receive,and,check,put,response,is,md,catch,throwable,t,blob,utils,close,silently,socket,log,throw,new,ioexception,put,operation,failed,t,get,message,t
BlobClient -> private void sendPutHeader(OutputStream outputStream, JobID jobID) throws IOException;1499789965;Constructs and writes the header data for a PUT request to the given output stream._NOTE: If the jobId and key are null, we send the data to the content addressable section.__@param outputStream_the output stream to write the PUT header data to_@param jobID_the ID of job the BLOB belongs to or <code>null</code> to indicate the upload of a_content-addressable BLOB_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendPutHeader(OutputStream outputStream, JobID jobID) throws IOException {_		checkArgument(jobID == null)___		_		outputStream.write(PUT_OPERATION)___		_		outputStream.write(CONTENT_ADDRESSABLE)__	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,note,if,the,job,id,and,key,are,null,we,send,the,data,to,the,content,addressable,section,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,put,header,output,stream,output,stream,job,id,job,id,throws,ioexception,check,argument,job,id,null,output,stream,write,output,stream,write
BlobClient -> private void sendPutHeader(OutputStream outputStream, JobID jobID) throws IOException;1502355408;Constructs and writes the header data for a PUT request to the given output stream._NOTE: If the jobId and key are null, we send the data to the content addressable section.__@param outputStream_the output stream to write the PUT header data to_@param jobID_the ID of job the BLOB belongs to or <code>null</code> to indicate the upload of a_content-addressable BLOB_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendPutHeader(OutputStream outputStream, JobID jobID) throws IOException {_		checkArgument(jobID == null)___		_		outputStream.write(PUT_OPERATION)___		_		outputStream.write(CONTENT_ADDRESSABLE)__	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,note,if,the,job,id,and,key,are,null,we,send,the,data,to,the,content,addressable,section,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,put,header,output,stream,output,stream,job,id,job,id,throws,ioexception,check,argument,job,id,null,output,stream,write,output,stream,write
BlobClient -> public void put(final JobID jobId, final String key, final byte[] value) throws IOException;1412605211;Uploads the data of the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(final JobID jobId, final String key, final byte[] value) throws IOException {__		put(jobId, key, value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,final,job,id,job,id,final,string,key,final,byte,value,throws,ioexception,put,job,id,key,value,0,value,length
BlobClient -> public void put(final JobID jobId, final String key, final byte[] value) throws IOException;1418925511;Uploads the data of the given byte array to the BLOB server and stores it under the given job ID and key.__@param jobId_the job ID to identify the uploaded data_@param key_the key to identify the uploaded data_@param value_the buffer to upload_@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;public void put(final JobID jobId, final String key, final byte[] value) throws IOException {__		put(jobId, key, value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,to,the,blob,server,and,stores,it,under,the,given,job,id,and,key,param,job,id,the,job,id,to,identify,the,uploaded,data,param,key,the,key,to,identify,the,uploaded,data,param,value,the,buffer,to,upload,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;public,void,put,final,job,id,job,id,final,string,key,final,byte,value,throws,ioexception,put,job,id,key,value,0,value,length
BlobClient -> @VisibleForTesting 	public BlobKey put(@Nullable JobID jobId, byte[] value) throws IOException;1502701584;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param value_the buffer to upload__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;@VisibleForTesting_	public BlobKey put(@Nullable JobID jobId, byte[] value) throws IOException {_		return put(jobId, value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;visible,for,testing,public,blob,key,put,nullable,job,id,job,id,byte,value,throws,ioexception,return,put,job,id,value,0,value,length
BlobClient -> @VisibleForTesting 	public BlobKey put(@Nullable JobID jobId, byte[] value) throws IOException;1503041372;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to (or <tt>null</tt> if job-unrelated)_@param value_the buffer to upload__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while uploading the data to the BLOB server;@VisibleForTesting_	public BlobKey put(@Nullable JobID jobId, byte[] value) throws IOException {_		return put(jobId, value, 0, value.length)__	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,uploading,the,data,to,the,blob,server;visible,for,testing,public,blob,key,put,nullable,job,id,job,id,byte,value,throws,ioexception,return,put,job,id,value,0,value,length
BlobClient -> private static BlobKey receiveAndCheckPutResponse( 			InputStream is, MessageDigest md, BlobKey.BlobType blobType) 			throws IOException;1507212387;Reads the response from the input stream and throws in case of errors.__@param is_stream to read from_@param md_message digest to check the response against_@param blobType_whether the BLOB should be permanent or transient__@throws IOException_if the response is an error, the message digest does not match or reading the response_failed;private static BlobKey receiveAndCheckPutResponse(_			InputStream is, MessageDigest md, BlobKey.BlobType blobType)_			throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		else if (response == RETURN_OKAY) {__			BlobKey remoteKey = BlobKey.readFromInputStream(is)__			BlobKey localKey = BlobKey.createKey(blobType, md.digest())___			if (!localKey.equals(remoteKey)) {_				throw new IOException("Detected data corruption during transfer")__			}__			return localKey__		}_		else if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else {_			throw new IOException("Unrecognized response: " + response + '.')__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,param,md,message,digest,to,check,the,response,against,param,blob,type,whether,the,blob,should,be,permanent,or,transient,throws,ioexception,if,the,response,is,an,error,the,message,digest,does,not,match,or,reading,the,response,failed;private,static,blob,key,receive,and,check,put,response,input,stream,is,message,digest,md,blob,key,blob,type,blob,type,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,else,if,response,blob,key,remote,key,blob,key,read,from,input,stream,is,blob,key,local,key,blob,key,create,key,blob,type,md,digest,if,local,key,equals,remote,key,throw,new,ioexception,detected,data,corruption,during,transfer,return,local,key,else,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,throw,new,ioexception,unrecognized,response,response
BlobClient -> private static BlobKey receiveAndCheckPutResponse( 			InputStream is, MessageDigest md, BlobKey.BlobType blobType) 			throws IOException;1508138617;Reads the response from the input stream and throws in case of errors.__@param is_stream to read from_@param md_message digest to check the response against_@param blobType_whether the BLOB should be permanent or transient__@throws IOException_if the response is an error, the message digest does not match or reading the response_failed;private static BlobKey receiveAndCheckPutResponse(_			InputStream is, MessageDigest md, BlobKey.BlobType blobType)_			throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		else if (response == RETURN_OKAY) {__			BlobKey remoteKey = BlobKey.readFromInputStream(is)__			byte[] localHash = md.digest()___			if (blobType != remoteKey.getType()) {_				throw new IOException("Detected data corruption during transfer")__			}_			if (!Arrays.equals(localHash, remoteKey.getHash())) {_				throw new IOException("Detected data corruption during transfer")__			}__			return remoteKey__		}_		else if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else {_			throw new IOException("Unrecognized response: " + response + '.')__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,param,md,message,digest,to,check,the,response,against,param,blob,type,whether,the,blob,should,be,permanent,or,transient,throws,ioexception,if,the,response,is,an,error,the,message,digest,does,not,match,or,reading,the,response,failed;private,static,blob,key,receive,and,check,put,response,input,stream,is,message,digest,md,blob,key,blob,type,blob,type,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,else,if,response,blob,key,remote,key,blob,key,read,from,input,stream,is,byte,local,hash,md,digest,if,blob,type,remote,key,get,type,throw,new,ioexception,detected,data,corruption,during,transfer,if,arrays,equals,local,hash,remote,key,get,hash,throw,new,ioexception,detected,data,corruption,during,transfer,return,remote,key,else,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,throw,new,ioexception,unrecognized,response,response
BlobClient -> private static BlobKey receiveAndCheckPutResponse( 			InputStream is, MessageDigest md, BlobKey.BlobType blobType) 			throws IOException;1515428991;Reads the response from the input stream and throws in case of errors.__@param is_stream to read from_@param md_message digest to check the response against_@param blobType_whether the BLOB should be permanent or transient__@throws IOException_if the response is an error, the message digest does not match or reading the response_failed;private static BlobKey receiveAndCheckPutResponse(_			InputStream is, MessageDigest md, BlobKey.BlobType blobType)_			throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		else if (response == RETURN_OKAY) {__			BlobKey remoteKey = BlobKey.readFromInputStream(is)__			byte[] localHash = md.digest()___			if (blobType != remoteKey.getType()) {_				throw new IOException("Detected data corruption during transfer")__			}_			if (!Arrays.equals(localHash, remoteKey.getHash())) {_				throw new IOException("Detected data corruption during transfer")__			}__			return remoteKey__		}_		else if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else {_			throw new IOException("Unrecognized response: " + response + '.')__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,param,md,message,digest,to,check,the,response,against,param,blob,type,whether,the,blob,should,be,permanent,or,transient,throws,ioexception,if,the,response,is,an,error,the,message,digest,does,not,match,or,reading,the,response,failed;private,static,blob,key,receive,and,check,put,response,input,stream,is,message,digest,md,blob,key,blob,type,blob,type,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,else,if,response,blob,key,remote,key,blob,key,read,from,input,stream,is,byte,local,hash,md,digest,if,blob,type,remote,key,get,type,throw,new,ioexception,detected,data,corruption,during,transfer,if,arrays,equals,local,hash,remote,key,get,hash,throw,new,ioexception,detected,data,corruption,during,transfer,return,remote,key,else,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,throw,new,ioexception,unrecognized,response,response
BlobClient -> private void sendPutHeader(final OutputStream outputStream, final JobID jobID, final String key, final byte[] buf) 			throws IOException;1412605211;Constructs and writes the header data for a PUT request to the given output stream.__@param outputStream_the output stream to write the PUT header data to_@param jobID_the ID of job the BLOB belongs to or <code>null</code> to indicate the upload of a_content-addressable BLOB_@param key_the key of the BLOB to upload or <code>null</code> to indicate the upload of a content-addressable BLOB_@param buf_an auxiliary buffer used for data serialization_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendPutHeader(final OutputStream outputStream, final JobID jobID, final String key, final byte[] buf)_			throws IOException {__		_		outputStream.write(BlobServer.PUT_OPERATION)___		_		if (jobID == null || key == null) {_			outputStream.write(1)__		} else {_			outputStream.write(0)__			_			final ByteBuffer bb = ByteBuffer.wrap(buf)__			jobID.write(bb)__			outputStream.write(buf)___			_			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			BlobServer.writeLength(keyBytes.length, buf, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,param,key,the,key,of,the,blob,to,upload,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,param,buf,an,auxiliary,buffer,used,for,data,serialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,put,header,final,output,stream,output,stream,final,job,id,job,id,final,string,key,final,byte,buf,throws,ioexception,output,stream,write,blob,server,if,job,id,null,key,null,output,stream,write,1,else,output,stream,write,0,final,byte,buffer,bb,byte,buffer,wrap,buf,job,id,write,bb,output,stream,write,buf,byte,key,bytes,key,get,bytes,blob,utils,blob,server,write,length,key,bytes,length,buf,output,stream,output,stream,write,key,bytes
BlobClient -> private void sendPutHeader(final OutputStream outputStream, final JobID jobID, final String key, final byte[] buf) 			throws IOException;1418925511;Constructs and writes the header data for a PUT request to the given output stream.__@param outputStream_the output stream to write the PUT header data to_@param jobID_the ID of job the BLOB belongs to or <code>null</code> to indicate the upload of a_content-addressable BLOB_@param key_the key of the BLOB to upload or <code>null</code> to indicate the upload of a content-addressable BLOB_@param buf_an auxiliary buffer used for data serialization_@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private void sendPutHeader(final OutputStream outputStream, final JobID jobID, final String key, final byte[] buf)_			throws IOException {__		_		outputStream.write(BlobServer.PUT_OPERATION)___		_		if (jobID == null || key == null) {_			outputStream.write(1)__		} else {_			outputStream.write(0)__			_			final ByteBuffer bb = ByteBuffer.wrap(buf)__			jobID.write(bb)__			outputStream.write(buf)___			_			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			BlobServer.writeLength(keyBytes.length, buf, outputStream)__			outputStream.write(keyBytes)__		}_	};constructs,and,writes,the,header,data,for,a,put,request,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,put,header,data,to,param,job,id,the,id,of,job,the,blob,belongs,to,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,param,key,the,key,of,the,blob,to,upload,or,code,null,code,to,indicate,the,upload,of,a,content,addressable,blob,param,buf,an,auxiliary,buffer,used,for,data,serialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,void,send,put,header,final,output,stream,output,stream,final,job,id,job,id,final,string,key,final,byte,buf,throws,ioexception,output,stream,write,blob,server,if,job,id,null,key,null,output,stream,write,1,else,output,stream,write,0,final,byte,buffer,bb,byte,buffer,wrap,buf,job,id,write,bb,output,stream,write,buf,byte,key,bytes,key,get,bytes,blob,utils,blob,server,write,length,key,bytes,length,buf,output,stream,output,stream,write,key,bytes
BlobClient -> private void deleteInternal(final JobID jobId, final String key) throws IOException;1412605211;Delete one or multiple BLOBs from the BLOB server.__@param jobId_the job ID to identify the BLOB(s) to be deleted_@param key_the key to identify the specific BLOB to delete or <code>null</code> to delete all BLOBs associated with_the job_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;private void deleteInternal(final JobID jobId, final String key) throws IOException {__		final OutputStream os = this.socket.getOutputStream()__		final byte[] buf = new byte[AbstractID.SIZE]___		_		os.write(BlobServer.DELETE_OPERATION)___		_		final ByteBuffer bb = ByteBuffer.wrap(buf)__		jobId.write(bb)__		os.write(buf)___		if (key == null) {_			os.write(0)__		} else {_			os.write(1)__			_			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			BlobServer.writeLength(keyBytes.length, buf, os)__			os.write(keyBytes)__		}_	};delete,one,or,multiple,blobs,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,s,to,be,deleted,param,key,the,key,to,identify,the,specific,blob,to,delete,or,code,null,code,to,delete,all,blobs,associated,with,the,job,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;private,void,delete,internal,final,job,id,job,id,final,string,key,throws,ioexception,final,output,stream,os,this,socket,get,output,stream,final,byte,buf,new,byte,abstract,id,size,os,write,blob,server,final,byte,buffer,bb,byte,buffer,wrap,buf,job,id,write,bb,os,write,buf,if,key,null,os,write,0,else,os,write,1,byte,key,bytes,key,get,bytes,blob,utils,blob,server,write,length,key,bytes,length,buf,os,os,write,key,bytes
BlobClient -> private void deleteInternal(final JobID jobId, final String key) throws IOException;1418925511;Delete one or multiple BLOBs from the BLOB server.__@param jobId_the job ID to identify the BLOB(s) to be deleted_@param key_the key to identify the specific BLOB to delete or <code>null</code> to delete all BLOBs associated with_the job_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;private void deleteInternal(final JobID jobId, final String key) throws IOException {__		final OutputStream os = this.socket.getOutputStream()__		final byte[] buf = new byte[AbstractID.SIZE]___		_		os.write(BlobServer.DELETE_OPERATION)___		_		final ByteBuffer bb = ByteBuffer.wrap(buf)__		jobId.write(bb)__		os.write(buf)___		if (key == null) {_			os.write(0)__		} else {_			os.write(1)__			_			byte[] keyBytes = key.getBytes(BlobUtils.DEFAULT_CHARSET)__			BlobServer.writeLength(keyBytes.length, buf, os)__			os.write(keyBytes)__		}_	};delete,one,or,multiple,blobs,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,s,to,be,deleted,param,key,the,key,to,identify,the,specific,blob,to,delete,or,code,null,code,to,delete,all,blobs,associated,with,the,job,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;private,void,delete,internal,final,job,id,job,id,final,string,key,throws,ioexception,final,output,stream,os,this,socket,get,output,stream,final,byte,buf,new,byte,abstract,id,size,os,write,blob,server,final,byte,buffer,bb,byte,buffer,wrap,buf,job,id,write,bb,os,write,buf,if,key,null,os,write,0,else,os,write,1,byte,key,bytes,key,get,bytes,blob,utils,blob,server,write,length,key,bytes,length,buf,os,os,write,key,bytes
BlobClient -> private static void sendGetHeader( 			OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey) 			throws IOException;1507212387;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private static void sendGetHeader(_			OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey)_			throws IOException {_		checkNotNull(blobKey)__		checkArgument(jobId != null || blobKey instanceof TransientBlobKey,_			"permanent BLOBs must be job-related")___		_		outputStream.write(GET_OPERATION)___		_		if (jobId == null) {_			outputStream.write(JOB_UNRELATED_CONTENT)__		} else {_			outputStream.write(JOB_RELATED_CONTENT)__			outputStream.write(jobId.getBytes())__		}_		blobKey.writeToOutputStream(outputStream)__	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,static,void,send,get,header,output,stream,output,stream,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,not,null,blob,key,check,argument,job,id,null,blob,key,instanceof,transient,blob,key,permanent,blobs,must,be,job,related,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes,blob,key,write,to,output,stream,output,stream
BlobClient -> private static void sendGetHeader( 			OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey) 			throws IOException;1508138617;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private static void sendGetHeader(_			OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey)_			throws IOException {_		checkNotNull(blobKey)__		checkArgument(jobId != null || blobKey instanceof TransientBlobKey,_			"permanent BLOBs must be job-related")___		_		outputStream.write(GET_OPERATION)___		_		if (jobId == null) {_			outputStream.write(JOB_UNRELATED_CONTENT)__		} else {_			outputStream.write(JOB_RELATED_CONTENT)__			outputStream.write(jobId.getBytes())__		}_		blobKey.writeToOutputStream(outputStream)__	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,static,void,send,get,header,output,stream,output,stream,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,not,null,blob,key,check,argument,job,id,null,blob,key,instanceof,transient,blob,key,permanent,blobs,must,be,job,related,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes,blob,key,write,to,output,stream,output,stream
BlobClient -> private static void sendGetHeader( 			OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey) 			throws IOException;1515428991;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private static void sendGetHeader(_			OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey)_			throws IOException {_		checkNotNull(blobKey)__		checkArgument(jobId != null || blobKey instanceof TransientBlobKey,_			"permanent BLOBs must be job-related")___		_		outputStream.write(GET_OPERATION)___		_		if (jobId == null) {_			outputStream.write(JOB_UNRELATED_CONTENT)__		} else {_			outputStream.write(JOB_RELATED_CONTENT)__			outputStream.write(jobId.getBytes())__		}_		blobKey.writeToOutputStream(outputStream)__	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,static,void,send,get,header,output,stream,output,stream,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,not,null,blob,key,check,argument,job,id,null,blob,key,instanceof,transient,blob,key,permanent,blobs,must,be,job,related,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes,blob,key,write,to,output,stream,output,stream
BlobClient -> private static void sendGetHeader( 			OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey) 			throws IOException;1525420604;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private static void sendGetHeader(_			OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey)_			throws IOException {_		checkNotNull(blobKey)__		checkArgument(jobId != null || blobKey instanceof TransientBlobKey,_			"permanent BLOBs must be job-related")___		_		outputStream.write(GET_OPERATION)___		_		if (jobId == null) {_			outputStream.write(JOB_UNRELATED_CONTENT)__		} else {_			outputStream.write(JOB_RELATED_CONTENT)__			outputStream.write(jobId.getBytes())__		}_		blobKey.writeToOutputStream(outputStream)__	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,static,void,send,get,header,output,stream,output,stream,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,not,null,blob,key,check,argument,job,id,null,blob,key,instanceof,transient,blob,key,permanent,blobs,must,be,job,related,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes,blob,key,write,to,output,stream,output,stream
BlobClient -> private static void sendGetHeader( 			OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey) 			throws IOException;1529583969;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private static void sendGetHeader(_			OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey)_			throws IOException {_		checkNotNull(blobKey)__		checkArgument(jobId != null || blobKey instanceof TransientBlobKey,_			"permanent BLOBs must be job-related")___		_		outputStream.write(GET_OPERATION)___		_		if (jobId == null) {_			outputStream.write(JOB_UNRELATED_CONTENT)__		} else {_			outputStream.write(JOB_RELATED_CONTENT)__			outputStream.write(jobId.getBytes())__		}_		blobKey.writeToOutputStream(outputStream)__	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,static,void,send,get,header,output,stream,output,stream,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,not,null,blob,key,check,argument,job,id,null,blob,key,instanceof,transient,blob,key,permanent,blobs,must,be,job,related,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes,blob,key,write,to,output,stream,output,stream
BlobClient -> private static void sendGetHeader( 			OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey) 			throws IOException;1531721446;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private static void sendGetHeader(_			OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey)_			throws IOException {_		checkNotNull(blobKey)__		checkArgument(jobId != null || blobKey instanceof TransientBlobKey,_			"permanent BLOBs must be job-related")___		_		outputStream.write(GET_OPERATION)___		_		if (jobId == null) {_			outputStream.write(JOB_UNRELATED_CONTENT)__		} else {_			outputStream.write(JOB_RELATED_CONTENT)__			outputStream.write(jobId.getBytes())__		}_		blobKey.writeToOutputStream(outputStream)__	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,static,void,send,get,header,output,stream,output,stream,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,not,null,blob,key,check,argument,job,id,null,blob,key,instanceof,transient,blob,key,permanent,blobs,must,be,job,related,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes,blob,key,write,to,output,stream,output,stream
BlobClient -> private static void sendGetHeader( 			OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey) 			throws IOException;1531721446;Constructs and writes the header data for a GET operation to the given output stream.__@param outputStream_the output stream to write the header data to_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@throws IOException_thrown if an I/O error occurs while writing the header data to the output stream;private static void sendGetHeader(_			OutputStream outputStream, @Nullable JobID jobId, BlobKey blobKey)_			throws IOException {_		checkNotNull(blobKey)__		checkArgument(jobId != null || blobKey instanceof TransientBlobKey,_			"permanent BLOBs must be job-related")___		_		outputStream.write(GET_OPERATION)___		_		if (jobId == null) {_			outputStream.write(JOB_UNRELATED_CONTENT)__		} else {_			outputStream.write(JOB_RELATED_CONTENT)__			outputStream.write(jobId.getBytes())__		}_		blobKey.writeToOutputStream(outputStream)__	};constructs,and,writes,the,header,data,for,a,get,operation,to,the,given,output,stream,param,output,stream,the,output,stream,to,write,the,header,data,to,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,header,data,to,the,output,stream;private,static,void,send,get,header,output,stream,output,stream,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,not,null,blob,key,check,argument,job,id,null,blob,key,instanceof,transient,blob,key,permanent,blobs,must,be,job,related,output,stream,write,if,job,id,null,output,stream,write,else,output,stream,write,output,stream,write,job,id,get,bytes,blob,key,write,to,output,stream,output,stream
BlobClient -> public BlobKey put(InputStream inputStream) throws IOException;1424264340;Uploads the data from the given input stream to the BLOB server in a content-addressable manner.__@param inputStream_the input stream to read the data from_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public BlobKey put(InputStream inputStream) throws IOException {_		return putInputStream(null, null, inputStream)__	};uploads,the,data,from,the,given,input,stream,to,the,blob,server,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,blob,key,put,input,stream,input,stream,throws,ioexception,return,put,input,stream,null,null,input,stream
BlobClient -> public BlobKey put(InputStream inputStream) throws IOException;1427784999;Uploads the data from the given input stream to the BLOB server in a content-addressable manner.__@param inputStream_the input stream to read the data from_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public BlobKey put(InputStream inputStream) throws IOException {_		return putInputStream(null, null, inputStream)__	};uploads,the,data,from,the,given,input,stream,to,the,blob,server,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,blob,key,put,input,stream,input,stream,throws,ioexception,return,put,input,stream,null,null,input,stream
BlobClient -> public BlobKey put(InputStream inputStream) throws IOException;1468854249;Uploads the data from the given input stream to the BLOB server in a content-addressable manner.__@param inputStream_the input stream to read the data from_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public BlobKey put(InputStream inputStream) throws IOException {_		return putInputStream(null, null, inputStream)__	};uploads,the,data,from,the,given,input,stream,to,the,blob,server,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,blob,key,put,input,stream,input,stream,throws,ioexception,return,put,input,stream,null,null,input,stream
BlobClient -> public BlobKey put(InputStream inputStream) throws IOException;1476696544;Uploads the data from the given input stream to the BLOB server in a content-addressable manner.__@param inputStream_the input stream to read the data from_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public BlobKey put(InputStream inputStream) throws IOException {_		return putInputStream(null, null, inputStream)__	};uploads,the,data,from,the,given,input,stream,to,the,blob,server,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,blob,key,put,input,stream,input,stream,throws,ioexception,return,put,input,stream,null,null,input,stream
BlobClient -> public BlobKey put(InputStream inputStream) throws IOException;1487441974;Uploads the data from the given input stream to the BLOB server in a content-addressable manner.__@param inputStream_the input stream to read the data from_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public BlobKey put(InputStream inputStream) throws IOException {_		return putInputStream(null, null, inputStream)__	};uploads,the,data,from,the,given,input,stream,to,the,blob,server,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,blob,key,put,input,stream,input,stream,throws,ioexception,return,put,input,stream,null,null,input,stream
BlobClient -> public BlobKey put(InputStream inputStream) throws IOException;1494690800;Uploads the data from the given input stream to the BLOB server in a content-addressable manner.__@param inputStream_the input stream to read the data from_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public BlobKey put(InputStream inputStream) throws IOException {_		return putInputStream(null, null, inputStream)__	};uploads,the,data,from,the,given,input,stream,to,the,blob,server,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,blob,key,put,input,stream,input,stream,throws,ioexception,return,put,input,stream,null,null,input,stream
BlobClient -> public BlobKey put(InputStream inputStream) throws IOException;1495001945;Uploads the data from the given input stream to the BLOB server in a content-addressable manner.__@param inputStream_the input stream to read the data from_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public BlobKey put(InputStream inputStream) throws IOException {_		return putInputStream(null, null, inputStream)__	};uploads,the,data,from,the,given,input,stream,to,the,blob,server,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,blob,key,put,input,stream,input,stream,throws,ioexception,return,put,input,stream,null,null,input,stream
BlobClient -> public BlobKey put(InputStream inputStream) throws IOException;1499173045;Uploads the data from the given input stream to the BLOB server in a content-addressable manner.__@param inputStream_the input stream to read the data from_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public BlobKey put(InputStream inputStream) throws IOException {_		return putInputStream(null, null, inputStream)__	};uploads,the,data,from,the,given,input,stream,to,the,blob,server,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,blob,key,put,input,stream,input,stream,throws,ioexception,return,put,input,stream,null,null,input,stream
BlobClient -> public BlobKey put(InputStream inputStream) throws IOException;1499789965;Uploads the data from the given input stream to the BLOB server in a content-addressable manner.__@param inputStream_the input stream to read the data from_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public BlobKey put(InputStream inputStream) throws IOException {_		return putInputStream(null, inputStream)__	};uploads,the,data,from,the,given,input,stream,to,the,blob,server,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,blob,key,put,input,stream,input,stream,throws,ioexception,return,put,input,stream,null,input,stream
BlobClient -> public BlobKey put(InputStream inputStream) throws IOException;1502355408;Uploads the data from the given input stream to the BLOB server in a content-addressable manner.__@param inputStream_the input stream to read the data from_@return the computed BLOB key identifying the BLOB on the server_@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the data to the_BLOB server;public BlobKey put(InputStream inputStream) throws IOException {_		return putInputStream(null, inputStream)__	};uploads,the,data,from,the,given,input,stream,to,the,blob,server,in,a,content,addressable,manner,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,blob,key,put,input,stream,input,stream,throws,ioexception,return,put,input,stream,null,input,stream
BlobClient -> public BlobKey put(InputStream inputStream) throws IOException;1502701584;Uploads the (job-unrelated) data from the given input stream to the BLOB server.__@param inputStream_the input stream to read the data from__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the_data to the BLOB server;public BlobKey put(InputStream inputStream) throws IOException {_		return putInputStream(null, inputStream)__	};uploads,the,job,unrelated,data,from,the,given,input,stream,to,the,blob,server,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,blob,key,put,input,stream,input,stream,throws,ioexception,return,put,input,stream,null,input,stream
BlobClient -> public BlobKey put(InputStream inputStream) throws IOException;1503041372;Uploads the (job-unrelated) data from the given input stream to the BLOB server.__@param inputStream_the input stream to read the data from__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream or uploading the_data to the BLOB server;public BlobKey put(InputStream inputStream) throws IOException {_		return putInputStream(null, inputStream)__	};uploads,the,job,unrelated,data,from,the,given,input,stream,to,the,blob,server,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,or,uploading,the,data,to,the,blob,server;public,blob,key,put,input,stream,input,stream,throws,ioexception,return,put,input,stream,null,input,stream
BlobClient -> public static List<PermanentBlobKey> uploadJarFiles( 			InetSocketAddress serverAddress, Configuration clientConfig, JobID jobId, List<Path> jars) 			throws IOException;1507212387;Uploads the JAR files to the {@link PermanentBlobService} of the {@link BlobServer} at the_given address with HA as configured.__@param serverAddress_Server address of the {@link BlobServer}_@param clientConfig_Any additional configuration for the blob client_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param jars_List of JAR files to upload__@throws IOException_if the upload fails;public static List<PermanentBlobKey> uploadJarFiles(_			InetSocketAddress serverAddress, Configuration clientConfig, JobID jobId, List<Path> jars)_			throws IOException {__		checkNotNull(jobId)___		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<PermanentBlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path jar : jars) {_					final FileSystem fs = jar.getFileSystem()__					FSDataInputStream is = null__					try {_						is = fs.open(jar)__						final PermanentBlobKey key =_							(PermanentBlobKey) blobClient.putInputStream(jobId, is, PERMANENT_BLOB)__						blobKeys.add(key)__					} finally {_						if (is != null) {_							is.close()__						}_					}_				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,the,link,permanent,blob,service,of,the,link,blob,server,at,the,given,address,with,ha,as,configured,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,jars,list,of,jar,files,to,upload,throws,ioexception,if,the,upload,fails;public,static,list,permanent,blob,key,upload,jar,files,inet,socket,address,server,address,configuration,client,config,job,id,job,id,list,path,jars,throws,ioexception,check,not,null,job,id,if,jars,is,empty,return,collections,empty,list,else,list,permanent,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,jar,jars,final,file,system,fs,jar,get,file,system,fsdata,input,stream,is,null,try,is,fs,open,jar,final,permanent,blob,key,key,permanent,blob,key,blob,client,put,input,stream,job,id,is,blob,keys,add,key,finally,if,is,null,is,close,return,blob,keys
BlobClient -> public static List<PermanentBlobKey> uploadJarFiles( 			InetSocketAddress serverAddress, Configuration clientConfig, JobID jobId, List<Path> jars) 			throws IOException;1508138617;Uploads the JAR files to the {@link PermanentBlobService} of the {@link BlobServer} at the_given address with HA as configured.__@param serverAddress_Server address of the {@link BlobServer}_@param clientConfig_Any additional configuration for the blob client_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param jars_List of JAR files to upload__@throws IOException_if the upload fails;public static List<PermanentBlobKey> uploadJarFiles(_			InetSocketAddress serverAddress, Configuration clientConfig, JobID jobId, List<Path> jars)_			throws IOException {__		checkNotNull(jobId)___		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<PermanentBlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path jar : jars) {_					final FileSystem fs = jar.getFileSystem()__					FSDataInputStream is = null__					try {_						is = fs.open(jar)__						final PermanentBlobKey key =_							(PermanentBlobKey) blobClient.putInputStream(jobId, is, PERMANENT_BLOB)__						blobKeys.add(key)__					} finally {_						if (is != null) {_							is.close()__						}_					}_				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,the,link,permanent,blob,service,of,the,link,blob,server,at,the,given,address,with,ha,as,configured,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,jars,list,of,jar,files,to,upload,throws,ioexception,if,the,upload,fails;public,static,list,permanent,blob,key,upload,jar,files,inet,socket,address,server,address,configuration,client,config,job,id,job,id,list,path,jars,throws,ioexception,check,not,null,job,id,if,jars,is,empty,return,collections,empty,list,else,list,permanent,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,jar,jars,final,file,system,fs,jar,get,file,system,fsdata,input,stream,is,null,try,is,fs,open,jar,final,permanent,blob,key,key,permanent,blob,key,blob,client,put,input,stream,job,id,is,blob,keys,add,key,finally,if,is,null,is,close,return,blob,keys
BlobClient -> public static List<PermanentBlobKey> uploadJarFiles( 			InetSocketAddress serverAddress, Configuration clientConfig, JobID jobId, List<Path> jars) 			throws IOException;1515428991;Uploads the JAR files to the {@link PermanentBlobService} of the {@link BlobServer} at the_given address with HA as configured.__@param serverAddress_Server address of the {@link BlobServer}_@param clientConfig_Any additional configuration for the blob client_@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param jars_List of JAR files to upload__@throws IOException_if the upload fails;public static List<PermanentBlobKey> uploadJarFiles(_			InetSocketAddress serverAddress, Configuration clientConfig, JobID jobId, List<Path> jars)_			throws IOException {__		checkNotNull(jobId)___		if (jars.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<PermanentBlobKey> blobKeys = new ArrayList<>()___			try (BlobClient blobClient = new BlobClient(serverAddress, clientConfig)) {_				for (final Path jar : jars) {_					final FileSystem fs = jar.getFileSystem()__					FSDataInputStream is = null__					try {_						is = fs.open(jar)__						final PermanentBlobKey key =_							(PermanentBlobKey) blobClient.putInputStream(jobId, is, PERMANENT_BLOB)__						blobKeys.add(key)__					} finally {_						if (is != null) {_							is.close()__						}_					}_				}_			}__			return blobKeys__		}_	};uploads,the,jar,files,to,the,link,permanent,blob,service,of,the,link,blob,server,at,the,given,address,with,ha,as,configured,param,server,address,server,address,of,the,link,blob,server,param,client,config,any,additional,configuration,for,the,blob,client,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,jars,list,of,jar,files,to,upload,throws,ioexception,if,the,upload,fails;public,static,list,permanent,blob,key,upload,jar,files,inet,socket,address,server,address,configuration,client,config,job,id,job,id,list,path,jars,throws,ioexception,check,not,null,job,id,if,jars,is,empty,return,collections,empty,list,else,list,permanent,blob,key,blob,keys,new,array,list,try,blob,client,blob,client,new,blob,client,server,address,client,config,for,final,path,jar,jars,final,file,system,fs,jar,get,file,system,fsdata,input,stream,is,null,try,is,fs,open,jar,final,permanent,blob,key,key,permanent,blob,key,blob,client,put,input,stream,job,id,is,blob,keys,add,key,finally,if,is,null,is,close,return,blob,keys
BlobClient -> private static void receiveAndCheckGetResponse(InputStream is) throws IOException;1502701584;Reads the response from the input stream and throws in case of errors__@param is_stream to read from__@throws IOException_if the response is an error or reading the response failed;private static void receiveAndCheckGetResponse(InputStream is) throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else if (response != RETURN_OKAY) {_			throw new IOException("Unrecognized response")__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,throws,ioexception,if,the,response,is,an,error,or,reading,the,response,failed;private,static,void,receive,and,check,get,response,input,stream,is,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response
BlobClient -> private static void receiveAndCheckGetResponse(InputStream is) throws IOException;1503041372;Reads the response from the input stream and throws in case of errors__@param is_stream to read from__@throws IOException_if the response is an error or reading the response failed;private static void receiveAndCheckGetResponse(InputStream is) throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else if (response != RETURN_OKAY) {_			throw new IOException("Unrecognized response")__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,throws,ioexception,if,the,response,is,an,error,or,reading,the,response,failed;private,static,void,receive,and,check,get,response,input,stream,is,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response
BlobClient -> private static void receiveAndCheckGetResponse(InputStream is) throws IOException;1507212387;Reads the response from the input stream and throws in case of errors__@param is_stream to read from__@throws IOException_if the response is an error or reading the response failed;private static void receiveAndCheckGetResponse(InputStream is) throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else if (response != RETURN_OKAY) {_			throw new IOException("Unrecognized response")__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,throws,ioexception,if,the,response,is,an,error,or,reading,the,response,failed;private,static,void,receive,and,check,get,response,input,stream,is,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response
BlobClient -> private static void receiveAndCheckGetResponse(InputStream is) throws IOException;1507212387;Reads the response from the input stream and throws in case of errors.__@param is_stream to read from__@throws IOException_if the response is an error or reading the response failed;private static void receiveAndCheckGetResponse(InputStream is) throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else if (response != RETURN_OKAY) {_			throw new IOException("Unrecognized response")__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,throws,ioexception,if,the,response,is,an,error,or,reading,the,response,failed;private,static,void,receive,and,check,get,response,input,stream,is,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response
BlobClient -> private static void receiveAndCheckGetResponse(InputStream is) throws IOException;1508138617;Reads the response from the input stream and throws in case of errors.__@param is_stream to read from__@throws IOException_if the response is an error or reading the response failed;private static void receiveAndCheckGetResponse(InputStream is) throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else if (response != RETURN_OKAY) {_			throw new IOException("Unrecognized response")__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,throws,ioexception,if,the,response,is,an,error,or,reading,the,response,failed;private,static,void,receive,and,check,get,response,input,stream,is,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response
BlobClient -> private static void receiveAndCheckGetResponse(InputStream is) throws IOException;1515428991;Reads the response from the input stream and throws in case of errors.__@param is_stream to read from__@throws IOException_if the response is an error or reading the response failed;private static void receiveAndCheckGetResponse(InputStream is) throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else if (response != RETURN_OKAY) {_			throw new IOException("Unrecognized response")__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,throws,ioexception,if,the,response,is,an,error,or,reading,the,response,failed;private,static,void,receive,and,check,get,response,input,stream,is,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response
BlobClient -> private static void receiveAndCheckGetResponse(InputStream is) throws IOException;1525420604;Reads the response from the input stream and throws in case of errors.__@param is_stream to read from__@throws IOException_if the response is an error or reading the response failed;private static void receiveAndCheckGetResponse(InputStream is) throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else if (response != RETURN_OKAY) {_			throw new IOException("Unrecognized response")__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,throws,ioexception,if,the,response,is,an,error,or,reading,the,response,failed;private,static,void,receive,and,check,get,response,input,stream,is,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response
BlobClient -> private static void receiveAndCheckGetResponse(InputStream is) throws IOException;1529583969;Reads the response from the input stream and throws in case of errors.__@param is_stream to read from__@throws IOException_if the response is an error or reading the response failed;private static void receiveAndCheckGetResponse(InputStream is) throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else if (response != RETURN_OKAY) {_			throw new IOException("Unrecognized response")__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,throws,ioexception,if,the,response,is,an,error,or,reading,the,response,failed;private,static,void,receive,and,check,get,response,input,stream,is,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response
BlobClient -> private static void receiveAndCheckGetResponse(InputStream is) throws IOException;1531721446;Reads the response from the input stream and throws in case of errors.__@param is_stream to read from__@throws IOException_if the response is an error or reading the response failed;private static void receiveAndCheckGetResponse(InputStream is) throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else if (response != RETURN_OKAY) {_			throw new IOException("Unrecognized response")__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,throws,ioexception,if,the,response,is,an,error,or,reading,the,response,failed;private,static,void,receive,and,check,get,response,input,stream,is,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response
BlobClient -> private static void receiveAndCheckGetResponse(InputStream is) throws IOException;1531721446;Reads the response from the input stream and throws in case of errors.__@param is_stream to read from__@throws IOException_if the response is an error or reading the response failed;private static void receiveAndCheckGetResponse(InputStream is) throws IOException {_		int response = is.read()__		if (response < 0) {_			throw new EOFException("Premature end of response")__		}_		if (response == RETURN_ERROR) {_			Throwable cause = readExceptionFromStream(is)__			throw new IOException("Server side error: " + cause.getMessage(), cause)__		}_		else if (response != RETURN_OKAY) {_			throw new IOException("Unrecognized response")__		}_	};reads,the,response,from,the,input,stream,and,throws,in,case,of,errors,param,is,stream,to,read,from,throws,ioexception,if,the,response,is,an,error,or,reading,the,response,failed;private,static,void,receive,and,check,get,response,input,stream,is,throws,ioexception,int,response,is,read,if,response,0,throw,new,eofexception,premature,end,of,response,if,response,throwable,cause,read,exception,from,stream,is,throw,new,ioexception,server,side,error,cause,get,message,cause,else,if,response,throw,new,ioexception,unrecognized,response
BlobClient -> public void delete(final JobID jobId, final String key) throws IOException;1412605211;Deletes the BLOB identified by the given job ID and key from the BLOB server.__@param jobId_the job ID to identify the BLOB_@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void delete(final JobID jobId, final String key) throws IOException {__		if (jobId == null) {_			throw new IllegalArgumentException("Argument jobID must not be null")__		}__		if (key == null) {_			throw new IllegalArgumentException("Argument key must not be null")__		}__		if (key.length() > BlobServer.MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + BlobServer.MAX_KEY_LENGTH)__		}__		deleteInternal(jobId, key)__	};deletes,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,final,job,id,job,id,final,string,key,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,argument,job,id,must,not,be,null,if,key,null,throw,new,illegal,argument,exception,argument,key,must,not,be,null,if,key,length,blob,server,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,blob,server,delete,internal,job,id,key
BlobClient -> public void delete(final JobID jobId, final String key) throws IOException;1418925511;Deletes the BLOB identified by the given job ID and key from the BLOB server.__@param jobId_the job ID to identify the BLOB_@param key_the key to identify the BLOB_@throws IOException_thrown if an I/O error occurs while transferring the request to the BLOB server;public void delete(final JobID jobId, final String key) throws IOException {__		if (jobId == null) {_			throw new IllegalArgumentException("Argument jobID must not be null")__		}__		if (key == null) {_			throw new IllegalArgumentException("Argument key must not be null")__		}__		if (key.length() > BlobServer.MAX_KEY_LENGTH) {_			throw new IllegalArgumentException("Keys must not be longer than " + BlobServer.MAX_KEY_LENGTH)__		}__		deleteInternal(jobId, key)__	};deletes,the,blob,identified,by,the,given,job,id,and,key,from,the,blob,server,param,job,id,the,job,id,to,identify,the,blob,param,key,the,key,to,identify,the,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,transferring,the,request,to,the,blob,server;public,void,delete,final,job,id,job,id,final,string,key,throws,ioexception,if,job,id,null,throw,new,illegal,argument,exception,argument,job,id,must,not,be,null,if,key,null,throw,new,illegal,argument,exception,argument,key,must,not,be,null,if,key,length,blob,server,throw,new,illegal,argument,exception,keys,must,not,be,longer,than,blob,server,delete,internal,job,id,key
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1476696544;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server_@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(ConfigConstants.BLOB_SERVICE_SSL_ENABLED,_						ConfigConstants.DEFAULT_BLOB_SERVICE_SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch(Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,config,constants,config,constants,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1487441974;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server_@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(ConfigConstants.BLOB_SERVICE_SSL_ENABLED,_						ConfigConstants.DEFAULT_BLOB_SERVICE_SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch(Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,config,constants,config,constants,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1494690800;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server_@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch(Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,blob,server,options,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1495001945;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server_@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch(Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,blob,server,options,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1499173045;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server_@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch(Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,blob,server,options,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1499789965;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server_@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch(Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,blob,server,options,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1502355408;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server_@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch(Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,blob,server,options,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1502701584;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server__@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch(Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,blob,server,options,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1503041372;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server__@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch(Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,blob,server,options,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1507212387;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server__@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch(Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,blob,server,options,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1507212387;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server__@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch(Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,blob,server,options,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1508138617;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server__@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch(Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,blob,server,options,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1515428991;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server__@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch (Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,blob,server,options,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1525420604;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server__@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch (Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,blob,server,options,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1529583969;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server__@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {__		try {_			_			SSLContext clientSSLContext = null__			if (clientConfig != null &&_				clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {__				clientSSLContext = SSLUtils.createSSLClientContext(clientConfig)__			}__			if (clientSSLContext != null) {__				LOG.info("Using ssl connection to the blob server")___				SSLSocket sslSocket = (SSLSocket) clientSSLContext.getSocketFactory().createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())___				_				if (!serverAddress.getAddress().isLoopbackAddress()) {_					SSLParameters newSSLParameters = sslSocket.getSSLParameters()__					SSLUtils.setSSLVerifyHostname(clientConfig, newSSLParameters)__					sslSocket.setSSLParameters(newSSLParameters)__				}_				this.socket = sslSocket__			} else {_				this.socket = new Socket()__				this.socket.connect(serverAddress)__			}__		}_		catch (Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}_	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,try,sslcontext,client,sslcontext,null,if,client,config,null,client,config,get,boolean,blob,server,options,client,sslcontext,sslutils,create,sslclient,context,client,config,if,client,sslcontext,null,log,info,using,ssl,connection,to,the,blob,server,sslsocket,ssl,socket,sslsocket,client,sslcontext,get,socket,factory,create,socket,server,address,get,address,server,address,get,port,if,server,address,get,address,is,loopback,address,sslparameters,new,sslparameters,ssl,socket,get,sslparameters,sslutils,set,sslverify,hostname,client,config,new,sslparameters,ssl,socket,set,sslparameters,new,sslparameters,this,socket,ssl,socket,else,this,socket,new,socket,this,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1531721446;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server__@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {_		Socket socket = null___		try {_			_			if (clientConfig.getBoolean(SecurityOptions.SSL_ENABLED) && clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {_				LOG.info("Using ssl connection to the blob server")___				socket = SSLUtils.createSSLClientSocketFactory(clientConfig).createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())__			}_			else {_				socket = new Socket()__				socket.connect(serverAddress)__			}_		}_		catch (Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}__		this.socket = socket__	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,socket,socket,null,try,if,client,config,get,boolean,security,options,client,config,get,boolean,blob,server,options,log,info,using,ssl,connection,to,the,blob,server,socket,sslutils,create,sslclient,socket,factory,client,config,create,socket,server,address,get,address,server,address,get,port,else,socket,new,socket,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e,this,socket,socket
BlobClient -> public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException;1531721446;Instantiates a new BLOB client.__@param serverAddress_the network address of the BLOB server_@param clientConfig_additional configuration like SSL parameters required to connect to the blob server__@throws IOException_thrown if the connection to the BLOB server could not be established;public BlobClient(InetSocketAddress serverAddress, Configuration clientConfig) throws IOException {_		Socket socket = null___		try {_			_			if (SSLUtils.isInternalSSLEnabled(clientConfig) && clientConfig.getBoolean(BlobServerOptions.SSL_ENABLED)) {_				LOG.info("Using ssl connection to the blob server")___				socket = SSLUtils.createSSLClientSocketFactory(clientConfig).createSocket(_					serverAddress.getAddress(),_					serverAddress.getPort())__			}_			else {_				socket = new Socket()__				socket.connect(serverAddress)__			}_		}_		catch (Exception e) {_			BlobUtils.closeSilently(socket, LOG)__			throw new IOException("Could not connect to BlobServer at address " + serverAddress, e)__		}__		this.socket = socket__	};instantiates,a,new,blob,client,param,server,address,the,network,address,of,the,blob,server,param,client,config,additional,configuration,like,ssl,parameters,required,to,connect,to,the,blob,server,throws,ioexception,thrown,if,the,connection,to,the,blob,server,could,not,be,established;public,blob,client,inet,socket,address,server,address,configuration,client,config,throws,ioexception,socket,socket,null,try,if,sslutils,is,internal,sslenabled,client,config,client,config,get,boolean,blob,server,options,log,info,using,ssl,connection,to,the,blob,server,socket,sslutils,create,sslclient,socket,factory,client,config,create,socket,server,address,get,address,server,address,get,port,else,socket,new,socket,socket,connect,server,address,catch,exception,e,blob,utils,close,silently,socket,log,throw,new,ioexception,could,not,connect,to,blob,server,at,address,server,address,e,this,socket,socket
