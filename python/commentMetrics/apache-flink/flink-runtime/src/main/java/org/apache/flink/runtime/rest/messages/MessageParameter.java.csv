commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Returns whether this parameter has been resolved.  *  * @return true, if this parameter was resolved, false otherwise  */ ;/**  * Returns whether this parameter has been resolved.  *  * @return true, if this parameter was resolved, false otherwise  */ public final boolean isResolved() {     return resolved. }
true;public,final;1;5;/**  * Resolves this parameter for the given value.  *  * @param value value to resolve this parameter with  */ ;/**  * Resolves this parameter for the given value.  *  * @param value value to resolve this parameter with  */ public final void resolve(X value) {     Preconditions.checkState(!resolved, "This parameter was already resolved.").     this.value = Preconditions.checkNotNull(value).     this.resolved = true. }
true;public,final;1;3;/**  * Resolves this parameter for the given string value representation.  *  * @param value string representation of value to resolve this parameter with  */ ;/**  * Resolves this parameter for the given string value representation.  *  * @param value string representation of value to resolve this parameter with  */ public final void resolveFromString(String value) throws ConversionException {     resolve(convertFromString(value)). }
true;protected,abstract;1;1;/**  * Converts the given string to a valid value of this parameter.  *  * @param value string representation of parameter value  * @return parameter value  */ ;/**  * Converts the given string to a valid value of this parameter.  *  * @param value string representation of parameter value  * @return parameter value  */ protected abstract X convertFromString(String value) throws ConversionException.
true;protected,abstract;1;1;/**  * Converts the given value to its string representation.  *  * @param value parameter value  * @return string representation of typed value  */ ;/**  * Converts the given value to its string representation.  *  * @param value parameter value  * @return string representation of typed value  */ protected abstract String convertToString(X value).
true;public,final;0;3;/**  * Returns the key of this parameter, e.g. "jobid".  *  * @return key of this parameter  */ ;/**  * Returns the key of this parameter, e.g. "jobid".  *  * @return key of this parameter  */ public final String getKey() {     return key. }
true;public,final;0;3;/**  * Returns the resolved value of this parameter, or {@code null} if it isn't resolved yet.  *  * @return resolved value, or null if it wasn't resolved yet  */ ;/**  * Returns the resolved value of this parameter, or {@code null} if it isn't resolved yet.  *  * @return resolved value, or null if it wasn't resolved yet  */ public final X getValue() {     return value. }
true;final;0;5;/**  * Returns the resolved value of this parameter as a string, or {@code null} if it isn't resolved yet.  *  * @return resolved value, or null if it wasn't resolved yet  */ ;/**  * Returns the resolved value of this parameter as a string, or {@code null} if it isn't resolved yet.  *  * @return resolved value, or null if it wasn't resolved yet  */ final String getValueAsString() {     return value == null ? null : convertToString(value). }
true;public,final;0;3;/**  * Returns whether this parameter must be resolved for the request.  *  * @return true if the parameter is mandatory, false otherwise  */ ;/**  * Returns whether this parameter must be resolved for the request.  *  * @return true if the parameter is mandatory, false otherwise  */ public final boolean isMandatory() {     return requisiteness == MessageParameterRequisiteness.MANDATORY. }
true;public,abstract;0;1;/**  * Returns a description for REST API HTML documentation.  * @return escaped HTML string  */ ;/**  * Returns a description for REST API HTML documentation.  * @return escaped HTML string  */ public abstract String getDescription().
