commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;7;/**  * Utility method to create RPC service from configuration and hostname, port.  *  * @param hostname   The hostname/address that describes the TaskManager's data location.  * @param portRangeDefinition   The port range to start TaskManager on.  * @param configuration                 The configuration for the TaskManager.  * @return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint .  * @throws IOException      Thrown, if the actor system can not bind to the address  * @throws Exception      Thrown is some other error occurs while creating akka actor system  */ ;// ------------------------------------------------------------------------ // RPC instantiation // ------------------------------------------------------------------------ /**  * Utility method to create RPC service from configuration and hostname, port.  *  * @param hostname   The hostname/address that describes the TaskManager's data location.  * @param portRangeDefinition   The port range to start TaskManager on.  * @param configuration                 The configuration for the TaskManager.  * @return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint .  * @throws IOException      Thrown, if the actor system can not bind to the address  * @throws Exception      Thrown is some other error occurs while creating akka actor system  */ public static RpcService createRpcService(String hostname, String portRangeDefinition, Configuration configuration) throws Exception {     final ActorSystem actorSystem = BootstrapTools.startActorSystem(configuration, hostname, portRangeDefinition, LOG).     return instantiateAkkaRpcService(configuration, actorSystem). }
true;public,static;3;7;/**  * Utility method to create RPC service from configuration and hostname, port.  *  * @param hostname   The hostname/address that describes the TaskManager's data location.  * @param port           If true, the TaskManager will not initiate the TCP network stack.  * @param configuration                 The configuration for the TaskManager.  * @return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint .  * @throws IOException      Thrown, if the actor system can not bind to the address  * @throws Exception      Thrown is some other error occurs while creating akka actor system  */ ;/**  * Utility method to create RPC service from configuration and hostname, port.  *  * @param hostname   The hostname/address that describes the TaskManager's data location.  * @param port           If true, the TaskManager will not initiate the TCP network stack.  * @param configuration                 The configuration for the TaskManager.  * @return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint .  * @throws IOException      Thrown, if the actor system can not bind to the address  * @throws Exception      Thrown is some other error occurs while creating akka actor system  */ public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception {     final ActorSystem actorSystem = BootstrapTools.startActorSystem(configuration, hostname, port, LOG).     return instantiateAkkaRpcService(configuration, actorSystem). }
false;private,static;2;4;;@Nonnull private static RpcService instantiateAkkaRpcService(Configuration configuration, ActorSystem actorSystem) {     return new AkkaRpcService(actorSystem, AkkaRpcServiceConfiguration.fromConfiguration(configuration)). }
true;public,static;5;19;/**  * @param hostname The hostname or address where the target RPC service is listening.  * @param port The port where the target RPC service is listening.  * @param endpointName The name of the RPC endpoint.  * @param addressResolution Whether to try address resolution of the given hostname or not.  *                          This allows to fail fast in case that the hostname cannot be resolved.  * @param config The configuration from which to deduce further settings.  *  * @return The RPC URL of the specified RPC endpoint.  */ ;// ------------------------------------------------------------------------ // RPC endpoint addressing // ------------------------------------------------------------------------ /**  * @param hostname The hostname or address where the target RPC service is listening.  * @param port The port where the target RPC service is listening.  * @param endpointName The name of the RPC endpoint.  * @param addressResolution Whether to try address resolution of the given hostname or not.  *                          This allows to fail fast in case that the hostname cannot be resolved.  * @param config The configuration from which to deduce further settings.  *  * @return The RPC URL of the specified RPC endpoint.  */ public static String getRpcUrl(String hostname, int port, String endpointName, HighAvailabilityServicesUtils.AddressResolution addressResolution, Configuration config) throws UnknownHostException {     checkNotNull(config, "config is null").     final boolean sslEnabled = config.getBoolean(AkkaOptions.SSL_ENABLED) && SSLUtils.isInternalSSLEnabled(config).     return getRpcUrl(hostname, port, endpointName, addressResolution, sslEnabled ? AkkaProtocol.SSL_TCP : AkkaProtocol.TCP). }
true;public,static;5;23;/**  * @param hostname The hostname or address where the target RPC service is listening.  * @param port The port where the target RPC service is listening.  * @param endpointName The name of the RPC endpoint.  * @param addressResolution Whether to try address resolution of the given hostname or not.  *                          This allows to fail fast in case that the hostname cannot be resolved.  * @param akkaProtocol True, if security/encryption is enabled, false otherwise.  *  * @return The RPC URL of the specified RPC endpoint.  */ ;/**  * @param hostname The hostname or address where the target RPC service is listening.  * @param port The port where the target RPC service is listening.  * @param endpointName The name of the RPC endpoint.  * @param addressResolution Whether to try address resolution of the given hostname or not.  *                          This allows to fail fast in case that the hostname cannot be resolved.  * @param akkaProtocol True, if security/encryption is enabled, false otherwise.  *  * @return The RPC URL of the specified RPC endpoint.  */ public static String getRpcUrl(String hostname, int port, String endpointName, HighAvailabilityServicesUtils.AddressResolution addressResolution, AkkaProtocol akkaProtocol) throws UnknownHostException {     checkNotNull(hostname, "hostname is null").     checkNotNull(endpointName, "endpointName is null").     checkArgument(port > 0 && port <= 65535, "port must be in [1, 65535]").     final String protocolPrefix = akkaProtocol == AkkaProtocol.SSL_TCP ? AKKA_SSL_TCP : AKKA_TCP.     if (addressResolution == AddressResolution.TRY_ADDRESS_RESOLUTION) {         // Fail fast if the hostname cannot be resolved         // noinspection ResultOfMethodCallIgnored         InetAddress.getByName(hostname).     }     final String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port).     return String.format("%s://flink@%s/user/%s", protocolPrefix, hostPort, endpointName). }
true;public,static;1;12;/**  * Creates a random name of the form prefix_X, where X is an increasing number.  *  * @param prefix Prefix string to prepend to the monotonically increasing name offset number  * @return A random name of the form prefix_X where X is an increasing number  */ ;/**  * Creates a random name of the form prefix_X, where X is an increasing number.  *  * @param prefix Prefix string to prepend to the monotonically increasing name offset number  * @return A random name of the form prefix_X where X is an increasing number  */ public static String createRandomName(String prefix) {     Preconditions.checkNotNull(prefix, "Prefix must not be null.").     long nameOffset.     // obtain the next name offset by incrementing it atomically     do {         nameOffset = nextNameOffset.get().     } while (!nextNameOffset.compareAndSet(nameOffset, nameOffset + 1L)).     return prefix + '_' + nameOffset. }
false;public,static;1;6;;// ------------------------------------------------------------------------ // RPC service configuration // ------------------------------------------------------------------------ public static long extractMaximumFramesize(Configuration configuration) {     String maxFrameSizeStr = configuration.getString(AkkaOptions.FRAMESIZE).     String akkaConfigStr = String.format(SIMPLE_AKKA_CONFIG_TEMPLATE, maxFrameSizeStr).     Config akkaConfig = ConfigFactory.parseString(akkaConfigStr).     return akkaConfig.getBytes(MAXIMUM_FRAME_SIZE_PATH). }
