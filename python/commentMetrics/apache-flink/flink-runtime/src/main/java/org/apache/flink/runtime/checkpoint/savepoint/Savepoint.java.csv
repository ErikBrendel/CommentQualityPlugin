commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns the checkpoint ID of the savepoint.  *  * <p>Savepoints use the same mechanisms as regular checkpoints and are  * identified by a unique ID. This ID is used to reset the {@link CheckpointIDCounter}  * when restoring from a savepoint.  *  * @return Checkpoint ID of the savepoint  */ ;/**  * Returns the checkpoint ID of the savepoint.  *  * <p>Savepoints use the same mechanisms as regular checkpoints and are  * identified by a unique ID. This ID is used to reset the {@link CheckpointIDCounter}  * when restoring from a savepoint.  *  * @return Checkpoint ID of the savepoint  */ long getCheckpointId().
true;;0;2;/**  * Returns the snapshotted task states.  *  * <p>These are used to restore the snapshot state.  *  * @deprecated Only kept for backwards-compatibility with versionS < 1.3. Will be removed in the future.  * @return Snapshotted task states  */ ;/**  * Returns the snapshotted task states.  *  * <p>These are used to restore the snapshot state.  *  * @deprecated Only kept for backwards-compatibility with versionS < 1.3. Will be removed in the future.  * @return Snapshotted task states  */ @Deprecated Collection<TaskState> getTaskStates().
true;;0;1;/**  * Gets the checkpointed states generated by the master.  */ ;/**  * Gets the checkpointed states generated by the master.  */ Collection<MasterState> getMasterStates().
true;;0;1;/**  * Returns the snapshotted operator states.  *  * <p>These are used to restore the snapshot state.  *  * @return Snapshotted operator states  */ ;/**  * Returns the snapshotted operator states.  *  * <p>These are used to restore the snapshot state.  *  * @return Snapshotted operator states  */ Collection<OperatorState> getOperatorStates().
