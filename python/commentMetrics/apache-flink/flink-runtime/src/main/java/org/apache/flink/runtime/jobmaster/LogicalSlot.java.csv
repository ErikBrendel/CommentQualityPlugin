commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void fail(Throwable cause) { // ignore }
false;public;0;4;;@Override public CompletableFuture<?> getTerminalStateFuture() {     return completedTerminationFuture. }
true;;0;1;/**  * Return the TaskManager location of this slot.  *  * @return TaskManager location of this slot  */ ;/**  * Return the TaskManager location of this slot.  *  * @return TaskManager location of this slot  */ TaskManagerLocation getTaskManagerLocation().
true;;0;1;/**  * Return the TaskManager gateway to talk to the TaskManager.  *  * @return TaskManager gateway to talk to the TaskManager  */ ;/**  * Return the TaskManager gateway to talk to the TaskManager.  *  * @return TaskManager gateway to talk to the TaskManager  */ TaskManagerGateway getTaskManagerGateway().
true;;0;1;/**  * Gets the locality of this slot.  *  * @return locality of this slot  */ ;/**  * Gets the locality of this slot.  *  * @return locality of this slot  */ Locality getLocality().
true;;0;1;/**  * True if the slot is alive and has not been released.  *  * @return True if the slot is alive, otherwise false if the slot is released  */ ;/**  * True if the slot is alive and has not been released.  *  * @return True if the slot is alive, otherwise false if the slot is released  */ boolean isAlive().
true;;1;1;/**  * Tries to assign a payload to this slot. One can only assign a single  * payload once.  *  * @param payload to be assigned to this slot.  * @return true if the payload could be assigned, otherwise false  */ ;/**  * Tries to assign a payload to this slot. One can only assign a single  * payload once.  *  * @param payload to be assigned to this slot.  * @return true if the payload could be assigned, otherwise false  */ boolean tryAssignPayload(Payload payload).
true;;0;2;/**  * Returns the set payload or null if none.  *  * @return Payload of this slot of null if none  */ ;/**  * Returns the set payload or null if none.  *  * @return Payload of this slot of null if none  */ @Nullable Payload getPayload().
true;default;0;3;/**  * Releases this slot.  *  * @return Future which is completed once the slot has been released,  * 		in case of a failure it is completed exceptionally  * @deprecated Added because extended the actual releaseSlot method with cause parameter.  */ ;/**  * Releases this slot.  *  * @return Future which is completed once the slot has been released,  * 		in case of a failure it is completed exceptionally  * @deprecated Added because extended the actual releaseSlot method with cause parameter.  */ default CompletableFuture<?> releaseSlot() {     return releaseSlot(null). }
true;;1;1;/**  * Releases this slot.  *  * @param cause why the slot was released or null if none  * @return future which is completed once the slot has been released  */ ;/**  * Releases this slot.  *  * @param cause why the slot was released or null if none  * @return future which is completed once the slot has been released  */ CompletableFuture<?> releaseSlot(@Nullable Throwable cause).
true;;0;1;/**  * Gets the slot number on the TaskManager.  *  * @return slot number  */ ;/**  * Gets the slot number on the TaskManager.  *  * @return slot number  */ int getPhysicalSlotNumber().
true;;0;1;/**  * Gets the allocation id of this slot.  *  * @return allocation id of this slot  */ ;/**  * Gets the allocation id of this slot.  *  * @return allocation id of this slot  */ AllocationID getAllocationId().
true;;0;1;/**  * Gets the slot request id uniquely identifying the request with which this  * slot has been allocated.  *  * @return Unique id identifying the slot request with which this slot was allocated  */ ;/**  * Gets the slot request id uniquely identifying the request with which this  * slot has been allocated.  *  * @return Unique id identifying the slot request with which this slot was allocated  */ SlotRequestId getSlotRequestId().
true;;0;2;/**  * Gets the slot sharing group id to which this slot belongs.  *  * @return slot sharing group id of this slot or null, if none.  */ ;/**  * Gets the slot sharing group id to which this slot belongs.  *  * @return slot sharing group id of this slot or null, if none.  */ @Nullable SlotSharingGroupId getSlotSharingGroupId().
true;;1;1;/**  * Fail the payload with the given cause.  *  * @param cause of the failure  */ ;/**  * Fail the payload with the given cause.  *  * @param cause of the failure  */ void fail(Throwable cause).
true;;0;1;/**  * Gets the terminal state future which is completed once the payload  * has reached a terminal state.  *  * @return Terminal state future  */ ;/**  * Gets the terminal state future which is completed once the payload  * has reached a terminal state.  *  * @return Terminal state future  */ CompletableFuture<?> getTerminalStateFuture().
