# id;timestamp;commentText;codeText;commentWords;codeWords
PendingCheckpoint -> public void abortSubsumed();1479852017;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			if (props.forceCheckpoint()) {_				onCompletionPromise.completeExceptionally(new Exception("Bug: forced checkpoints must never be subsumed"))___				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			} else {_				onCompletionPromise.completeExceptionally(new Exception("Checkpoints has been subsumed"))__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,if,props,force,checkpoint,on,completion,promise,complete,exceptionally,new,exception,bug,forced,checkpoints,must,never,be,subsumed,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,else,on,completion,promise,complete,exceptionally,new,exception,checkpoints,has,been,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1481295943;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			if (props.forceCheckpoint()) {_				onCompletionPromise.completeExceptionally(new Exception("Bug: forced checkpoints must never be subsumed"))___				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			} else {_				onCompletionPromise.completeExceptionally(new Exception("Checkpoints has been subsumed"))__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,if,props,force,checkpoint,on,completion,promise,complete,exceptionally,new,exception,bug,forced,checkpoints,must,never,be,subsumed,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,else,on,completion,promise,complete,exceptionally,new,exception,checkpoints,has,been,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1484038132;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1485531920;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1487762095;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1487871589;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1488304750;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1488304933;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1489060855;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1489671806;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1492678790;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1492867556;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1492867556;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1493236605;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1493325408;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1493403095;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1495287945;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1501588490;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1502801814;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1509125300;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1516295283;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1517489696;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed();1542043996;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() {_		try {_			Exception cause = new Exception("Checkpoints has been subsumed")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)___			if (props.forceCheckpoint()) {_				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,try,exception,cause,new,exception,checkpoints,has,been,subsumed,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,if,props,force,checkpoint,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,finally,dispose,true
PendingCheckpoint -> public void discard(ClassLoader userClassLoader) throws Exception;1468854249;Discards the pending checkpoint, releasing all held resources.;public void discard(ClassLoader userClassLoader) throws Exception {_		this.userClassLoader = userClassLoader__		dispose(userClassLoader, true)__	};discards,the,pending,checkpoint,releasing,all,held,resources;public,void,discard,class,loader,user,class,loader,throws,exception,this,user,class,loader,user,class,loader,dispose,user,class,loader,true
PendingCheckpoint -> public void discard(ClassLoader userClassLoader) throws Exception;1469525443;Discards the pending checkpoint, releasing all held resources.;public void discard(ClassLoader userClassLoader) throws Exception {_		dispose(userClassLoader, true)__	};discards,the,pending,checkpoint,releasing,all,held,resources;public,void,discard,class,loader,user,class,loader,throws,exception,dispose,user,class,loader,true
PendingCheckpoint -> public void abortSubsumed() throws Exception;1471453562;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() throws Exception {_		dispose(true)__	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,throws,exception,dispose,true
PendingCheckpoint -> public void abortSubsumed() throws Exception;1472663401;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() throws Exception {_		dispose(true)__	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,throws,exception,dispose,true
PendingCheckpoint -> public void abortSubsumed() throws Exception;1475231926;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() throws Exception {_		dispose(true)__	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,throws,exception,dispose,true
PendingCheckpoint -> public void abortSubsumed() throws Exception;1476432306;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() throws Exception {_		try {_			if (props.forceCheckpoint()) {_				onCompletionPromise.completeExceptionally(new Exception("Bug: forced checkpoints must never be subsumed"))___				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			} else {_				onCompletionPromise.completeExceptionally(new Exception("Checkpoints has been subsumed"))__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,throws,exception,try,if,props,force,checkpoint,on,completion,promise,complete,exceptionally,new,exception,bug,forced,checkpoints,must,never,be,subsumed,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,else,on,completion,promise,complete,exceptionally,new,exception,checkpoints,has,been,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed() throws Exception;1476432429;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() throws Exception {_		try {_			if (props.forceCheckpoint()) {_				onCompletionPromise.completeExceptionally(new Exception("Bug: forced checkpoints must never be subsumed"))___				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			} else {_				onCompletionPromise.completeExceptionally(new Exception("Checkpoints has been subsumed"))__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,throws,exception,try,if,props,force,checkpoint,on,completion,promise,complete,exceptionally,new,exception,bug,forced,checkpoints,must,never,be,subsumed,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,else,on,completion,promise,complete,exceptionally,new,exception,checkpoints,has,been,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed() throws Exception;1476972861;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() throws Exception {_		try {_			if (props.forceCheckpoint()) {_				onCompletionPromise.completeExceptionally(new Exception("Bug: forced checkpoints must never be subsumed"))___				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			} else {_				onCompletionPromise.completeExceptionally(new Exception("Checkpoints has been subsumed"))__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,throws,exception,try,if,props,force,checkpoint,on,completion,promise,complete,exceptionally,new,exception,bug,forced,checkpoints,must,never,be,subsumed,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,else,on,completion,promise,complete,exceptionally,new,exception,checkpoints,has,been,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed() throws Exception;1478686625;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() throws Exception {_		try {_			if (props.forceCheckpoint()) {_				onCompletionPromise.completeExceptionally(new Exception("Bug: forced checkpoints must never be subsumed"))___				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			} else {_				onCompletionPromise.completeExceptionally(new Exception("Checkpoints has been subsumed"))__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,throws,exception,try,if,props,force,checkpoint,on,completion,promise,complete,exceptionally,new,exception,bug,forced,checkpoints,must,never,be,subsumed,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,else,on,completion,promise,complete,exceptionally,new,exception,checkpoints,has,been,subsumed,finally,dispose,true
PendingCheckpoint -> public void abortSubsumed() throws Exception;1479339295;Aborts the pending checkpoint because a newer completed checkpoint subsumed it.;public void abortSubsumed() throws Exception {_		try {_			if (props.forceCheckpoint()) {_				onCompletionPromise.completeExceptionally(new Exception("Bug: forced checkpoints must never be subsumed"))___				throw new IllegalStateException("Bug: forced checkpoints must never be subsumed")__			} else {_				onCompletionPromise.completeExceptionally(new Exception("Checkpoints has been subsumed"))__			}_		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,because,a,newer,completed,checkpoint,subsumed,it;public,void,abort,subsumed,throws,exception,try,if,props,force,checkpoint,on,completion,promise,complete,exceptionally,new,exception,bug,forced,checkpoints,must,never,be,subsumed,throw,new,illegal,state,exception,bug,forced,checkpoints,must,never,be,subsumed,else,on,completion,promise,complete,exceptionally,new,exception,checkpoints,has,been,subsumed,finally,dispose,true
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetaData checkpointMetaData);1484038132;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param checkpointMetaData Checkpoint meta data_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetaData checkpointMetaData) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			JobVertexID jobVertexID = vertex.getJobvertexId()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (null != subtaskState) {_				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					ChainedStateHandle<StreamStateHandle> nonPartitionedState =_							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				taskState.putState(subtaskIndex, subtaskState)__				stateSize = subtaskState.getStateSize()__			}__			++numAcknowledgedTasks___			if (statsCallback != null) {_				CheckpointMetrics metrics = checkpointMetaData.getMetrics()___				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(jobVertexID, subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,checkpoint,meta,data,checkpoint,meta,data,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,meta,data,checkpoint,meta,data,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,null,subtask,state,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,task,state,put,state,subtask,index,subtask,state,state,size,subtask,state,get,state,size,num,acknowledged,tasks,if,stats,callback,null,checkpoint,metrics,metrics,checkpoint,meta,data,get,metrics,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,job,vertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetaData checkpointMetaData);1485531920;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param checkpointMetaData Checkpoint meta data_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetaData checkpointMetaData) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			JobVertexID jobVertexID = vertex.getJobvertexId()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (null != subtaskState) {_				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					ChainedStateHandle<StreamStateHandle> nonPartitionedState =_							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				taskState.putState(subtaskIndex, subtaskState)__				stateSize = subtaskState.getStateSize()__			}__			++numAcknowledgedTasks___			if (statsCallback != null) {_				CheckpointMetrics metrics = checkpointMetaData.getMetrics()___				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(jobVertexID, subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,checkpoint,meta,data,checkpoint,meta,data,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,meta,data,checkpoint,meta,data,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,null,subtask,state,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,task,state,put,state,subtask,index,subtask,state,state,size,subtask,state,get,state,size,num,acknowledged,tasks,if,stats,callback,null,checkpoint,metrics,metrics,checkpoint,meta,data,get,metrics,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,job,vertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public CompletableFuture<CompletedCheckpoint> getCompletionFuture();1501588490;Returns the completion future.__@return A future to the completed checkpoint;public CompletableFuture<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,completable,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public CompletableFuture<CompletedCheckpoint> getCompletionFuture();1502801814;Returns the completion future.__@return A future to the completed checkpoint;public CompletableFuture<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,completable,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public CompletableFuture<CompletedCheckpoint> getCompletionFuture();1509125300;Returns the completion future.__@return A future to the completed checkpoint;public CompletableFuture<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,completable,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public CompletableFuture<CompletedCheckpoint> getCompletionFuture();1516295283;Returns the completion future.__@return A future to the completed checkpoint;public CompletableFuture<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,completable,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public CompletableFuture<CompletedCheckpoint> getCompletionFuture();1517489696;Returns the completion future.__@return A future to the completed checkpoint;public CompletableFuture<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,completable,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public CompletableFuture<CompletedCheckpoint> getCompletionFuture();1542043996;Returns the completion future.__@return A future to the completed checkpoint;public CompletableFuture<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,completable,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public void abortError(Throwable cause);1479852017;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			onCompletionPromise.completeExceptionally(new Exception("Checkpoint failed: " + cause.getMessage(), cause))__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,on,completion,promise,complete,exceptionally,new,exception,checkpoint,failed,cause,get,message,cause,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1481295943;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			onCompletionPromise.completeExceptionally(new Exception("Checkpoint failed: " + cause.getMessage(), cause))__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,on,completion,promise,complete,exceptionally,new,exception,checkpoint,failed,cause,get,message,cause,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1484038132;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1485531920;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1487762095;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1487871589;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1488304750;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1488304933;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1489060855;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1489671806;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1492678790;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1492867556;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1492867556;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1493236605;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1493325408;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1493403095;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1495287945;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1501588490;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1502801814;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1509125300;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1516295283;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause);1517489696;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) {_		try {_			Exception failure = new Exception("Checkpoint failed: " + cause.getMessage(), cause)__			onCompletionPromise.completeExceptionally(failure)__			reportFailedCheckpoint(failure)__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,try,exception,failure,new,exception,checkpoint,failed,cause,get,message,cause,on,completion,promise,complete,exceptionally,failure,report,failed,checkpoint,failure,finally,dispose,true
PendingCheckpoint -> public void abortExpired() throws Exception;1471453562;Aborts a checkpoint because it expired (took too long).;public void abortExpired() throws Exception {_		dispose(true)__	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,throws,exception,dispose,true
PendingCheckpoint -> public void abortExpired() throws Exception;1472663401;Aborts a checkpoint because it expired (took too long).;public void abortExpired() throws Exception {_		dispose(true)__	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,throws,exception,dispose,true
PendingCheckpoint -> public void abortExpired() throws Exception;1475231926;Aborts a checkpoint because it expired (took too long).;public void abortExpired() throws Exception {_		dispose(true)__	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,throws,exception,dispose,true
PendingCheckpoint -> public void abortExpired() throws Exception;1476432306;Aborts a checkpoint because it expired (took too long).;public void abortExpired() throws Exception {_		try {_			onCompletionPromise.completeExceptionally(new Exception("Checkpoint expired before completing"))__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,throws,exception,try,on,completion,promise,complete,exceptionally,new,exception,checkpoint,expired,before,completing,finally,dispose,true
PendingCheckpoint -> public void abortExpired() throws Exception;1476432429;Aborts a checkpoint because it expired (took too long).;public void abortExpired() throws Exception {_		try {_			onCompletionPromise.completeExceptionally(new Exception("Checkpoint expired before completing"))__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,throws,exception,try,on,completion,promise,complete,exceptionally,new,exception,checkpoint,expired,before,completing,finally,dispose,true
PendingCheckpoint -> public void abortExpired() throws Exception;1476972861;Aborts a checkpoint because it expired (took too long).;public void abortExpired() throws Exception {_		try {_			onCompletionPromise.completeExceptionally(new Exception("Checkpoint expired before completing"))__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,throws,exception,try,on,completion,promise,complete,exceptionally,new,exception,checkpoint,expired,before,completing,finally,dispose,true
PendingCheckpoint -> public void abortExpired() throws Exception;1478686625;Aborts a checkpoint because it expired (took too long).;public void abortExpired() throws Exception {_		try {_			onCompletionPromise.completeExceptionally(new Exception("Checkpoint expired before completing"))__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,throws,exception,try,on,completion,promise,complete,exceptionally,new,exception,checkpoint,expired,before,completing,finally,dispose,true
PendingCheckpoint -> public void abortExpired() throws Exception;1479339295;Aborts a checkpoint because it expired (took too long).;public void abortExpired() throws Exception {_		try {_			onCompletionPromise.completeExceptionally(new Exception("Checkpoint expired before completing"))__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,throws,exception,try,on,completion,promise,complete,exceptionally,new,exception,checkpoint,expired,before,completing,finally,dispose,true
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1484038132;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1485531920;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1487762095;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1487871589;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1488304750;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1488304933;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1489060855;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1489671806;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1492678790;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1492867556;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1492867556;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1493236605;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1493325408;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1493403095;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1495287945;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1501588490;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1502801814;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1509125300;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1516295283;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1517489696;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> private void reportFailedCheckpoint(Exception cause);1542043996;Reports a failed checkpoint with the given optional cause.__@param cause The failure cause or <code>null</code>.;private void reportFailedCheckpoint(Exception cause) {_		_		final PendingCheckpointStats statsCallback = this.statsCallback__		if (statsCallback != null) {_			long failureTimestamp = System.currentTimeMillis()__			statsCallback.reportFailedCheckpoint(failureTimestamp, cause)__		}_	};reports,a,failed,checkpoint,with,the,given,optional,cause,param,cause,the,failure,cause,or,code,null,code;private,void,report,failed,checkpoint,exception,cause,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,failure,timestamp,system,current,time,millis,stats,callback,report,failed,checkpoint,failure,timestamp,cause
PendingCheckpoint -> public void abortExpired();1479852017;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			onCompletionPromise.completeExceptionally(new Exception("Checkpoint expired before completing"))__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,on,completion,promise,complete,exceptionally,new,exception,checkpoint,expired,before,completing,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1481295943;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			onCompletionPromise.completeExceptionally(new Exception("Checkpoint expired before completing"))__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,on,completion,promise,complete,exceptionally,new,exception,checkpoint,expired,before,completing,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1484038132;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1485531920;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1487762095;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1487871589;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1488304750;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1488304933;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1489060855;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1489671806;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1492678790;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1492867556;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1492867556;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1493236605;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1493325408;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1493403095;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1495287945;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1501588490;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1502801814;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1509125300;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1516295283;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1517489696;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public void abortExpired();1542043996;Aborts a checkpoint because it expired (took too long).;public void abortExpired() {_		try {_			Exception cause = new Exception("Checkpoint expired before completing")__			onCompletionPromise.completeExceptionally(cause)__			reportFailedCheckpoint(cause)__		} finally {_			dispose(true)__		}_	};aborts,a,checkpoint,because,it,expired,took,too,long;public,void,abort,expired,try,exception,cause,new,exception,checkpoint,expired,before,completing,on,completion,promise,complete,exceptionally,cause,report,failed,checkpoint,cause,finally,dispose,true
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			TaskStateSnapshot operatorSubtaskStates, 			CheckpointMetrics metrics);1502801814;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param operatorSubtaskStates of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			TaskStateSnapshot operatorSubtaskStates,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			List<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIDs()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0L___			if (operatorSubtaskStates != null) {_				for (OperatorID operatorID : operatorIDs) {__					OperatorSubtaskState operatorSubtaskState =_						operatorSubtaskStates.getSubtaskStateByOperatorID(operatorID)___					_					if (operatorSubtaskState == null) {_						operatorSubtaskState = new OperatorSubtaskState()__					}__					OperatorState operatorState = operatorStates.get(operatorID)___					if (operatorState == null) {_						operatorState = new OperatorState(_							operatorID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism())__						operatorStates.put(operatorID, operatorState)__					}__					operatorState.putState(subtaskIndex, operatorSubtaskState)__					stateSize += operatorSubtaskState.getStateSize()__				}_			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(vertex.getJobvertexId(), subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,operator,subtask,states,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,task,state,snapshot,operator,subtask,states,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,list,operator,id,operator,ids,vertex,get,job,vertex,get,operator,ids,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0l,if,operator,subtask,states,null,for,operator,id,operator,id,operator,ids,operator,subtask,state,operator,subtask,state,operator,subtask,states,get,subtask,state,by,operator,id,operator,id,if,operator,subtask,state,null,operator,subtask,state,new,operator,subtask,state,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,operator,state,put,state,subtask,index,operator,subtask,state,state,size,operator,subtask,state,get,state,size,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,vertex,get,jobvertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			TaskStateSnapshot operatorSubtaskStates, 			CheckpointMetrics metrics);1509125300;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param operatorSubtaskStates of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			TaskStateSnapshot operatorSubtaskStates,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			List<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIDs()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0L___			if (operatorSubtaskStates != null) {_				for (OperatorID operatorID : operatorIDs) {__					OperatorSubtaskState operatorSubtaskState =_						operatorSubtaskStates.getSubtaskStateByOperatorID(operatorID)___					_					if (operatorSubtaskState == null) {_						operatorSubtaskState = new OperatorSubtaskState()__					}__					OperatorState operatorState = operatorStates.get(operatorID)___					if (operatorState == null) {_						operatorState = new OperatorState(_							operatorID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism())__						operatorStates.put(operatorID, operatorState)__					}__					operatorState.putState(subtaskIndex, operatorSubtaskState)__					stateSize += operatorSubtaskState.getStateSize()__				}_			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(vertex.getJobvertexId(), subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,operator,subtask,states,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,task,state,snapshot,operator,subtask,states,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,list,operator,id,operator,ids,vertex,get,job,vertex,get,operator,ids,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0l,if,operator,subtask,states,null,for,operator,id,operator,id,operator,ids,operator,subtask,state,operator,subtask,state,operator,subtask,states,get,subtask,state,by,operator,id,operator,id,if,operator,subtask,state,null,operator,subtask,state,new,operator,subtask,state,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,operator,state,put,state,subtask,index,operator,subtask,state,state,size,operator,subtask,state,get,state,size,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,vertex,get,jobvertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			TaskStateSnapshot operatorSubtaskStates, 			CheckpointMetrics metrics);1516295283;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param operatorSubtaskStates of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			TaskStateSnapshot operatorSubtaskStates,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			List<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIDs()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0L___			if (operatorSubtaskStates != null) {_				for (OperatorID operatorID : operatorIDs) {__					OperatorSubtaskState operatorSubtaskState =_						operatorSubtaskStates.getSubtaskStateByOperatorID(operatorID)___					_					if (operatorSubtaskState == null) {_						operatorSubtaskState = new OperatorSubtaskState()__					}__					OperatorState operatorState = operatorStates.get(operatorID)___					if (operatorState == null) {_						operatorState = new OperatorState(_							operatorID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism())__						operatorStates.put(operatorID, operatorState)__					}__					operatorState.putState(subtaskIndex, operatorSubtaskState)__					stateSize += operatorSubtaskState.getStateSize()__				}_			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(vertex.getJobvertexId(), subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,operator,subtask,states,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,task,state,snapshot,operator,subtask,states,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,list,operator,id,operator,ids,vertex,get,job,vertex,get,operator,ids,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0l,if,operator,subtask,states,null,for,operator,id,operator,id,operator,ids,operator,subtask,state,operator,subtask,state,operator,subtask,states,get,subtask,state,by,operator,id,operator,id,if,operator,subtask,state,null,operator,subtask,state,new,operator,subtask,state,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,operator,state,put,state,subtask,index,operator,subtask,state,state,size,operator,subtask,state,get,state,size,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,vertex,get,jobvertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			TaskStateSnapshot operatorSubtaskStates, 			CheckpointMetrics metrics);1517489696;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param operatorSubtaskStates of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			TaskStateSnapshot operatorSubtaskStates,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			List<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIDs()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0L___			if (operatorSubtaskStates != null) {_				for (OperatorID operatorID : operatorIDs) {__					OperatorSubtaskState operatorSubtaskState =_						operatorSubtaskStates.getSubtaskStateByOperatorID(operatorID)___					_					if (operatorSubtaskState == null) {_						operatorSubtaskState = new OperatorSubtaskState()__					}__					OperatorState operatorState = operatorStates.get(operatorID)___					if (operatorState == null) {_						operatorState = new OperatorState(_							operatorID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism())__						operatorStates.put(operatorID, operatorState)__					}__					operatorState.putState(subtaskIndex, operatorSubtaskState)__					stateSize += operatorSubtaskState.getStateSize()__				}_			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(vertex.getJobvertexId(), subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,operator,subtask,states,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,task,state,snapshot,operator,subtask,states,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,list,operator,id,operator,ids,vertex,get,job,vertex,get,operator,ids,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0l,if,operator,subtask,states,null,for,operator,id,operator,id,operator,ids,operator,subtask,state,operator,subtask,state,operator,subtask,states,get,subtask,state,by,operator,id,operator,id,if,operator,subtask,state,null,operator,subtask,state,new,operator,subtask,state,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,operator,state,put,state,subtask,index,operator,subtask,state,state,size,operator,subtask,state,get,state,size,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,vertex,get,jobvertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			TaskStateSnapshot operatorSubtaskStates, 			CheckpointMetrics metrics);1542043996;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param operatorSubtaskStates of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			TaskStateSnapshot operatorSubtaskStates,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			List<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIDs()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0L___			if (operatorSubtaskStates != null) {_				for (OperatorID operatorID : operatorIDs) {__					OperatorSubtaskState operatorSubtaskState =_						operatorSubtaskStates.getSubtaskStateByOperatorID(operatorID)___					_					if (operatorSubtaskState == null) {_						operatorSubtaskState = new OperatorSubtaskState()__					}__					OperatorState operatorState = operatorStates.get(operatorID)___					if (operatorState == null) {_						operatorState = new OperatorState(_							operatorID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism())__						operatorStates.put(operatorID, operatorState)__					}__					operatorState.putState(subtaskIndex, operatorSubtaskState)__					stateSize += operatorSubtaskState.getStateSize()__				}_			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(vertex.getJobvertexId(), subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,operator,subtask,states,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,task,state,snapshot,operator,subtask,states,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,list,operator,id,operator,ids,vertex,get,job,vertex,get,operator,ids,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0l,if,operator,subtask,states,null,for,operator,id,operator,id,operator,ids,operator,subtask,state,operator,subtask,state,operator,subtask,states,get,subtask,state,by,operator,id,operator,id,if,operator,subtask,state,null,operator,subtask,state,new,operator,subtask,state,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,operator,state,put,state,subtask,index,operator,subtask,state,state,size,operator,subtask,state,get,state,size,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,vertex,get,jobvertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1484038132;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = checkNotNull(trackerCallback)__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,check,not,null,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1485531920;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = checkNotNull(trackerCallback)__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,check,not,null,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1487762095;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = checkNotNull(trackerCallback)__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,check,not,null,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1487871589;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = checkNotNull(trackerCallback)__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,check,not,null,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1488304750;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = checkNotNull(trackerCallback)__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,check,not,null,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1488304933;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = checkNotNull(trackerCallback)__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,check,not,null,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1489060855;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1489671806;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1492678790;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1492867556;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1492867556;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1493236605;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1493325408;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1493403095;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1495287945;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1501588490;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1502801814;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1509125300;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1516295283;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1517489696;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback);1542043996;Sets the callback for tracking this pending checkpoint.__@param trackerCallback Callback for collecting subtask stats.;void setStatsCallback(@Nullable PendingCheckpointStats trackerCallback) {_		this.statsCallback = trackerCallback__	};sets,the,callback,for,tracking,this,pending,checkpoint,param,tracker,callback,callback,for,collecting,subtask,stats;void,set,stats,callback,nullable,pending,checkpoint,stats,tracker,callback,this,stats,callback,tracker,callback
PendingCheckpoint -> public void addMasterState(MasterState state);1493236605;Adds a master state (state generated on the checkpoint coordinator) to_the pending checkpoint.__@param state The state to add;public void addMasterState(MasterState state) {_		checkNotNull(state)__		masterState.add(state)__	};adds,a,master,state,state,generated,on,the,checkpoint,coordinator,to,the,pending,checkpoint,param,state,the,state,to,add;public,void,add,master,state,master,state,state,check,not,null,state,master,state,add,state
PendingCheckpoint -> public void addMasterState(MasterState state);1493325408;Adds a master state (state generated on the checkpoint coordinator) to_the pending checkpoint.__@param state The state to add;public void addMasterState(MasterState state) {_		checkNotNull(state)___		synchronized (lock) {_			if (!discarded) {_				masterState.add(state)__			}_		}_	};adds,a,master,state,state,generated,on,the,checkpoint,coordinator,to,the,pending,checkpoint,param,state,the,state,to,add;public,void,add,master,state,master,state,state,check,not,null,state,synchronized,lock,if,discarded,master,state,add,state
PendingCheckpoint -> public void addMasterState(MasterState state);1493403095;Adds a master state (state generated on the checkpoint coordinator) to_the pending checkpoint.__@param state The state to add;public void addMasterState(MasterState state) {_		checkNotNull(state)___		synchronized (lock) {_			if (!discarded) {_				masterState.add(state)__			}_		}_	};adds,a,master,state,state,generated,on,the,checkpoint,coordinator,to,the,pending,checkpoint,param,state,the,state,to,add;public,void,add,master,state,master,state,state,check,not,null,state,synchronized,lock,if,discarded,master,state,add,state
PendingCheckpoint -> public void addMasterState(MasterState state);1495287945;Adds a master state (state generated on the checkpoint coordinator) to_the pending checkpoint.__@param state The state to add;public void addMasterState(MasterState state) {_		checkNotNull(state)___		synchronized (lock) {_			if (!discarded) {_				masterState.add(state)__			}_		}_	};adds,a,master,state,state,generated,on,the,checkpoint,coordinator,to,the,pending,checkpoint,param,state,the,state,to,add;public,void,add,master,state,master,state,state,check,not,null,state,synchronized,lock,if,discarded,master,state,add,state
PendingCheckpoint -> public void addMasterState(MasterState state);1501588490;Adds a master state (state generated on the checkpoint coordinator) to_the pending checkpoint.__@param state The state to add;public void addMasterState(MasterState state) {_		checkNotNull(state)___		synchronized (lock) {_			if (!discarded) {_				masterState.add(state)__			}_		}_	};adds,a,master,state,state,generated,on,the,checkpoint,coordinator,to,the,pending,checkpoint,param,state,the,state,to,add;public,void,add,master,state,master,state,state,check,not,null,state,synchronized,lock,if,discarded,master,state,add,state
PendingCheckpoint -> public void addMasterState(MasterState state);1502801814;Adds a master state (state generated on the checkpoint coordinator) to_the pending checkpoint.__@param state The state to add;public void addMasterState(MasterState state) {_		checkNotNull(state)___		synchronized (lock) {_			if (!discarded) {_				masterState.add(state)__			}_		}_	};adds,a,master,state,state,generated,on,the,checkpoint,coordinator,to,the,pending,checkpoint,param,state,the,state,to,add;public,void,add,master,state,master,state,state,check,not,null,state,synchronized,lock,if,discarded,master,state,add,state
PendingCheckpoint -> public void addMasterState(MasterState state);1509125300;Adds a master state (state generated on the checkpoint coordinator) to_the pending checkpoint.__@param state The state to add;public void addMasterState(MasterState state) {_		checkNotNull(state)___		synchronized (lock) {_			if (!discarded) {_				masterState.add(state)__			}_		}_	};adds,a,master,state,state,generated,on,the,checkpoint,coordinator,to,the,pending,checkpoint,param,state,the,state,to,add;public,void,add,master,state,master,state,state,check,not,null,state,synchronized,lock,if,discarded,master,state,add,state
PendingCheckpoint -> public void addMasterState(MasterState state);1516295283;Adds a master state (state generated on the checkpoint coordinator) to_the pending checkpoint.__@param state The state to add;public void addMasterState(MasterState state) {_		checkNotNull(state)___		synchronized (lock) {_			if (!discarded) {_				masterState.add(state)__			}_		}_	};adds,a,master,state,state,generated,on,the,checkpoint,coordinator,to,the,pending,checkpoint,param,state,the,state,to,add;public,void,add,master,state,master,state,state,check,not,null,state,synchronized,lock,if,discarded,master,state,add,state
PendingCheckpoint -> public void addMasterState(MasterState state);1517489696;Adds a master state (state generated on the checkpoint coordinator) to_the pending checkpoint.__@param state The state to add;public void addMasterState(MasterState state) {_		checkNotNull(state)___		synchronized (lock) {_			if (!discarded) {_				masterState.add(state)__			}_		}_	};adds,a,master,state,state,generated,on,the,checkpoint,coordinator,to,the,pending,checkpoint,param,state,the,state,to,add;public,void,add,master,state,master,state,state,check,not,null,state,synchronized,lock,if,discarded,master,state,add,state
PendingCheckpoint -> public void addMasterState(MasterState state);1542043996;Adds a master state (state generated on the checkpoint coordinator) to_the pending checkpoint.__@param state The state to add;public void addMasterState(MasterState state) {_		checkNotNull(state)___		synchronized (lock) {_			if (!discarded) {_				masterState.add(state)__			}_		}_	};adds,a,master,state,state,generated,on,the,checkpoint,coordinator,to,the,pending,checkpoint,param,state,the,state,to,add;public,void,add,master,state,master,state,state,check,not,null,state,synchronized,lock,if,discarded,master,state,add,state
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState);1479339295;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState) {__		synchronized (lock) {__			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			if (null != subtaskState) {__				JobVertexID jobVertexID = vertex.getJobvertexId()__				int subtaskIndex = vertex.getParallelSubtaskIndex()__				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					ChainedStateHandle<StreamStateHandle> nonPartitionedState =_							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				long duration = System.currentTimeMillis() - checkpointTimestamp__				subtaskState.setDuration(duration)___				taskState.putState(subtaskIndex, subtaskState)__			}__			++numAcknowledgedTasks___			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,if,null,subtask,state,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,long,duration,system,current,time,millis,checkpoint,timestamp,subtask,state,set,duration,duration,task,state,put,state,subtask,index,subtask,state,num,acknowledged,tasks,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState);1479852017;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState) {__		synchronized (lock) {__			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			if (null != subtaskState) {__				JobVertexID jobVertexID = vertex.getJobvertexId()__				int subtaskIndex = vertex.getParallelSubtaskIndex()__				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					ChainedStateHandle<StreamStateHandle> nonPartitionedState =_							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				long duration = System.currentTimeMillis() - checkpointTimestamp__				subtaskState.setDuration(duration)___				taskState.putState(subtaskIndex, subtaskState)__			}__			++numAcknowledgedTasks___			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,if,null,subtask,state,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,long,duration,system,current,time,millis,checkpoint,timestamp,subtask,state,set,duration,duration,task,state,put,state,subtask,index,subtask,state,num,acknowledged,tasks,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState);1481295943;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState) {__		synchronized (lock) {__			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			if (null != subtaskState) {__				JobVertexID jobVertexID = vertex.getJobvertexId()__				int subtaskIndex = vertex.getParallelSubtaskIndex()__				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					ChainedStateHandle<StreamStateHandle> nonPartitionedState =_							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				long duration = System.currentTimeMillis() - checkpointTimestamp__				subtaskState.setDuration(duration)___				taskState.putState(subtaskIndex, subtaskState)__			}__			++numAcknowledgedTasks___			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,if,null,subtask,state,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,long,duration,system,current,time,millis,checkpoint,timestamp,subtask,state,set,duration,duration,task,state,put,state,subtask,index,subtask,state,num,acknowledged,tasks,return,task,acknowledge,result,success
PendingCheckpoint -> public void discard();1430297241;Discards the pending checkpoint, releasing all held resources.;public void discard() {_		synchronized (lock) {_			discarded = true__			numAcknowledgedTasks = -1__			collectedStates.clear()__			notYetAcknowledgedTasks.clear()__		}_	};discards,the,pending,checkpoint,releasing,all,held,resources;public,void,discard,synchronized,lock,discarded,true,num,acknowledged,tasks,1,collected,states,clear,not,yet,acknowledged,tasks,clear
PendingCheckpoint -> public void discard();1431459357;Discards the pending checkpoint, releasing all held resources.;public void discard() {_		synchronized (lock) {_			discarded = true__			numAcknowledgedTasks = -1__			collectedStates.clear()__			notYetAcknowledgedTasks.clear()__		}_	};discards,the,pending,checkpoint,releasing,all,held,resources;public,void,discard,synchronized,lock,discarded,true,num,acknowledged,tasks,1,collected,states,clear,not,yet,acknowledged,tasks,clear
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1476432306;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1476432429;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1476972861;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1478686625;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1479339295;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1479852017;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1481295943;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1484038132;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1485531920;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1487762095;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1487871589;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1488304750;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1488304933;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1489060855;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1489671806;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1492678790;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1492867556;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1492867556;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1493236605;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1493325408;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1493403095;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public Future<CompletedCheckpoint> getCompletionFuture();1495287945;Returns the completion future.__@return A future to the completed checkpoint;public Future<CompletedCheckpoint> getCompletionFuture() {_		return onCompletionPromise__	};returns,the,completion,future,return,a,future,to,the,completed,checkpoint;public,future,completed,checkpoint,get,completion,future,return,on,completion,promise
PendingCheckpoint -> public void abortError(Throwable cause) throws Exception;1471453562;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) throws Exception {_		dispose(true)__	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,throws,exception,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause) throws Exception;1472663401;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) throws Exception {_		dispose(true)__	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,throws,exception,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause) throws Exception;1475231926;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) throws Exception {_		dispose(true)__	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,throws,exception,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause) throws Exception;1476432306;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) throws Exception {_		try {_			onCompletionPromise.completeExceptionally(new Exception("Checkpoint failed: " + cause.getMessage(), cause))__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,throws,exception,try,on,completion,promise,complete,exceptionally,new,exception,checkpoint,failed,cause,get,message,cause,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause) throws Exception;1476432429;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) throws Exception {_		try {_			onCompletionPromise.completeExceptionally(new Exception("Checkpoint failed: " + cause.getMessage(), cause))__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,throws,exception,try,on,completion,promise,complete,exceptionally,new,exception,checkpoint,failed,cause,get,message,cause,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause) throws Exception;1476972861;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) throws Exception {_		try {_			onCompletionPromise.completeExceptionally(new Exception("Checkpoint failed: " + cause.getMessage(), cause))__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,throws,exception,try,on,completion,promise,complete,exceptionally,new,exception,checkpoint,failed,cause,get,message,cause,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause) throws Exception;1478686625;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) throws Exception {_		try {_			onCompletionPromise.completeExceptionally(new Exception("Checkpoint failed: " + cause.getMessage(), cause))__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,throws,exception,try,on,completion,promise,complete,exceptionally,new,exception,checkpoint,failed,cause,get,message,cause,finally,dispose,true
PendingCheckpoint -> public void abortError(Throwable cause) throws Exception;1479339295;Aborts the pending checkpoint due to an error._@param cause The error's exception.;public void abortError(Throwable cause) throws Exception {_		try {_			onCompletionPromise.completeExceptionally(new Exception("Checkpoint failed: " + cause.getMessage(), cause))__		} finally {_			dispose(true)__		}_	};aborts,the,pending,checkpoint,due,to,an,error,param,cause,the,error,s,exception;public,void,abort,error,throwable,cause,throws,exception,try,on,completion,promise,complete,exceptionally,new,exception,checkpoint,failed,cause,get,message,cause,finally,dispose,true
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetrics metrics);1487762095;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			JobVertexID jobVertexID = vertex.getJobvertexId()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (null != subtaskState) {_				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					ChainedStateHandle<StreamStateHandle> nonPartitionedState =_							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				taskState.putState(subtaskIndex, subtaskState)__				stateSize = subtaskState.getStateSize()__			}__			++numAcknowledgedTasks___			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(jobVertexID, subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,null,subtask,state,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,task,state,put,state,subtask,index,subtask,state,state,size,subtask,state,get,state,size,num,acknowledged,tasks,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,job,vertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetrics metrics);1487871589;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			JobVertexID jobVertexID = vertex.getJobvertexId()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (null != subtaskState) {_				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					ChainedStateHandle<StreamStateHandle> nonPartitionedState =_							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				taskState.putState(subtaskIndex, subtaskState)__				stateSize = subtaskState.getStateSize()__			}__			++numAcknowledgedTasks___			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(jobVertexID, subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,null,subtask,state,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,task,state,put,state,subtask,index,subtask,state,state,size,subtask,state,get,state,size,num,acknowledged,tasks,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,job,vertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetrics metrics);1488304750;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			JobVertexID jobVertexID = vertex.getJobvertexId()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (null != subtaskState) {_				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					ChainedStateHandle<StreamStateHandle> nonPartitionedState =_							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				taskState.putState(subtaskIndex, subtaskState)__				stateSize = subtaskState.getStateSize()__			}__			++numAcknowledgedTasks___			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(jobVertexID, subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,null,subtask,state,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,task,state,put,state,subtask,index,subtask,state,state,size,subtask,state,get,state,size,num,acknowledged,tasks,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,job,vertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetrics metrics);1488304933;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			JobVertexID jobVertexID = vertex.getJobvertexId()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (null != subtaskState) {_				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					ChainedStateHandle<StreamStateHandle> nonPartitionedState =_							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				taskState.putState(subtaskIndex, subtaskState)__				stateSize = subtaskState.getStateSize()__			}__			++numAcknowledgedTasks___			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(jobVertexID, subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,null,subtask,state,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,task,state,put,state,subtask,index,subtask,state,state,size,subtask,state,get,state,size,num,acknowledged,tasks,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,job,vertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetrics metrics);1489060855;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			JobVertexID jobVertexID = vertex.getJobvertexId()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (null != subtaskState) {_				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					@SuppressWarnings("deprecation")_					ChainedStateHandle<StreamStateHandle> nonPartitionedState = _							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				taskState.putState(subtaskIndex, subtaskState)__				stateSize = subtaskState.getStateSize()__			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(jobVertexID, subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,null,subtask,state,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,suppress,warnings,deprecation,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,task,state,put,state,subtask,index,subtask,state,state,size,subtask,state,get,state,size,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,job,vertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetrics metrics);1489671806;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			JobVertexID jobVertexID = vertex.getJobvertexId()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (null != subtaskState) {_				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					@SuppressWarnings("deprecation")_					ChainedStateHandle<StreamStateHandle> nonPartitionedState = _							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				taskState.putState(subtaskIndex, subtaskState)__				stateSize = subtaskState.getStateSize()__			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(jobVertexID, subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,null,subtask,state,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,suppress,warnings,deprecation,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,task,state,put,state,subtask,index,subtask,state,state,size,subtask,state,get,state,size,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,job,vertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetrics metrics);1492678790;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			JobVertexID jobVertexID = vertex.getJobvertexId()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (null != subtaskState) {_				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					@SuppressWarnings("deprecation")_					ChainedStateHandle<StreamStateHandle> nonPartitionedState = _							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				taskState.putState(subtaskIndex, subtaskState)__				stateSize = subtaskState.getStateSize()__			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(jobVertexID, subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,null,subtask,state,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,suppress,warnings,deprecation,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,task,state,put,state,subtask,index,subtask,state,state,size,subtask,state,get,state,size,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,job,vertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetrics metrics);1492867556;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			JobVertexID jobVertexID = vertex.getJobvertexId()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (null != subtaskState) {_				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					@SuppressWarnings("deprecation")_					ChainedStateHandle<StreamStateHandle> nonPartitionedState = _							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				taskState.putState(subtaskIndex, subtaskState)__				stateSize = subtaskState.getStateSize()__			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(jobVertexID, subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,null,subtask,state,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,suppress,warnings,deprecation,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,task,state,put,state,subtask,index,subtask,state,state,size,subtask,state,get,state,size,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,job,vertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetrics metrics);1492867556;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			JobVertexID jobVertexID = vertex.getJobvertexId()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (null != subtaskState) {_				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					@SuppressWarnings("deprecation")_					ChainedStateHandle<StreamStateHandle> nonPartitionedState = _							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				taskState.putState(subtaskIndex, subtaskState)__				stateSize = subtaskState.getStateSize()__			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(jobVertexID, subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,null,subtask,state,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,suppress,warnings,deprecation,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,task,state,put,state,subtask,index,subtask,state,state,size,subtask,state,get,state,size,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,job,vertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetrics metrics);1493236605;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			JobVertexID jobVertexID = vertex.getJobvertexId()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (null != subtaskState) {_				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					@SuppressWarnings("deprecation")_					ChainedStateHandle<StreamStateHandle> nonPartitionedState = _							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				taskState.putState(subtaskIndex, subtaskState)__				stateSize = subtaskState.getStateSize()__			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(jobVertexID, subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,null,subtask,state,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,suppress,warnings,deprecation,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,task,state,put,state,subtask,index,subtask,state,state,size,subtask,state,get,state,size,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,job,vertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetrics metrics);1493325408;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			JobVertexID jobVertexID = vertex.getJobvertexId()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (null != subtaskState) {_				TaskState taskState = taskStates.get(jobVertexID)___				if (null == taskState) {_					@SuppressWarnings("deprecation")_					ChainedStateHandle<StreamStateHandle> nonPartitionedState = _							subtaskState.getLegacyOperatorState()__					ChainedStateHandle<OperatorStateHandle> partitioneableState =_							subtaskState.getManagedOperatorState()__					_					int chainLength__					if (nonPartitionedState != null) {_						chainLength = nonPartitionedState.getLength()__					} else if (partitioneableState != null) {_						chainLength = partitioneableState.getLength()__					} else {_						chainLength = 1__					}__					taskState = new TaskState(_							jobVertexID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism(),_							chainLength)___					taskStates.put(jobVertexID, taskState)__				}__				taskState.putState(subtaskIndex, subtaskState)__				stateSize = subtaskState.getStateSize()__			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(jobVertexID, subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,job,vertex,id,job,vertex,id,vertex,get,jobvertex,id,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,null,subtask,state,task,state,task,state,task,states,get,job,vertex,id,if,null,task,state,suppress,warnings,deprecation,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,int,chain,length,if,non,partitioned,state,null,chain,length,non,partitioned,state,get,length,else,if,partitioneable,state,null,chain,length,partitioneable,state,get,length,else,chain,length,1,task,state,new,task,state,job,vertex,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,chain,length,task,states,put,job,vertex,id,task,state,task,state,put,state,subtask,index,subtask,state,state,size,subtask,state,get,state,size,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,job,vertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetrics metrics);1493403095;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			List<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIDs()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (subtaskState != null) {_				stateSize = subtaskState.getStateSize()___				@SuppressWarnings("deprecation")_				ChainedStateHandle<StreamStateHandle> nonPartitionedState =_					subtaskState.getLegacyOperatorState()__				ChainedStateHandle<OperatorStateHandle> partitioneableState =_					subtaskState.getManagedOperatorState()__				ChainedStateHandle<OperatorStateHandle> rawOperatorState =_					subtaskState.getRawOperatorState()___				_				for (int x = 0_ x < operatorIDs.size()_ x++) {_					OperatorID operatorID = operatorIDs.get(x)__					OperatorState operatorState = operatorStates.get(operatorID)___					if (operatorState == null) {_						operatorState = new OperatorState(_							operatorID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism())__						operatorStates.put(operatorID, operatorState)__					}__					KeyedStateHandle managedKeyedState = null__					KeyedStateHandle rawKeyedState = null___					_					if (x == operatorIDs.size() - 1) {_						managedKeyedState = subtaskState.getManagedKeyedState()__						rawKeyedState = subtaskState.getRawKeyedState()__					}__					OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_							nonPartitionedState != null ? nonPartitionedState.get(x) : null,_							partitioneableState != null ? partitioneableState.get(x) : null,_							rawOperatorState != null ? rawOperatorState.get(x) : null,_							managedKeyedState,_							rawKeyedState)___					operatorState.putState(subtaskIndex, operatorSubtaskState)__				}_			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(vertex.getJobvertexId(), subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,list,operator,id,operator,ids,vertex,get,job,vertex,get,operator,ids,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,subtask,state,null,state,size,subtask,state,get,state,size,suppress,warnings,deprecation,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,chained,state,handle,operator,state,handle,raw,operator,state,subtask,state,get,raw,operator,state,for,int,x,0,x,operator,ids,size,x,operator,id,operator,id,operator,ids,get,x,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,keyed,state,handle,managed,keyed,state,null,keyed,state,handle,raw,keyed,state,null,if,x,operator,ids,size,1,managed,keyed,state,subtask,state,get,managed,keyed,state,raw,keyed,state,subtask,state,get,raw,keyed,state,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,non,partitioned,state,null,non,partitioned,state,get,x,null,partitioneable,state,null,partitioneable,state,get,x,null,raw,operator,state,null,raw,operator,state,get,x,null,managed,keyed,state,raw,keyed,state,operator,state,put,state,subtask,index,operator,subtask,state,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,vertex,get,jobvertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetrics metrics);1495287945;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			List<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIDs()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (subtaskState != null) {_				stateSize = subtaskState.getStateSize()___				@SuppressWarnings("deprecation")_				ChainedStateHandle<StreamStateHandle> nonPartitionedState =_					subtaskState.getLegacyOperatorState()__				ChainedStateHandle<OperatorStateHandle> partitioneableState =_					subtaskState.getManagedOperatorState()__				ChainedStateHandle<OperatorStateHandle> rawOperatorState =_					subtaskState.getRawOperatorState()___				_				for (int x = 0_ x < operatorIDs.size()_ x++) {_					OperatorID operatorID = operatorIDs.get(x)__					OperatorState operatorState = operatorStates.get(operatorID)___					if (operatorState == null) {_						operatorState = new OperatorState(_							operatorID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism())__						operatorStates.put(operatorID, operatorState)__					}__					KeyedStateHandle managedKeyedState = null__					KeyedStateHandle rawKeyedState = null___					_					if (x == operatorIDs.size() - 1) {_						managedKeyedState = subtaskState.getManagedKeyedState()__						rawKeyedState = subtaskState.getRawKeyedState()__					}__					OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_							nonPartitionedState != null ? nonPartitionedState.get(x) : null,_							partitioneableState != null ? partitioneableState.get(x) : null,_							rawOperatorState != null ? rawOperatorState.get(x) : null,_							managedKeyedState,_							rawKeyedState)___					operatorState.putState(subtaskIndex, operatorSubtaskState)__				}_			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(vertex.getJobvertexId(), subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,list,operator,id,operator,ids,vertex,get,job,vertex,get,operator,ids,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,subtask,state,null,state,size,subtask,state,get,state,size,suppress,warnings,deprecation,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,chained,state,handle,operator,state,handle,raw,operator,state,subtask,state,get,raw,operator,state,for,int,x,0,x,operator,ids,size,x,operator,id,operator,id,operator,ids,get,x,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,keyed,state,handle,managed,keyed,state,null,keyed,state,handle,raw,keyed,state,null,if,x,operator,ids,size,1,managed,keyed,state,subtask,state,get,managed,keyed,state,raw,keyed,state,subtask,state,get,raw,keyed,state,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,non,partitioned,state,null,non,partitioned,state,get,x,null,partitioneable,state,null,partitioneable,state,get,x,null,raw,operator,state,null,raw,operator,state,get,x,null,managed,keyed,state,raw,keyed,state,operator,state,put,state,subtask,index,operator,subtask,state,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,vertex,get,jobvertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public TaskAcknowledgeResult acknowledgeTask( 			ExecutionAttemptID executionAttemptId, 			SubtaskState subtaskState, 			CheckpointMetrics metrics);1501588490;Acknowledges the task with the given execution attempt id and the given subtask state.__@param executionAttemptId of the acknowledged task_@param subtaskState of the acknowledged task_@param metrics Checkpoint metrics for the stats_@return TaskAcknowledgeResult of the operation;public TaskAcknowledgeResult acknowledgeTask(_			ExecutionAttemptID executionAttemptId,_			SubtaskState subtaskState,_			CheckpointMetrics metrics) {__		synchronized (lock) {_			if (discarded) {_				return TaskAcknowledgeResult.DISCARDED__			}__			final ExecutionVertex vertex = notYetAcknowledgedTasks.remove(executionAttemptId)___			if (vertex == null) {_				if (acknowledgedTasks.contains(executionAttemptId)) {_					return TaskAcknowledgeResult.DUPLICATE__				} else {_					return TaskAcknowledgeResult.UNKNOWN__				}_			} else {_				acknowledgedTasks.add(executionAttemptId)__			}__			List<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIDs()__			int subtaskIndex = vertex.getParallelSubtaskIndex()__			long ackTimestamp = System.currentTimeMillis()___			long stateSize = 0__			if (subtaskState != null) {_				stateSize = subtaskState.getStateSize()___				@SuppressWarnings("deprecation")_				ChainedStateHandle<StreamStateHandle> nonPartitionedState =_					subtaskState.getLegacyOperatorState()__				ChainedStateHandle<OperatorStateHandle> partitioneableState =_					subtaskState.getManagedOperatorState()__				ChainedStateHandle<OperatorStateHandle> rawOperatorState =_					subtaskState.getRawOperatorState()___				_				for (int x = 0_ x < operatorIDs.size()_ x++) {_					OperatorID operatorID = operatorIDs.get(x)__					OperatorState operatorState = operatorStates.get(operatorID)___					if (operatorState == null) {_						operatorState = new OperatorState(_							operatorID,_							vertex.getTotalNumberOfParallelSubtasks(),_							vertex.getMaxParallelism())__						operatorStates.put(operatorID, operatorState)__					}__					KeyedStateHandle managedKeyedState = null__					KeyedStateHandle rawKeyedState = null___					_					if (x == operatorIDs.size() - 1) {_						managedKeyedState = subtaskState.getManagedKeyedState()__						rawKeyedState = subtaskState.getRawKeyedState()__					}__					OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_							nonPartitionedState != null ? nonPartitionedState.get(x) : null,_							partitioneableState != null ? partitioneableState.get(x) : null,_							rawOperatorState != null ? rawOperatorState.get(x) : null,_							managedKeyedState,_							rawKeyedState)___					operatorState.putState(subtaskIndex, operatorSubtaskState)__				}_			}__			++numAcknowledgedTasks___			_			_			final PendingCheckpointStats statsCallback = this.statsCallback__			if (statsCallback != null) {_				_				long alignmentDurationMillis = metrics.getAlignmentDurationNanos() / 1_000_000___				SubtaskStateStats subtaskStateStats = new SubtaskStateStats(_					subtaskIndex,_					ackTimestamp,_					stateSize,_					metrics.getSyncDurationMillis(),_					metrics.getAsyncDurationMillis(),_					metrics.getBytesBufferedInAlignment(),_					alignmentDurationMillis)___				statsCallback.reportSubtaskStats(vertex.getJobvertexId(), subtaskStateStats)__			}__			return TaskAcknowledgeResult.SUCCESS__		}_	};acknowledges,the,task,with,the,given,execution,attempt,id,and,the,given,subtask,state,param,execution,attempt,id,of,the,acknowledged,task,param,subtask,state,of,the,acknowledged,task,param,metrics,checkpoint,metrics,for,the,stats,return,task,acknowledge,result,of,the,operation;public,task,acknowledge,result,acknowledge,task,execution,attempt,id,execution,attempt,id,subtask,state,subtask,state,checkpoint,metrics,metrics,synchronized,lock,if,discarded,return,task,acknowledge,result,discarded,final,execution,vertex,vertex,not,yet,acknowledged,tasks,remove,execution,attempt,id,if,vertex,null,if,acknowledged,tasks,contains,execution,attempt,id,return,task,acknowledge,result,duplicate,else,return,task,acknowledge,result,unknown,else,acknowledged,tasks,add,execution,attempt,id,list,operator,id,operator,ids,vertex,get,job,vertex,get,operator,ids,int,subtask,index,vertex,get,parallel,subtask,index,long,ack,timestamp,system,current,time,millis,long,state,size,0,if,subtask,state,null,state,size,subtask,state,get,state,size,suppress,warnings,deprecation,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,chained,state,handle,operator,state,handle,raw,operator,state,subtask,state,get,raw,operator,state,for,int,x,0,x,operator,ids,size,x,operator,id,operator,id,operator,ids,get,x,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,vertex,get,total,number,of,parallel,subtasks,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,keyed,state,handle,managed,keyed,state,null,keyed,state,handle,raw,keyed,state,null,if,x,operator,ids,size,1,managed,keyed,state,subtask,state,get,managed,keyed,state,raw,keyed,state,subtask,state,get,raw,keyed,state,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,non,partitioned,state,null,non,partitioned,state,get,x,null,partitioneable,state,null,partitioneable,state,get,x,null,raw,operator,state,null,raw,operator,state,get,x,null,managed,keyed,state,raw,keyed,state,operator,state,put,state,subtask,index,operator,subtask,state,num,acknowledged,tasks,final,pending,checkpoint,stats,stats,callback,this,stats,callback,if,stats,callback,null,long,alignment,duration,millis,metrics,get,alignment,duration,nanos,subtask,state,stats,subtask,state,stats,new,subtask,state,stats,subtask,index,ack,timestamp,state,size,metrics,get,sync,duration,millis,metrics,get,async,duration,millis,metrics,get,bytes,buffered,in,alignment,alignment,duration,millis,stats,callback,report,subtask,stats,vertex,get,jobvertex,id,subtask,state,stats,return,task,acknowledge,result,success
PendingCheckpoint -> public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle);1489671806;Sets the handle for the canceller to this pending checkoint.__@return true, if the handle was set, false, if the checkpoint is already disposed_;public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle) {_		synchronized (lock) {_			if (this.cancellerHandle == null) {_				if (!discarded) {_					this.cancellerHandle = cancellerHandle__					return true__				} else {_					return false__				}_			}_			else {_				throw new IllegalStateException("A canceller handle was already set")__			}_		}_	};sets,the,handle,for,the,canceller,to,this,pending,checkoint,return,true,if,the,handle,was,set,false,if,the,checkpoint,is,already,disposed;public,boolean,set,canceller,handle,scheduled,future,canceller,handle,synchronized,lock,if,this,canceller,handle,null,if,discarded,this,canceller,handle,canceller,handle,return,true,else,return,false,else,throw,new,illegal,state,exception,a,canceller,handle,was,already,set
PendingCheckpoint -> public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle);1492678790;Sets the handle for the canceller to this pending checkpoint. This method fails_with an exception if a handle has already been set.__@return true, if the handle was set, false, if the checkpoint is already disposed_;public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle) {_		synchronized (lock) {_			if (this.cancellerHandle == null) {_				if (!discarded) {_					this.cancellerHandle = cancellerHandle__					return true__				} else {_					return false__				}_			}_			else {_				throw new IllegalStateException("A canceller handle was already set")__			}_		}_	};sets,the,handle,for,the,canceller,to,this,pending,checkpoint,this,method,fails,with,an,exception,if,a,handle,has,already,been,set,return,true,if,the,handle,was,set,false,if,the,checkpoint,is,already,disposed;public,boolean,set,canceller,handle,scheduled,future,canceller,handle,synchronized,lock,if,this,canceller,handle,null,if,discarded,this,canceller,handle,canceller,handle,return,true,else,return,false,else,throw,new,illegal,state,exception,a,canceller,handle,was,already,set
PendingCheckpoint -> public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle);1492867556;Sets the handle for the canceller to this pending checkpoint. This method fails_with an exception if a handle has already been set.__@return true, if the handle was set, false, if the checkpoint is already disposed_;public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle) {_		synchronized (lock) {_			if (this.cancellerHandle == null) {_				if (!discarded) {_					this.cancellerHandle = cancellerHandle__					return true__				} else {_					return false__				}_			}_			else {_				throw new IllegalStateException("A canceller handle was already set")__			}_		}_	};sets,the,handle,for,the,canceller,to,this,pending,checkpoint,this,method,fails,with,an,exception,if,a,handle,has,already,been,set,return,true,if,the,handle,was,set,false,if,the,checkpoint,is,already,disposed;public,boolean,set,canceller,handle,scheduled,future,canceller,handle,synchronized,lock,if,this,canceller,handle,null,if,discarded,this,canceller,handle,canceller,handle,return,true,else,return,false,else,throw,new,illegal,state,exception,a,canceller,handle,was,already,set
PendingCheckpoint -> public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle);1492867556;Sets the handle for the canceller to this pending checkpoint. This method fails_with an exception if a handle has already been set.__@return true, if the handle was set, false, if the checkpoint is already disposed_;public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle) {_		synchronized (lock) {_			if (this.cancellerHandle == null) {_				if (!discarded) {_					this.cancellerHandle = cancellerHandle__					return true__				} else {_					return false__				}_			}_			else {_				throw new IllegalStateException("A canceller handle was already set")__			}_		}_	};sets,the,handle,for,the,canceller,to,this,pending,checkpoint,this,method,fails,with,an,exception,if,a,handle,has,already,been,set,return,true,if,the,handle,was,set,false,if,the,checkpoint,is,already,disposed;public,boolean,set,canceller,handle,scheduled,future,canceller,handle,synchronized,lock,if,this,canceller,handle,null,if,discarded,this,canceller,handle,canceller,handle,return,true,else,return,false,else,throw,new,illegal,state,exception,a,canceller,handle,was,already,set
PendingCheckpoint -> public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle);1493236605;Sets the handle for the canceller to this pending checkpoint. This method fails_with an exception if a handle has already been set.__@return true, if the handle was set, false, if the checkpoint is already disposed_;public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle) {_		synchronized (lock) {_			if (this.cancellerHandle == null) {_				if (!discarded) {_					this.cancellerHandle = cancellerHandle__					return true__				} else {_					return false__				}_			}_			else {_				throw new IllegalStateException("A canceller handle was already set")__			}_		}_	};sets,the,handle,for,the,canceller,to,this,pending,checkpoint,this,method,fails,with,an,exception,if,a,handle,has,already,been,set,return,true,if,the,handle,was,set,false,if,the,checkpoint,is,already,disposed;public,boolean,set,canceller,handle,scheduled,future,canceller,handle,synchronized,lock,if,this,canceller,handle,null,if,discarded,this,canceller,handle,canceller,handle,return,true,else,return,false,else,throw,new,illegal,state,exception,a,canceller,handle,was,already,set
PendingCheckpoint -> public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle);1493325408;Sets the handle for the canceller to this pending checkpoint. This method fails_with an exception if a handle has already been set.__@return true, if the handle was set, false, if the checkpoint is already disposed_;public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle) {_		synchronized (lock) {_			if (this.cancellerHandle == null) {_				if (!discarded) {_					this.cancellerHandle = cancellerHandle__					return true__				} else {_					return false__				}_			}_			else {_				throw new IllegalStateException("A canceller handle was already set")__			}_		}_	};sets,the,handle,for,the,canceller,to,this,pending,checkpoint,this,method,fails,with,an,exception,if,a,handle,has,already,been,set,return,true,if,the,handle,was,set,false,if,the,checkpoint,is,already,disposed;public,boolean,set,canceller,handle,scheduled,future,canceller,handle,synchronized,lock,if,this,canceller,handle,null,if,discarded,this,canceller,handle,canceller,handle,return,true,else,return,false,else,throw,new,illegal,state,exception,a,canceller,handle,was,already,set
PendingCheckpoint -> public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle);1493403095;Sets the handle for the canceller to this pending checkpoint. This method fails_with an exception if a handle has already been set.__@return true, if the handle was set, false, if the checkpoint is already disposed_;public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle) {_		synchronized (lock) {_			if (this.cancellerHandle == null) {_				if (!discarded) {_					this.cancellerHandle = cancellerHandle__					return true__				} else {_					return false__				}_			}_			else {_				throw new IllegalStateException("A canceller handle was already set")__			}_		}_	};sets,the,handle,for,the,canceller,to,this,pending,checkpoint,this,method,fails,with,an,exception,if,a,handle,has,already,been,set,return,true,if,the,handle,was,set,false,if,the,checkpoint,is,already,disposed;public,boolean,set,canceller,handle,scheduled,future,canceller,handle,synchronized,lock,if,this,canceller,handle,null,if,discarded,this,canceller,handle,canceller,handle,return,true,else,return,false,else,throw,new,illegal,state,exception,a,canceller,handle,was,already,set
PendingCheckpoint -> public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle);1495287945;Sets the handle for the canceller to this pending checkpoint. This method fails_with an exception if a handle has already been set.__@return true, if the handle was set, false, if the checkpoint is already disposed_;public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle) {_		synchronized (lock) {_			if (this.cancellerHandle == null) {_				if (!discarded) {_					this.cancellerHandle = cancellerHandle__					return true__				} else {_					return false__				}_			}_			else {_				throw new IllegalStateException("A canceller handle was already set")__			}_		}_	};sets,the,handle,for,the,canceller,to,this,pending,checkpoint,this,method,fails,with,an,exception,if,a,handle,has,already,been,set,return,true,if,the,handle,was,set,false,if,the,checkpoint,is,already,disposed;public,boolean,set,canceller,handle,scheduled,future,canceller,handle,synchronized,lock,if,this,canceller,handle,null,if,discarded,this,canceller,handle,canceller,handle,return,true,else,return,false,else,throw,new,illegal,state,exception,a,canceller,handle,was,already,set
PendingCheckpoint -> public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle);1501588490;Sets the handle for the canceller to this pending checkpoint. This method fails_with an exception if a handle has already been set.__@return true, if the handle was set, false, if the checkpoint is already disposed_;public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle) {_		synchronized (lock) {_			if (this.cancellerHandle == null) {_				if (!discarded) {_					this.cancellerHandle = cancellerHandle__					return true__				} else {_					return false__				}_			}_			else {_				throw new IllegalStateException("A canceller handle was already set")__			}_		}_	};sets,the,handle,for,the,canceller,to,this,pending,checkpoint,this,method,fails,with,an,exception,if,a,handle,has,already,been,set,return,true,if,the,handle,was,set,false,if,the,checkpoint,is,already,disposed;public,boolean,set,canceller,handle,scheduled,future,canceller,handle,synchronized,lock,if,this,canceller,handle,null,if,discarded,this,canceller,handle,canceller,handle,return,true,else,return,false,else,throw,new,illegal,state,exception,a,canceller,handle,was,already,set
PendingCheckpoint -> public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle);1502801814;Sets the handle for the canceller to this pending checkpoint. This method fails_with an exception if a handle has already been set.__@return true, if the handle was set, false, if the checkpoint is already disposed_;public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle) {_		synchronized (lock) {_			if (this.cancellerHandle == null) {_				if (!discarded) {_					this.cancellerHandle = cancellerHandle__					return true__				} else {_					return false__				}_			}_			else {_				throw new IllegalStateException("A canceller handle was already set")__			}_		}_	};sets,the,handle,for,the,canceller,to,this,pending,checkpoint,this,method,fails,with,an,exception,if,a,handle,has,already,been,set,return,true,if,the,handle,was,set,false,if,the,checkpoint,is,already,disposed;public,boolean,set,canceller,handle,scheduled,future,canceller,handle,synchronized,lock,if,this,canceller,handle,null,if,discarded,this,canceller,handle,canceller,handle,return,true,else,return,false,else,throw,new,illegal,state,exception,a,canceller,handle,was,already,set
PendingCheckpoint -> public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle);1509125300;Sets the handle for the canceller to this pending checkpoint. This method fails_with an exception if a handle has already been set.__@return true, if the handle was set, false, if the checkpoint is already disposed_;public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle) {_		synchronized (lock) {_			if (this.cancellerHandle == null) {_				if (!discarded) {_					this.cancellerHandle = cancellerHandle__					return true__				} else {_					return false__				}_			}_			else {_				throw new IllegalStateException("A canceller handle was already set")__			}_		}_	};sets,the,handle,for,the,canceller,to,this,pending,checkpoint,this,method,fails,with,an,exception,if,a,handle,has,already,been,set,return,true,if,the,handle,was,set,false,if,the,checkpoint,is,already,disposed;public,boolean,set,canceller,handle,scheduled,future,canceller,handle,synchronized,lock,if,this,canceller,handle,null,if,discarded,this,canceller,handle,canceller,handle,return,true,else,return,false,else,throw,new,illegal,state,exception,a,canceller,handle,was,already,set
PendingCheckpoint -> public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle);1516295283;Sets the handle for the canceller to this pending checkpoint. This method fails_with an exception if a handle has already been set.__@return true, if the handle was set, false, if the checkpoint is already disposed_;public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle) {_		synchronized (lock) {_			if (this.cancellerHandle == null) {_				if (!discarded) {_					this.cancellerHandle = cancellerHandle__					return true__				} else {_					return false__				}_			}_			else {_				throw new IllegalStateException("A canceller handle was already set")__			}_		}_	};sets,the,handle,for,the,canceller,to,this,pending,checkpoint,this,method,fails,with,an,exception,if,a,handle,has,already,been,set,return,true,if,the,handle,was,set,false,if,the,checkpoint,is,already,disposed;public,boolean,set,canceller,handle,scheduled,future,canceller,handle,synchronized,lock,if,this,canceller,handle,null,if,discarded,this,canceller,handle,canceller,handle,return,true,else,return,false,else,throw,new,illegal,state,exception,a,canceller,handle,was,already,set
PendingCheckpoint -> public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle);1517489696;Sets the handle for the canceller to this pending checkpoint. This method fails_with an exception if a handle has already been set.__@return true, if the handle was set, false, if the checkpoint is already disposed_;public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle) {_		synchronized (lock) {_			if (this.cancellerHandle == null) {_				if (!discarded) {_					this.cancellerHandle = cancellerHandle__					return true__				} else {_					return false__				}_			}_			else {_				throw new IllegalStateException("A canceller handle was already set")__			}_		}_	};sets,the,handle,for,the,canceller,to,this,pending,checkpoint,this,method,fails,with,an,exception,if,a,handle,has,already,been,set,return,true,if,the,handle,was,set,false,if,the,checkpoint,is,already,disposed;public,boolean,set,canceller,handle,scheduled,future,canceller,handle,synchronized,lock,if,this,canceller,handle,null,if,discarded,this,canceller,handle,canceller,handle,return,true,else,return,false,else,throw,new,illegal,state,exception,a,canceller,handle,was,already,set
PendingCheckpoint -> public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle);1542043996;Sets the handle for the canceller to this pending checkpoint. This method fails_with an exception if a handle has already been set.__@return true, if the handle was set, false, if the checkpoint is already disposed_;public boolean setCancellerHandle(ScheduledFuture<?> cancellerHandle) {_		synchronized (lock) {_			if (this.cancellerHandle == null) {_				if (!discarded) {_					this.cancellerHandle = cancellerHandle__					return true__				} else {_					return false__				}_			}_			else {_				throw new IllegalStateException("A canceller handle was already set")__			}_		}_	};sets,the,handle,for,the,canceller,to,this,pending,checkpoint,this,method,fails,with,an,exception,if,a,handle,has,already,been,set,return,true,if,the,handle,was,set,false,if,the,checkpoint,is,already,disposed;public,boolean,set,canceller,handle,scheduled,future,canceller,handle,synchronized,lock,if,this,canceller,handle,null,if,discarded,this,canceller,handle,canceller,handle,return,true,else,return,false,else,throw,new,illegal,state,exception,a,canceller,handle,was,already,set
PendingCheckpoint -> public boolean canBeSubsumed();1471453562;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		return true__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,true
PendingCheckpoint -> public boolean canBeSubsumed();1472663401;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		return true__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,true
PendingCheckpoint -> public boolean canBeSubsumed();1475231926;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		return true__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,true
PendingCheckpoint -> public boolean canBeSubsumed();1476432306;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1476432429;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1476972861;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1478686625;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1479339295;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1479852017;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1481295943;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1484038132;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1485531920;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1487762095;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1487871589;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1488304750;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1488304933;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1489060855;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1489671806;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1492678790;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1492867556;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1492867556;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1493236605;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1493325408;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1493403095;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1495287945;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1501588490;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1502801814;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1509125300;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1516295283;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1517489696;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public boolean canBeSubsumed();1542043996;Checks whether this checkpoint can be subsumed or whether it should always continue, regardless_of newer checkpoints in progress.__@return True if the checkpoint can be subsumed, false otherwise.;public boolean canBeSubsumed() {_		_		return !props.forceCheckpoint()__	};checks,whether,this,checkpoint,can,be,subsumed,or,whether,it,should,always,continue,regardless,of,newer,checkpoints,in,progress,return,true,if,the,checkpoint,can,be,subsumed,false,otherwise;public,boolean,can,be,subsumed,return,props,force,checkpoint
PendingCheckpoint -> public void discard(ClassLoader userClassLoader, boolean discardStateHandle);1432052753;Discards the pending checkpoint, releasing all held resources._@throws Exception;public void discard(ClassLoader userClassLoader, boolean discardStateHandle) {_		synchronized (lock) {_			discarded = true__			numAcknowledgedTasks = -1__			if (discardStateHandle) {_				for (StateForTask state : collectedStates) {_					state.discard(userClassLoader)__				}_			}_			collectedStates.clear()__			notYetAcknowledgedTasks.clear()__		}_	};discards,the,pending,checkpoint,releasing,all,held,resources,throws,exception;public,void,discard,class,loader,user,class,loader,boolean,discard,state,handle,synchronized,lock,discarded,true,num,acknowledged,tasks,1,if,discard,state,handle,for,state,for,task,state,collected,states,state,discard,user,class,loader,collected,states,clear,not,yet,acknowledged,tasks,clear
PendingCheckpoint -> public void discard(ClassLoader userClassLoader, boolean discardStateHandle);1440782435;Discards the pending checkpoint, releasing all held resources._@throws Exception;public void discard(ClassLoader userClassLoader, boolean discardStateHandle) {_		synchronized (lock) {_			discarded = true__			numAcknowledgedTasks = -1__			if (discardStateHandle) {_				for (StateForTask state : collectedStates) {_					state.discard(userClassLoader)__				}_			}_			collectedStates.clear()__			notYetAcknowledgedTasks.clear()__		}_	};discards,the,pending,checkpoint,releasing,all,held,resources,throws,exception;public,void,discard,class,loader,user,class,loader,boolean,discard,state,handle,synchronized,lock,discarded,true,num,acknowledged,tasks,1,if,discard,state,handle,for,state,for,task,state,collected,states,state,discard,user,class,loader,collected,states,clear,not,yet,acknowledged,tasks,clear
PendingCheckpoint -> public void discard(ClassLoader userClassLoader, boolean discardStateHandle);1445293011;Discards the pending checkpoint, releasing all held resources._@throws Exception;public void discard(ClassLoader userClassLoader, boolean discardStateHandle) {_		synchronized (lock) {_			discarded = true__			numAcknowledgedTasks = -1__			if (discardStateHandle) {_				for (StateForTask state : collectedStates) {_					state.discard(userClassLoader)__				}_			}_			collectedStates.clear()__			notYetAcknowledgedTasks.clear()__		}_	};discards,the,pending,checkpoint,releasing,all,held,resources,throws,exception;public,void,discard,class,loader,user,class,loader,boolean,discard,state,handle,synchronized,lock,discarded,true,num,acknowledged,tasks,1,if,discard,state,handle,for,state,for,task,state,collected,states,state,discard,user,class,loader,collected,states,clear,not,yet,acknowledged,tasks,clear
PendingCheckpoint -> public void discard(ClassLoader userClassLoader, boolean discardStateHandle);1446112342;Discards the pending checkpoint, releasing all held resources.;public void discard(ClassLoader userClassLoader, boolean discardStateHandle) {_		synchronized (lock) {_			discarded = true__			numAcknowledgedTasks = -1__			if (discardStateHandle) {_				for (StateForTask state : collectedStates) {_					state.discard(userClassLoader)__				}_			}_			collectedStates.clear()__			notYetAcknowledgedTasks.clear()__		}_	};discards,the,pending,checkpoint,releasing,all,held,resources;public,void,discard,class,loader,user,class,loader,boolean,discard,state,handle,synchronized,lock,discarded,true,num,acknowledged,tasks,1,if,discard,state,handle,for,state,for,task,state,collected,states,state,discard,user,class,loader,collected,states,clear,not,yet,acknowledged,tasks,clear
PendingCheckpoint -> public void discard(ClassLoader userClassLoader);1448554589;Discards the pending checkpoint, releasing all held resources.;public void discard(ClassLoader userClassLoader) {_		dispose(userClassLoader, true)__	};discards,the,pending,checkpoint,releasing,all,held,resources;public,void,discard,class,loader,user,class,loader,dispose,user,class,loader,true
PendingCheckpoint -> public void discard(ClassLoader userClassLoader);1451519127;Discards the pending checkpoint, releasing all held resources.;public void discard(ClassLoader userClassLoader) {_		dispose(userClassLoader, true)__	};discards,the,pending,checkpoint,releasing,all,held,resources;public,void,discard,class,loader,user,class,loader,dispose,user,class,loader,true
PendingCheckpoint -> public void discard(ClassLoader userClassLoader);1461666173;Discards the pending checkpoint, releasing all held resources.;public void discard(ClassLoader userClassLoader) {_		dispose(userClassLoader, true)__	};discards,the,pending,checkpoint,releasing,all,held,resources;public,void,discard,class,loader,user,class,loader,dispose,user,class,loader,true
