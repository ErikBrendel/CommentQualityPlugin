commented;modifiers;parameterAmount;loc;comment;code
true;public;0;12;/**  * Returns the current leader information if available. Otherwise it returns an  * empty optional.  *  * @return The current leader information if available. Otherwise it returns an  * empty optional.  * @throws Exception if the leader future has been completed with an exception  */ ;/**  * Returns the current leader information if available. Otherwise it returns an  * empty optional.  *  * @return The current leader information if available. Otherwise it returns an  * empty optional.  * @throws Exception if the leader future has been completed with an exception  */ public Optional<Tuple2<String, UUID>> getLeaderNow() throws Exception {     CompletableFuture<Tuple2<String, UUID>> leaderFuture = this.atomicLeaderFuture.get().     if (leaderFuture != null) {         if (leaderFuture.isDone()) {             return Optional.of(leaderFuture.get()).         } else {             return Optional.empty().         }     } else {         return Optional.empty().     } }
true;public;0;3;/**  * Returns the current JobManagerGateway future.  */ ;/**  * Returns the current JobManagerGateway future.  */ public CompletableFuture<Tuple2<String, UUID>> getLeaderFuture() {     return atomicLeaderFuture.get(). }
false;public;2;29;;@Override public void notifyLeaderAddress(final String leaderAddress, final UUID leaderSessionID) {     final CompletableFuture<Tuple2<String, UUID>> newLeaderFuture.     if (isEmptyAddress(leaderAddress)) {         newLeaderFuture = new CompletableFuture<>().     } else {         newLeaderFuture = CompletableFuture.completedFuture(Tuple2.of(leaderAddress, leaderSessionID)).     }     try {         final CompletableFuture<Tuple2<String, UUID>> oldLeaderFuture = atomicLeaderFuture.getAndSet(newLeaderFuture).         if (!oldLeaderFuture.isDone()) {             newLeaderFuture.whenComplete((stringUUIDTuple2, throwable) -> {                 if (throwable != null) {                     oldLeaderFuture.completeExceptionally(throwable).                 } else {                     oldLeaderFuture.complete(stringUUIDTuple2).                 }             }).         }         notifyNewLeaderAddress(newLeaderFuture).     } catch (Exception e) {         handleError(e).     } }
false;private;1;3;;private boolean isEmptyAddress(String leaderAddress) {     return leaderAddress == null || leaderAddress.equals(""). }
false;public;1;6;;@Override public void handleError(Exception exception) {     log.error("Received error from LeaderRetrievalService.", exception).     atomicLeaderFuture.get().completeExceptionally(exception). }
false;protected;1;1;;protected void notifyNewLeaderAddress(CompletableFuture<Tuple2<String, UUID>> newLeaderAddressFuture) { }
