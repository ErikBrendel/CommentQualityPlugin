commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public TypeSerializer<T> getBuildSideSerializer() {     return this.buildSideSerializer. }
false;public;0;3;;public TypeComparator<T> getBuildSideComparator() {     return this.buildSideComparator. }
true;public,abstract;0;1;/**  * Initialize the hash table  */ ;// ------------- Life-cycle functions ------------- /**  * Initialize the hash table  */ public abstract void open().
true;public,abstract;0;1;/**  * Closes the hash table. This effectively releases all internal structures and closes all  * open files and removes them. The call to this method is valid both as a cleanup after the  * complete inputs were properly processed, and as a cancellation call, which cleans up  * all resources that are currently held by the hash table. If another process still accesses the hash  * table after close has been called, no operations will be performed.  */ ;/**  * Closes the hash table. This effectively releases all internal structures and closes all  * open files and removes them. The call to this method is valid both as a cleanup after the  * complete inputs were properly processed, and as a cancellation call, which cleans up  * all resources that are currently held by the hash table. If another process still accesses the hash  * table after close has been called, no operations will be performed.  */ public abstract void close().
false;public,abstract;0;1;;public abstract void abort().
false;public,abstract;0;1;;public abstract List<MemorySegment> getFreeMemory().
false;public,abstract;1;1;;// ------------- Modifier ------------- public abstract void insert(T record) throws IOException.
false;public,abstract;1;1;;public abstract void insertOrReplaceRecord(T record) throws IOException.
false;public,abstract;0;1;;// ------------- Accessors ------------- public abstract MutableObjectIterator<T> getEntryIterator().
false;public,abstract;2;1;;public abstract <PT> AbstractHashTableProber<PT, T> getProber(TypeComparator<PT> probeSideComparator, TypePairComparator<PT, T> pairComparator).
