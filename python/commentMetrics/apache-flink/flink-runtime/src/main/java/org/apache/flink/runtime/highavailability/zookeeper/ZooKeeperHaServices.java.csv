commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;// ------------------------------------------------------------------------ // Services // ------------------------------------------------------------------------ @Override public LeaderRetrievalService getResourceManagerLeaderRetriever() {     return ZooKeeperUtils.createLeaderRetrievalService(client, configuration, RESOURCE_MANAGER_LEADER_PATH). }
false;public;0;4;;@Override public LeaderRetrievalService getDispatcherLeaderRetriever() {     return ZooKeeperUtils.createLeaderRetrievalService(client, configuration, DISPATCHER_LEADER_PATH). }
false;public;1;4;;@Override public LeaderRetrievalService getJobManagerLeaderRetriever(JobID jobID) {     return ZooKeeperUtils.createLeaderRetrievalService(client, configuration, getPathForJobManager(jobID)). }
false;public;2;4;;@Override public LeaderRetrievalService getJobManagerLeaderRetriever(JobID jobID, String defaultJobManagerAddress) {     return getJobManagerLeaderRetriever(jobID). }
false;public;0;4;;@Override public LeaderRetrievalService getWebMonitorLeaderRetriever() {     return ZooKeeperUtils.createLeaderRetrievalService(client, configuration, REST_SERVER_LEADER_PATH). }
false;public;0;4;;@Override public LeaderElectionService getResourceManagerLeaderElectionService() {     return ZooKeeperUtils.createLeaderElectionService(client, configuration, RESOURCE_MANAGER_LEADER_PATH). }
false;public;0;4;;@Override public LeaderElectionService getDispatcherLeaderElectionService() {     return ZooKeeperUtils.createLeaderElectionService(client, configuration, DISPATCHER_LEADER_PATH). }
false;public;1;4;;@Override public LeaderElectionService getJobManagerLeaderElectionService(JobID jobID) {     return ZooKeeperUtils.createLeaderElectionService(client, configuration, getPathForJobManager(jobID)). }
false;public;0;4;;@Override public LeaderElectionService getWebMonitorLeaderElectionService() {     return ZooKeeperUtils.createLeaderElectionService(client, configuration, REST_SERVER_LEADER_PATH). }
false;public;0;4;;@Override public CheckpointRecoveryFactory getCheckpointRecoveryFactory() {     return new ZooKeeperCheckpointRecoveryFactory(client, configuration, executor). }
false;public;0;4;;@Override public SubmittedJobGraphStore getSubmittedJobGraphStore() throws Exception {     return ZooKeeperUtils.createSubmittedJobGraphs(client, configuration). }
false;public;0;4;;@Override public RunningJobsRegistry getRunningJobsRegistry() {     return runningJobsRegistry. }
false;public;0;4;;@Override public BlobStore createBlobStore() throws IOException {     return blobStoreService. }
false;public;0;16;;// ------------------------------------------------------------------------ // Shutdown // ------------------------------------------------------------------------ @Override public void close() throws Exception {     Throwable exception = null.     try {         blobStoreService.close().     } catch (Throwable t) {         exception = t.     }     internalClose().     if (exception != null) {         ExceptionUtils.rethrowException(exception, "Could not properly close the ZooKeeperHaServices.").     } }
false;public;0;18;;@Override public void closeAndCleanupAllData() throws Exception {     LOG.info("Close and clean up all data for ZooKeeperHaServices.").     Throwable exception = null.     try {         blobStoreService.closeAndCleanupAllData().     } catch (Throwable t) {         exception = t.     }     internalClose().     if (exception != null) {         ExceptionUtils.rethrowException(exception, "Could not properly close and clean up all data of ZooKeeperHaServices.").     } }
true;private;0;3;/**  * Closes components which don't distinguish between close and closeAndCleanupAllData  */ ;/**  * Closes components which don't distinguish between close and closeAndCleanupAllData  */ private void internalClose() {     client.close(). }
false;private,static;1;3;;// ------------------------------------------------------------------------ // Utilities // ------------------------------------------------------------------------ private static String getPathForJobManager(final JobID jobID) {     return "/" + jobID + JOB_MANAGER_LEADER_PATH. }
