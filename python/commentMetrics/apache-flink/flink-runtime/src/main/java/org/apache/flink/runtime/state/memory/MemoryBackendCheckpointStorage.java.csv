commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the size (in bytes) that a individual chunk of state may have at most.  */ ;// ------------------------------------------------------------------------ // Properties // ------------------------------------------------------------------------ /**  * Gets the size (in bytes) that a individual chunk of state may have at most.  */ public int getMaxStateSize() {     return maxStateSize. }
false;public;0;4;;// ------------------------------------------------------------------------ // Checkpoint Storage // ------------------------------------------------------------------------ @Override public boolean supportsHighlyAvailableStorage() {     return checkpointsDirectory != null. }
false;public;1;21;;@Override public CheckpointStorageLocation initializeLocationForCheckpoint(long checkpointId) throws IOException {     checkArgument(checkpointId >= 0).     if (checkpointsDirectory != null) {         // configured for durable metadata         // prepare all the paths needed for the checkpoints         checkState(fileSystem != null).         final Path checkpointDir = createCheckpointDirectory(checkpointsDirectory, checkpointId).         // create the checkpoint exclusive directory         fileSystem.mkdirs(checkpointDir).         return new PersistentMetadataCheckpointStorageLocation(fileSystem, checkpointDir, maxStateSize).     } else {         // no durable metadata - typical in IDE or test setup case         return new NonPersistentMetadataCheckpointStorageLocation(maxStateSize).     } }
false;public;2;9;;@Override public CheckpointStreamFactory resolveCheckpointStorageLocation(long checkpointId, CheckpointStorageLocationReference reference) throws IOException {     // state inline with the state handles.     return new MemCheckpointStreamFactory(maxStateSize). }
false;public;0;4;;@Override public CheckpointStateOutputStream createTaskOwnedStateStream() throws IOException {     return new MemoryCheckpointOutputStream(maxStateSize). }
false;protected;2;4;;@Override protected CheckpointStorageLocation createSavepointLocation(FileSystem fs, Path location) throws IOException {     return new PersistentMetadataCheckpointStorageLocation(fs, location, maxStateSize). }
false;public;0;8;;// ------------------------------------------------------------------------ // Utilities // ------------------------------------------------------------------------ @Override public String toString() {     return "MemoryBackendCheckpointStorage {" + "checkpointsDirectory=" + checkpointsDirectory + ", fileSystem=" + fileSystem + ", maxStateSize=" + maxStateSize + '}'. }
