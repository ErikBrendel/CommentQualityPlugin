commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static IKryoRegistrar registrar() {     return new SingleRegistrar(PriorityQueue.class, new PriorityQueueSerializer()). }
false;public;1;8;;public Comparator<?> getComparator(PriorityQueue<?> q) {     try {         return (Comparator<?>) compField.get(q).     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;public;3;8;;public void write(Kryo k, Output o, PriorityQueue<?> q) {     k.writeClassAndObject(o, getComparator(q)).     o.writeInt(q.size(), true).     for (Object a : q) {         k.writeClassAndObject(o, a).         o.flush().     } }
false;public;3;18;;public PriorityQueue<?> read(Kryo k, Input i, Class<PriorityQueue<?>> c) {     Comparator<Object> comp = (Comparator<Object>) k.readClassAndObject(i).     int sz = i.readInt(true).     // can't create with size 0:     PriorityQueue<Object> result.     if (sz == 0) {         result = new PriorityQueue<Object>(1, comp).     } else {         result = new PriorityQueue<Object>(sz, comp).     }     int idx = 0.     while (idx < sz) {         result.add(k.readClassAndObject(i)).         idx += 1.     }     return result. }
