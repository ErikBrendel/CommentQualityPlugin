commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;// ---------------------------------------------------------------------------------------------- // Getters // ---------------------------------------------------------------------------------------------- ResourceID getOwnResourceID() {     return ownResourceID. }
false;;0;3;;Executor getExecutor() {     return executor. }
false;;0;3;;HeartbeatListener<I, O> getHeartbeatListener() {     return heartbeatListener. }
false;;0;3;;Collection<HeartbeatMonitor<O>> getHeartbeatTargets() {     return heartbeatTargets.values(). }
false;public;2;26;;// ---------------------------------------------------------------------------------------------- // HeartbeatManager methods // ---------------------------------------------------------------------------------------------- @Override public void monitorTarget(ResourceID resourceID, HeartbeatTarget<O> heartbeatTarget) {     if (!stopped) {         if (heartbeatTargets.containsKey(resourceID)) {             log.debug("The target with resource ID {} is already been monitored.", resourceID).         } else {             HeartbeatManagerImpl.HeartbeatMonitor<O> heartbeatMonitor = new HeartbeatManagerImpl.HeartbeatMonitor<>(resourceID, heartbeatTarget, scheduledExecutor, heartbeatListener, heartbeatTimeoutIntervalMs).             heartbeatTargets.put(resourceID, heartbeatMonitor).             // check if we have stopped in the meantime (concurrent stop operation)             if (stopped) {                 heartbeatMonitor.cancel().                 heartbeatTargets.remove(resourceID).             }         }     } }
false;public;1;10;;@Override public void unmonitorTarget(ResourceID resourceID) {     if (!stopped) {         HeartbeatManagerImpl.HeartbeatMonitor<O> heartbeatMonitor = heartbeatTargets.remove(resourceID).         if (heartbeatMonitor != null) {             heartbeatMonitor.cancel().         }     } }
false;public;0;10;;@Override public void stop() {     stopped = true.     for (HeartbeatManagerImpl.HeartbeatMonitor<O> heartbeatMonitor : heartbeatTargets.values()) {         heartbeatMonitor.cancel().     }     heartbeatTargets.clear(). }
false;public;1;10;;@Override public long getLastHeartbeatFrom(ResourceID resourceId) {     HeartbeatMonitor<O> heartbeatMonitor = heartbeatTargets.get(resourceId).     if (heartbeatMonitor != null) {         return heartbeatMonitor.getLastHeartbeat().     } else {         return -1L.     } }
false;public;2;11;;// ---------------------------------------------------------------------------------------------- // HeartbeatTarget methods // ---------------------------------------------------------------------------------------------- @Override public void receiveHeartbeat(ResourceID heartbeatOrigin, I heartbeatPayload) {     if (!stopped) {         log.debug("Received heartbeat from {}.", heartbeatOrigin).         reportHeartbeat(heartbeatOrigin).         if (heartbeatPayload != null) {             heartbeatListener.reportPayload(heartbeatOrigin, heartbeatPayload).         }     } }
false;public;2;30;;@Override public void requestHeartbeat(final ResourceID requestOrigin, I heartbeatPayload) {     if (!stopped) {         log.debug("Received heartbeat request from {}.", requestOrigin).         final HeartbeatTarget<O> heartbeatTarget = reportHeartbeat(requestOrigin).         if (heartbeatTarget != null) {             if (heartbeatPayload != null) {                 heartbeatListener.reportPayload(requestOrigin, heartbeatPayload).             }             CompletableFuture<O> futurePayload = heartbeatListener.retrievePayload(requestOrigin).             if (futurePayload != null) {                 CompletableFuture<Void> sendHeartbeatFuture = futurePayload.thenAcceptAsync(retrievedPayload -> heartbeatTarget.receiveHeartbeat(getOwnResourceID(), retrievedPayload), executor).                 sendHeartbeatFuture.exceptionally((Throwable failure) -> {                     log.warn("Could not send heartbeat to target with id {}.", requestOrigin, failure).                     return null.                 }).             } else {                 heartbeatTarget.receiveHeartbeat(ownResourceID, null).             }         }     } }
false;;1;10;;HeartbeatTarget<O> reportHeartbeat(ResourceID resourceID) {     if (heartbeatTargets.containsKey(resourceID)) {         HeartbeatManagerImpl.HeartbeatMonitor<O> heartbeatMonitor = heartbeatTargets.get(resourceID).         heartbeatMonitor.reportHeartbeat().         return heartbeatMonitor.getHeartbeatTarget().     } else {         return null.     } }
false;;0;3;;HeartbeatTarget<O> getHeartbeatTarget() {     return heartbeatTarget. }
false;;0;3;;ResourceID getHeartbeatTargetId() {     return resourceID. }
false;public;0;3;;public long getLastHeartbeat() {     return lastHeartbeat. }
false;;0;4;;void reportHeartbeat() {     lastHeartbeat = System.currentTimeMillis().     resetHeartbeatTimeout(heartbeatTimeoutIntervalMs). }
false;;1;12;;void resetHeartbeatTimeout(long heartbeatTimeout) {     if (state.get() == State.RUNNING) {         cancelTimeout().         futureTimeout = scheduledExecutor.schedule(this, heartbeatTimeout, TimeUnit.MILLISECONDS).         // Double check for concurrent accesses (e.g. a firing of the scheduled future)         if (state.get() != State.RUNNING) {             cancelTimeout().         }     } }
false;;0;6;;void cancel() {     // we can only cancel if we are in state running     if (state.compareAndSet(State.RUNNING, State.CANCELED)) {         cancelTimeout().     } }
false;private;0;5;;private void cancelTimeout() {     if (futureTimeout != null) {         futureTimeout.cancel(true).     } }
false;public;0;3;;public boolean isCanceled() {     return state.get() == State.CANCELED. }
false;public;0;7;;@Override public void run() {     // The heartbeat has timed out if we're in state running     if (state.compareAndSet(State.RUNNING, State.TIMEOUT)) {         heartbeatListener.notifyHeartbeatTimeout(resourceID).     } }
