commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Get the cpu cores needed.  *  * @return The cpu cores, 1.0 means a full cpu thread  */ ;// ------------------------------------------------------------------------ /**  * Get the cpu cores needed.  *  * @return The cpu cores, 1.0 means a full cpu thread  */ public double getCpuCores() {     return cpuCores. }
true;public;0;3;/**  * Get the heap memory needed in MB.  *  * @return The heap memory in MB  */ ;/**  * Get the heap memory needed in MB.  *  * @return The heap memory in MB  */ public int getHeapMemoryInMB() {     return heapMemoryInMB. }
true;public;0;3;/**  * Get the direct memory needed in MB.  *  * @return The direct memory in MB  */ ;/**  * Get the direct memory needed in MB.  *  * @return The direct memory in MB  */ public int getDirectMemoryInMB() {     return directMemoryInMB. }
true;public;0;3;/**  * Get the native memory needed in MB.  *  * @return The native memory in MB  */ ;/**  * Get the native memory needed in MB.  *  * @return The native memory in MB  */ public int getNativeMemoryInMB() {     return nativeMemoryInMB. }
true;public;0;3;/**  * Get the memory needed for task to communicate with its upstreams and downstreams in MB.  * @return The network memory in MB  */ ;/**  * Get the memory needed for task to communicate with its upstreams and downstreams in MB.  * @return The network memory in MB  */ public int getNetworkMemoryInMB() {     return networkMemoryInMB. }
true;public;0;3;/**  * Get the total memory needed in MB.  *  * @return The total memory in MB  */ ;/**  * Get the total memory needed in MB.  *  * @return The total memory in MB  */ public int getMemoryInMB() {     return heapMemoryInMB + directMemoryInMB + nativeMemoryInMB + networkMemoryInMB. }
true;public;0;3;/**  * Get the memory the operators needed in MB.  *  * @return The operator memory in MB  */ ;/**  * Get the memory the operators needed in MB.  *  * @return The operator memory in MB  */ public int getOperatorsMemoryInMB() {     return heapMemoryInMB + directMemoryInMB + nativeMemoryInMB. }
true;public;0;3;/**  * Get the extended resources.  *  * @return The extended resources  */ ;/**  * Get the extended resources.  *  * @return The extended resources  */ public Map<String, Resource> getExtendedResources() {     return Collections.unmodifiableMap(extendedResources). }
true;public;1;22;/**  * Check whether required resource profile can be matched.  *  * @param required the required resource profile  * @return true if the requirement is matched, otherwise false  */ ;/**  * Check whether required resource profile can be matched.  *  * @param required the required resource profile  * @return true if the requirement is matched, otherwise false  */ public boolean isMatching(ResourceProfile required) {     if (required == UNKNOWN) {         return true.     }     if (cpuCores >= required.getCpuCores() && heapMemoryInMB >= required.getHeapMemoryInMB() && directMemoryInMB >= required.getDirectMemoryInMB() && nativeMemoryInMB >= required.getNativeMemoryInMB() && networkMemoryInMB >= required.getNetworkMemoryInMB()) {         for (Map.Entry<String, Resource> resource : required.extendedResources.entrySet()) {             if (!extendedResources.containsKey(resource.getKey()) || !extendedResources.get(resource.getKey()).getResourceAggregateType().equals(resource.getValue().getResourceAggregateType()) || extendedResources.get(resource.getKey()).getValue() < resource.getValue().getValue()) {                 return false.             }         }         return true.     }     return false. }
false;public;1;31;;@Override public int compareTo(@Nonnull ResourceProfile other) {     int cmp = Integer.compare(this.getMemoryInMB(), other.getMemoryInMB()).     if (cmp == 0) {         cmp = Double.compare(this.cpuCores, other.cpuCores).     }     if (cmp == 0) {         Iterator<Map.Entry<String, Resource>> thisIterator = extendedResources.entrySet().iterator().         Iterator<Map.Entry<String, Resource>> otherIterator = other.extendedResources.entrySet().iterator().         while (thisIterator.hasNext() && otherIterator.hasNext()) {             Map.Entry<String, Resource> thisResource = thisIterator.next().             Map.Entry<String, Resource> otherResource = otherIterator.next().             if ((cmp = otherResource.getKey().compareTo(thisResource.getKey())) != 0) {                 return cmp.             }             if (!otherResource.getValue().getResourceAggregateType().equals(thisResource.getValue().getResourceAggregateType())) {                 return 1.             }             if ((cmp = Double.compare(thisResource.getValue().getValue(), otherResource.getValue().getValue())) != 0) {                 return cmp.             }         }         if (thisIterator.hasNext()) {             return 1.         }         if (otherIterator.hasNext()) {             return -1.         }     }     return cmp. }
false;public;0;11;;// ------------------------------------------------------------------------ @Override public int hashCode() {     final long cpuBits = Double.doubleToLongBits(cpuCores).     int result = (int) (cpuBits ^ (cpuBits >>> 32)).     result = 31 * result + heapMemoryInMB.     result = 31 * result + directMemoryInMB.     result = 31 * result + nativeMemoryInMB.     result = 31 * result + networkMemoryInMB.     result = 31 * result + extendedResources.hashCode().     return result. }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     } else if (obj != null && obj.getClass() == ResourceProfile.class) {         ResourceProfile that = (ResourceProfile) obj.         return this.cpuCores == that.cpuCores && this.heapMemoryInMB == that.heapMemoryInMB && this.directMemoryInMB == that.directMemoryInMB && this.networkMemoryInMB == that.networkMemoryInMB && Objects.equals(extendedResources, that.extendedResources).     }     return false. }
false;public;0;14;;@Override public String toString() {     final StringBuilder resources = new StringBuilder(extendedResources.size() * 10).     for (Map.Entry<String, Resource> resource : extendedResources.entrySet()) {         resources.append(", ").append(resource.getKey()).append('=').append(resource.getValue()).     }     return "ResourceProfile{" + "cpuCores=" + cpuCores + ", heapMemoryInMB=" + heapMemoryInMB + ", directMemoryInMB=" + directMemoryInMB + ", nativeMemoryInMB=" + nativeMemoryInMB + ", networkMemoryInMB=" + networkMemoryInMB + resources + '}'. }
false;static;2;11;;static ResourceProfile fromResourceSpec(ResourceSpec resourceSpec, int networkMemory) {     Map<String, Resource> copiedExtendedResources = new HashMap<>(resourceSpec.getExtendedResources()).     return new ResourceProfile(resourceSpec.getCpuCores(), resourceSpec.getHeapMemory(), resourceSpec.getDirectMemory(), resourceSpec.getNativeMemory(), networkMemory, copiedExtendedResources). }
