commented;modifiers;parameterAmount;loc;comment;code
true;;3;1;/**  * Callback if a job manager has gained leadership for the job identified by the job id and a  * connection could be established to this job manager.  *  * @param jobId identifying the job for which the job manager has gained leadership  * @param jobManagerGateway to the job leader  * @param registrationMessage containing further registration information  */ ;/**  * Callback if a job manager has gained leadership for the job identified by the job id and a  * connection could be established to this job manager.  *  * @param jobId identifying the job for which the job manager has gained leadership  * @param jobManagerGateway to the job leader  * @param registrationMessage containing further registration information  */ void jobManagerGainedLeadership(JobID jobId, JobMasterGateway jobManagerGateway, JMTMRegistrationSuccess registrationMessage).
true;;2;1;/**  * Callback if the job leader for the job with the given job id lost its leadership.  *  * @param jobId identifying the job whose leader has lost leadership  * @param jobMasterId old JobMasterId  */ ;/**  * Callback if the job leader for the job with the given job id lost its leadership.  *  * @param jobId identifying the job whose leader has lost leadership  * @param jobMasterId old JobMasterId  */ void jobManagerLostLeadership(JobID jobId, JobMasterId jobMasterId).
true;;1;1;/**  * Callback for errors which might occur in the {@link JobLeaderService}.  *  * @param throwable cause  */ ;/**  * Callback for errors which might occur in the {@link JobLeaderService}.  *  * @param throwable cause  */ void handleError(Throwable throwable).
