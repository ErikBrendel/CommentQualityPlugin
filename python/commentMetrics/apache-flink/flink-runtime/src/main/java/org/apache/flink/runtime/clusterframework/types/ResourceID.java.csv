commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Gets the Resource Id as string.  *  * @return Stringified version of the ResourceID  */ ;/**  * Gets the Resource Id as string.  *  * @return Stringified version of the ResourceID  */ public final String getResourceIdString() {     return resourceId. }
false;public,final;1;10;;@Override public final boolean equals(Object o) {     if (this == o) {         return true.     } else if (o == null || o.getClass() != getClass()) {         return false.     } else {         return resourceId.equals(((ResourceID) o).resourceId).     } }
false;public,final;0;4;;@Override public final int hashCode() {     return resourceId.hashCode(). }
false;public;0;4;;@Override public String toString() {     return resourceId. }
true;public;0;4;/**  * A ResourceID can always retrieve a ResourceID.  * @return This instance.  */ ;/**  * A ResourceID can always retrieve a ResourceID.  * @return This instance.  */ @Override public ResourceID getResourceID() {     return this. }
true;public,static;0;3;/**  * Generate a random resource id.  *  * @return A random resource id.  */ ;/**  * Generate a random resource id.  *  * @return A random resource id.  */ public static ResourceID generate() {     return new ResourceID(new AbstractID().toString()). }
