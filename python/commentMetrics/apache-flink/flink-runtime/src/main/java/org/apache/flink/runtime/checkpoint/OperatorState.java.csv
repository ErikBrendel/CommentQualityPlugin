commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public OperatorID getOperatorID() {     return operatorID. }
false;public;2;10;;public void putState(int subtaskIndex, OperatorSubtaskState subtaskState) {     Preconditions.checkNotNull(subtaskState).     if (subtaskIndex < 0 || subtaskIndex >= parallelism) {         throw new IndexOutOfBoundsException("The given sub task index " + subtaskIndex + " exceeds the maximum number of sub tasks " + operatorSubtaskStates.size()).     } else {         operatorSubtaskStates.put(subtaskIndex, subtaskState).     } }
false;public;1;8;;public OperatorSubtaskState getState(int subtaskIndex) {     if (subtaskIndex < 0 || subtaskIndex >= parallelism) {         throw new IndexOutOfBoundsException("The given sub task index " + subtaskIndex + " exceeds the maximum number of sub tasks " + operatorSubtaskStates.size()).     } else {         return operatorSubtaskStates.get(subtaskIndex).     } }
false;public;0;3;;public Collection<OperatorSubtaskState> getStates() {     return operatorSubtaskStates.values(). }
false;public;0;3;;public int getNumberCollectedStates() {     return operatorSubtaskStates.size(). }
false;public;0;3;;public int getParallelism() {     return parallelism. }
false;public;0;3;;public int getMaxParallelism() {     return maxParallelism. }
false;public;0;6;;@Override public void discardState() throws Exception {     for (OperatorSubtaskState operatorSubtaskState : operatorSubtaskStates.values()) {         operatorSubtaskState.discardState().     } }
false;public;1;6;;@Override public void registerSharedStates(SharedStateRegistry sharedStateRegistry) {     for (OperatorSubtaskState operatorSubtaskState : operatorSubtaskStates.values()) {         operatorSubtaskState.registerSharedStates(sharedStateRegistry).     } }
false;public;0;13;;@Override public long getStateSize() {     long result = 0L.     for (int i = 0. i < parallelism. i++) {         OperatorSubtaskState operatorSubtaskState = operatorSubtaskStates.get(i).         if (operatorSubtaskState != null) {             result += operatorSubtaskState.getStateSize().         }     }     return result. }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (obj instanceof OperatorState) {         OperatorState other = (OperatorState) obj.         return operatorID.equals(other.operatorID) && parallelism == other.parallelism && operatorSubtaskStates.equals(other.operatorSubtaskStates).     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return parallelism + 31 * Objects.hash(operatorID, operatorSubtaskStates). }
false;public;0;3;;public Map<Integer, OperatorSubtaskState> getSubtaskStates() {     return Collections.unmodifiableMap(operatorSubtaskStates). }
false;public;0;12;;@Override public String toString() {     // confuse users that don't care about how we store it internally.     return "OperatorState(" + "operatorID: " + operatorID + ", parallelism: " + parallelism + ", maxParallelism: " + maxParallelism + ", sub task states: " + operatorSubtaskStates.size() + ", total size (bytes): " + getStateSize() + ')'. }
