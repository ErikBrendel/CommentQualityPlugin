# id;timestamp;commentText;codeText;commentWords;codeWords
KeyGroupedIterator -> public boolean nextKey() throws IOException;1405024514;Moves the iterator to the next key. This method may skip any values that have not yet been returned by the_iterator created by the {@link #getValues()} method. Hence, if called multiple times it "removes" pairs.__@return true if the input iterator has an other group of key-value pairs that share the same key.;public boolean nextKey() throws IOException_	{_		_		if (this.current == null) {_			if (this.done) {_				this.valuesIterator = null__				return false__			}_			this.current = this.serializer.createInstance()__			if ((this.current = this.iterator.next(this.current)) != null) {_				this.comparator.setReference(this.current)__				this.lookAheadHasNext = false__				this.valuesIterator = new ValuesIterator()__				this.valuesIterator.currentIsUnconsumed = true__				return true__			} else {_				_				this.valuesIterator = null__				this.current = null__				this.done = true__				return false__			}_		}__		_		if (this.lookAheadHasNext) {_			this.lookAheadHasNext = false__			this.current = this.lookahead__			this.lookahead = null__			this.comparator.setReference(this.current)__			this.valuesIterator.currentIsUnconsumed = true__			return true__		}__		_		_		while (true) {_			if (!this.done && ((this.current = this.iterator.next(this.current)) != null)) {_				if (!this.comparator.equalToReference(this.current)) {_					_					this.comparator.setReference(this.current)__					this.lookAheadHasNext = false__					this.valuesIterator.currentIsUnconsumed = true__					return true__				}_			}_			else {_				this.valuesIterator = null__				this.current = null__				this.done = true__				return false__			}_		}_	};moves,the,iterator,to,the,next,key,this,method,may,skip,any,values,that,have,not,yet,been,returned,by,the,iterator,created,by,the,link,get,values,method,hence,if,called,multiple,times,it,removes,pairs,return,true,if,the,input,iterator,has,an,other,group,of,key,value,pairs,that,share,the,same,key;public,boolean,next,key,throws,ioexception,if,this,current,null,if,this,done,this,values,iterator,null,return,false,this,current,this,serializer,create,instance,if,this,current,this,iterator,next,this,current,null,this,comparator,set,reference,this,current,this,look,ahead,has,next,false,this,values,iterator,new,values,iterator,this,values,iterator,current,is,unconsumed,true,return,true,else,this,values,iterator,null,this,current,null,this,done,true,return,false,if,this,look,ahead,has,next,this,look,ahead,has,next,false,this,current,this,lookahead,this,lookahead,null,this,comparator,set,reference,this,current,this,values,iterator,current,is,unconsumed,true,return,true,while,true,if,this,done,this,current,this,iterator,next,this,current,null,if,this,comparator,equal,to,reference,this,current,this,comparator,set,reference,this,current,this,look,ahead,has,next,false,this,values,iterator,current,is,unconsumed,true,return,true,else,this,values,iterator,null,this,current,null,this,done,true,return,false
KeyGroupedIterator -> public boolean nextKey() throws IOException;1405090423;Moves the iterator to the next key. This method may skip any values that have not yet been returned by the_iterator created by the {@link #getValues()} method. Hence, if called multiple times it "removes" pairs.__@return true if the input iterator has an other group of key-value pairs that share the same key.;public boolean nextKey() throws IOException_	{_		_		if (this.current == null) {_			if (this.done) {_				this.valuesIterator = null__				return false__			}_			this.current = this.serializer.createInstance()__			if ((this.current = this.iterator.next(this.current)) != null) {_				this.comparator.setReference(this.current)__				this.lookAheadHasNext = false__				this.valuesIterator = new ValuesIterator()__				this.valuesIterator.currentIsUnconsumed = true__				return true__			} else {_				_				this.valuesIterator = null__				this.current = null__				this.done = true__				return false__			}_		}__		_		if (this.lookAheadHasNext) {_			this.lookAheadHasNext = false__			this.current = this.lookahead__			this.lookahead = null__			this.comparator.setReference(this.current)__			this.valuesIterator.currentIsUnconsumed = true__			return true__		}__		_		_		while (true) {_			if (!this.done && ((this.current = this.iterator.next(this.current)) != null)) {_				if (!this.comparator.equalToReference(this.current)) {_					_					this.comparator.setReference(this.current)__					this.lookAheadHasNext = false__					this.valuesIterator.currentIsUnconsumed = true__					return true__				}_			}_			else {_				this.valuesIterator = null__				this.current = null__				this.done = true__				return false__			}_		}_	};moves,the,iterator,to,the,next,key,this,method,may,skip,any,values,that,have,not,yet,been,returned,by,the,iterator,created,by,the,link,get,values,method,hence,if,called,multiple,times,it,removes,pairs,return,true,if,the,input,iterator,has,an,other,group,of,key,value,pairs,that,share,the,same,key;public,boolean,next,key,throws,ioexception,if,this,current,null,if,this,done,this,values,iterator,null,return,false,this,current,this,serializer,create,instance,if,this,current,this,iterator,next,this,current,null,this,comparator,set,reference,this,current,this,look,ahead,has,next,false,this,values,iterator,new,values,iterator,this,values,iterator,current,is,unconsumed,true,return,true,else,this,values,iterator,null,this,current,null,this,done,true,return,false,if,this,look,ahead,has,next,this,look,ahead,has,next,false,this,current,this,lookahead,this,lookahead,null,this,comparator,set,reference,this,current,this,values,iterator,current,is,unconsumed,true,return,true,while,true,if,this,done,this,current,this,iterator,next,this,current,null,if,this,comparator,equal,to,reference,this,current,this,comparator,set,reference,this,current,this,look,ahead,has,next,false,this,values,iterator,current,is,unconsumed,true,return,true,else,this,values,iterator,null,this,current,null,this,done,true,return,false
KeyGroupedIterator -> public boolean nextKey() throws IOException;1406853229;Moves the iterator to the next key. This method may skip any values that have not yet been returned by the_iterator created by the {@link #getValues()} method. Hence, if called multiple times it "removes" pairs.__@return true if the input iterator has an other group of key-value pairs that share the same key.;public boolean nextKey() throws IOException_	{_		_		if (this.current == null) {_			if (this.done) {_				this.valuesIterator = null__				return false__			}_			this.current = this.serializer.createInstance()__			if ((this.current = this.iterator.next(this.current)) != null) {_				this.comparator.setReference(this.current)__				this.lookAheadHasNext = false__				this.valuesIterator = new ValuesIterator()__				this.valuesIterator.currentIsUnconsumed = true__				return true__			} else {_				_				this.valuesIterator = null__				this.current = null__				this.done = true__				return false__			}_		}_		_		this.valuesIterator.iteratorAvailable = true___		_		if (this.lookAheadHasNext) {_			this.lookAheadHasNext = false__			this.current = this.lookahead__			this.lookahead = null__			this.comparator.setReference(this.current)__			this.valuesIterator.currentIsUnconsumed = true__			return true__		}__		_		_		while (true) {_			if (!this.done && ((this.current = this.iterator.next(this.current)) != null)) {_				if (!this.comparator.equalToReference(this.current)) {_					_					this.comparator.setReference(this.current)__					this.lookAheadHasNext = false__					this.valuesIterator.currentIsUnconsumed = true__					return true__				}_			}_			else {_				this.valuesIterator = null__				this.current = null__				this.done = true__				return false__			}_		}_	};moves,the,iterator,to,the,next,key,this,method,may,skip,any,values,that,have,not,yet,been,returned,by,the,iterator,created,by,the,link,get,values,method,hence,if,called,multiple,times,it,removes,pairs,return,true,if,the,input,iterator,has,an,other,group,of,key,value,pairs,that,share,the,same,key;public,boolean,next,key,throws,ioexception,if,this,current,null,if,this,done,this,values,iterator,null,return,false,this,current,this,serializer,create,instance,if,this,current,this,iterator,next,this,current,null,this,comparator,set,reference,this,current,this,look,ahead,has,next,false,this,values,iterator,new,values,iterator,this,values,iterator,current,is,unconsumed,true,return,true,else,this,values,iterator,null,this,current,null,this,done,true,return,false,this,values,iterator,iterator,available,true,if,this,look,ahead,has,next,this,look,ahead,has,next,false,this,current,this,lookahead,this,lookahead,null,this,comparator,set,reference,this,current,this,values,iterator,current,is,unconsumed,true,return,true,while,true,if,this,done,this,current,this,iterator,next,this,current,null,if,this,comparator,equal,to,reference,this,current,this,comparator,set,reference,this,current,this,look,ahead,has,next,false,this,values,iterator,current,is,unconsumed,true,return,true,else,this,values,iterator,null,this,current,null,this,done,true,return,false
KeyGroupedIterator -> public boolean nextKey() throws IOException;1411473593;Moves the iterator to the next key. This method may skip any values that have not yet been returned by the_iterator created by the {@link #getValues()} method. Hence, if called multiple times it "removes" pairs.__@return true if the input iterator has an other group of key-value pairs that share the same key.;public boolean nextKey() throws IOException_	{_		_		if (this.current == null) {_			if (this.done) {_				this.valuesIterator = null__				return false__			}_			this.current = this.serializer.createInstance()__			if ((this.current = this.iterator.next(this.current)) != null) {_				this.comparator.setReference(this.current)__				this.lookAheadHasNext = false__				this.valuesIterator = new ValuesIterator()__				this.valuesIterator.currentIsUnconsumed = true__				return true__			} else {_				_				this.valuesIterator = null__				this.current = null__				this.done = true__				return false__			}_		}_		_		this.valuesIterator.iteratorAvailable = true___		_		if (this.lookAheadHasNext) {_			this.lookAheadHasNext = false__			this.current = this.lookahead__			this.lookahead = null__			this.comparator.setReference(this.current)__			this.valuesIterator.currentIsUnconsumed = true__			return true__		}__		_		_		while (true) {_			if (!this.done && ((this.current = this.iterator.next(this.current)) != null)) {_				if (!this.comparator.equalToReference(this.current)) {_					_					this.comparator.setReference(this.current)__					this.lookAheadHasNext = false__					this.valuesIterator.currentIsUnconsumed = true__					return true__				}_			}_			else {_				this.valuesIterator = null__				this.current = null__				this.done = true__				return false__			}_		}_	};moves,the,iterator,to,the,next,key,this,method,may,skip,any,values,that,have,not,yet,been,returned,by,the,iterator,created,by,the,link,get,values,method,hence,if,called,multiple,times,it,removes,pairs,return,true,if,the,input,iterator,has,an,other,group,of,key,value,pairs,that,share,the,same,key;public,boolean,next,key,throws,ioexception,if,this,current,null,if,this,done,this,values,iterator,null,return,false,this,current,this,serializer,create,instance,if,this,current,this,iterator,next,this,current,null,this,comparator,set,reference,this,current,this,look,ahead,has,next,false,this,values,iterator,new,values,iterator,this,values,iterator,current,is,unconsumed,true,return,true,else,this,values,iterator,null,this,current,null,this,done,true,return,false,this,values,iterator,iterator,available,true,if,this,look,ahead,has,next,this,look,ahead,has,next,false,this,current,this,lookahead,this,lookahead,null,this,comparator,set,reference,this,current,this,values,iterator,current,is,unconsumed,true,return,true,while,true,if,this,done,this,current,this,iterator,next,this,current,null,if,this,comparator,equal,to,reference,this,current,this,comparator,set,reference,this,current,this,look,ahead,has,next,false,this,values,iterator,current,is,unconsumed,true,return,true,else,this,values,iterator,null,this,current,null,this,done,true,return,false
KeyGroupedIterator -> public boolean nextKey() throws IOException;1412089298;Moves the iterator to the next key. This method may skip any values that have not yet been returned by the_iterator created by the {@link #getValues()} method. Hence, if called multiple times it "removes" pairs.__@return true if the input iterator has an other group of key-value pairs that share the same key.;public boolean nextKey() throws IOException_	{_		_		if (this.current == null) {_			if (this.done) {_				this.valuesIterator = null__				return false__			}_			this.current = this.serializer.createInstance()__			if ((this.current = this.iterator.next(this.current)) != null) {_				this.comparator.setReference(this.current)__				this.lookAheadHasNext = false__				this.valuesIterator = new ValuesIterator()__				this.valuesIterator.currentIsUnconsumed = true__				return true__			} else {_				_				this.valuesIterator = null__				this.current = null__				this.done = true__				return false__			}_		}_		_		this.valuesIterator.iteratorAvailable = true___		_		if (this.lookAheadHasNext) {_			this.lookAheadHasNext = false__			this.current = this.lookahead__			this.lookahead = null__			this.comparator.setReference(this.current)__			this.valuesIterator.currentIsUnconsumed = true__			return true__		}__		_		_		while (true) {_			if (!this.done && ((this.current = this.iterator.next(this.current)) != null)) {_				if (!this.comparator.equalToReference(this.current)) {_					_					this.comparator.setReference(this.current)__					this.lookAheadHasNext = false__					this.valuesIterator.currentIsUnconsumed = true__					return true__				}_			}_			else {_				this.valuesIterator = null__				this.current = null__				this.done = true__				return false__			}_		}_	};moves,the,iterator,to,the,next,key,this,method,may,skip,any,values,that,have,not,yet,been,returned,by,the,iterator,created,by,the,link,get,values,method,hence,if,called,multiple,times,it,removes,pairs,return,true,if,the,input,iterator,has,an,other,group,of,key,value,pairs,that,share,the,same,key;public,boolean,next,key,throws,ioexception,if,this,current,null,if,this,done,this,values,iterator,null,return,false,this,current,this,serializer,create,instance,if,this,current,this,iterator,next,this,current,null,this,comparator,set,reference,this,current,this,look,ahead,has,next,false,this,values,iterator,new,values,iterator,this,values,iterator,current,is,unconsumed,true,return,true,else,this,values,iterator,null,this,current,null,this,done,true,return,false,this,values,iterator,iterator,available,true,if,this,look,ahead,has,next,this,look,ahead,has,next,false,this,current,this,lookahead,this,lookahead,null,this,comparator,set,reference,this,current,this,values,iterator,current,is,unconsumed,true,return,true,while,true,if,this,done,this,current,this,iterator,next,this,current,null,if,this,comparator,equal,to,reference,this,current,this,comparator,set,reference,this,current,this,look,ahead,has,next,false,this,values,iterator,current,is,unconsumed,true,return,true,else,this,values,iterator,null,this,current,null,this,done,true,return,false
KeyGroupedIterator -> ValuesIterator -> @Override 		public E next();1405024514;Prior to call this method, call hasNext() once!;@Override_		public E next() {_			if (this.currentIsUnconsumed || hasNext()) {_				this.currentIsUnconsumed = false__				return KeyGroupedIterator.this.current__			} else {_				throw new NoSuchElementException()__			}_		};prior,to,call,this,method,call,has,next,once;override,public,e,next,if,this,current,is,unconsumed,has,next,this,current,is,unconsumed,false,return,key,grouped,iterator,this,current,else,throw,new,no,such,element,exception
KeyGroupedIterator -> ValuesIterator -> @Override 		public E next();1405090423;Prior to call this method, call hasNext() once!;@Override_		public E next() {_			if (this.currentIsUnconsumed || hasNext()) {_				this.currentIsUnconsumed = false__				return KeyGroupedIterator.this.current__			} else {_				throw new NoSuchElementException()__			}_		};prior,to,call,this,method,call,has,next,once;override,public,e,next,if,this,current,is,unconsumed,has,next,this,current,is,unconsumed,false,return,key,grouped,iterator,this,current,else,throw,new,no,such,element,exception
KeyGroupedIterator -> ValuesIterator -> @Override 		public E next();1406853229;Prior to call this method, call hasNext() once!;@Override_		public E next() {_			if (this.currentIsUnconsumed || hasNext()) {_				this.currentIsUnconsumed = false__				return KeyGroupedIterator.this.current__			} else {_				throw new NoSuchElementException()__			}_		};prior,to,call,this,method,call,has,next,once;override,public,e,next,if,this,current,is,unconsumed,has,next,this,current,is,unconsumed,false,return,key,grouped,iterator,this,current,else,throw,new,no,such,element,exception
KeyGroupedIterator -> ValuesIterator -> @Override 		public E next();1411473593;Prior to call this method, call hasNext() once!;@Override_		public E next() {_			if (this.currentIsUnconsumed || hasNext()) {_				this.currentIsUnconsumed = false__				return KeyGroupedIterator.this.current__			} else {_				throw new NoSuchElementException()__			}_		};prior,to,call,this,method,call,has,next,once;override,public,e,next,if,this,current,is,unconsumed,has,next,this,current,is,unconsumed,false,return,key,grouped,iterator,this,current,else,throw,new,no,such,element,exception
KeyGroupedIterator -> ValuesIterator -> @Override 		public E next();1412089298;Prior to call this method, call hasNext() once!;@Override_		public E next() {_			if (this.currentIsUnconsumed || hasNext()) {_				this.currentIsUnconsumed = false__				return KeyGroupedIterator.this.current__			} else {_				throw new NoSuchElementException()__			}_		};prior,to,call,this,method,call,has,next,once;override,public,e,next,if,this,current,is,unconsumed,has,next,this,current,is,unconsumed,false,return,key,grouped,iterator,this,current,else,throw,new,no,such,element,exception
KeyGroupedIterator -> public ValuesIterator getValues();1405024514;Returns an iterator over all values that belong to the current key. The iterator is initially <code>null</code>_(before the first call to {@link #nextKey()} and after all keys are consumed. In general, this method returns_always a non-null value, if a previous call to {@link #nextKey()} return <code>true</code>.__@return Iterator over all values that belong to the current key.;public ValuesIterator getValues() {_		return this.valuesIterator__	};returns,an,iterator,over,all,values,that,belong,to,the,current,key,the,iterator,is,initially,code,null,code,before,the,first,call,to,link,next,key,and,after,all,keys,are,consumed,in,general,this,method,returns,always,a,non,null,value,if,a,previous,call,to,link,next,key,return,code,true,code,return,iterator,over,all,values,that,belong,to,the,current,key;public,values,iterator,get,values,return,this,values,iterator
KeyGroupedIterator -> public ValuesIterator getValues();1405090423;Returns an iterator over all values that belong to the current key. The iterator is initially <code>null</code>_(before the first call to {@link #nextKey()} and after all keys are consumed. In general, this method returns_always a non-null value, if a previous call to {@link #nextKey()} return <code>true</code>.__@return Iterator over all values that belong to the current key.;public ValuesIterator getValues() {_		return this.valuesIterator__	};returns,an,iterator,over,all,values,that,belong,to,the,current,key,the,iterator,is,initially,code,null,code,before,the,first,call,to,link,next,key,and,after,all,keys,are,consumed,in,general,this,method,returns,always,a,non,null,value,if,a,previous,call,to,link,next,key,return,code,true,code,return,iterator,over,all,values,that,belong,to,the,current,key;public,values,iterator,get,values,return,this,values,iterator
KeyGroupedIterator -> public ValuesIterator getValues();1406853229;Returns an iterator over all values that belong to the current key. The iterator is initially <code>null</code>_(before the first call to {@link #nextKey()} and after all keys are consumed. In general, this method returns_always a non-null value, if a previous call to {@link #nextKey()} return <code>true</code>.__@return Iterator over all values that belong to the current key.;public ValuesIterator getValues() {_		return this.valuesIterator__	};returns,an,iterator,over,all,values,that,belong,to,the,current,key,the,iterator,is,initially,code,null,code,before,the,first,call,to,link,next,key,and,after,all,keys,are,consumed,in,general,this,method,returns,always,a,non,null,value,if,a,previous,call,to,link,next,key,return,code,true,code,return,iterator,over,all,values,that,belong,to,the,current,key;public,values,iterator,get,values,return,this,values,iterator
KeyGroupedIterator -> public ValuesIterator getValues();1411473593;Returns an iterator over all values that belong to the current key. The iterator is initially <code>null</code>_(before the first call to {@link #nextKey()} and after all keys are consumed. In general, this method returns_always a non-null value, if a previous call to {@link #nextKey()} return <code>true</code>.__@return Iterator over all values that belong to the current key.;public ValuesIterator getValues() {_		return this.valuesIterator__	};returns,an,iterator,over,all,values,that,belong,to,the,current,key,the,iterator,is,initially,code,null,code,before,the,first,call,to,link,next,key,and,after,all,keys,are,consumed,in,general,this,method,returns,always,a,non,null,value,if,a,previous,call,to,link,next,key,return,code,true,code,return,iterator,over,all,values,that,belong,to,the,current,key;public,values,iterator,get,values,return,this,values,iterator
KeyGroupedIterator -> public ValuesIterator getValues();1412089298;Returns an iterator over all values that belong to the current key. The iterator is initially <code>null</code>_(before the first call to {@link #nextKey()} and after all keys are consumed. In general, this method returns_always a non-null value, if a previous call to {@link #nextKey()} return <code>true</code>.__@return Iterator over all values that belong to the current key.;public ValuesIterator getValues() {_		return this.valuesIterator__	};returns,an,iterator,over,all,values,that,belong,to,the,current,key,the,iterator,is,initially,code,null,code,before,the,first,call,to,link,next,key,and,after,all,keys,are,consumed,in,general,this,method,returns,always,a,non,null,value,if,a,previous,call,to,link,next,key,return,code,true,code,return,iterator,over,all,values,that,belong,to,the,current,key;public,values,iterator,get,values,return,this,values,iterator
KeyGroupedIterator -> public KeyGroupedIterator(MutableObjectIterator<E> iterator, 			TypeSerializer<E> serializer, TypeComparator<E> comparator);1405024514;Initializes the KeyGroupedIterator. It requires an iterator which returns its result_sorted by the key fields.__@param iterator An iterator over records, which are sorted by the key fields, in any order._@param serializer The serializer for the data type iterated over._@param comparator The comparator for the data type iterated over.;public KeyGroupedIterator(MutableObjectIterator<E> iterator,_			TypeSerializer<E> serializer, TypeComparator<E> comparator)_	{_		if (iterator == null || serializer == null || comparator == null) {_			throw new NullPointerException()__		}_		_		this.iterator = iterator__		this.serializer = serializer__		this.comparator = comparator__	};initializes,the,key,grouped,iterator,it,requires,an,iterator,which,returns,its,result,sorted,by,the,key,fields,param,iterator,an,iterator,over,records,which,are,sorted,by,the,key,fields,in,any,order,param,serializer,the,serializer,for,the,data,type,iterated,over,param,comparator,the,comparator,for,the,data,type,iterated,over;public,key,grouped,iterator,mutable,object,iterator,e,iterator,type,serializer,e,serializer,type,comparator,e,comparator,if,iterator,null,serializer,null,comparator,null,throw,new,null,pointer,exception,this,iterator,iterator,this,serializer,serializer,this,comparator,comparator
KeyGroupedIterator -> public KeyGroupedIterator(MutableObjectIterator<E> iterator, 			TypeSerializer<E> serializer, TypeComparator<E> comparator);1405090423;Initializes the KeyGroupedIterator. It requires an iterator which returns its result_sorted by the key fields.__@param iterator An iterator over records, which are sorted by the key fields, in any order._@param serializer The serializer for the data type iterated over._@param comparator The comparator for the data type iterated over.;public KeyGroupedIterator(MutableObjectIterator<E> iterator,_			TypeSerializer<E> serializer, TypeComparator<E> comparator)_	{_		if (iterator == null || serializer == null || comparator == null) {_			throw new NullPointerException()__		}_		_		this.iterator = iterator__		this.serializer = serializer__		this.comparator = comparator__	};initializes,the,key,grouped,iterator,it,requires,an,iterator,which,returns,its,result,sorted,by,the,key,fields,param,iterator,an,iterator,over,records,which,are,sorted,by,the,key,fields,in,any,order,param,serializer,the,serializer,for,the,data,type,iterated,over,param,comparator,the,comparator,for,the,data,type,iterated,over;public,key,grouped,iterator,mutable,object,iterator,e,iterator,type,serializer,e,serializer,type,comparator,e,comparator,if,iterator,null,serializer,null,comparator,null,throw,new,null,pointer,exception,this,iterator,iterator,this,serializer,serializer,this,comparator,comparator
KeyGroupedIterator -> public KeyGroupedIterator(MutableObjectIterator<E> iterator, 			TypeSerializer<E> serializer, TypeComparator<E> comparator);1406853229;Initializes the KeyGroupedIterator. It requires an iterator which returns its result_sorted by the key fields.__@param iterator An iterator over records, which are sorted by the key fields, in any order._@param serializer The serializer for the data type iterated over._@param comparator The comparator for the data type iterated over.;public KeyGroupedIterator(MutableObjectIterator<E> iterator,_			TypeSerializer<E> serializer, TypeComparator<E> comparator)_	{_		if (iterator == null || serializer == null || comparator == null) {_			throw new NullPointerException()__		}_		_		this.iterator = iterator__		this.serializer = serializer__		this.comparator = comparator__	};initializes,the,key,grouped,iterator,it,requires,an,iterator,which,returns,its,result,sorted,by,the,key,fields,param,iterator,an,iterator,over,records,which,are,sorted,by,the,key,fields,in,any,order,param,serializer,the,serializer,for,the,data,type,iterated,over,param,comparator,the,comparator,for,the,data,type,iterated,over;public,key,grouped,iterator,mutable,object,iterator,e,iterator,type,serializer,e,serializer,type,comparator,e,comparator,if,iterator,null,serializer,null,comparator,null,throw,new,null,pointer,exception,this,iterator,iterator,this,serializer,serializer,this,comparator,comparator
KeyGroupedIterator -> public KeyGroupedIterator(MutableObjectIterator<E> iterator, 			TypeSerializer<E> serializer, TypeComparator<E> comparator);1411473593;Initializes the KeyGroupedIterator. It requires an iterator which returns its result_sorted by the key fields.__@param iterator An iterator over records, which are sorted by the key fields, in any order._@param serializer The serializer for the data type iterated over._@param comparator The comparator for the data type iterated over.;public KeyGroupedIterator(MutableObjectIterator<E> iterator,_			TypeSerializer<E> serializer, TypeComparator<E> comparator)_	{_		if (iterator == null || serializer == null || comparator == null) {_			throw new NullPointerException()__		}_		_		this.iterator = iterator__		this.serializer = serializer__		this.comparator = comparator__	};initializes,the,key,grouped,iterator,it,requires,an,iterator,which,returns,its,result,sorted,by,the,key,fields,param,iterator,an,iterator,over,records,which,are,sorted,by,the,key,fields,in,any,order,param,serializer,the,serializer,for,the,data,type,iterated,over,param,comparator,the,comparator,for,the,data,type,iterated,over;public,key,grouped,iterator,mutable,object,iterator,e,iterator,type,serializer,e,serializer,type,comparator,e,comparator,if,iterator,null,serializer,null,comparator,null,throw,new,null,pointer,exception,this,iterator,iterator,this,serializer,serializer,this,comparator,comparator
KeyGroupedIterator -> public KeyGroupedIterator(MutableObjectIterator<E> iterator, 			TypeSerializer<E> serializer, TypeComparator<E> comparator);1412089298;Initializes the KeyGroupedIterator. It requires an iterator which returns its result_sorted by the key fields.__@param iterator An iterator over records, which are sorted by the key fields, in any order._@param serializer The serializer for the data type iterated over._@param comparator The comparator for the data type iterated over.;public KeyGroupedIterator(MutableObjectIterator<E> iterator,_			TypeSerializer<E> serializer, TypeComparator<E> comparator)_	{_		if (iterator == null || serializer == null || comparator == null) {_			throw new NullPointerException()__		}_		_		this.iterator = iterator__		this.serializer = serializer__		this.comparator = comparator__	};initializes,the,key,grouped,iterator,it,requires,an,iterator,which,returns,its,result,sorted,by,the,key,fields,param,iterator,an,iterator,over,records,which,are,sorted,by,the,key,fields,in,any,order,param,serializer,the,serializer,for,the,data,type,iterated,over,param,comparator,the,comparator,for,the,data,type,iterated,over;public,key,grouped,iterator,mutable,object,iterator,e,iterator,type,serializer,e,serializer,type,comparator,e,comparator,if,iterator,null,serializer,null,comparator,null,throw,new,null,pointer,exception,this,iterator,iterator,this,serializer,serializer,this,comparator,comparator
