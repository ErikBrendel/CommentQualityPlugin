commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;15;/**  * Extracts all {@link RpcGateway} interfaces implemented by the given clazz.  *  * @param clazz from which to extract the implemented RpcGateway interfaces  * @return A set of all implemented RpcGateway interfaces  */ ;/**  * Extracts all {@link RpcGateway} interfaces implemented by the given clazz.  *  * @param clazz from which to extract the implemented RpcGateway interfaces  * @return A set of all implemented RpcGateway interfaces  */ public static Set<Class<? extends RpcGateway>> extractImplementedRpcGateways(Class<?> clazz) {     HashSet<Class<? extends RpcGateway>> interfaces = new HashSet<>().     while (clazz != null) {         for (Class<?> interfaze : clazz.getInterfaces()) {             if (RpcGateway.class.isAssignableFrom(interfaze)) {                 interfaces.add((Class<? extends RpcGateway>) interfaze).             }         }         clazz = clazz.getSuperclass().     }     return interfaces. }
true;public,static;2;3;/**  * Shuts the given {@link RpcEndpoint} down and awaits its termination.  *  * @param rpcEndpoint to terminate  * @param timeout for this operation  * @throws ExecutionException if a problem occurred  * @throws InterruptedException if the operation has been interrupted  * @throws TimeoutException if a timeout occurred  */ ;/**  * Shuts the given {@link RpcEndpoint} down and awaits its termination.  *  * @param rpcEndpoint to terminate  * @param timeout for this operation  * @throws ExecutionException if a problem occurred  * @throws InterruptedException if the operation has been interrupted  * @throws TimeoutException if a timeout occurred  */ public static void terminateRpcEndpoint(RpcEndpoint rpcEndpoint, Time timeout) throws ExecutionException, InterruptedException, TimeoutException {     rpcEndpoint.closeAsync().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS). }
true;public,static;2;3;/**  * Shuts the given rpc service down and waits for its termination.  *  * @param rpcService to shut down  * @param timeout for this operation  * @throws InterruptedException if the operation has been interrupted  * @throws ExecutionException if a problem occurred  * @throws TimeoutException if a timeout occurred  */ ;/**  * Shuts the given rpc service down and waits for its termination.  *  * @param rpcService to shut down  * @param timeout for this operation  * @throws InterruptedException if the operation has been interrupted  * @throws ExecutionException if a problem occurred  * @throws TimeoutException if a timeout occurred  */ public static void terminateRpcService(RpcService rpcService, Time timeout) throws InterruptedException, ExecutionException, TimeoutException {     rpcService.stopService().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS). }
true;public,static;2;13;/**  * Shuts the given rpc services down and waits for their termination.  *  * @param rpcServices to shut down  * @param timeout for this operation  * @throws InterruptedException if the operation has been interrupted  * @throws ExecutionException if a problem occurred  * @throws TimeoutException if a timeout occurred  */ ;/**  * Shuts the given rpc services down and waits for their termination.  *  * @param rpcServices to shut down  * @param timeout for this operation  * @throws InterruptedException if the operation has been interrupted  * @throws ExecutionException if a problem occurred  * @throws TimeoutException if a timeout occurred  */ public static void terminateRpcServices(Time timeout, RpcService... rpcServices) throws InterruptedException, ExecutionException, TimeoutException {     final Collection<CompletableFuture<?>> terminationFutures = new ArrayList<>(rpcServices.length).     for (RpcService service : rpcServices) {         if (service != null) {             terminationFutures.add(service.stopService()).         }     }     FutureUtils.waitForAll(terminationFutures).get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS). }
