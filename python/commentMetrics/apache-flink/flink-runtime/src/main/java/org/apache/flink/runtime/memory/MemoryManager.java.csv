# id;timestamp;commentText;codeText;commentWords;codeWords
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots);1441738685;Creates a memory manager with the given capacity, using the default page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager.;public MemoryManager(long memorySize, int numberOfSlots) {_		this(memorySize, numberOfSlots, DEFAULT_PAGE_SIZE, MemoryType.HEAP, true)__	};creates,a,memory,manager,with,the,given,capacity,using,the,default,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager;public,memory,manager,long,memory,size,int,number,of,slots,this,memory,size,number,of,slots,memory,type,heap,true
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots);1460741894;Creates a memory manager with the given capacity, using the default page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager.;public MemoryManager(long memorySize, int numberOfSlots) {_		this(memorySize, numberOfSlots, DEFAULT_PAGE_SIZE, MemoryType.HEAP, true)__	};creates,a,memory,manager,with,the,given,capacity,using,the,default,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager;public,memory,manager,long,memory,size,int,number,of,slots,this,memory,size,number,of,slots,memory,type,heap,true
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots);1470405838;Creates a memory manager with the given capacity, using the default page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager.;public MemoryManager(long memorySize, int numberOfSlots) {_		this(memorySize, numberOfSlots, DEFAULT_PAGE_SIZE, MemoryType.HEAP, true)__	};creates,a,memory,manager,with,the,given,capacity,using,the,default,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager;public,memory,manager,long,memory,size,int,number,of,slots,this,memory,size,number,of,slots,memory,type,heap,true
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots);1499282568;Creates a memory manager with the given capacity, using the default page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager.;public MemoryManager(long memorySize, int numberOfSlots) {_		this(memorySize, numberOfSlots, DEFAULT_PAGE_SIZE, MemoryType.HEAP, true)__	};creates,a,memory,manager,with,the,given,capacity,using,the,default,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager;public,memory,manager,long,memory,size,int,number,of,slots,this,memory,size,number,of,slots,memory,type,heap,true
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots);1507315082;Creates a memory manager with the given capacity, using the default page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager.;public MemoryManager(long memorySize, int numberOfSlots) {_		this(memorySize, numberOfSlots, DEFAULT_PAGE_SIZE, MemoryType.HEAP, true)__	};creates,a,memory,manager,with,the,given,capacity,using,the,default,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager;public,memory,manager,long,memory,size,int,number,of,slots,this,memory,size,number,of,slots,memory,type,heap,true
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots);1507316227;Creates a memory manager with the given capacity, using the default page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager.;public MemoryManager(long memorySize, int numberOfSlots) {_		this(memorySize, numberOfSlots, DEFAULT_PAGE_SIZE, MemoryType.HEAP, true)__	};creates,a,memory,manager,with,the,given,capacity,using,the,default,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager;public,memory,manager,long,memory,size,int,number,of,slots,this,memory,size,number,of,slots,memory,type,heap,true
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots);1517317681;Creates a memory manager with the given capacity, using the default page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager.;public MemoryManager(long memorySize, int numberOfSlots) {_		this(memorySize, numberOfSlots, DEFAULT_PAGE_SIZE, MemoryType.HEAP, true)__	};creates,a,memory,manager,with,the,given,capacity,using,the,default,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager;public,memory,manager,long,memory,size,int,number,of,slots,this,memory,size,number,of,slots,memory,type,heap,true
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots);1533306678;Creates a memory manager with the given capacity, using the default page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager.;public MemoryManager(long memorySize, int numberOfSlots) {_		this(memorySize, numberOfSlots, DEFAULT_PAGE_SIZE, MemoryType.HEAP, true)__	};creates,a,memory,manager,with,the,given,capacity,using,the,default,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager;public,memory,manager,long,memory,size,int,number,of,slots,this,memory,size,number,of,slots,memory,type,heap,true
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots);1538389013;Creates a memory manager with the given capacity, using the default page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager.;public MemoryManager(long memorySize, int numberOfSlots) {_		this(memorySize, numberOfSlots, DEFAULT_PAGE_SIZE, MemoryType.HEAP, true)__	};creates,a,memory,manager,with,the,given,capacity,using,the,default,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager;public,memory,manager,long,memory,size,int,number,of,slots,this,memory,size,number,of,slots,memory,type,heap,true
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots);1539345486;Creates a memory manager with the given capacity, using the default page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager.;public MemoryManager(long memorySize, int numberOfSlots) {_		this(memorySize, numberOfSlots, DEFAULT_PAGE_SIZE, MemoryType.HEAP, true)__	};creates,a,memory,manager,with,the,given,capacity,using,the,default,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager;public,memory,manager,long,memory,size,int,number,of,slots,this,memory,size,number,of,slots,memory,type,heap,true
MemoryManager -> public long roundDownToPageSizeMultiple(long numBytes);1441738685;Rounds the given value down to a multiple of the memory manager's page size.__@return The given value, rounded down to a multiple of the page size.;public long roundDownToPageSizeMultiple(long numBytes) {_		return numBytes & roundingMask__	};rounds,the,given,value,down,to,a,multiple,of,the,memory,manager,s,page,size,return,the,given,value,rounded,down,to,a,multiple,of,the,page,size;public,long,round,down,to,page,size,multiple,long,num,bytes,return,num,bytes,rounding,mask
MemoryManager -> public long roundDownToPageSizeMultiple(long numBytes);1460741894;Rounds the given value down to a multiple of the memory manager's page size.__@return The given value, rounded down to a multiple of the page size.;public long roundDownToPageSizeMultiple(long numBytes) {_		return numBytes & roundingMask__	};rounds,the,given,value,down,to,a,multiple,of,the,memory,manager,s,page,size,return,the,given,value,rounded,down,to,a,multiple,of,the,page,size;public,long,round,down,to,page,size,multiple,long,num,bytes,return,num,bytes,rounding,mask
MemoryManager -> public long roundDownToPageSizeMultiple(long numBytes);1470405838;Rounds the given value down to a multiple of the memory manager's page size.__@return The given value, rounded down to a multiple of the page size.;public long roundDownToPageSizeMultiple(long numBytes) {_		return numBytes & roundingMask__	};rounds,the,given,value,down,to,a,multiple,of,the,memory,manager,s,page,size,return,the,given,value,rounded,down,to,a,multiple,of,the,page,size;public,long,round,down,to,page,size,multiple,long,num,bytes,return,num,bytes,rounding,mask
MemoryManager -> public long roundDownToPageSizeMultiple(long numBytes);1499282568;Rounds the given value down to a multiple of the memory manager's page size.__@return The given value, rounded down to a multiple of the page size.;public long roundDownToPageSizeMultiple(long numBytes) {_		return numBytes & roundingMask__	};rounds,the,given,value,down,to,a,multiple,of,the,memory,manager,s,page,size,return,the,given,value,rounded,down,to,a,multiple,of,the,page,size;public,long,round,down,to,page,size,multiple,long,num,bytes,return,num,bytes,rounding,mask
MemoryManager -> public long roundDownToPageSizeMultiple(long numBytes);1507315082;Rounds the given value down to a multiple of the memory manager's page size.__@return The given value, rounded down to a multiple of the page size.;public long roundDownToPageSizeMultiple(long numBytes) {_		return numBytes & roundingMask__	};rounds,the,given,value,down,to,a,multiple,of,the,memory,manager,s,page,size,return,the,given,value,rounded,down,to,a,multiple,of,the,page,size;public,long,round,down,to,page,size,multiple,long,num,bytes,return,num,bytes,rounding,mask
MemoryManager -> public long roundDownToPageSizeMultiple(long numBytes);1507316227;Rounds the given value down to a multiple of the memory manager's page size.__@return The given value, rounded down to a multiple of the page size.;public long roundDownToPageSizeMultiple(long numBytes) {_		return numBytes & roundingMask__	};rounds,the,given,value,down,to,a,multiple,of,the,memory,manager,s,page,size,return,the,given,value,rounded,down,to,a,multiple,of,the,page,size;public,long,round,down,to,page,size,multiple,long,num,bytes,return,num,bytes,rounding,mask
MemoryManager -> public long roundDownToPageSizeMultiple(long numBytes);1517317681;Rounds the given value down to a multiple of the memory manager's page size.__@return The given value, rounded down to a multiple of the page size.;public long roundDownToPageSizeMultiple(long numBytes) {_		return numBytes & roundingMask__	};rounds,the,given,value,down,to,a,multiple,of,the,memory,manager,s,page,size,return,the,given,value,rounded,down,to,a,multiple,of,the,page,size;public,long,round,down,to,page,size,multiple,long,num,bytes,return,num,bytes,rounding,mask
MemoryManager -> public long roundDownToPageSizeMultiple(long numBytes);1533306678;Rounds the given value down to a multiple of the memory manager's page size.__@return The given value, rounded down to a multiple of the page size.;public long roundDownToPageSizeMultiple(long numBytes) {_		return numBytes & roundingMask__	};rounds,the,given,value,down,to,a,multiple,of,the,memory,manager,s,page,size,return,the,given,value,rounded,down,to,a,multiple,of,the,page,size;public,long,round,down,to,page,size,multiple,long,num,bytes,return,num,bytes,rounding,mask
MemoryManager -> public long roundDownToPageSizeMultiple(long numBytes);1538389013;Rounds the given value down to a multiple of the memory manager's page size.__@return The given value, rounded down to a multiple of the page size.;public long roundDownToPageSizeMultiple(long numBytes) {_		return numBytes & roundingMask__	};rounds,the,given,value,down,to,a,multiple,of,the,memory,manager,s,page,size,return,the,given,value,rounded,down,to,a,multiple,of,the,page,size;public,long,round,down,to,page,size,multiple,long,num,bytes,return,num,bytes,rounding,mask
MemoryManager -> public long roundDownToPageSizeMultiple(long numBytes);1539345486;Rounds the given value down to a multiple of the memory manager's page size.__@return The given value, rounded down to a multiple of the page size.;public long roundDownToPageSizeMultiple(long numBytes) {_		return numBytes & roundingMask__	};rounds,the,given,value,down,to,a,multiple,of,the,memory,manager,s,page,size,return,the,given,value,rounded,down,to,a,multiple,of,the,page,size;public,long,round,down,to,page,size,multiple,long,num,bytes,return,num,bytes,rounding,mask
MemoryManager -> public void shutdown();1441738685;Shuts the memory manager down, trying to release all the memory it managed. Depending_on implementation details, the memory does not necessarily become reclaimable by the_garbage collector, because there might still be references to allocated segments in the_code that allocated them from the memory manager.;public void shutdown() {_		_		synchronized (lock)_		{_			if (!isShutDown) {_				_				isShutDown = true__				numNonAllocatedPages = 0___				_				for (Set<MemorySegment> segments : allocatedSegments.values()) {_					for (MemorySegment seg : segments) {_						seg.free()__					}_				}_				_				memoryPool.clear()__			}_		}_		_	};shuts,the,memory,manager,down,trying,to,release,all,the,memory,it,managed,depending,on,implementation,details,the,memory,does,not,necessarily,become,reclaimable,by,the,garbage,collector,because,there,might,still,be,references,to,allocated,segments,in,the,code,that,allocated,them,from,the,memory,manager;public,void,shutdown,synchronized,lock,if,is,shut,down,is,shut,down,true,num,non,allocated,pages,0,for,set,memory,segment,segments,allocated,segments,values,for,memory,segment,seg,segments,seg,free,memory,pool,clear
MemoryManager -> public void shutdown();1460741894;Shuts the memory manager down, trying to release all the memory it managed. Depending_on implementation details, the memory does not necessarily become reclaimable by the_garbage collector, because there might still be references to allocated segments in the_code that allocated them from the memory manager.;public void shutdown() {_		_		synchronized (lock)_		{_			if (!isShutDown) {_				_				isShutDown = true__				numNonAllocatedPages = 0___				_				for (Set<MemorySegment> segments : allocatedSegments.values()) {_					for (MemorySegment seg : segments) {_						seg.free()__					}_				}_				_				memoryPool.clear()__			}_		}_		_	};shuts,the,memory,manager,down,trying,to,release,all,the,memory,it,managed,depending,on,implementation,details,the,memory,does,not,necessarily,become,reclaimable,by,the,garbage,collector,because,there,might,still,be,references,to,allocated,segments,in,the,code,that,allocated,them,from,the,memory,manager;public,void,shutdown,synchronized,lock,if,is,shut,down,is,shut,down,true,num,non,allocated,pages,0,for,set,memory,segment,segments,allocated,segments,values,for,memory,segment,seg,segments,seg,free,memory,pool,clear
MemoryManager -> public void shutdown();1470405838;Shuts the memory manager down, trying to release all the memory it managed. Depending_on implementation details, the memory does not necessarily become reclaimable by the_garbage collector, because there might still be references to allocated segments in the_code that allocated them from the memory manager.;public void shutdown() {_		_		synchronized (lock)_		{_			if (!isShutDown) {_				_				isShutDown = true__				numNonAllocatedPages = 0___				_				for (Set<MemorySegment> segments : allocatedSegments.values()) {_					for (MemorySegment seg : segments) {_						seg.free()__					}_				}_				_				memoryPool.clear()__			}_		}_		_	};shuts,the,memory,manager,down,trying,to,release,all,the,memory,it,managed,depending,on,implementation,details,the,memory,does,not,necessarily,become,reclaimable,by,the,garbage,collector,because,there,might,still,be,references,to,allocated,segments,in,the,code,that,allocated,them,from,the,memory,manager;public,void,shutdown,synchronized,lock,if,is,shut,down,is,shut,down,true,num,non,allocated,pages,0,for,set,memory,segment,segments,allocated,segments,values,for,memory,segment,seg,segments,seg,free,memory,pool,clear
MemoryManager -> public void shutdown();1499282568;Shuts the memory manager down, trying to release all the memory it managed. Depending_on implementation details, the memory does not necessarily become reclaimable by the_garbage collector, because there might still be references to allocated segments in the_code that allocated them from the memory manager.;public void shutdown() {_		_		synchronized (lock) {_			if (!isShutDown) {_				_				isShutDown = true__				numNonAllocatedPages = 0___				_				for (Set<MemorySegment> segments : allocatedSegments.values()) {_					for (MemorySegment seg : segments) {_						seg.free()__					}_				}__				memoryPool.clear()__			}_		}_		_	};shuts,the,memory,manager,down,trying,to,release,all,the,memory,it,managed,depending,on,implementation,details,the,memory,does,not,necessarily,become,reclaimable,by,the,garbage,collector,because,there,might,still,be,references,to,allocated,segments,in,the,code,that,allocated,them,from,the,memory,manager;public,void,shutdown,synchronized,lock,if,is,shut,down,is,shut,down,true,num,non,allocated,pages,0,for,set,memory,segment,segments,allocated,segments,values,for,memory,segment,seg,segments,seg,free,memory,pool,clear
MemoryManager -> public void shutdown();1507315082;Shuts the memory manager down, trying to release all the memory it managed. Depending_on implementation details, the memory does not necessarily become reclaimable by the_garbage collector, because there might still be references to allocated segments in the_code that allocated them from the memory manager.;public void shutdown() {_		_		synchronized (lock) {_			if (!isShutDown) {_				_				isShutDown = true__				numNonAllocatedPages = 0___				_				for (Set<MemorySegment> segments : allocatedSegments.values()) {_					for (MemorySegment seg : segments) {_						seg.free()__					}_				}__				memoryPool.clear()__			}_		}_		_	};shuts,the,memory,manager,down,trying,to,release,all,the,memory,it,managed,depending,on,implementation,details,the,memory,does,not,necessarily,become,reclaimable,by,the,garbage,collector,because,there,might,still,be,references,to,allocated,segments,in,the,code,that,allocated,them,from,the,memory,manager;public,void,shutdown,synchronized,lock,if,is,shut,down,is,shut,down,true,num,non,allocated,pages,0,for,set,memory,segment,segments,allocated,segments,values,for,memory,segment,seg,segments,seg,free,memory,pool,clear
MemoryManager -> public void shutdown();1507316227;Shuts the memory manager down, trying to release all the memory it managed. Depending_on implementation details, the memory does not necessarily become reclaimable by the_garbage collector, because there might still be references to allocated segments in the_code that allocated them from the memory manager.;public void shutdown() {_		_		synchronized (lock) {_			if (!isShutDown) {_				_				isShutDown = true__				numNonAllocatedPages = 0___				_				for (Set<MemorySegment> segments : allocatedSegments.values()) {_					for (MemorySegment seg : segments) {_						seg.free()__					}_				}__				memoryPool.clear()__			}_		}_		_	};shuts,the,memory,manager,down,trying,to,release,all,the,memory,it,managed,depending,on,implementation,details,the,memory,does,not,necessarily,become,reclaimable,by,the,garbage,collector,because,there,might,still,be,references,to,allocated,segments,in,the,code,that,allocated,them,from,the,memory,manager;public,void,shutdown,synchronized,lock,if,is,shut,down,is,shut,down,true,num,non,allocated,pages,0,for,set,memory,segment,segments,allocated,segments,values,for,memory,segment,seg,segments,seg,free,memory,pool,clear
MemoryManager -> public void shutdown();1517317681;Shuts the memory manager down, trying to release all the memory it managed. Depending_on implementation details, the memory does not necessarily become reclaimable by the_garbage collector, because there might still be references to allocated segments in the_code that allocated them from the memory manager.;public void shutdown() {_		_		synchronized (lock) {_			if (!isShutDown) {_				_				isShutDown = true__				numNonAllocatedPages = 0___				_				for (Set<MemorySegment> segments : allocatedSegments.values()) {_					for (MemorySegment seg : segments) {_						seg.free()__					}_				}__				memoryPool.clear()__			}_		}_		_	};shuts,the,memory,manager,down,trying,to,release,all,the,memory,it,managed,depending,on,implementation,details,the,memory,does,not,necessarily,become,reclaimable,by,the,garbage,collector,because,there,might,still,be,references,to,allocated,segments,in,the,code,that,allocated,them,from,the,memory,manager;public,void,shutdown,synchronized,lock,if,is,shut,down,is,shut,down,true,num,non,allocated,pages,0,for,set,memory,segment,segments,allocated,segments,values,for,memory,segment,seg,segments,seg,free,memory,pool,clear
MemoryManager -> public void shutdown();1533306678;Shuts the memory manager down, trying to release all the memory it managed. Depending_on implementation details, the memory does not necessarily become reclaimable by the_garbage collector, because there might still be references to allocated segments in the_code that allocated them from the memory manager.;public void shutdown() {_		_		synchronized (lock) {_			if (!isShutDown) {_				_				isShutDown = true__				numNonAllocatedPages = 0___				_				for (Set<MemorySegment> segments : allocatedSegments.values()) {_					for (MemorySegment seg : segments) {_						seg.free()__					}_				}__				memoryPool.clear()__			}_		}_		_	};shuts,the,memory,manager,down,trying,to,release,all,the,memory,it,managed,depending,on,implementation,details,the,memory,does,not,necessarily,become,reclaimable,by,the,garbage,collector,because,there,might,still,be,references,to,allocated,segments,in,the,code,that,allocated,them,from,the,memory,manager;public,void,shutdown,synchronized,lock,if,is,shut,down,is,shut,down,true,num,non,allocated,pages,0,for,set,memory,segment,segments,allocated,segments,values,for,memory,segment,seg,segments,seg,free,memory,pool,clear
MemoryManager -> public void shutdown();1538389013;Shuts the memory manager down, trying to release all the memory it managed. Depending_on implementation details, the memory does not necessarily become reclaimable by the_garbage collector, because there might still be references to allocated segments in the_code that allocated them from the memory manager.;public void shutdown() {_		_		synchronized (lock) {_			if (!isShutDown) {_				_				isShutDown = true__				numNonAllocatedPages = 0___				_				for (Set<MemorySegment> segments : allocatedSegments.values()) {_					for (MemorySegment seg : segments) {_						seg.free()__					}_				}__				memoryPool.clear()__			}_		}_		_	};shuts,the,memory,manager,down,trying,to,release,all,the,memory,it,managed,depending,on,implementation,details,the,memory,does,not,necessarily,become,reclaimable,by,the,garbage,collector,because,there,might,still,be,references,to,allocated,segments,in,the,code,that,allocated,them,from,the,memory,manager;public,void,shutdown,synchronized,lock,if,is,shut,down,is,shut,down,true,num,non,allocated,pages,0,for,set,memory,segment,segments,allocated,segments,values,for,memory,segment,seg,segments,seg,free,memory,pool,clear
MemoryManager -> public void shutdown();1539345486;Shuts the memory manager down, trying to release all the memory it managed. Depending_on implementation details, the memory does not necessarily become reclaimable by the_garbage collector, because there might still be references to allocated segments in the_code that allocated them from the memory manager.;public void shutdown() {_		_		synchronized (lock) {_			if (!isShutDown) {_				_				isShutDown = true__				numNonAllocatedPages = 0___				_				for (Set<MemorySegment> segments : allocatedSegments.values()) {_					for (MemorySegment seg : segments) {_						seg.free()__					}_				}__				memoryPool.clear()__			}_		}_		_	};shuts,the,memory,manager,down,trying,to,release,all,the,memory,it,managed,depending,on,implementation,details,the,memory,does,not,necessarily,become,reclaimable,by,the,garbage,collector,because,there,might,still,be,references,to,allocated,segments,in,the,code,that,allocated,them,from,the,memory,manager;public,void,shutdown,synchronized,lock,if,is,shut,down,is,shut,down,true,num,non,allocated,pages,0,for,set,memory,segment,segments,allocated,segments,values,for,memory,segment,seg,segments,seg,free,memory,pool,clear
MemoryManager -> public void allocatePages(Object owner, List<MemorySegment> target, int numPages) 			throws MemoryAllocationException;1441738685;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param target The list into which to put the allocated memory pages._@param numPages The number of pages to allocate._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public void allocatePages(Object owner, List<MemorySegment> target, int numPages)_			throws MemoryAllocationException_	{_		_		if (owner == null) {_			throw new IllegalArgumentException("The memory owner must not be null.")__		}__		_		if (target instanceof ArrayList) {_			((ArrayList<MemorySegment>) target).ensureCapacity(numPages)__		}__		_		synchronized (lock)_		{_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			if (numPages > (memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)) {_				throw new MemoryAllocationException("Could not allocate " + numPages + " pages. Only " +_						(memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)_						+ " pages are remaining.")__			}__			Set<MemorySegment> segmentsForOwner = allocatedSegments.get(owner)__			if (segmentsForOwner == null) {_				segmentsForOwner = new HashSet<MemorySegment>(numPages)__				allocatedSegments.put(owner, segmentsForOwner)__			}__			if (isPreAllocated) {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.requestSegmentFromPool(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_			}_			else {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.allocateNewSegment(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_				numNonAllocatedPages -= numPages__			}_		}_		_	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,target,the,list,into,which,to,put,the,allocated,memory,pages,param,num,pages,the,number,of,pages,to,allocate,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,void,allocate,pages,object,owner,list,memory,segment,target,int,num,pages,throws,memory,allocation,exception,if,owner,null,throw,new,illegal,argument,exception,the,memory,owner,must,not,be,null,if,target,instanceof,array,list,array,list,memory,segment,target,ensure,capacity,num,pages,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,if,num,pages,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,throw,new,memory,allocation,exception,could,not,allocate,num,pages,pages,only,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,pages,are,remaining,set,memory,segment,segments,for,owner,allocated,segments,get,owner,if,segments,for,owner,null,segments,for,owner,new,hash,set,memory,segment,num,pages,allocated,segments,put,owner,segments,for,owner,if,is,pre,allocated,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,request,segment,from,pool,owner,target,add,segment,segments,for,owner,add,segment,else,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,allocate,new,segment,owner,target,add,segment,segments,for,owner,add,segment,num,non,allocated,pages,num,pages
MemoryManager -> public void allocatePages(Object owner, List<MemorySegment> target, int numPages) 			throws MemoryAllocationException;1460741894;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param target The list into which to put the allocated memory pages._@param numPages The number of pages to allocate._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public void allocatePages(Object owner, List<MemorySegment> target, int numPages)_			throws MemoryAllocationException_	{_		_		if (owner == null) {_			throw new IllegalArgumentException("The memory owner must not be null.")__		}__		_		if (target instanceof ArrayList) {_			((ArrayList<MemorySegment>) target).ensureCapacity(numPages)__		}__		_		synchronized (lock)_		{_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			if (numPages > (memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)) {_				throw new MemoryAllocationException("Could not allocate " + numPages + " pages. Only " +_						(memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)_						+ " pages are remaining.")__			}__			Set<MemorySegment> segmentsForOwner = allocatedSegments.get(owner)__			if (segmentsForOwner == null) {_				segmentsForOwner = new HashSet<MemorySegment>(numPages)__				allocatedSegments.put(owner, segmentsForOwner)__			}__			if (isPreAllocated) {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.requestSegmentFromPool(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_			}_			else {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.allocateNewSegment(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_				numNonAllocatedPages -= numPages__			}_		}_		_	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,target,the,list,into,which,to,put,the,allocated,memory,pages,param,num,pages,the,number,of,pages,to,allocate,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,void,allocate,pages,object,owner,list,memory,segment,target,int,num,pages,throws,memory,allocation,exception,if,owner,null,throw,new,illegal,argument,exception,the,memory,owner,must,not,be,null,if,target,instanceof,array,list,array,list,memory,segment,target,ensure,capacity,num,pages,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,if,num,pages,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,throw,new,memory,allocation,exception,could,not,allocate,num,pages,pages,only,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,pages,are,remaining,set,memory,segment,segments,for,owner,allocated,segments,get,owner,if,segments,for,owner,null,segments,for,owner,new,hash,set,memory,segment,num,pages,allocated,segments,put,owner,segments,for,owner,if,is,pre,allocated,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,request,segment,from,pool,owner,target,add,segment,segments,for,owner,add,segment,else,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,allocate,new,segment,owner,target,add,segment,segments,for,owner,add,segment,num,non,allocated,pages,num,pages
MemoryManager -> public void allocatePages(Object owner, List<MemorySegment> target, int numPages) 			throws MemoryAllocationException;1470405838;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param target The list into which to put the allocated memory pages._@param numPages The number of pages to allocate._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public void allocatePages(Object owner, List<MemorySegment> target, int numPages)_			throws MemoryAllocationException_	{_		_		if (owner == null) {_			throw new IllegalArgumentException("The memory owner must not be null.")__		}__		_		if (target instanceof ArrayList) {_			((ArrayList<MemorySegment>) target).ensureCapacity(numPages)__		}__		_		synchronized (lock)_		{_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			if (numPages > (memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)) {_				throw new MemoryAllocationException("Could not allocate " + numPages + " pages. Only " +_						(memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)_						+ " pages are remaining.")__			}__			Set<MemorySegment> segmentsForOwner = allocatedSegments.get(owner)__			if (segmentsForOwner == null) {_				segmentsForOwner = new HashSet<MemorySegment>(numPages)__				allocatedSegments.put(owner, segmentsForOwner)__			}__			if (isPreAllocated) {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.requestSegmentFromPool(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_			}_			else {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.allocateNewSegment(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_				numNonAllocatedPages -= numPages__			}_		}_		_	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,target,the,list,into,which,to,put,the,allocated,memory,pages,param,num,pages,the,number,of,pages,to,allocate,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,void,allocate,pages,object,owner,list,memory,segment,target,int,num,pages,throws,memory,allocation,exception,if,owner,null,throw,new,illegal,argument,exception,the,memory,owner,must,not,be,null,if,target,instanceof,array,list,array,list,memory,segment,target,ensure,capacity,num,pages,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,if,num,pages,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,throw,new,memory,allocation,exception,could,not,allocate,num,pages,pages,only,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,pages,are,remaining,set,memory,segment,segments,for,owner,allocated,segments,get,owner,if,segments,for,owner,null,segments,for,owner,new,hash,set,memory,segment,num,pages,allocated,segments,put,owner,segments,for,owner,if,is,pre,allocated,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,request,segment,from,pool,owner,target,add,segment,segments,for,owner,add,segment,else,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,allocate,new,segment,owner,target,add,segment,segments,for,owner,add,segment,num,non,allocated,pages,num,pages
MemoryManager -> public void allocatePages(Object owner, List<MemorySegment> target, int numPages) 			throws MemoryAllocationException;1499282568;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param target The list into which to put the allocated memory pages._@param numPages The number of pages to allocate._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public void allocatePages(Object owner, List<MemorySegment> target, int numPages)_			throws MemoryAllocationException {_		_		if (owner == null) {_			throw new IllegalArgumentException("The memory owner must not be null.")__		}__		_		if (target instanceof ArrayList) {_			((ArrayList<MemorySegment>) target).ensureCapacity(numPages)__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			if (numPages > (memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)) {_				throw new MemoryAllocationException("Could not allocate " + numPages + " pages. Only " +_						(memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)_						+ " pages are remaining.")__			}__			Set<MemorySegment> segmentsForOwner = allocatedSegments.get(owner)__			if (segmentsForOwner == null) {_				segmentsForOwner = new HashSet<MemorySegment>(numPages)__				allocatedSegments.put(owner, segmentsForOwner)__			}__			if (isPreAllocated) {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.requestSegmentFromPool(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_			}_			else {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.allocateNewSegment(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_				numNonAllocatedPages -= numPages__			}_		}_		_	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,target,the,list,into,which,to,put,the,allocated,memory,pages,param,num,pages,the,number,of,pages,to,allocate,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,void,allocate,pages,object,owner,list,memory,segment,target,int,num,pages,throws,memory,allocation,exception,if,owner,null,throw,new,illegal,argument,exception,the,memory,owner,must,not,be,null,if,target,instanceof,array,list,array,list,memory,segment,target,ensure,capacity,num,pages,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,if,num,pages,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,throw,new,memory,allocation,exception,could,not,allocate,num,pages,pages,only,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,pages,are,remaining,set,memory,segment,segments,for,owner,allocated,segments,get,owner,if,segments,for,owner,null,segments,for,owner,new,hash,set,memory,segment,num,pages,allocated,segments,put,owner,segments,for,owner,if,is,pre,allocated,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,request,segment,from,pool,owner,target,add,segment,segments,for,owner,add,segment,else,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,allocate,new,segment,owner,target,add,segment,segments,for,owner,add,segment,num,non,allocated,pages,num,pages
MemoryManager -> public void allocatePages(Object owner, List<MemorySegment> target, int numPages) 			throws MemoryAllocationException;1507315082;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param target The list into which to put the allocated memory pages._@param numPages The number of pages to allocate._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public void allocatePages(Object owner, List<MemorySegment> target, int numPages)_			throws MemoryAllocationException {_		_		if (owner == null) {_			throw new IllegalArgumentException("The memory owner must not be null.")__		}__		_		if (target instanceof ArrayList) {_			((ArrayList<MemorySegment>) target).ensureCapacity(numPages)__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			if (numPages > (memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)) {_				throw new MemoryAllocationException("Could not allocate " + numPages + " pages. Only " +_						(memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)_						+ " pages are remaining.")__			}__			Set<MemorySegment> segmentsForOwner = allocatedSegments.get(owner)__			if (segmentsForOwner == null) {_				segmentsForOwner = new HashSet<MemorySegment>(numPages)__				allocatedSegments.put(owner, segmentsForOwner)__			}__			if (isPreAllocated) {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.requestSegmentFromPool(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_			}_			else {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.allocateNewSegment(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_				numNonAllocatedPages -= numPages__			}_		}_		_	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,target,the,list,into,which,to,put,the,allocated,memory,pages,param,num,pages,the,number,of,pages,to,allocate,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,void,allocate,pages,object,owner,list,memory,segment,target,int,num,pages,throws,memory,allocation,exception,if,owner,null,throw,new,illegal,argument,exception,the,memory,owner,must,not,be,null,if,target,instanceof,array,list,array,list,memory,segment,target,ensure,capacity,num,pages,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,if,num,pages,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,throw,new,memory,allocation,exception,could,not,allocate,num,pages,pages,only,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,pages,are,remaining,set,memory,segment,segments,for,owner,allocated,segments,get,owner,if,segments,for,owner,null,segments,for,owner,new,hash,set,memory,segment,num,pages,allocated,segments,put,owner,segments,for,owner,if,is,pre,allocated,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,request,segment,from,pool,owner,target,add,segment,segments,for,owner,add,segment,else,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,allocate,new,segment,owner,target,add,segment,segments,for,owner,add,segment,num,non,allocated,pages,num,pages
MemoryManager -> public void allocatePages(Object owner, List<MemorySegment> target, int numPages) 			throws MemoryAllocationException;1507316227;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param target The list into which to put the allocated memory pages._@param numPages The number of pages to allocate._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public void allocatePages(Object owner, List<MemorySegment> target, int numPages)_			throws MemoryAllocationException {_		_		if (owner == null) {_			throw new IllegalArgumentException("The memory owner must not be null.")__		}__		_		if (target instanceof ArrayList) {_			((ArrayList<MemorySegment>) target).ensureCapacity(numPages)__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			if (numPages > (memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)) {_				throw new MemoryAllocationException("Could not allocate " + numPages + " pages. Only " +_						(memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)_						+ " pages are remaining.")__			}__			Set<MemorySegment> segmentsForOwner = allocatedSegments.get(owner)__			if (segmentsForOwner == null) {_				segmentsForOwner = new HashSet<MemorySegment>(numPages)__				allocatedSegments.put(owner, segmentsForOwner)__			}__			if (isPreAllocated) {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.requestSegmentFromPool(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_			}_			else {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.allocateNewSegment(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_				numNonAllocatedPages -= numPages__			}_		}_		_	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,target,the,list,into,which,to,put,the,allocated,memory,pages,param,num,pages,the,number,of,pages,to,allocate,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,void,allocate,pages,object,owner,list,memory,segment,target,int,num,pages,throws,memory,allocation,exception,if,owner,null,throw,new,illegal,argument,exception,the,memory,owner,must,not,be,null,if,target,instanceof,array,list,array,list,memory,segment,target,ensure,capacity,num,pages,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,if,num,pages,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,throw,new,memory,allocation,exception,could,not,allocate,num,pages,pages,only,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,pages,are,remaining,set,memory,segment,segments,for,owner,allocated,segments,get,owner,if,segments,for,owner,null,segments,for,owner,new,hash,set,memory,segment,num,pages,allocated,segments,put,owner,segments,for,owner,if,is,pre,allocated,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,request,segment,from,pool,owner,target,add,segment,segments,for,owner,add,segment,else,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,allocate,new,segment,owner,target,add,segment,segments,for,owner,add,segment,num,non,allocated,pages,num,pages
MemoryManager -> public void allocatePages(Object owner, List<MemorySegment> target, int numPages) 			throws MemoryAllocationException;1517317681;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param target The list into which to put the allocated memory pages._@param numPages The number of pages to allocate._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public void allocatePages(Object owner, List<MemorySegment> target, int numPages)_			throws MemoryAllocationException {_		_		if (owner == null) {_			throw new IllegalArgumentException("The memory owner must not be null.")__		}__		_		if (target instanceof ArrayList) {_			((ArrayList<MemorySegment>) target).ensureCapacity(numPages)__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			if (numPages > (memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)) {_				throw new MemoryAllocationException("Could not allocate " + numPages + " pages. Only " +_						(memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)_						+ " pages are remaining.")__			}__			Set<MemorySegment> segmentsForOwner = allocatedSegments.get(owner)__			if (segmentsForOwner == null) {_				segmentsForOwner = new HashSet<MemorySegment>(numPages)__				allocatedSegments.put(owner, segmentsForOwner)__			}__			if (isPreAllocated) {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.requestSegmentFromPool(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_			}_			else {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.allocateNewSegment(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_				numNonAllocatedPages -= numPages__			}_		}_		_	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,target,the,list,into,which,to,put,the,allocated,memory,pages,param,num,pages,the,number,of,pages,to,allocate,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,void,allocate,pages,object,owner,list,memory,segment,target,int,num,pages,throws,memory,allocation,exception,if,owner,null,throw,new,illegal,argument,exception,the,memory,owner,must,not,be,null,if,target,instanceof,array,list,array,list,memory,segment,target,ensure,capacity,num,pages,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,if,num,pages,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,throw,new,memory,allocation,exception,could,not,allocate,num,pages,pages,only,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,pages,are,remaining,set,memory,segment,segments,for,owner,allocated,segments,get,owner,if,segments,for,owner,null,segments,for,owner,new,hash,set,memory,segment,num,pages,allocated,segments,put,owner,segments,for,owner,if,is,pre,allocated,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,request,segment,from,pool,owner,target,add,segment,segments,for,owner,add,segment,else,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,allocate,new,segment,owner,target,add,segment,segments,for,owner,add,segment,num,non,allocated,pages,num,pages
MemoryManager -> public void allocatePages(Object owner, List<MemorySegment> target, int numPages) 			throws MemoryAllocationException;1533306678;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param target The list into which to put the allocated memory pages._@param numPages The number of pages to allocate._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public void allocatePages(Object owner, List<MemorySegment> target, int numPages)_			throws MemoryAllocationException {_		_		if (owner == null) {_			throw new IllegalArgumentException("The memory owner must not be null.")__		}__		_		if (target instanceof ArrayList) {_			((ArrayList<MemorySegment>) target).ensureCapacity(numPages)__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			if (numPages > (memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)) {_				throw new MemoryAllocationException("Could not allocate " + numPages + " pages. Only " +_						(memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)_						+ " pages are remaining.")__			}__			Set<MemorySegment> segmentsForOwner = allocatedSegments.get(owner)__			if (segmentsForOwner == null) {_				segmentsForOwner = new HashSet<MemorySegment>(numPages)__				allocatedSegments.put(owner, segmentsForOwner)__			}__			if (isPreAllocated) {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.requestSegmentFromPool(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_			}_			else {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.allocateNewSegment(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_				numNonAllocatedPages -= numPages__			}_		}_		_	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,target,the,list,into,which,to,put,the,allocated,memory,pages,param,num,pages,the,number,of,pages,to,allocate,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,void,allocate,pages,object,owner,list,memory,segment,target,int,num,pages,throws,memory,allocation,exception,if,owner,null,throw,new,illegal,argument,exception,the,memory,owner,must,not,be,null,if,target,instanceof,array,list,array,list,memory,segment,target,ensure,capacity,num,pages,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,if,num,pages,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,throw,new,memory,allocation,exception,could,not,allocate,num,pages,pages,only,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,pages,are,remaining,set,memory,segment,segments,for,owner,allocated,segments,get,owner,if,segments,for,owner,null,segments,for,owner,new,hash,set,memory,segment,num,pages,allocated,segments,put,owner,segments,for,owner,if,is,pre,allocated,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,request,segment,from,pool,owner,target,add,segment,segments,for,owner,add,segment,else,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,allocate,new,segment,owner,target,add,segment,segments,for,owner,add,segment,num,non,allocated,pages,num,pages
MemoryManager -> public void allocatePages(Object owner, List<MemorySegment> target, int numPages) 			throws MemoryAllocationException;1538389013;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param target The list into which to put the allocated memory pages._@param numPages The number of pages to allocate._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public void allocatePages(Object owner, List<MemorySegment> target, int numPages)_			throws MemoryAllocationException {_		_		if (owner == null) {_			throw new IllegalArgumentException("The memory owner must not be null.")__		}__		_		if (target instanceof ArrayList) {_			((ArrayList<MemorySegment>) target).ensureCapacity(numPages)__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			if (numPages > (memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)) {_				throw new MemoryAllocationException("Could not allocate " + numPages + " pages. Only " +_						(memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)_						+ " pages are remaining.")__			}__			Set<MemorySegment> segmentsForOwner = allocatedSegments.get(owner)__			if (segmentsForOwner == null) {_				segmentsForOwner = new HashSet<MemorySegment>(numPages)__				allocatedSegments.put(owner, segmentsForOwner)__			}__			if (isPreAllocated) {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.requestSegmentFromPool(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_			}_			else {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.allocateNewSegment(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_				numNonAllocatedPages -= numPages__			}_		}_		_	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,target,the,list,into,which,to,put,the,allocated,memory,pages,param,num,pages,the,number,of,pages,to,allocate,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,void,allocate,pages,object,owner,list,memory,segment,target,int,num,pages,throws,memory,allocation,exception,if,owner,null,throw,new,illegal,argument,exception,the,memory,owner,must,not,be,null,if,target,instanceof,array,list,array,list,memory,segment,target,ensure,capacity,num,pages,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,if,num,pages,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,throw,new,memory,allocation,exception,could,not,allocate,num,pages,pages,only,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,pages,are,remaining,set,memory,segment,segments,for,owner,allocated,segments,get,owner,if,segments,for,owner,null,segments,for,owner,new,hash,set,memory,segment,num,pages,allocated,segments,put,owner,segments,for,owner,if,is,pre,allocated,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,request,segment,from,pool,owner,target,add,segment,segments,for,owner,add,segment,else,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,allocate,new,segment,owner,target,add,segment,segments,for,owner,add,segment,num,non,allocated,pages,num,pages
MemoryManager -> public void allocatePages(Object owner, List<MemorySegment> target, int numPages) 			throws MemoryAllocationException;1539345486;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param target The list into which to put the allocated memory pages._@param numPages The number of pages to allocate._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public void allocatePages(Object owner, List<MemorySegment> target, int numPages)_			throws MemoryAllocationException {_		_		if (owner == null) {_			throw new IllegalArgumentException("The memory owner must not be null.")__		}__		_		if (target instanceof ArrayList) {_			((ArrayList<MemorySegment>) target).ensureCapacity(numPages)__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			if (numPages > (memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)) {_				throw new MemoryAllocationException("Could not allocate " + numPages + " pages. Only " +_						(memoryPool.getNumberOfAvailableMemorySegments() + numNonAllocatedPages)_						+ " pages are remaining.")__			}__			Set<MemorySegment> segmentsForOwner = allocatedSegments.get(owner)__			if (segmentsForOwner == null) {_				segmentsForOwner = new HashSet<MemorySegment>(numPages)__				allocatedSegments.put(owner, segmentsForOwner)__			}__			if (isPreAllocated) {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.requestSegmentFromPool(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_			}_			else {_				for (int i = numPages_ i > 0_ i--) {_					MemorySegment segment = memoryPool.allocateNewSegment(owner)__					target.add(segment)__					segmentsForOwner.add(segment)__				}_				numNonAllocatedPages -= numPages__			}_		}_		_	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,target,the,list,into,which,to,put,the,allocated,memory,pages,param,num,pages,the,number,of,pages,to,allocate,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,void,allocate,pages,object,owner,list,memory,segment,target,int,num,pages,throws,memory,allocation,exception,if,owner,null,throw,new,illegal,argument,exception,the,memory,owner,must,not,be,null,if,target,instanceof,array,list,array,list,memory,segment,target,ensure,capacity,num,pages,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,if,num,pages,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,throw,new,memory,allocation,exception,could,not,allocate,num,pages,pages,only,memory,pool,get,number,of,available,memory,segments,num,non,allocated,pages,pages,are,remaining,set,memory,segment,segments,for,owner,allocated,segments,get,owner,if,segments,for,owner,null,segments,for,owner,new,hash,set,memory,segment,num,pages,allocated,segments,put,owner,segments,for,owner,if,is,pre,allocated,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,request,segment,from,pool,owner,target,add,segment,segments,for,owner,add,segment,else,for,int,i,num,pages,i,0,i,memory,segment,segment,memory,pool,allocate,new,segment,owner,target,add,segment,segments,for,owner,add,segment,num,non,allocated,pages,num,pages
MemoryManager -> public long computeMemorySize(double fraction);1441738685;Computes the memory size of the fraction per slot.__@param fraction The fraction of the memory of the task slot._@return The number of pages corresponding to the memory fraction.;public long computeMemorySize(double fraction) {_		return pageSize * computeNumberOfPages(fraction)__	};computes,the,memory,size,of,the,fraction,per,slot,param,fraction,the,fraction,of,the,memory,of,the,task,slot,return,the,number,of,pages,corresponding,to,the,memory,fraction;public,long,compute,memory,size,double,fraction,return,page,size,compute,number,of,pages,fraction
MemoryManager -> public long computeMemorySize(double fraction);1460741894;Computes the memory size of the fraction per slot.__@param fraction The fraction of the memory of the task slot._@return The number of pages corresponding to the memory fraction.;public long computeMemorySize(double fraction) {_		return pageSize * computeNumberOfPages(fraction)__	};computes,the,memory,size,of,the,fraction,per,slot,param,fraction,the,fraction,of,the,memory,of,the,task,slot,return,the,number,of,pages,corresponding,to,the,memory,fraction;public,long,compute,memory,size,double,fraction,return,page,size,compute,number,of,pages,fraction
MemoryManager -> public long computeMemorySize(double fraction);1470405838;Computes the memory size of the fraction per slot.__@param fraction The fraction of the memory of the task slot._@return The number of pages corresponding to the memory fraction.;public long computeMemorySize(double fraction) {_		return pageSize * computeNumberOfPages(fraction)__	};computes,the,memory,size,of,the,fraction,per,slot,param,fraction,the,fraction,of,the,memory,of,the,task,slot,return,the,number,of,pages,corresponding,to,the,memory,fraction;public,long,compute,memory,size,double,fraction,return,page,size,compute,number,of,pages,fraction
MemoryManager -> public long computeMemorySize(double fraction);1499282568;Computes the memory size of the fraction per slot.__@param fraction The fraction of the memory of the task slot._@return The number of pages corresponding to the memory fraction.;public long computeMemorySize(double fraction) {_		return pageSize * computeNumberOfPages(fraction)__	};computes,the,memory,size,of,the,fraction,per,slot,param,fraction,the,fraction,of,the,memory,of,the,task,slot,return,the,number,of,pages,corresponding,to,the,memory,fraction;public,long,compute,memory,size,double,fraction,return,page,size,compute,number,of,pages,fraction
MemoryManager -> public long computeMemorySize(double fraction);1507315082;Computes the memory size of the fraction per slot.__@param fraction The fraction of the memory of the task slot._@return The number of pages corresponding to the memory fraction.;public long computeMemorySize(double fraction) {_		return pageSize * computeNumberOfPages(fraction)__	};computes,the,memory,size,of,the,fraction,per,slot,param,fraction,the,fraction,of,the,memory,of,the,task,slot,return,the,number,of,pages,corresponding,to,the,memory,fraction;public,long,compute,memory,size,double,fraction,return,page,size,compute,number,of,pages,fraction
MemoryManager -> public long computeMemorySize(double fraction);1507316227;Computes the memory size of the fraction per slot.__@param fraction The fraction of the memory of the task slot._@return The number of pages corresponding to the memory fraction.;public long computeMemorySize(double fraction) {_		return pageSize * computeNumberOfPages(fraction)__	};computes,the,memory,size,of,the,fraction,per,slot,param,fraction,the,fraction,of,the,memory,of,the,task,slot,return,the,number,of,pages,corresponding,to,the,memory,fraction;public,long,compute,memory,size,double,fraction,return,page,size,compute,number,of,pages,fraction
MemoryManager -> public long computeMemorySize(double fraction);1517317681;Computes the memory size of the fraction per slot.__@param fraction The fraction of the memory of the task slot._@return The number of pages corresponding to the memory fraction.;public long computeMemorySize(double fraction) {_		return pageSize * (long) computeNumberOfPages(fraction)__	};computes,the,memory,size,of,the,fraction,per,slot,param,fraction,the,fraction,of,the,memory,of,the,task,slot,return,the,number,of,pages,corresponding,to,the,memory,fraction;public,long,compute,memory,size,double,fraction,return,page,size,long,compute,number,of,pages,fraction
MemoryManager -> public long computeMemorySize(double fraction);1533306678;Computes the memory size of the fraction per slot.__@param fraction The fraction of the memory of the task slot._@return The number of pages corresponding to the memory fraction.;public long computeMemorySize(double fraction) {_		return pageSize * (long) computeNumberOfPages(fraction)__	};computes,the,memory,size,of,the,fraction,per,slot,param,fraction,the,fraction,of,the,memory,of,the,task,slot,return,the,number,of,pages,corresponding,to,the,memory,fraction;public,long,compute,memory,size,double,fraction,return,page,size,long,compute,number,of,pages,fraction
MemoryManager -> public long computeMemorySize(double fraction);1538389013;Computes the memory size of the fraction per slot.__@param fraction The fraction of the memory of the task slot._@return The number of pages corresponding to the memory fraction.;public long computeMemorySize(double fraction) {_		return pageSize * (long) computeNumberOfPages(fraction)__	};computes,the,memory,size,of,the,fraction,per,slot,param,fraction,the,fraction,of,the,memory,of,the,task,slot,return,the,number,of,pages,corresponding,to,the,memory,fraction;public,long,compute,memory,size,double,fraction,return,page,size,long,compute,number,of,pages,fraction
MemoryManager -> public long computeMemorySize(double fraction);1539345486;Computes the memory size of the fraction per slot.__@param fraction The fraction of the memory of the task slot._@return The number of pages corresponding to the memory fraction.;public long computeMemorySize(double fraction) {_		return pageSize * (long) computeNumberOfPages(fraction)__	};computes,the,memory,size,of,the,fraction,per,slot,param,fraction,the,fraction,of,the,memory,of,the,task,slot,return,the,number,of,pages,corresponding,to,the,memory,fraction;public,long,compute,memory,size,double,fraction,return,page,size,long,compute,number,of,pages,fraction
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots, int pageSize, 							MemoryType memoryType, boolean preAllocateMemory);1441738685;Creates a memory manager with the given capacity and given page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager._@param pageSize The size of the pages handed out by the memory manager._@param memoryType The type of memory (heap / off-heap) that the memory manager should allocate._@param preAllocateMemory True, if the memory manager should immediately allocate all memory, false_if it should allocate and release the memory as needed.;public MemoryManager(long memorySize, int numberOfSlots, int pageSize,_							MemoryType memoryType, boolean preAllocateMemory) {_		_		if (memoryType == null) {_			throw new NullPointerException()__		}_		if (memorySize <= 0) {_			throw new IllegalArgumentException("Size of total memory must be positive.")__		}_		if (pageSize < MIN_PAGE_SIZE) {_			throw new IllegalArgumentException("The page size must be at least " + MIN_PAGE_SIZE + " bytes.")__		}_		if (!MathUtils.isPowerOf2(pageSize)) {_			throw new IllegalArgumentException("The given page size is not a power of two.")__		}__		this.memoryType = memoryType__		this.memorySize = memorySize__		this.numberOfSlots = numberOfSlots___		_		this.pageSize = pageSize__		this.roundingMask = ~((long) (pageSize - 1))___		final long numPagesLong = memorySize / pageSize__		if (numPagesLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + memorySize_					+ ") corresponds to more than MAX_INT pages.")__		}_		this.totalNumPages = (int) numPagesLong__		if (this.totalNumPages < 1) {_			throw new IllegalArgumentException("The given amount of memory amounted to less than one page.")__		}__		this.allocatedSegments = new HashMap<Object, Set<MemorySegment>>()__		this.isPreAllocated = preAllocateMemory___		this.numNonAllocatedPages = preAllocateMemory ? 0 : this.totalNumPages__		final int memToAllocate = preAllocateMemory ? this.totalNumPages : 0__		_		switch (memoryType) {_			case HEAP:_				this.memoryPool = new HeapMemoryPool(memToAllocate, pageSize)__				break__			case OFF_HEAP:_				this.memoryPool = new HybridOffHeapMemoryPool(memToAllocate, pageSize)__				break__			default:_				throw new IllegalArgumentException("unrecognized memory type: " + memoryType)__		}_	};creates,a,memory,manager,with,the,given,capacity,and,given,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager,param,page,size,the,size,of,the,pages,handed,out,by,the,memory,manager,param,memory,type,the,type,of,memory,heap,off,heap,that,the,memory,manager,should,allocate,param,pre,allocate,memory,true,if,the,memory,manager,should,immediately,allocate,all,memory,false,if,it,should,allocate,and,release,the,memory,as,needed;public,memory,manager,long,memory,size,int,number,of,slots,int,page,size,memory,type,memory,type,boolean,pre,allocate,memory,if,memory,type,null,throw,new,null,pointer,exception,if,memory,size,0,throw,new,illegal,argument,exception,size,of,total,memory,must,be,positive,if,page,size,throw,new,illegal,argument,exception,the,page,size,must,be,at,least,bytes,if,math,utils,is,power,of2,page,size,throw,new,illegal,argument,exception,the,given,page,size,is,not,a,power,of,two,this,memory,type,memory,type,this,memory,size,memory,size,this,number,of,slots,number,of,slots,this,page,size,page,size,this,rounding,mask,long,page,size,1,final,long,num,pages,long,memory,size,page,size,if,num,pages,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,memory,size,corresponds,to,more,than,pages,this,total,num,pages,int,num,pages,long,if,this,total,num,pages,1,throw,new,illegal,argument,exception,the,given,amount,of,memory,amounted,to,less,than,one,page,this,allocated,segments,new,hash,map,object,set,memory,segment,this,is,pre,allocated,pre,allocate,memory,this,num,non,allocated,pages,pre,allocate,memory,0,this,total,num,pages,final,int,mem,to,allocate,pre,allocate,memory,this,total,num,pages,0,switch,memory,type,case,heap,this,memory,pool,new,heap,memory,pool,mem,to,allocate,page,size,break,case,this,memory,pool,new,hybrid,off,heap,memory,pool,mem,to,allocate,page,size,break,default,throw,new,illegal,argument,exception,unrecognized,memory,type,memory,type
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots, int pageSize, 							MemoryType memoryType, boolean preAllocateMemory);1460741894;Creates a memory manager with the given capacity and given page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager._@param pageSize The size of the pages handed out by the memory manager._@param memoryType The type of memory (heap / off-heap) that the memory manager should allocate._@param preAllocateMemory True, if the memory manager should immediately allocate all memory, false_if it should allocate and release the memory as needed.;public MemoryManager(long memorySize, int numberOfSlots, int pageSize,_							MemoryType memoryType, boolean preAllocateMemory) {_		_		if (memoryType == null) {_			throw new NullPointerException()__		}_		if (memorySize <= 0) {_			throw new IllegalArgumentException("Size of total memory must be positive.")__		}_		if (pageSize < MIN_PAGE_SIZE) {_			throw new IllegalArgumentException("The page size must be at least " + MIN_PAGE_SIZE + " bytes.")__		}_		if (!MathUtils.isPowerOf2(pageSize)) {_			throw new IllegalArgumentException("The given page size is not a power of two.")__		}__		this.memoryType = memoryType__		this.memorySize = memorySize__		this.numberOfSlots = numberOfSlots___		_		this.pageSize = pageSize__		this.roundingMask = ~((long) (pageSize - 1))___		final long numPagesLong = memorySize / pageSize__		if (numPagesLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + memorySize_					+ ") corresponds to more than MAX_INT pages.")__		}_		this.totalNumPages = (int) numPagesLong__		if (this.totalNumPages < 1) {_			throw new IllegalArgumentException("The given amount of memory amounted to less than one page.")__		}__		this.allocatedSegments = new HashMap<Object, Set<MemorySegment>>()__		this.isPreAllocated = preAllocateMemory___		this.numNonAllocatedPages = preAllocateMemory ? 0 : this.totalNumPages__		final int memToAllocate = preAllocateMemory ? this.totalNumPages : 0__		_		switch (memoryType) {_			case HEAP:_				this.memoryPool = new HeapMemoryPool(memToAllocate, pageSize)__				break__			case OFF_HEAP:_				this.memoryPool = new HybridOffHeapMemoryPool(memToAllocate, pageSize)__				break__			default:_				throw new IllegalArgumentException("unrecognized memory type: " + memoryType)__		}_	};creates,a,memory,manager,with,the,given,capacity,and,given,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager,param,page,size,the,size,of,the,pages,handed,out,by,the,memory,manager,param,memory,type,the,type,of,memory,heap,off,heap,that,the,memory,manager,should,allocate,param,pre,allocate,memory,true,if,the,memory,manager,should,immediately,allocate,all,memory,false,if,it,should,allocate,and,release,the,memory,as,needed;public,memory,manager,long,memory,size,int,number,of,slots,int,page,size,memory,type,memory,type,boolean,pre,allocate,memory,if,memory,type,null,throw,new,null,pointer,exception,if,memory,size,0,throw,new,illegal,argument,exception,size,of,total,memory,must,be,positive,if,page,size,throw,new,illegal,argument,exception,the,page,size,must,be,at,least,bytes,if,math,utils,is,power,of2,page,size,throw,new,illegal,argument,exception,the,given,page,size,is,not,a,power,of,two,this,memory,type,memory,type,this,memory,size,memory,size,this,number,of,slots,number,of,slots,this,page,size,page,size,this,rounding,mask,long,page,size,1,final,long,num,pages,long,memory,size,page,size,if,num,pages,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,memory,size,corresponds,to,more,than,pages,this,total,num,pages,int,num,pages,long,if,this,total,num,pages,1,throw,new,illegal,argument,exception,the,given,amount,of,memory,amounted,to,less,than,one,page,this,allocated,segments,new,hash,map,object,set,memory,segment,this,is,pre,allocated,pre,allocate,memory,this,num,non,allocated,pages,pre,allocate,memory,0,this,total,num,pages,final,int,mem,to,allocate,pre,allocate,memory,this,total,num,pages,0,switch,memory,type,case,heap,this,memory,pool,new,heap,memory,pool,mem,to,allocate,page,size,break,case,this,memory,pool,new,hybrid,off,heap,memory,pool,mem,to,allocate,page,size,break,default,throw,new,illegal,argument,exception,unrecognized,memory,type,memory,type
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots, int pageSize, 							MemoryType memoryType, boolean preAllocateMemory);1470405838;Creates a memory manager with the given capacity and given page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager._@param pageSize The size of the pages handed out by the memory manager._@param memoryType The type of memory (heap / off-heap) that the memory manager should allocate._@param preAllocateMemory True, if the memory manager should immediately allocate all memory, false_if it should allocate and release the memory as needed.;public MemoryManager(long memorySize, int numberOfSlots, int pageSize,_							MemoryType memoryType, boolean preAllocateMemory) {_		_		if (memoryType == null) {_			throw new NullPointerException()__		}_		if (memorySize <= 0) {_			throw new IllegalArgumentException("Size of total memory must be positive.")__		}_		if (pageSize < MIN_PAGE_SIZE) {_			throw new IllegalArgumentException("The page size must be at least " + MIN_PAGE_SIZE + " bytes.")__		}_		if (!MathUtils.isPowerOf2(pageSize)) {_			throw new IllegalArgumentException("The given page size is not a power of two.")__		}__		this.memoryType = memoryType__		this.memorySize = memorySize__		this.numberOfSlots = numberOfSlots___		_		this.pageSize = pageSize__		this.roundingMask = ~((long) (pageSize - 1))___		final long numPagesLong = memorySize / pageSize__		if (numPagesLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + memorySize_					+ ") corresponds to more than MAX_INT pages.")__		}_		this.totalNumPages = (int) numPagesLong__		if (this.totalNumPages < 1) {_			throw new IllegalArgumentException("The given amount of memory amounted to less than one page.")__		}__		this.allocatedSegments = new HashMap<Object, Set<MemorySegment>>()__		this.isPreAllocated = preAllocateMemory___		this.numNonAllocatedPages = preAllocateMemory ? 0 : this.totalNumPages__		final int memToAllocate = preAllocateMemory ? this.totalNumPages : 0__		_		switch (memoryType) {_			case HEAP:_				this.memoryPool = new HeapMemoryPool(memToAllocate, pageSize)__				break__			case OFF_HEAP:_				if(!preAllocateMemory) {_					LOG.warn("It is advisable to set 'taskmanager.memory.preallocate' to true when" +_						" the memory type 'taskmanager.memory.off-heap' is set to true.")__				}_				this.memoryPool = new HybridOffHeapMemoryPool(memToAllocate, pageSize)__				break__			default:_				throw new IllegalArgumentException("unrecognized memory type: " + memoryType)__		}_	};creates,a,memory,manager,with,the,given,capacity,and,given,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager,param,page,size,the,size,of,the,pages,handed,out,by,the,memory,manager,param,memory,type,the,type,of,memory,heap,off,heap,that,the,memory,manager,should,allocate,param,pre,allocate,memory,true,if,the,memory,manager,should,immediately,allocate,all,memory,false,if,it,should,allocate,and,release,the,memory,as,needed;public,memory,manager,long,memory,size,int,number,of,slots,int,page,size,memory,type,memory,type,boolean,pre,allocate,memory,if,memory,type,null,throw,new,null,pointer,exception,if,memory,size,0,throw,new,illegal,argument,exception,size,of,total,memory,must,be,positive,if,page,size,throw,new,illegal,argument,exception,the,page,size,must,be,at,least,bytes,if,math,utils,is,power,of2,page,size,throw,new,illegal,argument,exception,the,given,page,size,is,not,a,power,of,two,this,memory,type,memory,type,this,memory,size,memory,size,this,number,of,slots,number,of,slots,this,page,size,page,size,this,rounding,mask,long,page,size,1,final,long,num,pages,long,memory,size,page,size,if,num,pages,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,memory,size,corresponds,to,more,than,pages,this,total,num,pages,int,num,pages,long,if,this,total,num,pages,1,throw,new,illegal,argument,exception,the,given,amount,of,memory,amounted,to,less,than,one,page,this,allocated,segments,new,hash,map,object,set,memory,segment,this,is,pre,allocated,pre,allocate,memory,this,num,non,allocated,pages,pre,allocate,memory,0,this,total,num,pages,final,int,mem,to,allocate,pre,allocate,memory,this,total,num,pages,0,switch,memory,type,case,heap,this,memory,pool,new,heap,memory,pool,mem,to,allocate,page,size,break,case,if,pre,allocate,memory,log,warn,it,is,advisable,to,set,taskmanager,memory,preallocate,to,true,when,the,memory,type,taskmanager,memory,off,heap,is,set,to,true,this,memory,pool,new,hybrid,off,heap,memory,pool,mem,to,allocate,page,size,break,default,throw,new,illegal,argument,exception,unrecognized,memory,type,memory,type
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots, int pageSize, 							MemoryType memoryType, boolean preAllocateMemory);1499282568;Creates a memory manager with the given capacity and given page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager._@param pageSize The size of the pages handed out by the memory manager._@param memoryType The type of memory (heap / off-heap) that the memory manager should allocate._@param preAllocateMemory True, if the memory manager should immediately allocate all memory, false_if it should allocate and release the memory as needed.;public MemoryManager(long memorySize, int numberOfSlots, int pageSize,_							MemoryType memoryType, boolean preAllocateMemory) {_		_		if (memoryType == null) {_			throw new NullPointerException()__		}_		if (memorySize <= 0) {_			throw new IllegalArgumentException("Size of total memory must be positive.")__		}_		if (pageSize < MIN_PAGE_SIZE) {_			throw new IllegalArgumentException("The page size must be at least " + MIN_PAGE_SIZE + " bytes.")__		}_		if (!MathUtils.isPowerOf2(pageSize)) {_			throw new IllegalArgumentException("The given page size is not a power of two.")__		}__		this.memoryType = memoryType__		this.memorySize = memorySize__		this.numberOfSlots = numberOfSlots___		_		this.pageSize = pageSize__		this.roundingMask = ~((long) (pageSize - 1))___		final long numPagesLong = memorySize / pageSize__		if (numPagesLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + memorySize_					+ ") corresponds to more than MAX_INT pages.")__		}_		this.totalNumPages = (int) numPagesLong__		if (this.totalNumPages < 1) {_			throw new IllegalArgumentException("The given amount of memory amounted to less than one page.")__		}__		this.allocatedSegments = new HashMap<Object, Set<MemorySegment>>()__		this.isPreAllocated = preAllocateMemory___		this.numNonAllocatedPages = preAllocateMemory ? 0 : this.totalNumPages__		final int memToAllocate = preAllocateMemory ? this.totalNumPages : 0___		switch (memoryType) {_			case HEAP:_				this.memoryPool = new HeapMemoryPool(memToAllocate, pageSize)__				break__			case OFF_HEAP:_				if (!preAllocateMemory) {_					LOG.warn("It is advisable to set 'taskmanager.memory.preallocate' to true when" +_						" the memory type 'taskmanager.memory.off-heap' is set to true.")__				}_				this.memoryPool = new HybridOffHeapMemoryPool(memToAllocate, pageSize)__				break__			default:_				throw new IllegalArgumentException("unrecognized memory type: " + memoryType)__		}_	};creates,a,memory,manager,with,the,given,capacity,and,given,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager,param,page,size,the,size,of,the,pages,handed,out,by,the,memory,manager,param,memory,type,the,type,of,memory,heap,off,heap,that,the,memory,manager,should,allocate,param,pre,allocate,memory,true,if,the,memory,manager,should,immediately,allocate,all,memory,false,if,it,should,allocate,and,release,the,memory,as,needed;public,memory,manager,long,memory,size,int,number,of,slots,int,page,size,memory,type,memory,type,boolean,pre,allocate,memory,if,memory,type,null,throw,new,null,pointer,exception,if,memory,size,0,throw,new,illegal,argument,exception,size,of,total,memory,must,be,positive,if,page,size,throw,new,illegal,argument,exception,the,page,size,must,be,at,least,bytes,if,math,utils,is,power,of2,page,size,throw,new,illegal,argument,exception,the,given,page,size,is,not,a,power,of,two,this,memory,type,memory,type,this,memory,size,memory,size,this,number,of,slots,number,of,slots,this,page,size,page,size,this,rounding,mask,long,page,size,1,final,long,num,pages,long,memory,size,page,size,if,num,pages,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,memory,size,corresponds,to,more,than,pages,this,total,num,pages,int,num,pages,long,if,this,total,num,pages,1,throw,new,illegal,argument,exception,the,given,amount,of,memory,amounted,to,less,than,one,page,this,allocated,segments,new,hash,map,object,set,memory,segment,this,is,pre,allocated,pre,allocate,memory,this,num,non,allocated,pages,pre,allocate,memory,0,this,total,num,pages,final,int,mem,to,allocate,pre,allocate,memory,this,total,num,pages,0,switch,memory,type,case,heap,this,memory,pool,new,heap,memory,pool,mem,to,allocate,page,size,break,case,if,pre,allocate,memory,log,warn,it,is,advisable,to,set,taskmanager,memory,preallocate,to,true,when,the,memory,type,taskmanager,memory,off,heap,is,set,to,true,this,memory,pool,new,hybrid,off,heap,memory,pool,mem,to,allocate,page,size,break,default,throw,new,illegal,argument,exception,unrecognized,memory,type,memory,type
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots, int pageSize, 							MemoryType memoryType, boolean preAllocateMemory);1507315082;Creates a memory manager with the given capacity and given page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager._@param pageSize The size of the pages handed out by the memory manager._@param memoryType The type of memory (heap / off-heap) that the memory manager should allocate._@param preAllocateMemory True, if the memory manager should immediately allocate all memory, false_if it should allocate and release the memory as needed.;public MemoryManager(long memorySize, int numberOfSlots, int pageSize,_							MemoryType memoryType, boolean preAllocateMemory) {_		_		if (memoryType == null) {_			throw new NullPointerException()__		}_		if (memorySize <= 0) {_			throw new IllegalArgumentException("Size of total memory must be positive.")__		}_		if (pageSize < MIN_PAGE_SIZE) {_			throw new IllegalArgumentException("The page size must be at least " + MIN_PAGE_SIZE + " bytes.")__		}_		if (!MathUtils.isPowerOf2(pageSize)) {_			throw new IllegalArgumentException("The given page size is not a power of two.")__		}__		this.memoryType = memoryType__		this.memorySize = memorySize__		this.numberOfSlots = numberOfSlots___		_		this.pageSize = pageSize__		this.roundingMask = ~((long) (pageSize - 1))___		final long numPagesLong = memorySize / pageSize__		if (numPagesLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + memorySize_					+ ") corresponds to more than MAX_INT pages.")__		}_		this.totalNumPages = (int) numPagesLong__		if (this.totalNumPages < 1) {_			throw new IllegalArgumentException("The given amount of memory amounted to less than one page.")__		}__		this.allocatedSegments = new HashMap<Object, Set<MemorySegment>>()__		this.isPreAllocated = preAllocateMemory___		this.numNonAllocatedPages = preAllocateMemory ? 0 : this.totalNumPages__		final int memToAllocate = preAllocateMemory ? this.totalNumPages : 0___		switch (memoryType) {_			case HEAP:_				this.memoryPool = new HeapMemoryPool(memToAllocate, pageSize)__				break__			case OFF_HEAP:_				if (!preAllocateMemory) {_					LOG.warn("It is advisable to set 'taskmanager.memory.preallocate' to true when" +_						" the memory type 'taskmanager.memory.off-heap' is set to true.")__				}_				this.memoryPool = new HybridOffHeapMemoryPool(memToAllocate, pageSize)__				break__			default:_				throw new IllegalArgumentException("unrecognized memory type: " + memoryType)__		}_	};creates,a,memory,manager,with,the,given,capacity,and,given,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager,param,page,size,the,size,of,the,pages,handed,out,by,the,memory,manager,param,memory,type,the,type,of,memory,heap,off,heap,that,the,memory,manager,should,allocate,param,pre,allocate,memory,true,if,the,memory,manager,should,immediately,allocate,all,memory,false,if,it,should,allocate,and,release,the,memory,as,needed;public,memory,manager,long,memory,size,int,number,of,slots,int,page,size,memory,type,memory,type,boolean,pre,allocate,memory,if,memory,type,null,throw,new,null,pointer,exception,if,memory,size,0,throw,new,illegal,argument,exception,size,of,total,memory,must,be,positive,if,page,size,throw,new,illegal,argument,exception,the,page,size,must,be,at,least,bytes,if,math,utils,is,power,of2,page,size,throw,new,illegal,argument,exception,the,given,page,size,is,not,a,power,of,two,this,memory,type,memory,type,this,memory,size,memory,size,this,number,of,slots,number,of,slots,this,page,size,page,size,this,rounding,mask,long,page,size,1,final,long,num,pages,long,memory,size,page,size,if,num,pages,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,memory,size,corresponds,to,more,than,pages,this,total,num,pages,int,num,pages,long,if,this,total,num,pages,1,throw,new,illegal,argument,exception,the,given,amount,of,memory,amounted,to,less,than,one,page,this,allocated,segments,new,hash,map,object,set,memory,segment,this,is,pre,allocated,pre,allocate,memory,this,num,non,allocated,pages,pre,allocate,memory,0,this,total,num,pages,final,int,mem,to,allocate,pre,allocate,memory,this,total,num,pages,0,switch,memory,type,case,heap,this,memory,pool,new,heap,memory,pool,mem,to,allocate,page,size,break,case,if,pre,allocate,memory,log,warn,it,is,advisable,to,set,taskmanager,memory,preallocate,to,true,when,the,memory,type,taskmanager,memory,off,heap,is,set,to,true,this,memory,pool,new,hybrid,off,heap,memory,pool,mem,to,allocate,page,size,break,default,throw,new,illegal,argument,exception,unrecognized,memory,type,memory,type
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots, int pageSize, 							MemoryType memoryType, boolean preAllocateMemory);1507316227;Creates a memory manager with the given capacity and given page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager._@param pageSize The size of the pages handed out by the memory manager._@param memoryType The type of memory (heap / off-heap) that the memory manager should allocate._@param preAllocateMemory True, if the memory manager should immediately allocate all memory, false_if it should allocate and release the memory as needed.;public MemoryManager(long memorySize, int numberOfSlots, int pageSize,_							MemoryType memoryType, boolean preAllocateMemory) {_		_		if (memoryType == null) {_			throw new NullPointerException()__		}_		if (memorySize <= 0) {_			throw new IllegalArgumentException("Size of total memory must be positive.")__		}_		if (pageSize < MIN_PAGE_SIZE) {_			throw new IllegalArgumentException("The page size must be at least " + MIN_PAGE_SIZE + " bytes.")__		}_		if (!MathUtils.isPowerOf2(pageSize)) {_			throw new IllegalArgumentException("The given page size is not a power of two.")__		}__		this.memoryType = memoryType__		this.memorySize = memorySize__		this.numberOfSlots = numberOfSlots___		_		this.pageSize = pageSize__		this.roundingMask = ~((long) (pageSize - 1))___		final long numPagesLong = memorySize / pageSize__		if (numPagesLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + memorySize_					+ ") corresponds to more than MAX_INT pages.")__		}_		this.totalNumPages = (int) numPagesLong__		if (this.totalNumPages < 1) {_			throw new IllegalArgumentException("The given amount of memory amounted to less than one page.")__		}__		this.allocatedSegments = new HashMap<Object, Set<MemorySegment>>()__		this.isPreAllocated = preAllocateMemory___		this.numNonAllocatedPages = preAllocateMemory ? 0 : this.totalNumPages__		final int memToAllocate = preAllocateMemory ? this.totalNumPages : 0___		switch (memoryType) {_			case HEAP:_				this.memoryPool = new HybridHeapMemoryPool(memToAllocate, pageSize)__				break__			case OFF_HEAP:_				if (!preAllocateMemory) {_					LOG.warn("It is advisable to set 'taskmanager.memory.preallocate' to true when" +_						" the memory type 'taskmanager.memory.off-heap' is set to true.")__				}_				this.memoryPool = new HybridOffHeapMemoryPool(memToAllocate, pageSize)__				break__			default:_				throw new IllegalArgumentException("unrecognized memory type: " + memoryType)__		}_	};creates,a,memory,manager,with,the,given,capacity,and,given,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager,param,page,size,the,size,of,the,pages,handed,out,by,the,memory,manager,param,memory,type,the,type,of,memory,heap,off,heap,that,the,memory,manager,should,allocate,param,pre,allocate,memory,true,if,the,memory,manager,should,immediately,allocate,all,memory,false,if,it,should,allocate,and,release,the,memory,as,needed;public,memory,manager,long,memory,size,int,number,of,slots,int,page,size,memory,type,memory,type,boolean,pre,allocate,memory,if,memory,type,null,throw,new,null,pointer,exception,if,memory,size,0,throw,new,illegal,argument,exception,size,of,total,memory,must,be,positive,if,page,size,throw,new,illegal,argument,exception,the,page,size,must,be,at,least,bytes,if,math,utils,is,power,of2,page,size,throw,new,illegal,argument,exception,the,given,page,size,is,not,a,power,of,two,this,memory,type,memory,type,this,memory,size,memory,size,this,number,of,slots,number,of,slots,this,page,size,page,size,this,rounding,mask,long,page,size,1,final,long,num,pages,long,memory,size,page,size,if,num,pages,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,memory,size,corresponds,to,more,than,pages,this,total,num,pages,int,num,pages,long,if,this,total,num,pages,1,throw,new,illegal,argument,exception,the,given,amount,of,memory,amounted,to,less,than,one,page,this,allocated,segments,new,hash,map,object,set,memory,segment,this,is,pre,allocated,pre,allocate,memory,this,num,non,allocated,pages,pre,allocate,memory,0,this,total,num,pages,final,int,mem,to,allocate,pre,allocate,memory,this,total,num,pages,0,switch,memory,type,case,heap,this,memory,pool,new,hybrid,heap,memory,pool,mem,to,allocate,page,size,break,case,if,pre,allocate,memory,log,warn,it,is,advisable,to,set,taskmanager,memory,preallocate,to,true,when,the,memory,type,taskmanager,memory,off,heap,is,set,to,true,this,memory,pool,new,hybrid,off,heap,memory,pool,mem,to,allocate,page,size,break,default,throw,new,illegal,argument,exception,unrecognized,memory,type,memory,type
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots, int pageSize, 							MemoryType memoryType, boolean preAllocateMemory);1517317681;Creates a memory manager with the given capacity and given page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager._@param pageSize The size of the pages handed out by the memory manager._@param memoryType The type of memory (heap / off-heap) that the memory manager should allocate._@param preAllocateMemory True, if the memory manager should immediately allocate all memory, false_if it should allocate and release the memory as needed.;public MemoryManager(long memorySize, int numberOfSlots, int pageSize,_							MemoryType memoryType, boolean preAllocateMemory) {_		_		if (memoryType == null) {_			throw new NullPointerException()__		}_		if (memorySize <= 0) {_			throw new IllegalArgumentException("Size of total memory must be positive.")__		}_		if (pageSize < MIN_PAGE_SIZE) {_			throw new IllegalArgumentException("The page size must be at least " + MIN_PAGE_SIZE + " bytes.")__		}_		if (!MathUtils.isPowerOf2(pageSize)) {_			throw new IllegalArgumentException("The given page size is not a power of two.")__		}__		this.memoryType = memoryType__		this.memorySize = memorySize__		this.numberOfSlots = numberOfSlots___		_		this.pageSize = pageSize__		this.roundingMask = ~((long) (pageSize - 1))___		final long numPagesLong = memorySize / pageSize__		if (numPagesLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + memorySize_					+ ") corresponds to more than MAX_INT pages.")__		}_		this.totalNumPages = (int) numPagesLong__		if (this.totalNumPages < 1) {_			throw new IllegalArgumentException("The given amount of memory amounted to less than one page.")__		}__		this.allocatedSegments = new HashMap<Object, Set<MemorySegment>>()__		this.isPreAllocated = preAllocateMemory___		this.numNonAllocatedPages = preAllocateMemory ? 0 : this.totalNumPages__		final int memToAllocate = preAllocateMemory ? this.totalNumPages : 0___		switch (memoryType) {_			case HEAP:_				this.memoryPool = new HybridHeapMemoryPool(memToAllocate, pageSize)__				break__			case OFF_HEAP:_				if (!preAllocateMemory) {_					LOG.warn("It is advisable to set 'taskmanager.memory.preallocate' to true when" +_						" the memory type 'taskmanager.memory.off-heap' is set to true.")__				}_				this.memoryPool = new HybridOffHeapMemoryPool(memToAllocate, pageSize)__				break__			default:_				throw new IllegalArgumentException("unrecognized memory type: " + memoryType)__		}_	};creates,a,memory,manager,with,the,given,capacity,and,given,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager,param,page,size,the,size,of,the,pages,handed,out,by,the,memory,manager,param,memory,type,the,type,of,memory,heap,off,heap,that,the,memory,manager,should,allocate,param,pre,allocate,memory,true,if,the,memory,manager,should,immediately,allocate,all,memory,false,if,it,should,allocate,and,release,the,memory,as,needed;public,memory,manager,long,memory,size,int,number,of,slots,int,page,size,memory,type,memory,type,boolean,pre,allocate,memory,if,memory,type,null,throw,new,null,pointer,exception,if,memory,size,0,throw,new,illegal,argument,exception,size,of,total,memory,must,be,positive,if,page,size,throw,new,illegal,argument,exception,the,page,size,must,be,at,least,bytes,if,math,utils,is,power,of2,page,size,throw,new,illegal,argument,exception,the,given,page,size,is,not,a,power,of,two,this,memory,type,memory,type,this,memory,size,memory,size,this,number,of,slots,number,of,slots,this,page,size,page,size,this,rounding,mask,long,page,size,1,final,long,num,pages,long,memory,size,page,size,if,num,pages,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,memory,size,corresponds,to,more,than,pages,this,total,num,pages,int,num,pages,long,if,this,total,num,pages,1,throw,new,illegal,argument,exception,the,given,amount,of,memory,amounted,to,less,than,one,page,this,allocated,segments,new,hash,map,object,set,memory,segment,this,is,pre,allocated,pre,allocate,memory,this,num,non,allocated,pages,pre,allocate,memory,0,this,total,num,pages,final,int,mem,to,allocate,pre,allocate,memory,this,total,num,pages,0,switch,memory,type,case,heap,this,memory,pool,new,hybrid,heap,memory,pool,mem,to,allocate,page,size,break,case,if,pre,allocate,memory,log,warn,it,is,advisable,to,set,taskmanager,memory,preallocate,to,true,when,the,memory,type,taskmanager,memory,off,heap,is,set,to,true,this,memory,pool,new,hybrid,off,heap,memory,pool,mem,to,allocate,page,size,break,default,throw,new,illegal,argument,exception,unrecognized,memory,type,memory,type
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots, int pageSize, 							MemoryType memoryType, boolean preAllocateMemory);1533306678;Creates a memory manager with the given capacity and given page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager._@param pageSize The size of the pages handed out by the memory manager._@param memoryType The type of memory (heap / off-heap) that the memory manager should allocate._@param preAllocateMemory True, if the memory manager should immediately allocate all memory, false_if it should allocate and release the memory as needed.;public MemoryManager(long memorySize, int numberOfSlots, int pageSize,_							MemoryType memoryType, boolean preAllocateMemory) {_		_		if (memoryType == null) {_			throw new NullPointerException()__		}_		if (memorySize <= 0) {_			throw new IllegalArgumentException("Size of total memory must be positive.")__		}_		if (pageSize < MIN_PAGE_SIZE) {_			throw new IllegalArgumentException("The page size must be at least " + MIN_PAGE_SIZE + " bytes.")__		}_		if (!MathUtils.isPowerOf2(pageSize)) {_			throw new IllegalArgumentException("The given page size is not a power of two.")__		}__		this.memoryType = memoryType__		this.memorySize = memorySize__		this.numberOfSlots = numberOfSlots___		_		this.pageSize = pageSize__		this.roundingMask = ~((long) (pageSize - 1))___		final long numPagesLong = memorySize / pageSize__		if (numPagesLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + memorySize_					+ ") corresponds to more than MAX_INT pages.")__		}_		this.totalNumPages = (int) numPagesLong__		if (this.totalNumPages < 1) {_			throw new IllegalArgumentException("The given amount of memory amounted to less than one page.")__		}__		this.allocatedSegments = new HashMap<Object, Set<MemorySegment>>()__		this.isPreAllocated = preAllocateMemory___		this.numNonAllocatedPages = preAllocateMemory ? 0 : this.totalNumPages__		final int memToAllocate = preAllocateMemory ? this.totalNumPages : 0___		switch (memoryType) {_			case HEAP:_				this.memoryPool = new HybridHeapMemoryPool(memToAllocate, pageSize)__				break__			case OFF_HEAP:_				if (!preAllocateMemory) {_					LOG.warn("It is advisable to set 'taskmanager.memory.preallocate' to true when" +_						" the memory type 'taskmanager.memory.off-heap' is set to true.")__				}_				this.memoryPool = new HybridOffHeapMemoryPool(memToAllocate, pageSize)__				break__			default:_				throw new IllegalArgumentException("unrecognized memory type: " + memoryType)__		}__		LOG.debug("Initialized MemoryManager with total memory size {}, number of slots {}, page size {}, " +_				"memory type {}, pre allocate memory {} and number of non allocated pages {}.",_			memorySize,_			numberOfSlots,_			pageSize,_			memoryType,_			preAllocateMemory,_			numNonAllocatedPages)__	};creates,a,memory,manager,with,the,given,capacity,and,given,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager,param,page,size,the,size,of,the,pages,handed,out,by,the,memory,manager,param,memory,type,the,type,of,memory,heap,off,heap,that,the,memory,manager,should,allocate,param,pre,allocate,memory,true,if,the,memory,manager,should,immediately,allocate,all,memory,false,if,it,should,allocate,and,release,the,memory,as,needed;public,memory,manager,long,memory,size,int,number,of,slots,int,page,size,memory,type,memory,type,boolean,pre,allocate,memory,if,memory,type,null,throw,new,null,pointer,exception,if,memory,size,0,throw,new,illegal,argument,exception,size,of,total,memory,must,be,positive,if,page,size,throw,new,illegal,argument,exception,the,page,size,must,be,at,least,bytes,if,math,utils,is,power,of2,page,size,throw,new,illegal,argument,exception,the,given,page,size,is,not,a,power,of,two,this,memory,type,memory,type,this,memory,size,memory,size,this,number,of,slots,number,of,slots,this,page,size,page,size,this,rounding,mask,long,page,size,1,final,long,num,pages,long,memory,size,page,size,if,num,pages,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,memory,size,corresponds,to,more,than,pages,this,total,num,pages,int,num,pages,long,if,this,total,num,pages,1,throw,new,illegal,argument,exception,the,given,amount,of,memory,amounted,to,less,than,one,page,this,allocated,segments,new,hash,map,object,set,memory,segment,this,is,pre,allocated,pre,allocate,memory,this,num,non,allocated,pages,pre,allocate,memory,0,this,total,num,pages,final,int,mem,to,allocate,pre,allocate,memory,this,total,num,pages,0,switch,memory,type,case,heap,this,memory,pool,new,hybrid,heap,memory,pool,mem,to,allocate,page,size,break,case,if,pre,allocate,memory,log,warn,it,is,advisable,to,set,taskmanager,memory,preallocate,to,true,when,the,memory,type,taskmanager,memory,off,heap,is,set,to,true,this,memory,pool,new,hybrid,off,heap,memory,pool,mem,to,allocate,page,size,break,default,throw,new,illegal,argument,exception,unrecognized,memory,type,memory,type,log,debug,initialized,memory,manager,with,total,memory,size,number,of,slots,page,size,memory,type,pre,allocate,memory,and,number,of,non,allocated,pages,memory,size,number,of,slots,page,size,memory,type,pre,allocate,memory,num,non,allocated,pages
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots, int pageSize, 							MemoryType memoryType, boolean preAllocateMemory);1538389013;Creates a memory manager with the given capacity and given page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager._@param pageSize The size of the pages handed out by the memory manager._@param memoryType The type of memory (heap / off-heap) that the memory manager should allocate._@param preAllocateMemory True, if the memory manager should immediately allocate all memory, false_if it should allocate and release the memory as needed.;public MemoryManager(long memorySize, int numberOfSlots, int pageSize,_							MemoryType memoryType, boolean preAllocateMemory) {_		_		if (memoryType == null) {_			throw new NullPointerException()__		}_		if (memorySize <= 0) {_			throw new IllegalArgumentException("Size of total memory must be positive.")__		}_		if (pageSize < MIN_PAGE_SIZE) {_			throw new IllegalArgumentException("The page size must be at least " + MIN_PAGE_SIZE + " bytes.")__		}_		if (!MathUtils.isPowerOf2(pageSize)) {_			throw new IllegalArgumentException("The given page size is not a power of two.")__		}__		this.memoryType = memoryType__		this.memorySize = memorySize__		this.numberOfSlots = numberOfSlots___		_		this.pageSize = pageSize__		this.roundingMask = ~((long) (pageSize - 1))___		final long numPagesLong = memorySize / pageSize__		if (numPagesLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + memorySize_					+ ") corresponds to more than MAX_INT pages.")__		}_		this.totalNumPages = (int) numPagesLong__		if (this.totalNumPages < 1) {_			throw new IllegalArgumentException("The given amount of memory amounted to less than one page.")__		}__		this.allocatedSegments = new HashMap<Object, Set<MemorySegment>>()__		this.isPreAllocated = preAllocateMemory___		this.numNonAllocatedPages = preAllocateMemory ? 0 : this.totalNumPages__		final int memToAllocate = preAllocateMemory ? this.totalNumPages : 0___		switch (memoryType) {_			case HEAP:_				this.memoryPool = new HybridHeapMemoryPool(memToAllocate, pageSize)__				break__			case OFF_HEAP:_				if (!preAllocateMemory) {_					LOG.warn("It is advisable to set 'taskmanager.memory.preallocate' to true when" +_						" the memory type 'taskmanager.memory.off-heap' is set to true.")__				}_				this.memoryPool = new HybridOffHeapMemoryPool(memToAllocate, pageSize)__				break__			default:_				throw new IllegalArgumentException("unrecognized memory type: " + memoryType)__		}__		LOG.debug("Initialized MemoryManager with total memory size {}, number of slots {}, page size {}, " +_				"memory type {}, pre allocate memory {} and number of non allocated pages {}.",_			memorySize,_			numberOfSlots,_			pageSize,_			memoryType,_			preAllocateMemory,_			numNonAllocatedPages)__	};creates,a,memory,manager,with,the,given,capacity,and,given,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager,param,page,size,the,size,of,the,pages,handed,out,by,the,memory,manager,param,memory,type,the,type,of,memory,heap,off,heap,that,the,memory,manager,should,allocate,param,pre,allocate,memory,true,if,the,memory,manager,should,immediately,allocate,all,memory,false,if,it,should,allocate,and,release,the,memory,as,needed;public,memory,manager,long,memory,size,int,number,of,slots,int,page,size,memory,type,memory,type,boolean,pre,allocate,memory,if,memory,type,null,throw,new,null,pointer,exception,if,memory,size,0,throw,new,illegal,argument,exception,size,of,total,memory,must,be,positive,if,page,size,throw,new,illegal,argument,exception,the,page,size,must,be,at,least,bytes,if,math,utils,is,power,of2,page,size,throw,new,illegal,argument,exception,the,given,page,size,is,not,a,power,of,two,this,memory,type,memory,type,this,memory,size,memory,size,this,number,of,slots,number,of,slots,this,page,size,page,size,this,rounding,mask,long,page,size,1,final,long,num,pages,long,memory,size,page,size,if,num,pages,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,memory,size,corresponds,to,more,than,pages,this,total,num,pages,int,num,pages,long,if,this,total,num,pages,1,throw,new,illegal,argument,exception,the,given,amount,of,memory,amounted,to,less,than,one,page,this,allocated,segments,new,hash,map,object,set,memory,segment,this,is,pre,allocated,pre,allocate,memory,this,num,non,allocated,pages,pre,allocate,memory,0,this,total,num,pages,final,int,mem,to,allocate,pre,allocate,memory,this,total,num,pages,0,switch,memory,type,case,heap,this,memory,pool,new,hybrid,heap,memory,pool,mem,to,allocate,page,size,break,case,if,pre,allocate,memory,log,warn,it,is,advisable,to,set,taskmanager,memory,preallocate,to,true,when,the,memory,type,taskmanager,memory,off,heap,is,set,to,true,this,memory,pool,new,hybrid,off,heap,memory,pool,mem,to,allocate,page,size,break,default,throw,new,illegal,argument,exception,unrecognized,memory,type,memory,type,log,debug,initialized,memory,manager,with,total,memory,size,number,of,slots,page,size,memory,type,pre,allocate,memory,and,number,of,non,allocated,pages,memory,size,number,of,slots,page,size,memory,type,pre,allocate,memory,num,non,allocated,pages
MemoryManager -> public MemoryManager(long memorySize, int numberOfSlots, int pageSize, 							MemoryType memoryType, boolean preAllocateMemory);1539345486;Creates a memory manager with the given capacity and given page size.__@param memorySize The total size of the memory to be managed by this memory manager._@param numberOfSlots The number of slots of the task manager._@param pageSize The size of the pages handed out by the memory manager._@param memoryType The type of memory (heap / off-heap) that the memory manager should allocate._@param preAllocateMemory True, if the memory manager should immediately allocate all memory, false_if it should allocate and release the memory as needed.;public MemoryManager(long memorySize, int numberOfSlots, int pageSize,_							MemoryType memoryType, boolean preAllocateMemory) {_		_		if (memoryType == null) {_			throw new NullPointerException()__		}_		if (memorySize <= 0) {_			throw new IllegalArgumentException("Size of total memory must be positive.")__		}_		if (pageSize < MIN_PAGE_SIZE) {_			throw new IllegalArgumentException("The page size must be at least " + MIN_PAGE_SIZE + " bytes.")__		}_		if (!MathUtils.isPowerOf2(pageSize)) {_			throw new IllegalArgumentException("The given page size is not a power of two.")__		}__		this.memoryType = memoryType__		this.memorySize = memorySize__		this.numberOfSlots = numberOfSlots___		_		this.pageSize = pageSize__		this.roundingMask = ~((long) (pageSize - 1))___		final long numPagesLong = memorySize / pageSize__		if (numPagesLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + memorySize_					+ ") corresponds to more than MAX_INT pages.")__		}_		this.totalNumPages = (int) numPagesLong__		if (this.totalNumPages < 1) {_			throw new IllegalArgumentException("The given amount of memory amounted to less than one page.")__		}__		this.allocatedSegments = new HashMap<Object, Set<MemorySegment>>()__		this.isPreAllocated = preAllocateMemory___		this.numNonAllocatedPages = preAllocateMemory ? 0 : this.totalNumPages__		final int memToAllocate = preAllocateMemory ? this.totalNumPages : 0___		switch (memoryType) {_			case HEAP:_				this.memoryPool = new HybridHeapMemoryPool(memToAllocate, pageSize)__				break__			case OFF_HEAP:_				if (!preAllocateMemory) {_					LOG.warn("It is advisable to set 'taskmanager.memory.preallocate' to true when" +_						" the memory type 'taskmanager.memory.off-heap' is set to true.")__				}_				this.memoryPool = new HybridOffHeapMemoryPool(memToAllocate, pageSize)__				break__			default:_				throw new IllegalArgumentException("unrecognized memory type: " + memoryType)__		}__		LOG.debug("Initialized MemoryManager with total memory size {}, number of slots {}, page size {}, " +_				"memory type {}, pre allocate memory {} and number of non allocated pages {}.",_			memorySize,_			numberOfSlots,_			pageSize,_			memoryType,_			preAllocateMemory,_			numNonAllocatedPages)__	};creates,a,memory,manager,with,the,given,capacity,and,given,page,size,param,memory,size,the,total,size,of,the,memory,to,be,managed,by,this,memory,manager,param,number,of,slots,the,number,of,slots,of,the,task,manager,param,page,size,the,size,of,the,pages,handed,out,by,the,memory,manager,param,memory,type,the,type,of,memory,heap,off,heap,that,the,memory,manager,should,allocate,param,pre,allocate,memory,true,if,the,memory,manager,should,immediately,allocate,all,memory,false,if,it,should,allocate,and,release,the,memory,as,needed;public,memory,manager,long,memory,size,int,number,of,slots,int,page,size,memory,type,memory,type,boolean,pre,allocate,memory,if,memory,type,null,throw,new,null,pointer,exception,if,memory,size,0,throw,new,illegal,argument,exception,size,of,total,memory,must,be,positive,if,page,size,throw,new,illegal,argument,exception,the,page,size,must,be,at,least,bytes,if,math,utils,is,power,of2,page,size,throw,new,illegal,argument,exception,the,given,page,size,is,not,a,power,of,two,this,memory,type,memory,type,this,memory,size,memory,size,this,number,of,slots,number,of,slots,this,page,size,page,size,this,rounding,mask,long,page,size,1,final,long,num,pages,long,memory,size,page,size,if,num,pages,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,memory,size,corresponds,to,more,than,pages,this,total,num,pages,int,num,pages,long,if,this,total,num,pages,1,throw,new,illegal,argument,exception,the,given,amount,of,memory,amounted,to,less,than,one,page,this,allocated,segments,new,hash,map,object,set,memory,segment,this,is,pre,allocated,pre,allocate,memory,this,num,non,allocated,pages,pre,allocate,memory,0,this,total,num,pages,final,int,mem,to,allocate,pre,allocate,memory,this,total,num,pages,0,switch,memory,type,case,heap,this,memory,pool,new,hybrid,heap,memory,pool,mem,to,allocate,page,size,break,case,if,pre,allocate,memory,log,warn,it,is,advisable,to,set,taskmanager,memory,preallocate,to,true,when,the,memory,type,taskmanager,memory,off,heap,is,set,to,true,this,memory,pool,new,hybrid,off,heap,memory,pool,mem,to,allocate,page,size,break,default,throw,new,illegal,argument,exception,unrecognized,memory,type,memory,type,log,debug,initialized,memory,manager,with,total,memory,size,number,of,slots,page,size,memory,type,pre,allocate,memory,and,number,of,non,allocated,pages,memory,size,number,of,slots,page,size,memory,type,pre,allocate,memory,num,non,allocated,pages
MemoryManager -> public void release(MemorySegment segment);1441738685;Tries to release the memory for the specified segment. If the segment has already been released or_is null, the request is simply ignored._<p>_If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segment The segment to be released._@throws IllegalArgumentException Thrown, if the given segment is of an incompatible type.;public void release(MemorySegment segment) {_		_		if (segment == null || segment.getOwner() == null) {_			return__		}__		final Object owner = segment.getOwner()__		_		_		synchronized (lock)_		{_			_			if (segment.isFreed()) {_				return__			}_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			try {_				Set<MemorySegment> segsForOwner = this.allocatedSegments.get(owner)___				if (segsForOwner != null) {_					segsForOwner.remove(segment)__					if (segsForOwner.isEmpty()) {_						this.allocatedSegments.remove(owner)__					}_				}__				if (isPreAllocated) {_					_					memoryPool.returnSegmentToPool(segment)__				}_				else {_					segment.free()__					numNonAllocatedPages++__				}_			}_			catch (Throwable t) {_				throw new RuntimeException("Error removing book-keeping reference to allocated memory segment.", t)__			}_		}_		_	};tries,to,release,the,memory,for,the,specified,segment,if,the,segment,has,already,been,released,or,is,null,the,request,is,simply,ignored,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segment,the,segment,to,be,released,throws,illegal,argument,exception,thrown,if,the,given,segment,is,of,an,incompatible,type;public,void,release,memory,segment,segment,if,segment,null,segment,get,owner,null,return,final,object,owner,segment,get,owner,synchronized,lock,if,segment,is,freed,return,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,try,set,memory,segment,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,segment,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,segment,else,segment,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t
MemoryManager -> public void release(MemorySegment segment);1460741894;Tries to release the memory for the specified segment. If the segment has already been released or_is null, the request is simply ignored._<p>_If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segment The segment to be released._@throws IllegalArgumentException Thrown, if the given segment is of an incompatible type.;public void release(MemorySegment segment) {_		_		if (segment == null || segment.getOwner() == null) {_			return__		}__		final Object owner = segment.getOwner()__		_		_		synchronized (lock)_		{_			_			if (segment.isFreed()) {_				return__			}_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			try {_				Set<MemorySegment> segsForOwner = this.allocatedSegments.get(owner)___				if (segsForOwner != null) {_					segsForOwner.remove(segment)__					if (segsForOwner.isEmpty()) {_						this.allocatedSegments.remove(owner)__					}_				}__				if (isPreAllocated) {_					_					memoryPool.returnSegmentToPool(segment)__				}_				else {_					segment.free()__					numNonAllocatedPages++__				}_			}_			catch (Throwable t) {_				throw new RuntimeException("Error removing book-keeping reference to allocated memory segment.", t)__			}_		}_		_	};tries,to,release,the,memory,for,the,specified,segment,if,the,segment,has,already,been,released,or,is,null,the,request,is,simply,ignored,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segment,the,segment,to,be,released,throws,illegal,argument,exception,thrown,if,the,given,segment,is,of,an,incompatible,type;public,void,release,memory,segment,segment,if,segment,null,segment,get,owner,null,return,final,object,owner,segment,get,owner,synchronized,lock,if,segment,is,freed,return,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,try,set,memory,segment,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,segment,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,segment,else,segment,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t
MemoryManager -> public void release(MemorySegment segment);1470405838;Tries to release the memory for the specified segment. If the segment has already been released or_is null, the request is simply ignored._<p>_If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segment The segment to be released._@throws IllegalArgumentException Thrown, if the given segment is of an incompatible type.;public void release(MemorySegment segment) {_		_		if (segment == null || segment.getOwner() == null) {_			return__		}__		final Object owner = segment.getOwner()__		_		_		synchronized (lock)_		{_			_			if (segment.isFreed()) {_				return__			}_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			try {_				Set<MemorySegment> segsForOwner = this.allocatedSegments.get(owner)___				if (segsForOwner != null) {_					segsForOwner.remove(segment)__					if (segsForOwner.isEmpty()) {_						this.allocatedSegments.remove(owner)__					}_				}__				if (isPreAllocated) {_					_					memoryPool.returnSegmentToPool(segment)__				}_				else {_					segment.free()__					numNonAllocatedPages++__				}_			}_			catch (Throwable t) {_				throw new RuntimeException("Error removing book-keeping reference to allocated memory segment.", t)__			}_		}_		_	};tries,to,release,the,memory,for,the,specified,segment,if,the,segment,has,already,been,released,or,is,null,the,request,is,simply,ignored,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segment,the,segment,to,be,released,throws,illegal,argument,exception,thrown,if,the,given,segment,is,of,an,incompatible,type;public,void,release,memory,segment,segment,if,segment,null,segment,get,owner,null,return,final,object,owner,segment,get,owner,synchronized,lock,if,segment,is,freed,return,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,try,set,memory,segment,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,segment,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,segment,else,segment,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t
MemoryManager -> public void release(MemorySegment segment);1499282568;Tries to release the memory for the specified segment. If the segment has already been released or_is null, the request is simply ignored.__<p>If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segment The segment to be released._@throws IllegalArgumentException Thrown, if the given segment is of an incompatible type.;public void release(MemorySegment segment) {_		_		if (segment == null || segment.getOwner() == null) {_			return__		}__		final Object owner = segment.getOwner()___		_		synchronized (lock) {_			_			if (segment.isFreed()) {_				return__			}_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			try {_				Set<MemorySegment> segsForOwner = this.allocatedSegments.get(owner)___				if (segsForOwner != null) {_					segsForOwner.remove(segment)__					if (segsForOwner.isEmpty()) {_						this.allocatedSegments.remove(owner)__					}_				}__				if (isPreAllocated) {_					_					memoryPool.returnSegmentToPool(segment)__				}_				else {_					segment.free()__					numNonAllocatedPages++__				}_			}_			catch (Throwable t) {_				throw new RuntimeException("Error removing book-keeping reference to allocated memory segment.", t)__			}_		}_		_	};tries,to,release,the,memory,for,the,specified,segment,if,the,segment,has,already,been,released,or,is,null,the,request,is,simply,ignored,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segment,the,segment,to,be,released,throws,illegal,argument,exception,thrown,if,the,given,segment,is,of,an,incompatible,type;public,void,release,memory,segment,segment,if,segment,null,segment,get,owner,null,return,final,object,owner,segment,get,owner,synchronized,lock,if,segment,is,freed,return,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,try,set,memory,segment,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,segment,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,segment,else,segment,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t
MemoryManager -> public void release(MemorySegment segment);1507315082;Tries to release the memory for the specified segment. If the segment has already been released or_is null, the request is simply ignored.__<p>If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segment The segment to be released._@throws IllegalArgumentException Thrown, if the given segment is of an incompatible type.;public void release(MemorySegment segment) {_		_		if (segment == null || segment.getOwner() == null) {_			return__		}__		final Object owner = segment.getOwner()___		_		synchronized (lock) {_			_			if (segment.isFreed()) {_				return__			}_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			try {_				Set<MemorySegment> segsForOwner = this.allocatedSegments.get(owner)___				if (segsForOwner != null) {_					segsForOwner.remove(segment)__					if (segsForOwner.isEmpty()) {_						this.allocatedSegments.remove(owner)__					}_				}__				if (isPreAllocated) {_					_					memoryPool.returnSegmentToPool(segment)__				}_				else {_					segment.free()__					numNonAllocatedPages++__				}_			}_			catch (Throwable t) {_				throw new RuntimeException("Error removing book-keeping reference to allocated memory segment.", t)__			}_		}_		_	};tries,to,release,the,memory,for,the,specified,segment,if,the,segment,has,already,been,released,or,is,null,the,request,is,simply,ignored,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segment,the,segment,to,be,released,throws,illegal,argument,exception,thrown,if,the,given,segment,is,of,an,incompatible,type;public,void,release,memory,segment,segment,if,segment,null,segment,get,owner,null,return,final,object,owner,segment,get,owner,synchronized,lock,if,segment,is,freed,return,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,try,set,memory,segment,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,segment,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,segment,else,segment,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t
MemoryManager -> public void release(MemorySegment segment);1507316227;Tries to release the memory for the specified segment. If the segment has already been released or_is null, the request is simply ignored.__<p>If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segment The segment to be released._@throws IllegalArgumentException Thrown, if the given segment is of an incompatible type.;public void release(MemorySegment segment) {_		_		if (segment == null || segment.getOwner() == null) {_			return__		}__		final Object owner = segment.getOwner()___		_		synchronized (lock) {_			_			if (segment.isFreed()) {_				return__			}_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			try {_				Set<MemorySegment> segsForOwner = this.allocatedSegments.get(owner)___				if (segsForOwner != null) {_					segsForOwner.remove(segment)__					if (segsForOwner.isEmpty()) {_						this.allocatedSegments.remove(owner)__					}_				}__				if (isPreAllocated) {_					_					memoryPool.returnSegmentToPool(segment)__				}_				else {_					segment.free()__					numNonAllocatedPages++__				}_			}_			catch (Throwable t) {_				throw new RuntimeException("Error removing book-keeping reference to allocated memory segment.", t)__			}_		}_		_	};tries,to,release,the,memory,for,the,specified,segment,if,the,segment,has,already,been,released,or,is,null,the,request,is,simply,ignored,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segment,the,segment,to,be,released,throws,illegal,argument,exception,thrown,if,the,given,segment,is,of,an,incompatible,type;public,void,release,memory,segment,segment,if,segment,null,segment,get,owner,null,return,final,object,owner,segment,get,owner,synchronized,lock,if,segment,is,freed,return,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,try,set,memory,segment,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,segment,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,segment,else,segment,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t
MemoryManager -> public void release(MemorySegment segment);1517317681;Tries to release the memory for the specified segment. If the segment has already been released or_is null, the request is simply ignored.__<p>If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segment The segment to be released._@throws IllegalArgumentException Thrown, if the given segment is of an incompatible type.;public void release(MemorySegment segment) {_		_		if (segment == null || segment.getOwner() == null) {_			return__		}__		final Object owner = segment.getOwner()___		_		synchronized (lock) {_			_			if (segment.isFreed()) {_				return__			}_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			try {_				Set<MemorySegment> segsForOwner = this.allocatedSegments.get(owner)___				if (segsForOwner != null) {_					segsForOwner.remove(segment)__					if (segsForOwner.isEmpty()) {_						this.allocatedSegments.remove(owner)__					}_				}__				if (isPreAllocated) {_					_					memoryPool.returnSegmentToPool(segment)__				}_				else {_					segment.free()__					numNonAllocatedPages++__				}_			}_			catch (Throwable t) {_				throw new RuntimeException("Error removing book-keeping reference to allocated memory segment.", t)__			}_		}_		_	};tries,to,release,the,memory,for,the,specified,segment,if,the,segment,has,already,been,released,or,is,null,the,request,is,simply,ignored,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segment,the,segment,to,be,released,throws,illegal,argument,exception,thrown,if,the,given,segment,is,of,an,incompatible,type;public,void,release,memory,segment,segment,if,segment,null,segment,get,owner,null,return,final,object,owner,segment,get,owner,synchronized,lock,if,segment,is,freed,return,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,try,set,memory,segment,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,segment,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,segment,else,segment,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t
MemoryManager -> public void release(MemorySegment segment);1533306678;Tries to release the memory for the specified segment. If the segment has already been released or_is null, the request is simply ignored.__<p>If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segment The segment to be released._@throws IllegalArgumentException Thrown, if the given segment is of an incompatible type.;public void release(MemorySegment segment) {_		_		if (segment == null || segment.getOwner() == null) {_			return__		}__		final Object owner = segment.getOwner()___		_		synchronized (lock) {_			_			if (segment.isFreed()) {_				return__			}_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			try {_				Set<MemorySegment> segsForOwner = this.allocatedSegments.get(owner)___				if (segsForOwner != null) {_					segsForOwner.remove(segment)__					if (segsForOwner.isEmpty()) {_						this.allocatedSegments.remove(owner)__					}_				}__				if (isPreAllocated) {_					_					memoryPool.returnSegmentToPool(segment)__				}_				else {_					segment.free()__					numNonAllocatedPages++__				}_			}_			catch (Throwable t) {_				throw new RuntimeException("Error removing book-keeping reference to allocated memory segment.", t)__			}_		}_		_	};tries,to,release,the,memory,for,the,specified,segment,if,the,segment,has,already,been,released,or,is,null,the,request,is,simply,ignored,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segment,the,segment,to,be,released,throws,illegal,argument,exception,thrown,if,the,given,segment,is,of,an,incompatible,type;public,void,release,memory,segment,segment,if,segment,null,segment,get,owner,null,return,final,object,owner,segment,get,owner,synchronized,lock,if,segment,is,freed,return,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,try,set,memory,segment,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,segment,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,segment,else,segment,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t
MemoryManager -> public void release(MemorySegment segment);1538389013;Tries to release the memory for the specified segment. If the segment has already been released or_is null, the request is simply ignored.__<p>If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segment The segment to be released._@throws IllegalArgumentException Thrown, if the given segment is of an incompatible type.;public void release(MemorySegment segment) {_		_		if (segment == null || segment.getOwner() == null) {_			return__		}__		final Object owner = segment.getOwner()___		_		synchronized (lock) {_			_			if (segment.isFreed()) {_				return__			}_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			try {_				Set<MemorySegment> segsForOwner = this.allocatedSegments.get(owner)___				if (segsForOwner != null) {_					segsForOwner.remove(segment)__					if (segsForOwner.isEmpty()) {_						this.allocatedSegments.remove(owner)__					}_				}__				if (isPreAllocated) {_					_					memoryPool.returnSegmentToPool(segment)__				}_				else {_					segment.free()__					numNonAllocatedPages++__				}_			}_			catch (Throwable t) {_				throw new RuntimeException("Error removing book-keeping reference to allocated memory segment.", t)__			}_		}_		_	};tries,to,release,the,memory,for,the,specified,segment,if,the,segment,has,already,been,released,or,is,null,the,request,is,simply,ignored,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segment,the,segment,to,be,released,throws,illegal,argument,exception,thrown,if,the,given,segment,is,of,an,incompatible,type;public,void,release,memory,segment,segment,if,segment,null,segment,get,owner,null,return,final,object,owner,segment,get,owner,synchronized,lock,if,segment,is,freed,return,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,try,set,memory,segment,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,segment,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,segment,else,segment,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t
MemoryManager -> public void release(MemorySegment segment);1539345486;Tries to release the memory for the specified segment. If the segment has already been released or_is null, the request is simply ignored.__<p>If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segment The segment to be released._@throws IllegalArgumentException Thrown, if the given segment is of an incompatible type.;public void release(MemorySegment segment) {_		_		if (segment == null || segment.getOwner() == null) {_			return__		}__		final Object owner = segment.getOwner()___		_		synchronized (lock) {_			_			if (segment.isFreed()) {_				return__			}_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			try {_				Set<MemorySegment> segsForOwner = this.allocatedSegments.get(owner)___				if (segsForOwner != null) {_					segsForOwner.remove(segment)__					if (segsForOwner.isEmpty()) {_						this.allocatedSegments.remove(owner)__					}_				}__				if (isPreAllocated) {_					_					memoryPool.returnSegmentToPool(segment)__				}_				else {_					segment.free()__					numNonAllocatedPages++__				}_			}_			catch (Throwable t) {_				throw new RuntimeException("Error removing book-keeping reference to allocated memory segment.", t)__			}_		}_		_	};tries,to,release,the,memory,for,the,specified,segment,if,the,segment,has,already,been,released,or,is,null,the,request,is,simply,ignored,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segment,the,segment,to,be,released,throws,illegal,argument,exception,thrown,if,the,given,segment,is,of,an,incompatible,type;public,void,release,memory,segment,segment,if,segment,null,segment,get,owner,null,return,final,object,owner,segment,get,owner,synchronized,lock,if,segment,is,freed,return,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,try,set,memory,segment,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,segment,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,segment,else,segment,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t
MemoryManager -> public boolean verifyEmpty();1441738685;Checks if the memory manager all memory available.__@return True, if the memory manager is empty and valid, false if it is not empty or corrupted.;public boolean verifyEmpty() {_		synchronized (lock) {_			return isPreAllocated ?_					memoryPool.getNumberOfAvailableMemorySegments() == totalNumPages :_					numNonAllocatedPages == totalNumPages__		}_	};checks,if,the,memory,manager,all,memory,available,return,true,if,the,memory,manager,is,empty,and,valid,false,if,it,is,not,empty,or,corrupted;public,boolean,verify,empty,synchronized,lock,return,is,pre,allocated,memory,pool,get,number,of,available,memory,segments,total,num,pages,num,non,allocated,pages,total,num,pages
MemoryManager -> public boolean verifyEmpty();1460741894;Checks if the memory manager all memory available.__@return True, if the memory manager is empty and valid, false if it is not empty or corrupted.;public boolean verifyEmpty() {_		synchronized (lock) {_			return isPreAllocated ?_					memoryPool.getNumberOfAvailableMemorySegments() == totalNumPages :_					numNonAllocatedPages == totalNumPages__		}_	};checks,if,the,memory,manager,all,memory,available,return,true,if,the,memory,manager,is,empty,and,valid,false,if,it,is,not,empty,or,corrupted;public,boolean,verify,empty,synchronized,lock,return,is,pre,allocated,memory,pool,get,number,of,available,memory,segments,total,num,pages,num,non,allocated,pages,total,num,pages
MemoryManager -> public boolean verifyEmpty();1470405838;Checks if the memory manager all memory available.__@return True, if the memory manager is empty and valid, false if it is not empty or corrupted.;public boolean verifyEmpty() {_		synchronized (lock) {_			return isPreAllocated ?_					memoryPool.getNumberOfAvailableMemorySegments() == totalNumPages :_					numNonAllocatedPages == totalNumPages__		}_	};checks,if,the,memory,manager,all,memory,available,return,true,if,the,memory,manager,is,empty,and,valid,false,if,it,is,not,empty,or,corrupted;public,boolean,verify,empty,synchronized,lock,return,is,pre,allocated,memory,pool,get,number,of,available,memory,segments,total,num,pages,num,non,allocated,pages,total,num,pages
MemoryManager -> public boolean verifyEmpty();1499282568;Checks if the memory manager all memory available.__@return True, if the memory manager is empty and valid, false if it is not empty or corrupted.;public boolean verifyEmpty() {_		synchronized (lock) {_			return isPreAllocated ?_					memoryPool.getNumberOfAvailableMemorySegments() == totalNumPages :_					numNonAllocatedPages == totalNumPages__		}_	};checks,if,the,memory,manager,all,memory,available,return,true,if,the,memory,manager,is,empty,and,valid,false,if,it,is,not,empty,or,corrupted;public,boolean,verify,empty,synchronized,lock,return,is,pre,allocated,memory,pool,get,number,of,available,memory,segments,total,num,pages,num,non,allocated,pages,total,num,pages
MemoryManager -> public boolean verifyEmpty();1507315082;Checks if the memory manager all memory available.__@return True, if the memory manager is empty and valid, false if it is not empty or corrupted.;public boolean verifyEmpty() {_		synchronized (lock) {_			return isPreAllocated ?_					memoryPool.getNumberOfAvailableMemorySegments() == totalNumPages :_					numNonAllocatedPages == totalNumPages__		}_	};checks,if,the,memory,manager,all,memory,available,return,true,if,the,memory,manager,is,empty,and,valid,false,if,it,is,not,empty,or,corrupted;public,boolean,verify,empty,synchronized,lock,return,is,pre,allocated,memory,pool,get,number,of,available,memory,segments,total,num,pages,num,non,allocated,pages,total,num,pages
MemoryManager -> public boolean verifyEmpty();1507316227;Checks if the memory manager all memory available.__@return True, if the memory manager is empty and valid, false if it is not empty or corrupted.;public boolean verifyEmpty() {_		synchronized (lock) {_			return isPreAllocated ?_					memoryPool.getNumberOfAvailableMemorySegments() == totalNumPages :_					numNonAllocatedPages == totalNumPages__		}_	};checks,if,the,memory,manager,all,memory,available,return,true,if,the,memory,manager,is,empty,and,valid,false,if,it,is,not,empty,or,corrupted;public,boolean,verify,empty,synchronized,lock,return,is,pre,allocated,memory,pool,get,number,of,available,memory,segments,total,num,pages,num,non,allocated,pages,total,num,pages
MemoryManager -> public boolean verifyEmpty();1517317681;Checks if the memory manager all memory available.__@return True, if the memory manager is empty and valid, false if it is not empty or corrupted.;public boolean verifyEmpty() {_		synchronized (lock) {_			return isPreAllocated ?_					memoryPool.getNumberOfAvailableMemorySegments() == totalNumPages :_					numNonAllocatedPages == totalNumPages__		}_	};checks,if,the,memory,manager,all,memory,available,return,true,if,the,memory,manager,is,empty,and,valid,false,if,it,is,not,empty,or,corrupted;public,boolean,verify,empty,synchronized,lock,return,is,pre,allocated,memory,pool,get,number,of,available,memory,segments,total,num,pages,num,non,allocated,pages,total,num,pages
MemoryManager -> public boolean verifyEmpty();1533306678;Checks if the memory manager all memory available.__@return True, if the memory manager is empty and valid, false if it is not empty or corrupted.;public boolean verifyEmpty() {_		synchronized (lock) {_			return isPreAllocated ?_					memoryPool.getNumberOfAvailableMemorySegments() == totalNumPages :_					numNonAllocatedPages == totalNumPages__		}_	};checks,if,the,memory,manager,all,memory,available,return,true,if,the,memory,manager,is,empty,and,valid,false,if,it,is,not,empty,or,corrupted;public,boolean,verify,empty,synchronized,lock,return,is,pre,allocated,memory,pool,get,number,of,available,memory,segments,total,num,pages,num,non,allocated,pages,total,num,pages
MemoryManager -> public boolean verifyEmpty();1538389013;Checks if the memory manager all memory available.__@return True, if the memory manager is empty and valid, false if it is not empty or corrupted.;public boolean verifyEmpty() {_		synchronized (lock) {_			return isPreAllocated ?_					memoryPool.getNumberOfAvailableMemorySegments() == totalNumPages :_					numNonAllocatedPages == totalNumPages__		}_	};checks,if,the,memory,manager,all,memory,available,return,true,if,the,memory,manager,is,empty,and,valid,false,if,it,is,not,empty,or,corrupted;public,boolean,verify,empty,synchronized,lock,return,is,pre,allocated,memory,pool,get,number,of,available,memory,segments,total,num,pages,num,non,allocated,pages,total,num,pages
MemoryManager -> public boolean verifyEmpty();1539345486;Checks if the memory manager all memory available.__@return True, if the memory manager is empty and valid, false if it is not empty or corrupted.;public boolean verifyEmpty() {_		synchronized (lock) {_			return isPreAllocated ?_					memoryPool.getNumberOfAvailableMemorySegments() == totalNumPages :_					numNonAllocatedPages == totalNumPages__		}_	};checks,if,the,memory,manager,all,memory,available,return,true,if,the,memory,manager,is,empty,and,valid,false,if,it,is,not,empty,or,corrupted;public,boolean,verify,empty,synchronized,lock,return,is,pre,allocated,memory,pool,get,number,of,available,memory,segments,total,num,pages,num,non,allocated,pages,total,num,pages
MemoryManager -> public int getPageSize();1441738685;Gets the size of the pages handled by the memory manager.__@return The size of the pages handled by the memory manager.;public int getPageSize() {_		return pageSize__	};gets,the,size,of,the,pages,handled,by,the,memory,manager,return,the,size,of,the,pages,handled,by,the,memory,manager;public,int,get,page,size,return,page,size
MemoryManager -> public int getPageSize();1460741894;Gets the size of the pages handled by the memory manager.__@return The size of the pages handled by the memory manager.;public int getPageSize() {_		return pageSize__	};gets,the,size,of,the,pages,handled,by,the,memory,manager,return,the,size,of,the,pages,handled,by,the,memory,manager;public,int,get,page,size,return,page,size
MemoryManager -> public int getPageSize();1470405838;Gets the size of the pages handled by the memory manager.__@return The size of the pages handled by the memory manager.;public int getPageSize() {_		return pageSize__	};gets,the,size,of,the,pages,handled,by,the,memory,manager,return,the,size,of,the,pages,handled,by,the,memory,manager;public,int,get,page,size,return,page,size
MemoryManager -> public int getPageSize();1499282568;Gets the size of the pages handled by the memory manager.__@return The size of the pages handled by the memory manager.;public int getPageSize() {_		return pageSize__	};gets,the,size,of,the,pages,handled,by,the,memory,manager,return,the,size,of,the,pages,handled,by,the,memory,manager;public,int,get,page,size,return,page,size
MemoryManager -> public int getPageSize();1507315082;Gets the size of the pages handled by the memory manager.__@return The size of the pages handled by the memory manager.;public int getPageSize() {_		return pageSize__	};gets,the,size,of,the,pages,handled,by,the,memory,manager,return,the,size,of,the,pages,handled,by,the,memory,manager;public,int,get,page,size,return,page,size
MemoryManager -> public int getPageSize();1507316227;Gets the size of the pages handled by the memory manager.__@return The size of the pages handled by the memory manager.;public int getPageSize() {_		return pageSize__	};gets,the,size,of,the,pages,handled,by,the,memory,manager,return,the,size,of,the,pages,handled,by,the,memory,manager;public,int,get,page,size,return,page,size
MemoryManager -> public int getPageSize();1517317681;Gets the size of the pages handled by the memory manager.__@return The size of the pages handled by the memory manager.;public int getPageSize() {_		return pageSize__	};gets,the,size,of,the,pages,handled,by,the,memory,manager,return,the,size,of,the,pages,handled,by,the,memory,manager;public,int,get,page,size,return,page,size
MemoryManager -> public int getPageSize();1533306678;Gets the size of the pages handled by the memory manager.__@return The size of the pages handled by the memory manager.;public int getPageSize() {_		return pageSize__	};gets,the,size,of,the,pages,handled,by,the,memory,manager,return,the,size,of,the,pages,handled,by,the,memory,manager;public,int,get,page,size,return,page,size
MemoryManager -> public int getPageSize();1538389013;Gets the size of the pages handled by the memory manager.__@return The size of the pages handled by the memory manager.;public int getPageSize() {_		return pageSize__	};gets,the,size,of,the,pages,handled,by,the,memory,manager,return,the,size,of,the,pages,handled,by,the,memory,manager;public,int,get,page,size,return,page,size
MemoryManager -> public int getPageSize();1539345486;Gets the size of the pages handled by the memory manager.__@return The size of the pages handled by the memory manager.;public int getPageSize() {_		return pageSize__	};gets,the,size,of,the,pages,handled,by,the,memory,manager,return,the,size,of,the,pages,handled,by,the,memory,manager;public,int,get,page,size,return,page,size
MemoryManager -> public int getTotalNumPages();1441738685;Gets the total number of memory pages managed by this memory manager.__@return The total number of memory pages managed by this memory manager.;public int getTotalNumPages() {_		return totalNumPages__	};gets,the,total,number,of,memory,pages,managed,by,this,memory,manager,return,the,total,number,of,memory,pages,managed,by,this,memory,manager;public,int,get,total,num,pages,return,total,num,pages
MemoryManager -> public int getTotalNumPages();1460741894;Gets the total number of memory pages managed by this memory manager.__@return The total number of memory pages managed by this memory manager.;public int getTotalNumPages() {_		return totalNumPages__	};gets,the,total,number,of,memory,pages,managed,by,this,memory,manager,return,the,total,number,of,memory,pages,managed,by,this,memory,manager;public,int,get,total,num,pages,return,total,num,pages
MemoryManager -> public int getTotalNumPages();1470405838;Gets the total number of memory pages managed by this memory manager.__@return The total number of memory pages managed by this memory manager.;public int getTotalNumPages() {_		return totalNumPages__	};gets,the,total,number,of,memory,pages,managed,by,this,memory,manager,return,the,total,number,of,memory,pages,managed,by,this,memory,manager;public,int,get,total,num,pages,return,total,num,pages
MemoryManager -> public int getTotalNumPages();1499282568;Gets the total number of memory pages managed by this memory manager.__@return The total number of memory pages managed by this memory manager.;public int getTotalNumPages() {_		return totalNumPages__	};gets,the,total,number,of,memory,pages,managed,by,this,memory,manager,return,the,total,number,of,memory,pages,managed,by,this,memory,manager;public,int,get,total,num,pages,return,total,num,pages
MemoryManager -> public int getTotalNumPages();1507315082;Gets the total number of memory pages managed by this memory manager.__@return The total number of memory pages managed by this memory manager.;public int getTotalNumPages() {_		return totalNumPages__	};gets,the,total,number,of,memory,pages,managed,by,this,memory,manager,return,the,total,number,of,memory,pages,managed,by,this,memory,manager;public,int,get,total,num,pages,return,total,num,pages
MemoryManager -> public int getTotalNumPages();1507316227;Gets the total number of memory pages managed by this memory manager.__@return The total number of memory pages managed by this memory manager.;public int getTotalNumPages() {_		return totalNumPages__	};gets,the,total,number,of,memory,pages,managed,by,this,memory,manager,return,the,total,number,of,memory,pages,managed,by,this,memory,manager;public,int,get,total,num,pages,return,total,num,pages
MemoryManager -> public int getTotalNumPages();1517317681;Gets the total number of memory pages managed by this memory manager.__@return The total number of memory pages managed by this memory manager.;public int getTotalNumPages() {_		return totalNumPages__	};gets,the,total,number,of,memory,pages,managed,by,this,memory,manager,return,the,total,number,of,memory,pages,managed,by,this,memory,manager;public,int,get,total,num,pages,return,total,num,pages
MemoryManager -> public int getTotalNumPages();1533306678;Gets the total number of memory pages managed by this memory manager.__@return The total number of memory pages managed by this memory manager.;public int getTotalNumPages() {_		return totalNumPages__	};gets,the,total,number,of,memory,pages,managed,by,this,memory,manager,return,the,total,number,of,memory,pages,managed,by,this,memory,manager;public,int,get,total,num,pages,return,total,num,pages
MemoryManager -> public int getTotalNumPages();1538389013;Gets the total number of memory pages managed by this memory manager.__@return The total number of memory pages managed by this memory manager.;public int getTotalNumPages() {_		return totalNumPages__	};gets,the,total,number,of,memory,pages,managed,by,this,memory,manager,return,the,total,number,of,memory,pages,managed,by,this,memory,manager;public,int,get,total,num,pages,return,total,num,pages
MemoryManager -> public int getTotalNumPages();1539345486;Gets the total number of memory pages managed by this memory manager.__@return The total number of memory pages managed by this memory manager.;public int getTotalNumPages() {_		return totalNumPages__	};gets,the,total,number,of,memory,pages,managed,by,this,memory,manager,return,the,total,number,of,memory,pages,managed,by,this,memory,manager;public,int,get,total,num,pages,return,total,num,pages
MemoryManager -> public void release(Collection<MemorySegment> segments);1441738685;Tries to release many memory segments together._<p>_If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segments The segments to be released._@throws NullPointerException Thrown, if the given collection is null._@throws IllegalArgumentException Thrown, id the segments are of an incompatible type.;public void release(Collection<MemorySegment> segments) {_		if (segments == null) {_			return__		}__		_		synchronized (lock)_		{_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			boolean successfullyReleased = false__			do {_				final Iterator<MemorySegment> segmentsIterator = segments.iterator()___				Object lastOwner = null__				Set<MemorySegment> segsForOwner = null___				try {_					_					while (segmentsIterator.hasNext()) {__						final MemorySegment seg = segmentsIterator.next()__						if (seg == null || seg.isFreed()) {_							continue__						}__						final Object owner = seg.getOwner()___						try {_							_							_							if (lastOwner != owner) {_								lastOwner = owner__								segsForOwner = this.allocatedSegments.get(owner)__							}__							_							if (segsForOwner != null) {_								segsForOwner.remove(seg)__								if (segsForOwner.isEmpty()) {_									this.allocatedSegments.remove(owner)__								}_							}__							if (isPreAllocated) {_								memoryPool.returnSegmentToPool(seg)__							}_							else {_								seg.free()__								numNonAllocatedPages++__							}_						}_						catch (Throwable t) {_							throw new RuntimeException(_									"Error removing book-keeping reference to allocated memory segment.", t)__						}_					}__					segments.clear()___					_					successfullyReleased = true__				}_				catch (ConcurrentModificationException e) {_					_					_				}_			} while (!successfullyReleased)__		}_		_	};tries,to,release,many,memory,segments,together,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segments,the,segments,to,be,released,throws,null,pointer,exception,thrown,if,the,given,collection,is,null,throws,illegal,argument,exception,thrown,id,the,segments,are,of,an,incompatible,type;public,void,release,collection,memory,segment,segments,if,segments,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,boolean,successfully,released,false,do,final,iterator,memory,segment,segments,iterator,segments,iterator,object,last,owner,null,set,memory,segment,segs,for,owner,null,try,while,segments,iterator,has,next,final,memory,segment,seg,segments,iterator,next,if,seg,null,seg,is,freed,continue,final,object,owner,seg,get,owner,try,if,last,owner,owner,last,owner,owner,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,seg,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,seg,else,seg,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t,segments,clear,successfully,released,true,catch,concurrent,modification,exception,e,while,successfully,released
MemoryManager -> public void release(Collection<MemorySegment> segments);1460741894;Tries to release many memory segments together._<p>_If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segments The segments to be released._@throws NullPointerException Thrown, if the given collection is null._@throws IllegalArgumentException Thrown, id the segments are of an incompatible type.;public void release(Collection<MemorySegment> segments) {_		if (segments == null) {_			return__		}__		_		synchronized (lock)_		{_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			boolean successfullyReleased = false__			do {_				final Iterator<MemorySegment> segmentsIterator = segments.iterator()___				Object lastOwner = null__				Set<MemorySegment> segsForOwner = null___				try {_					_					while (segmentsIterator.hasNext()) {__						final MemorySegment seg = segmentsIterator.next()__						if (seg == null || seg.isFreed()) {_							continue__						}__						final Object owner = seg.getOwner()___						try {_							_							_							if (lastOwner != owner) {_								lastOwner = owner__								segsForOwner = this.allocatedSegments.get(owner)__							}__							_							if (segsForOwner != null) {_								segsForOwner.remove(seg)__								if (segsForOwner.isEmpty()) {_									this.allocatedSegments.remove(owner)__								}_							}__							if (isPreAllocated) {_								memoryPool.returnSegmentToPool(seg)__							}_							else {_								seg.free()__								numNonAllocatedPages++__							}_						}_						catch (Throwable t) {_							throw new RuntimeException(_									"Error removing book-keeping reference to allocated memory segment.", t)__						}_					}__					segments.clear()___					_					successfullyReleased = true__				}_				catch (ConcurrentModificationException e) {_					_					_				}_			} while (!successfullyReleased)__		}_		_	};tries,to,release,many,memory,segments,together,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segments,the,segments,to,be,released,throws,null,pointer,exception,thrown,if,the,given,collection,is,null,throws,illegal,argument,exception,thrown,id,the,segments,are,of,an,incompatible,type;public,void,release,collection,memory,segment,segments,if,segments,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,boolean,successfully,released,false,do,final,iterator,memory,segment,segments,iterator,segments,iterator,object,last,owner,null,set,memory,segment,segs,for,owner,null,try,while,segments,iterator,has,next,final,memory,segment,seg,segments,iterator,next,if,seg,null,seg,is,freed,continue,final,object,owner,seg,get,owner,try,if,last,owner,owner,last,owner,owner,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,seg,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,seg,else,seg,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t,segments,clear,successfully,released,true,catch,concurrent,modification,exception,e,while,successfully,released
MemoryManager -> public void release(Collection<MemorySegment> segments);1470405838;Tries to release many memory segments together._<p>_If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segments The segments to be released._@throws NullPointerException Thrown, if the given collection is null._@throws IllegalArgumentException Thrown, id the segments are of an incompatible type.;public void release(Collection<MemorySegment> segments) {_		if (segments == null) {_			return__		}__		_		synchronized (lock)_		{_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			boolean successfullyReleased = false__			do {_				final Iterator<MemorySegment> segmentsIterator = segments.iterator()___				Object lastOwner = null__				Set<MemorySegment> segsForOwner = null___				try {_					_					while (segmentsIterator.hasNext()) {__						final MemorySegment seg = segmentsIterator.next()__						if (seg == null || seg.isFreed()) {_							continue__						}__						final Object owner = seg.getOwner()___						try {_							_							_							if (lastOwner != owner) {_								lastOwner = owner__								segsForOwner = this.allocatedSegments.get(owner)__							}__							_							if (segsForOwner != null) {_								segsForOwner.remove(seg)__								if (segsForOwner.isEmpty()) {_									this.allocatedSegments.remove(owner)__								}_							}__							if (isPreAllocated) {_								memoryPool.returnSegmentToPool(seg)__							}_							else {_								seg.free()__								numNonAllocatedPages++__							}_						}_						catch (Throwable t) {_							throw new RuntimeException(_									"Error removing book-keeping reference to allocated memory segment.", t)__						}_					}__					segments.clear()___					_					successfullyReleased = true__				}_				catch (ConcurrentModificationException e) {_					_					_				}_			} while (!successfullyReleased)__		}_		_	};tries,to,release,many,memory,segments,together,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segments,the,segments,to,be,released,throws,null,pointer,exception,thrown,if,the,given,collection,is,null,throws,illegal,argument,exception,thrown,id,the,segments,are,of,an,incompatible,type;public,void,release,collection,memory,segment,segments,if,segments,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,boolean,successfully,released,false,do,final,iterator,memory,segment,segments,iterator,segments,iterator,object,last,owner,null,set,memory,segment,segs,for,owner,null,try,while,segments,iterator,has,next,final,memory,segment,seg,segments,iterator,next,if,seg,null,seg,is,freed,continue,final,object,owner,seg,get,owner,try,if,last,owner,owner,last,owner,owner,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,seg,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,seg,else,seg,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t,segments,clear,successfully,released,true,catch,concurrent,modification,exception,e,while,successfully,released
MemoryManager -> public void release(Collection<MemorySegment> segments);1499282568;Tries to release many memory segments together.__<p>If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segments The segments to be released._@throws NullPointerException Thrown, if the given collection is null._@throws IllegalArgumentException Thrown, id the segments are of an incompatible type.;public void release(Collection<MemorySegment> segments) {_		if (segments == null) {_			return__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			boolean successfullyReleased = false__			do {_				final Iterator<MemorySegment> segmentsIterator = segments.iterator()___				Object lastOwner = null__				Set<MemorySegment> segsForOwner = null___				try {_					_					while (segmentsIterator.hasNext()) {__						final MemorySegment seg = segmentsIterator.next()__						if (seg == null || seg.isFreed()) {_							continue__						}__						final Object owner = seg.getOwner()___						try {_							_							_							if (lastOwner != owner) {_								lastOwner = owner__								segsForOwner = this.allocatedSegments.get(owner)__							}__							_							if (segsForOwner != null) {_								segsForOwner.remove(seg)__								if (segsForOwner.isEmpty()) {_									this.allocatedSegments.remove(owner)__								}_							}__							if (isPreAllocated) {_								memoryPool.returnSegmentToPool(seg)__							}_							else {_								seg.free()__								numNonAllocatedPages++__							}_						}_						catch (Throwable t) {_							throw new RuntimeException(_									"Error removing book-keeping reference to allocated memory segment.", t)__						}_					}__					segments.clear()___					_					successfullyReleased = true__				}_				catch (ConcurrentModificationException e) {_					_					_				}_			} while (!successfullyReleased)__		}_		_	};tries,to,release,many,memory,segments,together,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segments,the,segments,to,be,released,throws,null,pointer,exception,thrown,if,the,given,collection,is,null,throws,illegal,argument,exception,thrown,id,the,segments,are,of,an,incompatible,type;public,void,release,collection,memory,segment,segments,if,segments,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,boolean,successfully,released,false,do,final,iterator,memory,segment,segments,iterator,segments,iterator,object,last,owner,null,set,memory,segment,segs,for,owner,null,try,while,segments,iterator,has,next,final,memory,segment,seg,segments,iterator,next,if,seg,null,seg,is,freed,continue,final,object,owner,seg,get,owner,try,if,last,owner,owner,last,owner,owner,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,seg,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,seg,else,seg,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t,segments,clear,successfully,released,true,catch,concurrent,modification,exception,e,while,successfully,released
MemoryManager -> public void release(Collection<MemorySegment> segments);1507315082;Tries to release many memory segments together.__<p>If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segments The segments to be released._@throws NullPointerException Thrown, if the given collection is null._@throws IllegalArgumentException Thrown, id the segments are of an incompatible type.;public void release(Collection<MemorySegment> segments) {_		if (segments == null) {_			return__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			boolean successfullyReleased = false__			do {_				final Iterator<MemorySegment> segmentsIterator = segments.iterator()___				Object lastOwner = null__				Set<MemorySegment> segsForOwner = null___				try {_					_					while (segmentsIterator.hasNext()) {__						final MemorySegment seg = segmentsIterator.next()__						if (seg == null || seg.isFreed()) {_							continue__						}__						final Object owner = seg.getOwner()___						try {_							_							_							if (lastOwner != owner) {_								lastOwner = owner__								segsForOwner = this.allocatedSegments.get(owner)__							}__							_							if (segsForOwner != null) {_								segsForOwner.remove(seg)__								if (segsForOwner.isEmpty()) {_									this.allocatedSegments.remove(owner)__								}_							}__							if (isPreAllocated) {_								memoryPool.returnSegmentToPool(seg)__							}_							else {_								seg.free()__								numNonAllocatedPages++__							}_						}_						catch (Throwable t) {_							throw new RuntimeException(_									"Error removing book-keeping reference to allocated memory segment.", t)__						}_					}__					segments.clear()___					_					successfullyReleased = true__				}_				catch (ConcurrentModificationException e) {_					_					_				}_			} while (!successfullyReleased)__		}_		_	};tries,to,release,many,memory,segments,together,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segments,the,segments,to,be,released,throws,null,pointer,exception,thrown,if,the,given,collection,is,null,throws,illegal,argument,exception,thrown,id,the,segments,are,of,an,incompatible,type;public,void,release,collection,memory,segment,segments,if,segments,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,boolean,successfully,released,false,do,final,iterator,memory,segment,segments,iterator,segments,iterator,object,last,owner,null,set,memory,segment,segs,for,owner,null,try,while,segments,iterator,has,next,final,memory,segment,seg,segments,iterator,next,if,seg,null,seg,is,freed,continue,final,object,owner,seg,get,owner,try,if,last,owner,owner,last,owner,owner,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,seg,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,seg,else,seg,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t,segments,clear,successfully,released,true,catch,concurrent,modification,exception,e,while,successfully,released
MemoryManager -> public void release(Collection<MemorySegment> segments);1507316227;Tries to release many memory segments together.__<p>If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segments The segments to be released._@throws NullPointerException Thrown, if the given collection is null._@throws IllegalArgumentException Thrown, id the segments are of an incompatible type.;public void release(Collection<MemorySegment> segments) {_		if (segments == null) {_			return__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			boolean successfullyReleased = false__			do {_				final Iterator<MemorySegment> segmentsIterator = segments.iterator()___				Object lastOwner = null__				Set<MemorySegment> segsForOwner = null___				try {_					_					while (segmentsIterator.hasNext()) {__						final MemorySegment seg = segmentsIterator.next()__						if (seg == null || seg.isFreed()) {_							continue__						}__						final Object owner = seg.getOwner()___						try {_							_							_							if (lastOwner != owner) {_								lastOwner = owner__								segsForOwner = this.allocatedSegments.get(owner)__							}__							_							if (segsForOwner != null) {_								segsForOwner.remove(seg)__								if (segsForOwner.isEmpty()) {_									this.allocatedSegments.remove(owner)__								}_							}__							if (isPreAllocated) {_								memoryPool.returnSegmentToPool(seg)__							}_							else {_								seg.free()__								numNonAllocatedPages++__							}_						}_						catch (Throwable t) {_							throw new RuntimeException(_									"Error removing book-keeping reference to allocated memory segment.", t)__						}_					}__					segments.clear()___					_					successfullyReleased = true__				}_				catch (ConcurrentModificationException e) {_					_					_				}_			} while (!successfullyReleased)__		}_		_	};tries,to,release,many,memory,segments,together,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segments,the,segments,to,be,released,throws,null,pointer,exception,thrown,if,the,given,collection,is,null,throws,illegal,argument,exception,thrown,id,the,segments,are,of,an,incompatible,type;public,void,release,collection,memory,segment,segments,if,segments,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,boolean,successfully,released,false,do,final,iterator,memory,segment,segments,iterator,segments,iterator,object,last,owner,null,set,memory,segment,segs,for,owner,null,try,while,segments,iterator,has,next,final,memory,segment,seg,segments,iterator,next,if,seg,null,seg,is,freed,continue,final,object,owner,seg,get,owner,try,if,last,owner,owner,last,owner,owner,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,seg,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,seg,else,seg,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t,segments,clear,successfully,released,true,catch,concurrent,modification,exception,e,while,successfully,released
MemoryManager -> public void release(Collection<MemorySegment> segments);1517317681;Tries to release many memory segments together.__<p>If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segments The segments to be released._@throws NullPointerException Thrown, if the given collection is null._@throws IllegalArgumentException Thrown, id the segments are of an incompatible type.;public void release(Collection<MemorySegment> segments) {_		if (segments == null) {_			return__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			boolean successfullyReleased = false__			do {_				final Iterator<MemorySegment> segmentsIterator = segments.iterator()___				Object lastOwner = null__				Set<MemorySegment> segsForOwner = null___				try {_					_					while (segmentsIterator.hasNext()) {__						final MemorySegment seg = segmentsIterator.next()__						if (seg == null || seg.isFreed()) {_							continue__						}__						final Object owner = seg.getOwner()___						try {_							_							_							if (lastOwner != owner) {_								lastOwner = owner__								segsForOwner = this.allocatedSegments.get(owner)__							}__							_							if (segsForOwner != null) {_								segsForOwner.remove(seg)__								if (segsForOwner.isEmpty()) {_									this.allocatedSegments.remove(owner)__								}_							}__							if (isPreAllocated) {_								memoryPool.returnSegmentToPool(seg)__							}_							else {_								seg.free()__								numNonAllocatedPages++__							}_						}_						catch (Throwable t) {_							throw new RuntimeException(_									"Error removing book-keeping reference to allocated memory segment.", t)__						}_					}__					segments.clear()___					_					successfullyReleased = true__				}_				catch (ConcurrentModificationException e) {_					_					_				}_			} while (!successfullyReleased)__		}_		_	};tries,to,release,many,memory,segments,together,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segments,the,segments,to,be,released,throws,null,pointer,exception,thrown,if,the,given,collection,is,null,throws,illegal,argument,exception,thrown,id,the,segments,are,of,an,incompatible,type;public,void,release,collection,memory,segment,segments,if,segments,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,boolean,successfully,released,false,do,final,iterator,memory,segment,segments,iterator,segments,iterator,object,last,owner,null,set,memory,segment,segs,for,owner,null,try,while,segments,iterator,has,next,final,memory,segment,seg,segments,iterator,next,if,seg,null,seg,is,freed,continue,final,object,owner,seg,get,owner,try,if,last,owner,owner,last,owner,owner,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,seg,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,seg,else,seg,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t,segments,clear,successfully,released,true,catch,concurrent,modification,exception,e,while,successfully,released
MemoryManager -> public void release(Collection<MemorySegment> segments);1533306678;Tries to release many memory segments together.__<p>If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segments The segments to be released._@throws NullPointerException Thrown, if the given collection is null._@throws IllegalArgumentException Thrown, id the segments are of an incompatible type.;public void release(Collection<MemorySegment> segments) {_		if (segments == null) {_			return__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			boolean successfullyReleased = false__			do {_				final Iterator<MemorySegment> segmentsIterator = segments.iterator()___				Object lastOwner = null__				Set<MemorySegment> segsForOwner = null___				try {_					_					while (segmentsIterator.hasNext()) {__						final MemorySegment seg = segmentsIterator.next()__						if (seg == null || seg.isFreed()) {_							continue__						}__						final Object owner = seg.getOwner()___						try {_							_							_							if (lastOwner != owner) {_								lastOwner = owner__								segsForOwner = this.allocatedSegments.get(owner)__							}__							_							if (segsForOwner != null) {_								segsForOwner.remove(seg)__								if (segsForOwner.isEmpty()) {_									this.allocatedSegments.remove(owner)__								}_							}__							if (isPreAllocated) {_								memoryPool.returnSegmentToPool(seg)__							}_							else {_								seg.free()__								numNonAllocatedPages++__							}_						}_						catch (Throwable t) {_							throw new RuntimeException(_									"Error removing book-keeping reference to allocated memory segment.", t)__						}_					}__					segments.clear()___					_					successfullyReleased = true__				}_				catch (ConcurrentModificationException e) {_					_					_				}_			} while (!successfullyReleased)__		}_		_	};tries,to,release,many,memory,segments,together,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segments,the,segments,to,be,released,throws,null,pointer,exception,thrown,if,the,given,collection,is,null,throws,illegal,argument,exception,thrown,id,the,segments,are,of,an,incompatible,type;public,void,release,collection,memory,segment,segments,if,segments,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,boolean,successfully,released,false,do,final,iterator,memory,segment,segments,iterator,segments,iterator,object,last,owner,null,set,memory,segment,segs,for,owner,null,try,while,segments,iterator,has,next,final,memory,segment,seg,segments,iterator,next,if,seg,null,seg,is,freed,continue,final,object,owner,seg,get,owner,try,if,last,owner,owner,last,owner,owner,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,seg,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,seg,else,seg,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t,segments,clear,successfully,released,true,catch,concurrent,modification,exception,e,while,successfully,released
MemoryManager -> public void release(Collection<MemorySegment> segments);1538389013;Tries to release many memory segments together.__<p>If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segments The segments to be released._@throws NullPointerException Thrown, if the given collection is null._@throws IllegalArgumentException Thrown, id the segments are of an incompatible type.;public void release(Collection<MemorySegment> segments) {_		if (segments == null) {_			return__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			boolean successfullyReleased = false__			do {_				final Iterator<MemorySegment> segmentsIterator = segments.iterator()___				Object lastOwner = null__				Set<MemorySegment> segsForOwner = null___				try {_					_					while (segmentsIterator.hasNext()) {__						final MemorySegment seg = segmentsIterator.next()__						if (seg == null || seg.isFreed()) {_							continue__						}__						final Object owner = seg.getOwner()___						try {_							_							_							if (lastOwner != owner) {_								lastOwner = owner__								segsForOwner = this.allocatedSegments.get(owner)__							}__							_							if (segsForOwner != null) {_								segsForOwner.remove(seg)__								if (segsForOwner.isEmpty()) {_									this.allocatedSegments.remove(owner)__								}_							}__							if (isPreAllocated) {_								memoryPool.returnSegmentToPool(seg)__							}_							else {_								seg.free()__								numNonAllocatedPages++__							}_						}_						catch (Throwable t) {_							throw new RuntimeException(_									"Error removing book-keeping reference to allocated memory segment.", t)__						}_					}__					segments.clear()___					_					successfullyReleased = true__				}_				catch (ConcurrentModificationException e) {_					_					_				}_			} while (!successfullyReleased)__		}_		_	};tries,to,release,many,memory,segments,together,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segments,the,segments,to,be,released,throws,null,pointer,exception,thrown,if,the,given,collection,is,null,throws,illegal,argument,exception,thrown,id,the,segments,are,of,an,incompatible,type;public,void,release,collection,memory,segment,segments,if,segments,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,boolean,successfully,released,false,do,final,iterator,memory,segment,segments,iterator,segments,iterator,object,last,owner,null,set,memory,segment,segs,for,owner,null,try,while,segments,iterator,has,next,final,memory,segment,seg,segments,iterator,next,if,seg,null,seg,is,freed,continue,final,object,owner,seg,get,owner,try,if,last,owner,owner,last,owner,owner,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,seg,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,seg,else,seg,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t,segments,clear,successfully,released,true,catch,concurrent,modification,exception,e,while,successfully,released
MemoryManager -> public void release(Collection<MemorySegment> segments);1539345486;Tries to release many memory segments together.__<p>If the memory manager manages pre-allocated memory, the memory segment goes back to the memory pool._Otherwise, the segment is only freed and made eligible for reclamation by the GC.__@param segments The segments to be released._@throws NullPointerException Thrown, if the given collection is null._@throws IllegalArgumentException Thrown, id the segments are of an incompatible type.;public void release(Collection<MemorySegment> segments) {_		if (segments == null) {_			return__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			_			boolean successfullyReleased = false__			do {_				final Iterator<MemorySegment> segmentsIterator = segments.iterator()___				Object lastOwner = null__				Set<MemorySegment> segsForOwner = null___				try {_					_					while (segmentsIterator.hasNext()) {__						final MemorySegment seg = segmentsIterator.next()__						if (seg == null || seg.isFreed()) {_							continue__						}__						final Object owner = seg.getOwner()___						try {_							_							_							if (lastOwner != owner) {_								lastOwner = owner__								segsForOwner = this.allocatedSegments.get(owner)__							}__							_							if (segsForOwner != null) {_								segsForOwner.remove(seg)__								if (segsForOwner.isEmpty()) {_									this.allocatedSegments.remove(owner)__								}_							}__							if (isPreAllocated) {_								memoryPool.returnSegmentToPool(seg)__							}_							else {_								seg.free()__								numNonAllocatedPages++__							}_						}_						catch (Throwable t) {_							throw new RuntimeException(_									"Error removing book-keeping reference to allocated memory segment.", t)__						}_					}__					segments.clear()___					_					successfullyReleased = true__				}_				catch (ConcurrentModificationException | NoSuchElementException e) {_					_					_				}_			} while (!successfullyReleased)__		}_		_	};tries,to,release,many,memory,segments,together,p,if,the,memory,manager,manages,pre,allocated,memory,the,memory,segment,goes,back,to,the,memory,pool,otherwise,the,segment,is,only,freed,and,made,eligible,for,reclamation,by,the,gc,param,segments,the,segments,to,be,released,throws,null,pointer,exception,thrown,if,the,given,collection,is,null,throws,illegal,argument,exception,thrown,id,the,segments,are,of,an,incompatible,type;public,void,release,collection,memory,segment,segments,if,segments,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,boolean,successfully,released,false,do,final,iterator,memory,segment,segments,iterator,segments,iterator,object,last,owner,null,set,memory,segment,segs,for,owner,null,try,while,segments,iterator,has,next,final,memory,segment,seg,segments,iterator,next,if,seg,null,seg,is,freed,continue,final,object,owner,seg,get,owner,try,if,last,owner,owner,last,owner,owner,segs,for,owner,this,allocated,segments,get,owner,if,segs,for,owner,null,segs,for,owner,remove,seg,if,segs,for,owner,is,empty,this,allocated,segments,remove,owner,if,is,pre,allocated,memory,pool,return,segment,to,pool,seg,else,seg,free,num,non,allocated,pages,catch,throwable,t,throw,new,runtime,exception,error,removing,book,keeping,reference,to,allocated,memory,segment,t,segments,clear,successfully,released,true,catch,concurrent,modification,exception,no,such,element,exception,e,while,successfully,released
MemoryManager -> public void releaseAll(Object owner);1441738685;Releases all memory segments for the given owner.__@param owner The owner memory segments are to be released.;public void releaseAll(Object owner) {_		if (owner == null) {_			return__		}__		_		synchronized (lock)_		{_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			final Set<MemorySegment> segments = allocatedSegments.remove(owner)___			_			if (segments == null || segments.isEmpty()) {_				return__			}__			_			if (isPreAllocated) {_				for (MemorySegment seg : segments) {_					memoryPool.returnSegmentToPool(seg)__				}_			}_			else {_				for (MemorySegment seg : segments) {_					seg.free()__				}_				numNonAllocatedPages += segments.size()__			}__			segments.clear()__		}_		_	};releases,all,memory,segments,for,the,given,owner,param,owner,the,owner,memory,segments,are,to,be,released;public,void,release,all,object,owner,if,owner,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,final,set,memory,segment,segments,allocated,segments,remove,owner,if,segments,null,segments,is,empty,return,if,is,pre,allocated,for,memory,segment,seg,segments,memory,pool,return,segment,to,pool,seg,else,for,memory,segment,seg,segments,seg,free,num,non,allocated,pages,segments,size,segments,clear
MemoryManager -> public void releaseAll(Object owner);1460741894;Releases all memory segments for the given owner.__@param owner The owner memory segments are to be released.;public void releaseAll(Object owner) {_		if (owner == null) {_			return__		}__		_		synchronized (lock)_		{_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			final Set<MemorySegment> segments = allocatedSegments.remove(owner)___			_			if (segments == null || segments.isEmpty()) {_				return__			}__			_			if (isPreAllocated) {_				for (MemorySegment seg : segments) {_					memoryPool.returnSegmentToPool(seg)__				}_			}_			else {_				for (MemorySegment seg : segments) {_					seg.free()__				}_				numNonAllocatedPages += segments.size()__			}__			segments.clear()__		}_		_	};releases,all,memory,segments,for,the,given,owner,param,owner,the,owner,memory,segments,are,to,be,released;public,void,release,all,object,owner,if,owner,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,final,set,memory,segment,segments,allocated,segments,remove,owner,if,segments,null,segments,is,empty,return,if,is,pre,allocated,for,memory,segment,seg,segments,memory,pool,return,segment,to,pool,seg,else,for,memory,segment,seg,segments,seg,free,num,non,allocated,pages,segments,size,segments,clear
MemoryManager -> public void releaseAll(Object owner);1470405838;Releases all memory segments for the given owner.__@param owner The owner memory segments are to be released.;public void releaseAll(Object owner) {_		if (owner == null) {_			return__		}__		_		synchronized (lock)_		{_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			final Set<MemorySegment> segments = allocatedSegments.remove(owner)___			_			if (segments == null || segments.isEmpty()) {_				return__			}__			_			if (isPreAllocated) {_				for (MemorySegment seg : segments) {_					memoryPool.returnSegmentToPool(seg)__				}_			}_			else {_				for (MemorySegment seg : segments) {_					seg.free()__				}_				numNonAllocatedPages += segments.size()__			}__			segments.clear()__		}_		_	};releases,all,memory,segments,for,the,given,owner,param,owner,the,owner,memory,segments,are,to,be,released;public,void,release,all,object,owner,if,owner,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,final,set,memory,segment,segments,allocated,segments,remove,owner,if,segments,null,segments,is,empty,return,if,is,pre,allocated,for,memory,segment,seg,segments,memory,pool,return,segment,to,pool,seg,else,for,memory,segment,seg,segments,seg,free,num,non,allocated,pages,segments,size,segments,clear
MemoryManager -> public void releaseAll(Object owner);1499282568;Releases all memory segments for the given owner.__@param owner The owner memory segments are to be released.;public void releaseAll(Object owner) {_		if (owner == null) {_			return__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			final Set<MemorySegment> segments = allocatedSegments.remove(owner)___			_			if (segments == null || segments.isEmpty()) {_				return__			}__			_			if (isPreAllocated) {_				for (MemorySegment seg : segments) {_					memoryPool.returnSegmentToPool(seg)__				}_			}_			else {_				for (MemorySegment seg : segments) {_					seg.free()__				}_				numNonAllocatedPages += segments.size()__			}__			segments.clear()__		}_		_	};releases,all,memory,segments,for,the,given,owner,param,owner,the,owner,memory,segments,are,to,be,released;public,void,release,all,object,owner,if,owner,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,final,set,memory,segment,segments,allocated,segments,remove,owner,if,segments,null,segments,is,empty,return,if,is,pre,allocated,for,memory,segment,seg,segments,memory,pool,return,segment,to,pool,seg,else,for,memory,segment,seg,segments,seg,free,num,non,allocated,pages,segments,size,segments,clear
MemoryManager -> public void releaseAll(Object owner);1507315082;Releases all memory segments for the given owner.__@param owner The owner memory segments are to be released.;public void releaseAll(Object owner) {_		if (owner == null) {_			return__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			final Set<MemorySegment> segments = allocatedSegments.remove(owner)___			_			if (segments == null || segments.isEmpty()) {_				return__			}__			_			if (isPreAllocated) {_				for (MemorySegment seg : segments) {_					memoryPool.returnSegmentToPool(seg)__				}_			}_			else {_				for (MemorySegment seg : segments) {_					seg.free()__				}_				numNonAllocatedPages += segments.size()__			}__			segments.clear()__		}_		_	};releases,all,memory,segments,for,the,given,owner,param,owner,the,owner,memory,segments,are,to,be,released;public,void,release,all,object,owner,if,owner,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,final,set,memory,segment,segments,allocated,segments,remove,owner,if,segments,null,segments,is,empty,return,if,is,pre,allocated,for,memory,segment,seg,segments,memory,pool,return,segment,to,pool,seg,else,for,memory,segment,seg,segments,seg,free,num,non,allocated,pages,segments,size,segments,clear
MemoryManager -> public void releaseAll(Object owner);1507316227;Releases all memory segments for the given owner.__@param owner The owner memory segments are to be released.;public void releaseAll(Object owner) {_		if (owner == null) {_			return__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			final Set<MemorySegment> segments = allocatedSegments.remove(owner)___			_			if (segments == null || segments.isEmpty()) {_				return__			}__			_			if (isPreAllocated) {_				for (MemorySegment seg : segments) {_					memoryPool.returnSegmentToPool(seg)__				}_			}_			else {_				for (MemorySegment seg : segments) {_					seg.free()__				}_				numNonAllocatedPages += segments.size()__			}__			segments.clear()__		}_		_	};releases,all,memory,segments,for,the,given,owner,param,owner,the,owner,memory,segments,are,to,be,released;public,void,release,all,object,owner,if,owner,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,final,set,memory,segment,segments,allocated,segments,remove,owner,if,segments,null,segments,is,empty,return,if,is,pre,allocated,for,memory,segment,seg,segments,memory,pool,return,segment,to,pool,seg,else,for,memory,segment,seg,segments,seg,free,num,non,allocated,pages,segments,size,segments,clear
MemoryManager -> public void releaseAll(Object owner);1517317681;Releases all memory segments for the given owner.__@param owner The owner memory segments are to be released.;public void releaseAll(Object owner) {_		if (owner == null) {_			return__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			final Set<MemorySegment> segments = allocatedSegments.remove(owner)___			_			if (segments == null || segments.isEmpty()) {_				return__			}__			_			if (isPreAllocated) {_				for (MemorySegment seg : segments) {_					memoryPool.returnSegmentToPool(seg)__				}_			}_			else {_				for (MemorySegment seg : segments) {_					seg.free()__				}_				numNonAllocatedPages += segments.size()__			}__			segments.clear()__		}_		_	};releases,all,memory,segments,for,the,given,owner,param,owner,the,owner,memory,segments,are,to,be,released;public,void,release,all,object,owner,if,owner,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,final,set,memory,segment,segments,allocated,segments,remove,owner,if,segments,null,segments,is,empty,return,if,is,pre,allocated,for,memory,segment,seg,segments,memory,pool,return,segment,to,pool,seg,else,for,memory,segment,seg,segments,seg,free,num,non,allocated,pages,segments,size,segments,clear
MemoryManager -> public void releaseAll(Object owner);1533306678;Releases all memory segments for the given owner.__@param owner The owner memory segments are to be released.;public void releaseAll(Object owner) {_		if (owner == null) {_			return__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			final Set<MemorySegment> segments = allocatedSegments.remove(owner)___			_			if (segments == null || segments.isEmpty()) {_				return__			}__			_			if (isPreAllocated) {_				for (MemorySegment seg : segments) {_					memoryPool.returnSegmentToPool(seg)__				}_			}_			else {_				for (MemorySegment seg : segments) {_					seg.free()__				}_				numNonAllocatedPages += segments.size()__			}__			segments.clear()__		}_		_	};releases,all,memory,segments,for,the,given,owner,param,owner,the,owner,memory,segments,are,to,be,released;public,void,release,all,object,owner,if,owner,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,final,set,memory,segment,segments,allocated,segments,remove,owner,if,segments,null,segments,is,empty,return,if,is,pre,allocated,for,memory,segment,seg,segments,memory,pool,return,segment,to,pool,seg,else,for,memory,segment,seg,segments,seg,free,num,non,allocated,pages,segments,size,segments,clear
MemoryManager -> public void releaseAll(Object owner);1538389013;Releases all memory segments for the given owner.__@param owner The owner memory segments are to be released.;public void releaseAll(Object owner) {_		if (owner == null) {_			return__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			final Set<MemorySegment> segments = allocatedSegments.remove(owner)___			_			if (segments == null || segments.isEmpty()) {_				return__			}__			_			if (isPreAllocated) {_				for (MemorySegment seg : segments) {_					memoryPool.returnSegmentToPool(seg)__				}_			}_			else {_				for (MemorySegment seg : segments) {_					seg.free()__				}_				numNonAllocatedPages += segments.size()__			}__			segments.clear()__		}_		_	};releases,all,memory,segments,for,the,given,owner,param,owner,the,owner,memory,segments,are,to,be,released;public,void,release,all,object,owner,if,owner,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,final,set,memory,segment,segments,allocated,segments,remove,owner,if,segments,null,segments,is,empty,return,if,is,pre,allocated,for,memory,segment,seg,segments,memory,pool,return,segment,to,pool,seg,else,for,memory,segment,seg,segments,seg,free,num,non,allocated,pages,segments,size,segments,clear
MemoryManager -> public void releaseAll(Object owner);1539345486;Releases all memory segments for the given owner.__@param owner The owner memory segments are to be released.;public void releaseAll(Object owner) {_		if (owner == null) {_			return__		}__		_		synchronized (lock) {_			if (isShutDown) {_				throw new IllegalStateException("Memory manager has been shut down.")__			}__			_			final Set<MemorySegment> segments = allocatedSegments.remove(owner)___			_			if (segments == null || segments.isEmpty()) {_				return__			}__			_			if (isPreAllocated) {_				for (MemorySegment seg : segments) {_					memoryPool.returnSegmentToPool(seg)__				}_			}_			else {_				for (MemorySegment seg : segments) {_					seg.free()__				}_				numNonAllocatedPages += segments.size()__			}__			segments.clear()__		}_		_	};releases,all,memory,segments,for,the,given,owner,param,owner,the,owner,memory,segments,are,to,be,released;public,void,release,all,object,owner,if,owner,null,return,synchronized,lock,if,is,shut,down,throw,new,illegal,state,exception,memory,manager,has,been,shut,down,final,set,memory,segment,segments,allocated,segments,remove,owner,if,segments,null,segments,is,empty,return,if,is,pre,allocated,for,memory,segment,seg,segments,memory,pool,return,segment,to,pool,seg,else,for,memory,segment,seg,segments,seg,free,num,non,allocated,pages,segments,size,segments,clear
MemoryManager -> public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException;1441738685;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param numPages The number of pages to allocate._@return A list with the memory segments._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException {_		final ArrayList<MemorySegment> segs = new ArrayList<MemorySegment>(numPages)__		allocatePages(owner, segs, numPages)__		return segs__	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,num,pages,the,number,of,pages,to,allocate,return,a,list,with,the,memory,segments,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,list,memory,segment,allocate,pages,object,owner,int,num,pages,throws,memory,allocation,exception,final,array,list,memory,segment,segs,new,array,list,memory,segment,num,pages,allocate,pages,owner,segs,num,pages,return,segs
MemoryManager -> public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException;1460741894;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param numPages The number of pages to allocate._@return A list with the memory segments._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException {_		final ArrayList<MemorySegment> segs = new ArrayList<MemorySegment>(numPages)__		allocatePages(owner, segs, numPages)__		return segs__	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,num,pages,the,number,of,pages,to,allocate,return,a,list,with,the,memory,segments,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,list,memory,segment,allocate,pages,object,owner,int,num,pages,throws,memory,allocation,exception,final,array,list,memory,segment,segs,new,array,list,memory,segment,num,pages,allocate,pages,owner,segs,num,pages,return,segs
MemoryManager -> public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException;1470405838;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param numPages The number of pages to allocate._@return A list with the memory segments._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException {_		final ArrayList<MemorySegment> segs = new ArrayList<MemorySegment>(numPages)__		allocatePages(owner, segs, numPages)__		return segs__	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,num,pages,the,number,of,pages,to,allocate,return,a,list,with,the,memory,segments,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,list,memory,segment,allocate,pages,object,owner,int,num,pages,throws,memory,allocation,exception,final,array,list,memory,segment,segs,new,array,list,memory,segment,num,pages,allocate,pages,owner,segs,num,pages,return,segs
MemoryManager -> public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException;1499282568;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param numPages The number of pages to allocate._@return A list with the memory segments._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException {_		final ArrayList<MemorySegment> segs = new ArrayList<MemorySegment>(numPages)__		allocatePages(owner, segs, numPages)__		return segs__	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,num,pages,the,number,of,pages,to,allocate,return,a,list,with,the,memory,segments,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,list,memory,segment,allocate,pages,object,owner,int,num,pages,throws,memory,allocation,exception,final,array,list,memory,segment,segs,new,array,list,memory,segment,num,pages,allocate,pages,owner,segs,num,pages,return,segs
MemoryManager -> public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException;1507315082;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param numPages The number of pages to allocate._@return A list with the memory segments._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException {_		final ArrayList<MemorySegment> segs = new ArrayList<MemorySegment>(numPages)__		allocatePages(owner, segs, numPages)__		return segs__	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,num,pages,the,number,of,pages,to,allocate,return,a,list,with,the,memory,segments,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,list,memory,segment,allocate,pages,object,owner,int,num,pages,throws,memory,allocation,exception,final,array,list,memory,segment,segs,new,array,list,memory,segment,num,pages,allocate,pages,owner,segs,num,pages,return,segs
MemoryManager -> public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException;1507316227;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param numPages The number of pages to allocate._@return A list with the memory segments._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException {_		final ArrayList<MemorySegment> segs = new ArrayList<MemorySegment>(numPages)__		allocatePages(owner, segs, numPages)__		return segs__	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,num,pages,the,number,of,pages,to,allocate,return,a,list,with,the,memory,segments,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,list,memory,segment,allocate,pages,object,owner,int,num,pages,throws,memory,allocation,exception,final,array,list,memory,segment,segs,new,array,list,memory,segment,num,pages,allocate,pages,owner,segs,num,pages,return,segs
MemoryManager -> public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException;1517317681;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param numPages The number of pages to allocate._@return A list with the memory segments._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException {_		final ArrayList<MemorySegment> segs = new ArrayList<MemorySegment>(numPages)__		allocatePages(owner, segs, numPages)__		return segs__	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,num,pages,the,number,of,pages,to,allocate,return,a,list,with,the,memory,segments,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,list,memory,segment,allocate,pages,object,owner,int,num,pages,throws,memory,allocation,exception,final,array,list,memory,segment,segs,new,array,list,memory,segment,num,pages,allocate,pages,owner,segs,num,pages,return,segs
MemoryManager -> public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException;1533306678;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param numPages The number of pages to allocate._@return A list with the memory segments._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException {_		final ArrayList<MemorySegment> segs = new ArrayList<MemorySegment>(numPages)__		allocatePages(owner, segs, numPages)__		return segs__	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,num,pages,the,number,of,pages,to,allocate,return,a,list,with,the,memory,segments,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,list,memory,segment,allocate,pages,object,owner,int,num,pages,throws,memory,allocation,exception,final,array,list,memory,segment,segs,new,array,list,memory,segment,num,pages,allocate,pages,owner,segs,num,pages,return,segs
MemoryManager -> public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException;1538389013;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param numPages The number of pages to allocate._@return A list with the memory segments._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException {_		final ArrayList<MemorySegment> segs = new ArrayList<MemorySegment>(numPages)__		allocatePages(owner, segs, numPages)__		return segs__	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,num,pages,the,number,of,pages,to,allocate,return,a,list,with,the,memory,segments,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,list,memory,segment,allocate,pages,object,owner,int,num,pages,throws,memory,allocation,exception,final,array,list,memory,segment,segs,new,array,list,memory,segment,num,pages,allocate,pages,owner,segs,num,pages,return,segs
MemoryManager -> public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException;1539345486;Allocates a set of memory segments from this memory manager. If the memory manager pre-allocated the_segments, they will be taken from the pool of memory segments. Otherwise, they will be allocated_as part of this call.__@param owner The owner to associate with the memory segment, for the fallback release._@param numPages The number of pages to allocate._@return A list with the memory segments._@throws MemoryAllocationException Thrown, if this memory manager does not have the requested amount_of memory pages any more.;public List<MemorySegment> allocatePages(Object owner, int numPages) throws MemoryAllocationException {_		final ArrayList<MemorySegment> segs = new ArrayList<MemorySegment>(numPages)__		allocatePages(owner, segs, numPages)__		return segs__	};allocates,a,set,of,memory,segments,from,this,memory,manager,if,the,memory,manager,pre,allocated,the,segments,they,will,be,taken,from,the,pool,of,memory,segments,otherwise,they,will,be,allocated,as,part,of,this,call,param,owner,the,owner,to,associate,with,the,memory,segment,for,the,fallback,release,param,num,pages,the,number,of,pages,to,allocate,return,a,list,with,the,memory,segments,throws,memory,allocation,exception,thrown,if,this,memory,manager,does,not,have,the,requested,amount,of,memory,pages,any,more;public,list,memory,segment,allocate,pages,object,owner,int,num,pages,throws,memory,allocation,exception,final,array,list,memory,segment,segs,new,array,list,memory,segment,num,pages,allocate,pages,owner,segs,num,pages,return,segs
MemoryManager -> public boolean isShutdown();1441738685;Checks whether the MemoryManager has been shut down.__@return True, if the memory manager is shut down, false otherwise.;public boolean isShutdown() {_		return isShutDown__	};checks,whether,the,memory,manager,has,been,shut,down,return,true,if,the,memory,manager,is,shut,down,false,otherwise;public,boolean,is,shutdown,return,is,shut,down
MemoryManager -> public boolean isShutdown();1460741894;Checks whether the MemoryManager has been shut down.__@return True, if the memory manager is shut down, false otherwise.;public boolean isShutdown() {_		return isShutDown__	};checks,whether,the,memory,manager,has,been,shut,down,return,true,if,the,memory,manager,is,shut,down,false,otherwise;public,boolean,is,shutdown,return,is,shut,down
MemoryManager -> public boolean isShutdown();1470405838;Checks whether the MemoryManager has been shut down.__@return True, if the memory manager is shut down, false otherwise.;public boolean isShutdown() {_		return isShutDown__	};checks,whether,the,memory,manager,has,been,shut,down,return,true,if,the,memory,manager,is,shut,down,false,otherwise;public,boolean,is,shutdown,return,is,shut,down
MemoryManager -> public boolean isShutdown();1499282568;Checks whether the MemoryManager has been shut down.__@return True, if the memory manager is shut down, false otherwise.;public boolean isShutdown() {_		return isShutDown__	};checks,whether,the,memory,manager,has,been,shut,down,return,true,if,the,memory,manager,is,shut,down,false,otherwise;public,boolean,is,shutdown,return,is,shut,down
MemoryManager -> public boolean isShutdown();1507315082;Checks whether the MemoryManager has been shut down.__@return True, if the memory manager is shut down, false otherwise.;public boolean isShutdown() {_		return isShutDown__	};checks,whether,the,memory,manager,has,been,shut,down,return,true,if,the,memory,manager,is,shut,down,false,otherwise;public,boolean,is,shutdown,return,is,shut,down
MemoryManager -> public boolean isShutdown();1507316227;Checks whether the MemoryManager has been shut down.__@return True, if the memory manager is shut down, false otherwise.;public boolean isShutdown() {_		return isShutDown__	};checks,whether,the,memory,manager,has,been,shut,down,return,true,if,the,memory,manager,is,shut,down,false,otherwise;public,boolean,is,shutdown,return,is,shut,down
MemoryManager -> public boolean isShutdown();1517317681;Checks whether the MemoryManager has been shut down.__@return True, if the memory manager is shut down, false otherwise.;public boolean isShutdown() {_		return isShutDown__	};checks,whether,the,memory,manager,has,been,shut,down,return,true,if,the,memory,manager,is,shut,down,false,otherwise;public,boolean,is,shutdown,return,is,shut,down
MemoryManager -> public boolean isShutdown();1533306678;Checks whether the MemoryManager has been shut down.__@return True, if the memory manager is shut down, false otherwise.;public boolean isShutdown() {_		return isShutDown__	};checks,whether,the,memory,manager,has,been,shut,down,return,true,if,the,memory,manager,is,shut,down,false,otherwise;public,boolean,is,shutdown,return,is,shut,down
MemoryManager -> public boolean isShutdown();1538389013;Checks whether the MemoryManager has been shut down.__@return True, if the memory manager is shut down, false otherwise.;public boolean isShutdown() {_		return isShutDown__	};checks,whether,the,memory,manager,has,been,shut,down,return,true,if,the,memory,manager,is,shut,down,false,otherwise;public,boolean,is,shutdown,return,is,shut,down
MemoryManager -> public boolean isShutdown();1539345486;Checks whether the MemoryManager has been shut down.__@return True, if the memory manager is shut down, false otherwise.;public boolean isShutdown() {_		return isShutDown__	};checks,whether,the,memory,manager,has,been,shut,down,return,true,if,the,memory,manager,is,shut,down,false,otherwise;public,boolean,is,shutdown,return,is,shut,down
MemoryManager -> public boolean isPreAllocated();1441738685;Checks whether this memory manager pre-allocates the memory.__@return True if the memory manager pre-allocates the memory, false if it allocates as needed.;public boolean isPreAllocated() {_		return isPreAllocated__	};checks,whether,this,memory,manager,pre,allocates,the,memory,return,true,if,the,memory,manager,pre,allocates,the,memory,false,if,it,allocates,as,needed;public,boolean,is,pre,allocated,return,is,pre,allocated
MemoryManager -> public boolean isPreAllocated();1460741894;Checks whether this memory manager pre-allocates the memory.__@return True if the memory manager pre-allocates the memory, false if it allocates as needed.;public boolean isPreAllocated() {_		return isPreAllocated__	};checks,whether,this,memory,manager,pre,allocates,the,memory,return,true,if,the,memory,manager,pre,allocates,the,memory,false,if,it,allocates,as,needed;public,boolean,is,pre,allocated,return,is,pre,allocated
MemoryManager -> public boolean isPreAllocated();1470405838;Checks whether this memory manager pre-allocates the memory.__@return True if the memory manager pre-allocates the memory, false if it allocates as needed.;public boolean isPreAllocated() {_		return isPreAllocated__	};checks,whether,this,memory,manager,pre,allocates,the,memory,return,true,if,the,memory,manager,pre,allocates,the,memory,false,if,it,allocates,as,needed;public,boolean,is,pre,allocated,return,is,pre,allocated
MemoryManager -> public boolean isPreAllocated();1499282568;Checks whether this memory manager pre-allocates the memory.__@return True if the memory manager pre-allocates the memory, false if it allocates as needed.;public boolean isPreAllocated() {_		return isPreAllocated__	};checks,whether,this,memory,manager,pre,allocates,the,memory,return,true,if,the,memory,manager,pre,allocates,the,memory,false,if,it,allocates,as,needed;public,boolean,is,pre,allocated,return,is,pre,allocated
MemoryManager -> public boolean isPreAllocated();1507315082;Checks whether this memory manager pre-allocates the memory.__@return True if the memory manager pre-allocates the memory, false if it allocates as needed.;public boolean isPreAllocated() {_		return isPreAllocated__	};checks,whether,this,memory,manager,pre,allocates,the,memory,return,true,if,the,memory,manager,pre,allocates,the,memory,false,if,it,allocates,as,needed;public,boolean,is,pre,allocated,return,is,pre,allocated
MemoryManager -> public boolean isPreAllocated();1507316227;Checks whether this memory manager pre-allocates the memory.__@return True if the memory manager pre-allocates the memory, false if it allocates as needed.;public boolean isPreAllocated() {_		return isPreAllocated__	};checks,whether,this,memory,manager,pre,allocates,the,memory,return,true,if,the,memory,manager,pre,allocates,the,memory,false,if,it,allocates,as,needed;public,boolean,is,pre,allocated,return,is,pre,allocated
MemoryManager -> public boolean isPreAllocated();1517317681;Checks whether this memory manager pre-allocates the memory.__@return True if the memory manager pre-allocates the memory, false if it allocates as needed.;public boolean isPreAllocated() {_		return isPreAllocated__	};checks,whether,this,memory,manager,pre,allocates,the,memory,return,true,if,the,memory,manager,pre,allocates,the,memory,false,if,it,allocates,as,needed;public,boolean,is,pre,allocated,return,is,pre,allocated
MemoryManager -> public boolean isPreAllocated();1533306678;Checks whether this memory manager pre-allocates the memory.__@return True if the memory manager pre-allocates the memory, false if it allocates as needed.;public boolean isPreAllocated() {_		return isPreAllocated__	};checks,whether,this,memory,manager,pre,allocates,the,memory,return,true,if,the,memory,manager,pre,allocates,the,memory,false,if,it,allocates,as,needed;public,boolean,is,pre,allocated,return,is,pre,allocated
MemoryManager -> public boolean isPreAllocated();1538389013;Checks whether this memory manager pre-allocates the memory.__@return True if the memory manager pre-allocates the memory, false if it allocates as needed.;public boolean isPreAllocated() {_		return isPreAllocated__	};checks,whether,this,memory,manager,pre,allocates,the,memory,return,true,if,the,memory,manager,pre,allocates,the,memory,false,if,it,allocates,as,needed;public,boolean,is,pre,allocated,return,is,pre,allocated
MemoryManager -> public boolean isPreAllocated();1539345486;Checks whether this memory manager pre-allocates the memory.__@return True if the memory manager pre-allocates the memory, false if it allocates as needed.;public boolean isPreAllocated() {_		return isPreAllocated__	};checks,whether,this,memory,manager,pre,allocates,the,memory,return,true,if,the,memory,manager,pre,allocates,the,memory,false,if,it,allocates,as,needed;public,boolean,is,pre,allocated,return,is,pre,allocated
MemoryManager -> public int computeNumberOfPages(double fraction);1441738685;Computes to how many pages the given number of bytes corresponds. If the given number of bytes is not an_exact multiple of a page size, the result is rounded down, such that a portion of the memory (smaller_than the page size) is not included.__@param fraction the fraction of the total memory per slot_@return The number of pages to which;public int computeNumberOfPages(double fraction) {_		if (fraction <= 0 || fraction > 1) {_			throw new IllegalArgumentException("The fraction of memory to allocate must within (0, 1].")__		}__		return (int)(totalNumPages * fraction / numberOfSlots)__	};computes,to,how,many,pages,the,given,number,of,bytes,corresponds,if,the,given,number,of,bytes,is,not,an,exact,multiple,of,a,page,size,the,result,is,rounded,down,such,that,a,portion,of,the,memory,smaller,than,the,page,size,is,not,included,param,fraction,the,fraction,of,the,total,memory,per,slot,return,the,number,of,pages,to,which;public,int,compute,number,of,pages,double,fraction,if,fraction,0,fraction,1,throw,new,illegal,argument,exception,the,fraction,of,memory,to,allocate,must,within,0,1,return,int,total,num,pages,fraction,number,of,slots
MemoryManager -> public int computeNumberOfPages(double fraction);1460741894;Computes to how many pages the given number of bytes corresponds. If the given number of bytes is not an_exact multiple of a page size, the result is rounded down, such that a portion of the memory (smaller_than the page size) is not included.__@param fraction the fraction of the total memory per slot_@return The number of pages to which;public int computeNumberOfPages(double fraction) {_		if (fraction <= 0 || fraction > 1) {_			throw new IllegalArgumentException("The fraction of memory to allocate must within (0, 1].")__		}__		return (int)(totalNumPages * fraction / numberOfSlots)__	};computes,to,how,many,pages,the,given,number,of,bytes,corresponds,if,the,given,number,of,bytes,is,not,an,exact,multiple,of,a,page,size,the,result,is,rounded,down,such,that,a,portion,of,the,memory,smaller,than,the,page,size,is,not,included,param,fraction,the,fraction,of,the,total,memory,per,slot,return,the,number,of,pages,to,which;public,int,compute,number,of,pages,double,fraction,if,fraction,0,fraction,1,throw,new,illegal,argument,exception,the,fraction,of,memory,to,allocate,must,within,0,1,return,int,total,num,pages,fraction,number,of,slots
MemoryManager -> public int computeNumberOfPages(double fraction);1470405838;Computes to how many pages the given number of bytes corresponds. If the given number of bytes is not an_exact multiple of a page size, the result is rounded down, such that a portion of the memory (smaller_than the page size) is not included.__@param fraction the fraction of the total memory per slot_@return The number of pages to which;public int computeNumberOfPages(double fraction) {_		if (fraction <= 0 || fraction > 1) {_			throw new IllegalArgumentException("The fraction of memory to allocate must within (0, 1].")__		}__		return (int)(totalNumPages * fraction / numberOfSlots)__	};computes,to,how,many,pages,the,given,number,of,bytes,corresponds,if,the,given,number,of,bytes,is,not,an,exact,multiple,of,a,page,size,the,result,is,rounded,down,such,that,a,portion,of,the,memory,smaller,than,the,page,size,is,not,included,param,fraction,the,fraction,of,the,total,memory,per,slot,return,the,number,of,pages,to,which;public,int,compute,number,of,pages,double,fraction,if,fraction,0,fraction,1,throw,new,illegal,argument,exception,the,fraction,of,memory,to,allocate,must,within,0,1,return,int,total,num,pages,fraction,number,of,slots
MemoryManager -> public int computeNumberOfPages(double fraction);1499282568;Computes to how many pages the given number of bytes corresponds. If the given number of bytes is not an_exact multiple of a page size, the result is rounded down, such that a portion of the memory (smaller_than the page size) is not included.__@param fraction the fraction of the total memory per slot_@return The number of pages to which;public int computeNumberOfPages(double fraction) {_		if (fraction <= 0 || fraction > 1) {_			throw new IllegalArgumentException("The fraction of memory to allocate must within (0, 1].")__		}__		return (int) (totalNumPages * fraction / numberOfSlots)__	};computes,to,how,many,pages,the,given,number,of,bytes,corresponds,if,the,given,number,of,bytes,is,not,an,exact,multiple,of,a,page,size,the,result,is,rounded,down,such,that,a,portion,of,the,memory,smaller,than,the,page,size,is,not,included,param,fraction,the,fraction,of,the,total,memory,per,slot,return,the,number,of,pages,to,which;public,int,compute,number,of,pages,double,fraction,if,fraction,0,fraction,1,throw,new,illegal,argument,exception,the,fraction,of,memory,to,allocate,must,within,0,1,return,int,total,num,pages,fraction,number,of,slots
MemoryManager -> public int computeNumberOfPages(double fraction);1507315082;Computes to how many pages the given number of bytes corresponds. If the given number of bytes is not an_exact multiple of a page size, the result is rounded down, such that a portion of the memory (smaller_than the page size) is not included.__@param fraction the fraction of the total memory per slot_@return The number of pages to which;public int computeNumberOfPages(double fraction) {_		if (fraction <= 0 || fraction > 1) {_			throw new IllegalArgumentException("The fraction of memory to allocate must within (0, 1].")__		}__		return (int) (totalNumPages * fraction / numberOfSlots)__	};computes,to,how,many,pages,the,given,number,of,bytes,corresponds,if,the,given,number,of,bytes,is,not,an,exact,multiple,of,a,page,size,the,result,is,rounded,down,such,that,a,portion,of,the,memory,smaller,than,the,page,size,is,not,included,param,fraction,the,fraction,of,the,total,memory,per,slot,return,the,number,of,pages,to,which;public,int,compute,number,of,pages,double,fraction,if,fraction,0,fraction,1,throw,new,illegal,argument,exception,the,fraction,of,memory,to,allocate,must,within,0,1,return,int,total,num,pages,fraction,number,of,slots
MemoryManager -> public int computeNumberOfPages(double fraction);1507316227;Computes to how many pages the given number of bytes corresponds. If the given number of bytes is not an_exact multiple of a page size, the result is rounded down, such that a portion of the memory (smaller_than the page size) is not included.__@param fraction the fraction of the total memory per slot_@return The number of pages to which;public int computeNumberOfPages(double fraction) {_		if (fraction <= 0 || fraction > 1) {_			throw new IllegalArgumentException("The fraction of memory to allocate must within (0, 1].")__		}__		return (int) (totalNumPages * fraction / numberOfSlots)__	};computes,to,how,many,pages,the,given,number,of,bytes,corresponds,if,the,given,number,of,bytes,is,not,an,exact,multiple,of,a,page,size,the,result,is,rounded,down,such,that,a,portion,of,the,memory,smaller,than,the,page,size,is,not,included,param,fraction,the,fraction,of,the,total,memory,per,slot,return,the,number,of,pages,to,which;public,int,compute,number,of,pages,double,fraction,if,fraction,0,fraction,1,throw,new,illegal,argument,exception,the,fraction,of,memory,to,allocate,must,within,0,1,return,int,total,num,pages,fraction,number,of,slots
MemoryManager -> public int computeNumberOfPages(double fraction);1517317681;Computes to how many pages the given number of bytes corresponds. If the given number of bytes is not an_exact multiple of a page size, the result is rounded down, such that a portion of the memory (smaller_than the page size) is not included.__@param fraction the fraction of the total memory per slot_@return The number of pages to which;public int computeNumberOfPages(double fraction) {_		if (fraction <= 0 || fraction > 1) {_			throw new IllegalArgumentException("The fraction of memory to allocate must within (0, 1].")__		}__		return (int) (totalNumPages * fraction / numberOfSlots)__	};computes,to,how,many,pages,the,given,number,of,bytes,corresponds,if,the,given,number,of,bytes,is,not,an,exact,multiple,of,a,page,size,the,result,is,rounded,down,such,that,a,portion,of,the,memory,smaller,than,the,page,size,is,not,included,param,fraction,the,fraction,of,the,total,memory,per,slot,return,the,number,of,pages,to,which;public,int,compute,number,of,pages,double,fraction,if,fraction,0,fraction,1,throw,new,illegal,argument,exception,the,fraction,of,memory,to,allocate,must,within,0,1,return,int,total,num,pages,fraction,number,of,slots
MemoryManager -> public int computeNumberOfPages(double fraction);1533306678;Computes to how many pages the given number of bytes corresponds. If the given number of bytes is not an_exact multiple of a page size, the result is rounded down, such that a portion of the memory (smaller_than the page size) is not included.__@param fraction the fraction of the total memory per slot_@return The number of pages to which;public int computeNumberOfPages(double fraction) {_		if (fraction <= 0 || fraction > 1) {_			throw new IllegalArgumentException("The fraction of memory to allocate must within (0, 1].")__		}__		return (int) (totalNumPages * fraction / numberOfSlots)__	};computes,to,how,many,pages,the,given,number,of,bytes,corresponds,if,the,given,number,of,bytes,is,not,an,exact,multiple,of,a,page,size,the,result,is,rounded,down,such,that,a,portion,of,the,memory,smaller,than,the,page,size,is,not,included,param,fraction,the,fraction,of,the,total,memory,per,slot,return,the,number,of,pages,to,which;public,int,compute,number,of,pages,double,fraction,if,fraction,0,fraction,1,throw,new,illegal,argument,exception,the,fraction,of,memory,to,allocate,must,within,0,1,return,int,total,num,pages,fraction,number,of,slots
MemoryManager -> public int computeNumberOfPages(double fraction);1538389013;Computes to how many pages the given number of bytes corresponds. If the given number of bytes is not an_exact multiple of a page size, the result is rounded down, such that a portion of the memory (smaller_than the page size) is not included.__@param fraction the fraction of the total memory per slot_@return The number of pages to which;public int computeNumberOfPages(double fraction) {_		if (fraction <= 0 || fraction > 1) {_			throw new IllegalArgumentException("The fraction of memory to allocate must within (0, 1].")__		}__		return (int) (totalNumPages * fraction / numberOfSlots)__	};computes,to,how,many,pages,the,given,number,of,bytes,corresponds,if,the,given,number,of,bytes,is,not,an,exact,multiple,of,a,page,size,the,result,is,rounded,down,such,that,a,portion,of,the,memory,smaller,than,the,page,size,is,not,included,param,fraction,the,fraction,of,the,total,memory,per,slot,return,the,number,of,pages,to,which;public,int,compute,number,of,pages,double,fraction,if,fraction,0,fraction,1,throw,new,illegal,argument,exception,the,fraction,of,memory,to,allocate,must,within,0,1,return,int,total,num,pages,fraction,number,of,slots
MemoryManager -> public int computeNumberOfPages(double fraction);1539345486;Computes to how many pages the given number of bytes corresponds. If the given number of bytes is not an_exact multiple of a page size, the result is rounded down, such that a portion of the memory (smaller_than the page size) is not included.__@param fraction the fraction of the total memory per slot_@return The number of pages to which;public int computeNumberOfPages(double fraction) {_		if (fraction <= 0 || fraction > 1) {_			throw new IllegalArgumentException("The fraction of memory to allocate must within (0, 1].")__		}__		return (int) (totalNumPages * fraction / numberOfSlots)__	};computes,to,how,many,pages,the,given,number,of,bytes,corresponds,if,the,given,number,of,bytes,is,not,an,exact,multiple,of,a,page,size,the,result,is,rounded,down,such,that,a,portion,of,the,memory,smaller,than,the,page,size,is,not,included,param,fraction,the,fraction,of,the,total,memory,per,slot,return,the,number,of,pages,to,which;public,int,compute,number,of,pages,double,fraction,if,fraction,0,fraction,1,throw,new,illegal,argument,exception,the,fraction,of,memory,to,allocate,must,within,0,1,return,int,total,num,pages,fraction,number,of,slots
MemoryManager -> public long getMemorySize();1441738685;Returns the total size of memory handled by this memory manager.__@return The total size of memory.;public long getMemorySize() {_		return memorySize__	};returns,the,total,size,of,memory,handled,by,this,memory,manager,return,the,total,size,of,memory;public,long,get,memory,size,return,memory,size
MemoryManager -> public long getMemorySize();1460741894;Returns the total size of memory handled by this memory manager.__@return The total size of memory.;public long getMemorySize() {_		return memorySize__	};returns,the,total,size,of,memory,handled,by,this,memory,manager,return,the,total,size,of,memory;public,long,get,memory,size,return,memory,size
MemoryManager -> public long getMemorySize();1470405838;Returns the total size of memory handled by this memory manager.__@return The total size of memory.;public long getMemorySize() {_		return memorySize__	};returns,the,total,size,of,memory,handled,by,this,memory,manager,return,the,total,size,of,memory;public,long,get,memory,size,return,memory,size
MemoryManager -> public long getMemorySize();1499282568;Returns the total size of memory handled by this memory manager.__@return The total size of memory.;public long getMemorySize() {_		return memorySize__	};returns,the,total,size,of,memory,handled,by,this,memory,manager,return,the,total,size,of,memory;public,long,get,memory,size,return,memory,size
MemoryManager -> public long getMemorySize();1507315082;Returns the total size of memory handled by this memory manager.__@return The total size of memory.;public long getMemorySize() {_		return memorySize__	};returns,the,total,size,of,memory,handled,by,this,memory,manager,return,the,total,size,of,memory;public,long,get,memory,size,return,memory,size
MemoryManager -> public long getMemorySize();1507316227;Returns the total size of memory handled by this memory manager.__@return The total size of memory.;public long getMemorySize() {_		return memorySize__	};returns,the,total,size,of,memory,handled,by,this,memory,manager,return,the,total,size,of,memory;public,long,get,memory,size,return,memory,size
MemoryManager -> public long getMemorySize();1517317681;Returns the total size of memory handled by this memory manager.__@return The total size of memory.;public long getMemorySize() {_		return memorySize__	};returns,the,total,size,of,memory,handled,by,this,memory,manager,return,the,total,size,of,memory;public,long,get,memory,size,return,memory,size
MemoryManager -> public long getMemorySize();1533306678;Returns the total size of memory handled by this memory manager.__@return The total size of memory.;public long getMemorySize() {_		return memorySize__	};returns,the,total,size,of,memory,handled,by,this,memory,manager,return,the,total,size,of,memory;public,long,get,memory,size,return,memory,size
MemoryManager -> public long getMemorySize();1538389013;Returns the total size of memory handled by this memory manager.__@return The total size of memory.;public long getMemorySize() {_		return memorySize__	};returns,the,total,size,of,memory,handled,by,this,memory,manager,return,the,total,size,of,memory;public,long,get,memory,size,return,memory,size
MemoryManager -> public long getMemorySize();1539345486;Returns the total size of memory handled by this memory manager.__@return The total size of memory.;public long getMemorySize() {_		return memorySize__	};returns,the,total,size,of,memory,handled,by,this,memory,manager,return,the,total,size,of,memory;public,long,get,memory,size,return,memory,size
MemoryManager -> public MemoryType getMemoryType();1441738685;Gets the type of memory (heap / off-heap) managed by this memory manager.__@return The type of memory managed by this memory manager.;public MemoryType getMemoryType() {_		return memoryType__	};gets,the,type,of,memory,heap,off,heap,managed,by,this,memory,manager,return,the,type,of,memory,managed,by,this,memory,manager;public,memory,type,get,memory,type,return,memory,type
MemoryManager -> public MemoryType getMemoryType();1460741894;Gets the type of memory (heap / off-heap) managed by this memory manager.__@return The type of memory managed by this memory manager.;public MemoryType getMemoryType() {_		return memoryType__	};gets,the,type,of,memory,heap,off,heap,managed,by,this,memory,manager,return,the,type,of,memory,managed,by,this,memory,manager;public,memory,type,get,memory,type,return,memory,type
MemoryManager -> public MemoryType getMemoryType();1470405838;Gets the type of memory (heap / off-heap) managed by this memory manager.__@return The type of memory managed by this memory manager.;public MemoryType getMemoryType() {_		return memoryType__	};gets,the,type,of,memory,heap,off,heap,managed,by,this,memory,manager,return,the,type,of,memory,managed,by,this,memory,manager;public,memory,type,get,memory,type,return,memory,type
MemoryManager -> public MemoryType getMemoryType();1499282568;Gets the type of memory (heap / off-heap) managed by this memory manager.__@return The type of memory managed by this memory manager.;public MemoryType getMemoryType() {_		return memoryType__	};gets,the,type,of,memory,heap,off,heap,managed,by,this,memory,manager,return,the,type,of,memory,managed,by,this,memory,manager;public,memory,type,get,memory,type,return,memory,type
MemoryManager -> public MemoryType getMemoryType();1507315082;Gets the type of memory (heap / off-heap) managed by this memory manager.__@return The type of memory managed by this memory manager.;public MemoryType getMemoryType() {_		return memoryType__	};gets,the,type,of,memory,heap,off,heap,managed,by,this,memory,manager,return,the,type,of,memory,managed,by,this,memory,manager;public,memory,type,get,memory,type,return,memory,type
MemoryManager -> public MemoryType getMemoryType();1507316227;Gets the type of memory (heap / off-heap) managed by this memory manager.__@return The type of memory managed by this memory manager.;public MemoryType getMemoryType() {_		return memoryType__	};gets,the,type,of,memory,heap,off,heap,managed,by,this,memory,manager,return,the,type,of,memory,managed,by,this,memory,manager;public,memory,type,get,memory,type,return,memory,type
MemoryManager -> public MemoryType getMemoryType();1517317681;Gets the type of memory (heap / off-heap) managed by this memory manager.__@return The type of memory managed by this memory manager.;public MemoryType getMemoryType() {_		return memoryType__	};gets,the,type,of,memory,heap,off,heap,managed,by,this,memory,manager,return,the,type,of,memory,managed,by,this,memory,manager;public,memory,type,get,memory,type,return,memory,type
MemoryManager -> public MemoryType getMemoryType();1533306678;Gets the type of memory (heap / off-heap) managed by this memory manager.__@return The type of memory managed by this memory manager.;public MemoryType getMemoryType() {_		return memoryType__	};gets,the,type,of,memory,heap,off,heap,managed,by,this,memory,manager,return,the,type,of,memory,managed,by,this,memory,manager;public,memory,type,get,memory,type,return,memory,type
MemoryManager -> public MemoryType getMemoryType();1538389013;Gets the type of memory (heap / off-heap) managed by this memory manager.__@return The type of memory managed by this memory manager.;public MemoryType getMemoryType() {_		return memoryType__	};gets,the,type,of,memory,heap,off,heap,managed,by,this,memory,manager,return,the,type,of,memory,managed,by,this,memory,manager;public,memory,type,get,memory,type,return,memory,type
MemoryManager -> public MemoryType getMemoryType();1539345486;Gets the type of memory (heap / off-heap) managed by this memory manager.__@return The type of memory managed by this memory manager.;public MemoryType getMemoryType() {_		return memoryType__	};gets,the,type,of,memory,heap,off,heap,managed,by,this,memory,manager,return,the,type,of,memory,managed,by,this,memory,manager;public,memory,type,get,memory,type,return,memory,type
