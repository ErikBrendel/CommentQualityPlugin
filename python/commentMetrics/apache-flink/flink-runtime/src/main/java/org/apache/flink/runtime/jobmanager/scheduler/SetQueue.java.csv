commented;modifiers;parameterAmount;loc;comment;code
false;public;1;13;;@Override public boolean offer(E e) {     if (e == null) {         throw new NullPointerException().     }     // may, or may not, add the element.     set.add(e).     // due to capacity constraints     return true. }
false;public;0;11;;@Override public E poll() {     Iterator<E> iter = set.iterator().     if (iter.hasNext()) {         E next = iter.next().         iter.remove().         return next.     } else {         return null.     } }
false;public;0;9;;@Override public E peek() {     Iterator<E> iter = set.iterator().     if (iter.hasNext()) {         return iter.next().     } else {         return null.     } }
false;public;0;4;;@Override public Iterator<E> iterator() {     return set.iterator(). }
false;public;0;4;;@Override public int size() {     return set.size(). }
false;public;0;4;;@Override public void clear() {     set.clear(). }
false;public;1;4;;@Override public boolean remove(Object o) {     return set.remove(o). }
false;public;1;4;;@Override public boolean contains(Object o) {     return set.contains(o). }
false;public;1;4;;@Override public boolean removeAll(Collection<?> c) {     return set.removeAll(c). }
false;public;1;4;;@Override public boolean containsAll(Collection<?> c) {     return set.containsAll(c). }
false;public;1;4;;@Override public boolean retainAll(Collection<?> c) {     return set.retainAll(c). }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public int hashCode() {     return set.hashCode(). }
false;public;1;9;;@Override public boolean equals(Object obj) {     if (obj != null && obj.getClass() == SetQueue.class) {         return set.equals(((SetQueue<?>) obj).set).     } else {         return false.     } }
false;public;0;4;;@Override public String toString() {     return set.toString(). }
