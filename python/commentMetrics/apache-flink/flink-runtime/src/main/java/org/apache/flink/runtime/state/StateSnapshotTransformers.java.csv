commented;modifiers;parameterAmount;loc;comment;code
false;public;1;25;;@Override @Nullable public List<T> filterOrTransform(@Nullable List<T> list) {     if (list == null) {         return null.     }     List<T> transformedList = new ArrayList<>().     boolean anyChange = false.     for (int i = 0. i < list.size(). i++) {         T entry = list.get(i).         T transformedEntry = entryValueTransformer.filterOrTransform(entry).         if (transformedEntry != null) {             if (transformStrategy == STOP_ON_FIRST_INCLUDED) {                 transformedList = list.subList(i, list.size()).                 anyChange = i > 0.                 break.             } else {                 transformedList.add(transformedEntry).             }         }         anyChange |= transformedEntry == null || !Objects.equals(entry, transformedEntry).     }     transformedList = anyChange ? transformedList : list.     return transformedList.isEmpty() ? null : transformedList. }
false;public;0;4;;@Override public Optional<StateSnapshotTransformer<List<T>>> createForDeserializedState() {     return originalSnapshotTransformFactory.createForDeserializedState().map(ListStateSnapshotTransformer::new). }
false;public;1;17;;@Nullable @Override public Map<K, V> filterOrTransform(@Nullable Map<K, V> map) {     if (map == null) {         return null.     }     Map<K, V> transformedMap = new HashMap<>().     boolean anyChange = false.     for (Map.Entry<K, V> entry : map.entrySet()) {         V transformedValue = entryValueTransformer.filterOrTransform(entry.getValue()).         if (transformedValue != null) {             transformedMap.put(entry.getKey(), transformedValue).         }         anyChange |= transformedValue == null || !Objects.equals(entry.getValue(), transformedValue).     }     return anyChange ? (transformedMap.isEmpty() ? null : transformedMap) : map. }
false;public;0;4;;@Override public Optional<StateSnapshotTransformer<Map<K, V>>> createForDeserializedState() {     return originalSnapshotTransformFactory.createForDeserializedState().map(MapStateSnapshotTransformer::new). }
false;public;0;4;;@Override public Optional<StateSnapshotTransformer<T>> createForDeserializedState() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Optional<StateSnapshotTransformer<byte[]>> createForSerializedState() {     throw new UnsupportedOperationException(). }
