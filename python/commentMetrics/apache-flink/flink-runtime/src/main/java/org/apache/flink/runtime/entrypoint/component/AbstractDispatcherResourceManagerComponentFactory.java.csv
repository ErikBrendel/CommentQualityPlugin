commented;modifiers;parameterAmount;loc;comment;code
false;public;9;162;;@Override public DispatcherResourceManagerComponent<T> create(Configuration configuration, RpcService rpcService, HighAvailabilityServices highAvailabilityServices, BlobServer blobServer, HeartbeatServices heartbeatServices, MetricRegistry metricRegistry, ArchivedExecutionGraphStore archivedExecutionGraphStore, MetricQueryServiceRetriever metricQueryServiceRetriever, FatalErrorHandler fatalErrorHandler) throws Exception {     LeaderRetrievalService dispatcherLeaderRetrievalService = null.     LeaderRetrievalService resourceManagerRetrievalService = null.     WebMonitorEndpoint<U> webMonitorEndpoint = null.     ResourceManager<?> resourceManager = null.     JobManagerMetricGroup jobManagerMetricGroup = null.     T dispatcher = null.     try {         dispatcherLeaderRetrievalService = highAvailabilityServices.getDispatcherLeaderRetriever().         resourceManagerRetrievalService = highAvailabilityServices.getResourceManagerLeaderRetriever().         final LeaderGatewayRetriever<DispatcherGateway> dispatcherGatewayRetriever = new RpcGatewayRetriever<>(rpcService, DispatcherGateway.class, DispatcherId::fromUuid, 10, Time.milliseconds(50L)).         final LeaderGatewayRetriever<ResourceManagerGateway> resourceManagerGatewayRetriever = new RpcGatewayRetriever<>(rpcService, ResourceManagerGateway.class, ResourceManagerId::fromUuid, 10, Time.milliseconds(50L)).         final ExecutorService executor = WebMonitorEndpoint.createExecutorService(configuration.getInteger(RestOptions.SERVER_NUM_THREADS), configuration.getInteger(RestOptions.SERVER_THREAD_PRIORITY), "DispatcherRestEndpoint").         final long updateInterval = configuration.getLong(MetricOptions.METRIC_FETCHER_UPDATE_INTERVAL).         final MetricFetcher metricFetcher = updateInterval == 0 ? VoidMetricFetcher.INSTANCE : MetricFetcherImpl.fromConfiguration(configuration, metricQueryServiceRetriever, dispatcherGatewayRetriever, executor).         webMonitorEndpoint = restEndpointFactory.createRestEndpoint(configuration, dispatcherGatewayRetriever, resourceManagerGatewayRetriever, blobServer, executor, metricFetcher, highAvailabilityServices.getWebMonitorLeaderElectionService(), fatalErrorHandler).         log.debug("Starting Dispatcher REST endpoint.").         webMonitorEndpoint.start().         final String hostname = getHostname(rpcService).         jobManagerMetricGroup = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostname, ConfigurationUtils.getSystemResourceMetricsProbingInterval(configuration)).         resourceManager = resourceManagerFactory.createResourceManager(configuration, ResourceID.generate(), rpcService, highAvailabilityServices, heartbeatServices, metricRegistry, fatalErrorHandler, new ClusterInformation(hostname, blobServer.getPort()), webMonitorEndpoint.getRestBaseUrl(), jobManagerMetricGroup).         final HistoryServerArchivist historyServerArchivist = HistoryServerArchivist.createHistoryServerArchivist(configuration, webMonitorEndpoint).         dispatcher = dispatcherFactory.createDispatcher(configuration, rpcService, highAvailabilityServices, resourceManagerGatewayRetriever, blobServer, heartbeatServices, jobManagerMetricGroup, metricRegistry.getMetricQueryServicePath(), archivedExecutionGraphStore, fatalErrorHandler, historyServerArchivist).         log.debug("Starting ResourceManager.").         resourceManager.start().         resourceManagerRetrievalService.start(resourceManagerGatewayRetriever).         log.debug("Starting Dispatcher.").         dispatcher.start().         dispatcherLeaderRetrievalService.start(dispatcherGatewayRetriever).         return createDispatcherResourceManagerComponent(dispatcher, resourceManager, dispatcherLeaderRetrievalService, resourceManagerRetrievalService, webMonitorEndpoint, jobManagerMetricGroup).     } catch (Exception exception) {         // clean up all started components         if (dispatcherLeaderRetrievalService != null) {             try {                 dispatcherLeaderRetrievalService.stop().             } catch (Exception e) {                 exception = ExceptionUtils.firstOrSuppressed(e, exception).             }         }         if (resourceManagerRetrievalService != null) {             try {                 resourceManagerRetrievalService.stop().             } catch (Exception e) {                 exception = ExceptionUtils.firstOrSuppressed(e, exception).             }         }         final Collection<CompletableFuture<Void>> terminationFutures = new ArrayList<>(3).         if (webMonitorEndpoint != null) {             terminationFutures.add(webMonitorEndpoint.closeAsync()).         }         if (resourceManager != null) {             terminationFutures.add(resourceManager.closeAsync()).         }         if (dispatcher != null) {             terminationFutures.add(dispatcher.closeAsync()).         }         final FutureUtils.ConjunctFuture<Void> terminationFuture = FutureUtils.completeAll(terminationFutures).         try {             terminationFuture.get().         } catch (Exception e) {             exception = ExceptionUtils.firstOrSuppressed(e, exception).         }         if (jobManagerMetricGroup != null) {             jobManagerMetricGroup.close().         }         throw new FlinkException("Could not create the DispatcherResourceManagerComponent.", exception).     } }
false;protected;1;4;;protected String getHostname(RpcService rpcService) {     final String rpcServiceAddress = rpcService.getAddress().     return rpcServiceAddress != null && rpcServiceAddress.isEmpty() ? "localhost" : rpcServiceAddress. }
false;protected,abstract;6;7;;protected abstract DispatcherResourceManagerComponent<T> createDispatcherResourceManagerComponent(T dispatcher, ResourceManager<?> resourceManager, LeaderRetrievalService dispatcherLeaderRetrievalService, LeaderRetrievalService resourceManagerRetrievalService, WebMonitorEndpoint<?> webMonitorEndpoint, JobManagerMetricGroup jobManagerMetricGroup).
