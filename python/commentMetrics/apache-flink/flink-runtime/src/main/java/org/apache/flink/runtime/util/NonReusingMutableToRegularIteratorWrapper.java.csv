commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Override public boolean hasNext() {     if (currentIsAvailable) {         return true.     } else {         try {             if ((current = source.next()) != null) {                 currentIsAvailable = true.                 return true.             } else {                 return false.             }         } catch (IOException ioex) {             throw new RuntimeException("Error reading next record: " + ioex.getMessage(), ioex).         }     } }
false;public;0;9;;@Override public T next() {     if (currentIsAvailable || hasNext()) {         currentIsAvailable = false.         return current.     } else {         throw new NoSuchElementException().     } }
false;public;0;4;;@Override public void remove() {     throw new UnsupportedOperationException(). }
false;public;0;10;;@Override public Iterator<T> iterator() {     if (iteratorAvailable) {         iteratorAvailable = false.         return this.     } else {         throw new TraversableOnceException().     } }
