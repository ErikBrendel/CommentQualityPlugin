commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void open() {     if (LOG.isDebugEnabled()) {         LOG.debug("Spilling Resettable Iterator opened.").     } }
false;public;0;4;;public void reset() throws IOException {     this.inView = this.buffer.flip().     this.currentElementNum = 0. }
false;public;0;35;;@Override public boolean hasNext() {     if (this.next == null) {         if (this.inView != null) {             if (this.currentElementNum < this.elementCount) {                 try {                     this.instance = this.serializer.deserialize(this.instance, this.inView).                 } catch (IOException e) {                     throw new RuntimeException("SpillingIterator: Error reading element from buffer.", e).                 }                 this.next = this.instance.                 this.currentElementNum++.                 return true.             } else {                 return false.             }         } else {             // writing pass (first)             if (this.input.hasNext()) {                 this.next = this.input.next().                 try {                     this.serializer.serialize(this.next, this.buffer).                 } catch (IOException e) {                     throw new RuntimeException("SpillingIterator: Error writing element to buffer.", e).                 }                 this.elementCount++.                 return true.             } else {                 return false.             }         }     } else {         return true.     } }
false;public;0;10;;@Override public T next() {     if (this.next != null || hasNext()) {         final T out = this.next.         this.next = null.         return out.     } else {         throw new NoSuchElementException().     } }
false;public;0;4;;@Override public void remove() {     throw new UnsupportedOperationException(). }
false;public;0;18;;public List<MemorySegment> close() throws IOException {     if (LOG.isDebugEnabled()) {         LOG.debug("Spilling Resettable Iterator closing. Stored " + this.elementCount + " records.").     }     this.inView = null.     final List<MemorySegment> memory = this.buffer.close().     memory.addAll(this.memorySegments).     this.memorySegments.clear().     if (this.releaseMemoryOnClose) {         this.memoryManager.release(memory).         return Collections.emptyList().     } else {         return memory.     } }
