commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public JobID getJobId() {     return jobId. }
false;public;0;3;;public long getNetRuntime() {     return netRuntime. }
true;public;1;3;/**  * Gets the net execution time of the job, i.e., the execution time in the parallel system,  * without the pre-flight steps like the optimizer in a desired time unit.  *  * @param desiredUnit the unit of the <tt>NetRuntime</tt>  * @return The net execution time in the desired unit.  */ ;/**  * Gets the net execution time of the job, i.e., the execution time in the parallel system,  * without the pre-flight steps like the optimizer in a desired time unit.  *  * @param desiredUnit the unit of the <tt>NetRuntime</tt>  * @return The net execution time in the desired unit.  */ public long getNetRuntime(TimeUnit desiredUnit) {     return desiredUnit.convert(getNetRuntime(), TimeUnit.MILLISECONDS). }
false;public;0;3;;public Map<String, SerializedValue<OptionalFailure<Object>>> getSerializedAccumulatorResults() {     return this.accumulatorResults. }
false;public;1;6;;public JobExecutionResult toJobExecutionResult(ClassLoader loader) throws IOException, ClassNotFoundException {     Map<String, OptionalFailure<Object>> accumulators = AccumulatorHelper.deserializeAccumulators(accumulatorResults, loader).     return new JobExecutionResult(jobId, netRuntime, accumulators). }
