commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Adds the given value to this accumulator.  *  * @param value value to add  */ ;/**  * Adds the given value to this accumulator.  *  * @param value value to add  */ void add(double value).
true;;0;1;/**  * Returns the current value of this accumulator.  *  * @return current value of this accumulator  */ ;/**  * Returns the current value of this accumulator.  *  * @return current value of this accumulator  */ double getValue().
true;;0;1;/**  * Returns the name of this accumulator type. This name is used as a suffix for exposed metrics.  *  * @return name of this accumulator type  */ ;/**  * Returns the name of this accumulator type. This name is used as a suffix for exposed metrics.  *  * @return name of this accumulator type  */ String getName().
true;;1;1;/**  * Creates a new accumulator with the given initial value.  *  * @param init initial value  * @return new accumulator with the given initial value  */ ;/**  * Creates a new accumulator with the given initial value.  *  * @param init initial value  * @return new accumulator with the given initial value  */ A get(double init).
false;public;1;4;;@Override public DoubleMaximum get(double init) {     return new DoubleMaximum(init). }
false;public,static;0;3;;public static DoubleMaximumFactory get() {     return INSTANCE. }
false;public;1;4;;@Override public DoubleMinimum get(double init) {     return new DoubleMinimum(init). }
false;public,static;0;3;;public static DoubleMinimumFactory get() {     return INSTANCE. }
false;public;1;4;;@Override public DoubleSum get(double init) {     return new DoubleSum(init). }
false;public,static;0;3;;public static DoubleSumFactory get() {     return INSTANCE. }
false;public;1;4;;@Override public DoubleAverage get(double init) {     return new DoubleAverage(init). }
false;public,static;0;3;;public static DoubleAverageFactory get() {     return INSTANCE. }
false;public;1;4;;@Override public void add(double value) {     this.value = Math.max(this.value, value). }
false;public;0;4;;@Override public double getValue() {     return value. }
false;public;0;4;;@Override public String getName() {     return NAME. }
false;public;1;4;;@Override public void add(double value) {     this.value = Math.min(this.value, value). }
false;public;0;4;;@Override public double getValue() {     return value. }
false;public;0;4;;@Override public String getName() {     return NAME. }
false;public;1;4;;@Override public void add(double value) {     this.value += value. }
false;public;0;4;;@Override public double getValue() {     return value. }
false;public;0;4;;@Override public String getName() {     return NAME. }
false;public;1;5;;@Override public void add(double value) {     this.sum += value.     this.count++. }
false;public;0;4;;@Override public double getValue() {     return sum / count. }
false;public;0;4;;@Override public String getName() {     return NAME. }
