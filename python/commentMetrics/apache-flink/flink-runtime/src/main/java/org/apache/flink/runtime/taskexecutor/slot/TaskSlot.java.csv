# id;timestamp;commentText;codeText;commentWords;codeWords
TaskSlot -> public Task remove(ExecutionAttemptID executionAttemptId);1482522862;Remove the task identified by the given execution attempt id.__@param executionAttemptId identifying the task to be removed_@return The removed task if there was any_ otherwise null.;public Task remove(ExecutionAttemptID executionAttemptId) {_		return tasks.remove(executionAttemptId)__	};remove,the,task,identified,by,the,given,execution,attempt,id,param,execution,attempt,id,identifying,the,task,to,be,removed,return,the,removed,task,if,there,was,any,otherwise,null;public,task,remove,execution,attempt,id,execution,attempt,id,return,tasks,remove,execution,attempt,id
TaskSlot -> public Task remove(ExecutionAttemptID executionAttemptId);1482522863;Remove the task identified by the given execution attempt id.__@param executionAttemptId identifying the task to be removed_@return The removed task if there was any_ otherwise null.;public Task remove(ExecutionAttemptID executionAttemptId) {_		return tasks.remove(executionAttemptId)__	};remove,the,task,identified,by,the,given,execution,attempt,id,param,execution,attempt,id,identifying,the,task,to,be,removed,return,the,removed,task,if,there,was,any,otherwise,null;public,task,remove,execution,attempt,id,execution,attempt,id,return,tasks,remove,execution,attempt,id
TaskSlot -> public Task remove(ExecutionAttemptID executionAttemptId);1504507095;Remove the task identified by the given execution attempt id.__@param executionAttemptId identifying the task to be removed_@return The removed task if there was any_ otherwise null.;public Task remove(ExecutionAttemptID executionAttemptId) {_		return tasks.remove(executionAttemptId)__	};remove,the,task,identified,by,the,given,execution,attempt,id,param,execution,attempt,id,identifying,the,task,to,be,removed,return,the,removed,task,if,there,was,any,otherwise,null;public,task,remove,execution,attempt,id,execution,attempt,id,return,tasks,remove,execution,attempt,id
TaskSlot -> public Task remove(ExecutionAttemptID executionAttemptId);1515588319;Remove the task identified by the given execution attempt id.__@param executionAttemptId identifying the task to be removed_@return The removed task if there was any_ otherwise null.;public Task remove(ExecutionAttemptID executionAttemptId) {_		return tasks.remove(executionAttemptId)__	};remove,the,task,identified,by,the,given,execution,attempt,id,param,execution,attempt,id,identifying,the,task,to,be,removed,return,the,removed,task,if,there,was,any,otherwise,null;public,task,remove,execution,attempt,id,execution,attempt,id,return,tasks,remove,execution,attempt,id
TaskSlot -> public Task remove(ExecutionAttemptID executionAttemptId);1548938680;Remove the task identified by the given execution attempt id.__@param executionAttemptId identifying the task to be removed_@return The removed task if there was any_ otherwise null.;public Task remove(ExecutionAttemptID executionAttemptId) {_		return tasks.remove(executionAttemptId)__	};remove,the,task,identified,by,the,given,execution,attempt,id,param,execution,attempt,id,identifying,the,task,to,be,removed,return,the,removed,task,if,there,was,any,otherwise,null;public,task,remove,execution,attempt,id,execution,attempt,id,return,tasks,remove,execution,attempt,id
TaskSlot -> public SlotOffer generateSlotOffer();1482522863;Generate the slot offer from this TaskSlot.__@return The sot offer which this task slot can provide;public SlotOffer generateSlotOffer() {_		Preconditions.checkState(TaskSlotState.ACTIVE == state || TaskSlotState.ALLOCATED == state,_				"The task slot is not in state active or allocated.")__		Preconditions.checkState(allocationId != null, "The task slot are not allocated")___		return new SlotOffer(allocationId, index, resourceProfile)__	};generate,the,slot,offer,from,this,task,slot,return,the,sot,offer,which,this,task,slot,can,provide;public,slot,offer,generate,slot,offer,preconditions,check,state,task,slot,state,active,state,task,slot,state,allocated,state,the,task,slot,is,not,in,state,active,or,allocated,preconditions,check,state,allocation,id,null,the,task,slot,are,not,allocated,return,new,slot,offer,allocation,id,index,resource,profile
TaskSlot -> public SlotOffer generateSlotOffer();1504507095;Generate the slot offer from this TaskSlot.__@return The sot offer which this task slot can provide;public SlotOffer generateSlotOffer() {_		Preconditions.checkState(TaskSlotState.ACTIVE == state || TaskSlotState.ALLOCATED == state,_				"The task slot is not in state active or allocated.")__		Preconditions.checkState(allocationId != null, "The task slot are not allocated")___		return new SlotOffer(allocationId, index, resourceProfile)__	};generate,the,slot,offer,from,this,task,slot,return,the,sot,offer,which,this,task,slot,can,provide;public,slot,offer,generate,slot,offer,preconditions,check,state,task,slot,state,active,state,task,slot,state,allocated,state,the,task,slot,is,not,in,state,active,or,allocated,preconditions,check,state,allocation,id,null,the,task,slot,are,not,allocated,return,new,slot,offer,allocation,id,index,resource,profile
TaskSlot -> public SlotOffer generateSlotOffer();1515588319;Generate the slot offer from this TaskSlot.__@return The sot offer which this task slot can provide;public SlotOffer generateSlotOffer() {_		Preconditions.checkState(TaskSlotState.ACTIVE == state || TaskSlotState.ALLOCATED == state,_				"The task slot is not in state active or allocated.")__		Preconditions.checkState(allocationId != null, "The task slot are not allocated")___		return new SlotOffer(allocationId, index, resourceProfile)__	};generate,the,slot,offer,from,this,task,slot,return,the,sot,offer,which,this,task,slot,can,provide;public,slot,offer,generate,slot,offer,preconditions,check,state,task,slot,state,active,state,task,slot,state,allocated,state,the,task,slot,is,not,in,state,active,or,allocated,preconditions,check,state,allocation,id,null,the,task,slot,are,not,allocated,return,new,slot,offer,allocation,id,index,resource,profile
TaskSlot -> public SlotOffer generateSlotOffer();1548938680;Generate the slot offer from this TaskSlot.__@return The sot offer which this task slot can provide;public SlotOffer generateSlotOffer() {_		Preconditions.checkState(TaskSlotState.ACTIVE == state || TaskSlotState.ALLOCATED == state,_				"The task slot is not in state active or allocated.")__		Preconditions.checkState(allocationId != null, "The task slot are not allocated")___		return new SlotOffer(allocationId, index, resourceProfile)__	};generate,the,slot,offer,from,this,task,slot,return,the,sot,offer,which,this,task,slot,can,provide;public,slot,offer,generate,slot,offer,preconditions,check,state,task,slot,state,active,state,task,slot,state,allocated,state,the,task,slot,is,not,in,state,active,or,allocated,preconditions,check,state,allocation,id,null,the,task,slot,are,not,allocated,return,new,slot,offer,allocation,id,index,resource,profile
TaskSlot -> public boolean markReleasing();1482522862;Mark this slot as releasing. A slot can always be marked as releasing.__@return True;public boolean markReleasing() {_		state = TaskSlotState.RELEASING__		return true__	};mark,this,slot,as,releasing,a,slot,can,always,be,marked,as,releasing,return,true;public,boolean,mark,releasing,state,task,slot,state,releasing,return,true
TaskSlot -> public boolean markReleasing();1482522863;Mark this slot as releasing. A slot can always be marked as releasing.__@return True;public boolean markReleasing() {_		state = TaskSlotState.RELEASING__		return true__	};mark,this,slot,as,releasing,a,slot,can,always,be,marked,as,releasing,return,true;public,boolean,mark,releasing,state,task,slot,state,releasing,return,true
TaskSlot -> public boolean markReleasing();1504507095;Mark this slot as releasing. A slot can always be marked as releasing.__@return True;public boolean markReleasing() {_		state = TaskSlotState.RELEASING__		return true__	};mark,this,slot,as,releasing,a,slot,can,always,be,marked,as,releasing,return,true;public,boolean,mark,releasing,state,task,slot,state,releasing,return,true
TaskSlot -> public boolean markReleasing();1515588319;Mark this slot as releasing. A slot can always be marked as releasing.__@return True;public boolean markReleasing() {_		state = TaskSlotState.RELEASING__		return true__	};mark,this,slot,as,releasing,a,slot,can,always,be,marked,as,releasing,return,true;public,boolean,mark,releasing,state,task,slot,state,releasing,return,true
TaskSlot -> public boolean markReleasing();1548938680;Mark this slot as releasing. A slot can always be marked as releasing.__@return True;public boolean markReleasing() {_		state = TaskSlotState.RELEASING__		return true__	};mark,this,slot,as,releasing,a,slot,can,always,be,marked,as,releasing,return,true;public,boolean,mark,releasing,state,task,slot,state,releasing,return,true
TaskSlot -> public boolean add(Task task);1482522862;Add the given task to the task slot. This is only possible if there is not already another_task with the same execution attempt id added to the task slot. In this case, the method_returns true. Otherwise the task slot is left unchanged and false is returned.__In case that the task slot state is not active an {@link IllegalStateException} is thrown._In case that the task's job id and allocation id don't match with the job id and allocation_id for which the task slot has been allocated, an {@link IllegalArgumentException} is thrown.__@param task to be added to the task slot_@throws IllegalStateException if the task slot is not in state active_@return true if the task was added to the task slot_ otherwise false;public boolean add(Task task) {_		_		Preconditions.checkArgument(task.getJobID().equals(jobId), "The task's job id does not match the " +_			"job id for which the slot has been allocated.")__		Preconditions.checkArgument(task.getAllocationId().equals(allocationId), "The task's allocation " +_			"id does not match the allocation id for which the slot has been allocated.")__		Preconditions.checkState(TaskSlotState.ACTIVE == state, "The task slot is not in state active.")___		Task oldTask = tasks.put(task.getExecutionId(), task)___		if (oldTask != null) {_			tasks.put(task.getExecutionId(), oldTask)__			return false__		} else {_			return true__		}_	};add,the,given,task,to,the,task,slot,this,is,only,possible,if,there,is,not,already,another,task,with,the,same,execution,attempt,id,added,to,the,task,slot,in,this,case,the,method,returns,true,otherwise,the,task,slot,is,left,unchanged,and,false,is,returned,in,case,that,the,task,slot,state,is,not,active,an,link,illegal,state,exception,is,thrown,in,case,that,the,task,s,job,id,and,allocation,id,don,t,match,with,the,job,id,and,allocation,id,for,which,the,task,slot,has,been,allocated,an,link,illegal,argument,exception,is,thrown,param,task,to,be,added,to,the,task,slot,throws,illegal,state,exception,if,the,task,slot,is,not,in,state,active,return,true,if,the,task,was,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,preconditions,check,argument,task,get,job,id,equals,job,id,the,task,s,job,id,does,not,match,the,job,id,for,which,the,slot,has,been,allocated,preconditions,check,argument,task,get,allocation,id,equals,allocation,id,the,task,s,allocation,id,does,not,match,the,allocation,id,for,which,the,slot,has,been,allocated,preconditions,check,state,task,slot,state,active,state,the,task,slot,is,not,in,state,active,task,old,task,tasks,put,task,get,execution,id,task,if,old,task,null,tasks,put,task,get,execution,id,old,task,return,false,else,return,true
TaskSlot -> public boolean add(Task task);1482522863;Add the given task to the task slot. This is only possible if there is not already another_task with the same execution attempt id added to the task slot. In this case, the method_returns true. Otherwise the task slot is left unchanged and false is returned.__In case that the task slot state is not active an {@link IllegalStateException} is thrown._In case that the task's job id and allocation id don't match with the job id and allocation_id for which the task slot has been allocated, an {@link IllegalArgumentException} is thrown.__@param task to be added to the task slot_@throws IllegalStateException if the task slot is not in state active_@return true if the task was added to the task slot_ otherwise false;public boolean add(Task task) {_		_		Preconditions.checkArgument(task.getJobID().equals(jobId), "The task's job id does not match the " +_			"job id for which the slot has been allocated.")__		Preconditions.checkArgument(task.getAllocationId().equals(allocationId), "The task's allocation " +_			"id does not match the allocation id for which the slot has been allocated.")__		Preconditions.checkState(TaskSlotState.ACTIVE == state, "The task slot is not in state active.")___		Task oldTask = tasks.put(task.getExecutionId(), task)___		if (oldTask != null) {_			tasks.put(task.getExecutionId(), oldTask)__			return false__		} else {_			return true__		}_	};add,the,given,task,to,the,task,slot,this,is,only,possible,if,there,is,not,already,another,task,with,the,same,execution,attempt,id,added,to,the,task,slot,in,this,case,the,method,returns,true,otherwise,the,task,slot,is,left,unchanged,and,false,is,returned,in,case,that,the,task,slot,state,is,not,active,an,link,illegal,state,exception,is,thrown,in,case,that,the,task,s,job,id,and,allocation,id,don,t,match,with,the,job,id,and,allocation,id,for,which,the,task,slot,has,been,allocated,an,link,illegal,argument,exception,is,thrown,param,task,to,be,added,to,the,task,slot,throws,illegal,state,exception,if,the,task,slot,is,not,in,state,active,return,true,if,the,task,was,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,preconditions,check,argument,task,get,job,id,equals,job,id,the,task,s,job,id,does,not,match,the,job,id,for,which,the,slot,has,been,allocated,preconditions,check,argument,task,get,allocation,id,equals,allocation,id,the,task,s,allocation,id,does,not,match,the,allocation,id,for,which,the,slot,has,been,allocated,preconditions,check,state,task,slot,state,active,state,the,task,slot,is,not,in,state,active,task,old,task,tasks,put,task,get,execution,id,task,if,old,task,null,tasks,put,task,get,execution,id,old,task,return,false,else,return,true
TaskSlot -> public boolean add(Task task);1504507095;Add the given task to the task slot. This is only possible if there is not already another_task with the same execution attempt id added to the task slot. In this case, the method_returns true. Otherwise the task slot is left unchanged and false is returned.__In case that the task slot state is not active an {@link IllegalStateException} is thrown._In case that the task's job id and allocation id don't match with the job id and allocation_id for which the task slot has been allocated, an {@link IllegalArgumentException} is thrown.__@param task to be added to the task slot_@throws IllegalStateException if the task slot is not in state active_@return true if the task was added to the task slot_ otherwise false;public boolean add(Task task) {_		_		Preconditions.checkArgument(task.getJobID().equals(jobId), "The task's job id does not match the " +_			"job id for which the slot has been allocated.")__		Preconditions.checkArgument(task.getAllocationId().equals(allocationId), "The task's allocation " +_			"id does not match the allocation id for which the slot has been allocated.")__		Preconditions.checkState(TaskSlotState.ACTIVE == state, "The task slot is not in state active.")___		Task oldTask = tasks.put(task.getExecutionId(), task)___		if (oldTask != null) {_			tasks.put(task.getExecutionId(), oldTask)__			return false__		} else {_			return true__		}_	};add,the,given,task,to,the,task,slot,this,is,only,possible,if,there,is,not,already,another,task,with,the,same,execution,attempt,id,added,to,the,task,slot,in,this,case,the,method,returns,true,otherwise,the,task,slot,is,left,unchanged,and,false,is,returned,in,case,that,the,task,slot,state,is,not,active,an,link,illegal,state,exception,is,thrown,in,case,that,the,task,s,job,id,and,allocation,id,don,t,match,with,the,job,id,and,allocation,id,for,which,the,task,slot,has,been,allocated,an,link,illegal,argument,exception,is,thrown,param,task,to,be,added,to,the,task,slot,throws,illegal,state,exception,if,the,task,slot,is,not,in,state,active,return,true,if,the,task,was,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,preconditions,check,argument,task,get,job,id,equals,job,id,the,task,s,job,id,does,not,match,the,job,id,for,which,the,slot,has,been,allocated,preconditions,check,argument,task,get,allocation,id,equals,allocation,id,the,task,s,allocation,id,does,not,match,the,allocation,id,for,which,the,slot,has,been,allocated,preconditions,check,state,task,slot,state,active,state,the,task,slot,is,not,in,state,active,task,old,task,tasks,put,task,get,execution,id,task,if,old,task,null,tasks,put,task,get,execution,id,old,task,return,false,else,return,true
TaskSlot -> public boolean add(Task task);1515588319;Add the given task to the task slot. This is only possible if there is not already another_task with the same execution attempt id added to the task slot. In this case, the method_returns true. Otherwise the task slot is left unchanged and false is returned.__<p>In case that the task slot state is not active an {@link IllegalStateException} is thrown._In case that the task's job id and allocation id don't match with the job id and allocation_id for which the task slot has been allocated, an {@link IllegalArgumentException} is thrown.__@param task to be added to the task slot_@throws IllegalStateException if the task slot is not in state active_@return true if the task was added to the task slot_ otherwise false;public boolean add(Task task) {_		_		Preconditions.checkArgument(task.getJobID().equals(jobId), "The task's job id does not match the " +_			"job id for which the slot has been allocated.")__		Preconditions.checkArgument(task.getAllocationId().equals(allocationId), "The task's allocation " +_			"id does not match the allocation id for which the slot has been allocated.")__		Preconditions.checkState(TaskSlotState.ACTIVE == state, "The task slot is not in state active.")___		Task oldTask = tasks.put(task.getExecutionId(), task)___		if (oldTask != null) {_			tasks.put(task.getExecutionId(), oldTask)__			return false__		} else {_			return true__		}_	};add,the,given,task,to,the,task,slot,this,is,only,possible,if,there,is,not,already,another,task,with,the,same,execution,attempt,id,added,to,the,task,slot,in,this,case,the,method,returns,true,otherwise,the,task,slot,is,left,unchanged,and,false,is,returned,p,in,case,that,the,task,slot,state,is,not,active,an,link,illegal,state,exception,is,thrown,in,case,that,the,task,s,job,id,and,allocation,id,don,t,match,with,the,job,id,and,allocation,id,for,which,the,task,slot,has,been,allocated,an,link,illegal,argument,exception,is,thrown,param,task,to,be,added,to,the,task,slot,throws,illegal,state,exception,if,the,task,slot,is,not,in,state,active,return,true,if,the,task,was,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,preconditions,check,argument,task,get,job,id,equals,job,id,the,task,s,job,id,does,not,match,the,job,id,for,which,the,slot,has,been,allocated,preconditions,check,argument,task,get,allocation,id,equals,allocation,id,the,task,s,allocation,id,does,not,match,the,allocation,id,for,which,the,slot,has,been,allocated,preconditions,check,state,task,slot,state,active,state,the,task,slot,is,not,in,state,active,task,old,task,tasks,put,task,get,execution,id,task,if,old,task,null,tasks,put,task,get,execution,id,old,task,return,false,else,return,true
TaskSlot -> public boolean add(Task task);1548938680;Add the given task to the task slot. This is only possible if there is not already another_task with the same execution attempt id added to the task slot. In this case, the method_returns true. Otherwise the task slot is left unchanged and false is returned.__<p>In case that the task slot state is not active an {@link IllegalStateException} is thrown._In case that the task's job id and allocation id don't match with the job id and allocation_id for which the task slot has been allocated, an {@link IllegalArgumentException} is thrown.__@param task to be added to the task slot_@throws IllegalStateException if the task slot is not in state active_@return true if the task was added to the task slot_ otherwise false;public boolean add(Task task) {_		_		Preconditions.checkArgument(task.getJobID().equals(jobId), "The task's job id does not match the " +_			"job id for which the slot has been allocated.")__		Preconditions.checkArgument(task.getAllocationId().equals(allocationId), "The task's allocation " +_			"id does not match the allocation id for which the slot has been allocated.")__		Preconditions.checkState(TaskSlotState.ACTIVE == state, "The task slot is not in state active.")___		Task oldTask = tasks.put(task.getExecutionId(), task)___		if (oldTask != null) {_			tasks.put(task.getExecutionId(), oldTask)__			return false__		} else {_			return true__		}_	};add,the,given,task,to,the,task,slot,this,is,only,possible,if,there,is,not,already,another,task,with,the,same,execution,attempt,id,added,to,the,task,slot,in,this,case,the,method,returns,true,otherwise,the,task,slot,is,left,unchanged,and,false,is,returned,p,in,case,that,the,task,slot,state,is,not,active,an,link,illegal,state,exception,is,thrown,in,case,that,the,task,s,job,id,and,allocation,id,don,t,match,with,the,job,id,and,allocation,id,for,which,the,task,slot,has,been,allocated,an,link,illegal,argument,exception,is,thrown,param,task,to,be,added,to,the,task,slot,throws,illegal,state,exception,if,the,task,slot,is,not,in,state,active,return,true,if,the,task,was,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,preconditions,check,argument,task,get,job,id,equals,job,id,the,task,s,job,id,does,not,match,the,job,id,for,which,the,slot,has,been,allocated,preconditions,check,argument,task,get,allocation,id,equals,allocation,id,the,task,s,allocation,id,does,not,match,the,allocation,id,for,which,the,slot,has,been,allocated,preconditions,check,state,task,slot,state,active,state,the,task,slot,is,not,in,state,active,task,old,task,tasks,put,task,get,execution,id,task,if,old,task,null,tasks,put,task,get,execution,id,old,task,return,false,else,return,true
TaskSlot -> public void clear();1482522862;Removes all tasks from this task slot.;public void clear() {_		tasks.clear()__	};removes,all,tasks,from,this,task,slot;public,void,clear,tasks,clear
TaskSlot -> public void clear();1482522863;Removes all tasks from this task slot.;public void clear() {_		tasks.clear()__	};removes,all,tasks,from,this,task,slot;public,void,clear,tasks,clear
TaskSlot -> public void clear();1504507095;Removes all tasks from this task slot.;public void clear() {_		tasks.clear()__	};removes,all,tasks,from,this,task,slot;public,void,clear,tasks,clear
TaskSlot -> public void clear();1515588319;Removes all tasks from this task slot.;public void clear() {_		tasks.clear()__	};removes,all,tasks,from,this,task,slot;public,void,clear,tasks,clear
TaskSlot -> public void clear();1548938680;Removes all tasks from this task slot.;public void clear() {_		tasks.clear()__	};removes,all,tasks,from,this,task,slot;public,void,clear,tasks,clear
TaskSlot -> public boolean markInactive();1482522862;Mark the slot as inactive/allocated. A slot can only be marked as inactive/allocated if it's_in state allocated or active.__@return True if the new state of the slot is allocated_ otherwise false;public boolean markInactive() {_		if (TaskSlotState.ACTIVE == state || TaskSlotState.ALLOCATED == state) {_			state = TaskSlotState.ALLOCATED___			return true__		} else {_			return false__		}_	};mark,the,slot,as,inactive,allocated,a,slot,can,only,be,marked,as,inactive,allocated,if,it,s,in,state,allocated,or,active,return,true,if,the,new,state,of,the,slot,is,allocated,otherwise,false;public,boolean,mark,inactive,if,task,slot,state,active,state,task,slot,state,allocated,state,state,task,slot,state,allocated,return,true,else,return,false
TaskSlot -> public boolean markInactive();1482522863;Mark the slot as inactive/allocated. A slot can only be marked as inactive/allocated if it's_in state allocated or active.__@return True if the new state of the slot is allocated_ otherwise false;public boolean markInactive() {_		if (TaskSlotState.ACTIVE == state || TaskSlotState.ALLOCATED == state) {_			state = TaskSlotState.ALLOCATED___			return true__		} else {_			return false__		}_	};mark,the,slot,as,inactive,allocated,a,slot,can,only,be,marked,as,inactive,allocated,if,it,s,in,state,allocated,or,active,return,true,if,the,new,state,of,the,slot,is,allocated,otherwise,false;public,boolean,mark,inactive,if,task,slot,state,active,state,task,slot,state,allocated,state,state,task,slot,state,allocated,return,true,else,return,false
TaskSlot -> public boolean markInactive();1504507095;Mark the slot as inactive/allocated. A slot can only be marked as inactive/allocated if it's_in state allocated or active.__@return True if the new state of the slot is allocated_ otherwise false;public boolean markInactive() {_		if (TaskSlotState.ACTIVE == state || TaskSlotState.ALLOCATED == state) {_			state = TaskSlotState.ALLOCATED___			return true__		} else {_			return false__		}_	};mark,the,slot,as,inactive,allocated,a,slot,can,only,be,marked,as,inactive,allocated,if,it,s,in,state,allocated,or,active,return,true,if,the,new,state,of,the,slot,is,allocated,otherwise,false;public,boolean,mark,inactive,if,task,slot,state,active,state,task,slot,state,allocated,state,state,task,slot,state,allocated,return,true,else,return,false
TaskSlot -> public boolean markInactive();1515588319;Mark the slot as inactive/allocated. A slot can only be marked as inactive/allocated if it's_in state allocated or active.__@return True if the new state of the slot is allocated_ otherwise false;public boolean markInactive() {_		if (TaskSlotState.ACTIVE == state || TaskSlotState.ALLOCATED == state) {_			state = TaskSlotState.ALLOCATED___			return true__		} else {_			return false__		}_	};mark,the,slot,as,inactive,allocated,a,slot,can,only,be,marked,as,inactive,allocated,if,it,s,in,state,allocated,or,active,return,true,if,the,new,state,of,the,slot,is,allocated,otherwise,false;public,boolean,mark,inactive,if,task,slot,state,active,state,task,slot,state,allocated,state,state,task,slot,state,allocated,return,true,else,return,false
TaskSlot -> public boolean markInactive();1548938680;Mark the slot as inactive/allocated. A slot can only be marked as inactive/allocated if it's_in state allocated or active.__@return True if the new state of the slot is allocated_ otherwise false;public boolean markInactive() {_		if (TaskSlotState.ACTIVE == state || TaskSlotState.ALLOCATED == state) {_			state = TaskSlotState.ALLOCATED___			return true__		} else {_			return false__		}_	};mark,the,slot,as,inactive,allocated,a,slot,can,only,be,marked,as,inactive,allocated,if,it,s,in,state,allocated,or,active,return,true,if,the,new,state,of,the,slot,is,allocated,otherwise,false;public,boolean,mark,inactive,if,task,slot,state,active,state,task,slot,state,allocated,state,state,task,slot,state,allocated,return,true,else,return,false
TaskSlot -> public boolean markActive();1482522862;Mark this slot as active. A slot can only be marked active if it's in state allocated.__The method returns true if the slot was set to active. Otherwise it returns false.__@return True if the new state of the slot is active_ otherwise false;public boolean markActive() {_		if (TaskSlotState.ALLOCATED == state || TaskSlotState.ACTIVE == state) {_			state = TaskSlotState.ACTIVE___			return true__		} else {_			return false__		}_	};mark,this,slot,as,active,a,slot,can,only,be,marked,active,if,it,s,in,state,allocated,the,method,returns,true,if,the,slot,was,set,to,active,otherwise,it,returns,false,return,true,if,the,new,state,of,the,slot,is,active,otherwise,false;public,boolean,mark,active,if,task,slot,state,allocated,state,task,slot,state,active,state,state,task,slot,state,active,return,true,else,return,false
TaskSlot -> public boolean markActive();1482522863;Mark this slot as active. A slot can only be marked active if it's in state allocated.__The method returns true if the slot was set to active. Otherwise it returns false.__@return True if the new state of the slot is active_ otherwise false;public boolean markActive() {_		if (TaskSlotState.ALLOCATED == state || TaskSlotState.ACTIVE == state) {_			state = TaskSlotState.ACTIVE___			return true__		} else {_			return false__		}_	};mark,this,slot,as,active,a,slot,can,only,be,marked,active,if,it,s,in,state,allocated,the,method,returns,true,if,the,slot,was,set,to,active,otherwise,it,returns,false,return,true,if,the,new,state,of,the,slot,is,active,otherwise,false;public,boolean,mark,active,if,task,slot,state,allocated,state,task,slot,state,active,state,state,task,slot,state,active,return,true,else,return,false
TaskSlot -> public boolean markActive();1504507095;Mark this slot as active. A slot can only be marked active if it's in state allocated.__The method returns true if the slot was set to active. Otherwise it returns false.__@return True if the new state of the slot is active_ otherwise false;public boolean markActive() {_		if (TaskSlotState.ALLOCATED == state || TaskSlotState.ACTIVE == state) {_			state = TaskSlotState.ACTIVE___			return true__		} else {_			return false__		}_	};mark,this,slot,as,active,a,slot,can,only,be,marked,active,if,it,s,in,state,allocated,the,method,returns,true,if,the,slot,was,set,to,active,otherwise,it,returns,false,return,true,if,the,new,state,of,the,slot,is,active,otherwise,false;public,boolean,mark,active,if,task,slot,state,allocated,state,task,slot,state,active,state,state,task,slot,state,active,return,true,else,return,false
TaskSlot -> public boolean markActive();1515588319;Mark this slot as active. A slot can only be marked active if it's in state allocated.__<p>The method returns true if the slot was set to active. Otherwise it returns false.__@return True if the new state of the slot is active_ otherwise false;public boolean markActive() {_		if (TaskSlotState.ALLOCATED == state || TaskSlotState.ACTIVE == state) {_			state = TaskSlotState.ACTIVE___			return true__		} else {_			return false__		}_	};mark,this,slot,as,active,a,slot,can,only,be,marked,active,if,it,s,in,state,allocated,p,the,method,returns,true,if,the,slot,was,set,to,active,otherwise,it,returns,false,return,true,if,the,new,state,of,the,slot,is,active,otherwise,false;public,boolean,mark,active,if,task,slot,state,allocated,state,task,slot,state,active,state,state,task,slot,state,active,return,true,else,return,false
TaskSlot -> public boolean markActive();1548938680;Mark this slot as active. A slot can only be marked active if it's in state allocated.__<p>The method returns true if the slot was set to active. Otherwise it returns false.__@return True if the new state of the slot is active_ otherwise false;public boolean markActive() {_		if (TaskSlotState.ALLOCATED == state || TaskSlotState.ACTIVE == state) {_			state = TaskSlotState.ACTIVE___			return true__		} else {_			return false__		}_	};mark,this,slot,as,active,a,slot,can,only,be,marked,active,if,it,s,in,state,allocated,p,the,method,returns,true,if,the,slot,was,set,to,active,otherwise,it,returns,false,return,true,if,the,new,state,of,the,slot,is,active,otherwise,false;public,boolean,mark,active,if,task,slot,state,allocated,state,task,slot,state,active,state,state,task,slot,state,active,return,true,else,return,false
TaskSlot -> public Iterator<Task> getTasks();1482522862;Get all tasks running in this task slot.__@return Iterator to all currently contained tasks in this task slot.;public Iterator<Task> getTasks() {_		return tasks.values().iterator()__	};get,all,tasks,running,in,this,task,slot,return,iterator,to,all,currently,contained,tasks,in,this,task,slot;public,iterator,task,get,tasks,return,tasks,values,iterator
TaskSlot -> public Iterator<Task> getTasks();1482522863;Get all tasks running in this task slot.__@return Iterator to all currently contained tasks in this task slot.;public Iterator<Task> getTasks() {_		return tasks.values().iterator()__	};get,all,tasks,running,in,this,task,slot,return,iterator,to,all,currently,contained,tasks,in,this,task,slot;public,iterator,task,get,tasks,return,tasks,values,iterator
TaskSlot -> public Iterator<Task> getTasks();1504507095;Get all tasks running in this task slot.__@return Iterator to all currently contained tasks in this task slot.;public Iterator<Task> getTasks() {_		return tasks.values().iterator()__	};get,all,tasks,running,in,this,task,slot,return,iterator,to,all,currently,contained,tasks,in,this,task,slot;public,iterator,task,get,tasks,return,tasks,values,iterator
TaskSlot -> public Iterator<Task> getTasks();1515588319;Get all tasks running in this task slot.__@return Iterator to all currently contained tasks in this task slot.;public Iterator<Task> getTasks() {_		return tasks.values().iterator()__	};get,all,tasks,running,in,this,task,slot,return,iterator,to,all,currently,contained,tasks,in,this,task,slot;public,iterator,task,get,tasks,return,tasks,values,iterator
TaskSlot -> public Iterator<Task> getTasks();1548938680;Get all tasks running in this task slot.__@return Iterator to all currently contained tasks in this task slot.;public Iterator<Task> getTasks() {_		return tasks.values().iterator()__	};get,all,tasks,running,in,this,task,slot,return,iterator,to,all,currently,contained,tasks,in,this,task,slot;public,iterator,task,get,tasks,return,tasks,values,iterator
TaskSlot -> public boolean allocate(JobID newJobId, AllocationID newAllocationId);1482522862;Allocate the task slot for the given job and allocation id. If the slot could be allocated,_or is already allocated/active for the given job and allocation id, then the method returns_true. Otherwise it returns false.__A slot can only be allocated if it's current state is free.__@param newJobId to allocate the slot for_@param newAllocationId to identify the slot allocation_@return True if the slot was allocated for the given job and allocation id_ otherwise false;public boolean allocate(JobID newJobId, AllocationID newAllocationId) {_		if (TaskSlotState.FREE == state) {_			_			Preconditions.checkState(allocationId == null)__			Preconditions.checkState(jobId == null)___			this.jobId = Preconditions.checkNotNull(newJobId)__			this.allocationId = Preconditions.checkNotNull(newAllocationId)___			state = TaskSlotState.ALLOCATED___			return true__		} else if (TaskSlotState.ALLOCATED == state || TaskSlotState.ACTIVE == state) {_			Preconditions.checkNotNull(newJobId)__			Preconditions.checkNotNull(newAllocationId)___			return newJobId.equals(jobId) && newAllocationId.equals(allocationId)__		} else {_			return false__		}_	};allocate,the,task,slot,for,the,given,job,and,allocation,id,if,the,slot,could,be,allocated,or,is,already,allocated,active,for,the,given,job,and,allocation,id,then,the,method,returns,true,otherwise,it,returns,false,a,slot,can,only,be,allocated,if,it,s,current,state,is,free,param,new,job,id,to,allocate,the,slot,for,param,new,allocation,id,to,identify,the,slot,allocation,return,true,if,the,slot,was,allocated,for,the,given,job,and,allocation,id,otherwise,false;public,boolean,allocate,job,id,new,job,id,allocation,id,new,allocation,id,if,task,slot,state,free,state,preconditions,check,state,allocation,id,null,preconditions,check,state,job,id,null,this,job,id,preconditions,check,not,null,new,job,id,this,allocation,id,preconditions,check,not,null,new,allocation,id,state,task,slot,state,allocated,return,true,else,if,task,slot,state,allocated,state,task,slot,state,active,state,preconditions,check,not,null,new,job,id,preconditions,check,not,null,new,allocation,id,return,new,job,id,equals,job,id,new,allocation,id,equals,allocation,id,else,return,false
TaskSlot -> public boolean allocate(JobID newJobId, AllocationID newAllocationId);1482522863;Allocate the task slot for the given job and allocation id. If the slot could be allocated,_or is already allocated/active for the given job and allocation id, then the method returns_true. Otherwise it returns false.__A slot can only be allocated if it's current state is free.__@param newJobId to allocate the slot for_@param newAllocationId to identify the slot allocation_@return True if the slot was allocated for the given job and allocation id_ otherwise false;public boolean allocate(JobID newJobId, AllocationID newAllocationId) {_		if (TaskSlotState.FREE == state) {_			_			Preconditions.checkState(allocationId == null)__			Preconditions.checkState(jobId == null)___			this.jobId = Preconditions.checkNotNull(newJobId)__			this.allocationId = Preconditions.checkNotNull(newAllocationId)___			state = TaskSlotState.ALLOCATED___			return true__		} else if (TaskSlotState.ALLOCATED == state || TaskSlotState.ACTIVE == state) {_			Preconditions.checkNotNull(newJobId)__			Preconditions.checkNotNull(newAllocationId)___			return newJobId.equals(jobId) && newAllocationId.equals(allocationId)__		} else {_			return false__		}_	};allocate,the,task,slot,for,the,given,job,and,allocation,id,if,the,slot,could,be,allocated,or,is,already,allocated,active,for,the,given,job,and,allocation,id,then,the,method,returns,true,otherwise,it,returns,false,a,slot,can,only,be,allocated,if,it,s,current,state,is,free,param,new,job,id,to,allocate,the,slot,for,param,new,allocation,id,to,identify,the,slot,allocation,return,true,if,the,slot,was,allocated,for,the,given,job,and,allocation,id,otherwise,false;public,boolean,allocate,job,id,new,job,id,allocation,id,new,allocation,id,if,task,slot,state,free,state,preconditions,check,state,allocation,id,null,preconditions,check,state,job,id,null,this,job,id,preconditions,check,not,null,new,job,id,this,allocation,id,preconditions,check,not,null,new,allocation,id,state,task,slot,state,allocated,return,true,else,if,task,slot,state,allocated,state,task,slot,state,active,state,preconditions,check,not,null,new,job,id,preconditions,check,not,null,new,allocation,id,return,new,job,id,equals,job,id,new,allocation,id,equals,allocation,id,else,return,false
TaskSlot -> public boolean allocate(JobID newJobId, AllocationID newAllocationId);1504507095;Allocate the task slot for the given job and allocation id. If the slot could be allocated,_or is already allocated/active for the given job and allocation id, then the method returns_true. Otherwise it returns false.__A slot can only be allocated if it's current state is free.__@param newJobId to allocate the slot for_@param newAllocationId to identify the slot allocation_@return True if the slot was allocated for the given job and allocation id_ otherwise false;public boolean allocate(JobID newJobId, AllocationID newAllocationId) {_		if (TaskSlotState.FREE == state) {_			_			Preconditions.checkState(allocationId == null)__			Preconditions.checkState(jobId == null)___			this.jobId = Preconditions.checkNotNull(newJobId)__			this.allocationId = Preconditions.checkNotNull(newAllocationId)___			state = TaskSlotState.ALLOCATED___			return true__		} else if (TaskSlotState.ALLOCATED == state || TaskSlotState.ACTIVE == state) {_			Preconditions.checkNotNull(newJobId)__			Preconditions.checkNotNull(newAllocationId)___			return newJobId.equals(jobId) && newAllocationId.equals(allocationId)__		} else {_			return false__		}_	};allocate,the,task,slot,for,the,given,job,and,allocation,id,if,the,slot,could,be,allocated,or,is,already,allocated,active,for,the,given,job,and,allocation,id,then,the,method,returns,true,otherwise,it,returns,false,a,slot,can,only,be,allocated,if,it,s,current,state,is,free,param,new,job,id,to,allocate,the,slot,for,param,new,allocation,id,to,identify,the,slot,allocation,return,true,if,the,slot,was,allocated,for,the,given,job,and,allocation,id,otherwise,false;public,boolean,allocate,job,id,new,job,id,allocation,id,new,allocation,id,if,task,slot,state,free,state,preconditions,check,state,allocation,id,null,preconditions,check,state,job,id,null,this,job,id,preconditions,check,not,null,new,job,id,this,allocation,id,preconditions,check,not,null,new,allocation,id,state,task,slot,state,allocated,return,true,else,if,task,slot,state,allocated,state,task,slot,state,active,state,preconditions,check,not,null,new,job,id,preconditions,check,not,null,new,allocation,id,return,new,job,id,equals,job,id,new,allocation,id,equals,allocation,id,else,return,false
TaskSlot -> public boolean allocate(JobID newJobId, AllocationID newAllocationId);1515588319;Allocate the task slot for the given job and allocation id. If the slot could be allocated,_or is already allocated/active for the given job and allocation id, then the method returns_true. Otherwise it returns false.__<p>A slot can only be allocated if it's current state is free.__@param newJobId to allocate the slot for_@param newAllocationId to identify the slot allocation_@return True if the slot was allocated for the given job and allocation id_ otherwise false;public boolean allocate(JobID newJobId, AllocationID newAllocationId) {_		if (TaskSlotState.FREE == state) {_			_			Preconditions.checkState(allocationId == null)__			Preconditions.checkState(jobId == null)___			this.jobId = Preconditions.checkNotNull(newJobId)__			this.allocationId = Preconditions.checkNotNull(newAllocationId)___			state = TaskSlotState.ALLOCATED___			return true__		} else if (TaskSlotState.ALLOCATED == state || TaskSlotState.ACTIVE == state) {_			Preconditions.checkNotNull(newJobId)__			Preconditions.checkNotNull(newAllocationId)___			return newJobId.equals(jobId) && newAllocationId.equals(allocationId)__		} else {_			return false__		}_	};allocate,the,task,slot,for,the,given,job,and,allocation,id,if,the,slot,could,be,allocated,or,is,already,allocated,active,for,the,given,job,and,allocation,id,then,the,method,returns,true,otherwise,it,returns,false,p,a,slot,can,only,be,allocated,if,it,s,current,state,is,free,param,new,job,id,to,allocate,the,slot,for,param,new,allocation,id,to,identify,the,slot,allocation,return,true,if,the,slot,was,allocated,for,the,given,job,and,allocation,id,otherwise,false;public,boolean,allocate,job,id,new,job,id,allocation,id,new,allocation,id,if,task,slot,state,free,state,preconditions,check,state,allocation,id,null,preconditions,check,state,job,id,null,this,job,id,preconditions,check,not,null,new,job,id,this,allocation,id,preconditions,check,not,null,new,allocation,id,state,task,slot,state,allocated,return,true,else,if,task,slot,state,allocated,state,task,slot,state,active,state,preconditions,check,not,null,new,job,id,preconditions,check,not,null,new,allocation,id,return,new,job,id,equals,job,id,new,allocation,id,equals,allocation,id,else,return,false
TaskSlot -> public boolean allocate(JobID newJobId, AllocationID newAllocationId);1548938680;Allocate the task slot for the given job and allocation id. If the slot could be allocated,_or is already allocated/active for the given job and allocation id, then the method returns_true. Otherwise it returns false.__<p>A slot can only be allocated if it's current state is free.__@param newJobId to allocate the slot for_@param newAllocationId to identify the slot allocation_@return True if the slot was allocated for the given job and allocation id_ otherwise false;public boolean allocate(JobID newJobId, AllocationID newAllocationId) {_		if (TaskSlotState.FREE == state) {_			_			Preconditions.checkState(allocationId == null)__			Preconditions.checkState(jobId == null)___			this.jobId = Preconditions.checkNotNull(newJobId)__			this.allocationId = Preconditions.checkNotNull(newAllocationId)___			state = TaskSlotState.ALLOCATED___			return true__		} else if (TaskSlotState.ALLOCATED == state || TaskSlotState.ACTIVE == state) {_			Preconditions.checkNotNull(newJobId)__			Preconditions.checkNotNull(newAllocationId)___			return newJobId.equals(jobId) && newAllocationId.equals(allocationId)__		} else {_			return false__		}_	};allocate,the,task,slot,for,the,given,job,and,allocation,id,if,the,slot,could,be,allocated,or,is,already,allocated,active,for,the,given,job,and,allocation,id,then,the,method,returns,true,otherwise,it,returns,false,p,a,slot,can,only,be,allocated,if,it,s,current,state,is,free,param,new,job,id,to,allocate,the,slot,for,param,new,allocation,id,to,identify,the,slot,allocation,return,true,if,the,slot,was,allocated,for,the,given,job,and,allocation,id,otherwise,false;public,boolean,allocate,job,id,new,job,id,allocation,id,new,allocation,id,if,task,slot,state,free,state,preconditions,check,state,allocation,id,null,preconditions,check,state,job,id,null,this,job,id,preconditions,check,not,null,new,job,id,this,allocation,id,preconditions,check,not,null,new,allocation,id,state,task,slot,state,allocated,return,true,else,if,task,slot,state,allocated,state,task,slot,state,active,state,preconditions,check,not,null,new,job,id,preconditions,check,not,null,new,allocation,id,return,new,job,id,equals,job,id,new,allocation,id,equals,allocation,id,else,return,false
TaskSlot -> public boolean markFree();1482522862;Mark the slot as free. A slot can only marked as free if it's empty.__@return True if the new state is free_ otherwise false;public boolean markFree() {_		if (isEmpty()) {_			state = TaskSlotState.FREE__			this.jobId = null__			this.allocationId = null___			return true__		} else {_			return false__		}_	};mark,the,slot,as,free,a,slot,can,only,marked,as,free,if,it,s,empty,return,true,if,the,new,state,is,free,otherwise,false;public,boolean,mark,free,if,is,empty,state,task,slot,state,free,this,job,id,null,this,allocation,id,null,return,true,else,return,false
TaskSlot -> public boolean markFree();1482522863;Mark the slot as free. A slot can only marked as free if it's empty.__@return True if the new state is free_ otherwise false;public boolean markFree() {_		if (isEmpty()) {_			state = TaskSlotState.FREE__			this.jobId = null__			this.allocationId = null___			return true__		} else {_			return false__		}_	};mark,the,slot,as,free,a,slot,can,only,marked,as,free,if,it,s,empty,return,true,if,the,new,state,is,free,otherwise,false;public,boolean,mark,free,if,is,empty,state,task,slot,state,free,this,job,id,null,this,allocation,id,null,return,true,else,return,false
TaskSlot -> public boolean markFree();1504507095;Mark the slot as free. A slot can only marked as free if it's empty.__@return True if the new state is free_ otherwise false;public boolean markFree() {_		if (isEmpty()) {_			state = TaskSlotState.FREE__			this.jobId = null__			this.allocationId = null___			return true__		} else {_			return false__		}_	};mark,the,slot,as,free,a,slot,can,only,marked,as,free,if,it,s,empty,return,true,if,the,new,state,is,free,otherwise,false;public,boolean,mark,free,if,is,empty,state,task,slot,state,free,this,job,id,null,this,allocation,id,null,return,true,else,return,false
TaskSlot -> public boolean markFree();1515588319;Mark the slot as free. A slot can only marked as free if it's empty.__@return True if the new state is free_ otherwise false;public boolean markFree() {_		if (isEmpty()) {_			state = TaskSlotState.FREE__			this.jobId = null__			this.allocationId = null___			return true__		} else {_			return false__		}_	};mark,the,slot,as,free,a,slot,can,only,marked,as,free,if,it,s,empty,return,true,if,the,new,state,is,free,otherwise,false;public,boolean,mark,free,if,is,empty,state,task,slot,state,free,this,job,id,null,this,allocation,id,null,return,true,else,return,false
TaskSlot -> public boolean markFree();1548938680;Mark the slot as free. A slot can only be marked as free if it's empty.__@return True if the new state is free_ otherwise false;public boolean markFree() {_		if (isEmpty()) {_			state = TaskSlotState.FREE__			this.jobId = null__			this.allocationId = null___			return true__		} else {_			return false__		}_	};mark,the,slot,as,free,a,slot,can,only,be,marked,as,free,if,it,s,empty,return,true,if,the,new,state,is,free,otherwise,false;public,boolean,mark,free,if,is,empty,state,task,slot,state,free,this,job,id,null,this,allocation,id,null,return,true,else,return,false
