commented;modifiers;parameterAmount;loc;comment;code
false;public;3;11;;@Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {     Class<?> declaringClass = method.getDeclaringClass().     if (declaringClass.equals(FencedMainThreadExecutable.class) || declaringClass.equals(FencedRpcGateway.class)) {         return method.invoke(this, args).     } else {         return super.invoke(proxy, method, args).     } }
false;public;1;12;;@Override public void runAsyncWithoutFencing(Runnable runnable) {     checkNotNull(runnable, "runnable").     if (isLocal) {         getActorRef().tell(new UnfencedMessage<>(new RunAsync(runnable, 0L)), ActorRef.noSender()).     } else {         throw new RuntimeException("Trying to send a Runnable to a remote actor at " + getActorRef().path() + ". This is not supported.").     } }
false;public;2;19;;@Override public <V> CompletableFuture<V> callAsyncWithoutFencing(Callable<V> callable, Time timeout) {     checkNotNull(callable, "callable").     checkNotNull(timeout, "timeout").     if (isLocal) {         @SuppressWarnings("unchecked")         CompletableFuture<V> resultFuture = (CompletableFuture<V>) FutureUtils.toJava(Patterns.ask(getActorRef(), new UnfencedMessage<>(new CallAsync(callable)), timeout.toMilliseconds())).         return resultFuture.     } else {         throw new RuntimeException("Trying to send a Runnable to a remote actor at " + getActorRef().path() + ". This is not supported.").     } }
false;public;1;4;;@Override public void tell(Object message) {     super.tell(fenceMessage(message)). }
false;public;2;4;;@Override public CompletableFuture<?> ask(Object message, Time timeout) {     return super.ask(fenceMessage(message), timeout). }
false;public;0;4;;@Override public F getFencingToken() {     return fencingTokenSupplier.get(). }
false;private;1;15;;private <P> FencedMessage<F, P> fenceMessage(P message) {     if (isLocal) {         return new LocalFencedMessage<>(fencingTokenSupplier.get(), message).     } else {         if (message instanceof Serializable) {             @SuppressWarnings("unchecked")             FencedMessage<F, P> result = (FencedMessage<F, P>) new RemoteFencedMessage<>(fencingTokenSupplier.get(), (Serializable) message).             return result.         } else {             throw new RuntimeException("Trying to send a non-serializable message " + message + " to a remote " + "RpcEndpoint. Please make sure that the message implements java.io.Serializable.").         }     } }
