commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;29;;// -------------------------------------------------------------------------------------------- @Override protected void initialize() throws Exception {     super.initialize().     // set the last output collector of this task to reflect the iteration intermediate state update     // a) workset update     // b) solution set update     // c) none     Collector<OT> delegate = getLastOutputCollector().     if (isWorksetUpdate) {         // in an intermediate task         if (isSolutionSetUpdate) {             throw new IllegalStateException("Plan bug: Intermediate task performs workset and solutions set update.").         }         Collector<OT> outputCollector = createWorksetUpdateOutputCollector(delegate).         // we need the WorksetUpdateOutputCollector separately to count the collected elements         if (isWorksetIteration) {             worksetUpdateOutputCollector = (WorksetUpdateOutputCollector<OT>) outputCollector.         }         setLastOutputCollector(outputCollector).     } else if (isSolutionSetUpdate) {         setLastOutputCollector(createSolutionSetUpdateOutputCollector(delegate)).     } }
false;public;0;43;;@Override public void run() throws Exception {     SuperstepKickoffLatch nextSuperstepLatch = SuperstepKickoffLatchBroker.instance().get(brokerKey()).     while (this.running && !terminationRequested()) {         if (log.isInfoEnabled()) {             log.info(formatLogString("starting iteration [" + currentIteration() + "]")).         }         super.run().         // check if termination was requested         verifyEndOfSuperstepState().         if (isWorksetUpdate && isWorksetIteration) {             long numCollected = worksetUpdateOutputCollector.getElementsCollectedAndReset().             worksetAggregator.aggregate(numCollected).         }         if (log.isInfoEnabled()) {             log.info(formatLogString("finishing iteration [" + currentIteration() + "]")).         }         // let the successors know that the end of this superstep data is reached         sendEndOfSuperstep().         if (isWorksetUpdate) {             // notify iteration head if responsible for workset update             worksetBackChannel.notifyOfEndOfSuperstep().         }         boolean terminated = nextSuperstepLatch.awaitStartOfSuperstepOrTermination(currentIteration() + 1).         if (terminated) {             requestTermination().         } else {             incrementIterationCounter().         }     } }
false;private;0;5;;private void sendEndOfSuperstep() throws IOException, InterruptedException {     for (RecordWriter eventualOutput : this.eventualOutputs) {         eventualOutput.broadcastEvent(EndOfSuperstepEvent.INSTANCE).     } }
