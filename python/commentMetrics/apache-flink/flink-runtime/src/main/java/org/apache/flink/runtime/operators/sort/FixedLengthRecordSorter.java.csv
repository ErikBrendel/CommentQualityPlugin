# id;timestamp;commentText;codeText;commentWords;codeWords
FixedLengthRecordSorter -> @Override 	public boolean isEmpty();1405024514;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
FixedLengthRecordSorter -> @Override 	public boolean isEmpty();1405090423;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
FixedLengthRecordSorter -> @Override 	public boolean isEmpty();1406853229;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
FixedLengthRecordSorter -> @Override 	public boolean isEmpty();1411473593;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
FixedLengthRecordSorter -> @Override 	public boolean isEmpty();1420654570;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
FixedLengthRecordSorter -> @Override 	public boolean isEmpty();1420654570;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
FixedLengthRecordSorter -> @Override 	public boolean isEmpty();1421838095;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
FixedLengthRecordSorter -> @Override 	public boolean isEmpty();1441738685;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
FixedLengthRecordSorter -> @Override 	public boolean isEmpty();1442870284;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
FixedLengthRecordSorter -> @Override 	public boolean isEmpty();1443521929;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
FixedLengthRecordSorter -> @Override 	public boolean isEmpty();1493221488;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
FixedLengthRecordSorter -> @Override 	public long getCapacity();1405024514;Gets the total capacity of this sorter, in bytes.__@return The sorter's total capacity.;@Override_	public long getCapacity() {_		return ((long) this.totalNumBuffers) * this.segmentSize__	};gets,the,total,capacity,of,this,sorter,in,bytes,return,the,sorter,s,total,capacity;override,public,long,get,capacity,return,long,this,total,num,buffers,this,segment,size
FixedLengthRecordSorter -> @Override 	public long getCapacity();1405090423;Gets the total capacity of this sorter, in bytes.__@return The sorter's total capacity.;@Override_	public long getCapacity() {_		return ((long) this.totalNumBuffers) * this.segmentSize__	};gets,the,total,capacity,of,this,sorter,in,bytes,return,the,sorter,s,total,capacity;override,public,long,get,capacity,return,long,this,total,num,buffers,this,segment,size
FixedLengthRecordSorter -> @Override 	public long getCapacity();1406853229;Gets the total capacity of this sorter, in bytes.__@return The sorter's total capacity.;@Override_	public long getCapacity() {_		return ((long) this.totalNumBuffers) * this.segmentSize__	};gets,the,total,capacity,of,this,sorter,in,bytes,return,the,sorter,s,total,capacity;override,public,long,get,capacity,return,long,this,total,num,buffers,this,segment,size
FixedLengthRecordSorter -> @Override 	public long getCapacity();1411473593;Gets the total capacity of this sorter, in bytes.__@return The sorter's total capacity.;@Override_	public long getCapacity() {_		return ((long) this.totalNumBuffers) * this.segmentSize__	};gets,the,total,capacity,of,this,sorter,in,bytes,return,the,sorter,s,total,capacity;override,public,long,get,capacity,return,long,this,total,num,buffers,this,segment,size
FixedLengthRecordSorter -> @Override 	public long getCapacity();1420654570;Gets the total capacity of this sorter, in bytes.__@return The sorter's total capacity.;@Override_	public long getCapacity() {_		return ((long) this.totalNumBuffers) * this.segmentSize__	};gets,the,total,capacity,of,this,sorter,in,bytes,return,the,sorter,s,total,capacity;override,public,long,get,capacity,return,long,this,total,num,buffers,this,segment,size
FixedLengthRecordSorter -> @Override 	public long getCapacity();1420654570;Gets the total capacity of this sorter, in bytes.__@return The sorter's total capacity.;@Override_	public long getCapacity() {_		return ((long) this.totalNumBuffers) * this.segmentSize__	};gets,the,total,capacity,of,this,sorter,in,bytes,return,the,sorter,s,total,capacity;override,public,long,get,capacity,return,long,this,total,num,buffers,this,segment,size
FixedLengthRecordSorter -> @Override 	public long getOccupancy();1405024514;Gets the number of bytes currently occupied in this sorter.__@return The number of bytes occupied.;@Override_	public long getOccupancy() {_		return this.sortBufferBytes__	};gets,the,number,of,bytes,currently,occupied,in,this,sorter,return,the,number,of,bytes,occupied;override,public,long,get,occupancy,return,this,sort,buffer,bytes
FixedLengthRecordSorter -> @Override 	public long getOccupancy();1405090423;Gets the number of bytes currently occupied in this sorter.__@return The number of bytes occupied.;@Override_	public long getOccupancy() {_		return this.sortBufferBytes__	};gets,the,number,of,bytes,currently,occupied,in,this,sorter,return,the,number,of,bytes,occupied;override,public,long,get,occupancy,return,this,sort,buffer,bytes
FixedLengthRecordSorter -> @Override 	public long getOccupancy();1406853229;Gets the number of bytes currently occupied in this sorter.__@return The number of bytes occupied.;@Override_	public long getOccupancy() {_		return this.sortBufferBytes__	};gets,the,number,of,bytes,currently,occupied,in,this,sorter,return,the,number,of,bytes,occupied;override,public,long,get,occupancy,return,this,sort,buffer,bytes
FixedLengthRecordSorter -> @Override 	public long getOccupancy();1411473593;Gets the number of bytes currently occupied in this sorter.__@return The number of bytes occupied.;@Override_	public long getOccupancy() {_		return this.sortBufferBytes__	};gets,the,number,of,bytes,currently,occupied,in,this,sorter,return,the,number,of,bytes,occupied;override,public,long,get,occupancy,return,this,sort,buffer,bytes
FixedLengthRecordSorter -> @Override 	public long getOccupancy();1420654570;Gets the number of bytes currently occupied in this sorter.__@return The number of bytes occupied.;@Override_	public long getOccupancy() {_		return this.sortBufferBytes__	};gets,the,number,of,bytes,currently,occupied,in,this,sorter,return,the,number,of,bytes,occupied;override,public,long,get,occupancy,return,this,sort,buffer,bytes
FixedLengthRecordSorter -> @Override 	public long getOccupancy();1420654570;Gets the number of bytes currently occupied in this sorter.__@return The number of bytes occupied.;@Override_	public long getOccupancy() {_		return this.sortBufferBytes__	};gets,the,number,of,bytes,currently,occupied,in,this,sorter,return,the,number,of,bytes,occupied;override,public,long,get,occupancy,return,this,sort,buffer,bytes
FixedLengthRecordSorter -> @Override 	public boolean write(T record) throws IOException;1405024514;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortBufferOffset > this.lastEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortBufferSegment = nextMemorySegment()__				this.sortBuffer.add(this.currentSortBufferSegment)__				this.outView.set(this.currentSortBufferSegment)__				this.currentSortBufferOffset = 0__				this.sortBufferBytes += this.segmentSize__			}_			else {_				return false__			}_		}_		_		_		try {_			this.comparator.writeWithKeyNormalization(record, this.outView)__			this.numRecords++__			this.currentSortBufferOffset += this.recordSize__			return true__		} catch (EOFException eofex) {_			throw new IOException("Error: Serialization consumes more bytes than announced by the serializer.")__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,buffer,offset,this,last,entry,offset,if,memory,available,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,this,segment,size,else,return,false,try,this,comparator,write,with,key,normalization,record,this,out,view,this,num,records,this,current,sort,buffer,offset,this,record,size,return,true,catch,eofexception,eofex,throw,new,ioexception,error,serialization,consumes,more,bytes,than,announced,by,the,serializer
FixedLengthRecordSorter -> @Override 	public boolean write(T record) throws IOException;1405090423;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortBufferOffset > this.lastEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortBufferSegment = nextMemorySegment()__				this.sortBuffer.add(this.currentSortBufferSegment)__				this.outView.set(this.currentSortBufferSegment)__				this.currentSortBufferOffset = 0__				this.sortBufferBytes += this.segmentSize__			}_			else {_				return false__			}_		}_		_		_		try {_			this.comparator.writeWithKeyNormalization(record, this.outView)__			this.numRecords++__			this.currentSortBufferOffset += this.recordSize__			return true__		} catch (EOFException eofex) {_			throw new IOException("Error: Serialization consumes more bytes than announced by the serializer.")__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,buffer,offset,this,last,entry,offset,if,memory,available,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,this,segment,size,else,return,false,try,this,comparator,write,with,key,normalization,record,this,out,view,this,num,records,this,current,sort,buffer,offset,this,record,size,return,true,catch,eofexception,eofex,throw,new,ioexception,error,serialization,consumes,more,bytes,than,announced,by,the,serializer
FixedLengthRecordSorter -> @Override 	public boolean write(T record) throws IOException;1406853229;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortBufferOffset > this.lastEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortBufferSegment = nextMemorySegment()__				this.sortBuffer.add(this.currentSortBufferSegment)__				this.outView.set(this.currentSortBufferSegment)__				this.currentSortBufferOffset = 0__				this.sortBufferBytes += this.segmentSize__			}_			else {_				return false__			}_		}_		_		_		try {_			this.comparator.writeWithKeyNormalization(record, this.outView)__			this.numRecords++__			this.currentSortBufferOffset += this.recordSize__			return true__		} catch (EOFException eofex) {_			throw new IOException("Error: Serialization consumes more bytes than announced by the serializer.")__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,buffer,offset,this,last,entry,offset,if,memory,available,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,this,segment,size,else,return,false,try,this,comparator,write,with,key,normalization,record,this,out,view,this,num,records,this,current,sort,buffer,offset,this,record,size,return,true,catch,eofexception,eofex,throw,new,ioexception,error,serialization,consumes,more,bytes,than,announced,by,the,serializer
FixedLengthRecordSorter -> @Override 	public boolean write(T record) throws IOException;1411473593;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortBufferOffset > this.lastEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortBufferSegment = nextMemorySegment()__				this.sortBuffer.add(this.currentSortBufferSegment)__				this.outView.set(this.currentSortBufferSegment)__				this.currentSortBufferOffset = 0__				this.sortBufferBytes += this.segmentSize__			}_			else {_				return false__			}_		}_		_		_		try {_			this.comparator.writeWithKeyNormalization(record, this.outView)__			this.numRecords++__			this.currentSortBufferOffset += this.recordSize__			return true__		} catch (EOFException eofex) {_			throw new IOException("Error: Serialization consumes more bytes than announced by the serializer.")__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,buffer,offset,this,last,entry,offset,if,memory,available,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,this,segment,size,else,return,false,try,this,comparator,write,with,key,normalization,record,this,out,view,this,num,records,this,current,sort,buffer,offset,this,record,size,return,true,catch,eofexception,eofex,throw,new,ioexception,error,serialization,consumes,more,bytes,than,announced,by,the,serializer
FixedLengthRecordSorter -> @Override 	public boolean write(T record) throws IOException;1420654570;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortBufferOffset > this.lastEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortBufferSegment = nextMemorySegment()__				this.sortBuffer.add(this.currentSortBufferSegment)__				this.outView.set(this.currentSortBufferSegment)__				this.currentSortBufferOffset = 0__				this.sortBufferBytes += this.segmentSize__			}_			else {_				return false__			}_		}_		_		_		try {_			this.comparator.writeWithKeyNormalization(record, this.outView)__			this.numRecords++__			this.currentSortBufferOffset += this.recordSize__			return true__		} catch (EOFException eofex) {_			throw new IOException("Error: Serialization consumes more bytes than announced by the serializer.")__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,buffer,offset,this,last,entry,offset,if,memory,available,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,this,segment,size,else,return,false,try,this,comparator,write,with,key,normalization,record,this,out,view,this,num,records,this,current,sort,buffer,offset,this,record,size,return,true,catch,eofexception,eofex,throw,new,ioexception,error,serialization,consumes,more,bytes,than,announced,by,the,serializer
FixedLengthRecordSorter -> @Override 	public boolean write(T record) throws IOException;1420654570;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortBufferOffset > this.lastEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortBufferSegment = nextMemorySegment()__				this.sortBuffer.add(this.currentSortBufferSegment)__				this.outView.set(this.currentSortBufferSegment)__				this.currentSortBufferOffset = 0__				this.sortBufferBytes += this.segmentSize__			}_			else {_				return false__			}_		}_		_		_		try {_			this.comparator.writeWithKeyNormalization(record, this.outView)__			this.numRecords++__			this.currentSortBufferOffset += this.recordSize__			return true__		} catch (EOFException eofex) {_			throw new IOException("Error: Serialization consumes more bytes than announced by the serializer.")__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,buffer,offset,this,last,entry,offset,if,memory,available,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,this,segment,size,else,return,false,try,this,comparator,write,with,key,normalization,record,this,out,view,this,num,records,this,current,sort,buffer,offset,this,record,size,return,true,catch,eofexception,eofex,throw,new,ioexception,error,serialization,consumes,more,bytes,than,announced,by,the,serializer
FixedLengthRecordSorter -> @Override 	public boolean write(T record) throws IOException;1421838095;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortBufferOffset > this.lastEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortBufferSegment = nextMemorySegment()__				this.sortBuffer.add(this.currentSortBufferSegment)__				this.outView.set(this.currentSortBufferSegment)__				this.currentSortBufferOffset = 0__				this.sortBufferBytes += this.segmentSize__			}_			else {_				return false__			}_		}_		_		_		try {_			this.comparator.writeWithKeyNormalization(record, this.outView)__			this.numRecords++__			this.currentSortBufferOffset += this.recordSize__			return true__		} catch (EOFException eofex) {_			throw new IOException("Error: Serialization consumes more bytes than announced by the serializer.")__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,buffer,offset,this,last,entry,offset,if,memory,available,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,this,segment,size,else,return,false,try,this,comparator,write,with,key,normalization,record,this,out,view,this,num,records,this,current,sort,buffer,offset,this,record,size,return,true,catch,eofexception,eofex,throw,new,ioexception,error,serialization,consumes,more,bytes,than,announced,by,the,serializer
FixedLengthRecordSorter -> @Override 	public boolean write(T record) throws IOException;1441738685;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortBufferOffset > this.lastEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortBufferSegment = nextMemorySegment()__				this.sortBuffer.add(this.currentSortBufferSegment)__				this.outView.set(this.currentSortBufferSegment)__				this.currentSortBufferOffset = 0__				this.sortBufferBytes += this.segmentSize__			}_			else {_				return false__			}_		}_		_		_		try {_			this.comparator.writeWithKeyNormalization(record, this.outView)__			this.numRecords++__			this.currentSortBufferOffset += this.recordSize__			return true__		} catch (EOFException eofex) {_			throw new IOException("Error: Serialization consumes more bytes than announced by the serializer.")__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,buffer,offset,this,last,entry,offset,if,memory,available,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,this,segment,size,else,return,false,try,this,comparator,write,with,key,normalization,record,this,out,view,this,num,records,this,current,sort,buffer,offset,this,record,size,return,true,catch,eofexception,eofex,throw,new,ioexception,error,serialization,consumes,more,bytes,than,announced,by,the,serializer
FixedLengthRecordSorter -> @Override 	public boolean write(T record) throws IOException;1442870284;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortBufferOffset > this.lastEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortBufferSegment = nextMemorySegment()__				this.sortBuffer.add(this.currentSortBufferSegment)__				this.outView.set(this.currentSortBufferSegment)__				this.currentSortBufferOffset = 0__				this.sortBufferBytes += this.segmentSize__			}_			else {_				return false__			}_		}_		_		_		try {_			this.comparator.writeWithKeyNormalization(record, this.outView)__			this.numRecords++__			this.currentSortBufferOffset += this.recordSize__			return true__		} catch (EOFException eofex) {_			throw new IOException("Error: Serialization consumes more bytes than announced by the serializer.")__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,buffer,offset,this,last,entry,offset,if,memory,available,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,this,segment,size,else,return,false,try,this,comparator,write,with,key,normalization,record,this,out,view,this,num,records,this,current,sort,buffer,offset,this,record,size,return,true,catch,eofexception,eofex,throw,new,ioexception,error,serialization,consumes,more,bytes,than,announced,by,the,serializer
FixedLengthRecordSorter -> @Override 	public boolean write(T record) throws IOException;1443521929;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortBufferOffset > this.lastEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortBufferSegment = nextMemorySegment()__				this.sortBuffer.add(this.currentSortBufferSegment)__				this.outView.set(this.currentSortBufferSegment)__				this.currentSortBufferOffset = 0__				this.sortBufferBytes += this.segmentSize__			}_			else {_				return false__			}_		}_		_		_		try {_			this.comparator.writeWithKeyNormalization(record, this.outView)__			this.numRecords++__			this.currentSortBufferOffset += this.recordSize__			return true__		} catch (EOFException eofex) {_			throw new IOException("Error: Serialization consumes more bytes than announced by the serializer.")__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,buffer,offset,this,last,entry,offset,if,memory,available,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,this,segment,size,else,return,false,try,this,comparator,write,with,key,normalization,record,this,out,view,this,num,records,this,current,sort,buffer,offset,this,record,size,return,true,catch,eofexception,eofex,throw,new,ioexception,error,serialization,consumes,more,bytes,than,announced,by,the,serializer
FixedLengthRecordSorter -> @Override 	public boolean write(T record) throws IOException;1493221488;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortBufferOffset > this.lastEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortBufferSegment = nextMemorySegment()__				this.sortBuffer.add(this.currentSortBufferSegment)__				this.outView.set(this.currentSortBufferSegment)__				this.currentSortBufferOffset = 0__				this.sortBufferBytes += this.segmentSize__			}_			else {_				return false__			}_		}_		_		_		try {_			this.comparator.writeWithKeyNormalization(record, this.outView)__			this.numRecords++__			this.currentSortBufferOffset += this.recordSize__			return true__		} catch (EOFException eofex) {_			throw new IOException("Error: Serialization consumes more bytes than announced by the serializer.")__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,buffer,offset,this,last,entry,offset,if,memory,available,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,this,segment,size,else,return,false,try,this,comparator,write,with,key,normalization,record,this,out,view,this,num,records,this,current,sort,buffer,offset,this,record,size,return,true,catch,eofexception,eofex,throw,new,ioexception,error,serialization,consumes,more,bytes,than,announced,by,the,serializer
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1405024514;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param len The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int currentMemSeg = start / recordsPerSegment__		int offset = (start % recordsPerSegment) * this.recordSize__		_		while (num > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, offset)__			_			_			if (num >= recordsPerSegment && offset == 0) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				num -= recordsPerSegment__			} else {_				_				for (_ num > 0_ num--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,len,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,current,mem,seg,start,records,per,segment,int,offset,start,records,per,segment,this,record,size,while,num,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,offset,if,num,records,per,segment,offset,0,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,num,records,per,segment,else,for,num,0,num,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1405090423;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param len The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int currentMemSeg = start / recordsPerSegment__		int offset = (start % recordsPerSegment) * this.recordSize__		_		while (num > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, offset)__			_			_			if (num >= recordsPerSegment && offset == 0) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				num -= recordsPerSegment__			} else {_				_				for (_ num > 0_ num--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,len,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,current,mem,seg,start,records,per,segment,int,offset,start,records,per,segment,this,record,size,while,num,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,offset,if,num,records,per,segment,offset,0,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,num,records,per,segment,else,for,num,0,num,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1406853229;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int currentMemSeg = start / recordsPerSegment__		int offset = (start % recordsPerSegment) * this.recordSize__		_		while (num > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, offset)__			_			_			if (num >= recordsPerSegment && offset == 0) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				num -= recordsPerSegment__			} else {_				_				for (_ num > 0_ num--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,current,mem,seg,start,records,per,segment,int,offset,start,records,per,segment,this,record,size,while,num,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,offset,if,num,records,per,segment,offset,0,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,num,records,per,segment,else,for,num,0,num,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1411473593;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int currentMemSeg = start / recordsPerSegment__		int offset = (start % recordsPerSegment) * this.recordSize__		_		while (num > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, offset)__			_			_			if (num >= recordsPerSegment && offset == 0) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				num -= recordsPerSegment__			} else {_				_				for (_ num > 0_ num--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,current,mem,seg,start,records,per,segment,int,offset,start,records,per,segment,this,record,size,while,num,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,offset,if,num,records,per,segment,offset,0,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,num,records,per,segment,else,for,num,0,num,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1420654570;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int currentMemSeg = start / recordsPerSegment__		int offset = (start % recordsPerSegment) * this.recordSize__		_		while (num > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, offset)__			_			_			if (num >= recordsPerSegment && offset == 0) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				num -= recordsPerSegment__			} else {_				_				for (_ num > 0_ num--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,current,mem,seg,start,records,per,segment,int,offset,start,records,per,segment,this,record,size,while,num,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,offset,if,num,records,per,segment,offset,0,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,num,records,per,segment,else,for,num,0,num,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1420654570;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int currentMemSeg = start / recordsPerSegment__		int offset = (start % recordsPerSegment) * this.recordSize__		_		while (num > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, offset)__			_			_			if (num >= recordsPerSegment && offset == 0) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				num -= recordsPerSegment__			} else {_				_				for (_ num > 0_ num--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,current,mem,seg,start,records,per,segment,int,offset,start,records,per,segment,this,record,size,while,num,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,offset,if,num,records,per,segment,offset,0,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,num,records,per,segment,else,for,num,0,num,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1421838095;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int currentMemSeg = start / recordsPerSegment__		int offset = (start % recordsPerSegment) * this.recordSize__		_		while (num > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, offset)__			_			_			if (num >= recordsPerSegment && offset == 0) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				num -= recordsPerSegment__			} else {_				_				for (_ num > 0_ num--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,current,mem,seg,start,records,per,segment,int,offset,start,records,per,segment,this,record,size,while,num,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,offset,if,num,records,per,segment,offset,0,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,num,records,per,segment,else,for,num,0,num,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1441738685;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int currentMemSeg = start / recordsPerSegment__		int offset = (start % recordsPerSegment) * this.recordSize__		_		while (num > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, offset)__			_			_			if (num >= recordsPerSegment && offset == 0) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				num -= recordsPerSegment__			} else {_				_				for (_ num > 0_ num--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,current,mem,seg,start,records,per,segment,int,offset,start,records,per,segment,this,record,size,while,num,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,offset,if,num,records,per,segment,offset,0,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,num,records,per,segment,else,for,num,0,num,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1442870284;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int currentMemSeg = start / recordsPerSegment__		int offset = (start % recordsPerSegment) * this.recordSize__		_		while (num > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, offset)__			_			_			if (num >= recordsPerSegment && offset == 0) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				num -= recordsPerSegment__			} else {_				_				for (_ num > 0_ num--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,current,mem,seg,start,records,per,segment,int,offset,start,records,per,segment,this,record,size,while,num,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,offset,if,num,records,per,segment,offset,0,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,num,records,per,segment,else,for,num,0,num,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1443521929;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int currentMemSeg = start / recordsPerSegment__		int offset = (start % recordsPerSegment) * this.recordSize__		_		while (num > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, offset)__			_			_			if (num >= recordsPerSegment && offset == 0) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				num -= recordsPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastEntryOffset_ num--, offset += this.recordSize) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}__			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,current,mem,seg,start,records,per,segment,int,offset,start,records,per,segment,this,record,size,while,num,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,offset,if,num,records,per,segment,offset,0,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,num,records,per,segment,else,for,num,0,offset,this,last,entry,offset,num,offset,this,record,size,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,offset,0
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1493221488;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int currentMemSeg = start / recordsPerSegment__		int offset = (start % recordsPerSegment) * this.recordSize__		_		while (num > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, offset)__			_			_			if (num >= recordsPerSegment && offset == 0) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				num -= recordsPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastEntryOffset_ num--, offset += this.recordSize) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}__			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,current,mem,seg,start,records,per,segment,int,offset,start,records,per,segment,this,record,size,while,num,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,offset,if,num,records,per,segment,offset,0,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,num,records,per,segment,else,for,num,0,offset,this,last,entry,offset,num,offset,this,record,size,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,offset,0
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1405024514;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		_		while (recordsLeft > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, 0)__			_			_			if (recordsLeft >= recordsPerSegment) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				recordsLeft -= recordsPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,0,if,records,left,records,per,segment,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,records,left,records,per,segment,else,for,records,left,0,records,left,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1405090423;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		_		while (recordsLeft > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, 0)__			_			_			if (recordsLeft >= recordsPerSegment) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				recordsLeft -= recordsPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,0,if,records,left,records,per,segment,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,records,left,records,per,segment,else,for,records,left,0,records,left,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1406853229;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		_		while (recordsLeft > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, 0)__			_			_			if (recordsLeft >= recordsPerSegment) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				recordsLeft -= recordsPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,0,if,records,left,records,per,segment,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,records,left,records,per,segment,else,for,records,left,0,records,left,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1411473593;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		_		while (recordsLeft > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, 0)__			_			_			if (recordsLeft >= recordsPerSegment) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				recordsLeft -= recordsPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,0,if,records,left,records,per,segment,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,records,left,records,per,segment,else,for,records,left,0,records,left,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1420654570;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		_		while (recordsLeft > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, 0)__			_			_			if (recordsLeft >= recordsPerSegment) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				recordsLeft -= recordsPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,0,if,records,left,records,per,segment,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,records,left,records,per,segment,else,for,records,left,0,records,left,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1420654570;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		_		while (recordsLeft > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, 0)__			_			_			if (recordsLeft >= recordsPerSegment) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				recordsLeft -= recordsPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,0,if,records,left,records,per,segment,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,records,left,records,per,segment,else,for,records,left,0,records,left,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1421838095;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		_		while (recordsLeft > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, 0)__			_			_			if (recordsLeft >= recordsPerSegment) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				recordsLeft -= recordsPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,0,if,records,left,records,per,segment,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,records,left,records,per,segment,else,for,records,left,0,records,left,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1441738685;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		_		while (recordsLeft > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, 0)__			_			_			if (recordsLeft >= recordsPerSegment) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				recordsLeft -= recordsPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,0,if,records,left,records,per,segment,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,records,left,records,per,segment,else,for,records,left,0,records,left,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1442870284;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		_		while (recordsLeft > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, 0)__			_			_			if (recordsLeft >= recordsPerSegment) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				recordsLeft -= recordsPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,0,if,records,left,records,per,segment,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,records,left,records,per,segment,else,for,records,left,0,records,left,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1443521929;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		_		while (recordsLeft > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, 0)__			_			_			if (recordsLeft >= recordsPerSegment) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				recordsLeft -= recordsPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,0,if,records,left,records,per,segment,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,records,left,records,per,segment,else,for,records,left,0,records,left,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1493221488;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		final TypeComparator<T> comparator = this.comparator__		final TypeSerializer<T> serializer = this.serializer__		T record = this.recordInstance__		_		final SingleSegmentInputView inView = this.inView__		_		final int recordsPerSegment = this.recordsPerSegment__		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		_		while (recordsLeft > 0) {_			final MemorySegment currentIndexSegment = this.sortBuffer.get(currentMemSeg++)__			inView.set(currentIndexSegment, 0)__			_			_			if (recordsLeft >= recordsPerSegment) {_				_				for (int numInMemSeg = 0_ numInMemSeg < recordsPerSegment_ numInMemSeg++) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_				recordsLeft -= recordsPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--) {_					record = comparator.readWithKeyDenormalization(record, inView)__					serializer.serialize(record, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,final,type,comparator,t,comparator,this,comparator,final,type,serializer,t,serializer,this,serializer,t,record,this,record,instance,final,single,segment,input,view,in,view,this,in,view,final,int,records,per,segment,this,records,per,segment,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,buffer,get,current,mem,seg,in,view,set,current,index,segment,0,if,records,left,records,per,segment,for,int,num,in,mem,seg,0,num,in,mem,seg,records,per,segment,num,in,mem,seg,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output,records,left,records,per,segment,else,for,records,left,0,records,left,record,comparator,read,with,key,denormalization,record,in,view,serializer,serialize,record,output
FixedLengthRecordSorter -> @Override 	public final MutableObjectIterator<T> getIterator();1405024514;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		final SingleSegmentInputView startIn = new SingleSegmentInputView(this.recordsPerSegment * this.recordSize)__		startIn.set(this.sortBuffer.get(0), 0)__		_		return new MutableObjectIterator<T>() {_			_			private final SingleSegmentInputView in = startIn__			private final TypeComparator<T> comp = comparator__			_			private final int numTotal = size()__			private final int numPerSegment = recordsPerSegment__			_			private int currentTotal = 0__			private int currentInSegment = 0__			private int currentSegmentIndex = 0___			@Override_			public T next(T reuse) {_				if (this.currentTotal < this.numTotal) {_					_					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}_					_					this.currentTotal++__					this.currentInSegment++__					_					try {_						return this.comp.readWithKeyDenormalization(reuse, this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,final,single,segment,input,view,start,in,new,single,segment,input,view,this,records,per,segment,this,record,size,start,in,set,this,sort,buffer,get,0,0,return,new,mutable,object,iterator,t,private,final,single,segment,input,view,in,start,in,private,final,type,comparator,t,comp,comparator,private,final,int,num,total,size,private,final,int,num,per,segment,records,per,segment,private,int,current,total,0,private,int,current,in,segment,0,private,int,current,segment,index,0,override,public,t,next,t,reuse,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,reuse,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
FixedLengthRecordSorter -> @Override 	public final MutableObjectIterator<T> getIterator();1405090423;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		final SingleSegmentInputView startIn = new SingleSegmentInputView(this.recordsPerSegment * this.recordSize)__		startIn.set(this.sortBuffer.get(0), 0)__		_		return new MutableObjectIterator<T>() {_			_			private final SingleSegmentInputView in = startIn__			private final TypeComparator<T> comp = comparator__			_			private final int numTotal = size()__			private final int numPerSegment = recordsPerSegment__			_			private int currentTotal = 0__			private int currentInSegment = 0__			private int currentSegmentIndex = 0___			@Override_			public T next(T reuse) {_				if (this.currentTotal < this.numTotal) {_					_					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}_					_					this.currentTotal++__					this.currentInSegment++__					_					try {_						return this.comp.readWithKeyDenormalization(reuse, this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,final,single,segment,input,view,start,in,new,single,segment,input,view,this,records,per,segment,this,record,size,start,in,set,this,sort,buffer,get,0,0,return,new,mutable,object,iterator,t,private,final,single,segment,input,view,in,start,in,private,final,type,comparator,t,comp,comparator,private,final,int,num,total,size,private,final,int,num,per,segment,records,per,segment,private,int,current,total,0,private,int,current,in,segment,0,private,int,current,segment,index,0,override,public,t,next,t,reuse,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,reuse,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
FixedLengthRecordSorter -> @Override 	public final MutableObjectIterator<T> getIterator();1406853229;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		final SingleSegmentInputView startIn = new SingleSegmentInputView(this.recordsPerSegment * this.recordSize)__		startIn.set(this.sortBuffer.get(0), 0)__		_		return new MutableObjectIterator<T>() {_			_			private final SingleSegmentInputView in = startIn__			private final TypeComparator<T> comp = comparator__			_			private final int numTotal = size()__			private final int numPerSegment = recordsPerSegment__			_			private int currentTotal = 0__			private int currentInSegment = 0__			private int currentSegmentIndex = 0___			@Override_			public T next(T reuse) {_				if (this.currentTotal < this.numTotal) {_					_					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}_					_					this.currentTotal++__					this.currentInSegment++__					_					try {_						return this.comp.readWithKeyDenormalization(reuse, this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,final,single,segment,input,view,start,in,new,single,segment,input,view,this,records,per,segment,this,record,size,start,in,set,this,sort,buffer,get,0,0,return,new,mutable,object,iterator,t,private,final,single,segment,input,view,in,start,in,private,final,type,comparator,t,comp,comparator,private,final,int,num,total,size,private,final,int,num,per,segment,records,per,segment,private,int,current,total,0,private,int,current,in,segment,0,private,int,current,segment,index,0,override,public,t,next,t,reuse,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,reuse,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
FixedLengthRecordSorter -> @Override 	public final MutableObjectIterator<T> getIterator();1411473593;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		final SingleSegmentInputView startIn = new SingleSegmentInputView(this.recordsPerSegment * this.recordSize)__		startIn.set(this.sortBuffer.get(0), 0)__		_		return new MutableObjectIterator<T>() {_			_			private final SingleSegmentInputView in = startIn__			private final TypeComparator<T> comp = comparator__			_			private final int numTotal = size()__			private final int numPerSegment = recordsPerSegment__			_			private int currentTotal = 0__			private int currentInSegment = 0__			private int currentSegmentIndex = 0___			@Override_			public T next(T reuse) {_				if (this.currentTotal < this.numTotal) {_					_					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}_					_					this.currentTotal++__					this.currentInSegment++__					_					try {_						return this.comp.readWithKeyDenormalization(reuse, this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,final,single,segment,input,view,start,in,new,single,segment,input,view,this,records,per,segment,this,record,size,start,in,set,this,sort,buffer,get,0,0,return,new,mutable,object,iterator,t,private,final,single,segment,input,view,in,start,in,private,final,type,comparator,t,comp,comparator,private,final,int,num,total,size,private,final,int,num,per,segment,records,per,segment,private,int,current,total,0,private,int,current,in,segment,0,private,int,current,segment,index,0,override,public,t,next,t,reuse,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,reuse,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
FixedLengthRecordSorter -> @Override 	public final MutableObjectIterator<T> getIterator();1420654570;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		final SingleSegmentInputView startIn = new SingleSegmentInputView(this.recordsPerSegment * this.recordSize)__		startIn.set(this.sortBuffer.get(0), 0)__		_		return new MutableObjectIterator<T>() {_			_			private final SingleSegmentInputView in = startIn__			private final TypeComparator<T> comp = comparator__			_			private final int numTotal = size()__			private final int numPerSegment = recordsPerSegment__			_			private int currentTotal = 0__			private int currentInSegment = 0__			private int currentSegmentIndex = 0___			@Override_			public T next(T reuse) {_				if (this.currentTotal < this.numTotal) {_					_					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}_					_					this.currentTotal++__					this.currentInSegment++__					_					try {_						return this.comp.readWithKeyDenormalization(reuse, this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next() {_				if (this.currentTotal < this.numTotal) {__					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}__					this.currentTotal++__					this.currentInSegment++___					try {_						_						_						return this.comp.readWithKeyDenormalization(null, this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,final,single,segment,input,view,start,in,new,single,segment,input,view,this,records,per,segment,this,record,size,start,in,set,this,sort,buffer,get,0,0,return,new,mutable,object,iterator,t,private,final,single,segment,input,view,in,start,in,private,final,type,comparator,t,comp,comparator,private,final,int,num,total,size,private,final,int,num,per,segment,records,per,segment,private,int,current,total,0,private,int,current,in,segment,0,private,int,current,segment,index,0,override,public,t,next,t,reuse,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,reuse,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,null,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
FixedLengthRecordSorter -> @Override 	public final MutableObjectIterator<T> getIterator();1420654570;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		final SingleSegmentInputView startIn = new SingleSegmentInputView(this.recordsPerSegment * this.recordSize)__		startIn.set(this.sortBuffer.get(0), 0)__		_		return new MutableObjectIterator<T>() {_			_			private final SingleSegmentInputView in = startIn__			private final TypeComparator<T> comp = comparator__			_			private final int numTotal = size()__			private final int numPerSegment = recordsPerSegment__			_			private int currentTotal = 0__			private int currentInSegment = 0__			private int currentSegmentIndex = 0___			@Override_			public T next(T reuse) {_				if (this.currentTotal < this.numTotal) {_					_					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}_					_					this.currentTotal++__					this.currentInSegment++__					_					try {_						return this.comp.readWithKeyDenormalization(reuse, this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next() {_				if (this.currentTotal < this.numTotal) {__					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}__					this.currentTotal++__					this.currentInSegment++___					try {_						return this.comp.readWithKeyDenormalization(serializer.createInstance(), this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,final,single,segment,input,view,start,in,new,single,segment,input,view,this,records,per,segment,this,record,size,start,in,set,this,sort,buffer,get,0,0,return,new,mutable,object,iterator,t,private,final,single,segment,input,view,in,start,in,private,final,type,comparator,t,comp,comparator,private,final,int,num,total,size,private,final,int,num,per,segment,records,per,segment,private,int,current,total,0,private,int,current,in,segment,0,private,int,current,segment,index,0,override,public,t,next,t,reuse,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,reuse,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,serializer,create,instance,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
FixedLengthRecordSorter -> @Override 	public final MutableObjectIterator<T> getIterator();1421838095;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		final SingleSegmentInputView startIn = new SingleSegmentInputView(this.recordsPerSegment * this.recordSize)__		startIn.set(this.sortBuffer.get(0), 0)__		_		return new MutableObjectIterator<T>() {_			_			private final SingleSegmentInputView in = startIn__			private final TypeComparator<T> comp = comparator__			_			private final int numTotal = size()__			private final int numPerSegment = recordsPerSegment__			_			private int currentTotal = 0__			private int currentInSegment = 0__			private int currentSegmentIndex = 0___			@Override_			public T next(T reuse) {_				if (this.currentTotal < this.numTotal) {_					_					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}_					_					this.currentTotal++__					this.currentInSegment++__					_					try {_						return this.comp.readWithKeyDenormalization(reuse, this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next() {_				if (this.currentTotal < this.numTotal) {__					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}__					this.currentTotal++__					this.currentInSegment++___					try {_						return this.comp.readWithKeyDenormalization(serializer.createInstance(), this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,final,single,segment,input,view,start,in,new,single,segment,input,view,this,records,per,segment,this,record,size,start,in,set,this,sort,buffer,get,0,0,return,new,mutable,object,iterator,t,private,final,single,segment,input,view,in,start,in,private,final,type,comparator,t,comp,comparator,private,final,int,num,total,size,private,final,int,num,per,segment,records,per,segment,private,int,current,total,0,private,int,current,in,segment,0,private,int,current,segment,index,0,override,public,t,next,t,reuse,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,reuse,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,serializer,create,instance,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
FixedLengthRecordSorter -> @Override 	public final MutableObjectIterator<T> getIterator();1441738685;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		final SingleSegmentInputView startIn = new SingleSegmentInputView(this.recordsPerSegment * this.recordSize)__		startIn.set(this.sortBuffer.get(0), 0)__		_		return new MutableObjectIterator<T>() {_			_			private final SingleSegmentInputView in = startIn__			private final TypeComparator<T> comp = comparator__			_			private final int numTotal = size()__			private final int numPerSegment = recordsPerSegment__			_			private int currentTotal = 0__			private int currentInSegment = 0__			private int currentSegmentIndex = 0___			@Override_			public T next(T reuse) {_				if (this.currentTotal < this.numTotal) {_					_					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}_					_					this.currentTotal++__					this.currentInSegment++__					_					try {_						return this.comp.readWithKeyDenormalization(reuse, this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next() {_				if (this.currentTotal < this.numTotal) {__					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}__					this.currentTotal++__					this.currentInSegment++___					try {_						return this.comp.readWithKeyDenormalization(serializer.createInstance(), this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,final,single,segment,input,view,start,in,new,single,segment,input,view,this,records,per,segment,this,record,size,start,in,set,this,sort,buffer,get,0,0,return,new,mutable,object,iterator,t,private,final,single,segment,input,view,in,start,in,private,final,type,comparator,t,comp,comparator,private,final,int,num,total,size,private,final,int,num,per,segment,records,per,segment,private,int,current,total,0,private,int,current,in,segment,0,private,int,current,segment,index,0,override,public,t,next,t,reuse,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,reuse,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,serializer,create,instance,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
FixedLengthRecordSorter -> @Override 	public final MutableObjectIterator<T> getIterator();1442870284;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		final SingleSegmentInputView startIn = new SingleSegmentInputView(this.recordsPerSegment * this.recordSize)__		startIn.set(this.sortBuffer.get(0), 0)__		_		return new MutableObjectIterator<T>() {_			_			private final SingleSegmentInputView in = startIn__			private final TypeComparator<T> comp = comparator__			_			private final int numTotal = size()__			private final int numPerSegment = recordsPerSegment__			_			private int currentTotal = 0__			private int currentInSegment = 0__			private int currentSegmentIndex = 0___			@Override_			public T next(T reuse) {_				if (this.currentTotal < this.numTotal) {_					_					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}_					_					this.currentTotal++__					this.currentInSegment++__					_					try {_						return this.comp.readWithKeyDenormalization(reuse, this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next() {_				if (this.currentTotal < this.numTotal) {__					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}__					this.currentTotal++__					this.currentInSegment++___					try {_						return this.comp.readWithKeyDenormalization(serializer.createInstance(), this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,final,single,segment,input,view,start,in,new,single,segment,input,view,this,records,per,segment,this,record,size,start,in,set,this,sort,buffer,get,0,0,return,new,mutable,object,iterator,t,private,final,single,segment,input,view,in,start,in,private,final,type,comparator,t,comp,comparator,private,final,int,num,total,size,private,final,int,num,per,segment,records,per,segment,private,int,current,total,0,private,int,current,in,segment,0,private,int,current,segment,index,0,override,public,t,next,t,reuse,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,reuse,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,serializer,create,instance,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
FixedLengthRecordSorter -> @Override 	public final MutableObjectIterator<T> getIterator();1443521929;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		final SingleSegmentInputView startIn = new SingleSegmentInputView(this.recordsPerSegment * this.recordSize)__		startIn.set(this.sortBuffer.get(0), 0)__		_		return new MutableObjectIterator<T>() {_			_			private final SingleSegmentInputView in = startIn__			private final TypeComparator<T> comp = comparator__			_			private final int numTotal = size()__			private final int numPerSegment = recordsPerSegment__			_			private int currentTotal = 0__			private int currentInSegment = 0__			private int currentSegmentIndex = 0___			@Override_			public T next(T reuse) {_				if (this.currentTotal < this.numTotal) {_					_					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}_					_					this.currentTotal++__					this.currentInSegment++__					_					try {_						return this.comp.readWithKeyDenormalization(reuse, this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next() {_				if (this.currentTotal < this.numTotal) {__					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}__					this.currentTotal++__					this.currentInSegment++___					try {_						return this.comp.readWithKeyDenormalization(serializer.createInstance(), this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,final,single,segment,input,view,start,in,new,single,segment,input,view,this,records,per,segment,this,record,size,start,in,set,this,sort,buffer,get,0,0,return,new,mutable,object,iterator,t,private,final,single,segment,input,view,in,start,in,private,final,type,comparator,t,comp,comparator,private,final,int,num,total,size,private,final,int,num,per,segment,records,per,segment,private,int,current,total,0,private,int,current,in,segment,0,private,int,current,segment,index,0,override,public,t,next,t,reuse,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,reuse,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,serializer,create,instance,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
FixedLengthRecordSorter -> @Override 	public final MutableObjectIterator<T> getIterator();1493221488;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		final SingleSegmentInputView startIn = new SingleSegmentInputView(this.recordsPerSegment * this.recordSize)__		startIn.set(this.sortBuffer.get(0), 0)__		_		return new MutableObjectIterator<T>() {_			_			private final SingleSegmentInputView in = startIn__			private final TypeComparator<T> comp = comparator__			_			private final int numTotal = size()__			private final int numPerSegment = recordsPerSegment__			_			private int currentTotal = 0__			private int currentInSegment = 0__			private int currentSegmentIndex = 0___			@Override_			public T next(T reuse) {_				if (this.currentTotal < this.numTotal) {_					_					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}_					_					this.currentTotal++__					this.currentInSegment++__					_					try {_						return this.comp.readWithKeyDenormalization(reuse, this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next() {_				if (this.currentTotal < this.numTotal) {__					if (this.currentInSegment >= this.numPerSegment) {_						this.currentInSegment = 0__						this.currentSegmentIndex++__						this.in.set(sortBuffer.get(this.currentSegmentIndex), 0)__					}__					this.currentTotal++__					this.currentInSegment++___					try {_						return this.comp.readWithKeyDenormalization(serializer.createInstance(), this.in)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,final,single,segment,input,view,start,in,new,single,segment,input,view,this,records,per,segment,this,record,size,start,in,set,this,sort,buffer,get,0,0,return,new,mutable,object,iterator,t,private,final,single,segment,input,view,in,start,in,private,final,type,comparator,t,comp,comparator,private,final,int,num,total,size,private,final,int,num,per,segment,records,per,segment,private,int,current,total,0,private,int,current,in,segment,0,private,int,current,segment,index,0,override,public,t,next,t,reuse,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,reuse,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,total,this,num,total,if,this,current,in,segment,this,num,per,segment,this,current,in,segment,0,this,current,segment,index,this,in,set,sort,buffer,get,this,current,segment,index,0,this,current,total,this,current,in,segment,try,return,this,comp,read,with,key,denormalization,serializer,create,instance,this,in,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
FixedLengthRecordSorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1405024514;Gets the record at the given logical position.__@param reuse The reuse object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		final int buffer = logicalPosition / this.recordsPerSegment__		final int inBuffer = (logicalPosition % this.recordsPerSegment) * this.recordSize__		this.inView.set(this.sortBuffer.get(buffer), inBuffer)__		return this.comparator.readWithKeyDenormalization(reuse, this.inView)__	};gets,the,record,at,the,given,logical,position,param,reuse,the,reuse,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,final,int,buffer,logical,position,this,records,per,segment,final,int,in,buffer,logical,position,this,records,per,segment,this,record,size,this,in,view,set,this,sort,buffer,get,buffer,in,buffer,return,this,comparator,read,with,key,denormalization,reuse,this,in,view
FixedLengthRecordSorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1405090423;Gets the record at the given logical position.__@param reuse The reuse object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		final int buffer = logicalPosition / this.recordsPerSegment__		final int inBuffer = (logicalPosition % this.recordsPerSegment) * this.recordSize__		this.inView.set(this.sortBuffer.get(buffer), inBuffer)__		return this.comparator.readWithKeyDenormalization(reuse, this.inView)__	};gets,the,record,at,the,given,logical,position,param,reuse,the,reuse,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,final,int,buffer,logical,position,this,records,per,segment,final,int,in,buffer,logical,position,this,records,per,segment,this,record,size,this,in,view,set,this,sort,buffer,get,buffer,in,buffer,return,this,comparator,read,with,key,denormalization,reuse,this,in,view
FixedLengthRecordSorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1406853229;Gets the record at the given logical position.__@param reuse The reuse object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		final int buffer = logicalPosition / this.recordsPerSegment__		final int inBuffer = (logicalPosition % this.recordsPerSegment) * this.recordSize__		this.inView.set(this.sortBuffer.get(buffer), inBuffer)__		return this.comparator.readWithKeyDenormalization(reuse, this.inView)__	};gets,the,record,at,the,given,logical,position,param,reuse,the,reuse,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,final,int,buffer,logical,position,this,records,per,segment,final,int,in,buffer,logical,position,this,records,per,segment,this,record,size,this,in,view,set,this,sort,buffer,get,buffer,in,buffer,return,this,comparator,read,with,key,denormalization,reuse,this,in,view
FixedLengthRecordSorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1411473593;Gets the record at the given logical position.__@param reuse The reuse object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		final int buffer = logicalPosition / this.recordsPerSegment__		final int inBuffer = (logicalPosition % this.recordsPerSegment) * this.recordSize__		this.inView.set(this.sortBuffer.get(buffer), inBuffer)__		return this.comparator.readWithKeyDenormalization(reuse, this.inView)__	};gets,the,record,at,the,given,logical,position,param,reuse,the,reuse,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,final,int,buffer,logical,position,this,records,per,segment,final,int,in,buffer,logical,position,this,records,per,segment,this,record,size,this,in,view,set,this,sort,buffer,get,buffer,in,buffer,return,this,comparator,read,with,key,denormalization,reuse,this,in,view
FixedLengthRecordSorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1420654570;Gets the record at the given logical position.__@param reuse The reuse object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		final int buffer = logicalPosition / this.recordsPerSegment__		final int inBuffer = (logicalPosition % this.recordsPerSegment) * this.recordSize__		this.inView.set(this.sortBuffer.get(buffer), inBuffer)__		return this.comparator.readWithKeyDenormalization(reuse, this.inView)__	};gets,the,record,at,the,given,logical,position,param,reuse,the,reuse,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,final,int,buffer,logical,position,this,records,per,segment,final,int,in,buffer,logical,position,this,records,per,segment,this,record,size,this,in,view,set,this,sort,buffer,get,buffer,in,buffer,return,this,comparator,read,with,key,denormalization,reuse,this,in,view
FixedLengthRecordSorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1420654570;Gets the record at the given logical position.__@param reuse The reuse object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		final int buffer = logicalPosition / this.recordsPerSegment__		final int inBuffer = (logicalPosition % this.recordsPerSegment) * this.recordSize__		this.inView.set(this.sortBuffer.get(buffer), inBuffer)__		return this.comparator.readWithKeyDenormalization(reuse, this.inView)__	};gets,the,record,at,the,given,logical,position,param,reuse,the,reuse,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,final,int,buffer,logical,position,this,records,per,segment,final,int,in,buffer,logical,position,this,records,per,segment,this,record,size,this,in,view,set,this,sort,buffer,get,buffer,in,buffer,return,this,comparator,read,with,key,denormalization,reuse,this,in,view
FixedLengthRecordSorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1421838095;Gets the record at the given logical position.__@param reuse The reuse object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		final int buffer = logicalPosition / this.recordsPerSegment__		final int inBuffer = (logicalPosition % this.recordsPerSegment) * this.recordSize__		this.inView.set(this.sortBuffer.get(buffer), inBuffer)__		return this.comparator.readWithKeyDenormalization(reuse, this.inView)__	};gets,the,record,at,the,given,logical,position,param,reuse,the,reuse,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,final,int,buffer,logical,position,this,records,per,segment,final,int,in,buffer,logical,position,this,records,per,segment,this,record,size,this,in,view,set,this,sort,buffer,get,buffer,in,buffer,return,this,comparator,read,with,key,denormalization,reuse,this,in,view
FixedLengthRecordSorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1441738685;Gets the record at the given logical position.__@param reuse The reuse object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		final int buffer = logicalPosition / this.recordsPerSegment__		final int inBuffer = (logicalPosition % this.recordsPerSegment) * this.recordSize__		this.inView.set(this.sortBuffer.get(buffer), inBuffer)__		return this.comparator.readWithKeyDenormalization(reuse, this.inView)__	};gets,the,record,at,the,given,logical,position,param,reuse,the,reuse,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,final,int,buffer,logical,position,this,records,per,segment,final,int,in,buffer,logical,position,this,records,per,segment,this,record,size,this,in,view,set,this,sort,buffer,get,buffer,in,buffer,return,this,comparator,read,with,key,denormalization,reuse,this,in,view
FixedLengthRecordSorter -> @Override 	public void reset();1405024514;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortBufferOffset = 0__		this.sortBufferBytes = 0__		_		_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		_		_		this.currentSortBufferSegment = nextMemorySegment()__		this.sortBuffer.add(this.currentSortBufferSegment)__		this.outView.set(this.currentSortBufferSegment)__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,0,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment
FixedLengthRecordSorter -> @Override 	public void reset();1405090423;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortBufferOffset = 0__		this.sortBufferBytes = 0__		_		_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		_		_		this.currentSortBufferSegment = nextMemorySegment()__		this.sortBuffer.add(this.currentSortBufferSegment)__		this.outView.set(this.currentSortBufferSegment)__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,0,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment
FixedLengthRecordSorter -> @Override 	public void reset();1406853229;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortBufferOffset = 0__		this.sortBufferBytes = 0__		_		_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		_		_		this.currentSortBufferSegment = nextMemorySegment()__		this.sortBuffer.add(this.currentSortBufferSegment)__		this.outView.set(this.currentSortBufferSegment)__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,0,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment
FixedLengthRecordSorter -> @Override 	public void reset();1411473593;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortBufferOffset = 0__		this.sortBufferBytes = 0__		_		_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		_		_		this.currentSortBufferSegment = nextMemorySegment()__		this.sortBuffer.add(this.currentSortBufferSegment)__		this.outView.set(this.currentSortBufferSegment)__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,0,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment
FixedLengthRecordSorter -> @Override 	public void reset();1420654570;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortBufferOffset = 0__		this.sortBufferBytes = 0__		_		_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		_		_		this.currentSortBufferSegment = nextMemorySegment()__		this.sortBuffer.add(this.currentSortBufferSegment)__		this.outView.set(this.currentSortBufferSegment)__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,0,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment
FixedLengthRecordSorter -> @Override 	public void reset();1420654570;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortBufferOffset = 0__		this.sortBufferBytes = 0__		_		_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		_		_		this.currentSortBufferSegment = nextMemorySegment()__		this.sortBuffer.add(this.currentSortBufferSegment)__		this.outView.set(this.currentSortBufferSegment)__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,0,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment
FixedLengthRecordSorter -> @Override 	public void reset();1421838095;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortBufferOffset = 0__		this.sortBufferBytes = 0__		_		_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		_		_		this.currentSortBufferSegment = nextMemorySegment()__		this.sortBuffer.add(this.currentSortBufferSegment)__		this.outView.set(this.currentSortBufferSegment)__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,0,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment
FixedLengthRecordSorter -> @Override 	public void reset();1441738685;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortBufferOffset = 0__		this.sortBufferBytes = 0__		_		_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		_		_		this.currentSortBufferSegment = nextMemorySegment()__		this.sortBuffer.add(this.currentSortBufferSegment)__		this.outView.set(this.currentSortBufferSegment)__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,0,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment
FixedLengthRecordSorter -> @Override 	public void reset();1442870284;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortBufferOffset = 0__		this.sortBufferBytes = 0__		_		_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		_		_		this.currentSortBufferSegment = nextMemorySegment()__		this.sortBuffer.add(this.currentSortBufferSegment)__		this.outView.set(this.currentSortBufferSegment)__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,0,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment
FixedLengthRecordSorter -> @Override 	public void reset();1443521929;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortBufferOffset = 0__		this.sortBufferBytes = 0__		_		_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		_		_		this.currentSortBufferSegment = nextMemorySegment()__		this.sortBuffer.add(this.currentSortBufferSegment)__		this.outView.set(this.currentSortBufferSegment)__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,0,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment
FixedLengthRecordSorter -> @Override 	public void reset();1493221488;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortBufferOffset = 0__		this.sortBufferBytes = 0__		_		_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		_		_		this.currentSortBufferSegment = nextMemorySegment()__		this.sortBuffer.add(this.currentSortBufferSegment)__		this.outView.set(this.currentSortBufferSegment)__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,buffer,offset,0,this,sort,buffer,bytes,0,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,this,current,sort,buffer,segment,next,memory,segment,this,sort,buffer,add,this,current,sort,buffer,segment,this,out,view,set,this,current,sort,buffer,segment
FixedLengthRecordSorter -> @Override 	public List<MemorySegment> dispose();1405024514;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,return,this,free,memory
FixedLengthRecordSorter -> @Override 	public List<MemorySegment> dispose();1405090423;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,return,this,free,memory
FixedLengthRecordSorter -> @Override 	public List<MemorySegment> dispose();1406853229;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,return,this,free,memory
FixedLengthRecordSorter -> @Override 	public List<MemorySegment> dispose();1411473593;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,return,this,free,memory
FixedLengthRecordSorter -> @Override 	public List<MemorySegment> dispose();1420654570;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,return,this,free,memory
FixedLengthRecordSorter -> @Override 	public List<MemorySegment> dispose();1420654570;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,return,this,free,memory
FixedLengthRecordSorter -> @Override 	public List<MemorySegment> dispose();1421838095;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,return,this,free,memory
FixedLengthRecordSorter -> @Override 	public List<MemorySegment> dispose();1441738685;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortBuffer)__		this.sortBuffer.clear()__		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,buffer,this,sort,buffer,clear,return,this,free,memory
