commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the data set at the source of the edge. May be null, if the edge refers to the source via an ID  * and has not been connected.  *  * @return The data set at the source of the edge  */ ;/**  * Returns the data set at the source of the edge. May be null, if the edge refers to the source via an ID  * and has not been connected.  *  * @return The data set at the source of the edge  */ public IntermediateDataSet getSource() {     return source. }
true;public;0;3;/**  * Returns the vertex connected to this edge.  *  * @return The vertex connected to this edge.  */ ;/**  * Returns the vertex connected to this edge.  *  * @return The vertex connected to this edge.  */ public JobVertex getTarget() {     return target. }
true;public;0;3;/**  * Returns the distribution pattern used for this edge.  *  * @return The distribution pattern used for this edge.  */ ;/**  * Returns the distribution pattern used for this edge.  *  * @return The distribution pattern used for this edge.  */ public DistributionPattern getDistributionPattern() {     return this.distributionPattern. }
true;public;0;3;/**  * Gets the ID of the consumed data set.  *  * @return The ID of the consumed data set.  */ ;/**  * Gets the ID of the consumed data set.  *  * @return The ID of the consumed data set.  */ public IntermediateDataSetID getSourceId() {     return sourceId. }
false;public;0;3;;public boolean isIdReference() {     return this.source == null. }
false;public;1;13;;// -------------------------------------------------------------------------------------------- public void connecDataSet(IntermediateDataSet dataSet) {     if (dataSet == null) {         throw new NullPointerException().     }     if (this.source != null) {         throw new IllegalStateException("The edge is already connected.").     }     if (!dataSet.getId().equals(sourceId)) {         throw new IllegalArgumentException("The data set to connect does not match the sourceId.").     }     this.source = dataSet. }
true;public;0;3;/**  * Gets the name of the ship strategy for the represented input, like "forward", "partition hash",  * "rebalance", "broadcast", ...  *  * @return The name of the ship strategy for the represented input, or null, if none was set.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the name of the ship strategy for the represented input, like "forward", "partition hash",  * "rebalance", "broadcast", ...  *  * @return The name of the ship strategy for the represented input, or null, if none was set.  */ public String getShipStrategyName() {     return shipStrategyName. }
true;public;1;3;/**  * Sets the name of the ship strategy for the represented input.  *  * @param shipStrategyName The name of the ship strategy.  */ ;/**  * Sets the name of the ship strategy for the represented input.  *  * @param shipStrategyName The name of the ship strategy.  */ public void setShipStrategyName(String shipStrategyName) {     this.shipStrategyName = shipStrategyName. }
true;public;0;3;/**  * Gets the name of the pro-processing operation for this input.  *  * @return The name of the pro-processing operation, or null, if none was set.  */ ;/**  * Gets the name of the pro-processing operation for this input.  *  * @return The name of the pro-processing operation, or null, if none was set.  */ public String getPreProcessingOperationName() {     return preProcessingOperationName. }
true;public;1;3;/**  * Sets the name of the pre-processing operation for this input.  *  * @param preProcessingOperationName The name of the pre-processing operation.  */ ;/**  * Sets the name of the pre-processing operation for this input.  *  * @param preProcessingOperationName The name of the pre-processing operation.  */ public void setPreProcessingOperationName(String preProcessingOperationName) {     this.preProcessingOperationName = preProcessingOperationName. }
true;public;0;3;/**  * Gets the operator-level caching description for this input.  *  * @return The description of operator-level caching, or null, is none was set.  */ ;/**  * Gets the operator-level caching description for this input.  *  * @return The description of operator-level caching, or null, is none was set.  */ public String getOperatorLevelCachingDescription() {     return operatorLevelCachingDescription. }
true;public;1;3;/**  * Sets the operator-level caching description for this input.  *  * @param operatorLevelCachingDescription The description of operator-level caching.  */ ;/**  * Sets the operator-level caching description for this input.  *  * @param operatorLevelCachingDescription The description of operator-level caching.  */ public void setOperatorLevelCachingDescription(String operatorLevelCachingDescription) {     this.operatorLevelCachingDescription = operatorLevelCachingDescription. }
false;public;0;4;;// -------------------------------------------------------------------------------------------- @Override public String toString() {     return String.format("%s --> %s [%s]", sourceId, target, distributionPattern.name()). }
