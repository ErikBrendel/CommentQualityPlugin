commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;13;;@Override protected JobAccumulatorsInfo handleRequest(HandlerRequest<EmptyRequestBody, JobAccumulatorsMessageParameters> request, AccessExecutionGraph graph) throws RestHandlerException {     List<Boolean> queryParams = request.getQueryParameter(AccumulatorsIncludeSerializedValueQueryParameter.class).     final boolean includeSerializedValue.     if (!queryParams.isEmpty()) {         includeSerializedValue = queryParams.get(0).     } else {         includeSerializedValue = false.     }     return createJobAccumulatorsInfo(graph, includeSerializedValue). }
false;public;1;7;;@Override public Collection<ArchivedJson> archiveJsonWithPath(AccessExecutionGraph graph) throws IOException {     ResponseBody json = createJobAccumulatorsInfo(graph, true).     String path = getMessageHeaders().getTargetRestEndpointURL().replace(':' + JobIDPathParameter.KEY, graph.getJobID().toString()).     return Collections.singleton(new ArchivedJson(path, json)). }
false;private,static;2;22;;private static JobAccumulatorsInfo createJobAccumulatorsInfo(AccessExecutionGraph graph, boolean includeSerializedValue) {     StringifiedAccumulatorResult[] stringifiedAccs = graph.getAccumulatorResultsStringified().     List<JobAccumulatorsInfo.UserTaskAccumulator> userTaskAccumulators = new ArrayList<>(stringifiedAccs.length).     for (StringifiedAccumulatorResult acc : stringifiedAccs) {         userTaskAccumulators.add(new JobAccumulatorsInfo.UserTaskAccumulator(acc.getName(), acc.getType(), acc.getValue())).     }     JobAccumulatorsInfo accumulatorsInfo.     if (includeSerializedValue) {         Map<String, SerializedValue<OptionalFailure<Object>>> serializedUserTaskAccumulators = graph.getAccumulatorsSerialized().         accumulatorsInfo = new JobAccumulatorsInfo(Collections.emptyList(), userTaskAccumulators, serializedUserTaskAccumulators).     } else {         accumulatorsInfo = new JobAccumulatorsInfo(Collections.emptyList(), userTaskAccumulators, Collections.emptyMap()).     }     return accumulatorsInfo. }
