commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Handle an incoming signal.  *  * @param signal    The incoming signal  */ ;/**  * Handle an incoming signal.  *  * @param signal    The incoming signal  */ @Override public void handle(Signal signal) {     LOG.info("RECEIVED SIGNAL {}: SIG{}. Shutting down as requested.", signal.getNumber(), signal.getName()).     prevHandler.handle(signal). }
true;public,static;1;29;/**  * Register some signal handlers.  *  * @param LOG The slf4j logger  */ ;/**  * Register some signal handlers.  *  * @param LOG The slf4j logger  */ public static void register(final Logger LOG) {     synchronized (SignalHandler.class) {         if (registered) {             return.         }         registered = true.         final String[] SIGNALS = OperatingSystem.isWindows() ? new String[] { "TERM", "INT" } : new String[] { "TERM", "HUP", "INT" }.         StringBuilder bld = new StringBuilder().         bld.append("Registered UNIX signal handlers for [").         String separator = "".         for (String signalName : SIGNALS) {             try {                 new Handler(signalName, LOG).                 bld.append(separator).                 bld.append(signalName).                 separator = ", ".             } catch (Exception e) {                 LOG.info("Error while registering signal handler", e).             }         }         bld.append("]").         LOG.info(bld.toString()).     } }
