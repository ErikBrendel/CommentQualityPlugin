# id;timestamp;commentText;codeText;commentWords;codeWords
FlinkUntypedActor -> abstract protected UUID getLeaderSessionID()_;1441011751;Returns the current leader session ID associcated with this actor._@return;abstract protected UUID getLeaderSessionID()_;returns,the,current,leader,session,id,associcated,with,this,actor,return;abstract,protected,uuid,get,leader,session,id
FlinkUntypedActor -> abstract protected UUID getLeaderSessionID()_;1459248687;Returns the current leader session ID associcated with this actor._@return;abstract protected UUID getLeaderSessionID()_;returns,the,current,leader,session,id,associcated,with,this,actor,return;abstract,protected,uuid,get,leader,session,id
FlinkUntypedActor -> abstract protected UUID getLeaderSessionID()_;1480585463;Returns the current leader session ID associcated with this actor._@return;abstract protected UUID getLeaderSessionID()_;returns,the,current,leader,session,id,associcated,with,this,actor,return;abstract,protected,uuid,get,leader,session,id
FlinkUntypedActor -> abstract protected UUID getLeaderSessionID()_;1490174800;Returns the current leader session ID associcated with this actor._@return;abstract protected UUID getLeaderSessionID()_;returns,the,current,leader,session,id,associcated,with,this,actor,return;abstract,protected,uuid,get,leader,session,id
FlinkUntypedActor -> protected abstract Option<UUID> getLeaderSessionID()_;1437665997;Returns the current leader session ID associcated with this actor._@return;protected abstract Option<UUID> getLeaderSessionID()_;returns,the,current,leader,session,id,associcated,with,this,actor,return;protected,abstract,option,uuid,get,leader,session,id
FlinkUntypedActor -> protected abstract Option<UUID> getLeaderSessionID()_;1439993791;Returns the current leader session ID associcated with this actor._@return;protected abstract Option<UUID> getLeaderSessionID()_;returns,the,current,leader,session,id,associcated,with,this,actor,return;protected,abstract,option,uuid,get,leader,session,id
FlinkUntypedActor -> protected abstract Option<UUID> getLeaderSessionID()_;1440951699;Returns the current leader session ID associcated with this actor._@return;protected abstract Option<UUID> getLeaderSessionID()_;returns,the,current,leader,session,id,associcated,with,this,actor,return;protected,abstract,option,uuid,get,leader,session,id
FlinkUntypedActor -> protected abstract void handleMessage(Object message) throws Exception_;1437665997;This method contains the actor logic which defines how to react to incoming messages.__@param message Incoming message_@throws Exception;protected abstract void handleMessage(Object message) throws Exception_;this,method,contains,the,actor,logic,which,defines,how,to,react,to,incoming,messages,param,message,incoming,message,throws,exception;protected,abstract,void,handle,message,object,message,throws,exception
FlinkUntypedActor -> protected abstract void handleMessage(Object message) throws Exception_;1439993791;This method contains the actor logic which defines how to react to incoming messages.__@param message Incoming message_@throws Exception;protected abstract void handleMessage(Object message) throws Exception_;this,method,contains,the,actor,logic,which,defines,how,to,react,to,incoming,messages,param,message,incoming,message,throws,exception;protected,abstract,void,handle,message,object,message,throws,exception
FlinkUntypedActor -> protected abstract void handleMessage(Object message) throws Exception_;1440951699;This method contains the actor logic which defines how to react to incoming messages.__@param message Incoming message_@throws Exception;protected abstract void handleMessage(Object message) throws Exception_;this,method,contains,the,actor,logic,which,defines,how,to,react,to,incoming,messages,param,message,incoming,message,throws,exception;protected,abstract,void,handle,message,object,message,throws,exception
FlinkUntypedActor -> protected abstract void handleMessage(Object message) throws Exception_;1441011751;This method contains the actor logic which defines how to react to incoming messages.__@param message Incoming message_@throws Exception;protected abstract void handleMessage(Object message) throws Exception_;this,method,contains,the,actor,logic,which,defines,how,to,react,to,incoming,messages,param,message,incoming,message,throws,exception;protected,abstract,void,handle,message,object,message,throws,exception
FlinkUntypedActor -> protected abstract void handleMessage(Object message) throws Exception_;1459248687;This method contains the actor logic which defines how to react to incoming messages.__@param message Incoming message_@throws Exception;protected abstract void handleMessage(Object message) throws Exception_;this,method,contains,the,actor,logic,which,defines,how,to,react,to,incoming,messages,param,message,incoming,message,throws,exception;protected,abstract,void,handle,message,object,message,throws,exception
FlinkUntypedActor -> protected abstract void handleMessage(Object message) throws Exception_;1480585463;This method contains the actor logic which defines how to react to incoming messages.__@param message Incoming message_@throws Exception;protected abstract void handleMessage(Object message) throws Exception_;this,method,contains,the,actor,logic,which,defines,how,to,react,to,incoming,messages,param,message,incoming,message,throws,exception;protected,abstract,void,handle,message,object,message,throws,exception
FlinkUntypedActor -> protected abstract void handleMessage(Object message) throws Exception_;1490174800;This method contains the actor logic which defines how to react to incoming messages.__@param message Incoming message_@throws Exception;protected abstract void handleMessage(Object message) throws Exception_;this,method,contains,the,actor,logic,which,defines,how,to,react,to,incoming,messages,param,message,incoming,message,throws,exception;protected,abstract,void,handle,message,object,message,throws,exception
FlinkUntypedActor -> protected abstract void handleMessage(Object message) throws Exception_;1499773775;This method contains the actor logic which defines how to react to incoming messages.__@param message Incoming message_@throws Exception;protected abstract void handleMessage(Object message) throws Exception_;this,method,contains,the,actor,logic,which,defines,how,to,react,to,incoming,messages,param,message,incoming,message,throws,exception;protected,abstract,void,handle,message,object,message,throws,exception
FlinkUntypedActor -> protected abstract void handleMessage(Object message) throws Exception_;1515177485;This method contains the actor logic which defines how to react to incoming messages.__@param message Incoming message_@throws Exception;protected abstract void handleMessage(Object message) throws Exception_;this,method,contains,the,actor,logic,which,defines,how,to,react,to,incoming,messages,param,message,incoming,message,throws,exception;protected,abstract,void,handle,message,object,message,throws,exception
FlinkUntypedActor -> protected Object decorateMessage(Object message);1437665997;This method should be called for every outgoing message. It wraps messages which require_a leader session ID (indicated by {@link RequiresLeaderSessionID}) in a_{@link LeaderSessionMessage} with the actor's leader session ID.__This method can be overriden to implement a different decoration behavior.__@param message Message to be decorated_@return The deocrated message;protected Object decorateMessage(Object message) {_		if(message instanceof  RequiresLeaderSessionID) {_			return new LeaderSessionMessage(getLeaderSessionID(), message)__		} else {_			return message__		}_	};this,method,should,be,called,for,every,outgoing,message,it,wraps,messages,which,require,a,leader,session,id,indicated,by,link,requires,leader,session,id,in,a,link,leader,session,message,with,the,actor,s,leader,session,id,this,method,can,be,overriden,to,implement,a,different,decoration,behavior,param,message,message,to,be,decorated,return,the,deocrated,message;protected,object,decorate,message,object,message,if,message,instanceof,requires,leader,session,id,return,new,leader,session,message,get,leader,session,id,message,else,return,message
FlinkUntypedActor -> protected Object decorateMessage(Object message);1439993791;This method should be called for every outgoing message. It wraps messages which require_a leader session ID (indicated by {@link RequiresLeaderSessionID}) in a_{@link LeaderSessionMessage} with the actor's leader session ID.__This method can be overriden to implement a different decoration behavior.__@param message Message to be decorated_@return The deocrated message;protected Object decorateMessage(Object message) {_		if(message instanceof  RequiresLeaderSessionID) {_			return new LeaderSessionMessage(getLeaderSessionID(), message)__		} else {_			return message__		}_	};this,method,should,be,called,for,every,outgoing,message,it,wraps,messages,which,require,a,leader,session,id,indicated,by,link,requires,leader,session,id,in,a,link,leader,session,message,with,the,actor,s,leader,session,id,this,method,can,be,overriden,to,implement,a,different,decoration,behavior,param,message,message,to,be,decorated,return,the,deocrated,message;protected,object,decorate,message,object,message,if,message,instanceof,requires,leader,session,id,return,new,leader,session,message,get,leader,session,id,message,else,return,message
FlinkUntypedActor -> protected Object decorateMessage(Object message);1440951699;This method should be called for every outgoing message. It wraps messages which require_a leader session ID (indicated by {@link RequiresLeaderSessionID}) in a_{@link LeaderSessionMessage} with the actor's leader session ID.__This method can be overriden to implement a different decoration behavior.__@param message Message to be decorated_@return The deocrated message;protected Object decorateMessage(Object message) {_		if(message instanceof  RequiresLeaderSessionID) {_			return new LeaderSessionMessage(getLeaderSessionID(), message)__		} else {_			return message__		}_	};this,method,should,be,called,for,every,outgoing,message,it,wraps,messages,which,require,a,leader,session,id,indicated,by,link,requires,leader,session,id,in,a,link,leader,session,message,with,the,actor,s,leader,session,id,this,method,can,be,overriden,to,implement,a,different,decoration,behavior,param,message,message,to,be,decorated,return,the,deocrated,message;protected,object,decorate,message,object,message,if,message,instanceof,requires,leader,session,id,return,new,leader,session,message,get,leader,session,id,message,else,return,message
FlinkUntypedActor -> protected Object decorateMessage(Object message);1441011751;This method should be called for every outgoing message. It wraps messages which require_a leader session ID (indicated by {@link RequiresLeaderSessionID}) in a_{@link LeaderSessionMessage} with the actor's leader session ID.__This method can be overriden to implement a different decoration behavior.__@param message Message to be decorated_@return The deocrated message;protected Object decorateMessage(Object message) {_		if(message instanceof  RequiresLeaderSessionID) {_			return new LeaderSessionMessage(getLeaderSessionID(), message)__		} else {_			return message__		}_	};this,method,should,be,called,for,every,outgoing,message,it,wraps,messages,which,require,a,leader,session,id,indicated,by,link,requires,leader,session,id,in,a,link,leader,session,message,with,the,actor,s,leader,session,id,this,method,can,be,overriden,to,implement,a,different,decoration,behavior,param,message,message,to,be,decorated,return,the,deocrated,message;protected,object,decorate,message,object,message,if,message,instanceof,requires,leader,session,id,return,new,leader,session,message,get,leader,session,id,message,else,return,message
FlinkUntypedActor -> protected Object decorateMessage(Object message);1459248687;This method should be called for every outgoing message. It wraps messages which require_a leader session ID (indicated by {@link RequiresLeaderSessionID}) in a_{@link LeaderSessionMessage} with the actor's leader session ID.__This method can be overriden to implement a different decoration behavior.__@param message Message to be decorated_@return The deocrated message;protected Object decorateMessage(Object message) {_		if (message instanceof RequiresLeaderSessionID) {_			return new LeaderSessionMessage(getLeaderSessionID(), message)__		} else {_			return message__		}_	};this,method,should,be,called,for,every,outgoing,message,it,wraps,messages,which,require,a,leader,session,id,indicated,by,link,requires,leader,session,id,in,a,link,leader,session,message,with,the,actor,s,leader,session,id,this,method,can,be,overriden,to,implement,a,different,decoration,behavior,param,message,message,to,be,decorated,return,the,deocrated,message;protected,object,decorate,message,object,message,if,message,instanceof,requires,leader,session,id,return,new,leader,session,message,get,leader,session,id,message,else,return,message
FlinkUntypedActor -> protected Object decorateMessage(Object message);1480585463;This method should be called for every outgoing message. It wraps messages which require_a leader session ID (indicated by {@link RequiresLeaderSessionID}) in a_{@link LeaderSessionMessage} with the actor's leader session ID.__This method can be overriden to implement a different decoration behavior.__@param message Message to be decorated_@return The deocrated message;protected Object decorateMessage(Object message) {_		if (message instanceof RequiresLeaderSessionID) {_			return new LeaderSessionMessage(getLeaderSessionID(), message)__		} else {_			return message__		}_	};this,method,should,be,called,for,every,outgoing,message,it,wraps,messages,which,require,a,leader,session,id,indicated,by,link,requires,leader,session,id,in,a,link,leader,session,message,with,the,actor,s,leader,session,id,this,method,can,be,overriden,to,implement,a,different,decoration,behavior,param,message,message,to,be,decorated,return,the,deocrated,message;protected,object,decorate,message,object,message,if,message,instanceof,requires,leader,session,id,return,new,leader,session,message,get,leader,session,id,message,else,return,message
FlinkUntypedActor -> protected Object decorateMessage(Object message);1490174800;This method should be called for every outgoing message. It wraps messages which require_a leader session ID (indicated by {@link RequiresLeaderSessionID}) in a_{@link LeaderSessionMessage} with the actor's leader session ID.__This method can be overriden to implement a different decoration behavior.__@param message Message to be decorated_@return The deocrated message;protected Object decorateMessage(Object message) {_		if (message instanceof RequiresLeaderSessionID) {_			return new LeaderSessionMessage(getLeaderSessionID(), message)__		} else {_			return message__		}_	};this,method,should,be,called,for,every,outgoing,message,it,wraps,messages,which,require,a,leader,session,id,indicated,by,link,requires,leader,session,id,in,a,link,leader,session,message,with,the,actor,s,leader,session,id,this,method,can,be,overriden,to,implement,a,different,decoration,behavior,param,message,message,to,be,decorated,return,the,deocrated,message;protected,object,decorate,message,object,message,if,message,instanceof,requires,leader,session,id,return,new,leader,session,message,get,leader,session,id,message,else,return,message
FlinkUntypedActor -> protected Object decorateMessage(Object message);1499773775;This method should be called for every outgoing message. It wraps messages which require_a leader session ID (indicated by {@link RequiresLeaderSessionID}) in a_{@link LeaderSessionMessage} with the actor's leader session ID.__<p>This method can be overriden to implement a different decoration behavior.__@param message Message to be decorated_@return The deocrated message;protected Object decorateMessage(Object message) {_		if (message instanceof RequiresLeaderSessionID) {_			return new LeaderSessionMessage(getLeaderSessionID(), message)__		} else {_			return message__		}_	};this,method,should,be,called,for,every,outgoing,message,it,wraps,messages,which,require,a,leader,session,id,indicated,by,link,requires,leader,session,id,in,a,link,leader,session,message,with,the,actor,s,leader,session,id,p,this,method,can,be,overriden,to,implement,a,different,decoration,behavior,param,message,message,to,be,decorated,return,the,deocrated,message;protected,object,decorate,message,object,message,if,message,instanceof,requires,leader,session,id,return,new,leader,session,message,get,leader,session,id,message,else,return,message
FlinkUntypedActor -> protected Object decorateMessage(Object message);1515177485;This method should be called for every outgoing message. It wraps messages which require_a leader session ID (indicated by {@link RequiresLeaderSessionID}) in a_{@link LeaderSessionMessage} with the actor's leader session ID.__<p>This method can be overridden to implement a different decoration behavior.__@param message Message to be decorated_@return The decorated message;protected Object decorateMessage(Object message) {_		if (message instanceof RequiresLeaderSessionID) {_			return new LeaderSessionMessage(getLeaderSessionID(), message)__		} else {_			return message__		}_	};this,method,should,be,called,for,every,outgoing,message,it,wraps,messages,which,require,a,leader,session,id,indicated,by,link,requires,leader,session,id,in,a,link,leader,session,message,with,the,actor,s,leader,session,id,p,this,method,can,be,overridden,to,implement,a,different,decoration,behavior,param,message,message,to,be,decorated,return,the,decorated,message;protected,object,decorate,message,object,message,if,message,instanceof,requires,leader,session,id,return,new,leader,session,message,get,leader,session,id,message,else,return,message
FlinkUntypedActor -> protected abstract UUID getLeaderSessionID()_;1499773775;Returns the current leader session ID associcated with this actor._@return;protected abstract UUID getLeaderSessionID()_;returns,the,current,leader,session,id,associcated,with,this,actor,return;protected,abstract,uuid,get,leader,session,id
FlinkUntypedActor -> protected abstract UUID getLeaderSessionID()_;1515177485;Returns the current leader session ID associated with this actor._@return;protected abstract UUID getLeaderSessionID()_;returns,the,current,leader,session,id,associated,with,this,actor,return;protected,abstract,uuid,get,leader,session,id
FlinkUntypedActor -> @Override 	public final void onReceive(Object message) throws Exception;1437665997;This method is called by Akka if a new message has arrived for the actor. It logs the_processing time of the incoming message if the logging level is set to debug. After logging_the handleLeaderSessionID method is called.__Important: This method cannot be overriden. The actor specific message handling logic is_implemented by the method handleMessage.__@param message Incoming message_@throws Exception;@Override_	public final void onReceive(Object message) throws Exception {_		if(LOG.isDebugEnabled()) {_			LOG.debug("Received message {} at {} from {}.", message, getSelf().path(), getSender())___			long start = System.nanoTime()___			handleLeaderSessionID(message)___			long duration = (System.nanoTime() - start)/ 1000000___			LOG.debug("Handled message {} in {} ms from {}.", message, duration, getSender())__		} else {_			handleLeaderSessionID(message)__		}_	};this,method,is,called,by,akka,if,a,new,message,has,arrived,for,the,actor,it,logs,the,processing,time,of,the,incoming,message,if,the,logging,level,is,set,to,debug,after,logging,the,handle,leader,session,id,method,is,called,important,this,method,cannot,be,overriden,the,actor,specific,message,handling,logic,is,implemented,by,the,method,handle,message,param,message,incoming,message,throws,exception;override,public,final,void,on,receive,object,message,throws,exception,if,log,is,debug,enabled,log,debug,received,message,at,from,message,get,self,path,get,sender,long,start,system,nano,time,handle,leader,session,id,message,long,duration,system,nano,time,start,1000000,log,debug,handled,message,in,ms,from,message,duration,get,sender,else,handle,leader,session,id,message
FlinkUntypedActor -> @Override 	public final void onReceive(Object message) throws Exception;1439993791;This method is called by Akka if a new message has arrived for the actor. It logs the_processing time of the incoming message if the logging level is set to debug. After logging_the handleLeaderSessionID method is called.__Important: This method cannot be overriden. The actor specific message handling logic is_implemented by the method handleMessage.__@param message Incoming message_@throws Exception;@Override_	public final void onReceive(Object message) throws Exception {_		if(LOG.isDebugEnabled()) {_			LOG.debug("Received message {} at {} from {}.", message, getSelf().path(), getSender())___			long start = System.nanoTime()___			handleLeaderSessionID(message)___			long duration = (System.nanoTime() - start)/ 1000000___			LOG.debug("Handled message {} in {} ms from {}.", message, duration, getSender())__		} else {_			handleLeaderSessionID(message)__		}_	};this,method,is,called,by,akka,if,a,new,message,has,arrived,for,the,actor,it,logs,the,processing,time,of,the,incoming,message,if,the,logging,level,is,set,to,debug,after,logging,the,handle,leader,session,id,method,is,called,important,this,method,cannot,be,overriden,the,actor,specific,message,handling,logic,is,implemented,by,the,method,handle,message,param,message,incoming,message,throws,exception;override,public,final,void,on,receive,object,message,throws,exception,if,log,is,debug,enabled,log,debug,received,message,at,from,message,get,self,path,get,sender,long,start,system,nano,time,handle,leader,session,id,message,long,duration,system,nano,time,start,1000000,log,debug,handled,message,in,ms,from,message,duration,get,sender,else,handle,leader,session,id,message
FlinkUntypedActor -> @Override 	public final void onReceive(Object message) throws Exception;1440951699;This method is called by Akka if a new message has arrived for the actor. It logs the_processing time of the incoming message if the logging level is set to debug. After logging_the handleLeaderSessionID method is called.__Important: This method cannot be overriden. The actor specific message handling logic is_implemented by the method handleMessage.__@param message Incoming message_@throws Exception;@Override_	public final void onReceive(Object message) throws Exception {_		if(LOG.isDebugEnabled()) {_			LOG.debug("Received message {} at {} from {}.", message, getSelf().path(), getSender())___			long start = System.nanoTime()___			handleLeaderSessionID(message)___			long duration = (System.nanoTime() - start)/ 1000000___			LOG.debug("Handled message {} in {} ms from {}.", message, duration, getSender())__		} else {_			handleLeaderSessionID(message)__		}_	};this,method,is,called,by,akka,if,a,new,message,has,arrived,for,the,actor,it,logs,the,processing,time,of,the,incoming,message,if,the,logging,level,is,set,to,debug,after,logging,the,handle,leader,session,id,method,is,called,important,this,method,cannot,be,overriden,the,actor,specific,message,handling,logic,is,implemented,by,the,method,handle,message,param,message,incoming,message,throws,exception;override,public,final,void,on,receive,object,message,throws,exception,if,log,is,debug,enabled,log,debug,received,message,at,from,message,get,self,path,get,sender,long,start,system,nano,time,handle,leader,session,id,message,long,duration,system,nano,time,start,1000000,log,debug,handled,message,in,ms,from,message,duration,get,sender,else,handle,leader,session,id,message
FlinkUntypedActor -> @Override 	public final void onReceive(Object message) throws Exception;1441011751;This method is called by Akka if a new message has arrived for the actor. It logs the_processing time of the incoming message if the logging level is set to debug. After logging_the handleLeaderSessionID method is called.__Important: This method cannot be overriden. The actor specific message handling logic is_implemented by the method handleMessage.__@param message Incoming message_@throws Exception;@Override_	public final void onReceive(Object message) throws Exception {_		if(LOG.isDebugEnabled()) {_			LOG.debug("Received message {} at {} from {}.", message, getSelf().path(), getSender())___			long start = System.nanoTime()___			handleLeaderSessionID(message)___			long duration = (System.nanoTime() - start)/ 1000000___			LOG.debug("Handled message {} in {} ms from {}.", message, duration, getSender())__		} else {_			handleLeaderSessionID(message)__		}_	};this,method,is,called,by,akka,if,a,new,message,has,arrived,for,the,actor,it,logs,the,processing,time,of,the,incoming,message,if,the,logging,level,is,set,to,debug,after,logging,the,handle,leader,session,id,method,is,called,important,this,method,cannot,be,overriden,the,actor,specific,message,handling,logic,is,implemented,by,the,method,handle,message,param,message,incoming,message,throws,exception;override,public,final,void,on,receive,object,message,throws,exception,if,log,is,debug,enabled,log,debug,received,message,at,from,message,get,self,path,get,sender,long,start,system,nano,time,handle,leader,session,id,message,long,duration,system,nano,time,start,1000000,log,debug,handled,message,in,ms,from,message,duration,get,sender,else,handle,leader,session,id,message
FlinkUntypedActor -> @Override 	public final void onReceive(Object message) throws Exception;1459248687;This method is called by Akka if a new message has arrived for the actor. It logs the_processing time of the incoming message if the logging level is set to debug. After logging_the handleLeaderSessionID method is called.__Important: This method cannot be overriden. The actor specific message handling logic is_implemented by the method handleMessage.__@param message Incoming message_@throws Exception;@Override_	public final void onReceive(Object message) throws Exception {_		if(LOG.isDebugEnabled()) {_			LOG.debug("Received message {} at {} from {}.", message, getSelf().path(), getSender())___			long start = System.nanoTime()___			handleLeaderSessionID(message)___			long duration = (System.nanoTime() - start)/ 1000000___			LOG.debug("Handled message {} in {} ms from {}.", message, duration, getSender())__		} else {_			handleLeaderSessionID(message)__		}_	};this,method,is,called,by,akka,if,a,new,message,has,arrived,for,the,actor,it,logs,the,processing,time,of,the,incoming,message,if,the,logging,level,is,set,to,debug,after,logging,the,handle,leader,session,id,method,is,called,important,this,method,cannot,be,overriden,the,actor,specific,message,handling,logic,is,implemented,by,the,method,handle,message,param,message,incoming,message,throws,exception;override,public,final,void,on,receive,object,message,throws,exception,if,log,is,debug,enabled,log,debug,received,message,at,from,message,get,self,path,get,sender,long,start,system,nano,time,handle,leader,session,id,message,long,duration,system,nano,time,start,1000000,log,debug,handled,message,in,ms,from,message,duration,get,sender,else,handle,leader,session,id,message
FlinkUntypedActor -> @Override 	public final void onReceive(Object message) throws Exception;1480585463;This method is called by Akka if a new message has arrived for the actor. It logs the_processing time of the incoming message if the logging level is set to debug. After logging_the handleLeaderSessionID method is called.__Important: This method cannot be overriden. The actor specific message handling logic is_implemented by the method handleMessage.__@param message Incoming message_@throws Exception;@Override_	public final void onReceive(Object message) throws Exception {_		if(LOG.isTraceEnabled()) {_			LOG.trace("Received message {} at {} from {}.", message, getSelf().path(), getSender())___			long start = System.nanoTime()___			handleLeaderSessionID(message)___			long duration = (System.nanoTime() - start)/ 1_000_000___			LOG.trace("Handled message {} in {} ms from {}.", message, duration, getSender())__		} else {_			handleLeaderSessionID(message)__		}_	};this,method,is,called,by,akka,if,a,new,message,has,arrived,for,the,actor,it,logs,the,processing,time,of,the,incoming,message,if,the,logging,level,is,set,to,debug,after,logging,the,handle,leader,session,id,method,is,called,important,this,method,cannot,be,overriden,the,actor,specific,message,handling,logic,is,implemented,by,the,method,handle,message,param,message,incoming,message,throws,exception;override,public,final,void,on,receive,object,message,throws,exception,if,log,is,trace,enabled,log,trace,received,message,at,from,message,get,self,path,get,sender,long,start,system,nano,time,handle,leader,session,id,message,long,duration,system,nano,time,start,log,trace,handled,message,in,ms,from,message,duration,get,sender,else,handle,leader,session,id,message
FlinkUntypedActor -> @Override 	public final void onReceive(Object message) throws Exception;1490174800;This method is called by Akka if a new message has arrived for the actor. It logs the_processing time of the incoming message if the logging level is set to debug. After logging_the handleLeaderSessionID method is called.__Important: This method cannot be overriden. The actor specific message handling logic is_implemented by the method handleMessage.__@param message Incoming message_@throws Exception;@Override_	public final void onReceive(Object message) throws Exception {_		if(LOG.isTraceEnabled()) {_			LOG.trace("Received message {} at {} from {}.", message, getSelf().path(), getSender())___			long start = System.nanoTime()___			handleLeaderSessionID(message)___			long duration = (System.nanoTime() - start)/ 1_000_000___			LOG.trace("Handled message {} in {} ms from {}.", message, duration, getSender())__		} else {_			handleLeaderSessionID(message)__		}_	};this,method,is,called,by,akka,if,a,new,message,has,arrived,for,the,actor,it,logs,the,processing,time,of,the,incoming,message,if,the,logging,level,is,set,to,debug,after,logging,the,handle,leader,session,id,method,is,called,important,this,method,cannot,be,overriden,the,actor,specific,message,handling,logic,is,implemented,by,the,method,handle,message,param,message,incoming,message,throws,exception;override,public,final,void,on,receive,object,message,throws,exception,if,log,is,trace,enabled,log,trace,received,message,at,from,message,get,self,path,get,sender,long,start,system,nano,time,handle,leader,session,id,message,long,duration,system,nano,time,start,log,trace,handled,message,in,ms,from,message,duration,get,sender,else,handle,leader,session,id,message
FlinkUntypedActor -> @Override 	public final void onReceive(Object message) throws Exception;1499773775;This method is called by Akka if a new message has arrived for the actor. It logs the_processing time of the incoming message if the logging level is set to debug. After logging_the handleLeaderSessionID method is called.__<p>Important: This method cannot be overriden. The actor specific message handling logic is_implemented by the method handleMessage.__@param message Incoming message_@throws Exception;@Override_	public final void onReceive(Object message) throws Exception {_		if (LOG.isTraceEnabled()) {_			LOG.trace("Received message {} at {} from {}.", message, getSelf().path(), getSender())___			long start = System.nanoTime()___			handleLeaderSessionID(message)___			long duration = (System.nanoTime() - start) / 1_000_000___			LOG.trace("Handled message {} in {} ms from {}.", message, duration, getSender())__		} else {_			handleLeaderSessionID(message)__		}_	};this,method,is,called,by,akka,if,a,new,message,has,arrived,for,the,actor,it,logs,the,processing,time,of,the,incoming,message,if,the,logging,level,is,set,to,debug,after,logging,the,handle,leader,session,id,method,is,called,p,important,this,method,cannot,be,overriden,the,actor,specific,message,handling,logic,is,implemented,by,the,method,handle,message,param,message,incoming,message,throws,exception;override,public,final,void,on,receive,object,message,throws,exception,if,log,is,trace,enabled,log,trace,received,message,at,from,message,get,self,path,get,sender,long,start,system,nano,time,handle,leader,session,id,message,long,duration,system,nano,time,start,log,trace,handled,message,in,ms,from,message,duration,get,sender,else,handle,leader,session,id,message
FlinkUntypedActor -> @Override 	public final void onReceive(Object message) throws Exception;1515177485;This method is called by Akka if a new message has arrived for the actor. It logs the_processing time of the incoming message if the logging level is set to debug. After logging_the handleLeaderSessionID method is called.__<p>Important: This method cannot be overridden. The actor specific message handling logic is_implemented by the method handleMessage.__@param message Incoming message_@throws Exception;@Override_	public final void onReceive(Object message) throws Exception {_		if (LOG.isTraceEnabled()) {_			LOG.trace("Received message {} at {} from {}.", message, getSelf().path(), getSender())___			long start = System.nanoTime()___			handleLeaderSessionID(message)___			long duration = (System.nanoTime() - start) / 1_000_000___			LOG.trace("Handled message {} in {} ms from {}.", message, duration, getSender())__		} else {_			handleLeaderSessionID(message)__		}_	};this,method,is,called,by,akka,if,a,new,message,has,arrived,for,the,actor,it,logs,the,processing,time,of,the,incoming,message,if,the,logging,level,is,set,to,debug,after,logging,the,handle,leader,session,id,method,is,called,p,important,this,method,cannot,be,overridden,the,actor,specific,message,handling,logic,is,implemented,by,the,method,handle,message,param,message,incoming,message,throws,exception;override,public,final,void,on,receive,object,message,throws,exception,if,log,is,trace,enabled,log,trace,received,message,at,from,message,get,self,path,get,sender,long,start,system,nano,time,handle,leader,session,id,message,long,duration,system,nano,time,start,log,trace,handled,message,in,ms,from,message,duration,get,sender,else,handle,leader,session,id,message
FlinkUntypedActor -> private void handleLeaderSessionID(Object message) throws Exception;1437665997;This method filters out {@link LeaderSessionMessage} whose leader session ID is not equal_to the actors leader session ID. If a message of type {@link RequiresLeaderSessionID}_arrives, then an Exception is thrown, because these messages have to be wrapped in a_{@link LeaderSessionMessage}.__@param message Incoming message_@throws Exception;private void handleLeaderSessionID(Object message) throws Exception {_		if(message instanceof LeaderSessionMessage) {_			LeaderSessionMessage msg = (LeaderSessionMessage) message___			if(msg.leaderSessionID().isDefined() && getLeaderSessionID().isDefined()) {_				if(getLeaderSessionID().equals(msg.leaderSessionID())) {_					_					handleMessage(msg.message())__				} else {_					handleDiscardedMessage(msg)__				}_			} else {_				handleDiscardedMessage(msg)__			}_		} else if (message instanceof RequiresLeaderSessionID) {_			throw new Exception("Received a message " + message + " without a leader session " +_					"ID, even though it requires to have one.")__		} else {_			_			handleMessage(message)__		}_	};this,method,filters,out,link,leader,session,message,whose,leader,session,id,is,not,equal,to,the,actors,leader,session,id,if,a,message,of,type,link,requires,leader,session,id,arrives,then,an,exception,is,thrown,because,these,messages,have,to,be,wrapped,in,a,link,leader,session,message,param,message,incoming,message,throws,exception;private,void,handle,leader,session,id,object,message,throws,exception,if,message,instanceof,leader,session,message,leader,session,message,msg,leader,session,message,message,if,msg,leader,session,id,is,defined,get,leader,session,id,is,defined,if,get,leader,session,id,equals,msg,leader,session,id,handle,message,msg,message,else,handle,discarded,message,msg,else,handle,discarded,message,msg,else,if,message,instanceof,requires,leader,session,id,throw,new,exception,received,a,message,message,without,a,leader,session,id,even,though,it,requires,to,have,one,else,handle,message,message
FlinkUntypedActor -> private void handleLeaderSessionID(Object message) throws Exception;1439993791;This method filters out {@link LeaderSessionMessage} whose leader session ID is not equal_to the actors leader session ID. If a message of type {@link RequiresLeaderSessionID}_arrives, then an Exception is thrown, because these messages have to be wrapped in a_{@link LeaderSessionMessage}.__@param message Incoming message_@throws Exception;private void handleLeaderSessionID(Object message) throws Exception {_		if(message instanceof LeaderSessionMessage) {_			LeaderSessionMessage msg = (LeaderSessionMessage) message___			if(msg.leaderSessionID().isDefined() && getLeaderSessionID().isDefined()) {_				if(getLeaderSessionID().equals(msg.leaderSessionID())) {_					_					handleMessage(msg.message())__				} else {_					handleDiscardedMessage(msg)__				}_			} else {_				handleDiscardedMessage(msg)__			}_		} else if (message instanceof RequiresLeaderSessionID) {_			throw new Exception("Received a message " + message + " without a leader session " +_					"ID, even though it requires to have one.")__		} else {_			_			handleMessage(message)__		}_	};this,method,filters,out,link,leader,session,message,whose,leader,session,id,is,not,equal,to,the,actors,leader,session,id,if,a,message,of,type,link,requires,leader,session,id,arrives,then,an,exception,is,thrown,because,these,messages,have,to,be,wrapped,in,a,link,leader,session,message,param,message,incoming,message,throws,exception;private,void,handle,leader,session,id,object,message,throws,exception,if,message,instanceof,leader,session,message,leader,session,message,msg,leader,session,message,message,if,msg,leader,session,id,is,defined,get,leader,session,id,is,defined,if,get,leader,session,id,equals,msg,leader,session,id,handle,message,msg,message,else,handle,discarded,message,msg,else,handle,discarded,message,msg,else,if,message,instanceof,requires,leader,session,id,throw,new,exception,received,a,message,message,without,a,leader,session,id,even,though,it,requires,to,have,one,else,handle,message,message
FlinkUntypedActor -> private void handleLeaderSessionID(Object message) throws Exception;1440951699;This method filters out {@link LeaderSessionMessage} whose leader session ID is not equal_to the actors leader session ID. If a message of type {@link RequiresLeaderSessionID}_arrives, then an Exception is thrown, because these messages have to be wrapped in a_{@link LeaderSessionMessage}.__@param message Incoming message_@throws Exception;private void handleLeaderSessionID(Object message) throws Exception {_		if(message instanceof LeaderSessionMessage) {_			LeaderSessionMessage msg = (LeaderSessionMessage) message___			if(msg.leaderSessionID().isDefined() && getLeaderSessionID().isDefined()) {_				if(getLeaderSessionID().equals(msg.leaderSessionID())) {_					_					handleMessage(msg.message())__				} else {_					handleDiscardedMessage(msg)__				}_			} else {_				handleDiscardedMessage(msg)__			}_		} else if (message instanceof RequiresLeaderSessionID) {_			throw new Exception("Received a message " + message + " without a leader session " +_					"ID, even though it requires to have one.")__		} else {_			_			handleMessage(message)__		}_	};this,method,filters,out,link,leader,session,message,whose,leader,session,id,is,not,equal,to,the,actors,leader,session,id,if,a,message,of,type,link,requires,leader,session,id,arrives,then,an,exception,is,thrown,because,these,messages,have,to,be,wrapped,in,a,link,leader,session,message,param,message,incoming,message,throws,exception;private,void,handle,leader,session,id,object,message,throws,exception,if,message,instanceof,leader,session,message,leader,session,message,msg,leader,session,message,message,if,msg,leader,session,id,is,defined,get,leader,session,id,is,defined,if,get,leader,session,id,equals,msg,leader,session,id,handle,message,msg,message,else,handle,discarded,message,msg,else,handle,discarded,message,msg,else,if,message,instanceof,requires,leader,session,id,throw,new,exception,received,a,message,message,without,a,leader,session,id,even,though,it,requires,to,have,one,else,handle,message,message
FlinkUntypedActor -> private void handleLeaderSessionID(Object message) throws Exception;1441011751;This method filters out {@link LeaderSessionMessage} whose leader session ID is not equal_to the actors leader session ID. If a message of type {@link RequiresLeaderSessionID}_arrives, then an Exception is thrown, because these messages have to be wrapped in a_{@link LeaderSessionMessage}.__@param message Incoming message_@throws Exception;private void handleLeaderSessionID(Object message) throws Exception {_		if(message instanceof LeaderSessionMessage) {_			LeaderSessionMessage msg = (LeaderSessionMessage) message__			UUID expectedID = getLeaderSessionID()__			UUID actualID = msg.leaderSessionID()___			if(expectedID == actualID || (expectedID != null && expectedID.equals(actualID))) {_				handleMessage(msg.message())__			} else {_				handleDiscardedMessage(expectedID, msg)__			}_		} else if (message instanceof RequiresLeaderSessionID) {_			throw new Exception("Received a message " + message + " without a leader session " +_					"ID, even though the message requires a leader session ID.")__		} else {_			_			handleMessage(message)__		}_	};this,method,filters,out,link,leader,session,message,whose,leader,session,id,is,not,equal,to,the,actors,leader,session,id,if,a,message,of,type,link,requires,leader,session,id,arrives,then,an,exception,is,thrown,because,these,messages,have,to,be,wrapped,in,a,link,leader,session,message,param,message,incoming,message,throws,exception;private,void,handle,leader,session,id,object,message,throws,exception,if,message,instanceof,leader,session,message,leader,session,message,msg,leader,session,message,message,uuid,expected,id,get,leader,session,id,uuid,actual,id,msg,leader,session,id,if,expected,id,actual,id,expected,id,null,expected,id,equals,actual,id,handle,message,msg,message,else,handle,discarded,message,expected,id,msg,else,if,message,instanceof,requires,leader,session,id,throw,new,exception,received,a,message,message,without,a,leader,session,id,even,though,the,message,requires,a,leader,session,id,else,handle,message,message
FlinkUntypedActor -> private void handleLeaderSessionID(Object message) throws Exception;1459248687;This method filters out {@link LeaderSessionMessage} whose leader session ID is not equal_to the actors leader session ID. If a message of type {@link RequiresLeaderSessionID}_arrives, then an Exception is thrown, because these messages have to be wrapped in a_{@link LeaderSessionMessage}.__@param message Incoming message_@throws Exception;private void handleLeaderSessionID(Object message) throws Exception {_		if(message instanceof LeaderSessionMessage) {_			LeaderSessionMessage msg = (LeaderSessionMessage) message__			UUID expectedID = getLeaderSessionID()__			UUID actualID = msg.leaderSessionID()___			if(expectedID == actualID || (expectedID != null && expectedID.equals(actualID))) {_				handleMessage(msg.message())__			} else {_				handleDiscardedMessage(expectedID, msg)__			}_		} else if (message instanceof RequiresLeaderSessionID) {_			throw new Exception("Received a message " + message + " without a leader session " +_					"ID, even though the message requires a leader session ID.")__		} else {_			_			handleMessage(message)__		}_	};this,method,filters,out,link,leader,session,message,whose,leader,session,id,is,not,equal,to,the,actors,leader,session,id,if,a,message,of,type,link,requires,leader,session,id,arrives,then,an,exception,is,thrown,because,these,messages,have,to,be,wrapped,in,a,link,leader,session,message,param,message,incoming,message,throws,exception;private,void,handle,leader,session,id,object,message,throws,exception,if,message,instanceof,leader,session,message,leader,session,message,msg,leader,session,message,message,uuid,expected,id,get,leader,session,id,uuid,actual,id,msg,leader,session,id,if,expected,id,actual,id,expected,id,null,expected,id,equals,actual,id,handle,message,msg,message,else,handle,discarded,message,expected,id,msg,else,if,message,instanceof,requires,leader,session,id,throw,new,exception,received,a,message,message,without,a,leader,session,id,even,though,the,message,requires,a,leader,session,id,else,handle,message,message
FlinkUntypedActor -> private void handleLeaderSessionID(Object message) throws Exception;1480585463;This method filters out {@link LeaderSessionMessage} whose leader session ID is not equal_to the actors leader session ID. If a message of type {@link RequiresLeaderSessionID}_arrives, then an Exception is thrown, because these messages have to be wrapped in a_{@link LeaderSessionMessage}.__@param message Incoming message_@throws Exception;private void handleLeaderSessionID(Object message) throws Exception {_		if (message instanceof LeaderSessionMessage) {_			LeaderSessionMessage msg = (LeaderSessionMessage) message__			UUID expectedID = getLeaderSessionID()__			UUID actualID = msg.leaderSessionID()___			if(expectedID == actualID || (expectedID != null && expectedID.equals(actualID))) {_				handleMessage(msg.message())__			} else {_				handleDiscardedMessage(expectedID, msg)__			}_		} else if (message instanceof RequiresLeaderSessionID) {_			throw new Exception("Received a message " + message + " without a leader session " +_					"ID, even though the message requires a leader session ID.")__		} else {_			_			handleMessage(message)__		}_	};this,method,filters,out,link,leader,session,message,whose,leader,session,id,is,not,equal,to,the,actors,leader,session,id,if,a,message,of,type,link,requires,leader,session,id,arrives,then,an,exception,is,thrown,because,these,messages,have,to,be,wrapped,in,a,link,leader,session,message,param,message,incoming,message,throws,exception;private,void,handle,leader,session,id,object,message,throws,exception,if,message,instanceof,leader,session,message,leader,session,message,msg,leader,session,message,message,uuid,expected,id,get,leader,session,id,uuid,actual,id,msg,leader,session,id,if,expected,id,actual,id,expected,id,null,expected,id,equals,actual,id,handle,message,msg,message,else,handle,discarded,message,expected,id,msg,else,if,message,instanceof,requires,leader,session,id,throw,new,exception,received,a,message,message,without,a,leader,session,id,even,though,the,message,requires,a,leader,session,id,else,handle,message,message
FlinkUntypedActor -> private void handleLeaderSessionID(Object message) throws Exception;1490174800;This method filters out {@link LeaderSessionMessage} whose leader session ID is not equal_to the actors leader session ID. If a message of type {@link RequiresLeaderSessionID}_arrives, then an Exception is thrown, because these messages have to be wrapped in a_{@link LeaderSessionMessage}.__@param message Incoming message_@throws Exception;private void handleLeaderSessionID(Object message) throws Exception {_		if (message instanceof LeaderSessionMessage) {_			LeaderSessionMessage msg = (LeaderSessionMessage) message__			UUID expectedID = getLeaderSessionID()__			UUID actualID = msg.leaderSessionID()___			if (expectedID != null) {_				if (expectedID.equals(actualID)) {_					handleMessage(msg.message())__				} else {_					handleDiscardedMessage(expectedID, msg)__				}_			} else {_				handleNoLeaderId(msg)__			}_		} else if (message instanceof RequiresLeaderSessionID) {_			throw new Exception("Received a message " + message + " without a leader session " +_					"ID, even though the message requires a leader session ID.")__		} else {_			_			handleMessage(message)__		}_	};this,method,filters,out,link,leader,session,message,whose,leader,session,id,is,not,equal,to,the,actors,leader,session,id,if,a,message,of,type,link,requires,leader,session,id,arrives,then,an,exception,is,thrown,because,these,messages,have,to,be,wrapped,in,a,link,leader,session,message,param,message,incoming,message,throws,exception;private,void,handle,leader,session,id,object,message,throws,exception,if,message,instanceof,leader,session,message,leader,session,message,msg,leader,session,message,message,uuid,expected,id,get,leader,session,id,uuid,actual,id,msg,leader,session,id,if,expected,id,null,if,expected,id,equals,actual,id,handle,message,msg,message,else,handle,discarded,message,expected,id,msg,else,handle,no,leader,id,msg,else,if,message,instanceof,requires,leader,session,id,throw,new,exception,received,a,message,message,without,a,leader,session,id,even,though,the,message,requires,a,leader,session,id,else,handle,message,message
FlinkUntypedActor -> private void handleLeaderSessionID(Object message) throws Exception;1499773775;This method filters out {@link LeaderSessionMessage} whose leader session ID is not equal_to the actors leader session ID. If a message of type {@link RequiresLeaderSessionID}_arrives, then an Exception is thrown, because these messages have to be wrapped in a_{@link LeaderSessionMessage}.__@param message Incoming message_@throws Exception;private void handleLeaderSessionID(Object message) throws Exception {_		if (message instanceof LeaderSessionMessage) {_			LeaderSessionMessage msg = (LeaderSessionMessage) message__			UUID expectedID = getLeaderSessionID()__			UUID actualID = msg.leaderSessionID()___			if (expectedID != null) {_				if (expectedID.equals(actualID)) {_					handleMessage(msg.message())__				} else {_					handleDiscardedMessage(expectedID, msg)__				}_			} else {_				handleNoLeaderId(msg)__			}_		} else if (message instanceof RequiresLeaderSessionID) {_			throw new Exception("Received a message " + message + " without a leader session " +_					"ID, even though the message requires a leader session ID.")__		} else {_			_			handleMessage(message)__		}_	};this,method,filters,out,link,leader,session,message,whose,leader,session,id,is,not,equal,to,the,actors,leader,session,id,if,a,message,of,type,link,requires,leader,session,id,arrives,then,an,exception,is,thrown,because,these,messages,have,to,be,wrapped,in,a,link,leader,session,message,param,message,incoming,message,throws,exception;private,void,handle,leader,session,id,object,message,throws,exception,if,message,instanceof,leader,session,message,leader,session,message,msg,leader,session,message,message,uuid,expected,id,get,leader,session,id,uuid,actual,id,msg,leader,session,id,if,expected,id,null,if,expected,id,equals,actual,id,handle,message,msg,message,else,handle,discarded,message,expected,id,msg,else,handle,no,leader,id,msg,else,if,message,instanceof,requires,leader,session,id,throw,new,exception,received,a,message,message,without,a,leader,session,id,even,though,the,message,requires,a,leader,session,id,else,handle,message,message
FlinkUntypedActor -> private void handleLeaderSessionID(Object message) throws Exception;1515177485;This method filters out {@link LeaderSessionMessage} whose leader session ID is not equal_to the actors leader session ID. If a message of type {@link RequiresLeaderSessionID}_arrives, then an Exception is thrown, because these messages have to be wrapped in a_{@link LeaderSessionMessage}.__@param message Incoming message_@throws Exception;private void handleLeaderSessionID(Object message) throws Exception {_		if (message instanceof LeaderSessionMessage) {_			LeaderSessionMessage msg = (LeaderSessionMessage) message__			UUID expectedID = getLeaderSessionID()__			UUID actualID = msg.leaderSessionID()___			if (expectedID != null) {_				if (expectedID.equals(actualID)) {_					handleMessage(msg.message())__				} else {_					handleDiscardedMessage(expectedID, msg)__				}_			} else {_				handleNoLeaderId(msg)__			}_		} else if (message instanceof RequiresLeaderSessionID) {_			throw new Exception("Received a message " + message + " without a leader session " +_					"ID, even though the message requires a leader session ID.")__		} else {_			_			handleMessage(message)__		}_	};this,method,filters,out,link,leader,session,message,whose,leader,session,id,is,not,equal,to,the,actors,leader,session,id,if,a,message,of,type,link,requires,leader,session,id,arrives,then,an,exception,is,thrown,because,these,messages,have,to,be,wrapped,in,a,link,leader,session,message,param,message,incoming,message,throws,exception;private,void,handle,leader,session,id,object,message,throws,exception,if,message,instanceof,leader,session,message,leader,session,message,msg,leader,session,message,message,uuid,expected,id,get,leader,session,id,uuid,actual,id,msg,leader,session,id,if,expected,id,null,if,expected,id,equals,actual,id,handle,message,msg,message,else,handle,discarded,message,expected,id,msg,else,handle,no,leader,id,msg,else,if,message,instanceof,requires,leader,session,id,throw,new,exception,received,a,message,message,without,a,leader,session,id,even,though,the,message,requires,a,leader,session,id,else,handle,message,message
