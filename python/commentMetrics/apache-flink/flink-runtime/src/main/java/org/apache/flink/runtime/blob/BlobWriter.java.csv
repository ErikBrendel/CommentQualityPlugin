commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Uploads the data of the given byte array for the given job to the BLOB server and makes it  * a permanent BLOB.  *  * @param jobId  * 		the ID of the job the BLOB belongs to  * @param value  * 		the buffer to upload  *  * @return the computed BLOB key identifying the BLOB on the server  *  * @throws IOException  * 		thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA  * 		store  */ ;/**  * Uploads the data of the given byte array for the given job to the BLOB server and makes it  * a permanent BLOB.  *  * @param jobId  * 		the ID of the job the BLOB belongs to  * @param value  * 		the buffer to upload  *  * @return the computed BLOB key identifying the BLOB on the server  *  * @throws IOException  * 		thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA  * 		store  */ PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException.
true;;2;1;/**  * Uploads the data from the given input stream for the given job to the BLOB server and makes it  * a permanent BLOB.  *  * @param jobId  * 		ID of the job this blob belongs to  * @param inputStream  * 		the input stream to read the data from  *  * @return the computed BLOB key identifying the BLOB on the server  *  * @throws IOException  * 		thrown if an I/O error occurs while reading the data from the input stream, writing it to a  * 		local file, or uploading it to the HA store  */ ;/**  * Uploads the data from the given input stream for the given job to the BLOB server and makes it  * a permanent BLOB.  *  * @param jobId  * 		ID of the job this blob belongs to  * @param inputStream  * 		the input stream to read the data from  *  * @return the computed BLOB key identifying the BLOB on the server  *  * @throws IOException  * 		thrown if an I/O error occurs while reading the data from the input stream, writing it to a  * 		local file, or uploading it to the HA store  */ PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException.
true;;0;1;/**  * Returns the min size before data will be offloaded to the BLOB store.  *  * @return minimum offloading size  */ ;/**  * Returns the min size before data will be offloaded to the BLOB store.  *  * @return minimum offloading size  */ int getMinOffloadingSize().
true;static;3;24;/**  * Serializes the given value and offloads it to the BlobServer if its size exceeds the minimum  * offloading size of the BlobServer.  *  * @param value to serialize  * @param jobId to which the value belongs.  * @param blobWriter to use to offload the serialized value  * @param <T> type of the value to serialize  * @return Either the serialized value or the stored blob key  * @throws IOException if the data cannot be serialized  */ ;/**  * Serializes the given value and offloads it to the BlobServer if its size exceeds the minimum  * offloading size of the BlobServer.  *  * @param value to serialize  * @param jobId to which the value belongs.  * @param blobWriter to use to offload the serialized value  * @param <T> type of the value to serialize  * @return Either the serialized value or the stored blob key  * @throws IOException if the data cannot be serialized  */ static <T> Either<SerializedValue<T>, PermanentBlobKey> serializeAndTryOffload(T value, JobID jobId, BlobWriter blobWriter) throws IOException {     Preconditions.checkNotNull(value).     Preconditions.checkNotNull(jobId).     Preconditions.checkNotNull(blobWriter).     final SerializedValue<T> serializedValue = new SerializedValue<>(value).     if (serializedValue.getByteArray().length < blobWriter.getMinOffloadingSize()) {         return Either.Left(new SerializedValue<>(value)).     } else {         try {             final PermanentBlobKey permanentBlobKey = blobWriter.putPermanent(jobId, serializedValue.getByteArray()).             return Either.Right(permanentBlobKey).         } catch (IOException e) {             LOG.warn("Failed to offload value {} for job {} to BLOB store.", value, jobId, e).             return Either.Left(serializedValue).         }     } }
