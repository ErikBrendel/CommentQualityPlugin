commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public <T> ValueState<T> getState(ValueStateDescriptor<T> stateProperties) {     requireNonNull(stateProperties, "The state properties must not be null").     try {         stateProperties.initializeSerializerUnlessSet(executionConfig).         return getPartitionedState(stateProperties).     } catch (Exception e) {         throw new RuntimeException("Error while getting state", e).     } }
false;public;1;11;;@Override public <T> ListState<T> getListState(ListStateDescriptor<T> stateProperties) {     requireNonNull(stateProperties, "The state properties must not be null").     try {         stateProperties.initializeSerializerUnlessSet(executionConfig).         ListState<T> originalState = getPartitionedState(stateProperties).         return new UserFacingListState<>(originalState).     } catch (Exception e) {         throw new RuntimeException("Error while getting state", e).     } }
false;public;1;10;;@Override public <T> ReducingState<T> getReducingState(ReducingStateDescriptor<T> stateProperties) {     requireNonNull(stateProperties, "The state properties must not be null").     try {         stateProperties.initializeSerializerUnlessSet(executionConfig).         return getPartitionedState(stateProperties).     } catch (Exception e) {         throw new RuntimeException("Error while getting state", e).     } }
false;public;1;10;;@Override public <IN, ACC, OUT> AggregatingState<IN, OUT> getAggregatingState(AggregatingStateDescriptor<IN, ACC, OUT> stateProperties) {     requireNonNull(stateProperties, "The state properties must not be null").     try {         stateProperties.initializeSerializerUnlessSet(executionConfig).         return getPartitionedState(stateProperties).     } catch (Exception e) {         throw new RuntimeException("Error while getting state", e).     } }
false;public;1;10;;@Override public <T, ACC> FoldingState<T, ACC> getFoldingState(FoldingStateDescriptor<T, ACC> stateProperties) {     requireNonNull(stateProperties, "The state properties must not be null").     try {         stateProperties.initializeSerializerUnlessSet(executionConfig).         return getPartitionedState(stateProperties).     } catch (Exception e) {         throw new RuntimeException("Error while getting state", e).     } }
false;public;1;11;;@Override public <UK, UV> MapState<UK, UV> getMapState(MapStateDescriptor<UK, UV> stateProperties) {     requireNonNull(stateProperties, "The state properties must not be null").     try {         stateProperties.initializeSerializerUnlessSet(executionConfig).         MapState<UK, UV> originalState = getPartitionedState(stateProperties).         return new UserFacingMapState<>(originalState).     } catch (Exception e) {         throw new RuntimeException("Error while getting state", e).     } }
false;protected;1;6;;protected <S extends State> S getPartitionedState(StateDescriptor<S, ?> stateDescriptor) throws Exception {     return keyedStateBackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, stateDescriptor). }
