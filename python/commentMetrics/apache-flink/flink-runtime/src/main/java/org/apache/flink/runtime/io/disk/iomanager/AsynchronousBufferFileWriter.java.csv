commented;modifiers;parameterAmount;loc;comment;code
true;public;1;12;/**  * Writes the given block asynchronously.  *  * @param buffer  * 		the buffer to be written (will be recycled when done)  *  * @throws IOException  * 		thrown if adding the write operation fails  */ ;/**  * Writes the given block asynchronously.  *  * @param buffer  * 		the buffer to be written (will be recycled when done)  *  * @throws IOException  * 		thrown if adding the write operation fails  */ @Override public void writeBlock(Buffer buffer) throws IOException {     try {         // if successfully added, the buffer will be recycled after the write operation         addRequest(new BufferWriteRequest(this, buffer)).     } catch (Throwable e) {         // if not added, we need to recycle here         buffer.recycleBuffer().         ExceptionUtils.rethrowIOException(e).     } }
false;public;0;4;;@Override public int getNumberOfOutstandingRequests() {     return requestsNotReturned.get(). }
false;public;1;4;;@Override public boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException {     return super.registerAllRequestsProcessedListener(listener). }
false;public;1;4;;@Override public void requestSuccessful(Buffer buffer) {     buffer.recycleBuffer(). }
false;public;2;4;;@Override public void requestFailed(Buffer buffer, IOException e) {     buffer.recycleBuffer(). }
