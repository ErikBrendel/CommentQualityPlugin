commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Resets the sort buffer back to the state where it is empty. All contained data is discarded.  */ ;/**  * Resets the sort buffer back to the state where it is empty. All contained data is discarded.  */ void reset().
true;;0;1;/**  * Checks whether the buffer is empty.  *  * @return True, if no record is contained, false otherwise.  */ ;/**  * Checks whether the buffer is empty.  *  * @return True, if no record is contained, false otherwise.  */ boolean isEmpty().
true;;0;2;/**  * Disposes the sorter.  * This method does not release the memory segments used by the sorter.  */ ;/**  * Disposes the sorter.  * This method does not release the memory segments used by the sorter.  */ @Override void dispose().
true;;0;1;/**  * Gets the total capacity of this sorter, in bytes.  *  * @return The sorter's total capacity.  */ ;/**  * Gets the total capacity of this sorter, in bytes.  *  * @return The sorter's total capacity.  */ long getCapacity().
true;;0;1;/**  * Gets the number of bytes currently occupied in this sorter, records and sort index.  *  * @return The number of bytes occupied.  */ ;/**  * Gets the number of bytes currently occupied in this sorter, records and sort index.  *  * @return The number of bytes occupied.  */ long getOccupancy().
true;;1;1;/**  * Gets the record at the given logical position.  *  * @param logicalPosition The logical position of the record.  * @throws IOException Thrown, if an exception occurred during deserialization.  */ ;/**  * Gets the record at the given logical position.  *  * @param logicalPosition The logical position of the record.  * @throws IOException Thrown, if an exception occurred during deserialization.  */ T getRecord(int logicalPosition) throws IOException.
true;;2;1;/**  * Gets the record at the given logical position.  *  * @param reuse The reuse object to deserialize the record into.  * @param logicalPosition The logical position of the record.  * @throws IOException Thrown, if an exception occurred during deserialization.  */ ;/**  * Gets the record at the given logical position.  *  * @param reuse The reuse object to deserialize the record into.  * @param logicalPosition The logical position of the record.  * @throws IOException Thrown, if an exception occurred during deserialization.  */ T getRecord(T reuse, int logicalPosition) throws IOException.
true;;1;1;/**  * Writes a given record to this sort buffer. The written record will be appended and take  * the last logical position.  *  * @param record The record to be written.  * @return True, if the record was successfully written, false, if the sort buffer was full.  * @throws IOException Thrown, if an error occurred while serializing the record into the buffers.  */ ;/**  * Writes a given record to this sort buffer. The written record will be appended and take  * the last logical position.  *  * @param record The record to be written.  * @return True, if the record was successfully written, false, if the sort buffer was full.  * @throws IOException Thrown, if an error occurred while serializing the record into the buffers.  */ boolean write(T record) throws IOException.
true;;0;1;/**  * Gets an iterator over all records in this buffer in their logical order.  *  * @return An iterator returning the records in their logical order.  */ ;/**  * Gets an iterator over all records in this buffer in their logical order.  *  * @return An iterator returning the records in their logical order.  */ MutableObjectIterator<T> getIterator().
true;public;1;1;/**  * Writes the records in this buffer in their logical order to the given output.  *  * @param output The output view to write the records to.  * @throws IOException Thrown, if an I/O exception occurred writing to the output view.  */ ;/**  * Writes the records in this buffer in their logical order to the given output.  *  * @param output The output view to write the records to.  * @throws IOException Thrown, if an I/O exception occurred writing to the output view.  */ public void writeToOutput(ChannelWriterOutputView output) throws IOException.
false;public;2;1;;public void writeToOutput(ChannelWriterOutputView output, LargeRecordHandler<T> largeRecordsOutput) throws IOException.
true;public;3;1;/**  * Writes a subset of the records in this buffer in their logical order to the given output.  *  * @param output The output view to write the records to.  * @param start The logical start position of the subset.  * @param num The number of elements to write.  * @throws IOException Thrown, if an I/O exception occurred writing to the output view.  */ ;/**  * Writes a subset of the records in this buffer in their logical order to the given output.  *  * @param output The output view to write the records to.  * @param start The logical start position of the subset.  * @param num The number of elements to write.  * @throws IOException Thrown, if an I/O exception occurred writing to the output view.  */ public void writeToOutput(ChannelWriterOutputView output, int start, int num) throws IOException.
