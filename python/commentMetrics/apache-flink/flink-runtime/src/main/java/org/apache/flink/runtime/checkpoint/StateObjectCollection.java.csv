commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int size() {     return stateObjects.size(). }
false;public;0;4;;@Override public boolean isEmpty() {     return stateObjects.isEmpty(). }
false;public;1;4;;@Override public boolean contains(Object o) {     return stateObjects.contains(o). }
false;public;0;4;;@Override public Iterator<T> iterator() {     return stateObjects.iterator(). }
false;public;0;4;;@Override public Object[] toArray() {     return stateObjects.toArray(). }
false;public;1;4;;@Override public <T1> T1[] toArray(T1[] a) {     return stateObjects.toArray(a). }
false;public;1;4;;@Override public boolean add(T t) {     return stateObjects.add(t). }
false;public;1;4;;@Override public boolean remove(Object o) {     return stateObjects.remove(o). }
false;public;1;4;;@Override public boolean containsAll(Collection<?> c) {     return stateObjects.containsAll(c). }
false;public;1;4;;@Override public boolean addAll(Collection<? extends T> c) {     return stateObjects.addAll(c). }
false;public;1;4;;@Override public boolean removeAll(Collection<?> c) {     return stateObjects.removeAll(c). }
false;public;1;4;;@Override public boolean removeIf(Predicate<? super T> filter) {     return stateObjects.removeIf(filter). }
false;public;1;4;;@Override public boolean retainAll(Collection<?> c) {     return stateObjects.retainAll(c). }
false;public;0;4;;@Override public void clear() {     stateObjects.clear(). }
false;public;0;4;;@Override public void discardState() throws Exception {     StateUtil.bestEffortDiscardAllStateObjects(stateObjects). }
false;public;0;4;;@Override public long getStateSize() {     return sumAllSizes(stateObjects). }
true;public;0;8;/**  * Returns true if this contains at least one {@link StateObject}.  */ ;/**  * Returns true if this contains at least one {@link StateObject}.  */ public boolean hasState() {     for (StateObject state : stateObjects) {         if (state != null) {             return true.         }     }     return false. }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     StateObjectCollection<?> that = (StateObjectCollection<?>) o.     // simple equals can cause troubles here because of how equals works e.g. between lists and sets.     return CollectionUtils.isEqualCollection(stateObjects, that.stateObjects). }
false;public;0;4;;@Override public int hashCode() {     return stateObjects.hashCode(). }
false;public;0;4;;@Override public String toString() {     return "StateObjectCollection{" + stateObjects + '}'. }
false;public;0;7;;public List<T> asList() {     return stateObjects instanceof List ? (List<T>) stateObjects : stateObjects != null ? new ArrayList<>(stateObjects) : Collections.emptyList(). }
false;public,static;0;3;;// ------------------------------------------------------------------------ // Helper methods. // ------------------------------------------------------------------------ public static <T extends StateObject> StateObjectCollection<T> empty() {     return (StateObjectCollection<T>) EMPTY. }
false;public,static;1;3;;public static <T extends StateObject> StateObjectCollection<T> singleton(T stateObject) {     return new StateObjectCollection<>(Collections.singleton(stateObject)). }
false;private,static;1;8;;private static long sumAllSizes(Collection<? extends StateObject> stateObject) {     long size = 0L.     for (StateObject object : stateObject) {         size += getSizeNullSafe(object).     }     return size. }
false;private,static;1;3;;private static long getSizeNullSafe(StateObject stateObject) {     return stateObject != null ? stateObject.getStateSize() : 0L. }
