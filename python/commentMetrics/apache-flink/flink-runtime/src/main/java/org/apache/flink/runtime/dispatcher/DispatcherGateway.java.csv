commented;modifiers;parameterAmount;loc;comment;code
true;;2;3;/**  * Submit a job to the dispatcher.  *  * @param jobGraph JobGraph to submit  * @param timeout RPC timeout  * @return A future acknowledge if the submission succeeded  */ ;/**  * Submit a job to the dispatcher.  *  * @param jobGraph JobGraph to submit  * @param timeout RPC timeout  * @return A future acknowledge if the submission succeeded  */ CompletableFuture<Acknowledge> submitJob(JobGraph jobGraph, @RpcTimeout Time timeout).
true;;1;2;/**  * List the current set of submitted jobs.  *  * @param timeout RPC timeout  * @return A future collection of currently submitted jobs  */ ;/**  * List the current set of submitted jobs.  *  * @param timeout RPC timeout  * @return A future collection of currently submitted jobs  */ CompletableFuture<Collection<JobID>> listJobs(@RpcTimeout Time timeout).
true;;1;1;/**  * Returns the port of the blob server.  *  * @param timeout of the operation  * @return A future integer of the blob server port  */ ;/**  * Returns the port of the blob server.  *  * @param timeout of the operation  * @return A future integer of the blob server port  */ CompletableFuture<Integer> getBlobServerPort(@RpcTimeout Time timeout).
true;;2;2;/**  * Requests the {@link ArchivedExecutionGraph} for the given jobId. If there is no such graph, then  * the future is completed with a {@link FlinkJobNotFoundException}.  *  * <p>Note: We enforce that the returned future contains a {@link ArchivedExecutionGraph} unlike  * the super interface.  *  * @param jobId identifying the job whose AccessExecutionGraph is requested  * @param timeout for the asynchronous operation  * @return Future containing the AccessExecutionGraph for the given jobId, otherwise {@link FlinkJobNotFoundException}  */ ;/**  * Requests the {@link ArchivedExecutionGraph} for the given jobId. If there is no such graph, then  * the future is completed with a {@link FlinkJobNotFoundException}.  *  * <p>Note: We enforce that the returned future contains a {@link ArchivedExecutionGraph} unlike  * the super interface.  *  * @param jobId identifying the job whose AccessExecutionGraph is requested  * @param timeout for the asynchronous operation  * @return Future containing the AccessExecutionGraph for the given jobId, otherwise {@link FlinkJobNotFoundException}  */ @Override CompletableFuture<ArchivedExecutionGraph> requestJob(JobID jobId, @RpcTimeout Time timeout).
