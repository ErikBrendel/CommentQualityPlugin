# id;timestamp;commentText;codeText;commentWords;codeWords
LibraryCacheManager -> private void readLibraryFromStreamInternal(final DataInput in) throws IOException;1405024514;Reads library data from the given stream.__@param in_the stream to read the library data from_@throws IOException_throws if an error occurs while reading from the stream;private void readLibraryFromStreamInternal(final DataInput in) throws IOException {__		final String libraryFileName = StringRecord.readString(in)___		if (libraryFileName == null) {_			throw new IOException("libraryFileName is null!")__		}__		final long length = in.readLong()___		if (length > (long) Integer.MAX_VALUE) {_			throw new IOException("Submitted jar file " + libraryFileName + " is too large")__		}__		final byte[] buf = new byte[(int) length]__		in.readFully(buf)___		final Path storePath = new Path(this.libraryCachePath + "/" + libraryFileName)___		synchronized (this.fs) {__			_			if (!fs.exists(storePath)) {_				final FSDataOutputStream fos = fs.create(storePath, false)__				fos.write(buf, 0, buf.length)__				fos.close()__			}_		}_	};reads,library,data,from,the,given,stream,param,in,the,stream,to,read,the,library,data,from,throws,ioexception,throws,if,an,error,occurs,while,reading,from,the,stream;private,void,read,library,from,stream,internal,final,data,input,in,throws,ioexception,final,string,library,file,name,string,record,read,string,in,if,library,file,name,null,throw,new,ioexception,library,file,name,is,null,final,long,length,in,read,long,if,length,long,integer,throw,new,ioexception,submitted,jar,file,library,file,name,is,too,large,final,byte,buf,new,byte,int,length,in,read,fully,buf,final,path,store,path,new,path,this,library,cache,path,library,file,name,synchronized,this,fs,if,fs,exists,store,path,final,fsdata,output,stream,fos,fs,create,store,path,false,fos,write,buf,0,buf,length,fos,close
LibraryCacheManager -> private void readLibraryFromStreamInternal(final DataInput in) throws IOException;1405090423;Reads library data from the given stream.__@param in_the stream to read the library data from_@throws IOException_throws if an error occurs while reading from the stream;private void readLibraryFromStreamInternal(final DataInput in) throws IOException {__		final String libraryFileName = StringRecord.readString(in)___		if (libraryFileName == null) {_			throw new IOException("libraryFileName is null!")__		}__		final long length = in.readLong()___		if (length > (long) Integer.MAX_VALUE) {_			throw new IOException("Submitted jar file " + libraryFileName + " is too large")__		}__		final byte[] buf = new byte[(int) length]__		in.readFully(buf)___		final Path storePath = new Path(this.libraryCachePath + "/" + libraryFileName)___		synchronized (this.fs) {__			_			if (!fs.exists(storePath)) {_				final FSDataOutputStream fos = fs.create(storePath, false)__				fos.write(buf, 0, buf.length)__				fos.close()__			}_		}_	};reads,library,data,from,the,given,stream,param,in,the,stream,to,read,the,library,data,from,throws,ioexception,throws,if,an,error,occurs,while,reading,from,the,stream;private,void,read,library,from,stream,internal,final,data,input,in,throws,ioexception,final,string,library,file,name,string,record,read,string,in,if,library,file,name,null,throw,new,ioexception,library,file,name,is,null,final,long,length,in,read,long,if,length,long,integer,throw,new,ioexception,submitted,jar,file,library,file,name,is,too,large,final,byte,buf,new,byte,int,length,in,read,fully,buf,final,path,store,path,new,path,this,library,cache,path,library,file,name,synchronized,this,fs,if,fs,exists,store,path,final,fsdata,output,stream,fos,fs,create,store,path,false,fos,write,buf,0,buf,length,fos,close
LibraryCacheManager -> private void readLibraryFromStreamInternal(final DataInput in) throws IOException;1411236168;Reads library data from the given stream.__@param in_the stream to read the library data from_@throws IOException_throws if an error occurs while reading from the stream;private void readLibraryFromStreamInternal(final DataInput in) throws IOException {__		final String libraryFileName = StringRecord.readString(in)___		if (libraryFileName == null) {_			throw new IOException("libraryFileName is null!")__		}__		final long length = in.readLong()___		if (length > (long) Integer.MAX_VALUE) {_			throw new IOException("Submitted jar file " + libraryFileName + " is too large")__		}__		final byte[] buf = new byte[(int) length]__		in.readFully(buf)___		final Path storePath = new Path(this.libraryCachePath + "/" + libraryFileName)___		synchronized (this.fs) {__			_			if (!fs.exists(storePath)) {_				final FSDataOutputStream fos = fs.create(storePath, false)__				fos.write(buf, 0, buf.length)__				fos.close()__			}_		}_	};reads,library,data,from,the,given,stream,param,in,the,stream,to,read,the,library,data,from,throws,ioexception,throws,if,an,error,occurs,while,reading,from,the,stream;private,void,read,library,from,stream,internal,final,data,input,in,throws,ioexception,final,string,library,file,name,string,record,read,string,in,if,library,file,name,null,throw,new,ioexception,library,file,name,is,null,final,long,length,in,read,long,if,length,long,integer,throw,new,ioexception,submitted,jar,file,library,file,name,is,too,large,final,byte,buf,new,byte,int,length,in,read,fully,buf,final,path,store,path,new,path,this,library,cache,path,library,file,name,synchronized,this,fs,if,fs,exists,store,path,final,fsdata,output,stream,fos,fs,create,store,path,false,fos,write,buf,0,buf,length,fos,close
LibraryCacheManager -> private void readLibraryFromStreamInternal(final DataInput in) throws IOException;1411236169;Reads library data from the given stream.__@param in_the stream to read the library data from_@throws IOException_throws if an error occurs while reading from the stream;private void readLibraryFromStreamInternal(final DataInput in) throws IOException {__		final String libraryFileName = StringRecord.readString(in)___		if (libraryFileName == null) {_			throw new IOException("libraryFileName is null!")__		}__		final long length = in.readLong()___		if (length > (long) Integer.MAX_VALUE) {_			throw new IOException("Submitted jar file " + libraryFileName + " is too large")__		}__		final byte[] buf = new byte[(int) length]__		in.readFully(buf)___		final Path storePath = new Path(this.libraryCachePath + "/" + libraryFileName)___		synchronized (this.fs) {__			_			if (!fs.exists(storePath)) {_				final FSDataOutputStream fos = fs.create(storePath, false)__				fos.write(buf, 0, buf.length)__				fos.close()__			}_		}_	};reads,library,data,from,the,given,stream,param,in,the,stream,to,read,the,library,data,from,throws,ioexception,throws,if,an,error,occurs,while,reading,from,the,stream;private,void,read,library,from,stream,internal,final,data,input,in,throws,ioexception,final,string,library,file,name,string,record,read,string,in,if,library,file,name,null,throw,new,ioexception,library,file,name,is,null,final,long,length,in,read,long,if,length,long,integer,throw,new,ioexception,submitted,jar,file,library,file,name,is,too,large,final,byte,buf,new,byte,int,length,in,read,fully,buf,final,path,store,path,new,path,this,library,cache,path,library,file,name,synchronized,this,fs,if,fs,exists,store,path,final,fsdata,output,stream,fos,fs,create,store,path,false,fos,write,buf,0,buf,length,fos,close
LibraryCacheManager -> private void readLibraryFromStreamInternal(final DataInput in) throws IOException;1411473593;Reads library data from the given stream.__@param in_the stream to read the library data from_@throws IOException_throws if an error occurs while reading from the stream;private void readLibraryFromStreamInternal(final DataInput in) throws IOException {__		final String libraryFileName = StringRecord.readString(in)___		if (libraryFileName == null) {_			throw new IOException("libraryFileName is null!")__		}__		final long length = in.readLong()___		if (length > (long) Integer.MAX_VALUE) {_			throw new IOException("Submitted jar file " + libraryFileName + " is too large")__		}__		final byte[] buf = new byte[(int) length]__		in.readFully(buf)___		final Path storePath = new Path(this.libraryCachePath + "/" + libraryFileName)___		synchronized (this.fs) {__			_			if (!fs.exists(storePath)) {_				final FSDataOutputStream fos = fs.create(storePath, false)__				fos.write(buf, 0, buf.length)__				fos.close()__			}_		}_	};reads,library,data,from,the,given,stream,param,in,the,stream,to,read,the,library,data,from,throws,ioexception,throws,if,an,error,occurs,while,reading,from,the,stream;private,void,read,library,from,stream,internal,final,data,input,in,throws,ioexception,final,string,library,file,name,string,record,read,string,in,if,library,file,name,null,throw,new,ioexception,library,file,name,is,null,final,long,length,in,read,long,if,length,long,integer,throw,new,ioexception,submitted,jar,file,library,file,name,is,too,large,final,byte,buf,new,byte,int,length,in,read,fully,buf,final,path,store,path,new,path,this,library,cache,path,library,file,name,synchronized,this,fs,if,fs,exists,store,path,final,fsdata,output,stream,fos,fs,create,store,path,false,fos,write,buf,0,buf,length,fos,close
LibraryCacheManager -> LibraryTranslationKey -> public JobID getJobID();1405024514;Returns the job ID associated with this object.__@return the job ID associated with this object;public JobID getJobID() {_			return this.jobID__		};returns,the,job,id,associated,with,this,object,return,the,job,id,associated,with,this,object;public,job,id,get,job,id,return,this,job,id
LibraryCacheManager -> LibraryTranslationKey -> public JobID getJobID();1405090423;Returns the job ID associated with this object.__@return the job ID associated with this object;public JobID getJobID() {_			return this.jobID__		};returns,the,job,id,associated,with,this,object,return,the,job,id,associated,with,this,object;public,job,id,get,job,id,return,this,job,id
LibraryCacheManager -> LibraryTranslationKey -> public JobID getJobID();1411236168;Returns the job ID associated with this object.__@return the job ID associated with this object;public JobID getJobID() {_			return this.jobID__		};returns,the,job,id,associated,with,this,object,return,the,job,id,associated,with,this,object;public,job,id,get,job,id,return,this,job,id
LibraryCacheManager -> LibraryTranslationKey -> public JobID getJobID();1411236169;Returns the job ID associated with this object.__@return the job ID associated with this object;public JobID getJobID() {_			return this.jobID__		};returns,the,job,id,associated,with,this,object,return,the,job,id,associated,with,this,object;public,job,id,get,job,id,return,this,job,id
LibraryCacheManager -> LibraryTranslationKey -> public JobID getJobID();1411473593;Returns the job ID associated with this object.__@return the job ID associated with this object;public JobID getJobID() {_			return this.jobID__		};returns,the,job,id,associated,with,this,object,return,the,job,id,associated,with,this,object;public,job,id,get,job,id,return,this,job,id
LibraryCacheManager -> private String[] getRequiredJarFilesInternal(final JobID id);1405024514;Returns the names of the required libraries of the specified job.__@param id_the ID of the job to return the names of required libraries for._@return the names of the required libraries or <code>null</code> if the specified job ID is unknown;private String[] getRequiredJarFilesInternal(final JobID id) {__		final LibraryManagerEntry entry = this.libraryManagerEntries.get(id)___		if (entry == null) {_			return null__		}__		return entry.getRequiredJarFiles()__	};returns,the,names,of,the,required,libraries,of,the,specified,job,param,id,the,id,of,the,job,to,return,the,names,of,required,libraries,for,return,the,names,of,the,required,libraries,or,code,null,code,if,the,specified,job,id,is,unknown;private,string,get,required,jar,files,internal,final,job,id,id,final,library,manager,entry,entry,this,library,manager,entries,get,id,if,entry,null,return,null,return,entry,get,required,jar,files
LibraryCacheManager -> private String[] getRequiredJarFilesInternal(final JobID id);1405090423;Returns the names of the required libraries of the specified job.__@param id_the ID of the job to return the names of required libraries for._@return the names of the required libraries or <code>null</code> if the specified job ID is unknown;private String[] getRequiredJarFilesInternal(final JobID id) {__		final LibraryManagerEntry entry = this.libraryManagerEntries.get(id)___		if (entry == null) {_			return null__		}__		return entry.getRequiredJarFiles()__	};returns,the,names,of,the,required,libraries,of,the,specified,job,param,id,the,id,of,the,job,to,return,the,names,of,required,libraries,for,return,the,names,of,the,required,libraries,or,code,null,code,if,the,specified,job,id,is,unknown;private,string,get,required,jar,files,internal,final,job,id,id,final,library,manager,entry,entry,this,library,manager,entries,get,id,if,entry,null,return,null,return,entry,get,required,jar,files
LibraryCacheManager -> private String[] getRequiredJarFilesInternal(final JobID id);1411236168;Returns the names of the required libraries of the specified job.__@param id_the ID of the job to return the names of required libraries for._@return the names of the required libraries or <code>null</code> if the specified job ID is unknown;private String[] getRequiredJarFilesInternal(final JobID id) {__		final LibraryManagerEntry entry = this.libraryManagerEntries.get(id)___		if (entry == null) {_			return null__		}__		return entry.getRequiredJarFiles()__	};returns,the,names,of,the,required,libraries,of,the,specified,job,param,id,the,id,of,the,job,to,return,the,names,of,required,libraries,for,return,the,names,of,the,required,libraries,or,code,null,code,if,the,specified,job,id,is,unknown;private,string,get,required,jar,files,internal,final,job,id,id,final,library,manager,entry,entry,this,library,manager,entries,get,id,if,entry,null,return,null,return,entry,get,required,jar,files
LibraryCacheManager -> private String[] getRequiredJarFilesInternal(final JobID id);1411236169;Returns the names of the required libraries of the specified job.__@param id_the ID of the job to return the names of required libraries for._@return the names of the required libraries or <code>null</code> if the specified job ID is unknown;private String[] getRequiredJarFilesInternal(final JobID id) {__		final LibraryManagerEntry entry = this.libraryManagerEntries.get(id)___		if (entry == null) {_			return null__		}__		return entry.getRequiredJarFiles()__	};returns,the,names,of,the,required,libraries,of,the,specified,job,param,id,the,id,of,the,job,to,return,the,names,of,required,libraries,for,return,the,names,of,the,required,libraries,or,code,null,code,if,the,specified,job,id,is,unknown;private,string,get,required,jar,files,internal,final,job,id,id,final,library,manager,entry,entry,this,library,manager,entries,get,id,if,entry,null,return,null,return,entry,get,required,jar,files
LibraryCacheManager -> private String[] getRequiredJarFilesInternal(final JobID id);1411473593;Returns the names of the required libraries of the specified job.__@param id_the ID of the job to return the names of required libraries for._@return the names of the required libraries or <code>null</code> if the specified job ID is unknown;private String[] getRequiredJarFilesInternal(final JobID id) {__		final LibraryManagerEntry entry = this.libraryManagerEntries.get(id)___		if (entry == null) {_			return null__		}__		return entry.getRequiredJarFiles()__	};returns,the,names,of,the,required,libraries,of,the,specified,job,param,id,the,id,of,the,job,to,return,the,names,of,required,libraries,for,return,the,names,of,the,required,libraries,or,code,null,code,if,the,specified,job,id,is,unknown;private,string,get,required,jar,files,internal,final,job,id,id,final,library,manager,entry,entry,this,library,manager,entries,get,id,if,entry,null,return,null,return,entry,get,required,jar,files
LibraryCacheManager -> public static void register(final JobID id, final Path[] clientPaths) throws IOException;1405024514;Registers a job ID with a set of library paths that are required to run the job. The library paths are given in_terms_of client paths, so the method first translates the client paths into the corresponding internal cache names. For_every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered_@param clientPaths_the client path's of the required libraries_@throws IOException_thrown if the library cache manager could not be instantiated, no mapping between the job ID and a job ID_exists or the requested library is not in the cache.;public static void register(final JobID id, final Path[] clientPaths) throws IOException {__		final LibraryCacheManager lib = get()__		lib.registerInternal(id, clientPaths)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,the,library,paths,are,given,in,terms,of,client,paths,so,the,method,first,translates,the,client,paths,into,the,corresponding,internal,cache,names,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,client,paths,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,no,mapping,between,the,job,id,and,a,job,id,exists,or,the,requested,library,is,not,in,the,cache;public,static,void,register,final,job,id,id,final,path,client,paths,throws,ioexception,final,library,cache,manager,lib,get,lib,register,internal,id,client,paths
LibraryCacheManager -> public static void register(final JobID id, final Path[] clientPaths) throws IOException;1405090423;Registers a job ID with a set of library paths that are required to run the job. The library paths are given in_terms_of client paths, so the method first translates the client paths into the corresponding internal cache names. For_every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered_@param clientPaths_the client path's of the required libraries_@throws IOException_thrown if the library cache manager could not be instantiated, no mapping between the job ID and a job ID_exists or the requested library is not in the cache.;public static void register(final JobID id, final Path[] clientPaths) throws IOException {__		final LibraryCacheManager lib = get()__		lib.registerInternal(id, clientPaths)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,the,library,paths,are,given,in,terms,of,client,paths,so,the,method,first,translates,the,client,paths,into,the,corresponding,internal,cache,names,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,client,paths,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,no,mapping,between,the,job,id,and,a,job,id,exists,or,the,requested,library,is,not,in,the,cache;public,static,void,register,final,job,id,id,final,path,client,paths,throws,ioexception,final,library,cache,manager,lib,get,lib,register,internal,id,client,paths
LibraryCacheManager -> public static void register(final JobID id, final Path[] clientPaths) throws IOException;1411236168;Registers a job ID with a set of library paths that are required to run the job. The library paths are given in_terms_of client paths, so the method first translates the client paths into the corresponding internal cache names. For_every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered_@param clientPaths_the client path's of the required libraries_@throws IOException_thrown if the library cache manager could not be instantiated, no mapping between the job ID and a job ID_exists or the requested library is not in the cache.;public static void register(final JobID id, final Path[] clientPaths) throws IOException {__		final LibraryCacheManager lib = get()__		lib.registerInternal(id, clientPaths)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,the,library,paths,are,given,in,terms,of,client,paths,so,the,method,first,translates,the,client,paths,into,the,corresponding,internal,cache,names,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,client,paths,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,no,mapping,between,the,job,id,and,a,job,id,exists,or,the,requested,library,is,not,in,the,cache;public,static,void,register,final,job,id,id,final,path,client,paths,throws,ioexception,final,library,cache,manager,lib,get,lib,register,internal,id,client,paths
LibraryCacheManager -> public static void register(final JobID id, final Path[] clientPaths) throws IOException;1411236169;Registers a job ID with a set of library paths that are required to run the job. The library paths are given in_terms_of client paths, so the method first translates the client paths into the corresponding internal cache names. For_every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered_@param clientPaths_the client path's of the required libraries_@throws IOException_thrown if the library cache manager could not be instantiated, no mapping between the job ID and a job ID_exists or the requested library is not in the cache.;public static void register(final JobID id, final Path[] clientPaths) throws IOException {__		final LibraryCacheManager lib = get()__		lib.registerInternal(id, clientPaths)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,the,library,paths,are,given,in,terms,of,client,paths,so,the,method,first,translates,the,client,paths,into,the,corresponding,internal,cache,names,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,client,paths,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,no,mapping,between,the,job,id,and,a,job,id,exists,or,the,requested,library,is,not,in,the,cache;public,static,void,register,final,job,id,id,final,path,client,paths,throws,ioexception,final,library,cache,manager,lib,get,lib,register,internal,id,client,paths
LibraryCacheManager -> public static void register(final JobID id, final Path[] clientPaths) throws IOException;1411473593;Registers a job ID with a set of library paths that are required to run the job. The library paths are given in_terms_of client paths, so the method first translates the client paths into the corresponding internal cache names. For_every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered_@param clientPaths_the client path's of the required libraries_@throws IOException_thrown if the library cache manager could not be instantiated, no mapping between the job ID and a job ID_exists or the requested library is not in the cache.;public static void register(final JobID id, final Path[] clientPaths) throws IOException {__		final LibraryCacheManager lib = get()__		lib.registerInternal(id, clientPaths)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,the,library,paths,are,given,in,terms,of,client,paths,so,the,method,first,translates,the,client,paths,into,the,corresponding,internal,cache,names,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,client,paths,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,no,mapping,between,the,job,id,and,a,job,id,exists,or,the,requested,library,is,not,in,the,cache;public,static,void,register,final,job,id,id,final,path,client,paths,throws,ioexception,final,library,cache,manager,lib,get,lib,register,internal,id,client,paths
LibraryCacheManager -> void registerTask(JobID id, ExecutionAttemptID execution, Collection<BlobKey> requiredJarFiles, 			Collection<URL> requiredClasspaths) throws IOException_;1444312509;Registers a job task execution with its required jar files and classpaths. The jar files are identified by their blob keys.__@param id job ID_@param requiredJarFiles collection of blob keys identifying the required jar files_@param requiredClasspaths collection of classpaths that are added to the user code class loader_@throws IOException;void registerTask(JobID id, ExecutionAttemptID execution, Collection<BlobKey> requiredJarFiles,_			Collection<URL> requiredClasspaths) throws IOException_;registers,a,job,task,execution,with,its,required,jar,files,and,classpaths,the,jar,files,are,identified,by,their,blob,keys,param,id,job,id,param,required,jar,files,collection,of,blob,keys,identifying,the,required,jar,files,param,required,classpaths,collection,of,classpaths,that,are,added,to,the,user,code,class,loader,throws,ioexception;void,register,task,job,id,id,execution,attempt,id,execution,collection,blob,key,required,jar,files,collection,url,required,classpaths,throws,ioexception
LibraryCacheManager -> void registerTask(JobID id, ExecutionAttemptID execution, Collection<BlobKey> requiredJarFiles, 			Collection<URL> requiredClasspaths) throws IOException_;1499173045;Registers a job task execution with its required jar files and classpaths. The jar files are identified by their blob keys.__@param id job ID_@param requiredJarFiles collection of blob keys identifying the required jar files_@param requiredClasspaths collection of classpaths that are added to the user code class loader_@throws IOException__@see #unregisterTask(JobID, ExecutionAttemptID) counterpart of this method;void registerTask(JobID id, ExecutionAttemptID execution, Collection<BlobKey> requiredJarFiles,_			Collection<URL> requiredClasspaths) throws IOException_;registers,a,job,task,execution,with,its,required,jar,files,and,classpaths,the,jar,files,are,identified,by,their,blob,keys,param,id,job,id,param,required,jar,files,collection,of,blob,keys,identifying,the,required,jar,files,param,required,classpaths,collection,of,classpaths,that,are,added,to,the,user,code,class,loader,throws,ioexception,see,unregister,task,job,id,execution,attempt,id,counterpart,of,this,method;void,register,task,job,id,id,execution,attempt,id,execution,collection,blob,key,required,jar,files,collection,url,required,classpaths,throws,ioexception
LibraryCacheManager -> void registerTask(JobID id, ExecutionAttemptID execution, Collection<BlobKey> requiredJarFiles, 			Collection<URL> requiredClasspaths) throws IOException_;1502201311;Registers a job task execution with its required jar files and classpaths. The jar files are identified by their blob keys.__@param id job ID_@param requiredJarFiles collection of blob keys identifying the required jar files_@param requiredClasspaths collection of classpaths that are added to the user code class loader_@throws IOException__@see #unregisterTask(JobID, ExecutionAttemptID) counterpart of this method;void registerTask(JobID id, ExecutionAttemptID execution, Collection<BlobKey> requiredJarFiles,_			Collection<URL> requiredClasspaths) throws IOException_;registers,a,job,task,execution,with,its,required,jar,files,and,classpaths,the,jar,files,are,identified,by,their,blob,keys,param,id,job,id,param,required,jar,files,collection,of,blob,keys,identifying,the,required,jar,files,param,required,classpaths,collection,of,classpaths,that,are,added,to,the,user,code,class,loader,throws,ioexception,see,unregister,task,job,id,execution,attempt,id,counterpart,of,this,method;void,register,task,job,id,id,execution,attempt,id,execution,collection,blob,key,required,jar,files,collection,url,required,classpaths,throws,ioexception
LibraryCacheManager -> public static void writeLibraryToStream(final String libraryFileName, final DataOutput out) throws IOException;1405024514;Writes data from the library with the given file name to the specified stream.__@param libraryFileName_the name of the library_@param out_the stream to write the data to_@throws IOException_thrown if an error occurs while writing the data;public static void writeLibraryToStream(final String libraryFileName, final DataOutput out) throws IOException {__		final LibraryCacheManager lib = get()__		lib.writeLibraryToStreamInternal(libraryFileName, out)___	};writes,data,from,the,library,with,the,given,file,name,to,the,specified,stream,param,library,file,name,the,name,of,the,library,param,out,the,stream,to,write,the,data,to,throws,ioexception,thrown,if,an,error,occurs,while,writing,the,data;public,static,void,write,library,to,stream,final,string,library,file,name,final,data,output,out,throws,ioexception,final,library,cache,manager,lib,get,lib,write,library,to,stream,internal,library,file,name,out
LibraryCacheManager -> public static void writeLibraryToStream(final String libraryFileName, final DataOutput out) throws IOException;1405090423;Writes data from the library with the given file name to the specified stream.__@param libraryFileName_the name of the library_@param out_the stream to write the data to_@throws IOException_thrown if an error occurs while writing the data;public static void writeLibraryToStream(final String libraryFileName, final DataOutput out) throws IOException {__		final LibraryCacheManager lib = get()__		lib.writeLibraryToStreamInternal(libraryFileName, out)___	};writes,data,from,the,library,with,the,given,file,name,to,the,specified,stream,param,library,file,name,the,name,of,the,library,param,out,the,stream,to,write,the,data,to,throws,ioexception,thrown,if,an,error,occurs,while,writing,the,data;public,static,void,write,library,to,stream,final,string,library,file,name,final,data,output,out,throws,ioexception,final,library,cache,manager,lib,get,lib,write,library,to,stream,internal,library,file,name,out
LibraryCacheManager -> public static void writeLibraryToStream(final String libraryFileName, final DataOutput out) throws IOException;1411236168;Writes data from the library with the given file name to the specified stream.__@param libraryFileName_the name of the library_@param out_the stream to write the data to_@throws IOException_thrown if an error occurs while writing the data;public static void writeLibraryToStream(final String libraryFileName, final DataOutput out) throws IOException {__		final LibraryCacheManager lib = get()__		lib.writeLibraryToStreamInternal(libraryFileName, out)___	};writes,data,from,the,library,with,the,given,file,name,to,the,specified,stream,param,library,file,name,the,name,of,the,library,param,out,the,stream,to,write,the,data,to,throws,ioexception,thrown,if,an,error,occurs,while,writing,the,data;public,static,void,write,library,to,stream,final,string,library,file,name,final,data,output,out,throws,ioexception,final,library,cache,manager,lib,get,lib,write,library,to,stream,internal,library,file,name,out
LibraryCacheManager -> public static void writeLibraryToStream(final String libraryFileName, final DataOutput out) throws IOException;1411236169;Writes data from the library with the given file name to the specified stream.__@param libraryFileName_the name of the library_@param out_the stream to write the data to_@throws IOException_thrown if an error occurs while writing the data;public static void writeLibraryToStream(final String libraryFileName, final DataOutput out) throws IOException {__		final LibraryCacheManager lib = get()__		lib.writeLibraryToStreamInternal(libraryFileName, out)___	};writes,data,from,the,library,with,the,given,file,name,to,the,specified,stream,param,library,file,name,the,name,of,the,library,param,out,the,stream,to,write,the,data,to,throws,ioexception,thrown,if,an,error,occurs,while,writing,the,data;public,static,void,write,library,to,stream,final,string,library,file,name,final,data,output,out,throws,ioexception,final,library,cache,manager,lib,get,lib,write,library,to,stream,internal,library,file,name,out
LibraryCacheManager -> public static void writeLibraryToStream(final String libraryFileName, final DataOutput out) throws IOException;1411473593;Writes data from the library with the given file name to the specified stream.__@param libraryFileName_the name of the library_@param out_the stream to write the data to_@throws IOException_thrown if an error occurs while writing the data;public static void writeLibraryToStream(final String libraryFileName, final DataOutput out) throws IOException {__		final LibraryCacheManager lib = get()__		lib.writeLibraryToStreamInternal(libraryFileName, out)___	};writes,data,from,the,library,with,the,given,file,name,to,the,specified,stream,param,library,file,name,the,name,of,the,library,param,out,the,stream,to,write,the,data,to,throws,ioexception,thrown,if,an,error,occurs,while,writing,the,data;public,static,void,write,library,to,stream,final,string,library,file,name,final,data,output,out,throws,ioexception,final,library,cache,manager,lib,get,lib,write,library,to,stream,internal,library,file,name,out
LibraryCacheManager -> LibraryTranslationKey -> public LibraryTranslationKey(final JobID jobID, final Path clientPath);1405024514;Construct a <code>LibraryTranslationKey</code> object from a fiven job ID and a client path that specifies_the name of_required library at the job client.__@param jobID_the job ID_@param clientPath_the client path;public LibraryTranslationKey(final JobID jobID, final Path clientPath) {__			this.jobID = jobID__			this.clientPath = clientPath__		};construct,a,code,library,translation,key,code,object,from,a,fiven,job,id,and,a,client,path,that,specifies,the,name,of,required,library,at,the,job,client,param,job,id,the,job,id,param,client,path,the,client,path;public,library,translation,key,final,job,id,job,id,final,path,client,path,this,job,id,job,id,this,client,path,client,path
LibraryCacheManager -> LibraryTranslationKey -> public LibraryTranslationKey(final JobID jobID, final Path clientPath);1405090423;Construct a <code>LibraryTranslationKey</code> object from a fiven job ID and a client path that specifies_the name of_required library at the job client.__@param jobID_the job ID_@param clientPath_the client path;public LibraryTranslationKey(final JobID jobID, final Path clientPath) {__			this.jobID = jobID__			this.clientPath = clientPath__		};construct,a,code,library,translation,key,code,object,from,a,fiven,job,id,and,a,client,path,that,specifies,the,name,of,required,library,at,the,job,client,param,job,id,the,job,id,param,client,path,the,client,path;public,library,translation,key,final,job,id,job,id,final,path,client,path,this,job,id,job,id,this,client,path,client,path
LibraryCacheManager -> LibraryTranslationKey -> public LibraryTranslationKey(final JobID jobID, final Path clientPath);1411236168;Construct a <code>LibraryTranslationKey</code> object from a fiven job ID and a client path that specifies_the name of_required library at the job client.__@param jobID_the job ID_@param clientPath_the client path;public LibraryTranslationKey(final JobID jobID, final Path clientPath) {__			this.jobID = jobID__			this.clientPath = clientPath__		};construct,a,code,library,translation,key,code,object,from,a,fiven,job,id,and,a,client,path,that,specifies,the,name,of,required,library,at,the,job,client,param,job,id,the,job,id,param,client,path,the,client,path;public,library,translation,key,final,job,id,job,id,final,path,client,path,this,job,id,job,id,this,client,path,client,path
LibraryCacheManager -> LibraryTranslationKey -> public LibraryTranslationKey(final JobID jobID, final Path clientPath);1411236169;Construct a <code>LibraryTranslationKey</code> object from a fiven job ID and a client path that specifies_the name of_required library at the job client.__@param jobID_the job ID_@param clientPath_the client path;public LibraryTranslationKey(final JobID jobID, final Path clientPath) {__			this.jobID = jobID__			this.clientPath = clientPath__		};construct,a,code,library,translation,key,code,object,from,a,fiven,job,id,and,a,client,path,that,specifies,the,name,of,required,library,at,the,job,client,param,job,id,the,job,id,param,client,path,the,client,path;public,library,translation,key,final,job,id,job,id,final,path,client,path,this,job,id,job,id,this,client,path,client,path
LibraryCacheManager -> LibraryTranslationKey -> public LibraryTranslationKey(final JobID jobID, final Path clientPath);1411473593;Construct a <code>LibraryTranslationKey</code> object from a fiven job ID and a client path that specifies_the name of_required library at the job client.__@param jobID_the job ID_@param clientPath_the client path;public LibraryTranslationKey(final JobID jobID, final Path clientPath) {__			this.jobID = jobID__			this.clientPath = clientPath__		};construct,a,code,library,translation,key,code,object,from,a,fiven,job,id,and,a,client,path,that,specifies,the,name,of,required,library,at,the,job,client,param,job,id,the,job,id,param,client,path,the,client,path;public,library,translation,key,final,job,id,job,id,final,path,client,path,this,job,id,job,id,this,client,path,client,path
LibraryCacheManager -> LibraryManagerEntry -> public LibraryManagerEntry(final JobID id, final String[] requiredJarFiles, URL[] urls);1405024514;Constructs a <code>LibraryManagerEntry</code> object from the given job ID and array of required library_files.__@param id_the ID of the job to create a <code>LibraryManagerEntry</code> for._@param requiredJarFiles_an array with the names of required libraries by the corresponding job (plain names)_@param urls_an array with the names of required libraries by the corresponding job (URL objects required by the_class loader);public LibraryManagerEntry(final JobID id, final String[] requiredJarFiles, URL[] urls) {__			String[] temp = requiredJarFiles__			if (temp == null) {_				temp = new String[0]__			}__			this.requiredJarFiles = temp___			if (urls == null) {_				urls = new URL[0]__			}__			this.classLoader = new URLClassLoader(urls, ClassLoader.getSystemClassLoader())__		};constructs,a,code,library,manager,entry,code,object,from,the,given,job,id,and,array,of,required,library,files,param,id,the,id,of,the,job,to,create,a,code,library,manager,entry,code,for,param,required,jar,files,an,array,with,the,names,of,required,libraries,by,the,corresponding,job,plain,names,param,urls,an,array,with,the,names,of,required,libraries,by,the,corresponding,job,url,objects,required,by,the,class,loader;public,library,manager,entry,final,job,id,id,final,string,required,jar,files,url,urls,string,temp,required,jar,files,if,temp,null,temp,new,string,0,this,required,jar,files,temp,if,urls,null,urls,new,url,0,this,class,loader,new,urlclass,loader,urls,class,loader,get,system,class,loader
LibraryCacheManager -> LibraryManagerEntry -> public LibraryManagerEntry(final JobID id, final String[] requiredJarFiles, URL[] urls);1405090423;Constructs a <code>LibraryManagerEntry</code> object from the given job ID and array of required library_files.__@param id_the ID of the job to create a <code>LibraryManagerEntry</code> for._@param requiredJarFiles_an array with the names of required libraries by the corresponding job (plain names)_@param urls_an array with the names of required libraries by the corresponding job (URL objects required by the_class loader);public LibraryManagerEntry(final JobID id, final String[] requiredJarFiles, URL[] urls) {__			String[] temp = requiredJarFiles__			if (temp == null) {_				temp = new String[0]__			}__			this.requiredJarFiles = temp___			if (urls == null) {_				urls = new URL[0]__			}__			this.classLoader = new URLClassLoader(urls, ClassLoader.getSystemClassLoader())__		};constructs,a,code,library,manager,entry,code,object,from,the,given,job,id,and,array,of,required,library,files,param,id,the,id,of,the,job,to,create,a,code,library,manager,entry,code,for,param,required,jar,files,an,array,with,the,names,of,required,libraries,by,the,corresponding,job,plain,names,param,urls,an,array,with,the,names,of,required,libraries,by,the,corresponding,job,url,objects,required,by,the,class,loader;public,library,manager,entry,final,job,id,id,final,string,required,jar,files,url,urls,string,temp,required,jar,files,if,temp,null,temp,new,string,0,this,required,jar,files,temp,if,urls,null,urls,new,url,0,this,class,loader,new,urlclass,loader,urls,class,loader,get,system,class,loader
LibraryCacheManager -> LibraryManagerEntry -> public LibraryManagerEntry(final JobID id, final String[] requiredJarFiles, URL[] urls);1411236168;Constructs a <code>LibraryManagerEntry</code> object from the given job ID and array of required library_files.__@param id_the ID of the job to create a <code>LibraryManagerEntry</code> for._@param requiredJarFiles_an array with the names of required libraries by the corresponding job (plain names)_@param urls_an array with the names of required libraries by the corresponding job (URL objects required by the_class loader);public LibraryManagerEntry(final JobID id, final String[] requiredJarFiles, URL[] urls) {__			String[] temp = requiredJarFiles__			if (temp == null) {_				temp = new String[0]__			}__			this.requiredJarFiles = temp___			if (urls == null) {_				urls = new URL[0]__			}__			this.classLoader = new URLClassLoader(urls, ClassLoader.getSystemClassLoader())__		};constructs,a,code,library,manager,entry,code,object,from,the,given,job,id,and,array,of,required,library,files,param,id,the,id,of,the,job,to,create,a,code,library,manager,entry,code,for,param,required,jar,files,an,array,with,the,names,of,required,libraries,by,the,corresponding,job,plain,names,param,urls,an,array,with,the,names,of,required,libraries,by,the,corresponding,job,url,objects,required,by,the,class,loader;public,library,manager,entry,final,job,id,id,final,string,required,jar,files,url,urls,string,temp,required,jar,files,if,temp,null,temp,new,string,0,this,required,jar,files,temp,if,urls,null,urls,new,url,0,this,class,loader,new,urlclass,loader,urls,class,loader,get,system,class,loader
LibraryCacheManager -> LibraryManagerEntry -> public LibraryManagerEntry(final JobID id, final String[] requiredJarFiles, URL[] urls);1411236169;Constructs a <code>LibraryManagerEntry</code> object from the given job ID and array of required library_files.__@param id_the ID of the job to create a <code>LibraryManagerEntry</code> for._@param requiredJarFiles_an array with the names of required libraries by the corresponding job (plain names)_@param urls_an array with the names of required libraries by the corresponding job (URL objects required by the_class loader);public LibraryManagerEntry(final JobID id, final String[] requiredJarFiles, URL[] urls) {__			String[] temp = requiredJarFiles__			if (temp == null) {_				temp = new String[0]__			}__			this.requiredJarFiles = temp___			if (urls == null) {_				urls = new URL[0]__			}__			this.classLoader = new URLClassLoader(urls, ClassLoader.getSystemClassLoader())__		};constructs,a,code,library,manager,entry,code,object,from,the,given,job,id,and,array,of,required,library,files,param,id,the,id,of,the,job,to,create,a,code,library,manager,entry,code,for,param,required,jar,files,an,array,with,the,names,of,required,libraries,by,the,corresponding,job,plain,names,param,urls,an,array,with,the,names,of,required,libraries,by,the,corresponding,job,url,objects,required,by,the,class,loader;public,library,manager,entry,final,job,id,id,final,string,required,jar,files,url,urls,string,temp,required,jar,files,if,temp,null,temp,new,string,0,this,required,jar,files,temp,if,urls,null,urls,new,url,0,this,class,loader,new,urlclass,loader,urls,class,loader,get,system,class,loader
LibraryCacheManager -> LibraryManagerEntry -> public LibraryManagerEntry(final JobID id, final String[] requiredJarFiles, URL[] urls);1411473593;Constructs a <code>LibraryManagerEntry</code> object from the given job ID and array of required library_files.__@param id_the ID of the job to create a <code>LibraryManagerEntry</code> for._@param requiredJarFiles_an array with the names of required libraries by the corresponding job (plain names)_@param urls_an array with the names of required libraries by the corresponding job (URL objects required by the_class loader);public LibraryManagerEntry(final JobID id, final String[] requiredJarFiles, URL[] urls) {__			String[] temp = requiredJarFiles__			if (temp == null) {_				temp = new String[0]__			}__			this.requiredJarFiles = temp___			if (urls == null) {_				urls = new URL[0]__			}__			this.classLoader = new URLClassLoader(urls, ClassLoader.getSystemClassLoader())__		};constructs,a,code,library,manager,entry,code,object,from,the,given,job,id,and,array,of,required,library,files,param,id,the,id,of,the,job,to,create,a,code,library,manager,entry,code,for,param,required,jar,files,an,array,with,the,names,of,required,libraries,by,the,corresponding,job,plain,names,param,urls,an,array,with,the,names,of,required,libraries,by,the,corresponding,job,url,objects,required,by,the,class,loader;public,library,manager,entry,final,job,id,id,final,string,required,jar,files,url,urls,string,temp,required,jar,files,if,temp,null,temp,new,string,0,this,required,jar,files,temp,if,urls,null,urls,new,url,0,this,class,loader,new,urlclass,loader,urls,class,loader,get,system,class,loader
LibraryCacheManager -> LibraryTranslationKey -> @Override 		public boolean equals(final Object obj);1405024514;{@inheritDoc};@Override_		public boolean equals(final Object obj) {__			if (obj == null) {_				return false__			}__			if (this.jobID == null) {_				return false__			}__			if (this.clientPath == null) {_				return false__			}__			if (obj instanceof LibraryTranslationKey) {__				final LibraryTranslationKey key = (LibraryTranslationKey) obj__				if (this.jobID.equals(key.getJobID()) && this.clientPath.equals(key.getClientPath())) {_					return true__				}_			}__			return false__		};inherit,doc;override,public,boolean,equals,final,object,obj,if,obj,null,return,false,if,this,job,id,null,return,false,if,this,client,path,null,return,false,if,obj,instanceof,library,translation,key,final,library,translation,key,key,library,translation,key,obj,if,this,job,id,equals,key,get,job,id,this,client,path,equals,key,get,client,path,return,true,return,false
LibraryCacheManager -> LibraryTranslationKey -> @Override 		public boolean equals(final Object obj);1405090423;{@inheritDoc};@Override_		public boolean equals(final Object obj) {__			if (obj == null) {_				return false__			}__			if (this.jobID == null) {_				return false__			}__			if (this.clientPath == null) {_				return false__			}__			if (obj instanceof LibraryTranslationKey) {__				final LibraryTranslationKey key = (LibraryTranslationKey) obj__				if (this.jobID.equals(key.getJobID()) && this.clientPath.equals(key.getClientPath())) {_					return true__				}_			}__			return false__		};inherit,doc;override,public,boolean,equals,final,object,obj,if,obj,null,return,false,if,this,job,id,null,return,false,if,this,client,path,null,return,false,if,obj,instanceof,library,translation,key,final,library,translation,key,key,library,translation,key,obj,if,this,job,id,equals,key,get,job,id,this,client,path,equals,key,get,client,path,return,true,return,false
LibraryCacheManager -> LibraryTranslationKey -> @Override 		public boolean equals(final Object obj);1411236168;{@inheritDoc};@Override_		public boolean equals(final Object obj) {__			if (obj == null) {_				return false__			}__			if (this.jobID == null) {_				return false__			}__			if (this.clientPath == null) {_				return false__			}__			if (obj instanceof LibraryTranslationKey) {__				final LibraryTranslationKey key = (LibraryTranslationKey) obj__				if (this.jobID.equals(key.getJobID()) && this.clientPath.equals(key.getClientPath())) {_					return true__				}_			}__			return false__		};inherit,doc;override,public,boolean,equals,final,object,obj,if,obj,null,return,false,if,this,job,id,null,return,false,if,this,client,path,null,return,false,if,obj,instanceof,library,translation,key,final,library,translation,key,key,library,translation,key,obj,if,this,job,id,equals,key,get,job,id,this,client,path,equals,key,get,client,path,return,true,return,false
LibraryCacheManager -> LibraryTranslationKey -> @Override 		public boolean equals(final Object obj);1411236169;{@inheritDoc};@Override_		public boolean equals(final Object obj) {__			if (obj == null) {_				return false__			}__			if (this.jobID == null) {_				return false__			}__			if (this.clientPath == null) {_				return false__			}__			if (obj instanceof LibraryTranslationKey) {__				final LibraryTranslationKey key = (LibraryTranslationKey) obj__				if (this.jobID.equals(key.getJobID()) && this.clientPath.equals(key.getClientPath())) {_					return true__				}_			}__			return false__		};inherit,doc;override,public,boolean,equals,final,object,obj,if,obj,null,return,false,if,this,job,id,null,return,false,if,this,client,path,null,return,false,if,obj,instanceof,library,translation,key,final,library,translation,key,key,library,translation,key,obj,if,this,job,id,equals,key,get,job,id,this,client,path,equals,key,get,client,path,return,true,return,false
LibraryCacheManager -> LibraryTranslationKey -> @Override 		public boolean equals(final Object obj);1411473593;{@inheritDoc};@Override_		public boolean equals(final Object obj) {__			if (obj == null) {_				return false__			}__			if (this.jobID == null) {_				return false__			}__			if (this.clientPath == null) {_				return false__			}__			if (obj instanceof LibraryTranslationKey) {__				final LibraryTranslationKey key = (LibraryTranslationKey) obj__				if (this.jobID.equals(key.getJobID()) && this.clientPath.equals(key.getClientPath())) {_					return true__				}_			}__			return false__		};inherit,doc;override,public,boolean,equals,final,object,obj,if,obj,null,return,false,if,this,job,id,null,return,false,if,this,client,path,null,return,false,if,obj,instanceof,library,translation,key,final,library,translation,key,key,library,translation,key,obj,if,this,job,id,equals,key,get,job,id,this,client,path,equals,key,get,client,path,return,true,return,false
LibraryCacheManager -> private void registerInternal(final JobID id, final Path[] clientPaths) throws IOException;1405024514;Registers a job ID with a set of library paths that are required to run the job. The library paths are given in_terms_of client paths, so the method first translates the client paths into the corresponding internal cache names. For_every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered._@param clientPaths_the client path's of the required libraries_@throws IOException_thrown if no mapping between the job ID and a job ID exists or the requested library is not in the cache.;private void registerInternal(final JobID id, final Path[] clientPaths) throws IOException {__		final String[] cacheNames = new String[clientPaths.length]___		for (int i = 0_ i < clientPaths.length_ ++i) {_			final LibraryTranslationKey key = new LibraryTranslationKey(id, clientPaths[i])__			cacheNames[i] = this.clientPathToCacheName.get(key)__			if (cacheNames[i] == null) {_				throw new IOException("Cannot map" + clientPaths[i].toString() + " to cache name")__			}_		}__		_		registerInternal(id, cacheNames)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,the,library,paths,are,given,in,terms,of,client,paths,so,the,method,first,translates,the,client,paths,into,the,corresponding,internal,cache,names,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,client,paths,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,no,mapping,between,the,job,id,and,a,job,id,exists,or,the,requested,library,is,not,in,the,cache;private,void,register,internal,final,job,id,id,final,path,client,paths,throws,ioexception,final,string,cache,names,new,string,client,paths,length,for,int,i,0,i,client,paths,length,i,final,library,translation,key,key,new,library,translation,key,id,client,paths,i,cache,names,i,this,client,path,to,cache,name,get,key,if,cache,names,i,null,throw,new,ioexception,cannot,map,client,paths,i,to,string,to,cache,name,register,internal,id,cache,names
LibraryCacheManager -> private void registerInternal(final JobID id, final Path[] clientPaths) throws IOException;1405090423;Registers a job ID with a set of library paths that are required to run the job. The library paths are given in_terms_of client paths, so the method first translates the client paths into the corresponding internal cache names. For_every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered._@param clientPaths_the client path's of the required libraries_@throws IOException_thrown if no mapping between the job ID and a job ID exists or the requested library is not in the cache.;private void registerInternal(final JobID id, final Path[] clientPaths) throws IOException {__		final String[] cacheNames = new String[clientPaths.length]___		for (int i = 0_ i < clientPaths.length_ ++i) {_			final LibraryTranslationKey key = new LibraryTranslationKey(id, clientPaths[i])__			cacheNames[i] = this.clientPathToCacheName.get(key)__			if (cacheNames[i] == null) {_				throw new IOException("Cannot map" + clientPaths[i].toString() + " to cache name")__			}_		}__		_		registerInternal(id, cacheNames)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,the,library,paths,are,given,in,terms,of,client,paths,so,the,method,first,translates,the,client,paths,into,the,corresponding,internal,cache,names,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,client,paths,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,no,mapping,between,the,job,id,and,a,job,id,exists,or,the,requested,library,is,not,in,the,cache;private,void,register,internal,final,job,id,id,final,path,client,paths,throws,ioexception,final,string,cache,names,new,string,client,paths,length,for,int,i,0,i,client,paths,length,i,final,library,translation,key,key,new,library,translation,key,id,client,paths,i,cache,names,i,this,client,path,to,cache,name,get,key,if,cache,names,i,null,throw,new,ioexception,cannot,map,client,paths,i,to,string,to,cache,name,register,internal,id,cache,names
LibraryCacheManager -> private void registerInternal(final JobID id, final Path[] clientPaths) throws IOException;1411236168;Registers a job ID with a set of library paths that are required to run the job. The library paths are given in_terms_of client paths, so the method first translates the client paths into the corresponding internal cache names. For_every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered._@param clientPaths_the client path's of the required libraries_@throws IOException_thrown if no mapping between the job ID and a job ID exists or the requested library is not in the cache.;private void registerInternal(final JobID id, final Path[] clientPaths) throws IOException {__		final String[] cacheNames = new String[clientPaths.length]___		for (int i = 0_ i < clientPaths.length_ ++i) {_			final LibraryTranslationKey key = new LibraryTranslationKey(id, clientPaths[i])__			cacheNames[i] = this.clientPathToCacheName.get(key)__			if (cacheNames[i] == null) {_				throw new IOException("Cannot map" + clientPaths[i].toString() + " to cache name")__			}_		}__		_		registerInternal(id, cacheNames)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,the,library,paths,are,given,in,terms,of,client,paths,so,the,method,first,translates,the,client,paths,into,the,corresponding,internal,cache,names,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,client,paths,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,no,mapping,between,the,job,id,and,a,job,id,exists,or,the,requested,library,is,not,in,the,cache;private,void,register,internal,final,job,id,id,final,path,client,paths,throws,ioexception,final,string,cache,names,new,string,client,paths,length,for,int,i,0,i,client,paths,length,i,final,library,translation,key,key,new,library,translation,key,id,client,paths,i,cache,names,i,this,client,path,to,cache,name,get,key,if,cache,names,i,null,throw,new,ioexception,cannot,map,client,paths,i,to,string,to,cache,name,register,internal,id,cache,names
LibraryCacheManager -> private void registerInternal(final JobID id, final Path[] clientPaths) throws IOException;1411236169;Registers a job ID with a set of library paths that are required to run the job. The library paths are given in_terms_of client paths, so the method first translates the client paths into the corresponding internal cache names. For_every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered._@param clientPaths_the client path's of the required libraries_@throws IOException_thrown if no mapping between the job ID and a job ID exists or the requested library is not in the cache.;private void registerInternal(final JobID id, final Path[] clientPaths) throws IOException {__		final String[] cacheNames = new String[clientPaths.length]___		for (int i = 0_ i < clientPaths.length_ ++i) {_			final LibraryTranslationKey key = new LibraryTranslationKey(id, clientPaths[i])__			cacheNames[i] = this.clientPathToCacheName.get(key)__			if (cacheNames[i] == null) {_				throw new IOException("Cannot map" + clientPaths[i].toString() + " to cache name")__			}_		}__		_		registerInternal(id, cacheNames)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,the,library,paths,are,given,in,terms,of,client,paths,so,the,method,first,translates,the,client,paths,into,the,corresponding,internal,cache,names,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,client,paths,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,no,mapping,between,the,job,id,and,a,job,id,exists,or,the,requested,library,is,not,in,the,cache;private,void,register,internal,final,job,id,id,final,path,client,paths,throws,ioexception,final,string,cache,names,new,string,client,paths,length,for,int,i,0,i,client,paths,length,i,final,library,translation,key,key,new,library,translation,key,id,client,paths,i,cache,names,i,this,client,path,to,cache,name,get,key,if,cache,names,i,null,throw,new,ioexception,cannot,map,client,paths,i,to,string,to,cache,name,register,internal,id,cache,names
LibraryCacheManager -> private void registerInternal(final JobID id, final Path[] clientPaths) throws IOException;1411473593;Registers a job ID with a set of library paths that are required to run the job. The library paths are given in_terms_of client paths, so the method first translates the client paths into the corresponding internal cache names. For_every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered._@param clientPaths_the client path's of the required libraries_@throws IOException_thrown if no mapping between the job ID and a job ID exists or the requested library is not in the cache.;private void registerInternal(final JobID id, final Path[] clientPaths) throws IOException {__		final String[] cacheNames = new String[clientPaths.length]___		for (int i = 0_ i < clientPaths.length_ ++i) {_			final LibraryTranslationKey key = new LibraryTranslationKey(id, clientPaths[i])__			cacheNames[i] = this.clientPathToCacheName.get(key)__			if (cacheNames[i] == null) {_				throw new IOException("Cannot map" + clientPaths[i].toString() + " to cache name")__			}_		}__		_		registerInternal(id, cacheNames)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,the,library,paths,are,given,in,terms,of,client,paths,so,the,method,first,translates,the,client,paths,into,the,corresponding,internal,cache,names,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,client,paths,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,no,mapping,between,the,job,id,and,a,job,id,exists,or,the,requested,library,is,not,in,the,cache;private,void,register,internal,final,job,id,id,final,path,client,paths,throws,ioexception,final,string,cache,names,new,string,client,paths,length,for,int,i,0,i,client,paths,length,i,final,library,translation,key,key,new,library,translation,key,id,client,paths,i,cache,names,i,this,client,path,to,cache,name,get,key,if,cache,names,i,null,throw,new,ioexception,cannot,map,client,paths,i,to,string,to,cache,name,register,internal,id,cache,names
LibraryCacheManager -> public static String[] getRequiredJarFiles(final JobID id) throws IOException;1405024514;Returns the names of the required libraries of the specified job.__@param id_the ID of the job to return the names of required libraries for._@return the names of the required libraries or <code>null</code> if the specified job ID is unknown_@throws IOException_thrown if the library cache manager could not be instantiated;public static String[] getRequiredJarFiles(final JobID id) throws IOException {__		if (id == null) {_			return new String[0]__		}__		final LibraryCacheManager lib = get()___		return lib.getRequiredJarFilesInternal(id)__	};returns,the,names,of,the,required,libraries,of,the,specified,job,param,id,the,id,of,the,job,to,return,the,names,of,required,libraries,for,return,the,names,of,the,required,libraries,or,code,null,code,if,the,specified,job,id,is,unknown,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,string,get,required,jar,files,final,job,id,id,throws,ioexception,if,id,null,return,new,string,0,final,library,cache,manager,lib,get,return,lib,get,required,jar,files,internal,id
LibraryCacheManager -> public static String[] getRequiredJarFiles(final JobID id) throws IOException;1405090423;Returns the names of the required libraries of the specified job.__@param id_the ID of the job to return the names of required libraries for._@return the names of the required libraries or <code>null</code> if the specified job ID is unknown_@throws IOException_thrown if the library cache manager could not be instantiated;public static String[] getRequiredJarFiles(final JobID id) throws IOException {__		if (id == null) {_			return new String[0]__		}__		final LibraryCacheManager lib = get()___		return lib.getRequiredJarFilesInternal(id)__	};returns,the,names,of,the,required,libraries,of,the,specified,job,param,id,the,id,of,the,job,to,return,the,names,of,required,libraries,for,return,the,names,of,the,required,libraries,or,code,null,code,if,the,specified,job,id,is,unknown,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,string,get,required,jar,files,final,job,id,id,throws,ioexception,if,id,null,return,new,string,0,final,library,cache,manager,lib,get,return,lib,get,required,jar,files,internal,id
LibraryCacheManager -> public static String[] getRequiredJarFiles(final JobID id) throws IOException;1411236168;Returns the names of the required libraries of the specified job.__@param id_the ID of the job to return the names of required libraries for._@return the names of the required libraries or <code>null</code> if the specified job ID is unknown_@throws IOException_thrown if the library cache manager could not be instantiated;public static String[] getRequiredJarFiles(final JobID id) throws IOException {__		if (id == null) {_			return new String[0]__		}__		final LibraryCacheManager lib = get()___		return lib.getRequiredJarFilesInternal(id)__	};returns,the,names,of,the,required,libraries,of,the,specified,job,param,id,the,id,of,the,job,to,return,the,names,of,required,libraries,for,return,the,names,of,the,required,libraries,or,code,null,code,if,the,specified,job,id,is,unknown,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,string,get,required,jar,files,final,job,id,id,throws,ioexception,if,id,null,return,new,string,0,final,library,cache,manager,lib,get,return,lib,get,required,jar,files,internal,id
LibraryCacheManager -> public static String[] getRequiredJarFiles(final JobID id) throws IOException;1411236169;Returns the names of the required libraries of the specified job.__@param id_the ID of the job to return the names of required libraries for._@return the names of the required libraries or <code>null</code> if the specified job ID is unknown_@throws IOException_thrown if the library cache manager could not be instantiated;public static String[] getRequiredJarFiles(final JobID id) throws IOException {__		if (id == null) {_			return new String[0]__		}__		final LibraryCacheManager lib = get()___		return lib.getRequiredJarFilesInternal(id)__	};returns,the,names,of,the,required,libraries,of,the,specified,job,param,id,the,id,of,the,job,to,return,the,names,of,required,libraries,for,return,the,names,of,the,required,libraries,or,code,null,code,if,the,specified,job,id,is,unknown,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,string,get,required,jar,files,final,job,id,id,throws,ioexception,if,id,null,return,new,string,0,final,library,cache,manager,lib,get,return,lib,get,required,jar,files,internal,id
LibraryCacheManager -> public static String[] getRequiredJarFiles(final JobID id) throws IOException;1411473593;Returns the names of the required libraries of the specified job.__@param id_the ID of the job to return the names of required libraries for._@return the names of the required libraries or <code>null</code> if the specified job ID is unknown_@throws IOException_thrown if the library cache manager could not be instantiated;public static String[] getRequiredJarFiles(final JobID id) throws IOException {__		if (id == null) {_			return new String[0]__		}__		final LibraryCacheManager lib = get()___		return lib.getRequiredJarFilesInternal(id)__	};returns,the,names,of,the,required,libraries,of,the,specified,job,param,id,the,id,of,the,job,to,return,the,names,of,required,libraries,for,return,the,names,of,the,required,libraries,or,code,null,code,if,the,specified,job,id,is,unknown,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,string,get,required,jar,files,final,job,id,id,throws,ioexception,if,id,null,return,new,string,0,final,library,cache,manager,lib,get,return,lib,get,required,jar,files,internal,id
LibraryCacheManager -> void shutdown()_;1503041372;Shutdown method which may release created class loaders.;void shutdown()_;shutdown,method,which,may,release,created,class,loaders;void,shutdown
LibraryCacheManager -> void shutdown()_;1507212387;Shutdown method which may release created class loaders.;void shutdown()_;shutdown,method,which,may,release,created,class,loaders;void,shutdown
LibraryCacheManager -> void shutdown()_;1526549506;Shutdown method which may release created class loaders.;void shutdown()_;shutdown,method,which,may,release,created,class,loaders;void,shutdown
LibraryCacheManager -> ClassLoader getClassLoader(JobID id)_;1415043780;Returns the user code class loader associated with id.__@param id identifying the job_@return ClassLoader which can load the user code;ClassLoader getClassLoader(JobID id)_;returns,the,user,code,class,loader,associated,with,id,param,id,identifying,the,job,return,class,loader,which,can,load,the,user,code;class,loader,get,class,loader,job,id,id
LibraryCacheManager -> ClassLoader getClassLoader(JobID id)_;1427784999;Returns the user code class loader associated with id.__@param id identifying the job_@return ClassLoader which can load the user code;ClassLoader getClassLoader(JobID id)_;returns,the,user,code,class,loader,associated,with,id,param,id,identifying,the,job,return,class,loader,which,can,load,the,user,code;class,loader,get,class,loader,job,id,id
LibraryCacheManager -> ClassLoader getClassLoader(JobID id)_;1444312509;Returns the user code class loader associated with id.__@param id identifying the job_@return ClassLoader which can load the user code;ClassLoader getClassLoader(JobID id)_;returns,the,user,code,class,loader,associated,with,id,param,id,identifying,the,job,return,class,loader,which,can,load,the,user,code;class,loader,get,class,loader,job,id,id
LibraryCacheManager -> ClassLoader getClassLoader(JobID id)_;1499173045;Returns the user code class loader associated with id.__@param id identifying the job_@return ClassLoader which can load the user code;ClassLoader getClassLoader(JobID id)_;returns,the,user,code,class,loader,associated,with,id,param,id,identifying,the,job,return,class,loader,which,can,load,the,user,code;class,loader,get,class,loader,job,id,id
LibraryCacheManager -> ClassLoader getClassLoader(JobID id)_;1502201311;Returns the user code class loader associated with id.__@param id identifying the job_@return ClassLoader which can load the user code;ClassLoader getClassLoader(JobID id)_;returns,the,user,code,class,loader,associated,with,id,param,id,identifying,the,job,return,class,loader,which,can,load,the,user,code;class,loader,get,class,loader,job,id,id
LibraryCacheManager -> ClassLoader getClassLoader(JobID id)_;1503041372;Returns the user code class loader associated with id.__@param id identifying the job_@return ClassLoader which can load the user code;ClassLoader getClassLoader(JobID id)_;returns,the,user,code,class,loader,associated,with,id,param,id,identifying,the,job,return,class,loader,which,can,load,the,user,code;class,loader,get,class,loader,job,id,id
LibraryCacheManager -> ClassLoader getClassLoader(JobID id)_;1507212387;Returns the user code class loader associated with id.__@param id identifying the job_@return ClassLoader which can load the user code;ClassLoader getClassLoader(JobID id)_;returns,the,user,code,class,loader,associated,with,id,param,id,identifying,the,job,return,class,loader,which,can,load,the,user,code;class,loader,get,class,loader,job,id,id
LibraryCacheManager -> ClassLoader getClassLoader(JobID id)_;1526549506;Returns the user code class loader associated with id.__@param id identifying the job_@return ClassLoader which can load the user code;ClassLoader getClassLoader(JobID id)_;returns,the,user,code,class,loader,associated,with,id,param,id,identifying,the,job,return,class,loader,which,can,load,the,user,code;class,loader,get,class,loader,job,id,id
LibraryCacheManager -> private Path containsInternal(final String cacheName) throws IOException;1405024514;Checks if the given library is in the local cache.__@param cacheName_The name of the library to be checked for._@return the path object of the library if it is cached, <code>null</code> otherwise_@throws IOException_thrown if no access to the file system could be obtained;private Path containsInternal(final String cacheName) throws IOException {__		_		final Path p = new Path(this.libraryCachePath + File.separator + cacheName)___		synchronized (this.fs) {_			if (fs.exists(p)) {_				return p__			}_		}__		return null__	};checks,if,the,given,library,is,in,the,local,cache,param,cache,name,the,name,of,the,library,to,be,checked,for,return,the,path,object,of,the,library,if,it,is,cached,code,null,code,otherwise,throws,ioexception,thrown,if,no,access,to,the,file,system,could,be,obtained;private,path,contains,internal,final,string,cache,name,throws,ioexception,final,path,p,new,path,this,library,cache,path,file,separator,cache,name,synchronized,this,fs,if,fs,exists,p,return,p,return,null
LibraryCacheManager -> private Path containsInternal(final String cacheName) throws IOException;1405090423;Checks if the given library is in the local cache.__@param cacheName_The name of the library to be checked for._@return the path object of the library if it is cached, <code>null</code> otherwise_@throws IOException_thrown if no access to the file system could be obtained;private Path containsInternal(final String cacheName) throws IOException {__		_		final Path p = new Path(this.libraryCachePath + File.separator + cacheName)___		synchronized (this.fs) {_			if (fs.exists(p)) {_				return p__			}_		}__		return null__	};checks,if,the,given,library,is,in,the,local,cache,param,cache,name,the,name,of,the,library,to,be,checked,for,return,the,path,object,of,the,library,if,it,is,cached,code,null,code,otherwise,throws,ioexception,thrown,if,no,access,to,the,file,system,could,be,obtained;private,path,contains,internal,final,string,cache,name,throws,ioexception,final,path,p,new,path,this,library,cache,path,file,separator,cache,name,synchronized,this,fs,if,fs,exists,p,return,p,return,null
LibraryCacheManager -> private Path containsInternal(final String cacheName) throws IOException;1411236168;Checks if the given library is in the local cache.__@param cacheName_The name of the library to be checked for._@return the path object of the library if it is cached, <code>null</code> otherwise_@throws IOException_thrown if no access to the file system could be obtained;private Path containsInternal(final String cacheName) throws IOException {__		_		final Path p = new Path(this.libraryCachePath + File.separator + cacheName)___		synchronized (this.fs) {_			if (fs.exists(p)) {_				return p__			}_		}__		return null__	};checks,if,the,given,library,is,in,the,local,cache,param,cache,name,the,name,of,the,library,to,be,checked,for,return,the,path,object,of,the,library,if,it,is,cached,code,null,code,otherwise,throws,ioexception,thrown,if,no,access,to,the,file,system,could,be,obtained;private,path,contains,internal,final,string,cache,name,throws,ioexception,final,path,p,new,path,this,library,cache,path,file,separator,cache,name,synchronized,this,fs,if,fs,exists,p,return,p,return,null
LibraryCacheManager -> private Path containsInternal(final String cacheName) throws IOException;1411236169;Checks if the given library is in the local cache.__@param cacheName_The name of the library to be checked for._@return the path object of the library if it is cached, <code>null</code> otherwise_@throws IOException_thrown if no access to the file system could be obtained;private Path containsInternal(final String cacheName) throws IOException {__		_		final Path p = new Path(this.libraryCachePath + File.separator + cacheName)___		synchronized (this.fs) {_			if (fs.exists(p)) {_				return p__			}_		}__		return null__	};checks,if,the,given,library,is,in,the,local,cache,param,cache,name,the,name,of,the,library,to,be,checked,for,return,the,path,object,of,the,library,if,it,is,cached,code,null,code,otherwise,throws,ioexception,thrown,if,no,access,to,the,file,system,could,be,obtained;private,path,contains,internal,final,string,cache,name,throws,ioexception,final,path,p,new,path,this,library,cache,path,file,separator,cache,name,synchronized,this,fs,if,fs,exists,p,return,p,return,null
LibraryCacheManager -> private Path containsInternal(final String cacheName) throws IOException;1411473593;Checks if the given library is in the local cache.__@param cacheName_The name of the library to be checked for._@return the path object of the library if it is cached, <code>null</code> otherwise_@throws IOException_thrown if no access to the file system could be obtained;private Path containsInternal(final String cacheName) throws IOException {__		_		final Path p = new Path(this.libraryCachePath + File.separator + cacheName)___		synchronized (this.fs) {_			if (fs.exists(p)) {_				return p__			}_		}__		return null__	};checks,if,the,given,library,is,in,the,local,cache,param,cache,name,the,name,of,the,library,to,be,checked,for,return,the,path,object,of,the,library,if,it,is,cached,code,null,code,otherwise,throws,ioexception,thrown,if,no,access,to,the,file,system,could,be,obtained;private,path,contains,internal,final,string,cache,name,throws,ioexception,final,path,p,new,path,this,library,cache,path,file,separator,cache,name,synchronized,this,fs,if,fs,exists,p,return,p,return,null
LibraryCacheManager -> public static void addLibrary(final JobID jobID, final Path name, final long size, final DataInput in) 			throws IOException;1405024514;Reads a library from the given input stream and adds it to the local library cache. The cache name of_the library is determined by the checksum of the received data and cannot be specified manually.__@param jobID_the ID of the job the library data belongs to_@param name_the name of the library at the clients host_@param size_the size of the library to be read from the input stream_@param in_the data input stream_@throws IOException_thrown if the library cache manager could not be instantiated or an error occurred while reading the_library data from the input stream;public static void addLibrary(final JobID jobID, final Path name, final long size, final DataInput in)_			throws IOException {__		final LibraryCacheManager lib = get()__		lib.addLibraryInternal(jobID, name, size, in)__	};reads,a,library,from,the,given,input,stream,and,adds,it,to,the,local,library,cache,the,cache,name,of,the,library,is,determined,by,the,checksum,of,the,received,data,and,cannot,be,specified,manually,param,job,id,the,id,of,the,job,the,library,data,belongs,to,param,name,the,name,of,the,library,at,the,clients,host,param,size,the,size,of,the,library,to,be,read,from,the,input,stream,param,in,the,data,input,stream,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,an,error,occurred,while,reading,the,library,data,from,the,input,stream;public,static,void,add,library,final,job,id,job,id,final,path,name,final,long,size,final,data,input,in,throws,ioexception,final,library,cache,manager,lib,get,lib,add,library,internal,job,id,name,size,in
LibraryCacheManager -> public static void addLibrary(final JobID jobID, final Path name, final long size, final DataInput in) 			throws IOException;1405090423;Reads a library from the given input stream and adds it to the local library cache. The cache name of_the library is determined by the checksum of the received data and cannot be specified manually.__@param jobID_the ID of the job the library data belongs to_@param name_the name of the library at the clients host_@param size_the size of the library to be read from the input stream_@param in_the data input stream_@throws IOException_thrown if the library cache manager could not be instantiated or an error occurred while reading the_library data from the input stream;public static void addLibrary(final JobID jobID, final Path name, final long size, final DataInput in)_			throws IOException {__		final LibraryCacheManager lib = get()__		lib.addLibraryInternal(jobID, name, size, in)__	};reads,a,library,from,the,given,input,stream,and,adds,it,to,the,local,library,cache,the,cache,name,of,the,library,is,determined,by,the,checksum,of,the,received,data,and,cannot,be,specified,manually,param,job,id,the,id,of,the,job,the,library,data,belongs,to,param,name,the,name,of,the,library,at,the,clients,host,param,size,the,size,of,the,library,to,be,read,from,the,input,stream,param,in,the,data,input,stream,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,an,error,occurred,while,reading,the,library,data,from,the,input,stream;public,static,void,add,library,final,job,id,job,id,final,path,name,final,long,size,final,data,input,in,throws,ioexception,final,library,cache,manager,lib,get,lib,add,library,internal,job,id,name,size,in
LibraryCacheManager -> public static void addLibrary(final JobID jobID, final Path name, final long size, final DataInput in) 			throws IOException;1411236168;Reads a library from the given input stream and adds it to the local library cache. The cache name of_the library is determined by the checksum of the received data and cannot be specified manually.__@param jobID_the ID of the job the library data belongs to_@param name_the name of the library at the clients host_@param size_the size of the library to be read from the input stream_@param in_the data input stream_@throws IOException_thrown if the library cache manager could not be instantiated or an error occurred while reading the_library data from the input stream;public static void addLibrary(final JobID jobID, final Path name, final long size, final DataInput in)_			throws IOException {__		final LibraryCacheManager lib = get()__		lib.addLibraryInternal(jobID, name, size, in)__	};reads,a,library,from,the,given,input,stream,and,adds,it,to,the,local,library,cache,the,cache,name,of,the,library,is,determined,by,the,checksum,of,the,received,data,and,cannot,be,specified,manually,param,job,id,the,id,of,the,job,the,library,data,belongs,to,param,name,the,name,of,the,library,at,the,clients,host,param,size,the,size,of,the,library,to,be,read,from,the,input,stream,param,in,the,data,input,stream,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,an,error,occurred,while,reading,the,library,data,from,the,input,stream;public,static,void,add,library,final,job,id,job,id,final,path,name,final,long,size,final,data,input,in,throws,ioexception,final,library,cache,manager,lib,get,lib,add,library,internal,job,id,name,size,in
LibraryCacheManager -> public static void addLibrary(final JobID jobID, final Path name, final long size, final DataInput in) 			throws IOException;1411236169;Reads a library from the given input stream and adds it to the local library cache. The cache name of_the library is determined by the checksum of the received data and cannot be specified manually.__@param jobID_the ID of the job the library data belongs to_@param name_the name of the library at the clients host_@param size_the size of the library to be read from the input stream_@param in_the data input stream_@throws IOException_thrown if the library cache manager could not be instantiated or an error occurred while reading the_library data from the input stream;public static void addLibrary(final JobID jobID, final Path name, final long size, final DataInput in)_			throws IOException {__		final LibraryCacheManager lib = get()__		lib.addLibraryInternal(jobID, name, size, in)__	};reads,a,library,from,the,given,input,stream,and,adds,it,to,the,local,library,cache,the,cache,name,of,the,library,is,determined,by,the,checksum,of,the,received,data,and,cannot,be,specified,manually,param,job,id,the,id,of,the,job,the,library,data,belongs,to,param,name,the,name,of,the,library,at,the,clients,host,param,size,the,size,of,the,library,to,be,read,from,the,input,stream,param,in,the,data,input,stream,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,an,error,occurred,while,reading,the,library,data,from,the,input,stream;public,static,void,add,library,final,job,id,job,id,final,path,name,final,long,size,final,data,input,in,throws,ioexception,final,library,cache,manager,lib,get,lib,add,library,internal,job,id,name,size,in
LibraryCacheManager -> public static void addLibrary(final JobID jobID, final Path name, final long size, final DataInput in) 			throws IOException;1411473593;Reads a library from the given input stream and adds it to the local library cache. The cache name of_the library is determined by the checksum of the received data and cannot be specified manually.__@param jobID_the ID of the job the library data belongs to_@param name_the name of the library at the clients host_@param size_the size of the library to be read from the input stream_@param in_the data input stream_@throws IOException_thrown if the library cache manager could not be instantiated or an error occurred while reading the_library data from the input stream;public static void addLibrary(final JobID jobID, final Path name, final long size, final DataInput in)_			throws IOException {__		final LibraryCacheManager lib = get()__		lib.addLibraryInternal(jobID, name, size, in)__	};reads,a,library,from,the,given,input,stream,and,adds,it,to,the,local,library,cache,the,cache,name,of,the,library,is,determined,by,the,checksum,of,the,received,data,and,cannot,be,specified,manually,param,job,id,the,id,of,the,job,the,library,data,belongs,to,param,name,the,name,of,the,library,at,the,clients,host,param,size,the,size,of,the,library,to,be,read,from,the,input,stream,param,in,the,data,input,stream,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,an,error,occurred,while,reading,the,library,data,from,the,input,stream;public,static,void,add,library,final,job,id,job,id,final,path,name,final,long,size,final,data,input,in,throws,ioexception,final,library,cache,manager,lib,get,lib,add,library,internal,job,id,name,size,in
LibraryCacheManager -> LibraryTranslationKey -> @Override 		public int hashCode();1405024514;{@inheritDoc};@Override_		public int hashCode() {__			final long temp = (this.jobID.hashCode() + this.clientPath.hashCode()) % Integer.MAX_VALUE___			return (int) temp__		};inherit,doc;override,public,int,hash,code,final,long,temp,this,job,id,hash,code,this,client,path,hash,code,integer,return,int,temp
LibraryCacheManager -> LibraryTranslationKey -> @Override 		public int hashCode();1405090423;{@inheritDoc};@Override_		public int hashCode() {__			final long temp = (this.jobID.hashCode() + this.clientPath.hashCode()) % Integer.MAX_VALUE___			return (int) temp__		};inherit,doc;override,public,int,hash,code,final,long,temp,this,job,id,hash,code,this,client,path,hash,code,integer,return,int,temp
LibraryCacheManager -> LibraryTranslationKey -> @Override 		public int hashCode();1411236168;{@inheritDoc};@Override_		public int hashCode() {__			final long temp = (this.jobID.hashCode() + this.clientPath.hashCode()) % Integer.MAX_VALUE___			return (int) temp__		};inherit,doc;override,public,int,hash,code,final,long,temp,this,job,id,hash,code,this,client,path,hash,code,integer,return,int,temp
LibraryCacheManager -> LibraryTranslationKey -> @Override 		public int hashCode();1411236169;{@inheritDoc};@Override_		public int hashCode() {__			final long temp = (this.jobID.hashCode() + this.clientPath.hashCode()) % Integer.MAX_VALUE___			return (int) temp__		};inherit,doc;override,public,int,hash,code,final,long,temp,this,job,id,hash,code,this,client,path,hash,code,integer,return,int,temp
LibraryCacheManager -> LibraryTranslationKey -> @Override 		public int hashCode();1411473593;{@inheritDoc};@Override_		public int hashCode() {__			final long temp = (this.jobID.hashCode() + this.clientPath.hashCode()) % Integer.MAX_VALUE___			return (int) temp__		};inherit,doc;override,public,int,hash,code,final,long,temp,this,job,id,hash,code,this,client,path,hash,code,integer,return,int,temp
LibraryCacheManager -> private void addLibraryInternal(final JobID jobID, final Path name, final long size, final DataInput in) 			throws IOException;1405024514;Reads a library from the given input stream and adds it to the local library cache. The cache name of_the library is determined by the checksum of the received data and cannot be specified manually.__@param jobID_the ID of the job the library data belongs to_@param name_the name of the library at the clients host_@param size_the size of the library to be read from the input stream_@param in_the data input stream_@throws IOException_thrown if an error occurred while reading the library data from the input stream;private void addLibraryInternal(final JobID jobID, final Path name, final long size, final DataInput in)_			throws IOException {__		if (size > (long) Integer.MAX_VALUE) {_			throw new IOException("Submitted jar file " + name + " is too large")__		}__		_		final byte[] buf = new byte[(int) size]__		in.readFully(buf)___		_		this.md.reset()__		this.md.update(buf)___		_		final String cacheName = StringUtils.byteToHexString(md.digest()) + ".jar"__		final Path storePath = new Path(this.libraryCachePath + "/" + cacheName)___		synchronized (this.fs) {__			_			if (!this.fs.exists(storePath)) {_				final FSDataOutputStream fos = this.fs.create(storePath, false)__				fos.write(buf, 0, buf.length)__				fos.close()__			}_		}__		_		final LibraryTranslationKey key = new LibraryTranslationKey(jobID, name)__		this.clientPathToCacheName.putIfAbsent(key, cacheName)__	};reads,a,library,from,the,given,input,stream,and,adds,it,to,the,local,library,cache,the,cache,name,of,the,library,is,determined,by,the,checksum,of,the,received,data,and,cannot,be,specified,manually,param,job,id,the,id,of,the,job,the,library,data,belongs,to,param,name,the,name,of,the,library,at,the,clients,host,param,size,the,size,of,the,library,to,be,read,from,the,input,stream,param,in,the,data,input,stream,throws,ioexception,thrown,if,an,error,occurred,while,reading,the,library,data,from,the,input,stream;private,void,add,library,internal,final,job,id,job,id,final,path,name,final,long,size,final,data,input,in,throws,ioexception,if,size,long,integer,throw,new,ioexception,submitted,jar,file,name,is,too,large,final,byte,buf,new,byte,int,size,in,read,fully,buf,this,md,reset,this,md,update,buf,final,string,cache,name,string,utils,byte,to,hex,string,md,digest,jar,final,path,store,path,new,path,this,library,cache,path,cache,name,synchronized,this,fs,if,this,fs,exists,store,path,final,fsdata,output,stream,fos,this,fs,create,store,path,false,fos,write,buf,0,buf,length,fos,close,final,library,translation,key,key,new,library,translation,key,job,id,name,this,client,path,to,cache,name,put,if,absent,key,cache,name
LibraryCacheManager -> private void addLibraryInternal(final JobID jobID, final Path name, final long size, final DataInput in) 			throws IOException;1405090423;Reads a library from the given input stream and adds it to the local library cache. The cache name of_the library is determined by the checksum of the received data and cannot be specified manually.__@param jobID_the ID of the job the library data belongs to_@param name_the name of the library at the clients host_@param size_the size of the library to be read from the input stream_@param in_the data input stream_@throws IOException_thrown if an error occurred while reading the library data from the input stream;private void addLibraryInternal(final JobID jobID, final Path name, final long size, final DataInput in)_			throws IOException {__		if (size > (long) Integer.MAX_VALUE) {_			throw new IOException("Submitted jar file " + name + " is too large")__		}__		_		final byte[] buf = new byte[(int) size]__		in.readFully(buf)___		_		this.md.reset()__		this.md.update(buf)___		_		final String cacheName = StringUtils.byteToHexString(md.digest()) + ".jar"__		final Path storePath = new Path(this.libraryCachePath + "/" + cacheName)___		synchronized (this.fs) {__			_			if (!this.fs.exists(storePath)) {_				final FSDataOutputStream fos = this.fs.create(storePath, false)__				fos.write(buf, 0, buf.length)__				fos.close()__			}_		}__		_		final LibraryTranslationKey key = new LibraryTranslationKey(jobID, name)__		this.clientPathToCacheName.putIfAbsent(key, cacheName)__	};reads,a,library,from,the,given,input,stream,and,adds,it,to,the,local,library,cache,the,cache,name,of,the,library,is,determined,by,the,checksum,of,the,received,data,and,cannot,be,specified,manually,param,job,id,the,id,of,the,job,the,library,data,belongs,to,param,name,the,name,of,the,library,at,the,clients,host,param,size,the,size,of,the,library,to,be,read,from,the,input,stream,param,in,the,data,input,stream,throws,ioexception,thrown,if,an,error,occurred,while,reading,the,library,data,from,the,input,stream;private,void,add,library,internal,final,job,id,job,id,final,path,name,final,long,size,final,data,input,in,throws,ioexception,if,size,long,integer,throw,new,ioexception,submitted,jar,file,name,is,too,large,final,byte,buf,new,byte,int,size,in,read,fully,buf,this,md,reset,this,md,update,buf,final,string,cache,name,string,utils,byte,to,hex,string,md,digest,jar,final,path,store,path,new,path,this,library,cache,path,cache,name,synchronized,this,fs,if,this,fs,exists,store,path,final,fsdata,output,stream,fos,this,fs,create,store,path,false,fos,write,buf,0,buf,length,fos,close,final,library,translation,key,key,new,library,translation,key,job,id,name,this,client,path,to,cache,name,put,if,absent,key,cache,name
LibraryCacheManager -> private void addLibraryInternal(final JobID jobID, final Path name, final long size, final DataInput in) 			throws IOException;1411236168;Reads a library from the given input stream and adds it to the local library cache. The cache name of_the library is determined by the checksum of the received data and cannot be specified manually.__@param jobID_the ID of the job the library data belongs to_@param name_the name of the library at the clients host_@param size_the size of the library to be read from the input stream_@param in_the data input stream_@throws IOException_thrown if an error occurred while reading the library data from the input stream;private void addLibraryInternal(final JobID jobID, final Path name, final long size, final DataInput in)_			throws IOException {__		if (size > (long) Integer.MAX_VALUE) {_			throw new IOException("Submitted jar file " + name + " is too large")__		}__		_		final byte[] buf = new byte[(int) size]__		in.readFully(buf)___		_		this.md.reset()__		this.md.update(buf)___		_		final String cacheName = StringUtils.byteToHexString(md.digest()) + ".jar"__		final Path storePath = new Path(this.libraryCachePath + "/" + cacheName)___		synchronized (this.fs) {__			_			if (!this.fs.exists(storePath)) {_				final FSDataOutputStream fos = this.fs.create(storePath, false)__				fos.write(buf, 0, buf.length)__				fos.close()__			}_		}__		_		final LibraryTranslationKey key = new LibraryTranslationKey(jobID, name)__		this.clientPathToCacheName.putIfAbsent(key, cacheName)__	};reads,a,library,from,the,given,input,stream,and,adds,it,to,the,local,library,cache,the,cache,name,of,the,library,is,determined,by,the,checksum,of,the,received,data,and,cannot,be,specified,manually,param,job,id,the,id,of,the,job,the,library,data,belongs,to,param,name,the,name,of,the,library,at,the,clients,host,param,size,the,size,of,the,library,to,be,read,from,the,input,stream,param,in,the,data,input,stream,throws,ioexception,thrown,if,an,error,occurred,while,reading,the,library,data,from,the,input,stream;private,void,add,library,internal,final,job,id,job,id,final,path,name,final,long,size,final,data,input,in,throws,ioexception,if,size,long,integer,throw,new,ioexception,submitted,jar,file,name,is,too,large,final,byte,buf,new,byte,int,size,in,read,fully,buf,this,md,reset,this,md,update,buf,final,string,cache,name,string,utils,byte,to,hex,string,md,digest,jar,final,path,store,path,new,path,this,library,cache,path,cache,name,synchronized,this,fs,if,this,fs,exists,store,path,final,fsdata,output,stream,fos,this,fs,create,store,path,false,fos,write,buf,0,buf,length,fos,close,final,library,translation,key,key,new,library,translation,key,job,id,name,this,client,path,to,cache,name,put,if,absent,key,cache,name
LibraryCacheManager -> private void addLibraryInternal(final JobID jobID, final Path name, final long size, final DataInput in) 			throws IOException;1411236169;Reads a library from the given input stream and adds it to the local library cache. The cache name of_the library is determined by the checksum of the received data and cannot be specified manually.__@param jobID_the ID of the job the library data belongs to_@param name_the name of the library at the clients host_@param size_the size of the library to be read from the input stream_@param in_the data input stream_@throws IOException_thrown if an error occurred while reading the library data from the input stream;private void addLibraryInternal(final JobID jobID, final Path name, final long size, final DataInput in)_			throws IOException {__		if (size > (long) Integer.MAX_VALUE) {_			throw new IOException("Submitted jar file " + name + " is too large")__		}__		_		final byte[] buf = new byte[(int) size]__		in.readFully(buf)___		_		this.md.reset()__		this.md.update(buf)___		_		final String cacheName = StringUtils.byteToHexString(md.digest()) + ".jar"__		final Path storePath = new Path(this.libraryCachePath + "/" + cacheName)___		synchronized (this.fs) {__			_			if (!this.fs.exists(storePath)) {_				final FSDataOutputStream fos = this.fs.create(storePath, false)__				fos.write(buf, 0, buf.length)__				fos.close()__			}_		}__		_		final LibraryTranslationKey key = new LibraryTranslationKey(jobID, name)__		this.clientPathToCacheName.putIfAbsent(key, cacheName)__	};reads,a,library,from,the,given,input,stream,and,adds,it,to,the,local,library,cache,the,cache,name,of,the,library,is,determined,by,the,checksum,of,the,received,data,and,cannot,be,specified,manually,param,job,id,the,id,of,the,job,the,library,data,belongs,to,param,name,the,name,of,the,library,at,the,clients,host,param,size,the,size,of,the,library,to,be,read,from,the,input,stream,param,in,the,data,input,stream,throws,ioexception,thrown,if,an,error,occurred,while,reading,the,library,data,from,the,input,stream;private,void,add,library,internal,final,job,id,job,id,final,path,name,final,long,size,final,data,input,in,throws,ioexception,if,size,long,integer,throw,new,ioexception,submitted,jar,file,name,is,too,large,final,byte,buf,new,byte,int,size,in,read,fully,buf,this,md,reset,this,md,update,buf,final,string,cache,name,string,utils,byte,to,hex,string,md,digest,jar,final,path,store,path,new,path,this,library,cache,path,cache,name,synchronized,this,fs,if,this,fs,exists,store,path,final,fsdata,output,stream,fos,this,fs,create,store,path,false,fos,write,buf,0,buf,length,fos,close,final,library,translation,key,key,new,library,translation,key,job,id,name,this,client,path,to,cache,name,put,if,absent,key,cache,name
LibraryCacheManager -> private void addLibraryInternal(final JobID jobID, final Path name, final long size, final DataInput in) 			throws IOException;1411473593;Reads a library from the given input stream and adds it to the local library cache. The cache name of_the library is determined by the checksum of the received data and cannot be specified manually.__@param jobID_the ID of the job the library data belongs to_@param name_the name of the library at the clients host_@param size_the size of the library to be read from the input stream_@param in_the data input stream_@throws IOException_thrown if an error occurred while reading the library data from the input stream;private void addLibraryInternal(final JobID jobID, final Path name, final long size, final DataInput in)_			throws IOException {__		if (size > (long) Integer.MAX_VALUE) {_			throw new IOException("Submitted jar file " + name + " is too large")__		}__		_		final byte[] buf = new byte[(int) size]__		in.readFully(buf)___		_		this.md.reset()__		this.md.update(buf)___		_		final String cacheName = StringUtils.byteToHexString(md.digest()) + ".jar"__		final Path storePath = new Path(this.libraryCachePath + "/" + cacheName)___		synchronized (this.fs) {__			_			if (!this.fs.exists(storePath)) {_				final FSDataOutputStream fos = this.fs.create(storePath, false)__				fos.write(buf, 0, buf.length)__				fos.close()__			}_		}__		_		final LibraryTranslationKey key = new LibraryTranslationKey(jobID, name)__		this.clientPathToCacheName.putIfAbsent(key, cacheName)__	};reads,a,library,from,the,given,input,stream,and,adds,it,to,the,local,library,cache,the,cache,name,of,the,library,is,determined,by,the,checksum,of,the,received,data,and,cannot,be,specified,manually,param,job,id,the,id,of,the,job,the,library,data,belongs,to,param,name,the,name,of,the,library,at,the,clients,host,param,size,the,size,of,the,library,to,be,read,from,the,input,stream,param,in,the,data,input,stream,throws,ioexception,thrown,if,an,error,occurred,while,reading,the,library,data,from,the,input,stream;private,void,add,library,internal,final,job,id,job,id,final,path,name,final,long,size,final,data,input,in,throws,ioexception,if,size,long,integer,throw,new,ioexception,submitted,jar,file,name,is,too,large,final,byte,buf,new,byte,int,size,in,read,fully,buf,this,md,reset,this,md,update,buf,final,string,cache,name,string,utils,byte,to,hex,string,md,digest,jar,final,path,store,path,new,path,this,library,cache,path,cache,name,synchronized,this,fs,if,this,fs,exists,store,path,final,fsdata,output,stream,fos,this,fs,create,store,path,false,fos,write,buf,0,buf,length,fos,close,final,library,translation,key,key,new,library,translation,key,job,id,name,this,client,path,to,cache,name,put,if,absent,key,cache,name
LibraryCacheManager -> void unregisterJob(JobID id)_;1415043780;Unregisters a job from the library cache manager.__@param id job ID;void unregisterJob(JobID id)_;unregisters,a,job,from,the,library,cache,manager,param,id,job,id;void,unregister,job,job,id,id
LibraryCacheManager -> void unregisterJob(JobID id)_;1427784999;Unregisters a job from the library cache manager.__@param id job ID;void unregisterJob(JobID id)_;unregisters,a,job,from,the,library,cache,manager,param,id,job,id;void,unregister,job,job,id,id
LibraryCacheManager -> void unregisterJob(JobID id)_;1444312509;Unregisters a job from the library cache manager.__@param id job ID;void unregisterJob(JobID id)_;unregisters,a,job,from,the,library,cache,manager,param,id,job,id;void,unregister,job,job,id,id
LibraryCacheManager -> void unregisterJob(JobID id)_;1499173045;Unregisters a job from the library cache manager._<p>_<strong>Note:</strong> this is the counterpart of {@link #registerJob(JobID, Collection,_Collection)} and it will not remove any job task execution added via {@link_#registerTask(JobID, ExecutionAttemptID, Collection, Collection)}!__@param id job ID__@see #registerJob(JobID, Collection, Collection) counterpart of this method;void unregisterJob(JobID id)_;unregisters,a,job,from,the,library,cache,manager,p,strong,note,strong,this,is,the,counterpart,of,link,register,job,job,id,collection,collection,and,it,will,not,remove,any,job,task,execution,added,via,link,register,task,job,id,execution,attempt,id,collection,collection,param,id,job,id,see,register,job,job,id,collection,collection,counterpart,of,this,method;void,unregister,job,job,id,id
LibraryCacheManager -> void unregisterJob(JobID id)_;1502201311;Unregisters a job from the library cache manager._<p>_<strong>Note:</strong> this is the counterpart of {@link #registerJob(JobID, Collection,_Collection)} and it will not remove any job task execution added via {@link_#registerTask(JobID, ExecutionAttemptID, Collection, Collection)}!__@param id job ID__@see #registerJob(JobID, Collection, Collection) counterpart of this method;void unregisterJob(JobID id)_;unregisters,a,job,from,the,library,cache,manager,p,strong,note,strong,this,is,the,counterpart,of,link,register,job,job,id,collection,collection,and,it,will,not,remove,any,job,task,execution,added,via,link,register,task,job,id,execution,attempt,id,collection,collection,param,id,job,id,see,register,job,job,id,collection,collection,counterpart,of,this,method;void,unregister,job,job,id,id
LibraryCacheManager -> void unregisterJob(JobID id)_;1503041372;Unregisters a job from the library cache manager._<p>_<strong>Note:</strong> this is the counterpart of {@link #registerJob(JobID, Collection,_Collection)} and it will not remove any job task execution added via {@link_#registerTask(JobID, ExecutionAttemptID, Collection, Collection)}!__@param id job ID__@see #registerJob(JobID, Collection, Collection) counterpart of this method;void unregisterJob(JobID id)_;unregisters,a,job,from,the,library,cache,manager,p,strong,note,strong,this,is,the,counterpart,of,link,register,job,job,id,collection,collection,and,it,will,not,remove,any,job,task,execution,added,via,link,register,task,job,id,execution,attempt,id,collection,collection,param,id,job,id,see,register,job,job,id,collection,collection,counterpart,of,this,method;void,unregister,job,job,id,id
LibraryCacheManager -> void unregisterJob(JobID id)_;1507212387;Unregisters a job from the library cache manager._<p>_<strong>Note:</strong> this is the counterpart of {@link #registerJob(JobID, Collection,_Collection)} and it will not remove any job task execution added via {@link_#registerTask(JobID, ExecutionAttemptID, Collection, Collection)}!__@param id job ID__@see #registerJob(JobID, Collection, Collection) counterpart of this method;void unregisterJob(JobID id)_;unregisters,a,job,from,the,library,cache,manager,p,strong,note,strong,this,is,the,counterpart,of,link,register,job,job,id,collection,collection,and,it,will,not,remove,any,job,task,execution,added,via,link,register,task,job,id,execution,attempt,id,collection,collection,param,id,job,id,see,register,job,job,id,collection,collection,counterpart,of,this,method;void,unregister,job,job,id,id
LibraryCacheManager -> void unregisterJob(JobID id)_;1526549506;Unregisters a job from the library cache manager._<p>_<strong>Note:</strong> this is the counterpart of {@link #registerJob(JobID, Collection,_Collection)} and it will not remove any job task execution added via {@link_#registerTask(JobID, ExecutionAttemptID, Collection, Collection)}!__@param id job ID__@see #registerJob(JobID, Collection, Collection) counterpart of this method;void unregisterJob(JobID id)_;unregisters,a,job,from,the,library,cache,manager,p,strong,note,strong,this,is,the,counterpart,of,link,register,job,job,id,collection,collection,and,it,will,not,remove,any,job,task,execution,added,via,link,register,task,job,id,execution,attempt,id,collection,collection,param,id,job,id,see,register,job,job,id,collection,collection,counterpart,of,this,method;void,unregister,job,job,id,id
LibraryCacheManager -> private void registerInternal(final JobID id, final String[] requiredJarFiles) throws IOException;1405024514;Registers a job ID with a set of library paths that are required to run the job. For every registered_job the library cache manager creates a class loader that is used to instantiate the vertex's environment later_on.__@param id_the ID of the job to be registered._@param clientPaths_the client path's of the required libraries_@throws IOException_thrown if one of the requested libraries is not in the cache;private void registerInternal(final JobID id, final String[] requiredJarFiles) throws IOException {__		_		while (this.lockMap.putIfAbsent(id, LOCK_OBJECT) != null)___		try {_			if (incrementReferenceCounter(id) > 1) {_				return__			}__			_			if (this.libraryManagerEntries.containsKey(id)) {_				throw new IllegalStateException("Library cache manager already contains entry for job ID " + id)__			}__			_			URL[] urls = null__			if (requiredJarFiles != null) {__				urls = new URL[requiredJarFiles.length]___				for (int i = 0_ i < requiredJarFiles.length_ i++) {_					final Path p = contains(requiredJarFiles[i])__					if (p == null) {_						throw new IOException(requiredJarFiles[i] + " does not exist in the library cache")__					}__					_					try {_						urls[i] = p.toUri().toURL()__					} catch (MalformedURLException e) {_						throw new IOException(StringUtils.stringifyException(e))__					}_				}_			}__			final LibraryManagerEntry entry = new LibraryManagerEntry(id, requiredJarFiles, urls)___			this.libraryManagerEntries.put(id, entry)___		} finally {_			this.lockMap.remove(id)__		}_	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,vertex,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,client,paths,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,one,of,the,requested,libraries,is,not,in,the,cache;private,void,register,internal,final,job,id,id,final,string,required,jar,files,throws,ioexception,while,this,lock,map,put,if,absent,id,null,try,if,increment,reference,counter,id,1,return,if,this,library,manager,entries,contains,key,id,throw,new,illegal,state,exception,library,cache,manager,already,contains,entry,for,job,id,id,url,urls,null,if,required,jar,files,null,urls,new,url,required,jar,files,length,for,int,i,0,i,required,jar,files,length,i,final,path,p,contains,required,jar,files,i,if,p,null,throw,new,ioexception,required,jar,files,i,does,not,exist,in,the,library,cache,try,urls,i,p,to,uri,to,url,catch,malformed,urlexception,e,throw,new,ioexception,string,utils,stringify,exception,e,final,library,manager,entry,entry,new,library,manager,entry,id,required,jar,files,urls,this,library,manager,entries,put,id,entry,finally,this,lock,map,remove,id
LibraryCacheManager -> private void registerInternal(final JobID id, final String[] requiredJarFiles) throws IOException;1405090423;Registers a job ID with a set of library paths that are required to run the job. For every registered_job the library cache manager creates a class loader that is used to instantiate the vertex's environment later_on.__@param id_the ID of the job to be registered._@param clientPaths_the client path's of the required libraries_@throws IOException_thrown if one of the requested libraries is not in the cache;private void registerInternal(final JobID id, final String[] requiredJarFiles) throws IOException {__		_		while (this.lockMap.putIfAbsent(id, LOCK_OBJECT) != null)___		try {_			if (incrementReferenceCounter(id) > 1) {_				return__			}__			_			if (this.libraryManagerEntries.containsKey(id)) {_				throw new IllegalStateException("Library cache manager already contains entry for job ID " + id)__			}__			_			URL[] urls = null__			if (requiredJarFiles != null) {__				urls = new URL[requiredJarFiles.length]___				for (int i = 0_ i < requiredJarFiles.length_ i++) {_					final Path p = contains(requiredJarFiles[i])__					if (p == null) {_						throw new IOException(requiredJarFiles[i] + " does not exist in the library cache")__					}__					_					try {_						urls[i] = p.toUri().toURL()__					} catch (MalformedURLException e) {_						throw new IOException(StringUtils.stringifyException(e))__					}_				}_			}__			final LibraryManagerEntry entry = new LibraryManagerEntry(id, requiredJarFiles, urls)___			this.libraryManagerEntries.put(id, entry)___		} finally {_			this.lockMap.remove(id)__		}_	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,vertex,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,client,paths,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,one,of,the,requested,libraries,is,not,in,the,cache;private,void,register,internal,final,job,id,id,final,string,required,jar,files,throws,ioexception,while,this,lock,map,put,if,absent,id,null,try,if,increment,reference,counter,id,1,return,if,this,library,manager,entries,contains,key,id,throw,new,illegal,state,exception,library,cache,manager,already,contains,entry,for,job,id,id,url,urls,null,if,required,jar,files,null,urls,new,url,required,jar,files,length,for,int,i,0,i,required,jar,files,length,i,final,path,p,contains,required,jar,files,i,if,p,null,throw,new,ioexception,required,jar,files,i,does,not,exist,in,the,library,cache,try,urls,i,p,to,uri,to,url,catch,malformed,urlexception,e,throw,new,ioexception,string,utils,stringify,exception,e,final,library,manager,entry,entry,new,library,manager,entry,id,required,jar,files,urls,this,library,manager,entries,put,id,entry,finally,this,lock,map,remove,id
LibraryCacheManager -> private void registerInternal(final JobID id, final String[] requiredJarFiles) throws IOException;1411236168;Registers a job ID with a set of library paths that are required to run the job. For every registered_job the library cache manager creates a class loader that is used to instantiate the vertex's environment later_on.__@param id_the ID of the job to be registered._@param requiredJarFiles_the client path's of the required libraries_@throws IOException_thrown if one of the requested libraries is not in the cache;private void registerInternal(final JobID id, final String[] requiredJarFiles) throws IOException {__		_		while (this.lockMap.putIfAbsent(id, LOCK_OBJECT) != null)___		try {_			if (incrementReferenceCounter(id) > 1) {_				return__			}__			_			if (this.libraryManagerEntries.containsKey(id)) {_				throw new IllegalStateException("Library cache manager already contains entry for job ID " + id)__			}__			_			URL[] urls = null__			if (requiredJarFiles != null) {__				urls = new URL[requiredJarFiles.length]___				for (int i = 0_ i < requiredJarFiles.length_ i++) {_					final Path p = contains(requiredJarFiles[i])__					if (p == null) {_						throw new IOException(requiredJarFiles[i] + " does not exist in the library cache")__					}__					_					try {_						urls[i] = p.toUri().toURL()__					} catch (MalformedURLException e) {_						throw new IOException(StringUtils.stringifyException(e))__					}_				}_			}__			final LibraryManagerEntry entry = new LibraryManagerEntry(id, requiredJarFiles, urls)___			this.libraryManagerEntries.put(id, entry)___		} finally {_			this.lockMap.remove(id)__		}_	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,vertex,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,required,jar,files,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,one,of,the,requested,libraries,is,not,in,the,cache;private,void,register,internal,final,job,id,id,final,string,required,jar,files,throws,ioexception,while,this,lock,map,put,if,absent,id,null,try,if,increment,reference,counter,id,1,return,if,this,library,manager,entries,contains,key,id,throw,new,illegal,state,exception,library,cache,manager,already,contains,entry,for,job,id,id,url,urls,null,if,required,jar,files,null,urls,new,url,required,jar,files,length,for,int,i,0,i,required,jar,files,length,i,final,path,p,contains,required,jar,files,i,if,p,null,throw,new,ioexception,required,jar,files,i,does,not,exist,in,the,library,cache,try,urls,i,p,to,uri,to,url,catch,malformed,urlexception,e,throw,new,ioexception,string,utils,stringify,exception,e,final,library,manager,entry,entry,new,library,manager,entry,id,required,jar,files,urls,this,library,manager,entries,put,id,entry,finally,this,lock,map,remove,id
LibraryCacheManager -> private void registerInternal(final JobID id, final String[] requiredJarFiles) throws IOException;1411236169;Registers a job ID with a set of library paths that are required to run the job. For every registered_job the library cache manager creates a class loader that is used to instantiate the vertex's environment later_on.__@param id_the ID of the job to be registered._@param requiredJarFiles_the client path's of the required libraries_@throws IOException_thrown if one of the requested libraries is not in the cache;private void registerInternal(final JobID id, final String[] requiredJarFiles) throws IOException {__		_		while (this.lockMap.putIfAbsent(id, LOCK_OBJECT) != null)___		try {_			if (incrementReferenceCounter(id) > 1) {_				return__			}__			_			if (this.libraryManagerEntries.containsKey(id)) {_				throw new IllegalStateException("Library cache manager already contains entry for job ID " + id)__			}__			_			URL[] urls = null__			if (requiredJarFiles != null) {__				urls = new URL[requiredJarFiles.length]___				for (int i = 0_ i < requiredJarFiles.length_ i++) {_					final Path p = contains(requiredJarFiles[i])__					if (p == null) {_						throw new IOException(requiredJarFiles[i] + " does not exist in the library cache")__					}__					_					try {_						urls[i] = p.toUri().toURL()__					} catch (MalformedURLException e) {_						throw new IOException(StringUtils.stringifyException(e))__					}_				}_			}__			final LibraryManagerEntry entry = new LibraryManagerEntry(id, requiredJarFiles, urls)___			this.libraryManagerEntries.put(id, entry)___		} finally {_			this.lockMap.remove(id)__		}_	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,vertex,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,required,jar,files,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,one,of,the,requested,libraries,is,not,in,the,cache;private,void,register,internal,final,job,id,id,final,string,required,jar,files,throws,ioexception,while,this,lock,map,put,if,absent,id,null,try,if,increment,reference,counter,id,1,return,if,this,library,manager,entries,contains,key,id,throw,new,illegal,state,exception,library,cache,manager,already,contains,entry,for,job,id,id,url,urls,null,if,required,jar,files,null,urls,new,url,required,jar,files,length,for,int,i,0,i,required,jar,files,length,i,final,path,p,contains,required,jar,files,i,if,p,null,throw,new,ioexception,required,jar,files,i,does,not,exist,in,the,library,cache,try,urls,i,p,to,uri,to,url,catch,malformed,urlexception,e,throw,new,ioexception,string,utils,stringify,exception,e,final,library,manager,entry,entry,new,library,manager,entry,id,required,jar,files,urls,this,library,manager,entries,put,id,entry,finally,this,lock,map,remove,id
LibraryCacheManager -> private void registerInternal(final JobID id, final String[] requiredJarFiles) throws IOException;1411473593;Registers a job ID with a set of library paths that are required to run the job. For every registered_job the library cache manager creates a class loader that is used to instantiate the vertex's environment later_on.__@param id_the ID of the job to be registered._@param requiredJarFiles_the client path's of the required libraries_@throws IOException_thrown if one of the requested libraries is not in the cache;private void registerInternal(final JobID id, final String[] requiredJarFiles) throws IOException {__		_		while (this.lockMap.putIfAbsent(id, LOCK_OBJECT) != null)___		try {_			if (incrementReferenceCounter(id) > 1) {_				return__			}__			_			if (this.libraryManagerEntries.containsKey(id)) {_				throw new IllegalStateException("Library cache manager already contains entry for job ID " + id)__			}__			_			URL[] urls = null__			if (requiredJarFiles != null) {__				urls = new URL[requiredJarFiles.length]___				for (int i = 0_ i < requiredJarFiles.length_ i++) {_					final Path p = contains(requiredJarFiles[i])__					if (p == null) {_						throw new IOException(requiredJarFiles[i] + " does not exist in the library cache")__					}__					_					try {_						urls[i] = p.toUri().toURL()__					} catch (MalformedURLException e) {_						throw new IOException(StringUtils.stringifyException(e))__					}_				}_			}__			final LibraryManagerEntry entry = new LibraryManagerEntry(id, requiredJarFiles, urls)___			this.libraryManagerEntries.put(id, entry)___		} finally {_			this.lockMap.remove(id)__		}_	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,vertex,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,required,jar,files,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,one,of,the,requested,libraries,is,not,in,the,cache;private,void,register,internal,final,job,id,id,final,string,required,jar,files,throws,ioexception,while,this,lock,map,put,if,absent,id,null,try,if,increment,reference,counter,id,1,return,if,this,library,manager,entries,contains,key,id,throw,new,illegal,state,exception,library,cache,manager,already,contains,entry,for,job,id,id,url,urls,null,if,required,jar,files,null,urls,new,url,required,jar,files,length,for,int,i,0,i,required,jar,files,length,i,final,path,p,contains,required,jar,files,i,if,p,null,throw,new,ioexception,required,jar,files,i,does,not,exist,in,the,library,cache,try,urls,i,p,to,uri,to,url,catch,malformed,urlexception,e,throw,new,ioexception,string,utils,stringify,exception,e,final,library,manager,entry,entry,new,library,manager,entry,id,required,jar,files,urls,this,library,manager,entries,put,id,entry,finally,this,lock,map,remove,id
LibraryCacheManager -> LibraryManagerEntry -> public ClassLoader getClassLoader();1405024514;Returns the class loader associated with this library manager entry.__@return the class loader associated with this library manager entry;public ClassLoader getClassLoader() {_			return this.classLoader__		};returns,the,class,loader,associated,with,this,library,manager,entry,return,the,class,loader,associated,with,this,library,manager,entry;public,class,loader,get,class,loader,return,this,class,loader
LibraryCacheManager -> LibraryManagerEntry -> public ClassLoader getClassLoader();1405090423;Returns the class loader associated with this library manager entry.__@return the class loader associated with this library manager entry;public ClassLoader getClassLoader() {_			return this.classLoader__		};returns,the,class,loader,associated,with,this,library,manager,entry,return,the,class,loader,associated,with,this,library,manager,entry;public,class,loader,get,class,loader,return,this,class,loader
LibraryCacheManager -> LibraryManagerEntry -> public ClassLoader getClassLoader();1411236168;Returns the class loader associated with this library manager entry.__@return the class loader associated with this library manager entry;public ClassLoader getClassLoader() {_			return this.classLoader__		};returns,the,class,loader,associated,with,this,library,manager,entry,return,the,class,loader,associated,with,this,library,manager,entry;public,class,loader,get,class,loader,return,this,class,loader
LibraryCacheManager -> LibraryManagerEntry -> public ClassLoader getClassLoader();1411236169;Returns the class loader associated with this library manager entry.__@return the class loader associated with this library manager entry;public ClassLoader getClassLoader() {_			return this.classLoader__		};returns,the,class,loader,associated,with,this,library,manager,entry,return,the,class,loader,associated,with,this,library,manager,entry;public,class,loader,get,class,loader,return,this,class,loader
LibraryCacheManager -> LibraryManagerEntry -> public ClassLoader getClassLoader();1411473593;Returns the class loader associated with this library manager entry.__@return the class loader associated with this library manager entry;public ClassLoader getClassLoader() {_			return this.classLoader__		};returns,the,class,loader,associated,with,this,library,manager,entry,return,the,class,loader,associated,with,this,library,manager,entry;public,class,loader,get,class,loader,return,this,class,loader
LibraryCacheManager -> public static ClassLoader getClassLoader(final JobID id) throws IOException;1405024514;Returns the class loader to the specified vertex.__@param id_the ID of the job to return the class loader for_@return the class loader of requested vertex or <code>null</code> if no class loader has been registered with the_given ID._@throws IOException_thrown if the library cache manager could not be instantiated;public static ClassLoader getClassLoader(final JobID id) throws IOException {__		if (id == null) {_			return null__		}__		final LibraryCacheManager lib = get()__		return lib.getClassLoaderInternal(id)__	};returns,the,class,loader,to,the,specified,vertex,param,id,the,id,of,the,job,to,return,the,class,loader,for,return,the,class,loader,of,requested,vertex,or,code,null,code,if,no,class,loader,has,been,registered,with,the,given,id,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,class,loader,get,class,loader,final,job,id,id,throws,ioexception,if,id,null,return,null,final,library,cache,manager,lib,get,return,lib,get,class,loader,internal,id
LibraryCacheManager -> public static ClassLoader getClassLoader(final JobID id) throws IOException;1405090423;Returns the class loader to the specified vertex.__@param id_the ID of the job to return the class loader for_@return the class loader of requested vertex or <code>null</code> if no class loader has been registered with the_given ID._@throws IOException_thrown if the library cache manager could not be instantiated;public static ClassLoader getClassLoader(final JobID id) throws IOException {__		if (id == null) {_			return null__		}__		final LibraryCacheManager lib = get()__		return lib.getClassLoaderInternal(id)__	};returns,the,class,loader,to,the,specified,vertex,param,id,the,id,of,the,job,to,return,the,class,loader,for,return,the,class,loader,of,requested,vertex,or,code,null,code,if,no,class,loader,has,been,registered,with,the,given,id,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,class,loader,get,class,loader,final,job,id,id,throws,ioexception,if,id,null,return,null,final,library,cache,manager,lib,get,return,lib,get,class,loader,internal,id
LibraryCacheManager -> public static ClassLoader getClassLoader(final JobID id) throws IOException;1411236168;Returns the class loader to the specified vertex.__@param id_the ID of the job to return the class loader for_@return the class loader of requested vertex or <code>null</code> if no class loader has been registered with the_given ID._@throws IOException_thrown if the library cache manager could not be instantiated;public static ClassLoader getClassLoader(final JobID id) throws IOException {__		if (id == null) {_			return null__		}__		final LibraryCacheManager lib = get()__		return lib.getClassLoaderInternal(id)__	};returns,the,class,loader,to,the,specified,vertex,param,id,the,id,of,the,job,to,return,the,class,loader,for,return,the,class,loader,of,requested,vertex,or,code,null,code,if,no,class,loader,has,been,registered,with,the,given,id,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,class,loader,get,class,loader,final,job,id,id,throws,ioexception,if,id,null,return,null,final,library,cache,manager,lib,get,return,lib,get,class,loader,internal,id
LibraryCacheManager -> public static ClassLoader getClassLoader(final JobID id) throws IOException;1411236169;Returns the class loader to the specified vertex.__@param id_the ID of the job to return the class loader for_@return the class loader of requested vertex or <code>null</code> if no class loader has been registered with the_given ID._@throws IOException_thrown if the library cache manager could not be instantiated;public static ClassLoader getClassLoader(final JobID id) throws IOException {__		if (id == null) {_			return null__		}__		final LibraryCacheManager lib = get()__		return lib.getClassLoaderInternal(id)__	};returns,the,class,loader,to,the,specified,vertex,param,id,the,id,of,the,job,to,return,the,class,loader,for,return,the,class,loader,of,requested,vertex,or,code,null,code,if,no,class,loader,has,been,registered,with,the,given,id,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,class,loader,get,class,loader,final,job,id,id,throws,ioexception,if,id,null,return,null,final,library,cache,manager,lib,get,return,lib,get,class,loader,internal,id
LibraryCacheManager -> public static ClassLoader getClassLoader(final JobID id) throws IOException;1411473593;Returns the class loader to the specified vertex.__@param id_the ID of the job to return the class loader for_@return the class loader of requested vertex or <code>null</code> if no class loader has been registered with the_given ID._@throws IOException_thrown if the library cache manager could not be instantiated;public static ClassLoader getClassLoader(final JobID id) throws IOException {__		if (id == null) {_			return null__		}__		final LibraryCacheManager lib = get()__		return lib.getClassLoaderInternal(id)__	};returns,the,class,loader,to,the,specified,vertex,param,id,the,id,of,the,job,to,return,the,class,loader,for,return,the,class,loader,of,requested,vertex,or,code,null,code,if,no,class,loader,has,been,registered,with,the,given,id,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,class,loader,get,class,loader,final,job,id,id,throws,ioexception,if,id,null,return,null,final,library,cache,manager,lib,get,return,lib,get,class,loader,internal,id
LibraryCacheManager -> void unregisterTask(JobID id, ExecutionAttemptID execution)_;1415043780;Unregisters a job from the library cache manager.__@param id job ID;void unregisterTask(JobID id, ExecutionAttemptID execution)_;unregisters,a,job,from,the,library,cache,manager,param,id,job,id;void,unregister,task,job,id,id,execution,attempt,id,execution
LibraryCacheManager -> void unregisterTask(JobID id, ExecutionAttemptID execution)_;1427784999;Unregisters a job from the library cache manager.__@param id job ID;void unregisterTask(JobID id, ExecutionAttemptID execution)_;unregisters,a,job,from,the,library,cache,manager,param,id,job,id;void,unregister,task,job,id,id,execution,attempt,id,execution
LibraryCacheManager -> void unregisterTask(JobID id, ExecutionAttemptID execution)_;1444312509;Unregisters a job from the library cache manager.__@param id job ID;void unregisterTask(JobID id, ExecutionAttemptID execution)_;unregisters,a,job,from,the,library,cache,manager,param,id,job,id;void,unregister,task,job,id,id,execution,attempt,id,execution
LibraryCacheManager -> void unregisterTask(JobID id, ExecutionAttemptID execution)_;1499173045;Unregisters a job task execution from the library cache manager._<p>_<strong>Note:</strong> this is the counterpart of {@link #registerTask(JobID,_ExecutionAttemptID, Collection, Collection)} and it will not remove any job added via_{@link #registerJob(JobID, Collection, Collection)}!__@param id job ID__@see #registerTask(JobID, ExecutionAttemptID, Collection, Collection) counterpart of this method;void unregisterTask(JobID id, ExecutionAttemptID execution)_;unregisters,a,job,task,execution,from,the,library,cache,manager,p,strong,note,strong,this,is,the,counterpart,of,link,register,task,job,id,execution,attempt,id,collection,collection,and,it,will,not,remove,any,job,added,via,link,register,job,job,id,collection,collection,param,id,job,id,see,register,task,job,id,execution,attempt,id,collection,collection,counterpart,of,this,method;void,unregister,task,job,id,id,execution,attempt,id,execution
LibraryCacheManager -> void unregisterTask(JobID id, ExecutionAttemptID execution)_;1502201311;Unregisters a job task execution from the library cache manager._<p>_<strong>Note:</strong> this is the counterpart of {@link #registerTask(JobID,_ExecutionAttemptID, Collection, Collection)} and it will not remove any job added via_{@link #registerJob(JobID, Collection, Collection)}!__@param id job ID__@see #registerTask(JobID, ExecutionAttemptID, Collection, Collection) counterpart of this method;void unregisterTask(JobID id, ExecutionAttemptID execution)_;unregisters,a,job,task,execution,from,the,library,cache,manager,p,strong,note,strong,this,is,the,counterpart,of,link,register,task,job,id,execution,attempt,id,collection,collection,and,it,will,not,remove,any,job,added,via,link,register,job,job,id,collection,collection,param,id,job,id,see,register,task,job,id,execution,attempt,id,collection,collection,counterpart,of,this,method;void,unregister,task,job,id,id,execution,attempt,id,execution
LibraryCacheManager -> void unregisterTask(JobID id, ExecutionAttemptID execution)_;1503041372;Unregisters a job task execution from the library cache manager._<p>_<strong>Note:</strong> this is the counterpart of {@link #registerTask(JobID,_ExecutionAttemptID, Collection, Collection)} and it will not remove any job added via_{@link #registerJob(JobID, Collection, Collection)}!__@param id job ID__@see #registerTask(JobID, ExecutionAttemptID, Collection, Collection) counterpart of this method;void unregisterTask(JobID id, ExecutionAttemptID execution)_;unregisters,a,job,task,execution,from,the,library,cache,manager,p,strong,note,strong,this,is,the,counterpart,of,link,register,task,job,id,execution,attempt,id,collection,collection,and,it,will,not,remove,any,job,added,via,link,register,job,job,id,collection,collection,param,id,job,id,see,register,task,job,id,execution,attempt,id,collection,collection,counterpart,of,this,method;void,unregister,task,job,id,id,execution,attempt,id,execution
LibraryCacheManager -> void unregisterTask(JobID id, ExecutionAttemptID execution)_;1507212387;Unregisters a job task execution from the library cache manager._<p>_<strong>Note:</strong> this is the counterpart of {@link #registerTask(JobID,_ExecutionAttemptID, Collection, Collection)} and it will not remove any job added via_{@link #registerJob(JobID, Collection, Collection)}!__@param id job ID__@see #registerTask(JobID, ExecutionAttemptID, Collection, Collection) counterpart of this method;void unregisterTask(JobID id, ExecutionAttemptID execution)_;unregisters,a,job,task,execution,from,the,library,cache,manager,p,strong,note,strong,this,is,the,counterpart,of,link,register,task,job,id,execution,attempt,id,collection,collection,and,it,will,not,remove,any,job,added,via,link,register,job,job,id,collection,collection,param,id,job,id,see,register,task,job,id,execution,attempt,id,collection,collection,counterpart,of,this,method;void,unregister,task,job,id,id,execution,attempt,id,execution
LibraryCacheManager -> void unregisterTask(JobID id, ExecutionAttemptID execution)_;1526549506;Unregisters a job task execution from the library cache manager._<p>_<strong>Note:</strong> this is the counterpart of {@link #registerTask(JobID,_ExecutionAttemptID, Collection, Collection)} and it will not remove any job added via_{@link #registerJob(JobID, Collection, Collection)}!__@param id job ID__@see #registerTask(JobID, ExecutionAttemptID, Collection, Collection) counterpart of this method;void unregisterTask(JobID id, ExecutionAttemptID execution)_;unregisters,a,job,task,execution,from,the,library,cache,manager,p,strong,note,strong,this,is,the,counterpart,of,link,register,task,job,id,execution,attempt,id,collection,collection,and,it,will,not,remove,any,job,added,via,link,register,job,job,id,collection,collection,param,id,job,id,see,register,task,job,id,execution,attempt,id,collection,collection,counterpart,of,this,method;void,unregister,task,job,id,id,execution,attempt,id,execution
LibraryCacheManager -> public static Path contains(final String cacheName) throws IOException;1405024514;Checks if the given library is in the local cache.__@param cacheName_The name of the library to be checked for._@return the path object of the library if it is cached, <code>null</code> otherwise_@throws IOException_thrown if the library cache manager could not be instantiated or no access to the file system could be_obtained;public static Path contains(final String cacheName) throws IOException {__		final LibraryCacheManager lib = get()__		return lib.containsInternal(cacheName)__	};checks,if,the,given,library,is,in,the,local,cache,param,cache,name,the,name,of,the,library,to,be,checked,for,return,the,path,object,of,the,library,if,it,is,cached,code,null,code,otherwise,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,no,access,to,the,file,system,could,be,obtained;public,static,path,contains,final,string,cache,name,throws,ioexception,final,library,cache,manager,lib,get,return,lib,contains,internal,cache,name
LibraryCacheManager -> public static Path contains(final String cacheName) throws IOException;1405090423;Checks if the given library is in the local cache.__@param cacheName_The name of the library to be checked for._@return the path object of the library if it is cached, <code>null</code> otherwise_@throws IOException_thrown if the library cache manager could not be instantiated or no access to the file system could be_obtained;public static Path contains(final String cacheName) throws IOException {__		final LibraryCacheManager lib = get()__		return lib.containsInternal(cacheName)__	};checks,if,the,given,library,is,in,the,local,cache,param,cache,name,the,name,of,the,library,to,be,checked,for,return,the,path,object,of,the,library,if,it,is,cached,code,null,code,otherwise,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,no,access,to,the,file,system,could,be,obtained;public,static,path,contains,final,string,cache,name,throws,ioexception,final,library,cache,manager,lib,get,return,lib,contains,internal,cache,name
LibraryCacheManager -> public static Path contains(final String cacheName) throws IOException;1411236168;Checks if the given library is in the local cache.__@param cacheName_The name of the library to be checked for._@return the path object of the library if it is cached, <code>null</code> otherwise_@throws IOException_thrown if the library cache manager could not be instantiated or no access to the file system could be_obtained;public static Path contains(final String cacheName) throws IOException {__		final LibraryCacheManager lib = get()__		return lib.containsInternal(cacheName)__	};checks,if,the,given,library,is,in,the,local,cache,param,cache,name,the,name,of,the,library,to,be,checked,for,return,the,path,object,of,the,library,if,it,is,cached,code,null,code,otherwise,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,no,access,to,the,file,system,could,be,obtained;public,static,path,contains,final,string,cache,name,throws,ioexception,final,library,cache,manager,lib,get,return,lib,contains,internal,cache,name
LibraryCacheManager -> public static Path contains(final String cacheName) throws IOException;1411236169;Checks if the given library is in the local cache.__@param cacheName_The name of the library to be checked for._@return the path object of the library if it is cached, <code>null</code> otherwise_@throws IOException_thrown if the library cache manager could not be instantiated or no access to the file system could be_obtained;public static Path contains(final String cacheName) throws IOException {__		final LibraryCacheManager lib = get()__		return lib.containsInternal(cacheName)__	};checks,if,the,given,library,is,in,the,local,cache,param,cache,name,the,name,of,the,library,to,be,checked,for,return,the,path,object,of,the,library,if,it,is,cached,code,null,code,otherwise,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,no,access,to,the,file,system,could,be,obtained;public,static,path,contains,final,string,cache,name,throws,ioexception,final,library,cache,manager,lib,get,return,lib,contains,internal,cache,name
LibraryCacheManager -> public static Path contains(final String cacheName) throws IOException;1411473593;Checks if the given library is in the local cache.__@param cacheName_The name of the library to be checked for._@return the path object of the library if it is cached, <code>null</code> otherwise_@throws IOException_thrown if the library cache manager could not be instantiated or no access to the file system could be_obtained;public static Path contains(final String cacheName) throws IOException {__		final LibraryCacheManager lib = get()__		return lib.containsInternal(cacheName)__	};checks,if,the,given,library,is,in,the,local,cache,param,cache,name,the,name,of,the,library,to,be,checked,for,return,the,path,object,of,the,library,if,it,is,cached,code,null,code,otherwise,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,no,access,to,the,file,system,could,be,obtained;public,static,path,contains,final,string,cache,name,throws,ioexception,final,library,cache,manager,lib,get,return,lib,contains,internal,cache,name
LibraryCacheManager -> void registerTask(JobID id, ExecutionAttemptID execution, Collection<BlobKey> requiredJarFiles) throws IOException_;1415043780;Registers a job task execution with its required jar files. The jar files are identified by their blob keys.__@param id job ID_@param requiredJarFiles collection of blob keys identifying the required jar files_@throws IOException;void registerTask(JobID id, ExecutionAttemptID execution, Collection<BlobKey> requiredJarFiles) throws IOException_;registers,a,job,task,execution,with,its,required,jar,files,the,jar,files,are,identified,by,their,blob,keys,param,id,job,id,param,required,jar,files,collection,of,blob,keys,identifying,the,required,jar,files,throws,ioexception;void,register,task,job,id,id,execution,attempt,id,execution,collection,blob,key,required,jar,files,throws,ioexception
LibraryCacheManager -> void registerTask(JobID id, ExecutionAttemptID execution, Collection<BlobKey> requiredJarFiles) throws IOException_;1427784999;Registers a job task execution with its required jar files. The jar files are identified by their blob keys.__@param id job ID_@param requiredJarFiles collection of blob keys identifying the required jar files_@throws IOException;void registerTask(JobID id, ExecutionAttemptID execution, Collection<BlobKey> requiredJarFiles) throws IOException_;registers,a,job,task,execution,with,its,required,jar,files,the,jar,files,are,identified,by,their,blob,keys,param,id,job,id,param,required,jar,files,collection,of,blob,keys,identifying,the,required,jar,files,throws,ioexception;void,register,task,job,id,id,execution,attempt,id,execution,collection,blob,key,required,jar,files,throws,ioexception
LibraryCacheManager -> LibraryManagerEntry -> public String[] getRequiredJarFiles();1405024514;Returns a (possibly empty) array of library names required by the associated job vertex to run.__@return a (possibly empty) array of library names required by the associated job vertex to run;public String[] getRequiredJarFiles() {_			return this.requiredJarFiles__		};returns,a,possibly,empty,array,of,library,names,required,by,the,associated,job,vertex,to,run,return,a,possibly,empty,array,of,library,names,required,by,the,associated,job,vertex,to,run;public,string,get,required,jar,files,return,this,required,jar,files
LibraryCacheManager -> LibraryManagerEntry -> public String[] getRequiredJarFiles();1405090423;Returns a (possibly empty) array of library names required by the associated job vertex to run.__@return a (possibly empty) array of library names required by the associated job vertex to run;public String[] getRequiredJarFiles() {_			return this.requiredJarFiles__		};returns,a,possibly,empty,array,of,library,names,required,by,the,associated,job,vertex,to,run,return,a,possibly,empty,array,of,library,names,required,by,the,associated,job,vertex,to,run;public,string,get,required,jar,files,return,this,required,jar,files
LibraryCacheManager -> LibraryManagerEntry -> public String[] getRequiredJarFiles();1411236168;Returns a (possibly empty) array of library names required by the associated job vertex to run.__@return a (possibly empty) array of library names required by the associated job vertex to run;public String[] getRequiredJarFiles() {_			return this.requiredJarFiles__		};returns,a,possibly,empty,array,of,library,names,required,by,the,associated,job,vertex,to,run,return,a,possibly,empty,array,of,library,names,required,by,the,associated,job,vertex,to,run;public,string,get,required,jar,files,return,this,required,jar,files
LibraryCacheManager -> LibraryManagerEntry -> public String[] getRequiredJarFiles();1411236169;Returns a (possibly empty) array of library names required by the associated job vertex to run.__@return a (possibly empty) array of library names required by the associated job vertex to run;public String[] getRequiredJarFiles() {_			return this.requiredJarFiles__		};returns,a,possibly,empty,array,of,library,names,required,by,the,associated,job,vertex,to,run,return,a,possibly,empty,array,of,library,names,required,by,the,associated,job,vertex,to,run;public,string,get,required,jar,files,return,this,required,jar,files
LibraryCacheManager -> LibraryManagerEntry -> public String[] getRequiredJarFiles();1411473593;Returns a (possibly empty) array of library names required by the associated job vertex to run.__@return a (possibly empty) array of library names required by the associated job vertex to run;public String[] getRequiredJarFiles() {_			return this.requiredJarFiles__		};returns,a,possibly,empty,array,of,library,names,required,by,the,associated,job,vertex,to,run,return,a,possibly,empty,array,of,library,names,required,by,the,associated,job,vertex,to,run;public,string,get,required,jar,files,return,this,required,jar,files
LibraryCacheManager -> private LibraryCacheManager() throws IOException;1405024514;Constructs a new instance of the library cache manager.__@throws IOException_thrown if access to the file system can not be obtained or the requested hashing algorithm does not exist;private LibraryCacheManager() throws IOException {__		_		final String tmp = System.getProperty("java.io.tmpdir")__		if (tmp == null) {_			throw new IOException("Cannot find directory for temporary files")__		}__		this.fs = FileSystem.getLocalFileSystem()___		_		String userName = System.getProperty("user.name")__		if (userName == null) {_			userName = "default"__		}__		_		final File path = new File(tmp + File.separator + LIBRARYCACHENAME + "-" + userName)__		final URI uri = path.toURI()___		this.libraryCachePath = new Path(uri)___		this.fs.mkdirs(this.libraryCachePath)___		_		try {_			this.md = MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new IOException("Cannot find algorithm " + HASHING_ALGORITHM + ": "_				+ StringUtils.stringifyException(e))__		}_	};constructs,a,new,instance,of,the,library,cache,manager,throws,ioexception,thrown,if,access,to,the,file,system,can,not,be,obtained,or,the,requested,hashing,algorithm,does,not,exist;private,library,cache,manager,throws,ioexception,final,string,tmp,system,get,property,java,io,tmpdir,if,tmp,null,throw,new,ioexception,cannot,find,directory,for,temporary,files,this,fs,file,system,get,local,file,system,string,user,name,system,get,property,user,name,if,user,name,null,user,name,default,final,file,path,new,file,tmp,file,separator,librarycachename,user,name,final,uri,uri,path,to,uri,this,library,cache,path,new,path,uri,this,fs,mkdirs,this,library,cache,path,try,this,md,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,ioexception,cannot,find,algorithm,string,utils,stringify,exception,e
LibraryCacheManager -> private LibraryCacheManager() throws IOException;1405090423;Constructs a new instance of the library cache manager.__@throws IOException_thrown if access to the file system can not be obtained or the requested hashing algorithm does not exist;private LibraryCacheManager() throws IOException {__		_		final String tmp = System.getProperty("java.io.tmpdir")__		if (tmp == null) {_			throw new IOException("Cannot find directory for temporary files")__		}__		this.fs = FileSystem.getLocalFileSystem()___		_		String userName = System.getProperty("user.name")__		if (userName == null) {_			userName = "default"__		}__		_		final File path = new File(tmp + File.separator + LIBRARYCACHENAME + "-" + userName)__		final URI uri = path.toURI()___		this.libraryCachePath = new Path(uri)___		this.fs.mkdirs(this.libraryCachePath)___		_		try {_			this.md = MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new IOException("Cannot find algorithm " + HASHING_ALGORITHM + ": "_				+ StringUtils.stringifyException(e))__		}_	};constructs,a,new,instance,of,the,library,cache,manager,throws,ioexception,thrown,if,access,to,the,file,system,can,not,be,obtained,or,the,requested,hashing,algorithm,does,not,exist;private,library,cache,manager,throws,ioexception,final,string,tmp,system,get,property,java,io,tmpdir,if,tmp,null,throw,new,ioexception,cannot,find,directory,for,temporary,files,this,fs,file,system,get,local,file,system,string,user,name,system,get,property,user,name,if,user,name,null,user,name,default,final,file,path,new,file,tmp,file,separator,librarycachename,user,name,final,uri,uri,path,to,uri,this,library,cache,path,new,path,uri,this,fs,mkdirs,this,library,cache,path,try,this,md,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,ioexception,cannot,find,algorithm,string,utils,stringify,exception,e
LibraryCacheManager -> private LibraryCacheManager() throws IOException;1411236168;Constructs a new instance of the library cache manager.__@throws IOException_thrown if access to the file system can not be obtained or the requested hashing algorithm does not exist;private LibraryCacheManager() throws IOException {__		_		final String tmp = System.getProperty("java.io.tmpdir")__		if (tmp == null) {_			throw new IOException("Cannot find directory for temporary files")__		}__		this.fs = FileSystem.getLocalFileSystem()___		_		String userName = System.getProperty("user.name")__		if (userName == null) {_			userName = "default"__		}__		_		final File path = new File(tmp + File.separator + LIBRARYCACHENAME + "-" + userName)__		final URI uri = path.toURI()___		this.libraryCachePath = new Path(uri)___		this.fs.mkdirs(this.libraryCachePath)___		_		try {_			this.md = MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new IOException("Cannot find algorithm " + HASHING_ALGORITHM + ": "_				+ StringUtils.stringifyException(e))__		}_	};constructs,a,new,instance,of,the,library,cache,manager,throws,ioexception,thrown,if,access,to,the,file,system,can,not,be,obtained,or,the,requested,hashing,algorithm,does,not,exist;private,library,cache,manager,throws,ioexception,final,string,tmp,system,get,property,java,io,tmpdir,if,tmp,null,throw,new,ioexception,cannot,find,directory,for,temporary,files,this,fs,file,system,get,local,file,system,string,user,name,system,get,property,user,name,if,user,name,null,user,name,default,final,file,path,new,file,tmp,file,separator,librarycachename,user,name,final,uri,uri,path,to,uri,this,library,cache,path,new,path,uri,this,fs,mkdirs,this,library,cache,path,try,this,md,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,ioexception,cannot,find,algorithm,string,utils,stringify,exception,e
LibraryCacheManager -> private LibraryCacheManager() throws IOException;1411236169;Constructs a new instance of the library cache manager.__@throws IOException_thrown if access to the file system can not be obtained or the requested hashing algorithm does not exist;private LibraryCacheManager() throws IOException {__		_		final String tmp = System.getProperty("java.io.tmpdir")__		if (tmp == null) {_			throw new IOException("Cannot find directory for temporary files")__		}__		this.fs = FileSystem.getLocalFileSystem()___		_		String userName = System.getProperty("user.name")__		if (userName == null) {_			userName = "default"__		}__		_		final File path = new File(tmp + File.separator + LIBRARYCACHENAME + "-" + userName)__		final URI uri = path.toURI()___		this.libraryCachePath = new Path(uri)___		this.fs.mkdirs(this.libraryCachePath)___		_		try {_			this.md = MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new IOException("Cannot find algorithm " + HASHING_ALGORITHM + ": "_				+ StringUtils.stringifyException(e))__		}_	};constructs,a,new,instance,of,the,library,cache,manager,throws,ioexception,thrown,if,access,to,the,file,system,can,not,be,obtained,or,the,requested,hashing,algorithm,does,not,exist;private,library,cache,manager,throws,ioexception,final,string,tmp,system,get,property,java,io,tmpdir,if,tmp,null,throw,new,ioexception,cannot,find,directory,for,temporary,files,this,fs,file,system,get,local,file,system,string,user,name,system,get,property,user,name,if,user,name,null,user,name,default,final,file,path,new,file,tmp,file,separator,librarycachename,user,name,final,uri,uri,path,to,uri,this,library,cache,path,new,path,uri,this,fs,mkdirs,this,library,cache,path,try,this,md,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,ioexception,cannot,find,algorithm,string,utils,stringify,exception,e
LibraryCacheManager -> private LibraryCacheManager() throws IOException;1411473593;Constructs a new instance of the library cache manager.__@throws IOException_thrown if access to the file system can not be obtained or the requested hashing algorithm does not exist;private LibraryCacheManager() throws IOException {__		_		final String tmp = System.getProperty("java.io.tmpdir")__		if (tmp == null) {_			throw new IOException("Cannot find directory for temporary files")__		}__		this.fs = FileSystem.getLocalFileSystem()___		_		String userName = System.getProperty("user.name")__		if (userName == null) {_			userName = "default"__		}__		_		final File path = new File(tmp + File.separator + LIBRARYCACHENAME + "-" + userName)__		final URI uri = path.toURI()___		this.libraryCachePath = new Path(uri)___		this.fs.mkdirs(this.libraryCachePath)___		_		try {_			this.md = MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new IOException("Cannot find algorithm " + HASHING_ALGORITHM + ": "_				+ StringUtils.stringifyException(e))__		}_	};constructs,a,new,instance,of,the,library,cache,manager,throws,ioexception,thrown,if,access,to,the,file,system,can,not,be,obtained,or,the,requested,hashing,algorithm,does,not,exist;private,library,cache,manager,throws,ioexception,final,string,tmp,system,get,property,java,io,tmpdir,if,tmp,null,throw,new,ioexception,cannot,find,directory,for,temporary,files,this,fs,file,system,get,local,file,system,string,user,name,system,get,property,user,name,if,user,name,null,user,name,default,final,file,path,new,file,tmp,file,separator,librarycachename,user,name,final,uri,uri,path,to,uri,this,library,cache,path,new,path,uri,this,fs,mkdirs,this,library,cache,path,try,this,md,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,ioexception,cannot,find,algorithm,string,utils,stringify,exception,e
LibraryCacheManager -> void registerJob(JobID id, Collection<BlobKey> requiredJarFiles) throws IOException_;1415043780;Registers a job with its required jar files. The jar files are identified by their blob keys.__@param id job ID_@param requiredJarFiles collection of blob keys identifying the required jar files_@throws IOException;void registerJob(JobID id, Collection<BlobKey> requiredJarFiles) throws IOException_;registers,a,job,with,its,required,jar,files,the,jar,files,are,identified,by,their,blob,keys,param,id,job,id,param,required,jar,files,collection,of,blob,keys,identifying,the,required,jar,files,throws,ioexception;void,register,job,job,id,id,collection,blob,key,required,jar,files,throws,ioexception
LibraryCacheManager -> void registerJob(JobID id, Collection<BlobKey> requiredJarFiles) throws IOException_;1427784999;Registers a job with its required jar files. The jar files are identified by their blob keys.__@param id job ID_@param requiredJarFiles collection of blob keys identifying the required jar files_@throws IOException;void registerJob(JobID id, Collection<BlobKey> requiredJarFiles) throws IOException_;registers,a,job,with,its,required,jar,files,the,jar,files,are,identified,by,their,blob,keys,param,id,job,id,param,required,jar,files,collection,of,blob,keys,identifying,the,required,jar,files,throws,ioexception;void,register,job,job,id,id,collection,blob,key,required,jar,files,throws,ioexception
LibraryCacheManager -> void shutdown() throws IOException_;1412605211;Shutdown method__@throws IOException;void shutdown() throws IOException_;shutdown,method,throws,ioexception;void,shutdown,throws,ioexception
LibraryCacheManager -> void shutdown() throws IOException_;1415043780;Shutdown method__@throws IOException;void shutdown() throws IOException_;shutdown,method,throws,ioexception;void,shutdown,throws,ioexception
LibraryCacheManager -> void shutdown() throws IOException_;1427784999;Shutdown method__@throws IOException;void shutdown() throws IOException_;shutdown,method,throws,ioexception;void,shutdown,throws,ioexception
LibraryCacheManager -> void shutdown() throws IOException_;1444312509;Shutdown method__@throws IOException;void shutdown() throws IOException_;shutdown,method,throws,ioexception;void,shutdown,throws,ioexception
LibraryCacheManager -> void shutdown() throws IOException_;1499173045;Shutdown method__@throws IOException;void shutdown() throws IOException_;shutdown,method,throws,ioexception;void,shutdown,throws,ioexception
LibraryCacheManager -> void shutdown() throws IOException_;1502201311;Shutdown method__@throws IOException;void shutdown() throws IOException_;shutdown,method,throws,ioexception;void,shutdown,throws,ioexception
LibraryCacheManager -> public static void unregister(final JobID id) throws IOException;1405024514;Unregisters a job ID and releases the resources associated with it.__@param id_the job ID to unregister_@throws IOException_thrown if the library cache manager could not be instantiated;public static void unregister(final JobID id) throws IOException {__		final LibraryCacheManager lib = get()__		lib.unregisterInternal(id)__	};unregisters,a,job,id,and,releases,the,resources,associated,with,it,param,id,the,job,id,to,unregister,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,void,unregister,final,job,id,id,throws,ioexception,final,library,cache,manager,lib,get,lib,unregister,internal,id
LibraryCacheManager -> public static void unregister(final JobID id) throws IOException;1405090423;Unregisters a job ID and releases the resources associated with it.__@param id_the job ID to unregister_@throws IOException_thrown if the library cache manager could not be instantiated;public static void unregister(final JobID id) throws IOException {__		final LibraryCacheManager lib = get()__		lib.unregisterInternal(id)__	};unregisters,a,job,id,and,releases,the,resources,associated,with,it,param,id,the,job,id,to,unregister,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,void,unregister,final,job,id,id,throws,ioexception,final,library,cache,manager,lib,get,lib,unregister,internal,id
LibraryCacheManager -> public static void unregister(final JobID id) throws IOException;1411236168;Unregisters a job ID and releases the resources associated with it.__@param id_the job ID to unregister_@throws IOException_thrown if the library cache manager could not be instantiated;public static void unregister(final JobID id) throws IOException {__		final LibraryCacheManager lib = get()__		lib.unregisterInternal(id)__	};unregisters,a,job,id,and,releases,the,resources,associated,with,it,param,id,the,job,id,to,unregister,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,void,unregister,final,job,id,id,throws,ioexception,final,library,cache,manager,lib,get,lib,unregister,internal,id
LibraryCacheManager -> public static void unregister(final JobID id) throws IOException;1411236169;Unregisters a job ID and releases the resources associated with it.__@param id_the job ID to unregister_@throws IOException_thrown if the library cache manager could not be instantiated;public static void unregister(final JobID id) throws IOException {__		final LibraryCacheManager lib = get()__		lib.unregisterInternal(id)__	};unregisters,a,job,id,and,releases,the,resources,associated,with,it,param,id,the,job,id,to,unregister,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,void,unregister,final,job,id,id,throws,ioexception,final,library,cache,manager,lib,get,lib,unregister,internal,id
LibraryCacheManager -> public static void unregister(final JobID id) throws IOException;1411473593;Unregisters a job ID and releases the resources associated with it.__@param id_the job ID to unregister_@throws IOException_thrown if the library cache manager could not be instantiated;public static void unregister(final JobID id) throws IOException {__		final LibraryCacheManager lib = get()__		lib.unregisterInternal(id)__	};unregisters,a,job,id,and,releases,the,resources,associated,with,it,param,id,the,job,id,to,unregister,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;public,static,void,unregister,final,job,id,id,throws,ioexception,final,library,cache,manager,lib,get,lib,unregister,internal,id
LibraryCacheManager -> private void writeLibraryToStreamInternal(final String libraryFileName, final DataOutput out) throws IOException;1405024514;Writes data from the library with the given file name to the specified stream.__@param libraryFileName_the name of the library_@param out_the stream to write the data to_@throws IOException_thrown if an error occurs while writing the data;private void writeLibraryToStreamInternal(final String libraryFileName, final DataOutput out) throws IOException {__		if (libraryFileName == null) {_			throw new IOException("libraryName is null!")__		}__		final Path storePath = new Path(this.libraryCachePath + "/" + libraryFileName)___		synchronized (this.fs) {__			if (!fs.exists(storePath)) {_				throw new IOException(storePath + " does not exist!")__			}__			final FileStatus status = fs.getFileStatus(storePath)___			StringRecord.writeString(out, libraryFileName)__			out.writeLong(status.getLen())___			final FSDataInputStream inStream = fs.open(storePath)__			final byte[] buf = new byte[8192]_ _			int read = inStream.read(buf, 0, buf.length)__			while (read > 0) {_				out.write(buf, 0, read)__				read = inStream.read(buf, 0, buf.length)__			}__			inStream.close()__		}_	};writes,data,from,the,library,with,the,given,file,name,to,the,specified,stream,param,library,file,name,the,name,of,the,library,param,out,the,stream,to,write,the,data,to,throws,ioexception,thrown,if,an,error,occurs,while,writing,the,data;private,void,write,library,to,stream,internal,final,string,library,file,name,final,data,output,out,throws,ioexception,if,library,file,name,null,throw,new,ioexception,library,name,is,null,final,path,store,path,new,path,this,library,cache,path,library,file,name,synchronized,this,fs,if,fs,exists,store,path,throw,new,ioexception,store,path,does,not,exist,final,file,status,status,fs,get,file,status,store,path,string,record,write,string,out,library,file,name,out,write,long,status,get,len,final,fsdata,input,stream,in,stream,fs,open,store,path,final,byte,buf,new,byte,8192,int,read,in,stream,read,buf,0,buf,length,while,read,0,out,write,buf,0,read,read,in,stream,read,buf,0,buf,length,in,stream,close
LibraryCacheManager -> private void writeLibraryToStreamInternal(final String libraryFileName, final DataOutput out) throws IOException;1405090423;Writes data from the library with the given file name to the specified stream.__@param libraryFileName_the name of the library_@param out_the stream to write the data to_@throws IOException_thrown if an error occurs while writing the data;private void writeLibraryToStreamInternal(final String libraryFileName, final DataOutput out) throws IOException {__		if (libraryFileName == null) {_			throw new IOException("libraryName is null!")__		}__		final Path storePath = new Path(this.libraryCachePath + "/" + libraryFileName)___		synchronized (this.fs) {__			if (!fs.exists(storePath)) {_				throw new IOException(storePath + " does not exist!")__			}__			final FileStatus status = fs.getFileStatus(storePath)___			StringRecord.writeString(out, libraryFileName)__			out.writeLong(status.getLen())___			final FSDataInputStream inStream = fs.open(storePath)__			final byte[] buf = new byte[8192]_ _			int read = inStream.read(buf, 0, buf.length)__			while (read > 0) {_				out.write(buf, 0, read)__				read = inStream.read(buf, 0, buf.length)__			}__			inStream.close()__		}_	};writes,data,from,the,library,with,the,given,file,name,to,the,specified,stream,param,library,file,name,the,name,of,the,library,param,out,the,stream,to,write,the,data,to,throws,ioexception,thrown,if,an,error,occurs,while,writing,the,data;private,void,write,library,to,stream,internal,final,string,library,file,name,final,data,output,out,throws,ioexception,if,library,file,name,null,throw,new,ioexception,library,name,is,null,final,path,store,path,new,path,this,library,cache,path,library,file,name,synchronized,this,fs,if,fs,exists,store,path,throw,new,ioexception,store,path,does,not,exist,final,file,status,status,fs,get,file,status,store,path,string,record,write,string,out,library,file,name,out,write,long,status,get,len,final,fsdata,input,stream,in,stream,fs,open,store,path,final,byte,buf,new,byte,8192,int,read,in,stream,read,buf,0,buf,length,while,read,0,out,write,buf,0,read,read,in,stream,read,buf,0,buf,length,in,stream,close
LibraryCacheManager -> private void writeLibraryToStreamInternal(final String libraryFileName, final DataOutput out) throws IOException;1411236168;Writes data from the library with the given file name to the specified stream.__@param libraryFileName_the name of the library_@param out_the stream to write the data to_@throws IOException_thrown if an error occurs while writing the data;private void writeLibraryToStreamInternal(final String libraryFileName, final DataOutput out) throws IOException {__		if (libraryFileName == null) {_			throw new IOException("libraryName is null!")__		}__		final Path storePath = new Path(this.libraryCachePath + "/" + libraryFileName)___		synchronized (this.fs) {__			if (!fs.exists(storePath)) {_				throw new IOException(storePath + " does not exist!")__			}__			final FileStatus status = fs.getFileStatus(storePath)___			StringRecord.writeString(out, libraryFileName)__			out.writeLong(status.getLen())___			final FSDataInputStream inStream = fs.open(storePath)__			final byte[] buf = new byte[8192]_ _			int read = inStream.read(buf, 0, buf.length)__			while (read > 0) {_				out.write(buf, 0, read)__				read = inStream.read(buf, 0, buf.length)__			}__			inStream.close()__		}_	};writes,data,from,the,library,with,the,given,file,name,to,the,specified,stream,param,library,file,name,the,name,of,the,library,param,out,the,stream,to,write,the,data,to,throws,ioexception,thrown,if,an,error,occurs,while,writing,the,data;private,void,write,library,to,stream,internal,final,string,library,file,name,final,data,output,out,throws,ioexception,if,library,file,name,null,throw,new,ioexception,library,name,is,null,final,path,store,path,new,path,this,library,cache,path,library,file,name,synchronized,this,fs,if,fs,exists,store,path,throw,new,ioexception,store,path,does,not,exist,final,file,status,status,fs,get,file,status,store,path,string,record,write,string,out,library,file,name,out,write,long,status,get,len,final,fsdata,input,stream,in,stream,fs,open,store,path,final,byte,buf,new,byte,8192,int,read,in,stream,read,buf,0,buf,length,while,read,0,out,write,buf,0,read,read,in,stream,read,buf,0,buf,length,in,stream,close
LibraryCacheManager -> private void writeLibraryToStreamInternal(final String libraryFileName, final DataOutput out) throws IOException;1411236169;Writes data from the library with the given file name to the specified stream.__@param libraryFileName_the name of the library_@param out_the stream to write the data to_@throws IOException_thrown if an error occurs while writing the data;private void writeLibraryToStreamInternal(final String libraryFileName, final DataOutput out) throws IOException {__		if (libraryFileName == null) {_			throw new IOException("libraryName is null!")__		}__		final Path storePath = new Path(this.libraryCachePath + "/" + libraryFileName)___		synchronized (this.fs) {__			if (!fs.exists(storePath)) {_				throw new IOException(storePath + " does not exist!")__			}__			final FileStatus status = fs.getFileStatus(storePath)___			StringRecord.writeString(out, libraryFileName)__			out.writeLong(status.getLen())___			final FSDataInputStream inStream = fs.open(storePath)__			final byte[] buf = new byte[8192]_ _			int read = inStream.read(buf, 0, buf.length)__			while (read > 0) {_				out.write(buf, 0, read)__				read = inStream.read(buf, 0, buf.length)__			}__			inStream.close()__		}_	};writes,data,from,the,library,with,the,given,file,name,to,the,specified,stream,param,library,file,name,the,name,of,the,library,param,out,the,stream,to,write,the,data,to,throws,ioexception,thrown,if,an,error,occurs,while,writing,the,data;private,void,write,library,to,stream,internal,final,string,library,file,name,final,data,output,out,throws,ioexception,if,library,file,name,null,throw,new,ioexception,library,name,is,null,final,path,store,path,new,path,this,library,cache,path,library,file,name,synchronized,this,fs,if,fs,exists,store,path,throw,new,ioexception,store,path,does,not,exist,final,file,status,status,fs,get,file,status,store,path,string,record,write,string,out,library,file,name,out,write,long,status,get,len,final,fsdata,input,stream,in,stream,fs,open,store,path,final,byte,buf,new,byte,8192,int,read,in,stream,read,buf,0,buf,length,while,read,0,out,write,buf,0,read,read,in,stream,read,buf,0,buf,length,in,stream,close
LibraryCacheManager -> private void writeLibraryToStreamInternal(final String libraryFileName, final DataOutput out) throws IOException;1411473593;Writes data from the library with the given file name to the specified stream.__@param libraryFileName_the name of the library_@param out_the stream to write the data to_@throws IOException_thrown if an error occurs while writing the data;private void writeLibraryToStreamInternal(final String libraryFileName, final DataOutput out) throws IOException {__		if (libraryFileName == null) {_			throw new IOException("libraryName is null!")__		}__		final Path storePath = new Path(this.libraryCachePath + "/" + libraryFileName)___		synchronized (this.fs) {__			if (!fs.exists(storePath)) {_				throw new IOException(storePath + " does not exist!")__			}__			final FileStatus status = fs.getFileStatus(storePath)___			StringRecord.writeString(out, libraryFileName)__			out.writeLong(status.getLen())___			final FSDataInputStream inStream = fs.open(storePath)__			final byte[] buf = new byte[8192]_ _			int read = inStream.read(buf, 0, buf.length)__			while (read > 0) {_				out.write(buf, 0, read)__				read = inStream.read(buf, 0, buf.length)__			}__			inStream.close()__		}_	};writes,data,from,the,library,with,the,given,file,name,to,the,specified,stream,param,library,file,name,the,name,of,the,library,param,out,the,stream,to,write,the,data,to,throws,ioexception,thrown,if,an,error,occurs,while,writing,the,data;private,void,write,library,to,stream,internal,final,string,library,file,name,final,data,output,out,throws,ioexception,if,library,file,name,null,throw,new,ioexception,library,name,is,null,final,path,store,path,new,path,this,library,cache,path,library,file,name,synchronized,this,fs,if,fs,exists,store,path,throw,new,ioexception,store,path,does,not,exist,final,file,status,status,fs,get,file,status,store,path,string,record,write,string,out,library,file,name,out,write,long,status,get,len,final,fsdata,input,stream,in,stream,fs,open,store,path,final,byte,buf,new,byte,8192,int,read,in,stream,read,buf,0,buf,length,while,read,0,out,write,buf,0,read,read,in,stream,read,buf,0,buf,length,in,stream,close
LibraryCacheManager -> private ClassLoader getClassLoaderInternal(final JobID id);1405024514;Returns the class loader to the specified vertex.__@param id_the ID of the job to return the class loader for_@return the class loader of requested vertex or <code>null</code> if no class loader has been registered with the_given ID._@throws IOException_thrown if the library cache manager could not be instantiated;private ClassLoader getClassLoaderInternal(final JobID id) {__		final LibraryManagerEntry entry = this.libraryManagerEntries.get(id)___		if (entry == null) {_			return null__		}__		return entry.getClassLoader()__	};returns,the,class,loader,to,the,specified,vertex,param,id,the,id,of,the,job,to,return,the,class,loader,for,return,the,class,loader,of,requested,vertex,or,code,null,code,if,no,class,loader,has,been,registered,with,the,given,id,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;private,class,loader,get,class,loader,internal,final,job,id,id,final,library,manager,entry,entry,this,library,manager,entries,get,id,if,entry,null,return,null,return,entry,get,class,loader
LibraryCacheManager -> private ClassLoader getClassLoaderInternal(final JobID id);1405090423;Returns the class loader to the specified vertex.__@param id_the ID of the job to return the class loader for_@return the class loader of requested vertex or <code>null</code> if no class loader has been registered with the_given ID._@throws IOException_thrown if the library cache manager could not be instantiated;private ClassLoader getClassLoaderInternal(final JobID id) {__		final LibraryManagerEntry entry = this.libraryManagerEntries.get(id)___		if (entry == null) {_			return null__		}__		return entry.getClassLoader()__	};returns,the,class,loader,to,the,specified,vertex,param,id,the,id,of,the,job,to,return,the,class,loader,for,return,the,class,loader,of,requested,vertex,or,code,null,code,if,no,class,loader,has,been,registered,with,the,given,id,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated;private,class,loader,get,class,loader,internal,final,job,id,id,final,library,manager,entry,entry,this,library,manager,entries,get,id,if,entry,null,return,null,return,entry,get,class,loader
LibraryCacheManager -> private ClassLoader getClassLoaderInternal(final JobID id);1411236168;Returns the class loader to the specified vertex.__@param id_the ID of the job to return the class loader for_@return the class loader of requested vertex or <code>null</code> if no class loader has been registered with the_given ID.;private ClassLoader getClassLoaderInternal(final JobID id) {__		final LibraryManagerEntry entry = this.libraryManagerEntries.get(id)___		if (entry == null) {_			return null__		}__		return entry.getClassLoader()__	};returns,the,class,loader,to,the,specified,vertex,param,id,the,id,of,the,job,to,return,the,class,loader,for,return,the,class,loader,of,requested,vertex,or,code,null,code,if,no,class,loader,has,been,registered,with,the,given,id;private,class,loader,get,class,loader,internal,final,job,id,id,final,library,manager,entry,entry,this,library,manager,entries,get,id,if,entry,null,return,null,return,entry,get,class,loader
LibraryCacheManager -> private ClassLoader getClassLoaderInternal(final JobID id);1411236169;Returns the class loader to the specified vertex.__@param id_the ID of the job to return the class loader for_@return the class loader of requested vertex or <code>null</code> if no class loader has been registered with the_given ID.;private ClassLoader getClassLoaderInternal(final JobID id) {__		final LibraryManagerEntry entry = this.libraryManagerEntries.get(id)___		if (entry == null) {_			return null__		}__		return entry.getClassLoader()__	};returns,the,class,loader,to,the,specified,vertex,param,id,the,id,of,the,job,to,return,the,class,loader,for,return,the,class,loader,of,requested,vertex,or,code,null,code,if,no,class,loader,has,been,registered,with,the,given,id;private,class,loader,get,class,loader,internal,final,job,id,id,final,library,manager,entry,entry,this,library,manager,entries,get,id,if,entry,null,return,null,return,entry,get,class,loader
LibraryCacheManager -> private ClassLoader getClassLoaderInternal(final JobID id);1411473593;Returns the class loader to the specified vertex.__@param id_the ID of the job to return the class loader for_@return the class loader of requested vertex or <code>null</code> if no class loader has been registered with the_given ID.;private ClassLoader getClassLoaderInternal(final JobID id) {__		final LibraryManagerEntry entry = this.libraryManagerEntries.get(id)___		if (entry == null) {_			return null__		}__		return entry.getClassLoader()__	};returns,the,class,loader,to,the,specified,vertex,param,id,the,id,of,the,job,to,return,the,class,loader,for,return,the,class,loader,of,requested,vertex,or,code,null,code,if,no,class,loader,has,been,registered,with,the,given,id;private,class,loader,get,class,loader,internal,final,job,id,id,final,library,manager,entry,entry,this,library,manager,entries,get,id,if,entry,null,return,null,return,entry,get,class,loader
LibraryCacheManager -> LibraryTranslationKey -> public Path getClientPath();1405024514;Returns the client path associated with this object.__@return the client path associated with this object;public Path getClientPath() {_			return this.clientPath__		};returns,the,client,path,associated,with,this,object,return,the,client,path,associated,with,this,object;public,path,get,client,path,return,this,client,path
LibraryCacheManager -> LibraryTranslationKey -> public Path getClientPath();1405090423;Returns the client path associated with this object.__@return the client path associated with this object;public Path getClientPath() {_			return this.clientPath__		};returns,the,client,path,associated,with,this,object,return,the,client,path,associated,with,this,object;public,path,get,client,path,return,this,client,path
LibraryCacheManager -> LibraryTranslationKey -> public Path getClientPath();1411236168;Returns the client path associated with this object.__@return the client path associated with this object;public Path getClientPath() {_			return this.clientPath__		};returns,the,client,path,associated,with,this,object,return,the,client,path,associated,with,this,object;public,path,get,client,path,return,this,client,path
LibraryCacheManager -> LibraryTranslationKey -> public Path getClientPath();1411236169;Returns the client path associated with this object.__@return the client path associated with this object;public Path getClientPath() {_			return this.clientPath__		};returns,the,client,path,associated,with,this,object,return,the,client,path,associated,with,this,object;public,path,get,client,path,return,this,client,path
LibraryCacheManager -> LibraryTranslationKey -> public Path getClientPath();1411473593;Returns the client path associated with this object.__@return the client path associated with this object;public Path getClientPath() {_			return this.clientPath__		};returns,the,client,path,associated,with,this,object,return,the,client,path,associated,with,this,object;public,path,get,client,path,return,this,client,path
LibraryCacheManager -> private void unregisterInternal(final JobID id);1405024514;Unregisters a job ID and releases the resources associated with it.__@param id_the job ID to unregister;private void unregisterInternal(final JobID id) {__		_		while (this.lockMap.putIfAbsent(id, LOCK_OBJECT) != null)___		if (decrementReferenceCounter(id) == 0) {_			this.libraryManagerEntries.remove(id)__		}__		this.lockMap.remove(id)__	};unregisters,a,job,id,and,releases,the,resources,associated,with,it,param,id,the,job,id,to,unregister;private,void,unregister,internal,final,job,id,id,while,this,lock,map,put,if,absent,id,null,if,decrement,reference,counter,id,0,this,library,manager,entries,remove,id,this,lock,map,remove,id
LibraryCacheManager -> private void unregisterInternal(final JobID id);1405090423;Unregisters a job ID and releases the resources associated with it.__@param id_the job ID to unregister;private void unregisterInternal(final JobID id) {__		_		while (this.lockMap.putIfAbsent(id, LOCK_OBJECT) != null)___		if (decrementReferenceCounter(id) == 0) {_			this.libraryManagerEntries.remove(id)__		}__		this.lockMap.remove(id)__	};unregisters,a,job,id,and,releases,the,resources,associated,with,it,param,id,the,job,id,to,unregister;private,void,unregister,internal,final,job,id,id,while,this,lock,map,put,if,absent,id,null,if,decrement,reference,counter,id,0,this,library,manager,entries,remove,id,this,lock,map,remove,id
LibraryCacheManager -> private void unregisterInternal(final JobID id);1411236168;Unregisters a job ID and releases the resources associated with it.__@param id_the job ID to unregister;private void unregisterInternal(final JobID id) {__		_		while (this.lockMap.putIfAbsent(id, LOCK_OBJECT) != null)___		if (decrementReferenceCounter(id) == 0) {_			this.libraryManagerEntries.remove(id)__		}__		this.lockMap.remove(id)__	};unregisters,a,job,id,and,releases,the,resources,associated,with,it,param,id,the,job,id,to,unregister;private,void,unregister,internal,final,job,id,id,while,this,lock,map,put,if,absent,id,null,if,decrement,reference,counter,id,0,this,library,manager,entries,remove,id,this,lock,map,remove,id
LibraryCacheManager -> private void unregisterInternal(final JobID id);1411236169;Unregisters a job ID and releases the resources associated with it.__@param id_the job ID to unregister;private void unregisterInternal(final JobID id) {__		_		while (this.lockMap.putIfAbsent(id, LOCK_OBJECT) != null)__		try {_			if (decrementReferenceCounter(id) == 0) {_				this.libraryManagerEntries.remove(id)__			}_		}_		finally {_			this.lockMap.remove(id)__		}_	};unregisters,a,job,id,and,releases,the,resources,associated,with,it,param,id,the,job,id,to,unregister;private,void,unregister,internal,final,job,id,id,while,this,lock,map,put,if,absent,id,null,try,if,decrement,reference,counter,id,0,this,library,manager,entries,remove,id,finally,this,lock,map,remove,id
LibraryCacheManager -> private void unregisterInternal(final JobID id);1411473593;Unregisters a job ID and releases the resources associated with it.__@param id_the job ID to unregister;private void unregisterInternal(final JobID id) {__		_		while (this.lockMap.putIfAbsent(id, LOCK_OBJECT) != null)__		try {_			if (decrementReferenceCounter(id) == 0) {_				this.libraryManagerEntries.remove(id)__			}_		}_		finally {_			this.lockMap.remove(id)__		}_	};unregisters,a,job,id,and,releases,the,resources,associated,with,it,param,id,the,job,id,to,unregister;private,void,unregister,internal,final,job,id,id,while,this,lock,map,put,if,absent,id,null,try,if,decrement,reference,counter,id,0,this,library,manager,entries,remove,id,finally,this,lock,map,remove,id
LibraryCacheManager -> void registerTask(JobID id, ExecutionAttemptID execution, Collection<PermanentBlobKey> requiredJarFiles, 		Collection<URL> requiredClasspaths) throws IOException_;1507212387;Registers a job task execution with its required jar files and classpaths. The jar files are_identified by their blob keys and downloaded for use by a {@link ClassLoader}.__@param id job ID_@param requiredJarFiles collection of blob keys identifying the required jar files_@param requiredClasspaths collection of classpaths that are added to the user code class loader__@throws IOException if any error occurs when retrieving the required jar files__@see #unregisterTask(JobID, ExecutionAttemptID) counterpart of this method;void registerTask(JobID id, ExecutionAttemptID execution, Collection<PermanentBlobKey> requiredJarFiles,_		Collection<URL> requiredClasspaths) throws IOException_;registers,a,job,task,execution,with,its,required,jar,files,and,classpaths,the,jar,files,are,identified,by,their,blob,keys,and,downloaded,for,use,by,a,link,class,loader,param,id,job,id,param,required,jar,files,collection,of,blob,keys,identifying,the,required,jar,files,param,required,classpaths,collection,of,classpaths,that,are,added,to,the,user,code,class,loader,throws,ioexception,if,any,error,occurs,when,retrieving,the,required,jar,files,see,unregister,task,job,id,execution,attempt,id,counterpart,of,this,method;void,register,task,job,id,id,execution,attempt,id,execution,collection,permanent,blob,key,required,jar,files,collection,url,required,classpaths,throws,ioexception
LibraryCacheManager -> void registerTask(JobID id, ExecutionAttemptID execution, Collection<PermanentBlobKey> requiredJarFiles, 		Collection<URL> requiredClasspaths) throws IOException_;1526549506;Registers a job task execution with its required jar files and classpaths. The jar files are_identified by their blob keys and downloaded for use by a {@link ClassLoader}.__@param id job ID_@param requiredJarFiles collection of blob keys identifying the required jar files_@param requiredClasspaths collection of classpaths that are added to the user code class loader__@throws IOException if any error occurs when retrieving the required jar files__@see #unregisterTask(JobID, ExecutionAttemptID) counterpart of this method;void registerTask(JobID id, ExecutionAttemptID execution, Collection<PermanentBlobKey> requiredJarFiles,_		Collection<URL> requiredClasspaths) throws IOException_;registers,a,job,task,execution,with,its,required,jar,files,and,classpaths,the,jar,files,are,identified,by,their,blob,keys,and,downloaded,for,use,by,a,link,class,loader,param,id,job,id,param,required,jar,files,collection,of,blob,keys,identifying,the,required,jar,files,param,required,classpaths,collection,of,classpaths,that,are,added,to,the,user,code,class,loader,throws,ioexception,if,any,error,occurs,when,retrieving,the,required,jar,files,see,unregister,task,job,id,execution,attempt,id,counterpart,of,this,method;void,register,task,job,id,id,execution,attempt,id,execution,collection,permanent,blob,key,required,jar,files,collection,url,required,classpaths,throws,ioexception
LibraryCacheManager -> File getFile(BlobKey blobKey) throws IOException_;1415043780;Returns a file handle to the file identified by the blob key.__@param blobKey identifying the requested file_@return File handle_@throws IOException;File getFile(BlobKey blobKey) throws IOException_;returns,a,file,handle,to,the,file,identified,by,the,blob,key,param,blob,key,identifying,the,requested,file,return,file,handle,throws,ioexception;file,get,file,blob,key,blob,key,throws,ioexception
LibraryCacheManager -> File getFile(BlobKey blobKey) throws IOException_;1427784999;Returns a file handle to the file identified by the blob key.__@param blobKey identifying the requested file_@return File handle_@throws IOException;File getFile(BlobKey blobKey) throws IOException_;returns,a,file,handle,to,the,file,identified,by,the,blob,key,param,blob,key,identifying,the,requested,file,return,file,handle,throws,ioexception;file,get,file,blob,key,blob,key,throws,ioexception
LibraryCacheManager -> File getFile(BlobKey blobKey) throws IOException_;1444312509;Returns a file handle to the file identified by the blob key.__@param blobKey identifying the requested file_@return File handle_@throws IOException;File getFile(BlobKey blobKey) throws IOException_;returns,a,file,handle,to,the,file,identified,by,the,blob,key,param,blob,key,identifying,the,requested,file,return,file,handle,throws,ioexception;file,get,file,blob,key,blob,key,throws,ioexception
LibraryCacheManager -> File getFile(BlobKey blobKey) throws IOException_;1499173045;Returns a file handle to the file identified by the blob key.__@param blobKey identifying the requested file_@return File handle_@throws IOException if any error occurs when retrieving the file;File getFile(BlobKey blobKey) throws IOException_;returns,a,file,handle,to,the,file,identified,by,the,blob,key,param,blob,key,identifying,the,requested,file,return,file,handle,throws,ioexception,if,any,error,occurs,when,retrieving,the,file;file,get,file,blob,key,blob,key,throws,ioexception
LibraryCacheManager -> private static synchronized LibraryCacheManager get() throws IOException;1405024514;Returns the singleton instance of the library cache manager.__@return the singleton instance of the library cache manager._@throws IOException_thrown if access to the file system can not be obtained or the requested hashing algorithm does not exist;private static synchronized LibraryCacheManager get() throws IOException {__		_		if (libraryManager == null) {_			libraryManager = new LibraryCacheManager()__		}__		return libraryManager__	};returns,the,singleton,instance,of,the,library,cache,manager,return,the,singleton,instance,of,the,library,cache,manager,throws,ioexception,thrown,if,access,to,the,file,system,can,not,be,obtained,or,the,requested,hashing,algorithm,does,not,exist;private,static,synchronized,library,cache,manager,get,throws,ioexception,if,library,manager,null,library,manager,new,library,cache,manager,return,library,manager
LibraryCacheManager -> private static synchronized LibraryCacheManager get() throws IOException;1405090423;Returns the singleton instance of the library cache manager.__@return the singleton instance of the library cache manager._@throws IOException_thrown if access to the file system can not be obtained or the requested hashing algorithm does not exist;private static synchronized LibraryCacheManager get() throws IOException {__		_		if (libraryManager == null) {_			libraryManager = new LibraryCacheManager()__		}__		return libraryManager__	};returns,the,singleton,instance,of,the,library,cache,manager,return,the,singleton,instance,of,the,library,cache,manager,throws,ioexception,thrown,if,access,to,the,file,system,can,not,be,obtained,or,the,requested,hashing,algorithm,does,not,exist;private,static,synchronized,library,cache,manager,get,throws,ioexception,if,library,manager,null,library,manager,new,library,cache,manager,return,library,manager
LibraryCacheManager -> private static synchronized LibraryCacheManager get() throws IOException;1411236168;Returns the singleton instance of the library cache manager.__@return the singleton instance of the library cache manager._@throws IOException_thrown if access to the file system can not be obtained or the requested hashing algorithm does not exist;private static synchronized LibraryCacheManager get() throws IOException {__		_		if (libraryManager == null) {_			libraryManager = new LibraryCacheManager()__		}__		return libraryManager__	};returns,the,singleton,instance,of,the,library,cache,manager,return,the,singleton,instance,of,the,library,cache,manager,throws,ioexception,thrown,if,access,to,the,file,system,can,not,be,obtained,or,the,requested,hashing,algorithm,does,not,exist;private,static,synchronized,library,cache,manager,get,throws,ioexception,if,library,manager,null,library,manager,new,library,cache,manager,return,library,manager
LibraryCacheManager -> private static synchronized LibraryCacheManager get() throws IOException;1411236169;Returns the singleton instance of the library cache manager.__@return the singleton instance of the library cache manager._@throws IOException_thrown if access to the file system can not be obtained or the requested hashing algorithm does not exist;private static synchronized LibraryCacheManager get() throws IOException {__		_		if (libraryManager == null) {_			libraryManager = new LibraryCacheManager()__		}__		return libraryManager__	};returns,the,singleton,instance,of,the,library,cache,manager,return,the,singleton,instance,of,the,library,cache,manager,throws,ioexception,thrown,if,access,to,the,file,system,can,not,be,obtained,or,the,requested,hashing,algorithm,does,not,exist;private,static,synchronized,library,cache,manager,get,throws,ioexception,if,library,manager,null,library,manager,new,library,cache,manager,return,library,manager
LibraryCacheManager -> private static synchronized LibraryCacheManager get() throws IOException;1411473593;Returns the singleton instance of the library cache manager.__@return the singleton instance of the library cache manager._@throws IOException_thrown if access to the file system can not be obtained or the requested hashing algorithm does not exist;private static synchronized LibraryCacheManager get() throws IOException {__		_		if (libraryManager == null) {_			libraryManager = new LibraryCacheManager()__		}__		return libraryManager__	};returns,the,singleton,instance,of,the,library,cache,manager,return,the,singleton,instance,of,the,library,cache,manager,throws,ioexception,thrown,if,access,to,the,file,system,can,not,be,obtained,or,the,requested,hashing,algorithm,does,not,exist;private,static,synchronized,library,cache,manager,get,throws,ioexception,if,library,manager,null,library,manager,new,library,cache,manager,return,library,manager
LibraryCacheManager -> public static void register(final JobID id, final String[] requiredJarFiles) throws IOException;1405024514;Registers a job ID with a set of library paths that are required to run the job. For every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered._@param clientPaths_the client path's of the required libraries_@throws IOException_thrown if the library cache manager could not be instantiated or one of the requested libraries is not in_the cache;public static void register(final JobID id, final String[] requiredJarFiles) throws IOException {__		final LibraryCacheManager lib = get()__		lib.registerInternal(id, requiredJarFiles)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,client,paths,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,one,of,the,requested,libraries,is,not,in,the,cache;public,static,void,register,final,job,id,id,final,string,required,jar,files,throws,ioexception,final,library,cache,manager,lib,get,lib,register,internal,id,required,jar,files
LibraryCacheManager -> public static void register(final JobID id, final String[] requiredJarFiles) throws IOException;1405090423;Registers a job ID with a set of library paths that are required to run the job. For every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered._@param clientPaths_the client path's of the required libraries_@throws IOException_thrown if the library cache manager could not be instantiated or one of the requested libraries is not in_the cache;public static void register(final JobID id, final String[] requiredJarFiles) throws IOException {__		final LibraryCacheManager lib = get()__		lib.registerInternal(id, requiredJarFiles)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,client,paths,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,one,of,the,requested,libraries,is,not,in,the,cache;public,static,void,register,final,job,id,id,final,string,required,jar,files,throws,ioexception,final,library,cache,manager,lib,get,lib,register,internal,id,required,jar,files
LibraryCacheManager -> public static void register(final JobID id, final String[] requiredJarFiles) throws IOException;1411236168;Registers a job ID with a set of library paths that are required to run the job. For every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered._@param requiredJarFiles_the client path's of the required libraries_@throws IOException_thrown if the library cache manager could not be instantiated or one of the requested libraries is not in_the cache;public static void register(final JobID id, final String[] requiredJarFiles) throws IOException {__		final LibraryCacheManager lib = get()__		lib.registerInternal(id, requiredJarFiles)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,required,jar,files,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,one,of,the,requested,libraries,is,not,in,the,cache;public,static,void,register,final,job,id,id,final,string,required,jar,files,throws,ioexception,final,library,cache,manager,lib,get,lib,register,internal,id,required,jar,files
LibraryCacheManager -> public static void register(final JobID id, final String[] requiredJarFiles) throws IOException;1411236169;Registers a job ID with a set of library paths that are required to run the job. For every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered._@param requiredJarFiles_the client path's of the required libraries_@throws IOException_thrown if the library cache manager could not be instantiated or one of the requested libraries is not in_the cache;public static void register(final JobID id, final String[] requiredJarFiles) throws IOException {__		final LibraryCacheManager lib = get()__		lib.registerInternal(id, requiredJarFiles)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,required,jar,files,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,one,of,the,requested,libraries,is,not,in,the,cache;public,static,void,register,final,job,id,id,final,string,required,jar,files,throws,ioexception,final,library,cache,manager,lib,get,lib,register,internal,id,required,jar,files
LibraryCacheManager -> public static void register(final JobID id, final String[] requiredJarFiles) throws IOException;1411473593;Registers a job ID with a set of library paths that are required to run the job. For every registered_job the library cache manager creates a class loader that is used to instantiate the job's environment later on.__@param id_the ID of the job to be registered._@param requiredJarFiles_the client path's of the required libraries_@throws IOException_thrown if the library cache manager could not be instantiated or one of the requested libraries is not in_the cache;public static void register(final JobID id, final String[] requiredJarFiles) throws IOException {__		final LibraryCacheManager lib = get()__		lib.registerInternal(id, requiredJarFiles)__	};registers,a,job,id,with,a,set,of,library,paths,that,are,required,to,run,the,job,for,every,registered,job,the,library,cache,manager,creates,a,class,loader,that,is,used,to,instantiate,the,job,s,environment,later,on,param,id,the,id,of,the,job,to,be,registered,param,required,jar,files,the,client,path,s,of,the,required,libraries,throws,ioexception,thrown,if,the,library,cache,manager,could,not,be,instantiated,or,one,of,the,requested,libraries,is,not,in,the,cache;public,static,void,register,final,job,id,id,final,string,required,jar,files,throws,ioexception,final,library,cache,manager,lib,get,lib,register,internal,id,required,jar,files
LibraryCacheManager -> void registerJob(JobID id, Collection<BlobKey> requiredJarFiles, Collection<URL> requiredClasspaths) 			throws IOException_;1444312509;Registers a job with its required jar files and classpaths. The jar files are identified by their blob keys.__@param id job ID_@param requiredJarFiles collection of blob keys identifying the required jar files_@param requiredClasspaths collection of classpaths that are added to the user code class loader_@throws IOException;void registerJob(JobID id, Collection<BlobKey> requiredJarFiles, Collection<URL> requiredClasspaths)_			throws IOException_;registers,a,job,with,its,required,jar,files,and,classpaths,the,jar,files,are,identified,by,their,blob,keys,param,id,job,id,param,required,jar,files,collection,of,blob,keys,identifying,the,required,jar,files,param,required,classpaths,collection,of,classpaths,that,are,added,to,the,user,code,class,loader,throws,ioexception;void,register,job,job,id,id,collection,blob,key,required,jar,files,collection,url,required,classpaths,throws,ioexception
LibraryCacheManager -> void registerJob(JobID id, Collection<BlobKey> requiredJarFiles, Collection<URL> requiredClasspaths) 			throws IOException_;1499173045;Registers a job with its required jar files and classpaths. The jar files are identified by their blob keys.__@param id job ID_@param requiredJarFiles collection of blob keys identifying the required jar files_@param requiredClasspaths collection of classpaths that are added to the user code class loader_@throws IOException if any error occurs when retrieving the required jar files__@see #unregisterJob(JobID) counterpart of this method;void registerJob(JobID id, Collection<BlobKey> requiredJarFiles, Collection<URL> requiredClasspaths)_			throws IOException_;registers,a,job,with,its,required,jar,files,and,classpaths,the,jar,files,are,identified,by,their,blob,keys,param,id,job,id,param,required,jar,files,collection,of,blob,keys,identifying,the,required,jar,files,param,required,classpaths,collection,of,classpaths,that,are,added,to,the,user,code,class,loader,throws,ioexception,if,any,error,occurs,when,retrieving,the,required,jar,files,see,unregister,job,job,id,counterpart,of,this,method;void,register,job,job,id,id,collection,blob,key,required,jar,files,collection,url,required,classpaths,throws,ioexception
LibraryCacheManager -> void registerJob(JobID id, Collection<BlobKey> requiredJarFiles, Collection<URL> requiredClasspaths) 			throws IOException_;1502201311;Registers a job with its required jar files and classpaths. The jar files are identified by their blob keys.__@param id job ID_@param requiredJarFiles collection of blob keys identifying the required jar files_@param requiredClasspaths collection of classpaths that are added to the user code class loader_@throws IOException if any error occurs when retrieving the required jar files__@see #unregisterJob(JobID) counterpart of this method;void registerJob(JobID id, Collection<BlobKey> requiredJarFiles, Collection<URL> requiredClasspaths)_			throws IOException_;registers,a,job,with,its,required,jar,files,and,classpaths,the,jar,files,are,identified,by,their,blob,keys,param,id,job,id,param,required,jar,files,collection,of,blob,keys,identifying,the,required,jar,files,param,required,classpaths,collection,of,classpaths,that,are,added,to,the,user,code,class,loader,throws,ioexception,if,any,error,occurs,when,retrieving,the,required,jar,files,see,unregister,job,job,id,counterpart,of,this,method;void,register,job,job,id,id,collection,blob,key,required,jar,files,collection,url,required,classpaths,throws,ioexception
LibraryCacheManager -> void registerJob(JobID id, Collection<PermanentBlobKey> requiredJarFiles, Collection<URL> requiredClasspaths) 		throws IOException_;1507212387;Registers a job with its required jar files and classpaths. The jar files are identified by_their blob keys and downloaded for use by a {@link ClassLoader}.__@param id job ID_@param requiredJarFiles collection of blob keys identifying the required jar files_@param requiredClasspaths collection of classpaths that are added to the user code class loader__@throws IOException if any error occurs when retrieving the required jar files__@see #unregisterJob(JobID) counterpart of this method;void registerJob(JobID id, Collection<PermanentBlobKey> requiredJarFiles, Collection<URL> requiredClasspaths)_		throws IOException_;registers,a,job,with,its,required,jar,files,and,classpaths,the,jar,files,are,identified,by,their,blob,keys,and,downloaded,for,use,by,a,link,class,loader,param,id,job,id,param,required,jar,files,collection,of,blob,keys,identifying,the,required,jar,files,param,required,classpaths,collection,of,classpaths,that,are,added,to,the,user,code,class,loader,throws,ioexception,if,any,error,occurs,when,retrieving,the,required,jar,files,see,unregister,job,job,id,counterpart,of,this,method;void,register,job,job,id,id,collection,permanent,blob,key,required,jar,files,collection,url,required,classpaths,throws,ioexception
LibraryCacheManager -> void registerJob(JobID id, Collection<PermanentBlobKey> requiredJarFiles, Collection<URL> requiredClasspaths) 		throws IOException_;1526549506;Registers a job with its required jar files and classpaths. The jar files are identified by_their blob keys and downloaded for use by a {@link ClassLoader}.__@param id job ID_@param requiredJarFiles collection of blob keys identifying the required jar files_@param requiredClasspaths collection of classpaths that are added to the user code class loader__@throws IOException if any error occurs when retrieving the required jar files__@see #unregisterJob(JobID) counterpart of this method;void registerJob(JobID id, Collection<PermanentBlobKey> requiredJarFiles, Collection<URL> requiredClasspaths)_		throws IOException_;registers,a,job,with,its,required,jar,files,and,classpaths,the,jar,files,are,identified,by,their,blob,keys,and,downloaded,for,use,by,a,link,class,loader,param,id,job,id,param,required,jar,files,collection,of,blob,keys,identifying,the,required,jar,files,param,required,classpaths,collection,of,classpaths,that,are,added,to,the,user,code,class,loader,throws,ioexception,if,any,error,occurs,when,retrieving,the,required,jar,files,see,unregister,job,job,id,counterpart,of,this,method;void,register,job,job,id,id,collection,permanent,blob,key,required,jar,files,collection,url,required,classpaths,throws,ioexception
LibraryCacheManager -> private int incrementReferenceCounter(final JobID jobID);1405024514;Increments the reference counter for the library manager entry with the given job ID.__@param jobID_the job ID identifying the library manager entry_@return the increased reference counter;private int incrementReferenceCounter(final JobID jobID) {__		while (true) {__			AtomicInteger ai = this.libraryReferenceCounter.get(jobID)__			if (ai == null) {__				ai = new AtomicInteger(1)__				if (this.libraryReferenceCounter.putIfAbsent(jobID, ai) == null) {_					return 1__				}__				_			} else {_				return ai.incrementAndGet()__			}_		}_	};increments,the,reference,counter,for,the,library,manager,entry,with,the,given,job,id,param,job,id,the,job,id,identifying,the,library,manager,entry,return,the,increased,reference,counter;private,int,increment,reference,counter,final,job,id,job,id,while,true,atomic,integer,ai,this,library,reference,counter,get,job,id,if,ai,null,ai,new,atomic,integer,1,if,this,library,reference,counter,put,if,absent,job,id,ai,null,return,1,else,return,ai,increment,and,get
LibraryCacheManager -> private int incrementReferenceCounter(final JobID jobID);1405090423;Increments the reference counter for the library manager entry with the given job ID.__@param jobID_the job ID identifying the library manager entry_@return the increased reference counter;private int incrementReferenceCounter(final JobID jobID) {__		while (true) {__			AtomicInteger ai = this.libraryReferenceCounter.get(jobID)__			if (ai == null) {__				ai = new AtomicInteger(1)__				if (this.libraryReferenceCounter.putIfAbsent(jobID, ai) == null) {_					return 1__				}__				_			} else {_				return ai.incrementAndGet()__			}_		}_	};increments,the,reference,counter,for,the,library,manager,entry,with,the,given,job,id,param,job,id,the,job,id,identifying,the,library,manager,entry,return,the,increased,reference,counter;private,int,increment,reference,counter,final,job,id,job,id,while,true,atomic,integer,ai,this,library,reference,counter,get,job,id,if,ai,null,ai,new,atomic,integer,1,if,this,library,reference,counter,put,if,absent,job,id,ai,null,return,1,else,return,ai,increment,and,get
LibraryCacheManager -> private int incrementReferenceCounter(final JobID jobID);1411236168;Increments the reference counter for the library manager entry with the given job ID.__@param jobID_the job ID identifying the library manager entry_@return the increased reference counter;private int incrementReferenceCounter(final JobID jobID) {__		while (true) {__			AtomicInteger ai = this.libraryReferenceCounter.get(jobID)__			if (ai == null) {__				ai = new AtomicInteger(1)__				if (this.libraryReferenceCounter.putIfAbsent(jobID, ai) == null) {_					return 1__				}__				_			} else {_				return ai.incrementAndGet()__			}_		}_	};increments,the,reference,counter,for,the,library,manager,entry,with,the,given,job,id,param,job,id,the,job,id,identifying,the,library,manager,entry,return,the,increased,reference,counter;private,int,increment,reference,counter,final,job,id,job,id,while,true,atomic,integer,ai,this,library,reference,counter,get,job,id,if,ai,null,ai,new,atomic,integer,1,if,this,library,reference,counter,put,if,absent,job,id,ai,null,return,1,else,return,ai,increment,and,get
LibraryCacheManager -> private int incrementReferenceCounter(final JobID jobID);1411236169;Increments the reference counter for the library manager entry with the given job ID.__@param jobID_the job ID identifying the library manager entry_@return the increased reference counter;private int incrementReferenceCounter(final JobID jobID) {__		while (true) {__			AtomicInteger ai = this.libraryReferenceCounter.get(jobID)__			if (ai == null) {__				ai = new AtomicInteger(1)__				if (this.libraryReferenceCounter.putIfAbsent(jobID, ai) == null) {_					return 1__				}__				_			} else {_				return ai.incrementAndGet()__			}_		}_	};increments,the,reference,counter,for,the,library,manager,entry,with,the,given,job,id,param,job,id,the,job,id,identifying,the,library,manager,entry,return,the,increased,reference,counter;private,int,increment,reference,counter,final,job,id,job,id,while,true,atomic,integer,ai,this,library,reference,counter,get,job,id,if,ai,null,ai,new,atomic,integer,1,if,this,library,reference,counter,put,if,absent,job,id,ai,null,return,1,else,return,ai,increment,and,get
LibraryCacheManager -> private int incrementReferenceCounter(final JobID jobID);1411473593;Increments the reference counter for the library manager entry with the given job ID.__@param jobID_the job ID identifying the library manager entry_@return the increased reference counter;private int incrementReferenceCounter(final JobID jobID) {__		while (true) {__			AtomicInteger ai = this.libraryReferenceCounter.get(jobID)__			if (ai == null) {__				ai = new AtomicInteger(1)__				if (this.libraryReferenceCounter.putIfAbsent(jobID, ai) == null) {_					return 1__				}__				_			} else {_				return ai.incrementAndGet()__			}_		}_	};increments,the,reference,counter,for,the,library,manager,entry,with,the,given,job,id,param,job,id,the,job,id,identifying,the,library,manager,entry,return,the,increased,reference,counter;private,int,increment,reference,counter,final,job,id,job,id,while,true,atomic,integer,ai,this,library,reference,counter,get,job,id,if,ai,null,ai,new,atomic,integer,1,if,this,library,reference,counter,put,if,absent,job,id,ai,null,return,1,else,return,ai,increment,and,get
LibraryCacheManager -> private int decrementReferenceCounter(final JobID jobID);1405024514;Decrements the reference counter for the library manager entry with the given job ID.__@param jobID_the job ID identifying the library manager entry_@return the decremented reference counter;private int decrementReferenceCounter(final JobID jobID) {__		final AtomicInteger ai = this.libraryReferenceCounter.get(jobID)___		if (ai == null) {_			throw new IllegalStateException("Cannot find reference counter entry for job " + jobID)__		}__		int retVal = ai.decrementAndGet()___		if (retVal == 0) {_			this.libraryReferenceCounter.remove(jobID)__		}__		return retVal__	};decrements,the,reference,counter,for,the,library,manager,entry,with,the,given,job,id,param,job,id,the,job,id,identifying,the,library,manager,entry,return,the,decremented,reference,counter;private,int,decrement,reference,counter,final,job,id,job,id,final,atomic,integer,ai,this,library,reference,counter,get,job,id,if,ai,null,throw,new,illegal,state,exception,cannot,find,reference,counter,entry,for,job,job,id,int,ret,val,ai,decrement,and,get,if,ret,val,0,this,library,reference,counter,remove,job,id,return,ret,val
LibraryCacheManager -> private int decrementReferenceCounter(final JobID jobID);1405090423;Decrements the reference counter for the library manager entry with the given job ID.__@param jobID_the job ID identifying the library manager entry_@return the decremented reference counter;private int decrementReferenceCounter(final JobID jobID) {__		final AtomicInteger ai = this.libraryReferenceCounter.get(jobID)___		if (ai == null) {_			throw new IllegalStateException("Cannot find reference counter entry for job " + jobID)__		}__		int retVal = ai.decrementAndGet()___		if (retVal == 0) {_			this.libraryReferenceCounter.remove(jobID)__		}__		return retVal__	};decrements,the,reference,counter,for,the,library,manager,entry,with,the,given,job,id,param,job,id,the,job,id,identifying,the,library,manager,entry,return,the,decremented,reference,counter;private,int,decrement,reference,counter,final,job,id,job,id,final,atomic,integer,ai,this,library,reference,counter,get,job,id,if,ai,null,throw,new,illegal,state,exception,cannot,find,reference,counter,entry,for,job,job,id,int,ret,val,ai,decrement,and,get,if,ret,val,0,this,library,reference,counter,remove,job,id,return,ret,val
LibraryCacheManager -> private int decrementReferenceCounter(final JobID jobID);1411236168;Decrements the reference counter for the library manager entry with the given job ID.__@param jobID_the job ID identifying the library manager entry_@return the decremented reference counter;private int decrementReferenceCounter(final JobID jobID) {__		final AtomicInteger ai = this.libraryReferenceCounter.get(jobID)___		if (ai == null) {_			throw new IllegalStateException("Cannot find reference counter entry for job " + jobID)__		}__		int retVal = ai.decrementAndGet()___		if (retVal == 0) {_			this.libraryReferenceCounter.remove(jobID)__		}__		return retVal__	};decrements,the,reference,counter,for,the,library,manager,entry,with,the,given,job,id,param,job,id,the,job,id,identifying,the,library,manager,entry,return,the,decremented,reference,counter;private,int,decrement,reference,counter,final,job,id,job,id,final,atomic,integer,ai,this,library,reference,counter,get,job,id,if,ai,null,throw,new,illegal,state,exception,cannot,find,reference,counter,entry,for,job,job,id,int,ret,val,ai,decrement,and,get,if,ret,val,0,this,library,reference,counter,remove,job,id,return,ret,val
LibraryCacheManager -> private int decrementReferenceCounter(final JobID jobID);1411236169;Decrements the reference counter for the library manager entry with the given job ID.__@param jobID_the job ID identifying the library manager entry_@return the decremented reference counter;private int decrementReferenceCounter(final JobID jobID) {__		final AtomicInteger ai = this.libraryReferenceCounter.get(jobID)___		if (ai == null) {_			throw new IllegalStateException("Cannot find reference counter entry for job " + jobID)__		}__		int retVal = ai.decrementAndGet()___		if (retVal == 0) {_			this.libraryReferenceCounter.remove(jobID)__		}__		return retVal__	};decrements,the,reference,counter,for,the,library,manager,entry,with,the,given,job,id,param,job,id,the,job,id,identifying,the,library,manager,entry,return,the,decremented,reference,counter;private,int,decrement,reference,counter,final,job,id,job,id,final,atomic,integer,ai,this,library,reference,counter,get,job,id,if,ai,null,throw,new,illegal,state,exception,cannot,find,reference,counter,entry,for,job,job,id,int,ret,val,ai,decrement,and,get,if,ret,val,0,this,library,reference,counter,remove,job,id,return,ret,val
LibraryCacheManager -> private int decrementReferenceCounter(final JobID jobID);1411473593;Decrements the reference counter for the library manager entry with the given job ID.__@param jobID_the job ID identifying the library manager entry_@return the decremented reference counter;private int decrementReferenceCounter(final JobID jobID) {__		final AtomicInteger ai = this.libraryReferenceCounter.get(jobID)___		if (ai == null) {_			throw new IllegalStateException("Cannot find reference counter entry for job " + jobID)__		}__		int retVal = ai.decrementAndGet()___		if (retVal == 0) {_			this.libraryReferenceCounter.remove(jobID)__		}__		return retVal__	};decrements,the,reference,counter,for,the,library,manager,entry,with,the,given,job,id,param,job,id,the,job,id,identifying,the,library,manager,entry,return,the,decremented,reference,counter;private,int,decrement,reference,counter,final,job,id,job,id,final,atomic,integer,ai,this,library,reference,counter,get,job,id,if,ai,null,throw,new,illegal,state,exception,cannot,find,reference,counter,entry,for,job,job,id,int,ret,val,ai,decrement,and,get,if,ret,val,0,this,library,reference,counter,remove,job,id,return,ret,val
LibraryCacheManager -> public static void readLibraryFromStream(final DataInput in) throws IOException;1405024514;Reads library data from the given stream.__@param in_the stream to read the library data from_@throws IOException_throws if an error occurs while reading from the stream;public static void readLibraryFromStream(final DataInput in) throws IOException {__		final LibraryCacheManager lib = get()__		lib.readLibraryFromStreamInternal(in)___	};reads,library,data,from,the,given,stream,param,in,the,stream,to,read,the,library,data,from,throws,ioexception,throws,if,an,error,occurs,while,reading,from,the,stream;public,static,void,read,library,from,stream,final,data,input,in,throws,ioexception,final,library,cache,manager,lib,get,lib,read,library,from,stream,internal,in
LibraryCacheManager -> public static void readLibraryFromStream(final DataInput in) throws IOException;1405090423;Reads library data from the given stream.__@param in_the stream to read the library data from_@throws IOException_throws if an error occurs while reading from the stream;public static void readLibraryFromStream(final DataInput in) throws IOException {__		final LibraryCacheManager lib = get()__		lib.readLibraryFromStreamInternal(in)___	};reads,library,data,from,the,given,stream,param,in,the,stream,to,read,the,library,data,from,throws,ioexception,throws,if,an,error,occurs,while,reading,from,the,stream;public,static,void,read,library,from,stream,final,data,input,in,throws,ioexception,final,library,cache,manager,lib,get,lib,read,library,from,stream,internal,in
LibraryCacheManager -> public static void readLibraryFromStream(final DataInput in) throws IOException;1411236168;Reads library data from the given stream.__@param in_the stream to read the library data from_@throws IOException_throws if an error occurs while reading from the stream;public static void readLibraryFromStream(final DataInput in) throws IOException {__		final LibraryCacheManager lib = get()__		lib.readLibraryFromStreamInternal(in)___	};reads,library,data,from,the,given,stream,param,in,the,stream,to,read,the,library,data,from,throws,ioexception,throws,if,an,error,occurs,while,reading,from,the,stream;public,static,void,read,library,from,stream,final,data,input,in,throws,ioexception,final,library,cache,manager,lib,get,lib,read,library,from,stream,internal,in
LibraryCacheManager -> public static void readLibraryFromStream(final DataInput in) throws IOException;1411236169;Reads library data from the given stream.__@param in_the stream to read the library data from_@throws IOException_throws if an error occurs while reading from the stream;public static void readLibraryFromStream(final DataInput in) throws IOException {__		final LibraryCacheManager lib = get()__		lib.readLibraryFromStreamInternal(in)___	};reads,library,data,from,the,given,stream,param,in,the,stream,to,read,the,library,data,from,throws,ioexception,throws,if,an,error,occurs,while,reading,from,the,stream;public,static,void,read,library,from,stream,final,data,input,in,throws,ioexception,final,library,cache,manager,lib,get,lib,read,library,from,stream,internal,in
LibraryCacheManager -> public static void readLibraryFromStream(final DataInput in) throws IOException;1411473593;Reads library data from the given stream.__@param in_the stream to read the library data from_@throws IOException_throws if an error occurs while reading from the stream;public static void readLibraryFromStream(final DataInput in) throws IOException {__		final LibraryCacheManager lib = get()__		lib.readLibraryFromStreamInternal(in)___	};reads,library,data,from,the,given,stream,param,in,the,stream,to,read,the,library,data,from,throws,ioexception,throws,if,an,error,occurs,while,reading,from,the,stream;public,static,void,read,library,from,stream,final,data,input,in,throws,ioexception,final,library,cache,manager,lib,get,lib,read,library,from,stream,internal,in
