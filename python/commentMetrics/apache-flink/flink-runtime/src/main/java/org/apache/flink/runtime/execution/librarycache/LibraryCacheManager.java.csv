commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Returns the user code class loader associated with id.  *  * @param id identifying the job  * @return ClassLoader which can load the user code  */ ;/**  * Returns the user code class loader associated with id.  *  * @param id identifying the job  * @return ClassLoader which can load the user code  */ ClassLoader getClassLoader(JobID id).
true;;3;2;/**  * Registers a job with its required jar files and classpaths. The jar files are identified by  * their blob keys and downloaded for use by a {@link ClassLoader}.  *  * @param id job ID  * @param requiredJarFiles collection of blob keys identifying the required jar files  * @param requiredClasspaths collection of classpaths that are added to the user code class loader  *  * @throws IOException if any error occurs when retrieving the required jar files  *  * @see #unregisterJob(JobID) counterpart of this method  */ ;/**  * Registers a job with its required jar files and classpaths. The jar files are identified by  * their blob keys and downloaded for use by a {@link ClassLoader}.  *  * @param id job ID  * @param requiredJarFiles collection of blob keys identifying the required jar files  * @param requiredClasspaths collection of classpaths that are added to the user code class loader  *  * @throws IOException if any error occurs when retrieving the required jar files  *  * @see #unregisterJob(JobID) counterpart of this method  */ void registerJob(JobID id, Collection<PermanentBlobKey> requiredJarFiles, Collection<URL> requiredClasspaths) throws IOException.
true;;4;2;/**  * Registers a job task execution with its required jar files and classpaths. The jar files are  * identified by their blob keys and downloaded for use by a {@link ClassLoader}.  *  * @param id job ID  * @param requiredJarFiles collection of blob keys identifying the required jar files  * @param requiredClasspaths collection of classpaths that are added to the user code class loader  *  * @throws IOException if any error occurs when retrieving the required jar files  *  * @see #unregisterTask(JobID, ExecutionAttemptID) counterpart of this method  */ ;/**  * Registers a job task execution with its required jar files and classpaths. The jar files are  * identified by their blob keys and downloaded for use by a {@link ClassLoader}.  *  * @param id job ID  * @param requiredJarFiles collection of blob keys identifying the required jar files  * @param requiredClasspaths collection of classpaths that are added to the user code class loader  *  * @throws IOException if any error occurs when retrieving the required jar files  *  * @see #unregisterTask(JobID, ExecutionAttemptID) counterpart of this method  */ void registerTask(JobID id, ExecutionAttemptID execution, Collection<PermanentBlobKey> requiredJarFiles, Collection<URL> requiredClasspaths) throws IOException.
true;;2;1;/**  * Unregisters a job task execution from the library cache manager.  * <p>  * <strong>Note:</strong> this is the counterpart of {@link #registerTask(JobID,  * ExecutionAttemptID, Collection, Collection)} and it will not remove any job added via  * {@link #registerJob(JobID, Collection, Collection)}!  *  * @param id job ID  *  * @see #registerTask(JobID, ExecutionAttemptID, Collection, Collection) counterpart of this method  */ ;/**  * Unregisters a job task execution from the library cache manager.  * <p>  * <strong>Note:</strong> this is the counterpart of {@link #registerTask(JobID,  * ExecutionAttemptID, Collection, Collection)} and it will not remove any job added via  * {@link #registerJob(JobID, Collection, Collection)}!  *  * @param id job ID  *  * @see #registerTask(JobID, ExecutionAttemptID, Collection, Collection) counterpart of this method  */ void unregisterTask(JobID id, ExecutionAttemptID execution).
true;;1;1;/**  * Unregisters a job from the library cache manager.  * <p>  * <strong>Note:</strong> this is the counterpart of {@link #registerJob(JobID, Collection,  * Collection)} and it will not remove any job task execution added via {@link  * #registerTask(JobID, ExecutionAttemptID, Collection, Collection)}!  *  * @param id job ID  *  * @see #registerJob(JobID, Collection, Collection) counterpart of this method  */ ;/**  * Unregisters a job from the library cache manager.  * <p>  * <strong>Note:</strong> this is the counterpart of {@link #registerJob(JobID, Collection,  * Collection)} and it will not remove any job task execution added via {@link  * #registerTask(JobID, ExecutionAttemptID, Collection, Collection)}!  *  * @param id job ID  *  * @see #registerJob(JobID, Collection, Collection) counterpart of this method  */ void unregisterJob(JobID id).
true;;0;1;/**  * Shutdown method which may release created class loaders.  */ ;/**  * Shutdown method which may release created class loaders.  */ void shutdown().
true;;1;1;/**  * True if the LibraryCacheManager has a user code class loader registered  * for the given job id.  *  * @param jobId identifying the job for which to check the class loader  * @return true if the user code class loader for the given job has been registered. Otherwise false.  */ ;/**  * True if the LibraryCacheManager has a user code class loader registered  * for the given job id.  *  * @param jobId identifying the job for which to check the class loader  * @return true if the user code class loader for the given job has been registered. Otherwise false.  */ boolean hasClassLoader(@Nonnull JobID jobId).
