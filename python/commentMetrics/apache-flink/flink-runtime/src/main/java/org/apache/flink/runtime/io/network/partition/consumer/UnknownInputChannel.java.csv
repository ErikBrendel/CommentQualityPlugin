commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void requestSubpartition(int subpartitionIndex) throws IOException { // Nothing to do here }
false;public;0;5;;@Override public Optional<BufferAndAvailability> getNextBuffer() throws IOException {     // Nothing to do here     throw new UnsupportedOperationException("Cannot retrieve a buffer from an UnknownInputChannel"). }
false;public;1;4;;@Override public void sendTaskEvent(TaskEvent event) throws IOException { // Nothing to do here }
true;public;0;4;/**  * Returns <code>false</code>.  *  * <p><strong>Important</strong>: It is important that the method correctly  * always <code>false</code> for unknown input channels in order to not  * finish the consumption of an intermediate result partition early.  */ ;/**  * Returns <code>false</code>.  *  * <p><strong>Important</strong>: It is important that the method correctly  * always <code>false</code> for unknown input channels in order to not  * finish the consumption of an intermediate result partition early.  */ @Override public boolean isReleased() {     return false. }
false;public;0;3;;@Override public void notifySubpartitionConsumed() { }
false;public;0;4;;@Override public void releaseAllResources() throws IOException { // Nothing to do here }
false;public;0;4;;@Override public String toString() {     return "UnknownInputChannel [" + partitionId + "]". }
false;public;1;3;;// ------------------------------------------------------------------------ // Graduation to a local or remote input channel at runtime // ------------------------------------------------------------------------ public RemoteInputChannel toRemoteInputChannel(ConnectionID producerAddress) {     return new RemoteInputChannel(inputGate, channelIndex, partitionId, checkNotNull(producerAddress), connectionManager, initialBackoff, maxBackoff, metrics). }
false;public;0;3;;public LocalInputChannel toLocalInputChannel() {     return new LocalInputChannel(inputGate, channelIndex, partitionId, partitionManager, taskEventDispatcher, initialBackoff, maxBackoff, metrics). }
