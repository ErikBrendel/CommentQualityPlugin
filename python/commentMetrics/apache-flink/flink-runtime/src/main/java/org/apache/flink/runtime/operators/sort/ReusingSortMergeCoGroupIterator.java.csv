commented;modifiers;parameterAmount;loc;comment;code
false;public;0;2;;@Override public void open() { }
false;public;0;2;;@Override public void close() { }
false;public;0;4;;@Override public Iterable<T1> getValues1() {     return this.firstReturn. }
false;public;0;4;;@Override public Iterable<T2> getValues2() {     return this.secondReturn. }
false;public;0;70;;@Override public boolean next() throws IOException {     boolean firstEmpty = true.     boolean secondEmpty = true.     if (this.matchStatus != MatchStatus.FIRST_EMPTY) {         if (this.matchStatus == MatchStatus.FIRST_REMAINED) {             // comparator is still set correctly             firstEmpty = false.         } else {             if (this.iterator1.nextKey()) {                 this.comp.setReference(this.iterator1.getCurrent()).                 firstEmpty = false.             }         }     }     if (this.matchStatus != MatchStatus.SECOND_EMPTY) {         if (this.matchStatus == MatchStatus.SECOND_REMAINED) {             secondEmpty = false.         } else {             if (iterator2.nextKey()) {                 secondEmpty = false.             }         }     }     if (firstEmpty && secondEmpty) {         // both inputs are empty         return false.     } else if (firstEmpty && !secondEmpty) {         // input1 is empty, input2 not         this.firstReturn = Collections.emptySet().         this.secondReturn = this.iterator2.getValues().         this.matchStatus = MatchStatus.FIRST_EMPTY.         return true.     } else if (!firstEmpty && secondEmpty) {         // input1 is not empty, input 2 is empty         this.firstReturn = this.iterator1.getValues().         this.secondReturn = Collections.emptySet().         this.matchStatus = MatchStatus.SECOND_EMPTY.         return true.     } else {         // both inputs are not empty         final int comp = this.comp.compareToReference(this.iterator2.getCurrent()).         if (0 == comp) {             // keys match             this.firstReturn = this.iterator1.getValues().             this.secondReturn = this.iterator2.getValues().             this.matchStatus = MatchStatus.NONE_REMAINED.         } else if (0 < comp) {             // key1 goes first             this.firstReturn = this.iterator1.getValues().             this.secondReturn = Collections.emptySet().             this.matchStatus = MatchStatus.SECOND_REMAINED.         } else {             // key 2 goes first             this.firstReturn = Collections.emptySet().             this.secondReturn = this.iterator2.getValues().             this.matchStatus = MatchStatus.FIRST_REMAINED.         }         return true.     } }
