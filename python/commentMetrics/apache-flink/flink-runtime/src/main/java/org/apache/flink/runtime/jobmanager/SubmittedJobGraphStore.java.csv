commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Starts the {@link SubmittedJobGraphStore} service.  */ ;/**  * Starts the {@link SubmittedJobGraphStore} service.  */ void start(SubmittedJobGraphListener jobGraphListener) throws Exception.
true;;0;1;/**  * Stops the {@link SubmittedJobGraphStore} service.  */ ;/**  * Stops the {@link SubmittedJobGraphStore} service.  */ void stop() throws Exception.
true;;1;2;/**  * Returns the {@link SubmittedJobGraph} with the given {@link JobID} or  * {@code null} if no job was registered.  */ ;/**  * Returns the {@link SubmittedJobGraph} with the given {@link JobID} or  * {@code null} if no job was registered.  */ @Nullable SubmittedJobGraph recoverJobGraph(JobID jobId) throws Exception.
true;;1;1;/**  * Adds the {@link SubmittedJobGraph} instance.  *  * <p>If a job graph with the same {@link JobID} exists, it is replaced.  */ ;/**  * Adds the {@link SubmittedJobGraph} instance.  *  * <p>If a job graph with the same {@link JobID} exists, it is replaced.  */ void putJobGraph(SubmittedJobGraph jobGraph) throws Exception.
true;;1;1;/**  * Removes the {@link SubmittedJobGraph} with the given {@link JobID} if it exists.  */ ;/**  * Removes the {@link SubmittedJobGraph} with the given {@link JobID} if it exists.  */ void removeJobGraph(JobID jobId) throws Exception.
true;;1;1;/**  * Releases the locks on the specified {@link JobGraph}.  *  * Releasing the locks allows that another instance can delete the job from  * the {@link SubmittedJobGraphStore}.  *  * @param jobId specifying the job to release the locks for  * @throws Exception if the locks cannot be released  */ ;/**  * Releases the locks on the specified {@link JobGraph}.  *  * Releasing the locks allows that another instance can delete the job from  * the {@link SubmittedJobGraphStore}.  *  * @param jobId specifying the job to release the locks for  * @throws Exception if the locks cannot be released  */ void releaseJobGraph(JobID jobId) throws Exception.
true;;0;1;/**  * Get all job ids of submitted job graphs to the submitted job graph store.  *  * @return Collection of submitted job ids  * @throws Exception if the operation fails  */ ;/**  * Get all job ids of submitted job graphs to the submitted job graph store.  *  * @return Collection of submitted job ids  * @throws Exception if the operation fails  */ Collection<JobID> getJobIds() throws Exception.
true;;1;1;/**  * Callback for {@link SubmittedJobGraph} instances added by a different {@link  * SubmittedJobGraphStore} instance.  *  * <p><strong>Important:</strong> It is possible to get false positives and be notified  * about a job graph, which was added by this instance.  *  * @param jobId The {@link JobID} of the added job graph  */ ;/**  * Callback for {@link SubmittedJobGraph} instances added by a different {@link  * SubmittedJobGraphStore} instance.  *  * <p><strong>Important:</strong> It is possible to get false positives and be notified  * about a job graph, which was added by this instance.  *  * @param jobId The {@link JobID} of the added job graph  */ void onAddedJobGraph(JobID jobId).
true;;1;1;/**  * Callback for {@link SubmittedJobGraph} instances removed by a different {@link  * SubmittedJobGraphStore} instance.  *  * @param jobId The {@link JobID} of the removed job graph  */ ;/**  * Callback for {@link SubmittedJobGraph} instances removed by a different {@link  * SubmittedJobGraphStore} instance.  *  * @param jobId The {@link JobID} of the removed job graph  */ void onRemovedJobGraph(JobID jobId).
