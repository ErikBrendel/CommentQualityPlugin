commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;25;;public static HighAvailabilityServices createAvailableOrEmbeddedServices(Configuration config, Executor executor) throws Exception {     HighAvailabilityMode highAvailabilityMode = LeaderRetrievalUtils.getRecoveryMode(config).     switch(highAvailabilityMode) {         case NONE:             return new EmbeddedHaServices(executor).         case ZOOKEEPER:             BlobStoreService blobStoreService = BlobUtils.createBlobStoreFromConfig(config).             return new ZooKeeperHaServices(ZooKeeperUtils.startCuratorFramework(config), executor, config, blobStoreService).         case FACTORY_CLASS:             return createCustomHAServices(config, executor).         default:             throw new Exception("High availability mode " + highAvailabilityMode + " is not supported.").     } }
false;public,static;3;58;;public static HighAvailabilityServices createHighAvailabilityServices(Configuration configuration, Executor executor, AddressResolution addressResolution) throws Exception {     HighAvailabilityMode highAvailabilityMode = LeaderRetrievalUtils.getRecoveryMode(configuration).     switch(highAvailabilityMode) {         case NONE:             final Tuple2<String, Integer> hostnamePort = getJobManagerAddress(configuration).             final String jobManagerRpcUrl = AkkaRpcServiceUtils.getRpcUrl(hostnamePort.f0, hostnamePort.f1, JobMaster.JOB_MANAGER_NAME, addressResolution, configuration).             final String resourceManagerRpcUrl = AkkaRpcServiceUtils.getRpcUrl(hostnamePort.f0, hostnamePort.f1, ResourceManager.RESOURCE_MANAGER_NAME, addressResolution, configuration).             final String dispatcherRpcUrl = AkkaRpcServiceUtils.getRpcUrl(hostnamePort.f0, hostnamePort.f1, Dispatcher.DISPATCHER_NAME, addressResolution, configuration).             final String address = checkNotNull(configuration.getString(RestOptions.ADDRESS), "%s must be set", RestOptions.ADDRESS.key()).             final int port = configuration.getInteger(RestOptions.PORT).             final boolean enableSSL = SSLUtils.isRestSSLEnabled(configuration).             final String protocol = enableSSL ? "https://" : "http://".             return new StandaloneHaServices(resourceManagerRpcUrl, dispatcherRpcUrl, jobManagerRpcUrl, String.format("%s%s:%s", protocol, address, port)).         case ZOOKEEPER:             BlobStoreService blobStoreService = BlobUtils.createBlobStoreFromConfig(configuration).             return new ZooKeeperHaServices(ZooKeeperUtils.startCuratorFramework(configuration), executor, configuration, blobStoreService).         case FACTORY_CLASS:             return createCustomHAServices(configuration, executor).         default:             throw new Exception("Recovery mode " + highAvailabilityMode + " is not supported.").     } }
true;public,static;1;18;/**  * Returns the JobManager's hostname and port extracted from the given  * {@link Configuration}.  *  * @param configuration Configuration to extract the JobManager's address from  * @return The JobManager's hostname and port  * @throws ConfigurationException if the JobManager's address cannot be extracted from the configuration  */ ;/**  * Returns the JobManager's hostname and port extracted from the given  * {@link Configuration}.  *  * @param configuration Configuration to extract the JobManager's address from  * @return The JobManager's hostname and port  * @throws ConfigurationException if the JobManager's address cannot be extracted from the configuration  */ public static Tuple2<String, Integer> getJobManagerAddress(Configuration configuration) throws ConfigurationException {     final String hostname = configuration.getString(JobManagerOptions.ADDRESS).     final int port = configuration.getInteger(JobManagerOptions.PORT).     if (hostname == null) {         throw new ConfigurationException("Config parameter '" + JobManagerOptions.ADDRESS + "' is missing (hostname/address of JobManager to connect to).").     }     if (port <= 0 || port >= 65536) {         throw new ConfigurationException("Invalid value for '" + JobManagerOptions.PORT + "' (port of the JobManager actor system) : " + port + ".  it must be greater than 0 and less than 65536.").     }     return Tuple2.of(hostname, port). }
false;private,static;2;29;;private static HighAvailabilityServices createCustomHAServices(Configuration config, Executor executor) throws FlinkException {     final ClassLoader classLoader = Thread.currentThread().getContextClassLoader().     final String haServicesClassName = config.getString(HighAvailabilityOptions.HA_MODE).     final HighAvailabilityServicesFactory highAvailabilityServicesFactory.     try {         highAvailabilityServicesFactory = InstantiationUtil.instantiate(haServicesClassName, HighAvailabilityServicesFactory.class, classLoader).     } catch (Exception e) {         throw new FlinkException(String.format("Could not instantiate the HighAvailabilityServicesFactory '%s'. Please make sure that this class is on your class path.", haServicesClassName), e).     }     try {         return highAvailabilityServicesFactory.createHAServices(config, executor).     } catch (Exception e) {         throw new FlinkException(String.format("Could not create the ha services from the instantiated HighAvailabilityServicesFactory %s.", haServicesClassName), e).     } }
