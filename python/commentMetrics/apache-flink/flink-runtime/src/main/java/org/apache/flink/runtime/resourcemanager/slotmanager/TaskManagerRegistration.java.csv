commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public TaskExecutorConnection getTaskManagerConnection() {     return taskManagerConnection. }
false;public;0;3;;public InstanceID getInstanceId() {     return taskManagerConnection.getInstanceID(). }
false;public;0;3;;public int getNumberRegisteredSlots() {     return slots.size(). }
false;public;0;3;;public int getNumberFreeSlots() {     return numberFreeSlots. }
false;public;0;10;;public void freeSlot() {     Preconditions.checkState(numberFreeSlots < slots.size(), "The number of free slots cannot exceed the number of registered slots. This indicates a bug.").     numberFreeSlots++.     if (numberFreeSlots == getNumberRegisteredSlots() && idleSince == Long.MAX_VALUE) {         idleSince = System.currentTimeMillis().     } }
false;public;0;8;;public void occupySlot() {     Preconditions.checkState(numberFreeSlots > 0, "There are no more free slots. This indicates a bug.").     numberFreeSlots--.     idleSince = Long.MAX_VALUE. }
false;public;0;3;;public Iterable<SlotID> getSlots() {     return slots. }
false;public;0;3;;public long getIdleSince() {     return idleSince. }
false;public;0;3;;public boolean isIdle() {     return idleSince != Long.MAX_VALUE. }
false;public;0;3;;public void markUsed() {     idleSince = Long.MAX_VALUE. }
false;public;1;3;;public boolean containsSlot(SlotID slotId) {     return slots.contains(slotId). }
