# id;timestamp;commentText;codeText;commentWords;codeWords
NonReusingKeyGroupedIterator -> public ValuesIterator getValues();1420654570;Returns an iterator over all values that belong to the current key. The iterator is initially <code>null</code>_(before the first call to {@link #nextKey()} and after all keys are consumed. In general, this method returns_always a non-null value, if a previous call to {@link #nextKey()} return <code>true</code>.__@return Iterator over all values that belong to the current key.;public ValuesIterator getValues() {_		return this.valuesIterator__	};returns,an,iterator,over,all,values,that,belong,to,the,current,key,the,iterator,is,initially,code,null,code,before,the,first,call,to,link,next,key,and,after,all,keys,are,consumed,in,general,this,method,returns,always,a,non,null,value,if,a,previous,call,to,link,next,key,return,code,true,code,return,iterator,over,all,values,that,belong,to,the,current,key;public,values,iterator,get,values,return,this,values,iterator
NonReusingKeyGroupedIterator -> public ValuesIterator getValues();1420663430;Returns an iterator over all values that belong to the current key. The iterator is initially <code>null</code>_(before the first call to {@link #nextKey()} and after all keys are consumed. In general, this method returns_always a non-null value, if a previous call to {@link #nextKey()} return <code>true</code>.__@return Iterator over all values that belong to the current key.;public ValuesIterator getValues() {_		return this.valuesIterator__	};returns,an,iterator,over,all,values,that,belong,to,the,current,key,the,iterator,is,initially,code,null,code,before,the,first,call,to,link,next,key,and,after,all,keys,are,consumed,in,general,this,method,returns,always,a,non,null,value,if,a,previous,call,to,link,next,key,return,code,true,code,return,iterator,over,all,values,that,belong,to,the,current,key;public,values,iterator,get,values,return,this,values,iterator
NonReusingKeyGroupedIterator -> public ValuesIterator getValues();1438716926;Returns an iterator over all values that belong to the current key. The iterator is initially <code>null</code>_(before the first call to {@link #nextKey()} and after all keys are consumed. In general, this method returns_always a non-null value, if a previous call to {@link #nextKey()} return <code>true</code>.__@return Iterator over all values that belong to the current key.;public ValuesIterator getValues() {_		return this.valuesIterator__	};returns,an,iterator,over,all,values,that,belong,to,the,current,key,the,iterator,is,initially,code,null,code,before,the,first,call,to,link,next,key,and,after,all,keys,are,consumed,in,general,this,method,returns,always,a,non,null,value,if,a,previous,call,to,link,next,key,return,code,true,code,return,iterator,over,all,values,that,belong,to,the,current,key;public,values,iterator,get,values,return,this,values,iterator
NonReusingKeyGroupedIterator -> public NonReusingKeyGroupedIterator(MutableObjectIterator<E> iterator, TypeComparator<E> comparator);1420663430;Initializes the KeyGroupedIterator. It requires an iterator which returns its result_sorted by the key fields.__@param iterator An iterator over records, which are sorted by the key fields, in any order._@param comparator The comparator for the data type iterated over.;public NonReusingKeyGroupedIterator(MutableObjectIterator<E> iterator, TypeComparator<E> comparator) {_		if (iterator == null || comparator == null) {_			throw new NullPointerException()__		}_		_		this.iterator = iterator__		this.comparator = comparator__	};initializes,the,key,grouped,iterator,it,requires,an,iterator,which,returns,its,result,sorted,by,the,key,fields,param,iterator,an,iterator,over,records,which,are,sorted,by,the,key,fields,in,any,order,param,comparator,the,comparator,for,the,data,type,iterated,over;public,non,reusing,key,grouped,iterator,mutable,object,iterator,e,iterator,type,comparator,e,comparator,if,iterator,null,comparator,null,throw,new,null,pointer,exception,this,iterator,iterator,this,comparator,comparator
NonReusingKeyGroupedIterator -> public NonReusingKeyGroupedIterator(MutableObjectIterator<E> iterator, TypeComparator<E> comparator);1438716926;Initializes the KeyGroupedIterator. It requires an iterator which returns its result_sorted by the key fields.__@param iterator An iterator over records, which are sorted by the key fields, in any order._@param comparator The comparator for the data type iterated over.;public NonReusingKeyGroupedIterator(MutableObjectIterator<E> iterator, TypeComparator<E> comparator) {_		if (iterator == null || comparator == null) {_			throw new NullPointerException()__		}_		_		this.iterator = iterator__		this.comparator = comparator__	};initializes,the,key,grouped,iterator,it,requires,an,iterator,which,returns,its,result,sorted,by,the,key,fields,param,iterator,an,iterator,over,records,which,are,sorted,by,the,key,fields,in,any,order,param,comparator,the,comparator,for,the,data,type,iterated,over;public,non,reusing,key,grouped,iterator,mutable,object,iterator,e,iterator,type,comparator,e,comparator,if,iterator,null,comparator,null,throw,new,null,pointer,exception,this,iterator,iterator,this,comparator,comparator
NonReusingKeyGroupedIterator -> public NonReusingKeyGroupedIterator(MutableObjectIterator<E> iterator, TypeComparator<E> comparator);1494245028;Initializes the KeyGroupedIterator. It requires an iterator which returns its result_sorted by the key fields.__@param iterator An iterator over records, which are sorted by the key fields, in any order._@param comparator The comparator for the data type iterated over.;public NonReusingKeyGroupedIterator(MutableObjectIterator<E> iterator, TypeComparator<E> comparator) {_		if (iterator == null || comparator == null) {_			throw new NullPointerException()__		}_		_		this.iterator = iterator__		this.comparator = comparator__	};initializes,the,key,grouped,iterator,it,requires,an,iterator,which,returns,its,result,sorted,by,the,key,fields,param,iterator,an,iterator,over,records,which,are,sorted,by,the,key,fields,in,any,order,param,comparator,the,comparator,for,the,data,type,iterated,over;public,non,reusing,key,grouped,iterator,mutable,object,iterator,e,iterator,type,comparator,e,comparator,if,iterator,null,comparator,null,throw,new,null,pointer,exception,this,iterator,iterator,this,comparator,comparator
NonReusingKeyGroupedIterator -> public boolean nextKey() throws IOException;1420654570;Moves the iterator to the next key. This method may skip any values that have not yet been returned by the_iterator created by the {@link #getValues()} method. Hence, if called multiple times it "removes" key groups.__@return true, if the input iterator has an other group of records with the same key.;public boolean nextKey() throws IOException {_		_		if (lookahead != null) {_			_			this.comparator.setReference(this.lookahead)__			this.valuesIterator.next = this.lookahead__			this.lastKeyRecord = this.lookahead__			this.lookahead = null__			this.valuesIterator.iteratorAvailable = true__			return true__		}_		_		_		if (this.done) {_			return false__		}_			_		if (this.valuesIterator != null) {_			_			_			E next__			while (true) {_				if ((next = this.iterator.next()) != null) {_					if (!this.comparator.equalToReference(next)) {_						_						this.comparator.setReference(next)__						this.valuesIterator.next = next__						this.lastKeyRecord = next__						this.valuesIterator.iteratorAvailable = true__						return true__					}_				}_				else {_					_					this.valuesIterator.next = null__					this.valuesIterator = null__					this.lastKeyRecord = null__					this.done = true__					return false__				}_			}_		}_		else {_			_			_			E first = this.iterator.next()__			if (first != null) {_				this.comparator.setReference(first)__				this.valuesIterator = new ValuesIterator(first)__				this.lastKeyRecord = first__				return true__			}_			else {_				_				this.done = true__				return false__			}_		}_	};moves,the,iterator,to,the,next,key,this,method,may,skip,any,values,that,have,not,yet,been,returned,by,the,iterator,created,by,the,link,get,values,method,hence,if,called,multiple,times,it,removes,key,groups,return,true,if,the,input,iterator,has,an,other,group,of,records,with,the,same,key;public,boolean,next,key,throws,ioexception,if,lookahead,null,this,comparator,set,reference,this,lookahead,this,values,iterator,next,this,lookahead,this,last,key,record,this,lookahead,this,lookahead,null,this,values,iterator,iterator,available,true,return,true,if,this,done,return,false,if,this,values,iterator,null,e,next,while,true,if,next,this,iterator,next,null,if,this,comparator,equal,to,reference,next,this,comparator,set,reference,next,this,values,iterator,next,next,this,last,key,record,next,this,values,iterator,iterator,available,true,return,true,else,this,values,iterator,next,null,this,values,iterator,null,this,last,key,record,null,this,done,true,return,false,else,e,first,this,iterator,next,if,first,null,this,comparator,set,reference,first,this,values,iterator,new,values,iterator,first,this,last,key,record,first,return,true,else,this,done,true,return,false
NonReusingKeyGroupedIterator -> public boolean nextKey() throws IOException;1420663430;Moves the iterator to the next key. This method may skip any values that have not yet been returned by the_iterator created by the {@link #getValues()} method. Hence, if called multiple times it "removes" key groups.__@return true, if the input iterator has an other group of records with the same key.;public boolean nextKey() throws IOException {_		_		if (lookahead != null) {_			_			this.comparator.setReference(this.lookahead)__			this.valuesIterator.next = this.lookahead__			this.lastKeyRecord = this.lookahead__			this.lookahead = null__			this.valuesIterator.iteratorAvailable = true__			return true__		}_		_		_		if (this.done) {_			return false__		}_			_		if (this.valuesIterator != null) {_			_			_			E next__			while (true) {_				if ((next = this.iterator.next()) != null) {_					if (!this.comparator.equalToReference(next)) {_						_						this.comparator.setReference(next)__						this.valuesIterator.next = next__						this.lastKeyRecord = next__						this.valuesIterator.iteratorAvailable = true__						return true__					}_				}_				else {_					_					this.valuesIterator.next = null__					this.valuesIterator = null__					this.lastKeyRecord = null__					this.done = true__					return false__				}_			}_		}_		else {_			_			_			E first = this.iterator.next()__			if (first != null) {_				this.comparator.setReference(first)__				this.valuesIterator = new ValuesIterator(first)__				this.lastKeyRecord = first__				return true__			}_			else {_				_				this.done = true__				return false__			}_		}_	};moves,the,iterator,to,the,next,key,this,method,may,skip,any,values,that,have,not,yet,been,returned,by,the,iterator,created,by,the,link,get,values,method,hence,if,called,multiple,times,it,removes,key,groups,return,true,if,the,input,iterator,has,an,other,group,of,records,with,the,same,key;public,boolean,next,key,throws,ioexception,if,lookahead,null,this,comparator,set,reference,this,lookahead,this,values,iterator,next,this,lookahead,this,last,key,record,this,lookahead,this,lookahead,null,this,values,iterator,iterator,available,true,return,true,if,this,done,return,false,if,this,values,iterator,null,e,next,while,true,if,next,this,iterator,next,null,if,this,comparator,equal,to,reference,next,this,comparator,set,reference,next,this,values,iterator,next,next,this,last,key,record,next,this,values,iterator,iterator,available,true,return,true,else,this,values,iterator,next,null,this,values,iterator,null,this,last,key,record,null,this,done,true,return,false,else,e,first,this,iterator,next,if,first,null,this,comparator,set,reference,first,this,values,iterator,new,values,iterator,first,this,last,key,record,first,return,true,else,this,done,true,return,false
NonReusingKeyGroupedIterator -> public boolean nextKey() throws IOException;1438716926;Moves the iterator to the next key. This method may skip any values that have not yet been returned by the_iterator created by the {@link #getValues()} method. Hence, if called multiple times it "removes" key groups.__@return true, if the input iterator has an other group of records with the same key.;public boolean nextKey() throws IOException {_		_		if (lookahead != null) {_			_			this.comparator.setReference(this.lookahead)__			this.valuesIterator.next = this.lookahead__			this.lastKeyRecord = this.lookahead__			this.lookahead = null__			this.valuesIterator.iteratorAvailable = true__			return true__		}_		_		_		if (this.done) {_			return false__		}_			_		if (this.valuesIterator != null) {_			_			_			E next__			while (true) {_				if ((next = this.iterator.next()) != null) {_					if (!this.comparator.equalToReference(next)) {_						_						this.comparator.setReference(next)__						this.valuesIterator.next = next__						this.lastKeyRecord = next__						this.valuesIterator.iteratorAvailable = true__						return true__					}_				}_				else {_					_					this.valuesIterator.next = null__					this.valuesIterator = null__					this.lastKeyRecord = null__					this.done = true__					return false__				}_			}_		}_		else {_			_			_			E first = this.iterator.next()__			if (first != null) {_				this.comparator.setReference(first)__				this.valuesIterator = new ValuesIterator(first)__				this.lastKeyRecord = first__				return true__			}_			else {_				_				this.done = true__				return false__			}_		}_	};moves,the,iterator,to,the,next,key,this,method,may,skip,any,values,that,have,not,yet,been,returned,by,the,iterator,created,by,the,link,get,values,method,hence,if,called,multiple,times,it,removes,key,groups,return,true,if,the,input,iterator,has,an,other,group,of,records,with,the,same,key;public,boolean,next,key,throws,ioexception,if,lookahead,null,this,comparator,set,reference,this,lookahead,this,values,iterator,next,this,lookahead,this,last,key,record,this,lookahead,this,lookahead,null,this,values,iterator,iterator,available,true,return,true,if,this,done,return,false,if,this,values,iterator,null,e,next,while,true,if,next,this,iterator,next,null,if,this,comparator,equal,to,reference,next,this,comparator,set,reference,next,this,values,iterator,next,next,this,last,key,record,next,this,values,iterator,iterator,available,true,return,true,else,this,values,iterator,next,null,this,values,iterator,null,this,last,key,record,null,this,done,true,return,false,else,e,first,this,iterator,next,if,first,null,this,comparator,set,reference,first,this,values,iterator,new,values,iterator,first,this,last,key,record,first,return,true,else,this,done,true,return,false
NonReusingKeyGroupedIterator -> public boolean nextKey() throws IOException;1494245028;Moves the iterator to the next key. This method may skip any values that have not yet been returned by the_iterator created by the {@link #getValues()} method. Hence, if called multiple times it "removes" key groups.__@return true, if the input iterator has an other group of records with the same key.;public boolean nextKey() throws IOException {_		_		if (lookahead != null) {_			_			this.comparator.setReference(this.lookahead)__			this.valuesIterator.next = this.lookahead__			this.lastKeyRecord = this.lookahead__			this.lookahead = null__			this.valuesIterator.iteratorAvailable = true__			return true__		}_		_		_		if (this.done) {_			return false__		}_			_		if (this.valuesIterator != null) {_			_			_			E next__			while (true) {_				if ((next = this.iterator.next()) != null) {_					if (!this.comparator.equalToReference(next)) {_						_						this.comparator.setReference(next)__						this.valuesIterator.next = next__						this.lastKeyRecord = next__						this.valuesIterator.iteratorAvailable = true__						return true__					}_				}_				else {_					_					this.valuesIterator.next = null__					this.valuesIterator = null__					this.lastKeyRecord = null__					this.done = true__					return false__				}_			}_		}_		else {_			_			_			E first = this.iterator.next()__			if (first != null) {_				this.comparator.setReference(first)__				this.valuesIterator = new ValuesIterator(first)__				this.lastKeyRecord = first__				return true__			}_			else {_				_				this.done = true__				return false__			}_		}_	};moves,the,iterator,to,the,next,key,this,method,may,skip,any,values,that,have,not,yet,been,returned,by,the,iterator,created,by,the,link,get,values,method,hence,if,called,multiple,times,it,removes,key,groups,return,true,if,the,input,iterator,has,an,other,group,of,records,with,the,same,key;public,boolean,next,key,throws,ioexception,if,lookahead,null,this,comparator,set,reference,this,lookahead,this,values,iterator,next,this,lookahead,this,last,key,record,this,lookahead,this,lookahead,null,this,values,iterator,iterator,available,true,return,true,if,this,done,return,false,if,this,values,iterator,null,e,next,while,true,if,next,this,iterator,next,null,if,this,comparator,equal,to,reference,next,this,comparator,set,reference,next,this,values,iterator,next,next,this,last,key,record,next,this,values,iterator,iterator,available,true,return,true,else,this,values,iterator,next,null,this,values,iterator,null,this,last,key,record,null,this,done,true,return,false,else,e,first,this,iterator,next,if,first,null,this,comparator,set,reference,first,this,values,iterator,new,values,iterator,first,this,last,key,record,first,return,true,else,this,done,true,return,false
