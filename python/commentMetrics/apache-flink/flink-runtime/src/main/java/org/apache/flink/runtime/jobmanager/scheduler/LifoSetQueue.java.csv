commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override public boolean offer(E e) {     if (e == null) {         throw new NullPointerException().     }     if (set.add(e)) {         lifo.add(e).     }     return true. }
false;public;0;11;;@Override public E poll() {     int size = lifo.size().     if (size > 0) {         E element = lifo.remove(size - 1).         set.remove(element).         return element.     } else {         return null.     } }
false;public;0;9;;@Override public E peek() {     int size = lifo.size().     if (size > 0) {         return lifo.get(size - 1).     } else {         return null.     } }
false;public;0;4;;@Override public boolean hasNext() {     return currentPos >= 0. }
false;public;0;9;;@Override public E next() {     if (!hasNext()) {         throw new NoSuchElementException().     } else {         posToRemove = currentPos.         return lifo.get(currentPos--).     } }
false;public;0;9;;@Override public void remove() {     if (posToRemove == -1) {         throw new NoSuchElementException().     } else {         E element = lifo.remove(posToRemove).         set.remove(element).     } }
false;public;0;33;;@Override public Iterator<E> iterator() {     return new Iterator<E>() {          private int currentPos = lifo.size() - 1.          private int posToRemove = -1.          @Override         public boolean hasNext() {             return currentPos >= 0.         }          @Override         public E next() {             if (!hasNext()) {                 throw new NoSuchElementException().             } else {                 posToRemove = currentPos.                 return lifo.get(currentPos--).             }         }          @Override         public void remove() {             if (posToRemove == -1) {                 throw new NoSuchElementException().             } else {                 E element = lifo.remove(posToRemove).                 set.remove(element).             }         }     }. }
false;public;0;4;;@Override public int size() {     return lifo.size(). }
