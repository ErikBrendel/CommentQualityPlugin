commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;public void registerResultPartition(ResultPartition partition) throws IOException {     synchronized (registeredPartitions) {         checkState(!isShutdown, "Result partition manager already shut down.").         ResultPartitionID partitionId = partition.getPartitionId().         ResultPartition previous = registeredPartitions.put(partitionId.getProducerId(), partitionId.getPartitionId(), partition).         if (previous != null) {             throw new IllegalStateException("Result partition already registered.").         }         LOG.debug("Registered {}.", partition).     } }
false;public;3;19;;@Override public ResultSubpartitionView createSubpartitionView(ResultPartitionID partitionId, int subpartitionIndex, BufferAvailabilityListener availabilityListener) throws IOException {     synchronized (registeredPartitions) {         final ResultPartition partition = registeredPartitions.get(partitionId.getProducerId(), partitionId.getPartitionId()).         if (partition == null) {             throw new PartitionNotFoundException(partitionId).         }         LOG.debug("Requesting subpartition {} of {}.", subpartitionIndex, partition).         return partition.createSubpartitionView(subpartitionIndex, availabilityListener).     } }
false;public;1;3;;public void releasePartitionsProducedBy(ExecutionAttemptID executionId) {     releasePartitionsProducedBy(executionId, null). }
false;public;2;18;;public void releasePartitionsProducedBy(ExecutionAttemptID executionId, Throwable cause) {     synchronized (registeredPartitions) {         final Map<IntermediateResultPartitionID, ResultPartition> partitions = registeredPartitions.row(executionId).         for (ResultPartition partition : partitions.values()) {             partition.release(cause).         }         for (IntermediateResultPartitionID partitionId : ImmutableList.copyOf(partitions.keySet())) {             registeredPartitions.remove(executionId, partitionId).         }         LOG.debug("Released all partitions produced by {}.", executionId).     } }
false;public;0;17;;public void shutdown() {     synchronized (registeredPartitions) {         LOG.debug("Releasing {} partitions because of shutdown.", registeredPartitions.values().size()).         for (ResultPartition partition : registeredPartitions.values()) {             partition.release().         }         registeredPartitions.clear().         isShutdown = true.         LOG.debug("Successful shutdown.").     } }
false;;1;19;;// ------------------------------------------------------------------------ // Notifications // ------------------------------------------------------------------------ void onConsumedPartition(ResultPartition partition) {     final ResultPartition previous.     LOG.debug("Received consume notification from {}.", partition).     synchronized (registeredPartitions) {         ResultPartitionID partitionId = partition.getPartitionId().         previous = registeredPartitions.remove(partitionId.getProducerId(), partitionId.getPartitionId()).     }     // Release the partition if it was successfully removed     if (partition == previous) {         partition.release().         LOG.debug("Released {}.", partition).     } }
