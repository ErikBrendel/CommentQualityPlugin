commented;modifiers;parameterAmount;loc;comment;code
false;public;1;19;;@Override public void configure(ContainerSpecification container) throws IOException {     if (keystore != null) {         container.getArtifacts().add(ContainerSpecification.Artifact.newBuilder().setSource(keystore).setDest(TARGET_KEYSTORE_PATH).setCachable(false).build()).         container.getDynamicConfiguration().setString(SecurityOptions.SSL_KEYSTORE, TARGET_KEYSTORE_PATH.getPath()).     }     if (truststore != null) {         container.getArtifacts().add(ContainerSpecification.Artifact.newBuilder().setSource(truststore).setDest(TARGET_TRUSTSTORE_PATH).setCachable(false).build()).         container.getDynamicConfiguration().setString(SecurityOptions.SSL_TRUSTSTORE, TARGET_TRUSTSTORE_PATH.getPath()).     } }
false;public,static;0;3;;public static Builder newBuilder() {     return new Builder(). }
true;public;1;20;/**  * Configures the overlay using the current environment (and global configuration).  *  * The following Flink configuration settings are used to source the keystore and truststore:  *  - security.ssl.keystore  *  - security.ssl.truststore  */ ;/**  * Configures the overlay using the current environment (and global configuration).  *  * The following Flink configuration settings are used to source the keystore and truststore:  *  - security.ssl.keystore  *  - security.ssl.truststore  */ public Builder fromEnvironment(Configuration globalConfiguration) {     String keystore = globalConfiguration.getString(SecurityOptions.SSL_KEYSTORE).     if (keystore != null) {         keystorePath = new File(keystore).         if (!keystorePath.exists()) {             throw new IllegalStateException("Invalid configuration for " + SecurityOptions.SSL_KEYSTORE.key()).         }     }     String truststore = globalConfiguration.getString(SecurityOptions.SSL_TRUSTSTORE).     if (truststore != null) {         truststorePath = new File(truststore).         if (!truststorePath.exists()) {             throw new IllegalStateException("Invalid configuration for " + SecurityOptions.SSL_TRUSTSTORE.key()).         }     }     return this. }
false;public;0;3;;public SSLStoreOverlay build() {     return new SSLStoreOverlay(keystorePath, truststorePath). }
