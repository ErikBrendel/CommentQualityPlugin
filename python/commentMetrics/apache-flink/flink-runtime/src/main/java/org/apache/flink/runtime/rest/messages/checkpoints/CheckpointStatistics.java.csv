commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public long getId() {     return id. }
false;public;0;3;;public CheckpointStatsStatus getStatus() {     return status. }
false;public;0;3;;public boolean isSavepoint() {     return savepoint. }
false;public;0;3;;public long getTriggerTimestamp() {     return triggerTimestamp. }
false;public;0;3;;public long getLatestAckTimestamp() {     return latestAckTimestamp. }
false;public;0;3;;public long getStateSize() {     return stateSize. }
false;public;0;3;;public long getDuration() {     return duration. }
false;public;0;3;;public long getAlignmentBuffered() {     return alignmentBuffered. }
false;public;0;3;;public int getNumSubtasks() {     return numSubtasks. }
false;public;0;3;;public int getNumAckSubtasks() {     return numAckSubtasks. }
false;public;0;4;;@Nullable public Map<JobVertexID, TaskCheckpointStatistics> getCheckpointStatisticsPerTask() {     return checkpointStatisticsPerTask. }
false;public;1;21;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     CheckpointStatistics that = (CheckpointStatistics) o.     return id == that.id && savepoint == that.savepoint && triggerTimestamp == that.triggerTimestamp && latestAckTimestamp == that.latestAckTimestamp && stateSize == that.stateSize && duration == that.duration && alignmentBuffered == that.alignmentBuffered && numSubtasks == that.numSubtasks && numAckSubtasks == that.numAckSubtasks && status == that.status && Objects.equals(checkpointStatisticsPerTask, that.checkpointStatisticsPerTask). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(id, status, savepoint, triggerTimestamp, latestAckTimestamp, stateSize, duration, alignmentBuffered, numSubtasks, numAckSubtasks, checkpointStatisticsPerTask). }
false;public,static;2;82;;// ------------------------------------------------------------------------- // Static factory methods // ------------------------------------------------------------------------- public static CheckpointStatistics generateCheckpointStatistics(AbstractCheckpointStats checkpointStats, boolean includeTaskCheckpointStatistics) {     Preconditions.checkNotNull(checkpointStats).     Map<JobVertexID, TaskCheckpointStatistics> checkpointStatisticsPerTask.     if (includeTaskCheckpointStatistics) {         Collection<TaskStateStats> taskStateStats = checkpointStats.getAllTaskStateStats().         checkpointStatisticsPerTask = new HashMap<>(taskStateStats.size()).         for (TaskStateStats taskStateStat : taskStateStats) {             checkpointStatisticsPerTask.put(taskStateStat.getJobVertexId(), new TaskCheckpointStatistics(checkpointStats.getCheckpointId(), checkpointStats.getStatus(), taskStateStat.getLatestAckTimestamp(), taskStateStat.getStateSize(), taskStateStat.getEndToEndDuration(checkpointStats.getTriggerTimestamp()), taskStateStat.getAlignmentBuffered(), taskStateStat.getNumberOfSubtasks(), taskStateStat.getNumberOfAcknowledgedSubtasks())).         }     } else {         checkpointStatisticsPerTask = Collections.emptyMap().     }     if (checkpointStats instanceof CompletedCheckpointStats) {         final CompletedCheckpointStats completedCheckpointStats = ((CompletedCheckpointStats) checkpointStats).         return new CheckpointStatistics.CompletedCheckpointStatistics(completedCheckpointStats.getCheckpointId(), completedCheckpointStats.getStatus(), completedCheckpointStats.getProperties().isSavepoint(), completedCheckpointStats.getTriggerTimestamp(), completedCheckpointStats.getLatestAckTimestamp(), completedCheckpointStats.getStateSize(), completedCheckpointStats.getEndToEndDuration(), completedCheckpointStats.getAlignmentBuffered(), completedCheckpointStats.getNumberOfSubtasks(), completedCheckpointStats.getNumberOfAcknowledgedSubtasks(), checkpointStatisticsPerTask, completedCheckpointStats.getExternalPath(), completedCheckpointStats.isDiscarded()).     } else if (checkpointStats instanceof FailedCheckpointStats) {         final FailedCheckpointStats failedCheckpointStats = ((FailedCheckpointStats) checkpointStats).         return new CheckpointStatistics.FailedCheckpointStatistics(failedCheckpointStats.getCheckpointId(), failedCheckpointStats.getStatus(), failedCheckpointStats.getProperties().isSavepoint(), failedCheckpointStats.getTriggerTimestamp(), failedCheckpointStats.getLatestAckTimestamp(), failedCheckpointStats.getStateSize(), failedCheckpointStats.getEndToEndDuration(), failedCheckpointStats.getAlignmentBuffered(), failedCheckpointStats.getNumberOfSubtasks(), failedCheckpointStats.getNumberOfAcknowledgedSubtasks(), checkpointStatisticsPerTask, failedCheckpointStats.getFailureTimestamp(), failedCheckpointStats.getFailureMessage()).     } else if (checkpointStats instanceof PendingCheckpointStats) {         final PendingCheckpointStats pendingCheckpointStats = ((PendingCheckpointStats) checkpointStats).         return new CheckpointStatistics.PendingCheckpointStatistics(pendingCheckpointStats.getCheckpointId(), pendingCheckpointStats.getStatus(), pendingCheckpointStats.getProperties().isSavepoint(), pendingCheckpointStats.getTriggerTimestamp(), pendingCheckpointStats.getLatestAckTimestamp(), pendingCheckpointStats.getStateSize(), pendingCheckpointStats.getEndToEndDuration(), pendingCheckpointStats.getAlignmentBuffered(), pendingCheckpointStats.getNumberOfSubtasks(), pendingCheckpointStats.getNumberOfAcknowledgedSubtasks(), checkpointStatisticsPerTask).     } else {         throw new IllegalArgumentException("Given checkpoint stats object of type " + checkpointStats.getClass().getName() + " cannot be converted.").     } }
false;public;0;4;;@Nullable public String getExternalPath() {     return externalPath. }
false;public;0;3;;public boolean isDiscarded() {     return discarded. }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     if (!super.equals(o)) {         return false.     }     CompletedCheckpointStatistics that = (CompletedCheckpointStatistics) o.     return discarded == that.discarded && Objects.equals(externalPath, that.externalPath). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), externalPath, discarded). }
false;public;0;3;;public long getFailureTimestamp() {     return failureTimestamp. }
false;public;0;4;;@Nullable public String getFailureMessage() {     return failureMessage. }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     if (!super.equals(o)) {         return false.     }     FailedCheckpointStatistics that = (FailedCheckpointStatistics) o.     return failureTimestamp == that.failureTimestamp && Objects.equals(failureMessage, that.failureMessage). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), failureTimestamp, failureMessage). }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     if (!super.equals(o)) {         return false.     }     return true. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode()). }
