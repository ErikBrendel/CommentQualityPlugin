# id;timestamp;commentText;codeText;commentWords;codeWords
DataSourceTask -> public void setUserCodeClassLoader(ClassLoader cl);1405024514;Sets the class-loader to be used to load the user code.__@param cl The class-loader to be used to load the user code.;public void setUserCodeClassLoader(ClassLoader cl) {_		this.userCodeClassLoader = cl__	};sets,the,class,loader,to,be,used,to,load,the,user,code,param,cl,the,class,loader,to,be,used,to,load,the,user,code;public,void,set,user,code,class,loader,class,loader,cl,this,user,code,class,loader,cl
DataSourceTask -> public void setUserCodeClassLoader(ClassLoader cl);1405090423;Sets the class-loader to be used to load the user code.__@param cl The class-loader to be used to load the user code.;public void setUserCodeClassLoader(ClassLoader cl) {_		this.userCodeClassLoader = cl__	};sets,the,class,loader,to,be,used,to,load,the,user,code,param,cl,the,class,loader,to,be,used,to,load,the,user,code;public,void,set,user,code,class,loader,class,loader,cl,this,user,code,class,loader,cl
DataSourceTask -> public void setUserCodeClassLoader(ClassLoader cl);1409911022;Sets the class-loader to be used to load the user code.__@param cl The class-loader to be used to load the user code.;public void setUserCodeClassLoader(ClassLoader cl) {_		this.userCodeClassLoader = cl__	};sets,the,class,loader,to,be,used,to,load,the,user,code,param,cl,the,class,loader,to,be,used,to,load,the,user,code;public,void,set,user,code,class,loader,class,loader,cl,this,user,code,class,loader,cl
DataSourceTask -> public void setUserCodeClassLoader(ClassLoader cl);1411473593;Sets the class-loader to be used to load the user code.__@param cl The class-loader to be used to load the user code.;public void setUserCodeClassLoader(ClassLoader cl) {_		this.userCodeClassLoader = cl__	};sets,the,class,loader,to,be,used,to,load,the,user,code,param,cl,the,class,loader,to,be,used,to,load,the,user,code;public,void,set,user,code,class,loader,class,loader,cl,this,user,code,class,loader,cl
DataSourceTask -> public void setUserCodeClassLoader(ClassLoader cl);1412338914;Sets the class-loader to be used to load the user code.__@param cl The class-loader to be used to load the user code.;public void setUserCodeClassLoader(ClassLoader cl) {_		this.userCodeClassLoader = cl__	};sets,the,class,loader,to,be,used,to,load,the,user,code,param,cl,the,class,loader,to,be,used,to,load,the,user,code;public,void,set,user,code,class,loader,class,loader,cl,this,user,code,class,loader,cl
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1405024514;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<BufferWriter>()__		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,buffer,writer,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1405090423;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<BufferWriter>()__		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,buffer,writer,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1409911022;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<BufferWriter>()__		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,buffer,writer,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1411473593;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<BufferWriter>()__		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,buffer,writer,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1412338914;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<BufferWriter>()__		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,buffer,writer,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1412605211;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<BufferWriter>()__		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,buffer,writer,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1417022099;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<BufferWriter>()__		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,buffer,writer,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1420654570;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<BufferWriter>()__		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs, getExecutionConfig())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,buffer,writer,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1421050512;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()__		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs, getExecutionConfig())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1423570503;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()__		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs, getExecutionConfig())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1424273813;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()__		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs, getExecutionConfig())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1431703039;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()__		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs, getExecutionConfig())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1436966346;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		Map<String, Accumulator<?, ?>> accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,map,string,accumulator,accumulator,map,accumulator,registry,get,user,map,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,accumulator,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1438261566;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		Map<String, Accumulator<?, ?>> accumulatorMap = accumulatorRegistry.getUserMap()___		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, accumulatorMap)__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,map,string,accumulator,accumulator,map,accumulator,registry,get,user,map,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,accumulator,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1439469746;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.output = RegularPactTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,output,regular,pact,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1444144446;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1449496469;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1451153289;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1453902315;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1457737669;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1457881384;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1461679220;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1463939897;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1466072697;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1466286023;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1473348008;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1477389806;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1477923122;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		final AccumulatorRegistry accumulatorRegistry = getEnvironment().getAccumulatorRegistry()__		final AccumulatorRegistry.Reporter reporter = accumulatorRegistry.getReadWriteReporter()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), reporter, getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,final,accumulator,registry,accumulator,registry,get,environment,get,accumulator,registry,final,accumulator,registry,reporter,reporter,accumulator,registry,get,read,write,reporter,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,reporter,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1477923124;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1482522862;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1513102156;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1515519059;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initOutputs(ClassLoader cl) throws Exception;1535979810;Creates a writer for each output. Creates an OutputCollector which forwards its input to all writers._The output collector applies the configured shipping strategy.;private void initOutputs(ClassLoader cl) throws Exception {_		this.chainedTasks = new ArrayList<ChainedDriver<?, ?>>()__		this.eventualOutputs = new ArrayList<RecordWriter<?>>()___		this.output = BatchTask.initOutputs(this, cl, this.config, this.chainedTasks, this.eventualOutputs,_				getExecutionConfig(), getEnvironment().getAccumulatorRegistry().getUserMap())__	};creates,a,writer,for,each,output,creates,an,output,collector,which,forwards,its,input,to,all,writers,the,output,collector,applies,the,configured,shipping,strategy;private,void,init,outputs,class,loader,cl,throws,exception,this,chained,tasks,new,array,list,chained,driver,this,eventual,outputs,new,array,list,record,writer,this,output,batch,task,init,outputs,this,cl,this,config,this,chained,tasks,this,eventual,outputs,get,execution,config,get,environment,get,accumulator,registry,get,user,map
DataSourceTask -> private void initInputFormat();1405024514;Initializes the InputFormat implementation and configuration._l	 *_@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		if (this.userCodeClassLoader == null) {_			try {_				this.userCodeClassLoader = LibraryCacheManager.getClassLoader(getEnvironment().getJobID())__			}_			catch (IOException ioe) {_				throw new RuntimeException("Usercode ClassLoader could not be obtained for job: " +_						getEnvironment().getJobID(), ioe)__			}_		}__		_		Configuration taskConf = getTaskConfiguration()__		taskConf.setClassLoader(this.userCodeClassLoader)__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(this.userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, this.userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		_		try {_			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		_		_		this.serializerFactory = this.config.getOutputSerializer(this.userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,l,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,if,this,user,code,class,loader,null,try,this,user,code,class,loader,library,cache,manager,get,class,loader,get,environment,get,job,id,catch,ioexception,ioe,throw,new,runtime,exception,usercode,class,loader,could,not,be,obtained,for,job,get,environment,get,job,id,ioe,configuration,task,conf,get,task,configuration,task,conf,set,class,loader,this,user,code,class,loader,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,this,user,code,class,loader,get,user,code,object,input,format,class,this,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,try,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,this,serializer,factory,this,config,get,output,serializer,this,user,code,class,loader
DataSourceTask -> private void initInputFormat();1405090423;Initializes the InputFormat implementation and configuration._l	 *_@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		if (this.userCodeClassLoader == null) {_			try {_				this.userCodeClassLoader = LibraryCacheManager.getClassLoader(getEnvironment().getJobID())__			}_			catch (IOException ioe) {_				throw new RuntimeException("Usercode ClassLoader could not be obtained for job: " +_						getEnvironment().getJobID(), ioe)__			}_		}__		_		Configuration taskConf = getTaskConfiguration()__		taskConf.setClassLoader(this.userCodeClassLoader)__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(this.userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, this.userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		_		try {_			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		_		_		this.serializerFactory = this.config.getOutputSerializer(this.userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,l,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,if,this,user,code,class,loader,null,try,this,user,code,class,loader,library,cache,manager,get,class,loader,get,environment,get,job,id,catch,ioexception,ioe,throw,new,runtime,exception,usercode,class,loader,could,not,be,obtained,for,job,get,environment,get,job,id,ioe,configuration,task,conf,get,task,configuration,task,conf,set,class,loader,this,user,code,class,loader,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,this,user,code,class,loader,get,user,code,object,input,format,class,this,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,try,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,this,serializer,factory,this,config,get,output,serializer,this,user,code,class,loader
DataSourceTask -> private void initInputFormat();1409911022;Initializes the InputFormat implementation and configuration._l	 *_@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		if (this.userCodeClassLoader == null) {_			try {_				this.userCodeClassLoader = LibraryCacheManager.getClassLoader(getEnvironment().getJobID())__			}_			catch (IOException ioe) {_				throw new RuntimeException("Usercode ClassLoader could not be obtained for job: " +_						getEnvironment().getJobID(), ioe)__			}_		}__		_		Configuration taskConf = getTaskConfiguration()__		taskConf.setClassLoader(this.userCodeClassLoader)__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(this.userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, this.userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		_		try {_			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		_		_		this.serializerFactory = this.config.getOutputSerializer(this.userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,l,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,if,this,user,code,class,loader,null,try,this,user,code,class,loader,library,cache,manager,get,class,loader,get,environment,get,job,id,catch,ioexception,ioe,throw,new,runtime,exception,usercode,class,loader,could,not,be,obtained,for,job,get,environment,get,job,id,ioe,configuration,task,conf,get,task,configuration,task,conf,set,class,loader,this,user,code,class,loader,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,this,user,code,class,loader,get,user,code,object,input,format,class,this,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,try,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,this,serializer,factory,this,config,get,output,serializer,this,user,code,class,loader
DataSourceTask -> private void initInputFormat();1411473593;Initializes the InputFormat implementation and configuration._l	 *_@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		if (this.userCodeClassLoader == null) {_			try {_				this.userCodeClassLoader = LibraryCacheManager.getClassLoader(getEnvironment().getJobID())__			}_			catch (IOException ioe) {_				throw new RuntimeException("Usercode ClassLoader could not be obtained for job: " +_						getEnvironment().getJobID(), ioe)__			}_		}__		_		Configuration taskConf = getTaskConfiguration()__		taskConf.setClassLoader(this.userCodeClassLoader)__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(this.userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, this.userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		_		try {_			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		_		_		this.serializerFactory = this.config.getOutputSerializer(this.userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,l,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,if,this,user,code,class,loader,null,try,this,user,code,class,loader,library,cache,manager,get,class,loader,get,environment,get,job,id,catch,ioexception,ioe,throw,new,runtime,exception,usercode,class,loader,could,not,be,obtained,for,job,get,environment,get,job,id,ioe,configuration,task,conf,get,task,configuration,task,conf,set,class,loader,this,user,code,class,loader,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,this,user,code,class,loader,get,user,code,object,input,format,class,this,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,try,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,this,serializer,factory,this,config,get,output,serializer,this,user,code,class,loader
DataSourceTask -> private void initInputFormat();1412338914;Initializes the InputFormat implementation and configuration._l	 *_@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		if (this.userCodeClassLoader == null) {_			try {_				this.userCodeClassLoader = LibraryCacheManager.getClassLoader(getEnvironment().getJobID())__			}_			catch (IOException ioe) {_				throw new RuntimeException("Usercode ClassLoader could not be obtained for job: " +_						getEnvironment().getJobID(), ioe)__			}_		}__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(this.userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, this.userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		_		try {_			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		_		_		this.serializerFactory = this.config.getOutputSerializer(this.userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,l,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,if,this,user,code,class,loader,null,try,this,user,code,class,loader,library,cache,manager,get,class,loader,get,environment,get,job,id,catch,ioexception,ioe,throw,new,runtime,exception,usercode,class,loader,could,not,be,obtained,for,job,get,environment,get,job,id,ioe,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,this,user,code,class,loader,get,user,code,object,input,format,class,this,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,try,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,this,serializer,factory,this,config,get,output,serializer,this,user,code,class,loader
DataSourceTask -> private void initInputFormat();1412605211;Initializes the InputFormat implementation and configuration._l	 *_@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		_		try {_			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		_		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,l,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,try,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1417022099;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		_		try {_			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		_		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,try,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1420654570;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		_		try {_			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		_		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,try,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1421050512;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		_		try {_			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		_		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,try,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1423570503;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		_		try {_			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		_		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,try,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1424273813;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		_		try {_			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		_		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,try,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1431703039;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		_		try {_			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		_		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,try,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1436966346;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		_		try {_			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,try,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1438261566;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1439469746;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1444144446;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1449496469;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1451153289;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1453902315;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1457737669;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1457881384;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1461679220;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1463939897;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1466072697;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1466286023;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1473348008;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1477389806;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1477923122;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1477923124;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1482522862;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1513102156;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1515519059;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private void initInputFormat();1535979810;Initializes the InputFormat implementation and configuration.__@throws RuntimeException_Throws if instance of InputFormat implementation can not be_obtained.;private void initInputFormat() {_		ClassLoader userCodeClassLoader = getUserCodeClassLoader()__		_		Configuration taskConf = getTaskConfiguration()__		this.config = new TaskConfig(taskConf)___		try {_			this.format = config.<InputFormat<OT, InputSplit>>getStubWrapper(userCodeClassLoader)_					.getUserCodeObject(InputFormat.class, userCodeClassLoader)___			_			if (!InputFormat.class.isAssignableFrom(this.format.getClass())) {_				throw new RuntimeException("The class '" + this.format.getClass().getName() + "' is not a subclass of '" +_						InputFormat.class.getName() + "' as is required.")__			}_		}_		catch (ClassCastException ccex) {_			throw new RuntimeException("The stub class is not a proper subclass of " + InputFormat.class.getName(),_					ccex)__		}__		Thread thread = Thread.currentThread()__		ClassLoader original = thread.getContextClassLoader()__		_		try {_			thread.setContextClassLoader(userCodeClassLoader)__			this.format.configure(this.config.getStubParameters())__		}_		catch (Throwable t) {_			throw new RuntimeException("The user defined 'configure()' method caused an error: " + t.getMessage(), t)__		}_		finally {_			thread.setContextClassLoader(original)__		}__		_		this.serializerFactory = this.config.getOutputSerializer(userCodeClassLoader)__	};initializes,the,input,format,implementation,and,configuration,throws,runtime,exception,throws,if,instance,of,input,format,implementation,can,not,be,obtained;private,void,init,input,format,class,loader,user,code,class,loader,get,user,code,class,loader,configuration,task,conf,get,task,configuration,this,config,new,task,config,task,conf,try,this,format,config,input,format,ot,input,split,get,stub,wrapper,user,code,class,loader,get,user,code,object,input,format,class,user,code,class,loader,if,input,format,class,is,assignable,from,this,format,get,class,throw,new,runtime,exception,the,class,this,format,get,class,get,name,is,not,a,subclass,of,input,format,class,get,name,as,is,required,catch,class,cast,exception,ccex,throw,new,runtime,exception,the,stub,class,is,not,a,proper,subclass,of,input,format,class,get,name,ccex,thread,thread,thread,current,thread,class,loader,original,thread,get,context,class,loader,try,thread,set,context,class,loader,user,code,class,loader,this,format,configure,this,config,get,stub,parameters,catch,throwable,t,throw,new,runtime,exception,the,user,defined,configure,method,caused,an,error,t,get,message,t,finally,thread,set,context,class,loader,original,this,serializer,factory,this,config,get,output,serializer,user,code,class,loader
DataSourceTask -> private String getLogString(String message, String taskName);1405024514;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1405090423;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1409911022;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1411473593;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1412338914;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1412605211;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1417022099;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1420654570;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1421050512;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1423570503;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1424273813;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1431703039;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1436966346;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1438261566;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1439469746;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return RegularPactTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,regular,pact,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1444144446;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1449496469;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1451153289;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1453902315;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1457737669;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1457881384;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1461679220;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1463939897;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1466072697;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1466286023;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1473348008;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1477389806;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1477923122;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1477923124;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1482522862;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1513102156;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1515519059;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message, String taskName);1535979810;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@param taskName The name of the task._@return The string ready for logging.;private String getLogString(String message, String taskName) {_		return BatchTask.constructLogString(message, taskName, this)__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,param,task,name,the,name,of,the,task,return,the,string,ready,for,logging;private,string,get,log,string,string,message,string,task,name,return,batch,task,construct,log,string,message,task,name,this
DataSourceTask -> private String getLogString(String message);1405024514;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1405090423;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1409911022;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1411473593;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1412338914;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1412605211;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1417022099;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1420654570;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1421050512;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1423570503;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1424273813;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1431703039;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1436966346;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1438261566;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1439469746;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1444144446;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,name
DataSourceTask -> private String getLogString(String message);1449496469;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1451153289;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1453902315;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1457737669;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1457881384;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1461679220;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1463939897;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1466072697;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1466286023;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1473348008;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1477389806;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1477923122;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1477923124;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1482522862;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1513102156;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1515519059;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> private String getLogString(String message);1535979810;Utility function that composes a string for logging purposes. The string includes the given message and_the index of the task in its task group together with the number of tasks in the task group.__@param message The main message for the log._@return The string ready for logging.;private String getLogString(String message) {_		return getLogString(message, this.getEnvironment().getTaskInfo().getTaskName())__	};utility,function,that,composes,a,string,for,logging,purposes,the,string,includes,the,given,message,and,the,index,of,the,task,in,its,task,group,together,with,the,number,of,tasks,in,the,task,group,param,message,the,main,message,for,the,log,return,the,string,ready,for,logging;private,string,get,log,string,string,message,return,get,log,string,message,this,get,environment,get,task,info,get,task,name
DataSourceTask -> public DataSourceTask(Environment environment);1515519059;Create an Invokable task and set its environment.__@param environment The environment assigned to this invokable.;public DataSourceTask(Environment environment) {_		super(environment)__	};create,an,invokable,task,and,set,its,environment,param,environment,the,environment,assigned,to,this,invokable;public,data,source,task,environment,environment,super,environment
DataSourceTask -> public DataSourceTask(Environment environment);1535979810;Create an Invokable task and set its environment.__@param environment The environment assigned to this invokable.;public DataSourceTask(Environment environment) {_		super(environment)__	};create,an,invokable,task,and,set,its,environment,param,environment,the,environment,assigned,to,this,invokable;public,data,source,task,environment,environment,super,environment
