# id;timestamp;commentText;codeText;commentWords;codeWords
CoLocationConstraint -> public SharedSlot getSharedSlot();1432737361;Gets the shared slot into which this constraint's tasks are places.__@return The shared slot into which this constraint's tasks are places.;public SharedSlot getSharedSlot() {_		return sharedSlot__	};gets,the,shared,slot,into,which,this,constraint,s,tasks,are,places,return,the,shared,slot,into,which,this,constraint,s,tasks,are,places;public,shared,slot,get,shared,slot,return,shared,slot
CoLocationConstraint -> public SharedSlot getSharedSlot();1465991918;Gets the shared slot into which this constraint's tasks are places.__@return The shared slot into which this constraint's tasks are places.;public SharedSlot getSharedSlot() {_		return sharedSlot__	};gets,the,shared,slot,into,which,this,constraint,s,tasks,are,places,return,the,shared,slot,into,which,this,constraint,s,tasks,are,places;public,shared,slot,get,shared,slot,return,shared,slot
CoLocationConstraint -> public SharedSlot getSharedSlot();1472830377;Gets the shared slot into which this constraint's tasks are places.__@return The shared slot into which this constraint's tasks are places.;public SharedSlot getSharedSlot() {_		return sharedSlot__	};gets,the,shared,slot,into,which,this,constraint,s,tasks,are,places,return,the,shared,slot,into,which,this,constraint,s,tasks,are,places;public,shared,slot,get,shared,slot,return,shared,slot
CoLocationConstraint -> public SharedSlot getSharedSlot();1513201070;Gets the shared slot into which this constraint's tasks are places.__@return The shared slot into which this constraint's tasks are places.;public SharedSlot getSharedSlot() {_		return sharedSlot__	};gets,the,shared,slot,into,which,this,constraint,s,tasks,are,places,return,the,shared,slot,into,which,this,constraint,s,tasks,are,places;public,shared,slot,get,shared,slot,return,shared,slot
CoLocationConstraint -> public SharedSlot getSharedSlot();1513261599;Gets the shared slot into which this constraint's tasks are places.__@return The shared slot into which this constraint's tasks are places.;public SharedSlot getSharedSlot() {_		return sharedSlot__	};gets,the,shared,slot,into,which,this,constraint,s,tasks,are,places,return,the,shared,slot,into,which,this,constraint,s,tasks,are,places;public,shared,slot,get,shared,slot,return,shared,slot
CoLocationConstraint -> public SharedSlot getSharedSlot();1522681180;Gets the shared slot into which this constraint's tasks are places.__@return The shared slot into which this constraint's tasks are places.;public SharedSlot getSharedSlot() {_		return sharedSlot__	};gets,the,shared,slot,into,which,this,constraint,s,tasks,are,places,return,the,shared,slot,into,which,this,constraint,s,tasks,are,places;public,shared,slot,get,shared,slot,return,shared,slot
CoLocationConstraint -> public SharedSlot getSharedSlot();1528875757;Gets the shared slot into which this constraint's tasks are places.__@return The shared slot into which this constraint's tasks are places.;public SharedSlot getSharedSlot() {_		return sharedSlot__	};gets,the,shared,slot,into,which,this,constraint,s,tasks,are,places,return,the,shared,slot,into,which,this,constraint,s,tasks,are,places;public,shared,slot,get,shared,slot,return,shared,slot
CoLocationConstraint -> public void lockLocation(TaskManagerLocation taskManagerLocation);1513261599;Locks the location of this slot. The location can be locked only once_and only after a shared slot has been assigned.__<p>Note: This method exists for compatibility reasons with the Flip-6 SlotPool__@param taskManagerLocation to lock this co-location constraint to;public void lockLocation(TaskManagerLocation taskManagerLocation) {_		checkNotNull(taskManagerLocation)__		checkState(lockedLocation == null, "Location is already locked.")___		lockedLocation = taskManagerLocation__	};locks,the,location,of,this,slot,the,location,can,be,locked,only,once,and,only,after,a,shared,slot,has,been,assigned,p,note,this,method,exists,for,compatibility,reasons,with,the,flip,6,slot,pool,param,task,manager,location,to,lock,this,co,location,constraint,to;public,void,lock,location,task,manager,location,task,manager,location,check,not,null,task,manager,location,check,state,locked,location,null,location,is,already,locked,locked,location,task,manager,location
CoLocationConstraint -> public void lockLocation(TaskManagerLocation taskManagerLocation);1522681180;Locks the location of this slot. The location can be locked only once_and only after a shared slot has been assigned.__<p>Note: This method exists for compatibility reasons with the new {@link SlotPool}.__@param taskManagerLocation to lock this co-location constraint to;public void lockLocation(TaskManagerLocation taskManagerLocation) {_		checkNotNull(taskManagerLocation)__		checkState(lockedLocation == null, "Location is already locked.")___		lockedLocation = taskManagerLocation__	};locks,the,location,of,this,slot,the,location,can,be,locked,only,once,and,only,after,a,shared,slot,has,been,assigned,p,note,this,method,exists,for,compatibility,reasons,with,the,new,link,slot,pool,param,task,manager,location,to,lock,this,co,location,constraint,to;public,void,lock,location,task,manager,location,task,manager,location,check,not,null,task,manager,location,check,state,locked,location,null,location,is,already,locked,locked,location,task,manager,location
CoLocationConstraint -> public void lockLocation(TaskManagerLocation taskManagerLocation);1528875757;Locks the location of this slot. The location can be locked only once_and only after a shared slot has been assigned.__<p>Note: This method exists for compatibility reasons with the new {@link SlotPool}.__@param taskManagerLocation to lock this co-location constraint to;public void lockLocation(TaskManagerLocation taskManagerLocation) {_		checkNotNull(taskManagerLocation)__		checkState(lockedLocation == null, "Location is already locked.")___		lockedLocation = taskManagerLocation__	};locks,the,location,of,this,slot,the,location,can,be,locked,only,once,and,only,after,a,shared,slot,has,been,assigned,p,note,this,method,exists,for,compatibility,reasons,with,the,new,link,slot,pool,param,task,manager,location,to,lock,this,co,location,constraint,to;public,void,lock,location,task,manager,location,task,manager,location,check,not,null,task,manager,location,check,state,locked,location,null,location,is,already,locked,locked,location,task,manager,location
CoLocationConstraint -> public void lockLocation() throws IllegalStateException;1432737361;Locks the location of this slot. The location can be locked only once_and only after a shared slot has been assigned.__@throws IllegalStateException Thrown, if the location is already locked,_or is no slot has been set, yet.;public void lockLocation() throws IllegalStateException {_		if (locationLocked) {_			throw new IllegalStateException("Location is already locked")__		}_		if (sharedSlot == null) {_			throw new IllegalStateException("Cannot lock location without a slot.")__		}_		locationLocked = true__	};locks,the,location,of,this,slot,the,location,can,be,locked,only,once,and,only,after,a,shared,slot,has,been,assigned,throws,illegal,state,exception,thrown,if,the,location,is,already,locked,or,is,no,slot,has,been,set,yet;public,void,lock,location,throws,illegal,state,exception,if,location,locked,throw,new,illegal,state,exception,location,is,already,locked,if,shared,slot,null,throw,new,illegal,state,exception,cannot,lock,location,without,a,slot,location,locked,true
CoLocationConstraint -> public void lockLocation() throws IllegalStateException;1465991918;Locks the location of this slot. The location can be locked only once_and only after a shared slot has been assigned.__@throws IllegalStateException Thrown, if the location is already locked,_or is no slot has been set, yet.;public void lockLocation() throws IllegalStateException {_		if (locationLocked) {_			throw new IllegalStateException("Location is already locked")__		}_		if (sharedSlot == null) {_			throw new IllegalStateException("Cannot lock location without a slot.")__		}_		locationLocked = true__	};locks,the,location,of,this,slot,the,location,can,be,locked,only,once,and,only,after,a,shared,slot,has,been,assigned,throws,illegal,state,exception,thrown,if,the,location,is,already,locked,or,is,no,slot,has,been,set,yet;public,void,lock,location,throws,illegal,state,exception,if,location,locked,throw,new,illegal,state,exception,location,is,already,locked,if,shared,slot,null,throw,new,illegal,state,exception,cannot,lock,location,without,a,slot,location,locked,true
CoLocationConstraint -> public void lockLocation() throws IllegalStateException;1472830377;Locks the location of this slot. The location can be locked only once_and only after a shared slot has been assigned.__@throws IllegalStateException Thrown, if the location is already locked,_or is no slot has been set, yet.;public void lockLocation() throws IllegalStateException {_		checkState(lockedLocation == null, "Location is already locked")__		checkState(sharedSlot != null, "Cannot lock location without a slot.")___		lockedLocation = sharedSlot.getTaskManagerID()__	};locks,the,location,of,this,slot,the,location,can,be,locked,only,once,and,only,after,a,shared,slot,has,been,assigned,throws,illegal,state,exception,thrown,if,the,location,is,already,locked,or,is,no,slot,has,been,set,yet;public,void,lock,location,throws,illegal,state,exception,check,state,locked,location,null,location,is,already,locked,check,state,shared,slot,null,cannot,lock,location,without,a,slot,locked,location,shared,slot,get,task,manager,id
CoLocationConstraint -> public void lockLocation() throws IllegalStateException;1513201070;Locks the location of this slot. The location can be locked only once_and only after a shared slot has been assigned.__@throws IllegalStateException Thrown, if the location is already locked,_or is no slot has been set, yet.;public void lockLocation() throws IllegalStateException {_		checkState(lockedLocation == null, "Location is already locked")__		checkState(sharedSlot != null, "Cannot lock location without a slot.")___		lockedLocation = sharedSlot.getTaskManagerID()__	};locks,the,location,of,this,slot,the,location,can,be,locked,only,once,and,only,after,a,shared,slot,has,been,assigned,throws,illegal,state,exception,thrown,if,the,location,is,already,locked,or,is,no,slot,has,been,set,yet;public,void,lock,location,throws,illegal,state,exception,check,state,locked,location,null,location,is,already,locked,check,state,shared,slot,null,cannot,lock,location,without,a,slot,locked,location,shared,slot,get,task,manager,id
CoLocationConstraint -> public void lockLocation() throws IllegalStateException;1513261599;Locks the location of this slot. The location can be locked only once_and only after a shared slot has been assigned.__@throws IllegalStateException Thrown, if the location is already locked,_or is no slot has been set, yet.;public void lockLocation() throws IllegalStateException {_		checkState(lockedLocation == null, "Location is already locked")__		checkState(sharedSlot != null, "Cannot lock location without a slot.")___		lockedLocation = sharedSlot.getTaskManagerLocation()__	};locks,the,location,of,this,slot,the,location,can,be,locked,only,once,and,only,after,a,shared,slot,has,been,assigned,throws,illegal,state,exception,thrown,if,the,location,is,already,locked,or,is,no,slot,has,been,set,yet;public,void,lock,location,throws,illegal,state,exception,check,state,locked,location,null,location,is,already,locked,check,state,shared,slot,null,cannot,lock,location,without,a,slot,locked,location,shared,slot,get,task,manager,location
CoLocationConstraint -> public void lockLocation() throws IllegalStateException;1522681180;Locks the location of this slot. The location can be locked only once_and only after a shared slot has been assigned.__@throws IllegalStateException Thrown, if the location is already locked,_or is no slot has been set, yet.;public void lockLocation() throws IllegalStateException {_		checkState(lockedLocation == null, "Location is already locked")__		checkState(sharedSlot != null, "Cannot lock location without a slot.")___		lockedLocation = sharedSlot.getTaskManagerLocation()__	};locks,the,location,of,this,slot,the,location,can,be,locked,only,once,and,only,after,a,shared,slot,has,been,assigned,throws,illegal,state,exception,thrown,if,the,location,is,already,locked,or,is,no,slot,has,been,set,yet;public,void,lock,location,throws,illegal,state,exception,check,state,locked,location,null,location,is,already,locked,check,state,shared,slot,null,cannot,lock,location,without,a,slot,locked,location,shared,slot,get,task,manager,location
CoLocationConstraint -> public void lockLocation() throws IllegalStateException;1528875757;Locks the location of this slot. The location can be locked only once_and only after a shared slot has been assigned.__@throws IllegalStateException Thrown, if the location is already locked,_or is no slot has been set, yet.;public void lockLocation() throws IllegalStateException {_		checkState(lockedLocation == null, "Location is already locked")__		checkState(sharedSlot != null, "Cannot lock location without a slot.")___		lockedLocation = sharedSlot.getTaskManagerLocation()__	};locks,the,location,of,this,slot,the,location,can,be,locked,only,once,and,only,after,a,shared,slot,has,been,assigned,throws,illegal,state,exception,thrown,if,the,location,is,already,locked,or,is,no,slot,has,been,set,yet;public,void,lock,location,throws,illegal,state,exception,check,state,locked,location,null,location,is,already,locked,check,state,shared,slot,null,cannot,lock,location,without,a,slot,locked,location,shared,slot,get,task,manager,location
CoLocationConstraint -> @Nullable 	public SlotRequestId getSlotRequestId();1513261599;Returns the currently assigned slot request id identifying the slot to which tasks_belonging to this co-location constraint will be deployed to.__@return Slot request id of the assigned slot or null if none;@Nullable_	public SlotRequestId getSlotRequestId() {_		return slotRequestId__	};returns,the,currently,assigned,slot,request,id,identifying,the,slot,to,which,tasks,belonging,to,this,co,location,constraint,will,be,deployed,to,return,slot,request,id,of,the,assigned,slot,or,null,if,none;nullable,public,slot,request,id,get,slot,request,id,return,slot,request,id
CoLocationConstraint -> @Nullable 	public SlotRequestId getSlotRequestId();1522681180;Returns the currently assigned slot request id identifying the slot to which tasks_belonging to this co-location constraint will be deployed to.__@return Slot request id of the assigned slot or null if none;@Nullable_	public SlotRequestId getSlotRequestId() {_		return slotRequestId__	};returns,the,currently,assigned,slot,request,id,identifying,the,slot,to,which,tasks,belonging,to,this,co,location,constraint,will,be,deployed,to,return,slot,request,id,of,the,assigned,slot,or,null,if,none;nullable,public,slot,request,id,get,slot,request,id,return,slot,request,id
CoLocationConstraint -> @Nullable 	public SlotRequestId getSlotRequestId();1528875757;Returns the currently assigned slot request id identifying the slot to which tasks_belonging to this co-location constraint will be deployed to.__@return Slot request id of the assigned slot or null if none;@Nullable_	public SlotRequestId getSlotRequestId() {_		return slotRequestId__	};returns,the,currently,assigned,slot,request,id,identifying,the,slot,to,which,tasks,belonging,to,this,co,location,constraint,will,be,deployed,to,return,slot,request,id,of,the,assigned,slot,or,null,if,none;nullable,public,slot,request,id,get,slot,request,id,return,slot,request,id
CoLocationConstraint -> public void setSlotRequestId(@Nullable SlotRequestId slotRequestId);1513261599;Sets the slot request id of the currently assigned slot to the co-location constraint._All other tasks belonging to this co-location constraint will be deployed to the same slot.__@param slotRequestId identifying the assigned slot for this co-location constraint;public void setSlotRequestId(@Nullable SlotRequestId slotRequestId) {_		this.slotRequestId = slotRequestId__	};sets,the,slot,request,id,of,the,currently,assigned,slot,to,the,co,location,constraint,all,other,tasks,belonging,to,this,co,location,constraint,will,be,deployed,to,the,same,slot,param,slot,request,id,identifying,the,assigned,slot,for,this,co,location,constraint;public,void,set,slot,request,id,nullable,slot,request,id,slot,request,id,this,slot,request,id,slot,request,id
CoLocationConstraint -> public void setSlotRequestId(@Nullable SlotRequestId slotRequestId);1522681180;Sets the slot request id of the currently assigned slot to the co-location constraint._All other tasks belonging to this co-location constraint will be deployed to the same slot.__@param slotRequestId identifying the assigned slot for this co-location constraint;public void setSlotRequestId(@Nullable SlotRequestId slotRequestId) {_		this.slotRequestId = slotRequestId__	};sets,the,slot,request,id,of,the,currently,assigned,slot,to,the,co,location,constraint,all,other,tasks,belonging,to,this,co,location,constraint,will,be,deployed,to,the,same,slot,param,slot,request,id,identifying,the,assigned,slot,for,this,co,location,constraint;public,void,set,slot,request,id,nullable,slot,request,id,slot,request,id,this,slot,request,id,slot,request,id
CoLocationConstraint -> public void setSlotRequestId(@Nullable SlotRequestId slotRequestId);1528875757;Sets the slot request id of the currently assigned slot to the co-location constraint._All other tasks belonging to this co-location constraint will be deployed to the same slot.__@param slotRequestId identifying the assigned slot for this co-location constraint;public void setSlotRequestId(@Nullable SlotRequestId slotRequestId) {_		this.slotRequestId = slotRequestId__	};sets,the,slot,request,id,of,the,currently,assigned,slot,to,the,co,location,constraint,all,other,tasks,belonging,to,this,co,location,constraint,will,be,deployed,to,the,same,slot,param,slot,request,id,identifying,the,assigned,slot,for,this,co,location,constraint;public,void,set,slot,request,id,nullable,slot,request,id,slot,request,id,this,slot,request,id,slot,request,id
CoLocationConstraint -> public AbstractID getGroupId();1432737361;Gets the ID that identifies the co-location group.__@return The ID that identifies the co-location group.;public AbstractID getGroupId() {_		return this.group.getId()__	};gets,the,id,that,identifies,the,co,location,group,return,the,id,that,identifies,the,co,location,group;public,abstract,id,get,group,id,return,this,group,get,id
CoLocationConstraint -> public AbstractID getGroupId();1465991918;Gets the ID that identifies the co-location group.__@return The ID that identifies the co-location group.;public AbstractID getGroupId() {_		return this.group.getId()__	};gets,the,id,that,identifies,the,co,location,group,return,the,id,that,identifies,the,co,location,group;public,abstract,id,get,group,id,return,this,group,get,id
CoLocationConstraint -> public AbstractID getGroupId();1472830377;Gets the ID that identifies the co-location group.__@return The ID that identifies the co-location group.;public AbstractID getGroupId() {_		return this.group.getId()__	};gets,the,id,that,identifies,the,co,location,group,return,the,id,that,identifies,the,co,location,group;public,abstract,id,get,group,id,return,this,group,get,id
CoLocationConstraint -> public AbstractID getGroupId();1513201070;Gets the ID that identifies the co-location group.__@return The ID that identifies the co-location group.;public AbstractID getGroupId() {_		return this.group.getId()__	};gets,the,id,that,identifies,the,co,location,group,return,the,id,that,identifies,the,co,location,group;public,abstract,id,get,group,id,return,this,group,get,id
CoLocationConstraint -> public AbstractID getGroupId();1513261599;Gets the ID that identifies the co-location group.__@return The ID that identifies the co-location group.;public AbstractID getGroupId() {_		return this.group.getId()__	};gets,the,id,that,identifies,the,co,location,group,return,the,id,that,identifies,the,co,location,group;public,abstract,id,get,group,id,return,this,group,get,id
CoLocationConstraint -> public AbstractID getGroupId();1522681180;Gets the ID that identifies the co-location group.__@return The ID that identifies the co-location group.;public AbstractID getGroupId() {_		return this.group.getId()__	};gets,the,id,that,identifies,the,co,location,group,return,the,id,that,identifies,the,co,location,group;public,abstract,id,get,group,id,return,this,group,get,id
CoLocationConstraint -> public AbstractID getGroupId();1528875757;Gets the ID that identifies the co-location group.__@return The ID that identifies the co-location group.;public AbstractID getGroupId() {_		return this.group.getId()__	};gets,the,id,that,identifies,the,co,location,group,return,the,id,that,identifies,the,co,location,group;public,abstract,id,get,group,id,return,this,group,get,id
CoLocationConstraint -> public boolean isAssignedAndAlive();1432737361;Checks whether the location of this constraint has been assigned_(as defined in the {@link #isAssigned()} method, and the current_shared slot is alive.__@return True if the location has been assigned and the shared slot is alive,_false otherwise.;public boolean isAssignedAndAlive() {_		return locationLocked && sharedSlot.isAlive()__	};checks,whether,the,location,of,this,constraint,has,been,assigned,as,defined,in,the,link,is,assigned,method,and,the,current,shared,slot,is,alive,return,true,if,the,location,has,been,assigned,and,the,shared,slot,is,alive,false,otherwise;public,boolean,is,assigned,and,alive,return,location,locked,shared,slot,is,alive
CoLocationConstraint -> public boolean isAssignedAndAlive();1465991918;Checks whether the location of this constraint has been assigned_(as defined in the {@link #isAssigned()} method, and the current_shared slot is alive.__@return True if the location has been assigned and the shared slot is alive,_false otherwise.;public boolean isAssignedAndAlive() {_		return locationLocked && sharedSlot.isAlive()__	};checks,whether,the,location,of,this,constraint,has,been,assigned,as,defined,in,the,link,is,assigned,method,and,the,current,shared,slot,is,alive,return,true,if,the,location,has,been,assigned,and,the,shared,slot,is,alive,false,otherwise;public,boolean,is,assigned,and,alive,return,location,locked,shared,slot,is,alive
CoLocationConstraint -> public boolean isAssignedAndAlive();1472830377;Checks whether the location of this constraint has been assigned_(as defined in the {@link #isAssigned()} method, and the current_shared slot is alive.__@return True if the location has been assigned and the shared slot is alive,_false otherwise.;public boolean isAssignedAndAlive() {_		return lockedLocation != null && sharedSlot.isAlive()__	};checks,whether,the,location,of,this,constraint,has,been,assigned,as,defined,in,the,link,is,assigned,method,and,the,current,shared,slot,is,alive,return,true,if,the,location,has,been,assigned,and,the,shared,slot,is,alive,false,otherwise;public,boolean,is,assigned,and,alive,return,locked,location,null,shared,slot,is,alive
CoLocationConstraint -> public boolean isAssignedAndAlive();1513201070;Checks whether the location of this constraint has been assigned_(as defined in the {@link #isAssigned()} method, and the current_shared slot is alive.__@return True if the location has been assigned and the shared slot is alive,_false otherwise.;public boolean isAssignedAndAlive() {_		return lockedLocation != null && sharedSlot.isAlive()__	};checks,whether,the,location,of,this,constraint,has,been,assigned,as,defined,in,the,link,is,assigned,method,and,the,current,shared,slot,is,alive,return,true,if,the,location,has,been,assigned,and,the,shared,slot,is,alive,false,otherwise;public,boolean,is,assigned,and,alive,return,locked,location,null,shared,slot,is,alive
CoLocationConstraint -> public boolean isAssignedAndAlive();1513261599;Checks whether the location of this constraint has been assigned_(as defined in the {@link #isAssigned()} method, and the current_shared slot is alive.__@return True if the location has been assigned and the shared slot is alive,_false otherwise.;public boolean isAssignedAndAlive() {_		return lockedLocation != null && sharedSlot.isAlive()__	};checks,whether,the,location,of,this,constraint,has,been,assigned,as,defined,in,the,link,is,assigned,method,and,the,current,shared,slot,is,alive,return,true,if,the,location,has,been,assigned,and,the,shared,slot,is,alive,false,otherwise;public,boolean,is,assigned,and,alive,return,locked,location,null,shared,slot,is,alive
CoLocationConstraint -> public boolean isAssignedAndAlive();1522681180;Checks whether the location of this constraint has been assigned_(as defined in the {@link #isAssigned()} method, and the current_shared slot is alive.__@return True if the location has been assigned and the shared slot is alive,_false otherwise.;public boolean isAssignedAndAlive() {_		return lockedLocation != null && sharedSlot.isAlive()__	};checks,whether,the,location,of,this,constraint,has,been,assigned,as,defined,in,the,link,is,assigned,method,and,the,current,shared,slot,is,alive,return,true,if,the,location,has,been,assigned,and,the,shared,slot,is,alive,false,otherwise;public,boolean,is,assigned,and,alive,return,locked,location,null,shared,slot,is,alive
CoLocationConstraint -> public Instance getLocation();1432737361;Gets the location assigned to this slot. This method only succeeds after_the location has been locked via the {@link #lockLocation()} method and_{@link #isAssigned()} returns true.__@return The instance describing the location for the tasks of this constraint._@throws IllegalStateException Thrown if the location has not been assigned, yet.;public Instance getLocation() {_		if (locationLocked) {_			return sharedSlot.getInstance()__		} else {_			throw new IllegalStateException("Location not yet locked")__		}_	};gets,the,location,assigned,to,this,slot,this,method,only,succeeds,after,the,location,has,been,locked,via,the,link,lock,location,method,and,link,is,assigned,returns,true,return,the,instance,describing,the,location,for,the,tasks,of,this,constraint,throws,illegal,state,exception,thrown,if,the,location,has,not,been,assigned,yet;public,instance,get,location,if,location,locked,return,shared,slot,get,instance,else,throw,new,illegal,state,exception,location,not,yet,locked
CoLocationConstraint -> public Instance getLocation();1465991918;Gets the location assigned to this slot. This method only succeeds after_the location has been locked via the {@link #lockLocation()} method and_{@link #isAssigned()} returns true.__@return The instance describing the location for the tasks of this constraint._@throws IllegalStateException Thrown if the location has not been assigned, yet.;public Instance getLocation() {_		if (locationLocked) {_			return sharedSlot.getInstance()__		} else {_			throw new IllegalStateException("Location not yet locked")__		}_	};gets,the,location,assigned,to,this,slot,this,method,only,succeeds,after,the,location,has,been,locked,via,the,link,lock,location,method,and,link,is,assigned,returns,true,return,the,instance,describing,the,location,for,the,tasks,of,this,constraint,throws,illegal,state,exception,thrown,if,the,location,has,not,been,assigned,yet;public,instance,get,location,if,location,locked,return,shared,slot,get,instance,else,throw,new,illegal,state,exception,location,not,yet,locked
CoLocationConstraint -> public void setSharedSlot(SharedSlot newSlot);1432737361;Assigns a new shared slot to this co-location constraint. The shared slot_will hold the subtasks that are executed under this co-location constraint._If the constraint's location is assigned, then this slot needs to be from_the same location (instance) as the one assigned to this constraint.__<p>If the constraint already has a slot, the current one will be released.</p>__@param newSlot The new shared slot to assign to this constraint._@throws IllegalArgumentException If the constraint's location has been assigned and_the new slot is from a different location.;public void setSharedSlot(SharedSlot newSlot) {_		if (this.sharedSlot == null) {_			this.sharedSlot = newSlot__		}_		else if (newSlot != this.sharedSlot){_			if (locationLocked && this.sharedSlot.getInstance() != newSlot.getInstance()) {_				throw new IllegalArgumentException(_						"Cannot assign different location to a constraint whose location is locked.")__			}_			if (this.sharedSlot.isAlive()) {_				this.sharedSlot.releaseSlot()__			}_			_			this.sharedSlot = newSlot__		}_	};assigns,a,new,shared,slot,to,this,co,location,constraint,the,shared,slot,will,hold,the,subtasks,that,are,executed,under,this,co,location,constraint,if,the,constraint,s,location,is,assigned,then,this,slot,needs,to,be,from,the,same,location,instance,as,the,one,assigned,to,this,constraint,p,if,the,constraint,already,has,a,slot,the,current,one,will,be,released,p,param,new,slot,the,new,shared,slot,to,assign,to,this,constraint,throws,illegal,argument,exception,if,the,constraint,s,location,has,been,assigned,and,the,new,slot,is,from,a,different,location;public,void,set,shared,slot,shared,slot,new,slot,if,this,shared,slot,null,this,shared,slot,new,slot,else,if,new,slot,this,shared,slot,if,location,locked,this,shared,slot,get,instance,new,slot,get,instance,throw,new,illegal,argument,exception,cannot,assign,different,location,to,a,constraint,whose,location,is,locked,if,this,shared,slot,is,alive,this,shared,slot,release,slot,this,shared,slot,new,slot
CoLocationConstraint -> public void setSharedSlot(SharedSlot newSlot);1465991918;Assigns a new shared slot to this co-location constraint. The shared slot_will hold the subtasks that are executed under this co-location constraint._If the constraint's location is assigned, then this slot needs to be from_the same location (instance) as the one assigned to this constraint.__<p>If the constraint already has a slot, the current one will be released.</p>__@param newSlot The new shared slot to assign to this constraint._@throws IllegalArgumentException If the constraint's location has been assigned and_the new slot is from a different location.;public void setSharedSlot(SharedSlot newSlot) {_		if (this.sharedSlot == null) {_			this.sharedSlot = newSlot__		}_		else if (newSlot != this.sharedSlot){_			if (locationLocked && this.sharedSlot.getInstance() != newSlot.getInstance()) {_				throw new IllegalArgumentException(_						"Cannot assign different location to a constraint whose location is locked.")__			}_			if (this.sharedSlot.isAlive()) {_				this.sharedSlot.releaseSlot()__			}_			_			this.sharedSlot = newSlot__		}_	};assigns,a,new,shared,slot,to,this,co,location,constraint,the,shared,slot,will,hold,the,subtasks,that,are,executed,under,this,co,location,constraint,if,the,constraint,s,location,is,assigned,then,this,slot,needs,to,be,from,the,same,location,instance,as,the,one,assigned,to,this,constraint,p,if,the,constraint,already,has,a,slot,the,current,one,will,be,released,p,param,new,slot,the,new,shared,slot,to,assign,to,this,constraint,throws,illegal,argument,exception,if,the,constraint,s,location,has,been,assigned,and,the,new,slot,is,from,a,different,location;public,void,set,shared,slot,shared,slot,new,slot,if,this,shared,slot,null,this,shared,slot,new,slot,else,if,new,slot,this,shared,slot,if,location,locked,this,shared,slot,get,instance,new,slot,get,instance,throw,new,illegal,argument,exception,cannot,assign,different,location,to,a,constraint,whose,location,is,locked,if,this,shared,slot,is,alive,this,shared,slot,release,slot,this,shared,slot,new,slot
CoLocationConstraint -> public void setSharedSlot(SharedSlot newSlot);1472830377;Assigns a new shared slot to this co-location constraint. The shared slot_will hold the subtasks that are executed under this co-location constraint._If the constraint's location is assigned, then this slot needs to be from_the same location (instance) as the one assigned to this constraint.__<p>If the constraint already has a slot, the current one will be released.</p>__@param newSlot The new shared slot to assign to this constraint._@throws IllegalArgumentException If the constraint's location has been assigned and_the new slot is from a different location.;public void setSharedSlot(SharedSlot newSlot) {_		checkNotNull(newSlot)___		if (this.sharedSlot == null) {_			this.sharedSlot = newSlot__		}_		else if (newSlot != this.sharedSlot){_			if (lockedLocation != null && lockedLocation != newSlot.getTaskManagerID()) {_				throw new IllegalArgumentException(_						"Cannot assign different location to a constraint whose location is locked.")__			}_			if (this.sharedSlot.isAlive()) {_				this.sharedSlot.releaseSlot()__			}__			this.sharedSlot = newSlot__		}_	};assigns,a,new,shared,slot,to,this,co,location,constraint,the,shared,slot,will,hold,the,subtasks,that,are,executed,under,this,co,location,constraint,if,the,constraint,s,location,is,assigned,then,this,slot,needs,to,be,from,the,same,location,instance,as,the,one,assigned,to,this,constraint,p,if,the,constraint,already,has,a,slot,the,current,one,will,be,released,p,param,new,slot,the,new,shared,slot,to,assign,to,this,constraint,throws,illegal,argument,exception,if,the,constraint,s,location,has,been,assigned,and,the,new,slot,is,from,a,different,location;public,void,set,shared,slot,shared,slot,new,slot,check,not,null,new,slot,if,this,shared,slot,null,this,shared,slot,new,slot,else,if,new,slot,this,shared,slot,if,locked,location,null,locked,location,new,slot,get,task,manager,id,throw,new,illegal,argument,exception,cannot,assign,different,location,to,a,constraint,whose,location,is,locked,if,this,shared,slot,is,alive,this,shared,slot,release,slot,this,shared,slot,new,slot
CoLocationConstraint -> public void setSharedSlot(SharedSlot newSlot);1513201070;Assigns a new shared slot to this co-location constraint. The shared slot_will hold the subtasks that are executed under this co-location constraint._If the constraint's location is assigned, then this slot needs to be from_the same location (instance) as the one assigned to this constraint.__<p>If the constraint already has a slot, the current one will be released.</p>__@param newSlot The new shared slot to assign to this constraint._@throws IllegalArgumentException If the constraint's location has been assigned and_the new slot is from a different location.;public void setSharedSlot(SharedSlot newSlot) {_		checkNotNull(newSlot)___		if (this.sharedSlot == null) {_			this.sharedSlot = newSlot__		}_		else if (newSlot != this.sharedSlot){_			if (lockedLocation != null && lockedLocation != newSlot.getTaskManagerID()) {_				throw new IllegalArgumentException(_						"Cannot assign different location to a constraint whose location is locked.")__			}_			if (this.sharedSlot.isAlive()) {_				this.sharedSlot.releaseInstanceSlot()__			}__			this.sharedSlot = newSlot__		}_	};assigns,a,new,shared,slot,to,this,co,location,constraint,the,shared,slot,will,hold,the,subtasks,that,are,executed,under,this,co,location,constraint,if,the,constraint,s,location,is,assigned,then,this,slot,needs,to,be,from,the,same,location,instance,as,the,one,assigned,to,this,constraint,p,if,the,constraint,already,has,a,slot,the,current,one,will,be,released,p,param,new,slot,the,new,shared,slot,to,assign,to,this,constraint,throws,illegal,argument,exception,if,the,constraint,s,location,has,been,assigned,and,the,new,slot,is,from,a,different,location;public,void,set,shared,slot,shared,slot,new,slot,check,not,null,new,slot,if,this,shared,slot,null,this,shared,slot,new,slot,else,if,new,slot,this,shared,slot,if,locked,location,null,locked,location,new,slot,get,task,manager,id,throw,new,illegal,argument,exception,cannot,assign,different,location,to,a,constraint,whose,location,is,locked,if,this,shared,slot,is,alive,this,shared,slot,release,instance,slot,this,shared,slot,new,slot
CoLocationConstraint -> public void setSharedSlot(SharedSlot newSlot);1513261599;Assigns a new shared slot to this co-location constraint. The shared slot_will hold the subtasks that are executed under this co-location constraint._If the constraint's location is assigned, then this slot needs to be from_the same location (instance) as the one assigned to this constraint.__<p>If the constraint already has a slot, the current one will be released.</p>__@param newSlot The new shared slot to assign to this constraint._@throws IllegalArgumentException If the constraint's location has been assigned and_the new slot is from a different location.;public void setSharedSlot(SharedSlot newSlot) {_		checkNotNull(newSlot)___		if (this.sharedSlot == null) {_			this.sharedSlot = newSlot__		}_		else if (newSlot != this.sharedSlot){_			if (lockedLocation != null && !Objects.equals(lockedLocation, newSlot.getTaskManagerLocation())) {_				throw new IllegalArgumentException(_						"Cannot assign different location to a constraint whose location is locked.")__			}_			if (this.sharedSlot.isAlive()) {_				this.sharedSlot.releaseSlot(new FlinkException("Setting new shared slot for co-location constraint."))__			}__			this.sharedSlot = newSlot__		}_	};assigns,a,new,shared,slot,to,this,co,location,constraint,the,shared,slot,will,hold,the,subtasks,that,are,executed,under,this,co,location,constraint,if,the,constraint,s,location,is,assigned,then,this,slot,needs,to,be,from,the,same,location,instance,as,the,one,assigned,to,this,constraint,p,if,the,constraint,already,has,a,slot,the,current,one,will,be,released,p,param,new,slot,the,new,shared,slot,to,assign,to,this,constraint,throws,illegal,argument,exception,if,the,constraint,s,location,has,been,assigned,and,the,new,slot,is,from,a,different,location;public,void,set,shared,slot,shared,slot,new,slot,check,not,null,new,slot,if,this,shared,slot,null,this,shared,slot,new,slot,else,if,new,slot,this,shared,slot,if,locked,location,null,objects,equals,locked,location,new,slot,get,task,manager,location,throw,new,illegal,argument,exception,cannot,assign,different,location,to,a,constraint,whose,location,is,locked,if,this,shared,slot,is,alive,this,shared,slot,release,slot,new,flink,exception,setting,new,shared,slot,for,co,location,constraint,this,shared,slot,new,slot
CoLocationConstraint -> public void setSharedSlot(SharedSlot newSlot);1522681180;Assigns a new shared slot to this co-location constraint. The shared slot_will hold the subtasks that are executed under this co-location constraint._If the constraint's location is assigned, then this slot needs to be from_the same location (instance) as the one assigned to this constraint.__<p>If the constraint already has a slot, the current one will be released.</p>__@param newSlot The new shared slot to assign to this constraint._@throws IllegalArgumentException If the constraint's location has been assigned and_the new slot is from a different location.;public void setSharedSlot(SharedSlot newSlot) {_		checkNotNull(newSlot)___		if (this.sharedSlot == null) {_			this.sharedSlot = newSlot__		}_		else if (newSlot != this.sharedSlot){_			if (lockedLocation != null && !Objects.equals(lockedLocation, newSlot.getTaskManagerLocation())) {_				throw new IllegalArgumentException(_						"Cannot assign different location to a constraint whose location is locked.")__			}_			if (this.sharedSlot.isAlive()) {_				this.sharedSlot.releaseSlot(new FlinkException("Setting new shared slot for co-location constraint."))__			}__			this.sharedSlot = newSlot__		}_	};assigns,a,new,shared,slot,to,this,co,location,constraint,the,shared,slot,will,hold,the,subtasks,that,are,executed,under,this,co,location,constraint,if,the,constraint,s,location,is,assigned,then,this,slot,needs,to,be,from,the,same,location,instance,as,the,one,assigned,to,this,constraint,p,if,the,constraint,already,has,a,slot,the,current,one,will,be,released,p,param,new,slot,the,new,shared,slot,to,assign,to,this,constraint,throws,illegal,argument,exception,if,the,constraint,s,location,has,been,assigned,and,the,new,slot,is,from,a,different,location;public,void,set,shared,slot,shared,slot,new,slot,check,not,null,new,slot,if,this,shared,slot,null,this,shared,slot,new,slot,else,if,new,slot,this,shared,slot,if,locked,location,null,objects,equals,locked,location,new,slot,get,task,manager,location,throw,new,illegal,argument,exception,cannot,assign,different,location,to,a,constraint,whose,location,is,locked,if,this,shared,slot,is,alive,this,shared,slot,release,slot,new,flink,exception,setting,new,shared,slot,for,co,location,constraint,this,shared,slot,new,slot
CoLocationConstraint -> public void setSharedSlot(SharedSlot newSlot);1528875757;Assigns a new shared slot to this co-location constraint. The shared slot_will hold the subtasks that are executed under this co-location constraint._If the constraint's location is assigned, then this slot needs to be from_the same location (instance) as the one assigned to this constraint.__<p>If the constraint already has a slot, the current one will be released.</p>__@param newSlot The new shared slot to assign to this constraint._@throws IllegalArgumentException If the constraint's location has been assigned and_the new slot is from a different location.;public void setSharedSlot(SharedSlot newSlot) {_		checkNotNull(newSlot)___		if (this.sharedSlot == null) {_			this.sharedSlot = newSlot__		}_		else if (newSlot != this.sharedSlot){_			if (lockedLocation != null && !Objects.equals(lockedLocation, newSlot.getTaskManagerLocation())) {_				throw new IllegalArgumentException(_						"Cannot assign different location to a constraint whose location is locked.")__			}_			if (this.sharedSlot.isAlive()) {_				this.sharedSlot.releaseSlot(new FlinkException("Setting new shared slot for co-location constraint."))__			}__			this.sharedSlot = newSlot__		}_	};assigns,a,new,shared,slot,to,this,co,location,constraint,the,shared,slot,will,hold,the,subtasks,that,are,executed,under,this,co,location,constraint,if,the,constraint,s,location,is,assigned,then,this,slot,needs,to,be,from,the,same,location,instance,as,the,one,assigned,to,this,constraint,p,if,the,constraint,already,has,a,slot,the,current,one,will,be,released,p,param,new,slot,the,new,shared,slot,to,assign,to,this,constraint,throws,illegal,argument,exception,if,the,constraint,s,location,has,been,assigned,and,the,new,slot,is,from,a,different,location;public,void,set,shared,slot,shared,slot,new,slot,check,not,null,new,slot,if,this,shared,slot,null,this,shared,slot,new,slot,else,if,new,slot,this,shared,slot,if,locked,location,null,objects,equals,locked,location,new,slot,get,task,manager,location,throw,new,illegal,argument,exception,cannot,assign,different,location,to,a,constraint,whose,location,is,locked,if,this,shared,slot,is,alive,this,shared,slot,release,slot,new,flink,exception,setting,new,shared,slot,for,co,location,constraint,this,shared,slot,new,slot
CoLocationConstraint -> public boolean isAssigned();1432737361;Checks whether the location of this constraint has been assigned._The location is assigned once a slot has been set, via the_{@link #setSharedSlot(org.apache.flink.runtime.instance.SharedSlot)} method,_and the location is locked via the {@link #lockLocation()} method.__@return True if the location has been assigned, false otherwise.;public boolean isAssigned() {_		return locationLocked__	};checks,whether,the,location,of,this,constraint,has,been,assigned,the,location,is,assigned,once,a,slot,has,been,set,via,the,link,set,shared,slot,org,apache,flink,runtime,instance,shared,slot,method,and,the,location,is,locked,via,the,link,lock,location,method,return,true,if,the,location,has,been,assigned,false,otherwise;public,boolean,is,assigned,return,location,locked
CoLocationConstraint -> public boolean isAssigned();1465991918;Checks whether the location of this constraint has been assigned._The location is assigned once a slot has been set, via the_{@link #setSharedSlot(org.apache.flink.runtime.instance.SharedSlot)} method,_and the location is locked via the {@link #lockLocation()} method.__@return True if the location has been assigned, false otherwise.;public boolean isAssigned() {_		return locationLocked__	};checks,whether,the,location,of,this,constraint,has,been,assigned,the,location,is,assigned,once,a,slot,has,been,set,via,the,link,set,shared,slot,org,apache,flink,runtime,instance,shared,slot,method,and,the,location,is,locked,via,the,link,lock,location,method,return,true,if,the,location,has,been,assigned,false,otherwise;public,boolean,is,assigned,return,location,locked
CoLocationConstraint -> public boolean isAssigned();1472830377;Checks whether the location of this constraint has been assigned._The location is assigned once a slot has been set, via the_{@link #setSharedSlot(org.apache.flink.runtime.instance.SharedSlot)} method,_and the location is locked via the {@link #lockLocation()} method.__@return True if the location has been assigned, false otherwise.;public boolean isAssigned() {_		return lockedLocation != null__	};checks,whether,the,location,of,this,constraint,has,been,assigned,the,location,is,assigned,once,a,slot,has,been,set,via,the,link,set,shared,slot,org,apache,flink,runtime,instance,shared,slot,method,and,the,location,is,locked,via,the,link,lock,location,method,return,true,if,the,location,has,been,assigned,false,otherwise;public,boolean,is,assigned,return,locked,location,null
CoLocationConstraint -> public boolean isAssigned();1513201070;Checks whether the location of this constraint has been assigned._The location is assigned once a slot has been set, via the_{@link #setSharedSlot(org.apache.flink.runtime.instance.SharedSlot)} method,_and the location is locked via the {@link #lockLocation()} method.__@return True if the location has been assigned, false otherwise.;public boolean isAssigned() {_		return lockedLocation != null__	};checks,whether,the,location,of,this,constraint,has,been,assigned,the,location,is,assigned,once,a,slot,has,been,set,via,the,link,set,shared,slot,org,apache,flink,runtime,instance,shared,slot,method,and,the,location,is,locked,via,the,link,lock,location,method,return,true,if,the,location,has,been,assigned,false,otherwise;public,boolean,is,assigned,return,locked,location,null
CoLocationConstraint -> public boolean isAssigned();1513261599;Checks whether the location of this constraint has been assigned._The location is assigned once a slot has been set, via the_{@link #setSharedSlot(org.apache.flink.runtime.instance.SharedSlot)} method,_and the location is locked via the {@link #lockLocation()} method.__@return True if the location has been assigned, false otherwise.;public boolean isAssigned() {_		return lockedLocation != null__	};checks,whether,the,location,of,this,constraint,has,been,assigned,the,location,is,assigned,once,a,slot,has,been,set,via,the,link,set,shared,slot,org,apache,flink,runtime,instance,shared,slot,method,and,the,location,is,locked,via,the,link,lock,location,method,return,true,if,the,location,has,been,assigned,false,otherwise;public,boolean,is,assigned,return,locked,location,null
CoLocationConstraint -> public boolean isAssigned();1522681180;Checks whether the location of this constraint has been assigned._The location is assigned once a slot has been set, via the_{@link #setSharedSlot(org.apache.flink.runtime.instance.SharedSlot)} method,_and the location is locked via the {@link #lockLocation()} method.__@return True if the location has been assigned, false otherwise.;public boolean isAssigned() {_		return lockedLocation != null__	};checks,whether,the,location,of,this,constraint,has,been,assigned,the,location,is,assigned,once,a,slot,has,been,set,via,the,link,set,shared,slot,org,apache,flink,runtime,instance,shared,slot,method,and,the,location,is,locked,via,the,link,lock,location,method,return,true,if,the,location,has,been,assigned,false,otherwise;public,boolean,is,assigned,return,locked,location,null
CoLocationConstraint -> public boolean isAssigned();1528875757;Checks whether the location of this constraint has been assigned._The location is assigned once a slot has been set, via the_{@link #setSharedSlot(org.apache.flink.runtime.instance.SharedSlot)} method,_and the location is locked via the {@link #lockLocation()} method.__@return True if the location has been assigned, false otherwise.;public boolean isAssigned() {_		return lockedLocation != null__	};checks,whether,the,location,of,this,constraint,has,been,assigned,the,location,is,assigned,once,a,slot,has,been,set,via,the,link,set,shared,slot,org,apache,flink,runtime,instance,shared,slot,method,and,the,location,is,locked,via,the,link,lock,location,method,return,true,if,the,location,has,been,assigned,false,otherwise;public,boolean,is,assigned,return,locked,location,null
CoLocationConstraint -> public TaskManagerLocation getLocation();1472830377;Gets the location assigned to this slot. This method only succeeds after_the location has been locked via the {@link #lockLocation()} method and_{@link #isAssigned()} returns true.__@return The instance describing the location for the tasks of this constraint._@throws IllegalStateException Thrown if the location has not been assigned, yet.;public TaskManagerLocation getLocation() {_		if (lockedLocation != null) {_			return sharedSlot.getTaskManagerLocation()__		} else {_			throw new IllegalStateException("Location not yet locked")__		}_	};gets,the,location,assigned,to,this,slot,this,method,only,succeeds,after,the,location,has,been,locked,via,the,link,lock,location,method,and,link,is,assigned,returns,true,return,the,instance,describing,the,location,for,the,tasks,of,this,constraint,throws,illegal,state,exception,thrown,if,the,location,has,not,been,assigned,yet;public,task,manager,location,get,location,if,locked,location,null,return,shared,slot,get,task,manager,location,else,throw,new,illegal,state,exception,location,not,yet,locked
CoLocationConstraint -> public TaskManagerLocation getLocation();1513201070;Gets the location assigned to this slot. This method only succeeds after_the location has been locked via the {@link #lockLocation()} method and_{@link #isAssigned()} returns true.__@return The instance describing the location for the tasks of this constraint._@throws IllegalStateException Thrown if the location has not been assigned, yet.;public TaskManagerLocation getLocation() {_		if (lockedLocation != null) {_			return sharedSlot.getTaskManagerLocation()__		} else {_			throw new IllegalStateException("Location not yet locked")__		}_	};gets,the,location,assigned,to,this,slot,this,method,only,succeeds,after,the,location,has,been,locked,via,the,link,lock,location,method,and,link,is,assigned,returns,true,return,the,instance,describing,the,location,for,the,tasks,of,this,constraint,throws,illegal,state,exception,thrown,if,the,location,has,not,been,assigned,yet;public,task,manager,location,get,location,if,locked,location,null,return,shared,slot,get,task,manager,location,else,throw,new,illegal,state,exception,location,not,yet,locked
CoLocationConstraint -> public TaskManagerLocation getLocation();1513261599;Gets the location assigned to this slot. This method only succeeds after_the location has been locked via the {@link #lockLocation()} method and_{@link #isAssigned()} returns true.__@return The instance describing the location for the tasks of this constraint._@throws IllegalStateException Thrown if the location has not been assigned, yet.;public TaskManagerLocation getLocation() {_		if (lockedLocation != null) {_			return lockedLocation__		} else {_			throw new IllegalStateException("Location not yet locked")__		}_	};gets,the,location,assigned,to,this,slot,this,method,only,succeeds,after,the,location,has,been,locked,via,the,link,lock,location,method,and,link,is,assigned,returns,true,return,the,instance,describing,the,location,for,the,tasks,of,this,constraint,throws,illegal,state,exception,thrown,if,the,location,has,not,been,assigned,yet;public,task,manager,location,get,location,if,locked,location,null,return,locked,location,else,throw,new,illegal,state,exception,location,not,yet,locked
CoLocationConstraint -> public TaskManagerLocation getLocation();1522681180;Gets the location assigned to this slot. This method only succeeds after_the location has been locked via the {@link #lockLocation()} method and_{@link #isAssigned()} returns true.__@return The instance describing the location for the tasks of this constraint._@throws IllegalStateException Thrown if the location has not been assigned, yet.;public TaskManagerLocation getLocation() {_		if (lockedLocation != null) {_			return lockedLocation__		} else {_			throw new IllegalStateException("Location not yet locked")__		}_	};gets,the,location,assigned,to,this,slot,this,method,only,succeeds,after,the,location,has,been,locked,via,the,link,lock,location,method,and,link,is,assigned,returns,true,return,the,instance,describing,the,location,for,the,tasks,of,this,constraint,throws,illegal,state,exception,thrown,if,the,location,has,not,been,assigned,yet;public,task,manager,location,get,location,if,locked,location,null,return,locked,location,else,throw,new,illegal,state,exception,location,not,yet,locked
CoLocationConstraint -> public TaskManagerLocation getLocation();1528875757;Gets the location assigned to this slot. This method only succeeds after_the location has been locked via the {@link #lockLocation()} method and_{@link #isAssigned()} returns true.__@return The instance describing the location for the tasks of this constraint._@throws IllegalStateException Thrown if the location has not been assigned, yet.;public TaskManagerLocation getLocation() {_		if (lockedLocation != null) {_			return lockedLocation__		} else {_			throw new IllegalStateException("Location not yet locked")__		}_	};gets,the,location,assigned,to,this,slot,this,method,only,succeeds,after,the,location,has,been,locked,via,the,link,lock,location,method,and,link,is,assigned,returns,true,return,the,instance,describing,the,location,for,the,tasks,of,this,constraint,throws,illegal,state,exception,thrown,if,the,location,has,not,been,assigned,yet;public,task,manager,location,get,location,if,locked,location,null,return,locked,location,else,throw,new,illegal,state,exception,location,not,yet,locked
