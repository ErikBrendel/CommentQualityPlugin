commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns the {@link ExecutionAttemptID} for this Execution.  *  * @return ExecutionAttemptID for this execution  */ ;/**  * Returns the {@link ExecutionAttemptID} for this Execution.  *  * @return ExecutionAttemptID for this execution  */ ExecutionAttemptID getAttemptId().
true;;0;1;/**  * Returns the attempt number for this execution.  *  * @return attempt number for this execution.  */ ;/**  * Returns the attempt number for this execution.  *  * @return attempt number for this execution.  */ int getAttemptNumber().
true;;0;1;/**  * Returns the timestamps for every {@link ExecutionState}.  *  * @return timestamps for each state  */ ;/**  * Returns the timestamps for every {@link ExecutionState}.  *  * @return timestamps for each state  */ long[] getStateTimestamps().
true;;0;1;/**  * Returns the current {@link ExecutionState} for this execution.  *  * @return execution state for this execution  */ ;/**  * Returns the current {@link ExecutionState} for this execution.  *  * @return execution state for this execution  */ ExecutionState getState().
true;;0;1;/**  * Returns the {@link TaskManagerLocation} for this execution.  *  * @return taskmanager location for this execution.  */ ;/**  * Returns the {@link TaskManagerLocation} for this execution.  *  * @return taskmanager location for this execution.  */ TaskManagerLocation getAssignedResourceLocation().
true;;0;1;/**  * Returns the exception that caused the job to fail. This is the first root exception  * that was not recoverable and triggered job failure.  *  * @return failure exception as a string, or {@code "(null)"}  */ ;/**  * Returns the exception that caused the job to fail. This is the first root exception  * that was not recoverable and triggered job failure.  *  * @return failure exception as a string, or {@code "(null)"}  */ String getFailureCauseAsString().
true;;1;1;/**  * Returns the timestamp for the given {@link ExecutionState}.  *  * @param state state for which the timestamp should be returned  * @return timestamp for the given state  */ ;/**  * Returns the timestamp for the given {@link ExecutionState}.  *  * @param state state for which the timestamp should be returned  * @return timestamp for the given state  */ long getStateTimestamp(ExecutionState state).
true;;0;1;/**  * Returns the user-defined accumulators as strings.  *  * @return user-defined accumulators as strings.  */ ;/**  * Returns the user-defined accumulators as strings.  *  * @return user-defined accumulators as strings.  */ StringifiedAccumulatorResult[] getUserAccumulatorsStringified().
true;;0;1;/**  * Returns the subtask index of this execution.  *  * @return subtask index of this execution.  */ ;/**  * Returns the subtask index of this execution.  *  * @return subtask index of this execution.  */ int getParallelSubtaskIndex().
false;;0;1;;IOMetrics getIOMetrics().
