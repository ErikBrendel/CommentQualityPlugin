# id;timestamp;commentText;codeText;commentWords;codeWords
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1507212387;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			blobKey = BlobKey.createKey(blobType, md.digest())___			_			moveTempFileToStore(incomingFile, jobId, blobKey)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,blob,key,create,key,blob,type,md,digest,move,temp,file,to,store,incoming,file,job,id,blob,key,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1508138617;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1508578816;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1508861310;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1508861310;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1508861311;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1508861311;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1515428991;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1516265158;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1517324056;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)__		} catch (IOException ioe) {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for job {}.",_					incomingFile, jobId)__			}_			throw ioe__		}__		try {_			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,catch,ioexception,ioe,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,job,incoming,file,job,id,throw,ioe,try,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1519567828;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)__		} catch (IOException ioe) {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for job {}.",_					incomingFile, jobId)__			}_			throw ioe__		}__		try {_			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,catch,ioexception,ioe,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,job,incoming,file,job,id,throw,ioe,try,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1526549506;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)__		} catch (IOException ioe) {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for job {}.",_					incomingFile, jobId)__			}_			throw ioe__		}__		try {_			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,catch,ioexception,ioe,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,job,incoming,file,job,id,throw,ioe,try,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1531721446;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)__		} catch (IOException ioe) {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for job {}.",_					incomingFile, jobId)__			}_			throw ioe__		}__		try {_			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,catch,ioexception,ioe,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,job,incoming,file,job,id,throw,ioe,try,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1531721446;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)__		} catch (IOException ioe) {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for job {}.",_					incomingFile, jobId)__			}_			throw ioe__		}__		try {_			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,catch,ioexception,ioe,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,job,incoming,file,job,id,throw,ioe,try,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> void deleteInternal(@Nullable JobID jobId, BlobKey key) throws IOException;1502701584;Deletes the file associated with the blob key in both the local storage as well as in the HA_store of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@throws IOException;void deleteInternal(@Nullable JobID jobId, BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, key)___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__			}__			blobStore.delete(jobId, key)__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,both,the,local,storage,as,well,as,in,the,ha,store,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;void,delete,internal,nullable,job,id,job,id,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,blob,store,delete,job,id,key,finally,read,write,lock,write,lock,unlock
BlobServer -> void deleteInternal(@Nullable JobID jobId, BlobKey key) throws IOException;1503041372;Deletes the file associated with the blob key in both the local storage as well as in the HA_store of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@throws IOException;void deleteInternal(@Nullable JobID jobId, BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, key)___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__			}__			blobStore.delete(jobId, key)__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,both,the,local,storage,as,well,as,in,the,ha,store,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;void,delete,internal,nullable,job,id,job,id,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,blob,store,delete,job,id,key,finally,read,write,lock,write,lock,unlock
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1412605211;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if(localFile.exists()){_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1418925511;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if(localFile.exists()){_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1423133799;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if(localFile.exists()){_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1423156802;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if(localFile.exists()){_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1423158212;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if(localFile.exists()){_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1423578739;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if(localFile.exists()){_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1423683763;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if(localFile.exists()){_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1423847366;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if (localFile.exists()) {_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1412605211;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1418925511;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1423133799;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1423156802;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1423158212;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1423578739;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1423683763;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1423847366;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> public BlobServer(Configuration config) throws IOException;1423683763;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {__		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		try {_			this.serverSocket = new ServerSocket(0)___			start()___			if (LOG.isInfoEnabled()) {_				LOG.info(String.format("Started BLOB server on port %d",_						this.serverSocket.getLocalPort()))__			}_		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with random port.", e)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,try,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,random,port,e
BlobServer -> public BlobServer(Configuration config) throws IOException;1423847366;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {__		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		try {_			this.serverSocket = new ServerSocket(0)___			start()___			if (LOG.isInfoEnabled()) {_				LOG.info(String.format("Started BLOB server on port %d",_						this.serverSocket.getLocalPort()))__			}_		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with random port.", e)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,try,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,random,port,e
BlobServer -> public BlobServer(Configuration config) throws IOException;1424264340;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {__		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		_		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		_		try {_			this.serverSocket = new ServerSocket(0, backlog)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with automatic port choice.", e)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,try,this,server,socket,new,server,socket,0,backlog,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,automatic,port,choice,e,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1427713036;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {__		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		_		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		_		try {_			this.serverSocket = new ServerSocket(0, backlog)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with automatic port choice.", e)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,try,this,server,socket,new,server,socket,0,backlog,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,automatic,port,choice,e,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1427784999;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {__		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		_		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		_		try {_			this.serverSocket = new ServerSocket(0, backlog)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with automatic port choice.", e)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,try,this,server,socket,new,server,socket,0,backlog,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,automatic,port,choice,e,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1441011751;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {__		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		_		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		_		try {_			this.serverSocket = new ServerSocket(0, backlog)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with automatic port choice.", e)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,try,this,server,socket,new,server,socket,0,backlog,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,automatic,port,choice,e,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1445293012;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		_		else if (config.containsKey(ConfigConstants.STATE_BACKEND) &&_				config.containsKey(ConfigConstants.STATE_BACKEND_FS_RECOVERY_PATH)) {__			this.blobStore = new FileSystemBlobStore(config)__		}_		_		else {_			this.blobStore = new VoidBlobStore()__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		_		try {_			this.serverSocket = new ServerSocket(0, backlog)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with automatic port choice.", e)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,config,contains,key,config,constants,config,contains,key,config,constants,this,blob,store,new,file,system,blob,store,config,else,this,blob,store,new,void,blob,store,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,try,this,server,socket,new,server,socket,0,backlog,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,automatic,port,choice,e,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1445598182;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		_		else if (config.containsKey(ConfigConstants.STATE_BACKEND) &&_				config.containsKey(ConfigConstants.ZOOKEEPER_RECOVERY_PATH)) {__			this.blobStore = new FileSystemBlobStore(config)__		}_		_		else {_			this.blobStore = new VoidBlobStore()__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		_		try {_			this.serverSocket = new ServerSocket(0, backlog)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with automatic port choice.", e)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,config,contains,key,config,constants,config,contains,key,config,constants,this,blob,store,new,file,system,blob,store,config,else,this,blob,store,new,void,blob,store,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,try,this,server,socket,new,server,socket,0,backlog,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,automatic,port,choice,e,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1448376996;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		_		else if (config.containsKey(ConfigConstants.STATE_BACKEND) &&_				config.containsKey(ConfigConstants.ZOOKEEPER_RECOVERY_PATH)) {__			this.blobStore = new FileSystemBlobStore(config)__		}_		_		else {_			this.blobStore = new VoidBlobStore()__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)__		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange).iterator()___		ServerSocket socketAttempt = null__		while(ports.hasNext()) {_			int port = ports.next()__			LOG.debug("Trying to open socket on port {}", port)__			try {_				socketAttempt = new ServerSocket(port, backlog)__				break_ _			} catch (IOException | IllegalArgumentException e) {_				if(LOG.isDebugEnabled()) {_					LOG.debug("Unable to allocate socket on port", e)__				} else {_					LOG.info("Unable to allocate on port {}, due to error: {}", port, e.getMessage())__				}_			}_		}_		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,config,contains,key,config,constants,config,contains,key,config,constants,this,blob,store,new,file,system,blob,store,config,else,this,blob,store,new,void,blob,store,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,iterator,server,socket,socket,attempt,null,while,ports,has,next,int,port,ports,next,log,debug,trying,to,open,socket,on,port,port,try,socket,attempt,new,server,socket,port,backlog,break,catch,ioexception,illegal,argument,exception,e,if,log,is,debug,enabled,log,debug,unable,to,allocate,socket,on,port,e,else,log,info,unable,to,allocate,on,port,due,to,error,port,e,get,message,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1449679265;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		_		else if (config.containsKey(ConfigConstants.STATE_BACKEND) &&_				config.containsKey(ConfigConstants.ZOOKEEPER_RECOVERY_PATH)) {__			this.blobStore = new FileSystemBlobStore(config)__		}_		_		else {_			this.blobStore = new VoidBlobStore()__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,config,contains,key,config,constants,config,contains,key,config,constants,this,blob,store,new,file,system,blob,store,config,else,this,blob,store,new,void,blob,store,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1456841351;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		else if (recoveryMode == RecoveryMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected recovery mode '" + recoveryMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,recovery,mode,recovery,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,recovery,mode,recovery,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1460971208;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		else if (recoveryMode == RecoveryMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected recovery mode '" + recoveryMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,recovery,mode,recovery,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,recovery,mode,recovery,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1465991918;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		else if (recoveryMode == RecoveryMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected recovery mode '" + recoveryMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,recovery,mode,recovery,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,recovery,mode,recovery,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1468854249;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		else if (recoveryMode == RecoveryMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected recovery mode '" + recoveryMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,recovery,mode,recovery,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,recovery,mode,recovery,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1469452826;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		else if (recoveryMode == RecoveryMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected recovery mode '" + recoveryMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,recovery,mode,recovery,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,recovery,mode,recovery,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1472033364;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected recovery mode '" + highAvailabilityMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,high,availability,mode,high,availability,mode,none,this,blob,store,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,recovery,mode,high,availability,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,high,availability,mode,high,availability,mode,none,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1472033371;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			this.blobStore = new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,high,availability,mode,high,availability,mode,none,this,blob,store,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,high,availability,mode,high,availability,mode,none,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1476696544;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		this.blobServiceConfiguration = config___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			this.blobStore = new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		if (config.getBoolean(ConfigConstants.BLOB_SERVICE_SSL_ENABLED,_				ConfigConstants.DEFAULT_BLOB_SERVICE_SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,this,blob,service,configuration,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,high,availability,mode,high,availability,mode,none,this,blob,store,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,high,availability,mode,high,availability,mode,none,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,if,config,get,boolean,config,constants,config,constants,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1482522862;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		this(config, createBlobStoreFromConfig(config))__	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,this,config,create,blob,store,from,config,config
BlobServer -> public BlobServer(Configuration config) throws IOException;1484594328;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		this(config, createBlobStoreFromConfig(config))__	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,this,config,create,blob,store,from,config,config
BlobServer -> public BlobServer(Configuration config) throws IOException;1487441974;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config) throws IOException {_		this(config, BlobUtils.createBlobStoreFromConfig(config))__	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,throws,ioexception,this,config,blob,utils,create,blob,store,from,config,config
BlobServer -> public BlobServer(Configuration config) throws IOException;1489748538;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config) throws IOException {_		this(config, BlobUtils.createBlobStoreFromConfig(config))__	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,throws,ioexception,this,config,blob,utils,create,blob,store,from,config,config
BlobServer -> public BlobServer(Configuration config) throws IOException;1494690800;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config) throws IOException {_		this(config, BlobUtils.createBlobStoreFromConfig(config))__	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,throws,ioexception,this,config,blob,utils,create,blob,store,from,config,config
BlobServer -> File getTemporaryFilename();1412605211;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir), String.format("temp-%08d",_				tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File getTemporaryFilename();1418925511;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir), String.format("temp-%08d",_				tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File getTemporaryFilename();1423133799;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir), String.format("temp-%08d",_				tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File getTemporaryFilename();1423156802;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir), String.format("temp-%08d",_				tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File getTemporaryFilename();1423158212;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir), String.format("temp-%08d",_				tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File getTemporaryFilename();1423578739;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir), String.format("temp-%08d",_				tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File getTemporaryFilename();1423683763;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File getTemporaryFilename();1423847366;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> public File getStorageLocation(BlobKey key);1412605211;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key){_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1418925511;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key){_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1423133799;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key){_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1423156802;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key){_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1423158212;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key){_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1423578739;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key){_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1423683763;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1423847366;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1424264340;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1427713036;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1427784999;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1441011751;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1412605211;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if(requiredBlob == null){_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if(!localFile.exists()){_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		}else{_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1418925511;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if(requiredBlob == null){_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if(!localFile.exists()){_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		}else{_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1423133799;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if(requiredBlob == null){_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if(!localFile.exists()){_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		}else{_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1423156802;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if(requiredBlob == null){_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if(!localFile.exists()){_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		}else{_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1423158212;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if(requiredBlob == null){_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if(!localFile.exists()){_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		}else{_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1423578739;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if(requiredBlob == null){_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if(!localFile.exists()){_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		}else{_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1423683763;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if(requiredBlob == null){_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if(!localFile.exists()){_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		}else{_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1423847366;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (!localFile.exists()) {_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		} else {_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1424264340;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (!localFile.exists()) {_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does not exist.")__		} else {_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1427713036;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (!localFile.exists()) {_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does not exist.")__		} else {_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1427784999;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (!localFile.exists()) {_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does not exist.")__		} else {_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1441011751;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (!localFile.exists()) {_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does not exist.")__		} else {_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1445293012;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1445598182;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1448376996;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1449679265;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1456841351;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1460971208;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1465991918;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1468854249;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1469452826;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1472033364;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1472033371;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1476696544;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1482522862;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1484594328;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1487441974;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1489748538;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1494690800;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1495001929;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1495001945;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1499173045;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1499789965;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1507212387;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1508138617;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1508578816;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1508861310;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1508861310;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1508861311;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1508861311;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1515428991;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1516265158;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1517324056;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1519567828;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1526549506;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1531721446;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1531721446;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1412605211;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException{_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1418925511;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException{_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1423133799;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException{_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1423156802;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException{_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1423158212;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException{_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1423578739;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException{_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1423683763;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1423847366;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1424264340;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1427713036;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1427784999;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1441011751;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException;1507212387;Uploads the data of the given byte array for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putBuffer(jobId, value, PERMANENT_BLOB)__	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,byte,value,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,buffer,job,id,value
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException;1508138617;Uploads the data of the given byte array for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putBuffer(jobId, value, PERMANENT_BLOB)__	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,byte,value,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,buffer,job,id,value
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException;1508578816;Uploads the data of the given byte array for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putBuffer(jobId, value, PERMANENT_BLOB)__	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,byte,value,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,buffer,job,id,value
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException;1508861310;Uploads the data of the given byte array for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putBuffer(jobId, value, PERMANENT_BLOB)__	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,byte,value,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,buffer,job,id,value
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException;1508861310;Uploads the data of the given byte array for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putBuffer(jobId, value, PERMANENT_BLOB)__	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,byte,value,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,buffer,job,id,value
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException;1508861311;Uploads the data of the given byte array for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putBuffer(jobId, value, PERMANENT_BLOB)__	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,byte,value,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,buffer,job,id,value
BlobServer -> @Override 	public void shutdown();1423683763;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}_			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook
BlobServer -> @Override 	public void shutdown();1423847366;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}_			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook
BlobServer -> @Override 	public void shutdown();1424264340;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook
BlobServer -> @Override 	public void shutdown();1427713036;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook
BlobServer -> @Override 	public void shutdown();1427784999;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook
BlobServer -> @Override 	public void shutdown();1441011751;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1445293012;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1445598182;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1448376996;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1449679265;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1456841351;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1460971208;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1465991918;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1468854249;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1469452826;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1472033364;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1472033371;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1476696544;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1482522862;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1484594328;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1487441974;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1489748538;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1494690800;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> File createTemporaryFilename();1424264340;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1427713036;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1427784999;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1441011751;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1445293012;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1445598182;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1448376996;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1449679265;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1456841351;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1460971208;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1465991918;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1468854249;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1469452826;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1472033364;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1472033371;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1476696544;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1482522862;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1484594328;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1487441974;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1489748538;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1494690800;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1495001929;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1495001945;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1499173045;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1499789965;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1502692653;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1502701584;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1503041372;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1507212387;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1507212387;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1508138617;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1508578816;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1508861310;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1508861310;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1508861311;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1508861311;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1515428991;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1516265158;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1517324056;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1519567828;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1526549506;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1531721446;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1531721446;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> BlobStore getBlobStore();1445293012;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1445598182;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1448376996;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1449679265;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1456841351;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1460971208;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1465991918;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1468854249;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1469452826;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1472033364;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1472033371;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1476696544;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1482522862;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1484594328;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1487441974;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1489748538;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1494690800;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1495001929;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1495001945;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1499173045;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1499789965;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1502692653;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1502701584;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1503041372;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1507212387;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1508138617;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1508578816;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1508861310;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1508861310;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1508861311;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1508861311;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1515428991;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1516265158;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1517324056;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1519567828;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1526549506;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1531721446;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1531721446;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1507212387;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1508138617;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1508578816;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1508861310;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1508861310;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1508861311;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1508861311;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1515428991;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1516265158;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1517324056;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1519567828;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1526549506;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1531721446;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1531721446;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> @Override 	public void close() throws IOException;1495001929;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1495001945;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1499173045;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1499789965;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1502692653;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1502701584;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1503041372;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1507212387;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1507212387;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1508138617;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1508578816;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1508861310;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1508861310;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1508861311;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1508861311;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1515428991;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if (LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1516265158;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if (LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1517324056;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if (LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1519567828;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			ShutdownHookUtil.removeShutdownHook(shutdownHook, getClass().getSimpleName(), LOG)___			if (LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,shutdown,hook,util,remove,shutdown,hook,shutdown,hook,get,class,get,simple,name,log,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1526549506;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			ShutdownHookUtil.removeShutdownHook(shutdownHook, getClass().getSimpleName(), LOG)___			if (LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,shutdown,hook,util,remove,shutdown,hook,shutdown,hook,get,class,get,simple,name,log,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1531721446;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			ShutdownHookUtil.removeShutdownHook(shutdownHook, getClass().getSimpleName(), LOG)___			if (LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,shutdown,hook,util,remove,shutdown,hook,shutdown,hook,get,class,get,simple,name,log,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1531721446;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			ShutdownHookUtil.removeShutdownHook(shutdownHook, getClass().getSimpleName(), LOG)___			if (LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,shutdown,hook,util,remove,shutdown,hook,shutdown,hook,get,class,get,simple,name,log,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> ReadWriteLock getReadWriteLock();1507212387;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1507212387;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1508138617;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1508578816;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1508861310;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1508861310;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1508861311;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1508861311;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1515428991;Returns the lock used to guard file accesses.;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1516265158;Returns the lock used to guard file accesses.;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1517324056;Returns the lock used to guard file accesses.;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1519567828;Returns the lock used to guard file accesses.;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1526549506;Returns the lock used to guard file accesses.;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1531721446;Returns the lock used to guard file accesses.;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1531721446;Returns the lock used to guard file accesses.;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1507212387;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1508138617;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1508578816;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1508861310;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1508861310;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1508861311;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1508861311;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1515428991;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1516265158;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1517324056;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1519567828;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1526549506;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1531721446;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1531721446;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1507212387;Returns the path to a local copy of the file associated with the provided job ID and blob_key._<p>_We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1508138617;Returns the path to a local copy of the file associated with the provided job ID and blob_key._<p>_We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1508578816;Returns the path to a local copy of the file associated with the provided job ID and blob_key._<p>_We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1508861310;Returns the path to a local copy of the file associated with the provided job ID and blob_key._<p>_We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1508861310;Returns the path to a local copy of the file associated with the provided job ID and blob_key._<p>_We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1508861311;Returns the path to a local copy of the file associated with the provided job ID and blob_key._<p>_We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1508861311;Returns the path to a local copy of the file associated with the provided job ID and blob_key._<p>_We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1515428991;Returns the path to a local copy of the file associated with the provided job ID and blob_key.__<p>We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1516265158;Returns the path to a local copy of the file associated with the provided job ID and blob_key.__<p>We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1517324056;Returns the path to a local copy of the file associated with the provided job ID and blob_key.__<p>We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1519567828;Returns the path to a local copy of the file associated with the provided job ID and blob_key.__<p>We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1526549506;Returns the path to a local copy of the file associated with the provided job ID and blob_key.__<p>We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1531721446;Returns the path to a local copy of the file associated with the provided job ID and blob_key.__<p>We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1531721446;Returns the path to a local copy of the file associated with the provided job ID and blob_key.__<p>We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1507212387;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			blobKey = BlobKey.createKey(blobType, md.digest())___			_			moveTempFileToStore(incomingFile, jobId, blobKey)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,blob,key,create,key,blob,type,md,digest,move,temp,file,to,store,incoming,file,job,id,blob,key,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1508138617;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1508578816;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1508861310;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1508861310;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1508861311;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1508861311;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1515428991;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1516265158;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1517324056;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1519567828;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1526549506;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1531721446;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1531721446;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> @Override 	public int getPort();1412605211;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1418925511;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1423133799;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1423156802;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1423158212;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1423578739;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1423683763;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1423847366;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1424264340;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1427713036;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1427784999;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1441011751;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1445293012;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1445598182;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1448376996;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1449679265;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1456841351;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1460971208;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1465991918;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1468854249;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1469452826;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1472033364;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1472033371;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1476696544;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1482522862;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1484594328;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1487441974;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1489748538;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1494690800;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1495001929;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1495001945;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1499173045;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1499789965;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1502692653;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1502701584;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1503041372;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1507212387;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1507212387;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1508138617;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1508578816;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1508861310;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1508861310;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1508861311;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1508861311;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1515428991;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1516265158;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1517324056;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1519567828;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1526549506;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1531721446;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1531721446;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> ServerSocket getServerSocket();1424264340;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1427713036;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1427784999;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1441011751;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1445293012;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1445598182;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1448376996;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1449679265;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1456841351;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1460971208;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1465991918;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1468854249;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1469452826;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1472033364;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1472033371;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1476696544;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1482522862;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1484594328;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1487441974;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1489748538;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1494690800;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1495001929;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1495001945;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1499173045;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1499789965;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1502692653;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1502701584;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1503041372;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1507212387;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1507212387;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1508138617;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1508578816;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1508861310;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1508861310;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1508861311;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1508861311;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1515428991;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1516265158;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1517324056;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1519567828;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1526549506;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1531721446;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1531721446;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1507212387;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1507212387;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1508138617;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1508578816;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1508861310;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1508861310;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1508861311;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1508861311;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1515428991;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1516265158;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1517324056;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1519567828;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1526549506;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1531721446;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1531721446;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1507212387;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1508138617;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1508578816;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1508861310;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1508861310;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1508861311;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1508861311;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1515428991;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1516265158;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1517324056;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1519567828;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1526549506;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1531721446;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1531721446;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> File getStorageLocation(BlobKey key);1445293012;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1445598182;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1448376996;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1449679265;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1456841351;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1460971208;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1465991918;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1468854249;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1469452826;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1472033364;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1472033371;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1476696544;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1482522862;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1484594328;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1487441974;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1489748538;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1494690800;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1495001929;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1495001945;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1499173045;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1499789965;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1502692653;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> @Override 	public File getFile(BlobKey key) throws IOException;1502701584;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(BlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(BlobKey key) throws IOException;1503041372;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(BlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(BlobKey key) throws IOException;1507212387;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(BlobKey key) throws IOException {_		return getFileInternal(null, key, false)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,blob,key,key,throws,ioexception,return,get,file,internal,null,key,false
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1412605211;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1418925511;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1423133799;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1423156802;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1423158212;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1423578739;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1423683763;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1423847366;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1507212387;Helper to retrieve the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown._<p>_<strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				BlobUtils.moveTempFileToStore(_					incomingFile, jobId, blobKey, localFile, readWriteLock.writeLock(), LOG, null)___				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,read,write,lock,write,lock,log,null,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1508138617;Helper to retrieve the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown._<p>_<strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1508578816;Helper to retrieve the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown._<p>_<strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1508861310;Helper to retrieve the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown._<p>_<strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1508861310;Helper to retrieve the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown._<p>_<strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1508861311;Helper to retrieve the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown._<p>_<strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1508861311;Helper to retrieve the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown._<p>_<strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1515428991;Helper to retrieve the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__<p><strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1516265158;Helper to retrieve the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__<p><strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1517324056;Helper to retrieve the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__<p><strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1519567828;Helper to retrieve the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__<p><strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1526549506;Helper to retrieve the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__<p><strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1531721446;Helper to retrieve the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__<p><strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1531721446;Helper to retrieve the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__<p><strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey requiredBlob) throws IOException;1502701584;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param requiredBlob_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, requiredBlob)___		if (localFile.exists()) {_			return localFile__		}_		else {_			try {_				_				blobStore.get(jobId, requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException(_					"Failed to copy BLOB " + requiredBlob + " from blob store to " + localFile, e)__			}__			if (localFile.exists()) {_				return localFile__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,required,blob,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,required,blob,if,local,file,exists,return,local,file,else,try,blob,store,get,job,id,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,blob,required,blob,from,blob,store,to,local,file,e,if,local,file,exists,return,local,file,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey requiredBlob) throws IOException;1503041372;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param requiredBlob_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, requiredBlob)___		if (localFile.exists()) {_			return localFile__		}_		else {_			try {_				_				blobStore.get(jobId, requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException(_					"Failed to copy BLOB " + requiredBlob + " from blob store to " + localFile, e)__			}__			if (localFile.exists()) {_				return localFile__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,required,blob,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,required,blob,if,local,file,exists,return,local,file,else,try,blob,store,get,job,id,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,blob,required,blob,from,blob,store,to,local,file,e,if,local,file,exists,return,local,file,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1427713036;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1427784999;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1441011751;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1445293012;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1445598182;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1448376996;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1449679265;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1456841351;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1460971208;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1465991918;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1468854249;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1469452826;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1472033364;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1472033371;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1476696544;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1482522862;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1484594328;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1487441974;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1489748538;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1494690800;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1495001929;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1495001945;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1499173045;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1499789965;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1502692653;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1502701584;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1503041372;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1507212387;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1507212387;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1508138617;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1508578816;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1508861310;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1508861310;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1508861311;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1508861311;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1515428991;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1516265158;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1517324056;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1519567828;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1526549506;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1531721446;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1531721446;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> public File getStorageLocation(JobID jobID, String key);1412605211;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key){_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1418925511;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key){_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1423133799;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key){_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1423156802;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key){_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1423158212;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key){_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1423578739;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key){_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1423683763;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1423847366;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1424264340;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1427713036;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1427784999;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1441011751;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1508578816;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1508861310;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1508861310;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1508861311;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1508861311;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1515428991;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1516265158;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1517324056;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1519567828;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1526549506;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1531721446;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1531721446;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException;1507212387;Uploads the data from the given input stream for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_ID of the job this blob belongs to_@param inputStream_the input stream to read the data from__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putInputStream(jobId, inputStream, PERMANENT_BLOB)__	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,id,of,the,job,this,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,input,stream,input,stream,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,input,stream,job,id,input,stream
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException;1508138617;Uploads the data from the given input stream for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_ID of the job this blob belongs to_@param inputStream_the input stream to read the data from__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putInputStream(jobId, inputStream, PERMANENT_BLOB)__	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,id,of,the,job,this,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,input,stream,input,stream,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,input,stream,job,id,input,stream
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException;1508578816;Uploads the data from the given input stream for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_ID of the job this blob belongs to_@param inputStream_the input stream to read the data from__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putInputStream(jobId, inputStream, PERMANENT_BLOB)__	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,id,of,the,job,this,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,input,stream,input,stream,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,input,stream,job,id,input,stream
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException;1508861310;Uploads the data from the given input stream for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_ID of the job this blob belongs to_@param inputStream_the input stream to read the data from__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putInputStream(jobId, inputStream, PERMANENT_BLOB)__	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,id,of,the,job,this,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,input,stream,input,stream,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,input,stream,job,id,input,stream
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException;1508861310;Uploads the data from the given input stream for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_ID of the job this blob belongs to_@param inputStream_the input stream to read the data from__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putInputStream(jobId, inputStream, PERMANENT_BLOB)__	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,id,of,the,job,this,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,input,stream,input,stream,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,input,stream,job,id,input,stream
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException;1508861311;Uploads the data from the given input stream for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_ID of the job this blob belongs to_@param inputStream_the input stream to read the data from__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putInputStream(jobId, inputStream, PERMANENT_BLOB)__	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,id,of,the,job,this,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,input,stream,input,stream,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,input,stream,job,id,input,stream
BlobServer -> @Override 	public final int getMinOffloadingSize();1508861311;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> @Override 	public final int getMinOffloadingSize();1515428991;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> @Override 	public final int getMinOffloadingSize();1516265158;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> @Override 	public final int getMinOffloadingSize();1517324056;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> @Override 	public final int getMinOffloadingSize();1519567828;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> @Override 	public final int getMinOffloadingSize();1526549506;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> @Override 	public final int getMinOffloadingSize();1531721446;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> @Override 	public final int getMinOffloadingSize();1531721446;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> File getStorageLocation(JobID jobID, String key);1445293012;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1445598182;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1448376996;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1449679265;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1456841351;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1460971208;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1465991918;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1468854249;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1469452826;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1472033364;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1472033371;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1476696544;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1482522862;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1484594328;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1487441974;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1489748538;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1494690800;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1495001929;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1495001945;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1499173045;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, BlobKey key) throws IOException;1503041372;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, BlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, BlobKey key) throws IOException;1507212387;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, BlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key, false)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key,false
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1508138617;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1508578816;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1508861310;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1508861310;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1508861311;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1508861311;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1515428991;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1516265158;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1517324056;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1519567828;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1526549506;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1531721446;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1531721446;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> @Override 	public void shutdown() throws IOException;1412605211;Shuts down the BLOB server.;@Override_	public void shutdown() throws IOException {__		this.shutdownRequested = true__		try {_			this.serverSocket.close()__		} catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__		}_		try {_			join()__		} catch (InterruptedException ie) {_			LOG.debug("Error while waiting for this thread to die.", ie)__		}__		_		FileUtils.deleteDirectory(storageDir)___		_	};shuts,down,the,blob,server;override,public,void,shutdown,throws,ioexception,this,shutdown,requested,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,file,utils,delete,directory,storage,dir
BlobServer -> @Override 	public void shutdown() throws IOException;1418925511;Shuts down the BLOB server.;@Override_	public void shutdown() throws IOException {__		this.shutdownRequested = true__		try {_			this.serverSocket.close()__		} catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__		}_		try {_			join()__		} catch (InterruptedException ie) {_			LOG.debug("Error while waiting for this thread to die.", ie)__		}__		_		FileUtils.deleteDirectory(storageDir)___		_	};shuts,down,the,blob,server;override,public,void,shutdown,throws,ioexception,this,shutdown,requested,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,file,utils,delete,directory,storage,dir
BlobServer -> @Override 	public void shutdown() throws IOException;1423133799;Shuts down the BLOB server.;@Override_	public void shutdown() throws IOException {__		this.shutdownRequested = true__		try {_			this.serverSocket.close()__		} catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__		}_		try {_			join()__		} catch (InterruptedException ie) {_			LOG.debug("Error while waiting for this thread to die.", ie)__		}__		_		FileUtils.deleteDirectory(storageDir)___		_	};shuts,down,the,blob,server;override,public,void,shutdown,throws,ioexception,this,shutdown,requested,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,file,utils,delete,directory,storage,dir
BlobServer -> @Override 	public void shutdown() throws IOException;1423156802;Shuts down the BLOB server.;@Override_	public void shutdown() throws IOException {__		this.shutdownRequested = true__		try {_			this.serverSocket.close()__		} catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__		}_		try {_			join()__		} catch (InterruptedException ie) {_			LOG.debug("Error while waiting for this thread to die.", ie)__		}__		_		FileUtils.deleteDirectory(storageDir)___		_	};shuts,down,the,blob,server;override,public,void,shutdown,throws,ioexception,this,shutdown,requested,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,file,utils,delete,directory,storage,dir
BlobServer -> @Override 	public void shutdown() throws IOException;1423158212;Shuts down the BLOB server.;@Override_	public void shutdown() throws IOException {__		this.shutdownRequested = true__		try {_			this.serverSocket.close()__		} catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__		}_		try {_			join()__		} catch (InterruptedException ie) {_			LOG.debug("Error while waiting for this thread to die.", ie)__		}__		_		FileUtils.deleteDirectory(storageDir)___		_	};shuts,down,the,blob,server;override,public,void,shutdown,throws,ioexception,this,shutdown,requested,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,file,utils,delete,directory,storage,dir
BlobServer -> @Override 	public void shutdown() throws IOException;1423578739;Shuts down the BLOB server.;@Override_	public void shutdown() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}_			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			_			FileUtils.deleteDirectory(storageDir)___			_			Runtime.getRuntime().removeShutdownHook(shutdownHook)___			_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,file,utils,delete,directory,storage,dir,runtime,get,runtime,remove,shutdown,hook,shutdown,hook
BlobServer -> public boolean isShutdown();1424264340;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1427713036;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1427784999;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1441011751;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1445293012;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1445598182;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1448376996;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1449679265;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1456841351;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1460971208;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1465991918;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1468854249;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1469452826;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1472033364;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1472033371;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1476696544;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1482522862;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1484594328;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1487441974;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1489748538;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1494690800;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1495001929;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1495001945;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1499173045;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1499789965;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1502692653;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1502701584;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1503041372;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1507212387;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1507212387;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1508138617;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1508578816;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1508861310;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1508861310;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1508861311;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1508861311;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1515428991;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1516265158;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1517324056;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1519567828;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1526549506;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1531721446;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1531721446;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1412605211;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1418925511;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1423133799;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1423156802;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1423158212;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1423578739;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1423683763;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1423847366;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> public ReadWriteLock getReadWriteLock();1495001945;Returns the lock used to guard file accesses;public ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;public,read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> public ReadWriteLock getReadWriteLock();1499173045;Returns the lock used to guard file accesses;public ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;public,read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> public ReadWriteLock getReadWriteLock();1499789965;Returns the lock used to guard file accesses;public ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;public,read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> public ReadWriteLock getReadWriteLock();1502692653;Returns the lock used to guard file accesses;public ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;public,read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> public ReadWriteLock getReadWriteLock();1502701584;Returns the lock used to guard file accesses;public ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;public,read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> public ReadWriteLock getReadWriteLock();1503041372;Returns the lock used to guard file accesses;public ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;public,read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> public boolean cleanupJob(JobID jobId);1507212387;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1507212387;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1508138617;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1508578816;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1508861310;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1508861310;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1508861311;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1508861311;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1515428991;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1516265158;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1517324056;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1519567828;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public int getServerPort();1412605211;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {__		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> public int getServerPort();1418925511;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {__		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> public int getServerPort();1423133799;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {__		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> public int getServerPort();1423156802;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {__		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> public int getServerPort();1423158212;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {__		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> public int getServerPort();1423578739;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {__		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> public int getServerPort();1423683763;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> public int getServerPort();1423847366;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1424264340;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1427713036;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1427784999;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1441011751;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1445293012;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1445598182;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1448376996;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1449679265;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1456841351;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1460971208;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1465991918;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1468854249;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1469452826;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1472033364;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1472033371;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1476696544;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1482522862;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1484594328;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1487441974;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1489748538;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1494690800;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1495001929;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1495001945;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		readWriteLock.writeLock().lock()___		try {_			if (localFile.exists()) {_				if (!localFile.delete()) {_					LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__				}_			}__			blobStore.delete(key)__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,read,write,lock,write,lock,lock,try,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key,finally,read,write,lock,write,lock,unlock
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1499173045;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}__			blobStore.delete(key)__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key,finally,read,write,lock,write,lock,unlock
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1499789965;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}__			blobStore.delete(key)__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key,finally,read,write,lock,write,lock,unlock
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1502692653;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}__			blobStore.delete(key)__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key,finally,read,write,lock,write,lock,unlock
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1502701584;Deletes the (job-unrelated) file associated with the blob key in both the local storage as_well as in the HA store of the blob server.__@param key_blob key associated with the file to be deleted__@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,both,the,local,storage,as,well,as,in,the,ha,store,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,delete,internal,null,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1503041372;Deletes the (job-unrelated) file associated with the blob key in both the local storage as_well as in the HA store of the blob server.__@param key_blob key associated with the file to be deleted__@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,both,the,local,storage,as,well,as,in,the,ha,store,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,delete,internal,null,key
BlobServer -> public BlobServer() throws IOException;1412605211;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer() throws IOException {__		this.serverSocket = new ServerSocket(0)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info(String.format("Started BLOB server on port %d",_				this.serverSocket.getLocalPort()))__		}__		this.storageDir = BlobUtils.initStorageDirectory()__	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,throws,ioexception,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,this,storage,dir,blob,utils,init,storage,directory
BlobServer -> public BlobServer() throws IOException;1418925511;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer() throws IOException {__		try {_			this.serverSocket = new ServerSocket(0)___			start()___			if (LOG.isInfoEnabled()) {_				LOG.info(String.format("Started BLOB server on port %d",_						this.serverSocket.getLocalPort()))__			}__			this.storageDir = BlobUtils.initStorageDirectory()__		}catch(IOException e){_			throw new IOException("Could not create BlobServer with random port.", e)__		}__	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,throws,ioexception,try,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,this,storage,dir,blob,utils,init,storage,directory,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,random,port,e
BlobServer -> public BlobServer() throws IOException;1423133799;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer() throws IOException {_		try {_			this.serverSocket = new ServerSocket(0)___			start()___			if (LOG.isInfoEnabled()) {_				LOG.info(String.format("Started BLOB server on port %d",_						this.serverSocket.getLocalPort()))__			}__			this.storageDir = BlobUtils.initStorageDirectory()___			LOG.info("Created BLOB server storage directory " + storageDir)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with random port.", e)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,throws,ioexception,try,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,this,storage,dir,blob,utils,init,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,random,port,e
BlobServer -> public BlobServer() throws IOException;1423156802;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer() throws IOException {_		try {_			this.serverSocket = new ServerSocket(0)___			start()___			if (LOG.isInfoEnabled()) {_				LOG.info(String.format("Started BLOB server on port %d",_						this.serverSocket.getLocalPort()))__			}__			this.storageDir = BlobUtils.initStorageDirectory()___			LOG.info("Created BLOB server storage directory " + storageDir)___			_			BlobUtils.addDeleteDirectoryShutdownHook(storageDir)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with random port.", e)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,throws,ioexception,try,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,this,storage,dir,blob,utils,init,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,blob,utils,add,delete,directory,shutdown,hook,storage,dir,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,random,port,e
BlobServer -> public BlobServer() throws IOException;1423158212;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer() throws IOException {_		try {_			this.serverSocket = new ServerSocket(0)___			start()___			if (LOG.isInfoEnabled()) {_				LOG.info(String.format("Started BLOB server on port %d",_						this.serverSocket.getLocalPort()))__			}__			this.storageDir = BlobUtils.initStorageDirectory()___			LOG.info("Created BLOB server storage directory " + storageDir)___			_			BlobUtils.addDeleteDirectoryShutdownHook(storageDir, LOG)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with random port.", e)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,throws,ioexception,try,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,this,storage,dir,blob,utils,init,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,blob,utils,add,delete,directory,shutdown,hook,storage,dir,log,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,random,port,e
BlobServer -> public BlobServer() throws IOException;1423578739;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer() throws IOException {_		try {_			this.serverSocket = new ServerSocket(0)___			start()___			if (LOG.isInfoEnabled()) {_				LOG.info(String.format("Started BLOB server on port %d",_						this.serverSocket.getLocalPort()))__			}__			this.storageDir = BlobUtils.initStorageDirectory()___			LOG.info("Created BLOB server storage directory " + storageDir)___			shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with random port.", e)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,throws,ioexception,try,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,this,storage,dir,blob,utils,init,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,shutdown,hook,blob,utils,add,shutdown,hook,this,log,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,random,port,e
BlobServer -> public boolean cleanupJob(JobID jobId, boolean cleanupBlobStoreFiles);1526549506;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to_@param cleanupBlobStoreFiles_True if the corresponding blob store files shall be cleaned up as well. Otherwise false.__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId, boolean cleanupBlobStoreFiles) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			final boolean deletedHA = !cleanupBlobStoreFiles || blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,param,cleanup,blob,store,files,true,if,the,corresponding,blob,store,files,shall,be,cleaned,up,as,well,otherwise,false,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,boolean,cleanup,blob,store,files,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,final,boolean,deleted,ha,cleanup,blob,store,files,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId, boolean cleanupBlobStoreFiles);1531721446;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to_@param cleanupBlobStoreFiles_True if the corresponding blob store files shall be cleaned up as well. Otherwise false.__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId, boolean cleanupBlobStoreFiles) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			final boolean deletedHA = !cleanupBlobStoreFiles || blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,param,cleanup,blob,store,files,true,if,the,corresponding,blob,store,files,shall,be,cleaned,up,as,well,otherwise,false,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,boolean,cleanup,blob,store,files,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,final,boolean,deleted,ha,cleanup,blob,store,files,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId, boolean cleanupBlobStoreFiles);1531721446;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to_@param cleanupBlobStoreFiles_True if the corresponding blob store files shall be cleaned up as well. Otherwise false.__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId, boolean cleanupBlobStoreFiles) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			final boolean deletedHA = !cleanupBlobStoreFiles || blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,param,cleanup,blob,store,files,true,if,the,corresponding,blob,store,files,shall,be,cleaned,up,as,well,otherwise,false,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,boolean,cleanup,blob,store,files,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,final,boolean,deleted,ha,cleanup,blob,store,files,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1495001929;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1495001945;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1499173045;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1499789965;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1502692653;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1502701584;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1503041372;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1507212387;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1507212387;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1508138617;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1508578816;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1508861310;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1508861310;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1508861311;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1508861311;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1515428991;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if (socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: " + serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1516265158;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		this.storageDir = BlobUtils.initLocalStorageDirectory(config)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if (socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: " + serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,this,storage,dir,blob,utils,init,local,storage,directory,config,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1517324056;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		this.storageDir = BlobUtils.initLocalStorageDirectory(config)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if (socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: " + serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,this,storage,dir,blob,utils,init,local,storage,directory,config,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1519567828;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		this.storageDir = BlobUtils.initLocalStorageDirectory(config)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = ShutdownHookUtil.addShutdownHook(this, getClass().getSimpleName(), LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if (socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: " + serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,this,storage,dir,blob,utils,init,local,storage,directory,config,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,shutdown,hook,util,add,shutdown,hook,this,get,class,get,simple,name,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1526549506;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		this.storageDir = BlobUtils.initLocalStorageDirectory(config)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = ShutdownHookUtil.addShutdownHook(this, getClass().getSimpleName(), LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if (socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: " + serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,this,storage,dir,blob,utils,init,local,storage,directory,config,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,shutdown,hook,util,add,shutdown,hook,this,get,class,get,simple,name,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1531721446;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		this.storageDir = BlobUtils.initLocalStorageDirectory(config)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = ShutdownHookUtil.addShutdownHook(this, getClass().getSimpleName(), LOG)___		__		final String serverPortRange = config.getString(BlobServerOptions.PORT)__		final Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final ServerSocketFactory socketFactory__		if (config.getBoolean(SecurityOptions.SSL_ENABLED) && config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				socketFactory = SSLUtils.createSSLServerSocketFactory(config)__			}_			catch (Exception e) {_				throw new IOException("Failed to initialize SSL for the blob server", e)__			}_		}_		else {_			socketFactory = ServerSocketFactory.getDefault()__		}__		final int finalBacklog = backlog__		this.serverSocket = NetUtils.createSocketFromPorts(ports,_				(port) -> socketFactory.createServerSocket(port, finalBacklog))___		if (serverSocket == null) {_			throw new IOException("Unable to open BLOB Server in specified port range: " + serverPortRange)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,this,storage,dir,blob,utils,init,local,storage,directory,config,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,shutdown,hook,util,add,shutdown,hook,this,get,class,get,simple,name,log,final,string,server,port,range,config,get,string,blob,server,options,port,final,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,server,socket,factory,socket,factory,if,config,get,boolean,security,options,config,get,boolean,blob,server,options,try,socket,factory,sslutils,create,sslserver,socket,factory,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,ssl,for,the,blob,server,e,else,socket,factory,server,socket,factory,get,default,final,int,final,backlog,backlog,this,server,socket,net,utils,create,socket,from,ports,ports,port,socket,factory,create,server,socket,port,final,backlog,if,server,socket,null,throw,new,ioexception,unable,to,open,blob,server,in,specified,port,range,server,port,range,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1531721446;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		this.storageDir = BlobUtils.initLocalStorageDirectory(config)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = ShutdownHookUtil.addShutdownHook(this, getClass().getSimpleName(), LOG)___		__		final String serverPortRange = config.getString(BlobServerOptions.PORT)__		final Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final ServerSocketFactory socketFactory__		if (SSLUtils.isInternalSSLEnabled(config) && config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				socketFactory = SSLUtils.createSSLServerSocketFactory(config)__			}_			catch (Exception e) {_				throw new IOException("Failed to initialize SSL for the blob server", e)__			}_		}_		else {_			socketFactory = ServerSocketFactory.getDefault()__		}__		final int finalBacklog = backlog__		this.serverSocket = NetUtils.createSocketFromPorts(ports,_				(port) -> socketFactory.createServerSocket(port, finalBacklog))___		if (serverSocket == null) {_			throw new IOException("Unable to open BLOB Server in specified port range: " + serverPortRange)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,this,storage,dir,blob,utils,init,local,storage,directory,config,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,shutdown,hook,util,add,shutdown,hook,this,get,class,get,simple,name,log,final,string,server,port,range,config,get,string,blob,server,options,port,final,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,server,socket,factory,socket,factory,if,sslutils,is,internal,sslenabled,config,config,get,boolean,blob,server,options,try,socket,factory,sslutils,create,sslserver,socket,factory,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,ssl,for,the,blob,server,e,else,socket,factory,server,socket,factory,get,default,final,int,final,backlog,backlog,this,server,socket,net,utils,create,socket,from,ports,ports,port,socket,factory,create,server,socket,port,final,backlog,if,server,socket,null,throw,new,ioexception,unable,to,open,blob,server,in,specified,port,range,server,port,range,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1445293012;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1445598182;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1448376996;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1449679265;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1456841351;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1460971208;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1465991918;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1468854249;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1469452826;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1472033364;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1472033371;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1476696544;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1482522862;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1484594328;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1487441974;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1489748538;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1494690800;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1495001929;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1495001945;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1499173045;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1507212387;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1508138617;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1508578816;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1508861310;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1508861310;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1508861311;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1508861311;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1515428991;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1516265158;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1517324056;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1519567828;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1526549506;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1531721446;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1531721446;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
