commented;modifiers;parameterAmount;loc;comment;code
false;public;3;88;;// -------------------------------------------------------------------------------------------- public void materializeVariable(MutableReader<?> reader, TypeSerializerFactory<?> serializerFactory, BatchTask<?, ?> referenceHolder) throws MaterializationExpiredException, IOException {     Preconditions.checkNotNull(reader).     Preconditions.checkNotNull(serializerFactory).     Preconditions.checkNotNull(referenceHolder).     final boolean materializer.     // that way, other tasks can de-register (in case of failure) while materialization is happening     synchronized (references) {         if (disposed) {             throw new MaterializationExpiredException().         }         // sanity check         if (!references.add(referenceHolder)) {             throw new IllegalStateException(String.format("The task %s already holds a reference to the broadcast variable %s.", referenceHolder.getEnvironment().getTaskInfo().getTaskNameWithSubtasks(), key.toString())).         }         materializer = references.size() == 1.     }     try {         @SuppressWarnings("unchecked")         final MutableReader<DeserializationDelegate<T>> typedReader = (MutableReader<DeserializationDelegate<T>>) reader.         @SuppressWarnings("unchecked")         final TypeSerializer<T> serializer = ((TypeSerializerFactory<T>) serializerFactory).getSerializer().         final ReaderIterator<T> readerIterator = new ReaderIterator<T>(typedReader, serializer).         if (materializer) {             // first one, so we need to materialize.             if (LOG.isDebugEnabled()) {                 LOG.debug("Getting Broadcast Variable (" + key + ") - First access, materializing.").             }             ArrayList<T> data = new ArrayList<T>().             T element.             while ((element = readerIterator.next()) != null) {                 data.add(element).             }             synchronized (materializationMonitor) {                 this.data = data.                 this.materialized = true.                 materializationMonitor.notifyAll().             }             if (LOG.isDebugEnabled()) {                 LOG.debug("Materialization of Broadcast Variable (" + key + ") finished.").             }         } else {             if (LOG.isDebugEnabled()) {                 LOG.debug("Getting Broadcast Variable (" + key + ") - shared access.").             }             T element = serializer.createInstance().             while ((element = readerIterator.next(element)) != null) {             }             synchronized (materializationMonitor) {                 while (!this.materialized && !disposed) {                     materializationMonitor.wait().                 }             }         }     } catch (Throwable t) {         // in case of an exception, we need to clean up big time         decrementReferenceIfHeld(referenceHolder).         if (t instanceof IOException) {             throw (IOException) t.         } else {             throw new IOException("Materialization of the broadcast variable failed.", t).         }     } }
false;public;1;3;;public boolean decrementReference(BatchTask<?, ?> referenceHolder) {     return decrementReferenceInternal(referenceHolder, true). }
false;public;1;3;;public boolean decrementReferenceIfHeld(BatchTask<?, ?> referenceHolder) {     return decrementReferenceInternal(referenceHolder, false). }
false;private;2;31;;private boolean decrementReferenceInternal(BatchTask<?, ?> referenceHolder, boolean errorIfNoReference) {     synchronized (references) {         if (disposed || references.isEmpty()) {             if (errorIfNoReference) {                 throw new IllegalStateException("Decrementing reference to broadcast variable that is no longer alive.").             } else {                 return false.             }         }         if (!references.remove(referenceHolder)) {             if (errorIfNoReference) {                 throw new IllegalStateException(String.format("The task %s did not hold a reference to the broadcast variable %s.", referenceHolder.getEnvironment().getTaskInfo().getTaskNameWithSubtasks(), key.toString())).             } else {                 return false.             }         }         if (references.isEmpty()) {             disposed = true.             data = null.             transformed = null.             return true.         } else {             return false.         }     } }
false;public;0;23;;// -------------------------------------------------------------------------------------------- public List<T> getVariable() throws InitializationTypeConflictException {     if (!materialized) {         throw new IllegalStateException("The Broadcast Variable has not yet been materialized.").     }     if (disposed) {         throw new IllegalStateException("The Broadcast Variable has been disposed").     }     synchronized (references) {         if (transformed != null) {             if (transformed instanceof List) {                 @SuppressWarnings("unchecked")                 List<T> casted = (List<T>) transformed.                 return casted.             } else {                 throw new InitializationTypeConflictException(transformed.getClass()).             }         } else {             return data.         }     } }
false;public;1;16;;public C getVariable(BroadcastVariableInitializer<T, C> initializer) {     if (!materialized) {         throw new IllegalStateException("The Broadcast Variable has not yet been materialized.").     }     if (disposed) {         throw new IllegalStateException("The Broadcast Variable has been disposed").     }     synchronized (references) {         if (transformed == null) {             transformed = initializer.initializeBroadcastVariable(data).             data = null.         }         return transformed.     } }
