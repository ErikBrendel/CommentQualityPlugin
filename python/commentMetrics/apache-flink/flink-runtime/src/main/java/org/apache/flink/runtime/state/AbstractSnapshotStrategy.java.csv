commented;modifiers;parameterAmount;loc;comment;code
true;public;2;3;/**  * Logs the duration of the synchronous snapshot part from the given start time.  */ ;/**  * Logs the duration of the synchronous snapshot part from the given start time.  */ public void logSyncCompleted(@Nonnull Object checkpointOutDescription, long startTime) {     logCompletedInternal(LOG_SYNC_COMPLETED_TEMPLATE, checkpointOutDescription, startTime). }
true;public;2;3;/**  * Logs the duration of the asynchronous snapshot part from the given start time.  */ ;/**  * Logs the duration of the asynchronous snapshot part from the given start time.  */ public void logAsyncCompleted(@Nonnull Object checkpointOutDescription, long startTime) {     logCompletedInternal(LOG_ASYNC_COMPLETED_TEMPLATE, checkpointOutDescription, startTime). }
false;private;3;14;;private void logCompletedInternal(@Nonnull String template, @Nonnull Object checkpointOutDescription, long startTime) {     long duration = (System.currentTimeMillis() - startTime).     LOG.debug(template, description, checkpointOutDescription, Thread.currentThread(), duration). }
false;public;0;4;;@Override public String toString() {     return "SnapshotStrategy {" + description + "}". }
