commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @see RestOptions#ADDRESS  */ ;/**  * @see RestOptions#ADDRESS  */ public String getRestAddress() {     return restAddress. }
true;public;0;3;/**  * Returns the address that the REST server endpoint should bind itself to.  *  * @return address that the REST server endpoint should bind itself to  */ ;/**  * Returns the address that the REST server endpoint should bind itself to.  *  * @return address that the REST server endpoint should bind itself to  */ public String getRestBindAddress() {     return restBindAddress. }
true;public;0;3;/**  * Returns the port range that the REST server endpoint should listen on.  *  * @return port range that the REST server endpoint should listen on  */ ;/**  * Returns the port range that the REST server endpoint should listen on.  *  * @return port range that the REST server endpoint should listen on  */ public String getRestBindPortRange() {     return restBindPortRange. }
true;public;0;4;/**  * Returns the {@link SSLEngine} that the REST server endpoint should use.  *  * @return SSLEngine that the REST server endpoint should use, or null if SSL was disabled  */ ;/**  * Returns the {@link SSLEngine} that the REST server endpoint should use.  *  * @return SSLEngine that the REST server endpoint should use, or null if SSL was disabled  */ @Nullable public SSLHandlerFactory getSslHandlerFactory() {     return sslHandlerFactory. }
true;public;0;3;/**  * Returns the directory used to temporarily store multipart/form-data uploads.  */ ;/**  * Returns the directory used to temporarily store multipart/form-data uploads.  */ public Path getUploadDir() {     return uploadDir. }
true;public;0;3;/**  * Returns the max content length that the REST server endpoint could handle.  *  * @return max content length that the REST server endpoint could handle  */ ;/**  * Returns the max content length that the REST server endpoint could handle.  *  * @return max content length that the REST server endpoint could handle  */ public int getMaxContentLength() {     return maxContentLength. }
true;public;0;3;/**  * Response headers that should be added to every HTTP response.  */ ;/**  * Response headers that should be added to every HTTP response.  */ public Map<String, String> getResponseHeaders() {     return responseHeaders. }
true;public,static;1;40;/**  * Creates and returns a new {@link RestServerEndpointConfiguration} from the given {@link Configuration}.  *  * @param config configuration from which the REST server endpoint configuration should be created from  * @return REST server endpoint configuration  * @throws ConfigurationException if SSL was configured incorrectly  */ ;/**  * Creates and returns a new {@link RestServerEndpointConfiguration} from the given {@link Configuration}.  *  * @param config configuration from which the REST server endpoint configuration should be created from  * @return REST server endpoint configuration  * @throws ConfigurationException if SSL was configured incorrectly  */ public static RestServerEndpointConfiguration fromConfiguration(Configuration config) throws ConfigurationException {     Preconditions.checkNotNull(config).     final String restAddress = Preconditions.checkNotNull(config.getString(RestOptions.ADDRESS), "%s must be set", RestOptions.ADDRESS.key()).     final String restBindAddress = config.getString(RestOptions.BIND_ADDRESS).     final String portRangeDefinition = config.getString(RestOptions.BIND_PORT).     final SSLHandlerFactory sslHandlerFactory.     if (SSLUtils.isRestSSLEnabled(config)) {         try {             sslHandlerFactory = SSLUtils.createRestServerSSLEngineFactory(config).         } catch (Exception e) {             throw new ConfigurationException("Failed to initialize SSLEngineFactory for REST server endpoint.", e).         }     } else {         sslHandlerFactory = null.     }     final Path uploadDir = Paths.get(config.getString(WebOptions.UPLOAD_DIR, config.getString(WebOptions.TMP_DIR)), "flink-web-upload").     final int maxContentLength = config.getInteger(RestOptions.SERVER_MAX_CONTENT_LENGTH).     final Map<String, String> responseHeaders = Collections.singletonMap(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN, config.getString(WebOptions.ACCESS_CONTROL_ALLOW_ORIGIN)).     return new RestServerEndpointConfiguration(restAddress, restBindAddress, portRangeDefinition, sslHandlerFactory, uploadDir, maxContentLength, responseHeaders). }
