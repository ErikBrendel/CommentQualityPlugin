commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Override public void install() throws SecurityInstallException {     // ensure that a config file is always defined, for compatibility with     // ZK and Kafka which check for the system property and existence of the file     priorConfigFile = System.getProperty(JAVA_SECURITY_AUTH_LOGIN_CONFIG, null).     if (priorConfigFile == null) {         File configFile = generateDefaultConfigFile().         System.setProperty(JAVA_SECURITY_AUTH_LOGIN_CONFIG, configFile.getAbsolutePath()).     }     // read the JAAS configuration file     priorConfig = javax.security.auth.login.Configuration.getConfiguration().     // construct a dynamic JAAS configuration     currentConfig = new DynamicConfiguration(priorConfig).     // wire up the configured JAAS login contexts to use the krb5 entries     AppConfigurationEntry[] krb5Entries = getAppConfigurationEntries(securityConfig).     if (krb5Entries != null) {         for (String app : securityConfig.getLoginContextNames()) {             currentConfig.addAppConfigurationEntry(app, krb5Entries).         }     }     javax.security.auth.login.Configuration.setConfiguration(currentConfig). }
false;public;0;9;;@Override public void uninstall() throws SecurityInstallException {     if (priorConfigFile != null) {         System.setProperty(JAVA_SECURITY_AUTH_LOGIN_CONFIG, priorConfigFile).     } else {         System.clearProperty(JAVA_SECURITY_AUTH_LOGIN_CONFIG).     }     javax.security.auth.login.Configuration.setConfiguration(priorConfig). }
false;public;0;3;;public DynamicConfiguration getCurrentConfiguration() {     return currentConfig. }
false;private,static;1;24;;private static AppConfigurationEntry[] getAppConfigurationEntries(SecurityConfiguration securityConfig) {     AppConfigurationEntry userKerberosAce = null.     if (securityConfig.useTicketCache()) {         userKerberosAce = KerberosUtils.ticketCacheEntry().     }     AppConfigurationEntry keytabKerberosAce = null.     if (securityConfig.getKeytab() != null) {         keytabKerberosAce = KerberosUtils.keytabEntry(securityConfig.getKeytab(), securityConfig.getPrincipal()).     }     AppConfigurationEntry[] appConfigurationEntry.     if (userKerberosAce != null && keytabKerberosAce != null) {         appConfigurationEntry = new AppConfigurationEntry[] { keytabKerberosAce, userKerberosAce }.     } else if (keytabKerberosAce != null) {         appConfigurationEntry = new AppConfigurationEntry[] { keytabKerberosAce }.     } else if (userKerberosAce != null) {         appConfigurationEntry = new AppConfigurationEntry[] { userKerberosAce }.     } else {         return null.     }     return appConfigurationEntry. }
true;private,static;0;14;/**  * Generate the default JAAS config file.  */ ;/**  * Generate the default JAAS config file.  */ private static File generateDefaultConfigFile() {     final File jaasConfFile.     try {         Path jaasConfPath = Files.createTempFile("jaas-", ".conf").         try (InputStream resourceStream = JaasModule.class.getClassLoader().getResourceAsStream(JAAS_CONF_RESOURCE_NAME)) {             Files.copy(resourceStream, jaasConfPath, StandardCopyOption.REPLACE_EXISTING).         }         jaasConfFile = jaasConfPath.toFile().         jaasConfFile.deleteOnExit().     } catch (IOException e) {         throw new RuntimeException("unable to generate a JAAS configuration file", e).     }     return jaasConfFile. }
