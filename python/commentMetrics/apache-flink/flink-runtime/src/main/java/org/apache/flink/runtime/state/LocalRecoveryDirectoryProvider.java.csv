commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Returns the local state allocation base directory for given checkpoint id w.r.t. our rotation  * over all available allocation base directories.  */ ;/**  * Returns the local state allocation base directory for given checkpoint id w.r.t. our rotation  * over all available allocation base directories.  */ File allocationBaseDirectory(long checkpointId).
true;;1;1;/**  * Returns the local state directory for the owning subtask the given checkpoint id w.r.t. our rotation over all  * available available allocation base directories. This directory is contained in the directory returned by  * {@link #allocationBaseDirectory(long)} for the same checkpoint id.  */ ;/**  * Returns the local state directory for the owning subtask the given checkpoint id w.r.t. our rotation over all  * available available allocation base directories. This directory is contained in the directory returned by  * {@link #allocationBaseDirectory(long)} for the same checkpoint id.  */ File subtaskBaseDirectory(long checkpointId).
true;;1;1;/**  * Returns the local state directory for the specific operator subtask and the given checkpoint id w.r.t. our  * rotation over all available root dirs. This directory is contained in the directory returned by  * {@link #subtaskBaseDirectory(long)} for the same checkpoint id.  */ ;/**  * Returns the local state directory for the specific operator subtask and the given checkpoint id w.r.t. our  * rotation over all available root dirs. This directory is contained in the directory returned by  * {@link #subtaskBaseDirectory(long)} for the same checkpoint id.  */ File subtaskSpecificCheckpointDirectory(long checkpointId).
true;;1;1;/**  * Returns a specific allocation base directory. The index must be between 0 (incl.) and  * {@link #allocationBaseDirsCount()} (excl.).  */ ;/**  * Returns a specific allocation base directory. The index must be between 0 (incl.) and  * {@link #allocationBaseDirsCount()} (excl.).  */ File selectAllocationBaseDirectory(int idx).
true;;1;1;/**  * Returns a specific subtask base directory. The index must be between 0 (incl.) and  * {@link #allocationBaseDirsCount()} (excl.). This directory is direct a child of  * {@link #selectSubtaskBaseDirectory(int)} given the same index.  */ ;/**  * Returns a specific subtask base directory. The index must be between 0 (incl.) and  * {@link #allocationBaseDirsCount()} (excl.). This directory is direct a child of  * {@link #selectSubtaskBaseDirectory(int)} given the same index.  */ File selectSubtaskBaseDirectory(int idx).
true;;0;1;/**  * Returns the total number of allocation base directories.  */ ;/**  * Returns the total number of allocation base directories.  */ int allocationBaseDirsCount().
