commented;modifiers;parameterAmount;loc;comment;code
false;public;3;11;;@Override @Nonnull public ScheduledFuture<?> schedule(@Nonnull Runnable command, long delay, @Nonnull TimeUnit unit) {     ScheduledFutureTask<Void> scheduledFutureTask = new ScheduledFutureTask<>(command, unit.toNanos(delay), 0L).     Cancellable cancellable = internalSchedule(scheduledFutureTask, delay, unit).     scheduledFutureTask.setCancellable(cancellable).     return scheduledFutureTask. }
false;public;3;11;;@Override @Nonnull public <V> ScheduledFuture<V> schedule(@Nonnull Callable<V> callable, long delay, @Nonnull TimeUnit unit) {     ScheduledFutureTask<V> scheduledFutureTask = new ScheduledFutureTask<>(callable, unit.toNanos(delay), 0L).     Cancellable cancellable = internalSchedule(scheduledFutureTask, delay, unit).     scheduledFutureTask.setCancellable(cancellable).     return scheduledFutureTask. }
false;public;4;18;;@Override @Nonnull public ScheduledFuture<?> scheduleAtFixedRate(@Nonnull Runnable command, long initialDelay, long period, @Nonnull TimeUnit unit) {     ScheduledFutureTask<Void> scheduledFutureTask = new ScheduledFutureTask<>(command, triggerTime(unit.toNanos(initialDelay)), unit.toNanos(period)).     Cancellable cancellable = actorSystem.scheduler().schedule(new FiniteDuration(initialDelay, unit), new FiniteDuration(period, unit), scheduledFutureTask, actorSystem.dispatcher()).     scheduledFutureTask.setCancellable(cancellable).     return scheduledFutureTask. }
false;public;4;14;;@Override @Nonnull public ScheduledFuture<?> scheduleWithFixedDelay(@Nonnull Runnable command, long initialDelay, long delay, @Nonnull TimeUnit unit) {     ScheduledFutureTask<Void> scheduledFutureTask = new ScheduledFutureTask<>(command, triggerTime(unit.toNanos(initialDelay)), unit.toNanos(-delay)).     Cancellable cancellable = internalSchedule(scheduledFutureTask, initialDelay, unit).     scheduledFutureTask.setCancellable(cancellable).     return scheduledFutureTask. }
false;public;1;4;;@Override public void execute(@Nonnull Runnable command) {     actorSystem.dispatcher().execute(command). }
false;private;3;6;;private Cancellable internalSchedule(Runnable runnable, long delay, TimeUnit unit) {     return actorSystem.scheduler().scheduleOnce(new FiniteDuration(delay, unit), runnable, actorSystem.dispatcher()). }
false;private;0;3;;private long now() {     return System.nanoTime(). }
false;private;1;3;;private long triggerTime(long delay) {     return now() + delay. }
false;public;1;3;;public void setCancellable(Cancellable newCancellable) {     this.cancellable = newCancellable. }
false;public;0;19;;@Override public void run() {     if (!isPeriodic()) {         super.run().     } else if (runAndReset()) {         if (period > 0L) {             time += period.         } else {             cancellable = internalSchedule(this, -period, TimeUnit.NANOSECONDS).             // check whether we have been cancelled concurrently             if (isCancelled()) {                 cancellable.cancel().             } else {                 time = triggerTime(-period).             }         }     } }
false;public;1;6;;@Override public boolean cancel(boolean mayInterruptIfRunning) {     boolean result = super.cancel(mayInterruptIfRunning).     return result && cancellable.cancel(). }
false;public;1;4;;@Override public long getDelay(@Nonnull TimeUnit unit) {     return unit.convert(time - now(), TimeUnit.NANOSECONDS). }
false;public;1;9;;@Override public int compareTo(@Nonnull Delayed o) {     if (o == this) {         return 0.     }     long diff = getDelay(TimeUnit.NANOSECONDS) - o.getDelay(TimeUnit.NANOSECONDS).     return (diff < 0L) ? -1 : (diff > 0L) ? 1 : 0. }
false;public;0;4;;@Override public boolean isPeriodic() {     return period != 0L. }
