commented;modifiers;parameterAmount;loc;comment;code
true;;0;2;/**  * Retrieves and removes the first element (w.r.t. the order) of this set,  * or returns {@code null} if this set is empty.  *  * @return the first element of this ordered set, or {@code null} if this set is empty.  */ ;/**  * Retrieves and removes the first element (w.r.t. the order) of this set,  * or returns {@code null} if this set is empty.  *  * @return the first element of this ordered set, or {@code null} if this set is empty.  */ @Nullable T poll().
true;;0;2;/**  * Retrieves, but does not remove, the element (w.r.t. order) of this set,  * or returns {@code null} if this set is empty.  *  * @return the first element (w.r.t. order) of this ordered set, or {@code null} if this set is empty.  */ ;/**  * Retrieves, but does not remove, the element (w.r.t. order) of this set,  * or returns {@code null} if this set is empty.  *  * @return the first element (w.r.t. order) of this ordered set, or {@code null} if this set is empty.  */ @Nullable T peek().
true;;1;1;/**  * Adds the given element to the set, if it is not already contained.  *  * @param toAdd the element to add to the set.  * @return <code>true</code> if the operation changed the head element or if it is unclear if the head element changed.  * Only returns <code>false</code> if the head element was not changed by this operation.  */ ;/**  * Adds the given element to the set, if it is not already contained.  *  * @param toAdd the element to add to the set.  * @return <code>true</code> if the operation changed the head element or if it is unclear if the head element changed.  * Only returns <code>false</code> if the head element was not changed by this operation.  */ boolean add(@Nonnull T toAdd).
true;;1;1;/**  * Removes the given element from the set, if is contained in the set.  *  * @param toRemove the element to remove.  * @return <code>true</code> if the operation changed the head element or if it is unclear if the head element changed.  * Only returns <code>false</code> if the head element was not changed by this operation.  */ ;/**  * Removes the given element from the set, if is contained in the set.  *  * @param toRemove the element to remove.  * @return <code>true</code> if the operation changed the head element or if it is unclear if the head element changed.  * Only returns <code>false</code> if the head element was not changed by this operation.  */ boolean remove(@Nonnull T toRemove).
true;;0;1;/**  * Check if the set contains any elements.  *  * @return true if the set is empty, i.e. no element is contained.  */ ;/**  * Check if the set contains any elements.  *  * @return true if the set is empty, i.e. no element is contained.  */ boolean isEmpty().
true;;0;2;/**  * Returns the number of elements in this set.  *  * @return the number of elements in this set.  */ ;/**  * Returns the number of elements in this set.  *  * @return the number of elements in this set.  */ @Nonnegative int size().
true;;1;1;/**  * Adds all the given elements to the set.  */ ;/**  * Adds all the given elements to the set.  */ void addAll(@Nullable Collection<? extends T> toAdd).
true;;0;2;/**  * Iterator over all elements, no order guaranteed. Iterator must be closed after usage.  */ ;/**  * Iterator over all elements, no order guaranteed. Iterator must be closed after usage.  */ @Nonnull CloseableIterator<T> iterator().
