commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;3;;// ------------------------------------------------------------------------ // properties // ------------------------------------------------------------------------ public final TaskManagerJobMetricGroup parent() {     return parent. }
false;public;0;3;;public AbstractID executionId() {     return executionId. }
false;public;0;4;;@Nullable public AbstractID vertexId() {     return vertexId. }
false;public;0;4;;@Nullable public String taskName() {     return taskName. }
false;public;0;3;;public int subtaskIndex() {     return subtaskIndex. }
false;public;0;3;;public int attemptNumber() {     return attemptNumber. }
true;public;0;3;/**  * Returns the TaskIOMetricGroup for this task.  *  * @return TaskIOMetricGroup for this task.  */ ;/**  * Returns the TaskIOMetricGroup for this task.  *  * @return TaskIOMetricGroup for this task.  */ public TaskIOMetricGroup getIOMetricGroup() {     return ioMetrics. }
false;protected;1;7;;@Override protected QueryScopeInfo.TaskQueryScopeInfo createQueryServiceMetricInfo(CharacterFilter filter) {     return new QueryScopeInfo.TaskQueryScopeInfo(this.parent.jobId.toString(), String.valueOf(this.vertexId), this.subtaskIndex). }
false;public;1;3;;// ------------------------------------------------------------------------ // operators and cleanup // ------------------------------------------------------------------------ public OperatorMetricGroup getOrAddOperator(String name) {     return getOrAddOperator(OperatorID.fromJobVertexID(vertexId), name). }
false;public;2;21;;public OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {     if (name != null && name.length() > METRICS_OPERATOR_NAME_MAX_LENGTH) {         LOG.warn("The operator name {} exceeded the {} characters length limit and was truncated.", name, METRICS_OPERATOR_NAME_MAX_LENGTH).         name = name.substring(0, METRICS_OPERATOR_NAME_MAX_LENGTH).     }     OperatorMetricGroup operator = new OperatorMetricGroup(this.registry, this, operatorID, name).     // unique OperatorIDs only exist in streaming, so we have to rely on the name for batch operators     final String key = operatorID + name.     synchronized (this) {         OperatorMetricGroup previous = operators.put(key, operator).         if (previous == null) {             // no operator group so far             return operator.         } else {             // already had an operator group. restore that one.             operators.put(key, previous).             return previous.         }     } }
false;public;0;6;;@Override public void close() {     super.close().     parent.removeTaskMetricGroup(executionId). }
false;protected;1;8;;// ------------------------------------------------------------------------ // Component Metric Group Specifics // ------------------------------------------------------------------------ @Override protected void putVariables(Map<String, String> variables) {     variables.put(ScopeFormat.SCOPE_TASK_VERTEX_ID, vertexId.toString()).     variables.put(ScopeFormat.SCOPE_TASK_NAME, taskName).     variables.put(ScopeFormat.SCOPE_TASK_ATTEMPT_ID, executionId.toString()).     variables.put(ScopeFormat.SCOPE_TASK_ATTEMPT_NUM, String.valueOf(attemptNumber)).     variables.put(ScopeFormat.SCOPE_TASK_SUBTASK_INDEX, String.valueOf(subtaskIndex)). }
false;protected;0;4;;@Override protected Iterable<? extends ComponentMetricGroup> subComponents() {     return operators.values(). }
false;protected;1;4;;@Override protected String getGroupName(CharacterFilter filter) {     return "task". }
