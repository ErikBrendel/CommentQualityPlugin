# id;timestamp;commentText;codeText;commentWords;codeWords
HeaderlessChannelReaderInputView -> public HeaderlessChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, int numBlocks, 			int numBytesInLastBlock, boolean waitForFirstBlock) 	throws IOException;1405024514;Creates a new channel reader that reads from the given channel, expecting a specified_number of blocks in the channel, and returns only a specified number of bytes from_the last block._<p>_WARNING: If the number of blocks given here is higher than the number of blocks in the_channel, then the last blocks will not be filled by the reader and will contain_undefined data.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read._@param numBytesInLastBlock The number of valid bytes in the last block._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public HeaderlessChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, int numBlocks,_			int numBytesInLastBlock, boolean waitForFirstBlock)_	throws IOException_	{_		super(reader, memory, numBlocks, 0, waitForFirstBlock)__		_		this.numBlocksRemaining = numBlocks__		this.lastBlockBytes = numBytesInLastBlock__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,expecting,a,specified,number,of,blocks,in,the,channel,and,returns,only,a,specified,number,of,bytes,from,the,last,block,p,warning,if,the,number,of,blocks,given,here,is,higher,than,the,number,of,blocks,in,the,channel,then,the,last,blocks,will,not,be,filled,by,the,reader,and,will,contain,undefined,data,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,param,num,bytes,in,last,block,the,number,of,valid,bytes,in,the,last,block,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,headerless,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,int,num,bytes,in,last,block,boolean,wait,for,first,block,throws,ioexception,super,reader,memory,num,blocks,0,wait,for,first,block,this,num,blocks,remaining,num,blocks,this,last,block,bytes,num,bytes,in,last,block
HeaderlessChannelReaderInputView -> public HeaderlessChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, int numBlocks, 			int numBytesInLastBlock, boolean waitForFirstBlock) 	throws IOException;1405090423;Creates a new channel reader that reads from the given channel, expecting a specified_number of blocks in the channel, and returns only a specified number of bytes from_the last block._<p>_WARNING: If the number of blocks given here is higher than the number of blocks in the_channel, then the last blocks will not be filled by the reader and will contain_undefined data.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read._@param numBytesInLastBlock The number of valid bytes in the last block._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public HeaderlessChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, int numBlocks,_			int numBytesInLastBlock, boolean waitForFirstBlock)_	throws IOException_	{_		super(reader, memory, numBlocks, 0, waitForFirstBlock)__		_		this.numBlocksRemaining = numBlocks__		this.lastBlockBytes = numBytesInLastBlock__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,expecting,a,specified,number,of,blocks,in,the,channel,and,returns,only,a,specified,number,of,bytes,from,the,last,block,p,warning,if,the,number,of,blocks,given,here,is,higher,than,the,number,of,blocks,in,the,channel,then,the,last,blocks,will,not,be,filled,by,the,reader,and,will,contain,undefined,data,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,param,num,bytes,in,last,block,the,number,of,valid,bytes,in,the,last,block,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,headerless,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,int,num,bytes,in,last,block,boolean,wait,for,first,block,throws,ioexception,super,reader,memory,num,blocks,0,wait,for,first,block,this,num,blocks,remaining,num,blocks,this,last,block,bytes,num,bytes,in,last,block
HeaderlessChannelReaderInputView -> public HeaderlessChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, int numBlocks, 			int numBytesInLastBlock, boolean waitForFirstBlock) 	throws IOException;1411236168;Creates a new channel reader that reads from the given channel, expecting a specified_number of blocks in the channel, and returns only a specified number of bytes from_the last block._<p>_WARNING: If the number of blocks given here is higher than the number of blocks in the_channel, then the last blocks will not be filled by the reader and will contain_undefined data.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read._@param numBytesInLastBlock The number of valid bytes in the last block._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public HeaderlessChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, int numBlocks,_			int numBytesInLastBlock, boolean waitForFirstBlock)_	throws IOException_	{_		super(reader, memory, numBlocks, 0, waitForFirstBlock)__		_		this.numBlocksRemaining = numBlocks__		this.lastBlockBytes = numBytesInLastBlock__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,expecting,a,specified,number,of,blocks,in,the,channel,and,returns,only,a,specified,number,of,bytes,from,the,last,block,p,warning,if,the,number,of,blocks,given,here,is,higher,than,the,number,of,blocks,in,the,channel,then,the,last,blocks,will,not,be,filled,by,the,reader,and,will,contain,undefined,data,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,param,num,bytes,in,last,block,the,number,of,valid,bytes,in,the,last,block,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,headerless,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,int,num,bytes,in,last,block,boolean,wait,for,first,block,throws,ioexception,super,reader,memory,num,blocks,0,wait,for,first,block,this,num,blocks,remaining,num,blocks,this,last,block,bytes,num,bytes,in,last,block
HeaderlessChannelReaderInputView -> public HeaderlessChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, int numBlocks, 			int numBytesInLastBlock, boolean waitForFirstBlock) 	throws IOException;1411473593;Creates a new channel reader that reads from the given channel, expecting a specified_number of blocks in the channel, and returns only a specified number of bytes from_the last block._<p>_WARNING: If the number of blocks given here is higher than the number of blocks in the_channel, then the last blocks will not be filled by the reader and will contain_undefined data.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read._@param numBytesInLastBlock The number of valid bytes in the last block._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public HeaderlessChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, int numBlocks,_			int numBytesInLastBlock, boolean waitForFirstBlock)_	throws IOException_	{_		super(reader, memory, numBlocks, 0, waitForFirstBlock)__		_		this.numBlocksRemaining = numBlocks__		this.lastBlockBytes = numBytesInLastBlock__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,expecting,a,specified,number,of,blocks,in,the,channel,and,returns,only,a,specified,number,of,bytes,from,the,last,block,p,warning,if,the,number,of,blocks,given,here,is,higher,than,the,number,of,blocks,in,the,channel,then,the,last,blocks,will,not,be,filled,by,the,reader,and,will,contain,undefined,data,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,param,num,bytes,in,last,block,the,number,of,valid,bytes,in,the,last,block,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,headerless,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,int,num,bytes,in,last,block,boolean,wait,for,first,block,throws,ioexception,super,reader,memory,num,blocks,0,wait,for,first,block,this,num,blocks,remaining,num,blocks,this,last,block,bytes,num,bytes,in,last,block
