commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return the internal key-group range to offsets metadata  */ ;/**  * @return the internal key-group range to offsets metadata  */ public KeyGroupRangeOffsets getGroupRangeOffsets() {     return groupRangeOffsets. }
true;public;0;3;/**  * @return The handle to the actual states  */ ;/**  * @return The handle to the actual states  */ public StreamStateHandle getDelegateStateHandle() {     return stateHandle. }
true;public;1;3;/**  * @param keyGroupId the id of a key-group. the id must be contained in the range of this handle.  * @return offset to the position of data for the provided key-group in the stream referenced by this state handle  */ ;/**  * @param keyGroupId the id of a key-group. the id must be contained in the range of this handle.  * @return offset to the position of data for the provided key-group in the stream referenced by this state handle  */ public long getOffsetForKeyGroup(int keyGroupId) {     return groupRangeOffsets.getKeyGroupOffset(keyGroupId). }
true;public;1;3;/**  * @param keyGroupRange a key group range to intersect.  * @return key-group state over a range that is the intersection between this handle's key-group range and the  *          provided key-group range.  */ ;/**  * @param keyGroupRange a key group range to intersect.  * @return key-group state over a range that is the intersection between this handle's key-group range and the  *          provided key-group range.  */ public KeyGroupsStateHandle getIntersection(KeyGroupRange keyGroupRange) {     return new KeyGroupsStateHandle(groupRangeOffsets.getIntersection(keyGroupRange), stateHandle). }
false;public;0;4;;@Override public KeyGroupRange getKeyGroupRange() {     return groupRangeOffsets.getKeyGroupRange(). }
false;public;1;4;;@Override public void registerSharedStates(SharedStateRegistry stateRegistry) { // No shared states }
false;public;0;4;;@Override public void discardState() throws Exception {     stateHandle.discardState(). }
false;public;0;4;;@Override public long getStateSize() {     return stateHandle.getStateSize(). }
false;public;0;4;;@Override public FSDataInputStream openInputStream() throws IOException {     return stateHandle.openInputStream(). }
false;public;1;17;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (!(o instanceof KeyGroupsStateHandle)) {         return false.     }     KeyGroupsStateHandle that = (KeyGroupsStateHandle) o.     if (!groupRangeOffsets.equals(that.groupRangeOffsets)) {         return false.     }     return stateHandle.equals(that.stateHandle). }
false;public;0;6;;@Override public int hashCode() {     int result = groupRangeOffsets.hashCode().     result = 31 * result + stateHandle.hashCode().     return result. }
false;public;0;7;;@Override public String toString() {     return "KeyGroupsStateHandle{" + "groupRangeOffsets=" + groupRangeOffsets + ", stateHandle=" + stateHandle + '}'. }
