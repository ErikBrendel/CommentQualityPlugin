# id;timestamp;commentText;codeText;commentWords;codeWords
MemoryLogger -> public static String getMemoryUsageStatsAsString(MemoryMXBean memoryMXBean);1432233511;Gets the memory footprint of the JVM in a string representation.__@return A string describing how much heap memory and direct memory are allocated and used.;public static String getMemoryUsageStatsAsString(MemoryMXBean memoryMXBean) {_		MemoryUsage heap = memoryMXBean.getHeapMemoryUsage()__		MemoryUsage nonHeap = memoryMXBean.getNonHeapMemoryUsage()___		long heapUsed = heap.getUsed() >> 20__		long heapCommitted = heap.getCommitted() >> 20__		long heapMax = heap.getMax() >> 20___		long nonHeapUsed = nonHeap.getUsed() >> 20__		long nonHeapCommitted = nonHeap.getCommitted() >> 20__		long nonHeapMax = nonHeap.getMax() >> 20___		return String.format("Memory usage stats: [HEAP: %d/%d/%d MB, " +_				"NON HEAP: %d/%d/%d MB (used/committed/max)]",_				heapUsed, heapCommitted, heapMax, nonHeapUsed, nonHeapCommitted, nonHeapMax)__	};gets,the,memory,footprint,of,the,jvm,in,a,string,representation,return,a,string,describing,how,much,heap,memory,and,direct,memory,are,allocated,and,used;public,static,string,get,memory,usage,stats,as,string,memory,mxbean,memory,mxbean,memory,usage,heap,memory,mxbean,get,heap,memory,usage,memory,usage,non,heap,memory,mxbean,get,non,heap,memory,usage,long,heap,used,heap,get,used,20,long,heap,committed,heap,get,committed,20,long,heap,max,heap,get,max,20,long,non,heap,used,non,heap,get,used,20,long,non,heap,committed,non,heap,get,committed,20,long,non,heap,max,non,heap,get,max,20,return,string,format,memory,usage,stats,heap,d,d,d,mb,non,heap,d,d,d,mb,used,committed,max,heap,used,heap,committed,heap,max,non,heap,used,non,heap,committed,non,heap,max
MemoryLogger -> public static String getMemoryUsageStatsAsString(MemoryMXBean memoryMXBean);1436452498;Gets the memory footprint of the JVM in a string representation.__@return A string describing how much heap memory and direct memory are allocated and used.;public static String getMemoryUsageStatsAsString(MemoryMXBean memoryMXBean) {_		MemoryUsage heap = memoryMXBean.getHeapMemoryUsage()__		MemoryUsage nonHeap = memoryMXBean.getNonHeapMemoryUsage()___		long heapUsed = heap.getUsed() >> 20__		long heapCommitted = heap.getCommitted() >> 20__		long heapMax = heap.getMax() >> 20___		long nonHeapUsed = nonHeap.getUsed() >> 20__		long nonHeapCommitted = nonHeap.getCommitted() >> 20__		long nonHeapMax = nonHeap.getMax() >> 20___		return String.format("Memory usage stats: [HEAP: %d/%d/%d MB, " +_				"NON HEAP: %d/%d/%d MB (used/committed/max)]",_				heapUsed, heapCommitted, heapMax, nonHeapUsed, nonHeapCommitted, nonHeapMax)__	};gets,the,memory,footprint,of,the,jvm,in,a,string,representation,return,a,string,describing,how,much,heap,memory,and,direct,memory,are,allocated,and,used;public,static,string,get,memory,usage,stats,as,string,memory,mxbean,memory,mxbean,memory,usage,heap,memory,mxbean,get,heap,memory,usage,memory,usage,non,heap,memory,mxbean,get,non,heap,memory,usage,long,heap,used,heap,get,used,20,long,heap,committed,heap,get,committed,20,long,heap,max,heap,get,max,20,long,non,heap,used,non,heap,get,used,20,long,non,heap,committed,non,heap,get,committed,20,long,non,heap,max,non,heap,get,max,20,return,string,format,memory,usage,stats,heap,d,d,d,mb,non,heap,d,d,d,mb,used,committed,max,heap,used,heap,committed,heap,max,non,heap,used,non,heap,committed,non,heap,max
MemoryLogger -> public static String getMemoryUsageStatsAsString(MemoryMXBean memoryMXBean);1450713006;Gets the memory footprint of the JVM in a string representation.__@return A string describing how much heap memory and direct memory are allocated and used.;public static String getMemoryUsageStatsAsString(MemoryMXBean memoryMXBean) {_		MemoryUsage heap = memoryMXBean.getHeapMemoryUsage()__		MemoryUsage nonHeap = memoryMXBean.getNonHeapMemoryUsage()___		long heapUsed = heap.getUsed() >> 20__		long heapCommitted = heap.getCommitted() >> 20__		long heapMax = heap.getMax() >> 20___		long nonHeapUsed = nonHeap.getUsed() >> 20__		long nonHeapCommitted = nonHeap.getCommitted() >> 20__		long nonHeapMax = nonHeap.getMax() >> 20___		return String.format("Memory usage stats: [HEAP: %d/%d/%d MB, " +_				"NON HEAP: %d/%d/%d MB (used/committed/max)]",_				heapUsed, heapCommitted, heapMax, nonHeapUsed, nonHeapCommitted, nonHeapMax)__	};gets,the,memory,footprint,of,the,jvm,in,a,string,representation,return,a,string,describing,how,much,heap,memory,and,direct,memory,are,allocated,and,used;public,static,string,get,memory,usage,stats,as,string,memory,mxbean,memory,mxbean,memory,usage,heap,memory,mxbean,get,heap,memory,usage,memory,usage,non,heap,memory,mxbean,get,non,heap,memory,usage,long,heap,used,heap,get,used,20,long,heap,committed,heap,get,committed,20,long,heap,max,heap,get,max,20,long,non,heap,used,non,heap,get,used,20,long,non,heap,committed,non,heap,get,committed,20,long,non,heap,max,non,heap,get,max,20,return,string,format,memory,usage,stats,heap,d,d,d,mb,non,heap,d,d,d,mb,used,committed,max,heap,used,heap,committed,heap,max,non,heap,used,non,heap,committed,non,heap,max
MemoryLogger -> public static String getMemoryUsageStatsAsString(MemoryMXBean memoryMXBean);1533041284;Gets the memory footprint of the JVM in a string representation.__@return A string describing how much heap memory and direct memory are allocated and used.;public static String getMemoryUsageStatsAsString(MemoryMXBean memoryMXBean) {_		MemoryUsage heap = memoryMXBean.getHeapMemoryUsage()__		MemoryUsage nonHeap = memoryMXBean.getNonHeapMemoryUsage()___		long heapUsed = heap.getUsed() >> 20__		long heapCommitted = heap.getCommitted() >> 20__		long heapMax = heap.getMax() >> 20___		long nonHeapUsed = nonHeap.getUsed() >> 20__		long nonHeapCommitted = nonHeap.getCommitted() >> 20__		long nonHeapMax = nonHeap.getMax() >> 20___		return String.format("Memory usage stats: [HEAP: %d/%d/%d MB, " +_				"NON HEAP: %d/%d/%d MB (used/committed/max)]",_				heapUsed, heapCommitted, heapMax, nonHeapUsed, nonHeapCommitted, nonHeapMax)__	};gets,the,memory,footprint,of,the,jvm,in,a,string,representation,return,a,string,describing,how,much,heap,memory,and,direct,memory,are,allocated,and,used;public,static,string,get,memory,usage,stats,as,string,memory,mxbean,memory,mxbean,memory,usage,heap,memory,mxbean,get,heap,memory,usage,memory,usage,non,heap,memory,mxbean,get,non,heap,memory,usage,long,heap,used,heap,get,used,20,long,heap,committed,heap,get,committed,20,long,heap,max,heap,get,max,20,long,non,heap,used,non,heap,get,used,20,long,non,heap,committed,non,heap,get,committed,20,long,non,heap,max,non,heap,get,max,20,return,string,format,memory,usage,stats,heap,d,d,d,mb,non,heap,d,d,d,mb,used,committed,max,heap,used,heap,committed,heap,max,non,heap,used,non,heap,committed,non,heap,max
MemoryLogger -> public static String getMemoryUsageStatsAsString(MemoryMXBean memoryMXBean);1533829432;Gets the memory footprint of the JVM in a string representation.__@return A string describing how much heap memory and direct memory are allocated and used.;public static String getMemoryUsageStatsAsString(MemoryMXBean memoryMXBean) {_		MemoryUsage heap = memoryMXBean.getHeapMemoryUsage()__		MemoryUsage nonHeap = memoryMXBean.getNonHeapMemoryUsage()___		long heapUsed = heap.getUsed() >> 20__		long heapCommitted = heap.getCommitted() >> 20__		long heapMax = heap.getMax() >> 20___		long nonHeapUsed = nonHeap.getUsed() >> 20__		long nonHeapCommitted = nonHeap.getCommitted() >> 20__		long nonHeapMax = nonHeap.getMax() >> 20___		return String.format("Memory usage stats: [HEAP: %d/%d/%d MB, " +_				"NON HEAP: %d/%d/%d MB (used/committed/max)]",_				heapUsed, heapCommitted, heapMax, nonHeapUsed, nonHeapCommitted, nonHeapMax)__	};gets,the,memory,footprint,of,the,jvm,in,a,string,representation,return,a,string,describing,how,much,heap,memory,and,direct,memory,are,allocated,and,used;public,static,string,get,memory,usage,stats,as,string,memory,mxbean,memory,mxbean,memory,usage,heap,memory,mxbean,get,heap,memory,usage,memory,usage,non,heap,memory,mxbean,get,non,heap,memory,usage,long,heap,used,heap,get,used,20,long,heap,committed,heap,get,committed,20,long,heap,max,heap,get,max,20,long,non,heap,used,non,heap,get,used,20,long,non,heap,committed,non,heap,get,committed,20,long,non,heap,max,non,heap,get,max,20,return,string,format,memory,usage,stats,heap,d,d,d,mb,non,heap,d,d,d,mb,used,committed,max,heap,used,heap,committed,heap,max,non,heap,used,non,heap,committed,non,heap,max
MemoryLogger -> public static String getDirectMemoryStatsAsString(BufferPoolMXBean bufferPoolMxBean);1450713006;Returns a String with the <strong>direct</strong> memory footprint.__<p>These stats are not part of the other memory beans.__@param bufferPoolMxBean The direct buffer pool bean or <code>null</code> if none available.__@return A string with the count, total capacity, and used direct memory.;public static String getDirectMemoryStatsAsString(BufferPoolMXBean bufferPoolMxBean) {_		if (bufferPoolMxBean == null) {_			return "Direct memory stats: unavailable"__		}_		else {_			return String.format("Direct memory stats: Count: %d, Total Capacity: %d, Used Memory: %d",_					bufferPoolMxBean.getCount(),_					bufferPoolMxBean.getTotalCapacity(),_					bufferPoolMxBean.getMemoryUsed())__		}_	};returns,a,string,with,the,strong,direct,strong,memory,footprint,p,these,stats,are,not,part,of,the,other,memory,beans,param,buffer,pool,mx,bean,the,direct,buffer,pool,bean,or,code,null,code,if,none,available,return,a,string,with,the,count,total,capacity,and,used,direct,memory;public,static,string,get,direct,memory,stats,as,string,buffer,pool,mxbean,buffer,pool,mx,bean,if,buffer,pool,mx,bean,null,return,direct,memory,stats,unavailable,else,return,string,format,direct,memory,stats,count,d,total,capacity,d,used,memory,d,buffer,pool,mx,bean,get,count,buffer,pool,mx,bean,get,total,capacity,buffer,pool,mx,bean,get,memory,used
MemoryLogger -> public static String getDirectMemoryStatsAsString(BufferPoolMXBean bufferPoolMxBean);1533041284;Returns a String with the <strong>direct</strong> memory footprint.__<p>These stats are not part of the other memory beans.__@param bufferPoolMxBean The direct buffer pool bean or <code>null</code> if none available.__@return A string with the count, total capacity, and used direct memory.;public static String getDirectMemoryStatsAsString(BufferPoolMXBean bufferPoolMxBean) {_		if (bufferPoolMxBean == null) {_			return "Direct memory stats: unavailable"__		}_		else {_			return String.format("Direct memory stats: Count: %d, Total Capacity: %d, Used Memory: %d",_					bufferPoolMxBean.getCount(),_					bufferPoolMxBean.getTotalCapacity(),_					bufferPoolMxBean.getMemoryUsed())__		}_	};returns,a,string,with,the,strong,direct,strong,memory,footprint,p,these,stats,are,not,part,of,the,other,memory,beans,param,buffer,pool,mx,bean,the,direct,buffer,pool,bean,or,code,null,code,if,none,available,return,a,string,with,the,count,total,capacity,and,used,direct,memory;public,static,string,get,direct,memory,stats,as,string,buffer,pool,mxbean,buffer,pool,mx,bean,if,buffer,pool,mx,bean,null,return,direct,memory,stats,unavailable,else,return,string,format,direct,memory,stats,count,d,total,capacity,d,used,memory,d,buffer,pool,mx,bean,get,count,buffer,pool,mx,bean,get,total,capacity,buffer,pool,mx,bean,get,memory,used
MemoryLogger -> public static String getDirectMemoryStatsAsString(BufferPoolMXBean bufferPoolMxBean);1533829432;Returns a String with the <strong>direct</strong> memory footprint.__<p>These stats are not part of the other memory beans.__@param bufferPoolMxBean The direct buffer pool bean or <code>null</code> if none available.__@return A string with the count, total capacity, and used direct memory.;public static String getDirectMemoryStatsAsString(BufferPoolMXBean bufferPoolMxBean) {_		if (bufferPoolMxBean == null) {_			return "Direct memory stats: unavailable"__		}_		else {_			return String.format("Direct memory stats: Count: %d, Total Capacity: %d, Used Memory: %d",_					bufferPoolMxBean.getCount(),_					bufferPoolMxBean.getTotalCapacity(),_					bufferPoolMxBean.getMemoryUsed())__		}_	};returns,a,string,with,the,strong,direct,strong,memory,footprint,p,these,stats,are,not,part,of,the,other,memory,beans,param,buffer,pool,mx,bean,the,direct,buffer,pool,bean,or,code,null,code,if,none,available,return,a,string,with,the,count,total,capacity,and,used,direct,memory;public,static,string,get,direct,memory,stats,as,string,buffer,pool,mxbean,buffer,pool,mx,bean,if,buffer,pool,mx,bean,null,return,direct,memory,stats,unavailable,else,return,string,format,direct,memory,stats,count,d,total,capacity,d,used,memory,d,buffer,pool,mx,bean,get,count,buffer,pool,mx,bean,get,total,capacity,buffer,pool,mx,bean,get,memory,used
MemoryLogger -> public MemoryLogger(Logger logger, long interval, ActorSystem monitored);1436452498;Creates a new memory logger that logs in the given interval and lives as long as the_given actor system.__@param logger The logger to use for outputting the memory statistics._@param interval The interval in which the thread logs._@param monitored The actor system to whose life the thread is bound. The thread terminates_once the actor system terminates.;public MemoryLogger(Logger logger, long interval, ActorSystem monitored) {_		super("Memory Logger")__		setDaemon(true)__		setPriority(Thread.MIN_PRIORITY)__		_		this.logger = logger__		this.interval = interval__		this.monitored = monitored___		this.memoryBean = ManagementFactory.getMemoryMXBean()__		this.poolBeans = ManagementFactory.getMemoryPoolMXBeans()__		this.gcBeans = ManagementFactory.getGarbageCollectorMXBeans()__	};creates,a,new,memory,logger,that,logs,in,the,given,interval,and,lives,as,long,as,the,given,actor,system,param,logger,the,logger,to,use,for,outputting,the,memory,statistics,param,interval,the,interval,in,which,the,thread,logs,param,monitored,the,actor,system,to,whose,life,the,thread,is,bound,the,thread,terminates,once,the,actor,system,terminates;public,memory,logger,logger,logger,long,interval,actor,system,monitored,super,memory,logger,set,daemon,true,set,priority,thread,this,logger,logger,this,interval,interval,this,monitored,monitored,this,memory,bean,management,factory,get,memory,mxbean,this,pool,beans,management,factory,get,memory,pool,mxbeans,this,gc,beans,management,factory,get,garbage,collector,mxbeans
MemoryLogger -> public MemoryLogger(Logger logger, long interval, ActorSystem monitored);1450713006;Creates a new memory logger that logs in the given interval and lives as long as the_given actor system.__@param logger The logger to use for outputting the memory statistics._@param interval The interval in which the thread logs._@param monitored The actor system to whose life the thread is bound. The thread terminates_once the actor system terminates.;public MemoryLogger(Logger logger, long interval, ActorSystem monitored) {_		super("Memory Logger")__		setDaemon(true)__		setPriority(Thread.MIN_PRIORITY)__		_		this.logger = logger__		this.interval = interval__		this.monitored = monitored___		this.memoryBean = ManagementFactory.getMemoryMXBean()__		this.poolBeans = ManagementFactory.getMemoryPoolMXBeans()__		this.gcBeans = ManagementFactory.getGarbageCollectorMXBeans()___		_		MBeanServer beanServer = ManagementFactory.getPlatformMBeanServer()__		BufferPoolMXBean directBufferBean = null__		try {_			directBufferBean = ManagementFactory.newPlatformMXBeanProxy(_					beanServer,_					"java.nio:type=BufferPool,name=direct",_					BufferPoolMXBean.class)__		}_		catch (Exception e) {_			logger.warn("Failed to initialize direct buffer pool bean.", e)__		}_		finally {_			this.directBufferBean = directBufferBean__		}_	};creates,a,new,memory,logger,that,logs,in,the,given,interval,and,lives,as,long,as,the,given,actor,system,param,logger,the,logger,to,use,for,outputting,the,memory,statistics,param,interval,the,interval,in,which,the,thread,logs,param,monitored,the,actor,system,to,whose,life,the,thread,is,bound,the,thread,terminates,once,the,actor,system,terminates;public,memory,logger,logger,logger,long,interval,actor,system,monitored,super,memory,logger,set,daemon,true,set,priority,thread,this,logger,logger,this,interval,interval,this,monitored,monitored,this,memory,bean,management,factory,get,memory,mxbean,this,pool,beans,management,factory,get,memory,pool,mxbeans,this,gc,beans,management,factory,get,garbage,collector,mxbeans,mbean,server,bean,server,management,factory,get,platform,mbean,server,buffer,pool,mxbean,direct,buffer,bean,null,try,direct,buffer,bean,management,factory,new,platform,mxbean,proxy,bean,server,java,nio,type,buffer,pool,name,direct,buffer,pool,mxbean,class,catch,exception,e,logger,warn,failed,to,initialize,direct,buffer,pool,bean,e,finally,this,direct,buffer,bean,direct,buffer,bean
MemoryLogger -> public MemoryLogger(Logger logger, long interval, ActorSystem monitored);1533041284;Creates a new memory logger that logs in the given interval and lives as long as the_given actor system.__@param logger The logger to use for outputting the memory statistics._@param interval The interval in which the thread logs._@param monitored The actor system to whose life the thread is bound. The thread terminates_once the actor system terminates.;public MemoryLogger(Logger logger, long interval, ActorSystem monitored) {_		super("Memory Logger")__		setDaemon(true)__		setPriority(Thread.MIN_PRIORITY)__		_		this.logger = logger__		this.interval = interval__		this.monitored = monitored___		this.memoryBean = ManagementFactory.getMemoryMXBean()__		this.poolBeans = ManagementFactory.getMemoryPoolMXBeans()__		this.gcBeans = ManagementFactory.getGarbageCollectorMXBeans()___		_		MBeanServer beanServer = ManagementFactory.getPlatformMBeanServer()__		BufferPoolMXBean directBufferBean = null__		try {_			directBufferBean = ManagementFactory.newPlatformMXBeanProxy(_					beanServer,_					"java.nio:type=BufferPool,name=direct",_					BufferPoolMXBean.class)__		}_		catch (Exception e) {_			logger.warn("Failed to initialize direct buffer pool bean.", e)__		}_		finally {_			this.directBufferBean = directBufferBean__		}_	};creates,a,new,memory,logger,that,logs,in,the,given,interval,and,lives,as,long,as,the,given,actor,system,param,logger,the,logger,to,use,for,outputting,the,memory,statistics,param,interval,the,interval,in,which,the,thread,logs,param,monitored,the,actor,system,to,whose,life,the,thread,is,bound,the,thread,terminates,once,the,actor,system,terminates;public,memory,logger,logger,logger,long,interval,actor,system,monitored,super,memory,logger,set,daemon,true,set,priority,thread,this,logger,logger,this,interval,interval,this,monitored,monitored,this,memory,bean,management,factory,get,memory,mxbean,this,pool,beans,management,factory,get,memory,pool,mxbeans,this,gc,beans,management,factory,get,garbage,collector,mxbeans,mbean,server,bean,server,management,factory,get,platform,mbean,server,buffer,pool,mxbean,direct,buffer,bean,null,try,direct,buffer,bean,management,factory,new,platform,mxbean,proxy,bean,server,java,nio,type,buffer,pool,name,direct,buffer,pool,mxbean,class,catch,exception,e,logger,warn,failed,to,initialize,direct,buffer,pool,bean,e,finally,this,direct,buffer,bean,direct,buffer,bean
MemoryLogger -> public MemoryLogger(Logger logger, long interval, ActorSystem monitored);1533829432;Creates a new memory logger that logs in the given interval and lives as long as the_given actor system.__@param logger The logger to use for outputting the memory statistics._@param interval The interval in which the thread logs._@param monitored The actor system to whose life the thread is bound. The thread terminates_once the actor system terminates.;public MemoryLogger(Logger logger, long interval, ActorSystem monitored) {_		super("Memory Logger")__		setDaemon(true)__		setPriority(Thread.MIN_PRIORITY)__		_		this.logger = logger__		this.interval = interval__		this.monitored = monitored___		this.memoryBean = ManagementFactory.getMemoryMXBean()__		this.poolBeans = ManagementFactory.getMemoryPoolMXBeans()__		this.gcBeans = ManagementFactory.getGarbageCollectorMXBeans()___		_		MBeanServer beanServer = ManagementFactory.getPlatformMBeanServer()__		BufferPoolMXBean directBufferBean = null__		try {_			directBufferBean = ManagementFactory.newPlatformMXBeanProxy(_					beanServer,_					"java.nio:type=BufferPool,name=direct",_					BufferPoolMXBean.class)__		}_		catch (Exception e) {_			logger.warn("Failed to initialize direct buffer pool bean.", e)__		}_		finally {_			this.directBufferBean = directBufferBean__		}_	};creates,a,new,memory,logger,that,logs,in,the,given,interval,and,lives,as,long,as,the,given,actor,system,param,logger,the,logger,to,use,for,outputting,the,memory,statistics,param,interval,the,interval,in,which,the,thread,logs,param,monitored,the,actor,system,to,whose,life,the,thread,is,bound,the,thread,terminates,once,the,actor,system,terminates;public,memory,logger,logger,logger,long,interval,actor,system,monitored,super,memory,logger,set,daemon,true,set,priority,thread,this,logger,logger,this,interval,interval,this,monitored,monitored,this,memory,bean,management,factory,get,memory,mxbean,this,pool,beans,management,factory,get,memory,pool,mxbeans,this,gc,beans,management,factory,get,garbage,collector,mxbeans,mbean,server,bean,server,management,factory,get,platform,mbean,server,buffer,pool,mxbean,direct,buffer,bean,null,try,direct,buffer,bean,management,factory,new,platform,mxbean,proxy,bean,server,java,nio,type,buffer,pool,name,direct,buffer,pool,mxbean,class,catch,exception,e,logger,warn,failed,to,initialize,direct,buffer,pool,bean,e,finally,this,direct,buffer,bean,direct,buffer,bean
MemoryLogger -> public static String getGarbageCollectorStatsAsString(List<GarbageCollectorMXBean> gcMXBeans);1432233511;Gets the garbage collection statistics from the JVM.__@param gcMXBeans The collection of garbage collector beans._@return A string denoting the number of times and total elapsed time in garbage collection.;public static String getGarbageCollectorStatsAsString(List<GarbageCollectorMXBean> gcMXBeans) {_		StringBuilder bld = new StringBuilder("Garbage collector stats: ")__		_		for (GarbageCollectorMXBean bean : gcMXBeans) {_			bld.append('[').append(bean.getName()).append(", GC TIME (ms): ").append(bean.getCollectionTime())__			bld.append(", GC COUNT: ").append(bean.getCollectionCount()).append(']')__			_			bld.append(", ")__		}_		_		if (!gcMXBeans.isEmpty()) {_			bld.setLength(bld.length() - 2)__		}_		_		return bld.toString()__	};gets,the,garbage,collection,statistics,from,the,jvm,param,gc,mxbeans,the,collection,of,garbage,collector,beans,return,a,string,denoting,the,number,of,times,and,total,elapsed,time,in,garbage,collection;public,static,string,get,garbage,collector,stats,as,string,list,garbage,collector,mxbean,gc,mxbeans,string,builder,bld,new,string,builder,garbage,collector,stats,for,garbage,collector,mxbean,bean,gc,mxbeans,bld,append,append,bean,get,name,append,gc,time,ms,append,bean,get,collection,time,bld,append,gc,count,append,bean,get,collection,count,append,bld,append,if,gc,mxbeans,is,empty,bld,set,length,bld,length,2,return,bld,to,string
MemoryLogger -> public static String getGarbageCollectorStatsAsString(List<GarbageCollectorMXBean> gcMXBeans);1436452498;Gets the garbage collection statistics from the JVM.__@param gcMXBeans The collection of garbage collector beans._@return A string denoting the number of times and total elapsed time in garbage collection.;public static String getGarbageCollectorStatsAsString(List<GarbageCollectorMXBean> gcMXBeans) {_		StringBuilder bld = new StringBuilder("Garbage collector stats: ")__		_		for (GarbageCollectorMXBean bean : gcMXBeans) {_			bld.append('[').append(bean.getName()).append(", GC TIME (ms): ").append(bean.getCollectionTime())__			bld.append(", GC COUNT: ").append(bean.getCollectionCount()).append(']')__			_			bld.append(", ")__		}_		_		if (!gcMXBeans.isEmpty()) {_			bld.setLength(bld.length() - 2)__		}_		_		return bld.toString()__	};gets,the,garbage,collection,statistics,from,the,jvm,param,gc,mxbeans,the,collection,of,garbage,collector,beans,return,a,string,denoting,the,number,of,times,and,total,elapsed,time,in,garbage,collection;public,static,string,get,garbage,collector,stats,as,string,list,garbage,collector,mxbean,gc,mxbeans,string,builder,bld,new,string,builder,garbage,collector,stats,for,garbage,collector,mxbean,bean,gc,mxbeans,bld,append,append,bean,get,name,append,gc,time,ms,append,bean,get,collection,time,bld,append,gc,count,append,bean,get,collection,count,append,bld,append,if,gc,mxbeans,is,empty,bld,set,length,bld,length,2,return,bld,to,string
MemoryLogger -> public static String getGarbageCollectorStatsAsString(List<GarbageCollectorMXBean> gcMXBeans);1450713006;Gets the garbage collection statistics from the JVM.__@param gcMXBeans The collection of garbage collector beans._@return A string denoting the number of times and total elapsed time in garbage collection.;public static String getGarbageCollectorStatsAsString(List<GarbageCollectorMXBean> gcMXBeans) {_		StringBuilder bld = new StringBuilder("Garbage collector stats: ")__		_		for (GarbageCollectorMXBean bean : gcMXBeans) {_			bld.append('[').append(bean.getName()).append(", GC TIME (ms): ").append(bean.getCollectionTime())__			bld.append(", GC COUNT: ").append(bean.getCollectionCount()).append(']')__			_			bld.append(", ")__		}_		_		if (!gcMXBeans.isEmpty()) {_			bld.setLength(bld.length() - 2)__		}_		_		return bld.toString()__	};gets,the,garbage,collection,statistics,from,the,jvm,param,gc,mxbeans,the,collection,of,garbage,collector,beans,return,a,string,denoting,the,number,of,times,and,total,elapsed,time,in,garbage,collection;public,static,string,get,garbage,collector,stats,as,string,list,garbage,collector,mxbean,gc,mxbeans,string,builder,bld,new,string,builder,garbage,collector,stats,for,garbage,collector,mxbean,bean,gc,mxbeans,bld,append,append,bean,get,name,append,gc,time,ms,append,bean,get,collection,time,bld,append,gc,count,append,bean,get,collection,count,append,bld,append,if,gc,mxbeans,is,empty,bld,set,length,bld,length,2,return,bld,to,string
MemoryLogger -> public static String getGarbageCollectorStatsAsString(List<GarbageCollectorMXBean> gcMXBeans);1533041284;Gets the garbage collection statistics from the JVM.__@param gcMXBeans The collection of garbage collector beans._@return A string denoting the number of times and total elapsed time in garbage collection.;public static String getGarbageCollectorStatsAsString(List<GarbageCollectorMXBean> gcMXBeans) {_		StringBuilder bld = new StringBuilder("Garbage collector stats: ")__		_		for (GarbageCollectorMXBean bean : gcMXBeans) {_			bld.append('[').append(bean.getName()).append(", GC TIME (ms): ").append(bean.getCollectionTime())__			bld.append(", GC COUNT: ").append(bean.getCollectionCount()).append(']')__			_			bld.append(", ")__		}_		_		if (!gcMXBeans.isEmpty()) {_			bld.setLength(bld.length() - 2)__		}_		_		return bld.toString()__	};gets,the,garbage,collection,statistics,from,the,jvm,param,gc,mxbeans,the,collection,of,garbage,collector,beans,return,a,string,denoting,the,number,of,times,and,total,elapsed,time,in,garbage,collection;public,static,string,get,garbage,collector,stats,as,string,list,garbage,collector,mxbean,gc,mxbeans,string,builder,bld,new,string,builder,garbage,collector,stats,for,garbage,collector,mxbean,bean,gc,mxbeans,bld,append,append,bean,get,name,append,gc,time,ms,append,bean,get,collection,time,bld,append,gc,count,append,bean,get,collection,count,append,bld,append,if,gc,mxbeans,is,empty,bld,set,length,bld,length,2,return,bld,to,string
MemoryLogger -> public static String getGarbageCollectorStatsAsString(List<GarbageCollectorMXBean> gcMXBeans);1533829432;Gets the garbage collection statistics from the JVM.__@param gcMXBeans The collection of garbage collector beans._@return A string denoting the number of times and total elapsed time in garbage collection.;public static String getGarbageCollectorStatsAsString(List<GarbageCollectorMXBean> gcMXBeans) {_		StringBuilder bld = new StringBuilder("Garbage collector stats: ")__		_		for (GarbageCollectorMXBean bean : gcMXBeans) {_			bld.append('[').append(bean.getName()).append(", GC TIME (ms): ").append(bean.getCollectionTime())__			bld.append(", GC COUNT: ").append(bean.getCollectionCount()).append(']')__			_			bld.append(", ")__		}_		_		if (!gcMXBeans.isEmpty()) {_			bld.setLength(bld.length() - 2)__		}_		_		return bld.toString()__	};gets,the,garbage,collection,statistics,from,the,jvm,param,gc,mxbeans,the,collection,of,garbage,collector,beans,return,a,string,denoting,the,number,of,times,and,total,elapsed,time,in,garbage,collection;public,static,string,get,garbage,collector,stats,as,string,list,garbage,collector,mxbean,gc,mxbeans,string,builder,bld,new,string,builder,garbage,collector,stats,for,garbage,collector,mxbean,bean,gc,mxbeans,bld,append,append,bean,get,name,append,gc,time,ms,append,bean,get,collection,time,bld,append,gc,count,append,bean,get,collection,count,append,bld,append,if,gc,mxbeans,is,empty,bld,set,length,bld,length,2,return,bld,to,string
MemoryLogger -> public static String getMemoryPoolStatsAsString(List<MemoryPoolMXBean> poolBeans);1432233511;Gets the memory pool statistics from the JVM.__@param poolBeans The collection of memory pool beans._@return A string denoting the names and sizes of the memory pools.;public static String getMemoryPoolStatsAsString(List<MemoryPoolMXBean> poolBeans) {_		StringBuilder bld = new StringBuilder("Off-heap pool stats: ")__		int count = 0__		_		for (MemoryPoolMXBean bean : poolBeans) {_			if (bean.getType() == MemoryType.NON_HEAP) {_				if (count > 0) {_					bld.append(", ")__				}_				count++___				MemoryUsage usage = bean.getUsage()__				long used = usage.getUsed() >> 20__				long committed = usage.getCommitted() >> 20__				long max = usage.getMax() >> 20__				_				bld.append('[').append(bean.getName()).append(": ")__				bld.append(used).append('/').append(committed).append('/').append(max)__				bld.append(" MB (used/committed/max)]")__			}_		}__		return bld.toString()__	};gets,the,memory,pool,statistics,from,the,jvm,param,pool,beans,the,collection,of,memory,pool,beans,return,a,string,denoting,the,names,and,sizes,of,the,memory,pools;public,static,string,get,memory,pool,stats,as,string,list,memory,pool,mxbean,pool,beans,string,builder,bld,new,string,builder,off,heap,pool,stats,int,count,0,for,memory,pool,mxbean,bean,pool,beans,if,bean,get,type,memory,type,if,count,0,bld,append,count,memory,usage,usage,bean,get,usage,long,used,usage,get,used,20,long,committed,usage,get,committed,20,long,max,usage,get,max,20,bld,append,append,bean,get,name,append,bld,append,used,append,append,committed,append,append,max,bld,append,mb,used,committed,max,return,bld,to,string
MemoryLogger -> public static String getMemoryPoolStatsAsString(List<MemoryPoolMXBean> poolBeans);1436452498;Gets the memory pool statistics from the JVM.__@param poolBeans The collection of memory pool beans._@return A string denoting the names and sizes of the memory pools.;public static String getMemoryPoolStatsAsString(List<MemoryPoolMXBean> poolBeans) {_		StringBuilder bld = new StringBuilder("Off-heap pool stats: ")__		int count = 0__		_		for (MemoryPoolMXBean bean : poolBeans) {_			if (bean.getType() == MemoryType.NON_HEAP) {_				if (count > 0) {_					bld.append(", ")__				}_				count++___				MemoryUsage usage = bean.getUsage()__				long used = usage.getUsed() >> 20__				long committed = usage.getCommitted() >> 20__				long max = usage.getMax() >> 20__				_				bld.append('[').append(bean.getName()).append(": ")__				bld.append(used).append('/').append(committed).append('/').append(max)__				bld.append(" MB (used/committed/max)]")__			}_		}__		return bld.toString()__	};gets,the,memory,pool,statistics,from,the,jvm,param,pool,beans,the,collection,of,memory,pool,beans,return,a,string,denoting,the,names,and,sizes,of,the,memory,pools;public,static,string,get,memory,pool,stats,as,string,list,memory,pool,mxbean,pool,beans,string,builder,bld,new,string,builder,off,heap,pool,stats,int,count,0,for,memory,pool,mxbean,bean,pool,beans,if,bean,get,type,memory,type,if,count,0,bld,append,count,memory,usage,usage,bean,get,usage,long,used,usage,get,used,20,long,committed,usage,get,committed,20,long,max,usage,get,max,20,bld,append,append,bean,get,name,append,bld,append,used,append,append,committed,append,append,max,bld,append,mb,used,committed,max,return,bld,to,string
MemoryLogger -> public static String getMemoryPoolStatsAsString(List<MemoryPoolMXBean> poolBeans);1450713006;Gets the memory pool statistics from the JVM.__@param poolBeans The collection of memory pool beans._@return A string denoting the names and sizes of the memory pools.;public static String getMemoryPoolStatsAsString(List<MemoryPoolMXBean> poolBeans) {_		StringBuilder bld = new StringBuilder("Off-heap pool stats: ")__		int count = 0__		_		for (MemoryPoolMXBean bean : poolBeans) {_			if (bean.getType() == MemoryType.NON_HEAP) {_				if (count > 0) {_					bld.append(", ")__				}_				count++___				MemoryUsage usage = bean.getUsage()__				long used = usage.getUsed() >> 20__				long committed = usage.getCommitted() >> 20__				long max = usage.getMax() >> 20__				_				bld.append('[').append(bean.getName()).append(": ")__				bld.append(used).append('/').append(committed).append('/').append(max)__				bld.append(" MB (used/committed/max)]")__			}_		}__		return bld.toString()__	};gets,the,memory,pool,statistics,from,the,jvm,param,pool,beans,the,collection,of,memory,pool,beans,return,a,string,denoting,the,names,and,sizes,of,the,memory,pools;public,static,string,get,memory,pool,stats,as,string,list,memory,pool,mxbean,pool,beans,string,builder,bld,new,string,builder,off,heap,pool,stats,int,count,0,for,memory,pool,mxbean,bean,pool,beans,if,bean,get,type,memory,type,if,count,0,bld,append,count,memory,usage,usage,bean,get,usage,long,used,usage,get,used,20,long,committed,usage,get,committed,20,long,max,usage,get,max,20,bld,append,append,bean,get,name,append,bld,append,used,append,append,committed,append,append,max,bld,append,mb,used,committed,max,return,bld,to,string
MemoryLogger -> public static String getMemoryPoolStatsAsString(List<MemoryPoolMXBean> poolBeans);1533041284;Gets the memory pool statistics from the JVM.__@param poolBeans The collection of memory pool beans._@return A string denoting the names and sizes of the memory pools.;public static String getMemoryPoolStatsAsString(List<MemoryPoolMXBean> poolBeans) {_		StringBuilder bld = new StringBuilder("Off-heap pool stats: ")__		int count = 0__		_		for (MemoryPoolMXBean bean : poolBeans) {_			if (bean.getType() == MemoryType.NON_HEAP) {_				if (count > 0) {_					bld.append(", ")__				}_				count++___				MemoryUsage usage = bean.getUsage()__				long used = usage.getUsed() >> 20__				long committed = usage.getCommitted() >> 20__				long max = usage.getMax() >> 20__				_				bld.append('[').append(bean.getName()).append(": ")__				bld.append(used).append('/').append(committed).append('/').append(max)__				bld.append(" MB (used/committed/max)]")__			}_		}__		return bld.toString()__	};gets,the,memory,pool,statistics,from,the,jvm,param,pool,beans,the,collection,of,memory,pool,beans,return,a,string,denoting,the,names,and,sizes,of,the,memory,pools;public,static,string,get,memory,pool,stats,as,string,list,memory,pool,mxbean,pool,beans,string,builder,bld,new,string,builder,off,heap,pool,stats,int,count,0,for,memory,pool,mxbean,bean,pool,beans,if,bean,get,type,memory,type,if,count,0,bld,append,count,memory,usage,usage,bean,get,usage,long,used,usage,get,used,20,long,committed,usage,get,committed,20,long,max,usage,get,max,20,bld,append,append,bean,get,name,append,bld,append,used,append,append,committed,append,append,max,bld,append,mb,used,committed,max,return,bld,to,string
MemoryLogger -> public static String getMemoryPoolStatsAsString(List<MemoryPoolMXBean> poolBeans);1533829432;Gets the memory pool statistics from the JVM.__@param poolBeans The collection of memory pool beans._@return A string denoting the names and sizes of the memory pools.;public static String getMemoryPoolStatsAsString(List<MemoryPoolMXBean> poolBeans) {_		StringBuilder bld = new StringBuilder("Off-heap pool stats: ")__		int count = 0__		_		for (MemoryPoolMXBean bean : poolBeans) {_			if (bean.getType() == MemoryType.NON_HEAP) {_				if (count > 0) {_					bld.append(", ")__				}_				count++___				MemoryUsage usage = bean.getUsage()__				long used = usage.getUsed() >> 20__				long committed = usage.getCommitted() >> 20__				long max = usage.getMax() >> 20__				_				bld.append('[').append(bean.getName()).append(": ")__				bld.append(used).append('/').append(committed).append('/').append(max)__				bld.append(" MB (used/committed/max)]")__			}_		}__		return bld.toString()__	};gets,the,memory,pool,statistics,from,the,jvm,param,pool,beans,the,collection,of,memory,pool,beans,return,a,string,denoting,the,names,and,sizes,of,the,memory,pools;public,static,string,get,memory,pool,stats,as,string,list,memory,pool,mxbean,pool,beans,string,builder,bld,new,string,builder,off,heap,pool,stats,int,count,0,for,memory,pool,mxbean,bean,pool,beans,if,bean,get,type,memory,type,if,count,0,bld,append,count,memory,usage,usage,bean,get,usage,long,used,usage,get,used,20,long,committed,usage,get,committed,20,long,max,usage,get,max,20,bld,append,append,bean,get,name,append,bld,append,used,append,append,committed,append,append,max,bld,append,mb,used,committed,max,return,bld,to,string
