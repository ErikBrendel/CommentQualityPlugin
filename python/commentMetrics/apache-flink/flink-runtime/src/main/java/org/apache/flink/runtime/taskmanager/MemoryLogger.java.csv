commented;modifiers;parameterAmount;loc;comment;code
false;public,static;3;14;;public static void startIfConfigured(Logger logger, Configuration configuration, ActorSystem taskManagerSystem) {     if (!logger.isInfoEnabled() || !configuration.getBoolean(TaskManagerOptions.DEBUG_MEMORY_LOG)) {         return.     }     logger.info("Starting periodic memory usage logger").     new MemoryLogger(logger, configuration.getLong(TaskManagerOptions.DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS), taskManagerSystem).start(). }
false;public;0;4;;public void shutdown() {     this.running = false.     interrupt(). }
false;public;0;23;;// ------------------------------------------------------------------------ @Override public void run() {     try {         while (running && (monitored == null || !monitored.whenTerminated().isCompleted())) {             logger.info(getMemoryUsageStatsAsString(memoryBean)).             logger.info(getDirectMemoryStatsAsString(directBufferBean)).             logger.info(getMemoryPoolStatsAsString(poolBeans)).             logger.info(getGarbageCollectorStatsAsString(gcBeans)).             try {                 Thread.sleep(interval).             } catch (InterruptedException e) {                 if (running) {                     throw e.                 }             }         }     } catch (Throwable t) {         logger.error("Memory logger terminated with exception", t).     } }
true;public,static;1;16;/**  * Gets the memory footprint of the JVM in a string representation.  *  * @return A string describing how much heap memory and direct memory are allocated and used.  */ ;// ------------------------------------------------------------------------ /**  * Gets the memory footprint of the JVM in a string representation.  *  * @return A string describing how much heap memory and direct memory are allocated and used.  */ public static String getMemoryUsageStatsAsString(MemoryMXBean memoryMXBean) {     MemoryUsage heap = memoryMXBean.getHeapMemoryUsage().     MemoryUsage nonHeap = memoryMXBean.getNonHeapMemoryUsage().     long heapUsed = heap.getUsed() >> 20.     long heapCommitted = heap.getCommitted() >> 20.     long heapMax = heap.getMax() >> 20.     long nonHeapUsed = nonHeap.getUsed() >> 20.     long nonHeapCommitted = nonHeap.getCommitted() >> 20.     long nonHeapMax = nonHeap.getMax() >> 20.     return String.format("Memory usage stats: [HEAP: %d/%d/%d MB, " + "NON HEAP: %d/%d/%d MB (used/committed/max)]", heapUsed, heapCommitted, heapMax, nonHeapUsed, nonHeapCommitted, nonHeapMax). }
true;public,static;1;11;/**  * Returns a String with the <strong>direct</strong> memory footprint.  *  * <p>These stats are not part of the other memory beans.  *  * @param bufferPoolMxBean The direct buffer pool bean or <code>null</code> if none available.  *  * @return A string with the count, total capacity, and used direct memory.  */ ;/**  * Returns a String with the <strong>direct</strong> memory footprint.  *  * <p>These stats are not part of the other memory beans.  *  * @param bufferPoolMxBean The direct buffer pool bean or <code>null</code> if none available.  *  * @return A string with the count, total capacity, and used direct memory.  */ public static String getDirectMemoryStatsAsString(BufferPoolMXBean bufferPoolMxBean) {     if (bufferPoolMxBean == null) {         return "Direct memory stats: unavailable".     } else {         return String.format("Direct memory stats: Count: %d, Total Capacity: %d, Used Memory: %d", bufferPoolMxBean.getCount(), bufferPoolMxBean.getTotalCapacity(), bufferPoolMxBean.getMemoryUsed()).     } }
true;public,static;1;24;/**  * Gets the memory pool statistics from the JVM.  *  * @param poolBeans The collection of memory pool beans.  * @return A string denoting the names and sizes of the memory pools.  */ ;/**  * Gets the memory pool statistics from the JVM.  *  * @param poolBeans The collection of memory pool beans.  * @return A string denoting the names and sizes of the memory pools.  */ public static String getMemoryPoolStatsAsString(List<MemoryPoolMXBean> poolBeans) {     StringBuilder bld = new StringBuilder("Off-heap pool stats: ").     int count = 0.     for (MemoryPoolMXBean bean : poolBeans) {         if (bean.getType() == MemoryType.NON_HEAP) {             if (count > 0) {                 bld.append(", ").             }             count++.             MemoryUsage usage = bean.getUsage().             long used = usage.getUsed() >> 20.             long committed = usage.getCommitted() >> 20.             long max = usage.getMax() >> 20.             bld.append('[').append(bean.getName()).append(": ").             bld.append(used).append('/').append(committed).append('/').append(max).             bld.append(" MB (used/committed/max)]").         }     }     return bld.toString(). }
true;public,static;1;16;/**  * Gets the garbage collection statistics from the JVM.  *  * @param gcMXBeans The collection of garbage collector beans.  * @return A string denoting the number of times and total elapsed time in garbage collection.  */ ;/**  * Gets the garbage collection statistics from the JVM.  *  * @param gcMXBeans The collection of garbage collector beans.  * @return A string denoting the number of times and total elapsed time in garbage collection.  */ public static String getGarbageCollectorStatsAsString(List<GarbageCollectorMXBean> gcMXBeans) {     StringBuilder bld = new StringBuilder("Garbage collector stats: ").     for (GarbageCollectorMXBean bean : gcMXBeans) {         bld.append('[').append(bean.getName()).append(", GC TIME (ms): ").append(bean.getCollectionTime()).         bld.append(", GC COUNT: ").append(bean.getCollectionCount()).append(']').         bld.append(", ").     }     if (!gcMXBeans.isEmpty()) {         bld.setLength(bld.length() - 2).     }     return bld.toString(). }
