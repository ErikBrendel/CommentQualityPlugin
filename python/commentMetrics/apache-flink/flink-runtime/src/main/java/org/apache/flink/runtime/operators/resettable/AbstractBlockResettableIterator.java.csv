commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;// -------------------------------------------------------------------------------------------- public void open() {     if (LOG.isDebugEnabled()) {         LOG.debug("Block Resettable Iterator opened.").     } }
false;public;0;8;;public void reset() {     if (this.closed) {         throw new IllegalStateException("Iterator was closed.").     }     this.readView.setReadPosition(0).     this.numRecordsReturned = 0. }
false;public;0;14;;@Override public boolean nextBlock() throws IOException {     this.numRecordsInBuffer = 0.     // add the full segments to the empty ones     for (int i = this.fullSegments.size() - 1. i >= 0. i--) {         this.emptySegments.add(this.fullSegments.remove(i)).     }     // reset the views     this.collectingView.reset().     this.readView.setReadPosition(0).     return true. }
true;public;0;24;/**  * This method closes the iterator and releases all resources. This method works both as a regular  * shutdown and as a canceling method. The method may be called multiple times and will not produce  * an error.  */ ;/**  * This method closes the iterator and releases all resources. This method works both as a regular  * shutdown and as a canceling method. The method may be called multiple times and will not produce  * an error.  */ public void close() {     synchronized (this) {         if (this.closed) {             return.         }         this.closed = true.     }     this.numRecordsInBuffer = 0.     this.numRecordsReturned = 0.     // add the full segments to the empty ones     for (int i = this.fullSegments.size() - 1. i >= 0. i--) {         this.emptySegments.add(this.fullSegments.remove(i)).     }     // release the memory segment     this.memoryManager.release(this.emptySegments).     this.emptySegments.clear().     if (LOG.isDebugEnabled()) {         LOG.debug("Block Resettable Iterator closed.").     } }
false;protected;1;9;;// -------------------------------------------------------------------------------------------- protected boolean writeNextRecord(T record) throws IOException {     try {         this.serializer.serialize(record, this.collectingView).         this.numRecordsInBuffer++.         return true.     } catch (EOFException eofex) {         return false.     } }
false;protected;1;8;;protected T getNextRecord(T reuse) throws IOException {     if (this.numRecordsReturned < this.numRecordsInBuffer) {         this.numRecordsReturned++.         return this.serializer.deserialize(reuse, this.readView).     } else {         return null.     } }
false;protected;0;8;;protected T getNextRecord() throws IOException {     if (this.numRecordsReturned < this.numRecordsInBuffer) {         this.numRecordsReturned++.         return this.serializer.deserialize(this.readView).     } else {         return null.     } }
