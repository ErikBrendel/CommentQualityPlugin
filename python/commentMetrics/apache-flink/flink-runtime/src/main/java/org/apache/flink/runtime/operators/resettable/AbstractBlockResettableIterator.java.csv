# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractBlockResettableIterator -> public void close();1405024514;This method closes the iterator and releases all resources. This method works both as a regular_shutdown and as a canceling method. The method may be called multiple times and will not produce_an error.;public void close() {_		synchronized (this) {_			if (this.closed) {_				return__			}_			this.closed = true__		}_		_		this.numRecordsInBuffer = 0__		this.numRecordsReturned = 0__		_		_		for (int i = this.fullSegments.size() - 1_ i >= 0_ i--) {_			this.emptySegments.add(this.fullSegments.remove(i))__		}_		_		_		this.memoryManager.release(this.emptySegments)__		this.emptySegments.clear()__		_		if (LOG.isDebugEnabled()) {_			LOG.debug("Block Resettable Iterator closed.")__		}_	};this,method,closes,the,iterator,and,releases,all,resources,this,method,works,both,as,a,regular,shutdown,and,as,a,canceling,method,the,method,may,be,called,multiple,times,and,will,not,produce,an,error;public,void,close,synchronized,this,if,this,closed,return,this,closed,true,this,num,records,in,buffer,0,this,num,records,returned,0,for,int,i,this,full,segments,size,1,i,0,i,this,empty,segments,add,this,full,segments,remove,i,this,memory,manager,release,this,empty,segments,this,empty,segments,clear,if,log,is,debug,enabled,log,debug,block,resettable,iterator,closed
AbstractBlockResettableIterator -> public void close();1405090423;This method closes the iterator and releases all resources. This method works both as a regular_shutdown and as a canceling method. The method may be called multiple times and will not produce_an error.;public void close() {_		synchronized (this) {_			if (this.closed) {_				return__			}_			this.closed = true__		}_		_		this.numRecordsInBuffer = 0__		this.numRecordsReturned = 0__		_		_		for (int i = this.fullSegments.size() - 1_ i >= 0_ i--) {_			this.emptySegments.add(this.fullSegments.remove(i))__		}_		_		_		this.memoryManager.release(this.emptySegments)__		this.emptySegments.clear()__		_		if (LOG.isDebugEnabled()) {_			LOG.debug("Block Resettable Iterator closed.")__		}_	};this,method,closes,the,iterator,and,releases,all,resources,this,method,works,both,as,a,regular,shutdown,and,as,a,canceling,method,the,method,may,be,called,multiple,times,and,will,not,produce,an,error;public,void,close,synchronized,this,if,this,closed,return,this,closed,true,this,num,records,in,buffer,0,this,num,records,returned,0,for,int,i,this,full,segments,size,1,i,0,i,this,empty,segments,add,this,full,segments,remove,i,this,memory,manager,release,this,empty,segments,this,empty,segments,clear,if,log,is,debug,enabled,log,debug,block,resettable,iterator,closed
AbstractBlockResettableIterator -> public void close();1409911022;This method closes the iterator and releases all resources. This method works both as a regular_shutdown and as a canceling method. The method may be called multiple times and will not produce_an error.;public void close() {_		synchronized (this) {_			if (this.closed) {_				return__			}_			this.closed = true__		}_		_		this.numRecordsInBuffer = 0__		this.numRecordsReturned = 0__		_		_		for (int i = this.fullSegments.size() - 1_ i >= 0_ i--) {_			this.emptySegments.add(this.fullSegments.remove(i))__		}_		_		_		this.memoryManager.release(this.emptySegments)__		this.emptySegments.clear()__		_		if (LOG.isDebugEnabled()) {_			LOG.debug("Block Resettable Iterator closed.")__		}_	};this,method,closes,the,iterator,and,releases,all,resources,this,method,works,both,as,a,regular,shutdown,and,as,a,canceling,method,the,method,may,be,called,multiple,times,and,will,not,produce,an,error;public,void,close,synchronized,this,if,this,closed,return,this,closed,true,this,num,records,in,buffer,0,this,num,records,returned,0,for,int,i,this,full,segments,size,1,i,0,i,this,empty,segments,add,this,full,segments,remove,i,this,memory,manager,release,this,empty,segments,this,empty,segments,clear,if,log,is,debug,enabled,log,debug,block,resettable,iterator,closed
AbstractBlockResettableIterator -> public void close();1411473593;This method closes the iterator and releases all resources. This method works both as a regular_shutdown and as a canceling method. The method may be called multiple times and will not produce_an error.;public void close() {_		synchronized (this) {_			if (this.closed) {_				return__			}_			this.closed = true__		}_		_		this.numRecordsInBuffer = 0__		this.numRecordsReturned = 0__		_		_		for (int i = this.fullSegments.size() - 1_ i >= 0_ i--) {_			this.emptySegments.add(this.fullSegments.remove(i))__		}_		_		_		this.memoryManager.release(this.emptySegments)__		this.emptySegments.clear()__		_		if (LOG.isDebugEnabled()) {_			LOG.debug("Block Resettable Iterator closed.")__		}_	};this,method,closes,the,iterator,and,releases,all,resources,this,method,works,both,as,a,regular,shutdown,and,as,a,canceling,method,the,method,may,be,called,multiple,times,and,will,not,produce,an,error;public,void,close,synchronized,this,if,this,closed,return,this,closed,true,this,num,records,in,buffer,0,this,num,records,returned,0,for,int,i,this,full,segments,size,1,i,0,i,this,empty,segments,add,this,full,segments,remove,i,this,memory,manager,release,this,empty,segments,this,empty,segments,clear,if,log,is,debug,enabled,log,debug,block,resettable,iterator,closed
AbstractBlockResettableIterator -> public void close();1411724090;This method closes the iterator and releases all resources. This method works both as a regular_shutdown and as a canceling method. The method may be called multiple times and will not produce_an error.;public void close() {_		synchronized (this) {_			if (this.closed) {_				return__			}_			this.closed = true__		}_		_		this.numRecordsInBuffer = 0__		this.numRecordsReturned = 0__		_		_		for (int i = this.fullSegments.size() - 1_ i >= 0_ i--) {_			this.emptySegments.add(this.fullSegments.remove(i))__		}_		_		_		this.memoryManager.release(this.emptySegments)__		this.emptySegments.clear()__		_		if (LOG.isDebugEnabled()) {_			LOG.debug("Block Resettable Iterator closed.")__		}_	};this,method,closes,the,iterator,and,releases,all,resources,this,method,works,both,as,a,regular,shutdown,and,as,a,canceling,method,the,method,may,be,called,multiple,times,and,will,not,produce,an,error;public,void,close,synchronized,this,if,this,closed,return,this,closed,true,this,num,records,in,buffer,0,this,num,records,returned,0,for,int,i,this,full,segments,size,1,i,0,i,this,empty,segments,add,this,full,segments,remove,i,this,memory,manager,release,this,empty,segments,this,empty,segments,clear,if,log,is,debug,enabled,log,debug,block,resettable,iterator,closed
AbstractBlockResettableIterator -> public void close();1420654570;This method closes the iterator and releases all resources. This method works both as a regular_shutdown and as a canceling method. The method may be called multiple times and will not produce_an error.;public void close() {_		synchronized (this) {_			if (this.closed) {_				return__			}_			this.closed = true__		}_		_		this.numRecordsInBuffer = 0__		this.numRecordsReturned = 0__		_		_		for (int i = this.fullSegments.size() - 1_ i >= 0_ i--) {_			this.emptySegments.add(this.fullSegments.remove(i))__		}_		_		_		this.memoryManager.release(this.emptySegments)__		this.emptySegments.clear()__		_		if (LOG.isDebugEnabled()) {_			LOG.debug("Block Resettable Iterator closed.")__		}_	};this,method,closes,the,iterator,and,releases,all,resources,this,method,works,both,as,a,regular,shutdown,and,as,a,canceling,method,the,method,may,be,called,multiple,times,and,will,not,produce,an,error;public,void,close,synchronized,this,if,this,closed,return,this,closed,true,this,num,records,in,buffer,0,this,num,records,returned,0,for,int,i,this,full,segments,size,1,i,0,i,this,empty,segments,add,this,full,segments,remove,i,this,memory,manager,release,this,empty,segments,this,empty,segments,clear,if,log,is,debug,enabled,log,debug,block,resettable,iterator,closed
AbstractBlockResettableIterator -> public void close();1441738685;This method closes the iterator and releases all resources. This method works both as a regular_shutdown and as a canceling method. The method may be called multiple times and will not produce_an error.;public void close() {_		synchronized (this) {_			if (this.closed) {_				return__			}_			this.closed = true__		}_		_		this.numRecordsInBuffer = 0__		this.numRecordsReturned = 0__		_		_		for (int i = this.fullSegments.size() - 1_ i >= 0_ i--) {_			this.emptySegments.add(this.fullSegments.remove(i))__		}_		_		_		this.memoryManager.release(this.emptySegments)__		this.emptySegments.clear()__		_		if (LOG.isDebugEnabled()) {_			LOG.debug("Block Resettable Iterator closed.")__		}_	};this,method,closes,the,iterator,and,releases,all,resources,this,method,works,both,as,a,regular,shutdown,and,as,a,canceling,method,the,method,may,be,called,multiple,times,and,will,not,produce,an,error;public,void,close,synchronized,this,if,this,closed,return,this,closed,true,this,num,records,in,buffer,0,this,num,records,returned,0,for,int,i,this,full,segments,size,1,i,0,i,this,empty,segments,add,this,full,segments,remove,i,this,memory,manager,release,this,empty,segments,this,empty,segments,clear,if,log,is,debug,enabled,log,debug,block,resettable,iterator,closed
