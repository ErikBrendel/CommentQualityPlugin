commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Gets the identifier of this hook. The identifier is used to identify a specific hook in the  * presence of multiple hooks and to give it the correct checkpointed data upon checkpoint restoration.  *  * <p>The identifier should be unique between different hooks of a job, but deterministic/constant  * so that upon resuming a savepoint, the hook will get the correct data.  * For example, if the hook calls into another storage system and persists namespace/schema specific  * information, then the name of the storage system, together with the namespace/schema name could  * be an appropriate identifier.  *  * <p>When multiple hooks of the same name are created and attached to a job graph, only the first  * one is actually used. This can be exploited to deduplicate hooks that would do the same thing.  *  * @return The identifier of the hook.  */ ;/**  * Gets the identifier of this hook. The identifier is used to identify a specific hook in the  * presence of multiple hooks and to give it the correct checkpointed data upon checkpoint restoration.  *  * <p>The identifier should be unique between different hooks of a job, but deterministic/constant  * so that upon resuming a savepoint, the hook will get the correct data.  * For example, if the hook calls into another storage system and persists namespace/schema specific  * information, then the name of the storage system, together with the namespace/schema name could  * be an appropriate identifier.  *  * <p>When multiple hooks of the same name are created and attached to a job graph, only the first  * one is actually used. This can be exploited to deduplicate hooks that would do the same thing.  *  * @return The identifier of the hook.  */ String getIdentifier().
true;default;0;3;/**  * This method is called by the checkpoint coordinator to reset the hook when  * execution is restarted in the absence of any checkpoint state.  *  * @throws Exception Exceptions encountered when calling the hook will cause execution to fail.  */ ;/**  * This method is called by the checkpoint coordinator to reset the hook when  * execution is restarted in the absence of any checkpoint state.  *  * @throws Exception Exceptions encountered when calling the hook will cause execution to fail.  */ default void reset() throws Exception { }
true;default;0;3;/**  * Tear-down method for the hook.  *  * @throws Exception Exceptions encountered when calling close will be logged.  */ ;/**  * Tear-down method for the hook.  *  * @throws Exception Exceptions encountered when calling close will be logged.  */ default void close() throws Exception { }
true;;3;2;/**  * This method is called by the checkpoint coordinator prior when triggering a checkpoint, prior  * to sending the "trigger checkpoint" messages to the source tasks.  *  * <p>If the hook implementation wants to store data as part of the checkpoint, it may return  * that data via a future, otherwise it should return null. The data is stored as part of  * the checkpoint metadata under the hooks identifier (see {@link #getIdentifier()}).  *  * <p>If the action by this hook needs to be executed synchronously, then this method should  * directly execute the action synchronously and block until it is complete. The returned future  * (if any) would typically be a completed future.  *  * <p>If the action should be executed asynchronously and only needs to complete before the  * checkpoint is considered completed, then the method may use the given executor to execute the  * actual action and would signal its completion by completing the future. For hooks that do not  * need to store data, the future would be completed with null.  *  * @param checkpointId The ID (logical timestamp, monotonously increasing) of the checkpoint  * @param timestamp The wall clock timestamp when the checkpoint was triggered, for  *                  info/logging purposes.  * @param executor The executor for asynchronous actions  *  * @return Optionally, a future that signals when the hook has completed and that contains  *         data to be stored with the checkpoint.  *  * @throws Exception Exceptions encountered when calling the hook will cause the checkpoint to abort.  */ ;/**  * This method is called by the checkpoint coordinator prior when triggering a checkpoint, prior  * to sending the "trigger checkpoint" messages to the source tasks.  *  * <p>If the hook implementation wants to store data as part of the checkpoint, it may return  * that data via a future, otherwise it should return null. The data is stored as part of  * the checkpoint metadata under the hooks identifier (see {@link #getIdentifier()}).  *  * <p>If the action by this hook needs to be executed synchronously, then this method should  * directly execute the action synchronously and block until it is complete. The returned future  * (if any) would typically be a completed future.  *  * <p>If the action should be executed asynchronously and only needs to complete before the  * checkpoint is considered completed, then the method may use the given executor to execute the  * actual action and would signal its completion by completing the future. For hooks that do not  * need to store data, the future would be completed with null.  *  * @param checkpointId The ID (logical timestamp, monotonously increasing) of the checkpoint  * @param timestamp The wall clock timestamp when the checkpoint was triggered, for  *                  info/logging purposes.  * @param executor The executor for asynchronous actions  *  * @return Optionally, a future that signals when the hook has completed and that contains  *         data to be stored with the checkpoint.  *  * @throws Exception Exceptions encountered when calling the hook will cause the checkpoint to abort.  */ @Nullable CompletableFuture<T> triggerCheckpoint(long checkpointId, long timestamp, Executor executor) throws Exception.
true;;2;1;/**  * This method is called by the checkpoint coordinator prior to restoring the state of a checkpoint.  * If the checkpoint did store data from this hook, that data will be passed to this method.  *  * @param checkpointId The ID (logical timestamp) of the restored checkpoint  * @param checkpointData The data originally stored in the checkpoint by this hook, possibly null.  *  * @throws Exception Exceptions thrown while restoring the checkpoint will cause the restore  *                   operation to fail and to possibly fall back to another checkpoint.  */ ;/**  * This method is called by the checkpoint coordinator prior to restoring the state of a checkpoint.  * If the checkpoint did store data from this hook, that data will be passed to this method.  *  * @param checkpointId The ID (logical timestamp) of the restored checkpoint  * @param checkpointData The data originally stored in the checkpoint by this hook, possibly null.  *  * @throws Exception Exceptions thrown while restoring the checkpoint will cause the restore  *                   operation to fail and to possibly fall back to another checkpoint.  */ void restoreCheckpoint(long checkpointId, @Nullable T checkpointData) throws Exception.
true;;0;2;/**  * Creates a the serializer to (de)serializes the data stored by this hook. The serializer  * serializes the result of the Future returned by the {@link #triggerCheckpoint(long, long, Executor)}  * method, and deserializes the data stored in the checkpoint into the object passed to the  * {@link #restoreCheckpoint(long, Object)} method.  *  * <p>If the hook never returns any data to be stored, then this method may return null as the  * serializer.  *  * @return The serializer to (de)serializes the data stored by this hook  */ ;/**  * Creates a the serializer to (de)serializes the data stored by this hook. The serializer  * serializes the result of the Future returned by the {@link #triggerCheckpoint(long, long, Executor)}  * method, and deserializes the data stored in the checkpoint into the object passed to the  * {@link #restoreCheckpoint(long, Object)} method.  *  * <p>If the hook never returns any data to be stored, then this method may return null as the  * serializer.  *  * @return The serializer to (de)serializes the data stored by this hook  */ @Nullable SimpleVersionedSerializer<T> createCheckpointDataSerializer().
true;;0;1;/**  * Instantiates the {@code MasterTriggerRestoreHook}.  */ ;/**  * Instantiates the {@code MasterTriggerRestoreHook}.  */ <V> MasterTriggerRestoreHook<V> create().
