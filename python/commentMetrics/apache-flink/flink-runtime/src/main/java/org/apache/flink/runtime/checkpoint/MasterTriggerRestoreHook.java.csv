# id;timestamp;commentText;codeText;commentWords;codeWords
MasterTriggerRestoreHook -> String getIdentifier()_;1493236605;Gets the identifier of this hook. The identifier is used to identify a specific hook in the_presence of multiple hooks and to give it the correct checkpointed data upon checkpoint restoration.__<p>The identifier should be unique between different hooks of a job, but deterministic/constant_so that upon resuming a savepoint, the hook will get the correct data._For example, if the hook calls into another storage system and persists namespace/schema specific_information, then the name of the storage system, together with the namespace/schema name could_be an appropriate identifier.__<p>When multiple hooks of the same name are created and attached to a job graph, only the first_one is actually used. This can be exploited to deduplicate hooks that would do the same thing.__@return The identifier of the hook.;String getIdentifier()_;gets,the,identifier,of,this,hook,the,identifier,is,used,to,identify,a,specific,hook,in,the,presence,of,multiple,hooks,and,to,give,it,the,correct,checkpointed,data,upon,checkpoint,restoration,p,the,identifier,should,be,unique,between,different,hooks,of,a,job,but,deterministic,constant,so,that,upon,resuming,a,savepoint,the,hook,will,get,the,correct,data,for,example,if,the,hook,calls,into,another,storage,system,and,persists,namespace,schema,specific,information,then,the,name,of,the,storage,system,together,with,the,namespace,schema,name,could,be,an,appropriate,identifier,p,when,multiple,hooks,of,the,same,name,are,created,and,attached,to,a,job,graph,only,the,first,one,is,actually,used,this,can,be,exploited,to,deduplicate,hooks,that,would,do,the,same,thing,return,the,identifier,of,the,hook;string,get,identifier
MasterTriggerRestoreHook -> String getIdentifier()_;1501664690;Gets the identifier of this hook. The identifier is used to identify a specific hook in the_presence of multiple hooks and to give it the correct checkpointed data upon checkpoint restoration.__<p>The identifier should be unique between different hooks of a job, but deterministic/constant_so that upon resuming a savepoint, the hook will get the correct data._For example, if the hook calls into another storage system and persists namespace/schema specific_information, then the name of the storage system, together with the namespace/schema name could_be an appropriate identifier.__<p>When multiple hooks of the same name are created and attached to a job graph, only the first_one is actually used. This can be exploited to deduplicate hooks that would do the same thing.__@return The identifier of the hook.;String getIdentifier()_;gets,the,identifier,of,this,hook,the,identifier,is,used,to,identify,a,specific,hook,in,the,presence,of,multiple,hooks,and,to,give,it,the,correct,checkpointed,data,upon,checkpoint,restoration,p,the,identifier,should,be,unique,between,different,hooks,of,a,job,but,deterministic,constant,so,that,upon,resuming,a,savepoint,the,hook,will,get,the,correct,data,for,example,if,the,hook,calls,into,another,storage,system,and,persists,namespace,schema,specific,information,then,the,name,of,the,storage,system,together,with,the,namespace,schema,name,could,be,an,appropriate,identifier,p,when,multiple,hooks,of,the,same,name,are,created,and,attached,to,a,job,graph,only,the,first,one,is,actually,used,this,can,be,exploited,to,deduplicate,hooks,that,would,do,the,same,thing,return,the,identifier,of,the,hook;string,get,identifier
MasterTriggerRestoreHook -> String getIdentifier()_;1508481109;Gets the identifier of this hook. The identifier is used to identify a specific hook in the_presence of multiple hooks and to give it the correct checkpointed data upon checkpoint restoration.__<p>The identifier should be unique between different hooks of a job, but deterministic/constant_so that upon resuming a savepoint, the hook will get the correct data._For example, if the hook calls into another storage system and persists namespace/schema specific_information, then the name of the storage system, together with the namespace/schema name could_be an appropriate identifier.__<p>When multiple hooks of the same name are created and attached to a job graph, only the first_one is actually used. This can be exploited to deduplicate hooks that would do the same thing.__@return The identifier of the hook.;String getIdentifier()_;gets,the,identifier,of,this,hook,the,identifier,is,used,to,identify,a,specific,hook,in,the,presence,of,multiple,hooks,and,to,give,it,the,correct,checkpointed,data,upon,checkpoint,restoration,p,the,identifier,should,be,unique,between,different,hooks,of,a,job,but,deterministic,constant,so,that,upon,resuming,a,savepoint,the,hook,will,get,the,correct,data,for,example,if,the,hook,calls,into,another,storage,system,and,persists,namespace,schema,specific,information,then,the,name,of,the,storage,system,together,with,the,namespace,schema,name,could,be,an,appropriate,identifier,p,when,multiple,hooks,of,the,same,name,are,created,and,attached,to,a,job,graph,only,the,first,one,is,actually,used,this,can,be,exploited,to,deduplicate,hooks,that,would,do,the,same,thing,return,the,identifier,of,the,hook;string,get,identifier
MasterTriggerRestoreHook -> String getIdentifier()_;1525852381;Gets the identifier of this hook. The identifier is used to identify a specific hook in the_presence of multiple hooks and to give it the correct checkpointed data upon checkpoint restoration.__<p>The identifier should be unique between different hooks of a job, but deterministic/constant_so that upon resuming a savepoint, the hook will get the correct data._For example, if the hook calls into another storage system and persists namespace/schema specific_information, then the name of the storage system, together with the namespace/schema name could_be an appropriate identifier.__<p>When multiple hooks of the same name are created and attached to a job graph, only the first_one is actually used. This can be exploited to deduplicate hooks that would do the same thing.__@return The identifier of the hook.;String getIdentifier()_;gets,the,identifier,of,this,hook,the,identifier,is,used,to,identify,a,specific,hook,in,the,presence,of,multiple,hooks,and,to,give,it,the,correct,checkpointed,data,upon,checkpoint,restoration,p,the,identifier,should,be,unique,between,different,hooks,of,a,job,but,deterministic,constant,so,that,upon,resuming,a,savepoint,the,hook,will,get,the,correct,data,for,example,if,the,hook,calls,into,another,storage,system,and,persists,namespace,schema,specific,information,then,the,name,of,the,storage,system,together,with,the,namespace,schema,name,could,be,an,appropriate,identifier,p,when,multiple,hooks,of,the,same,name,are,created,and,attached,to,a,job,graph,only,the,first,one,is,actually,used,this,can,be,exploited,to,deduplicate,hooks,that,would,do,the,same,thing,return,the,identifier,of,the,hook;string,get,identifier
MasterTriggerRestoreHook -> void restoreCheckpoint(long checkpointId, @Nullable T checkpointData) throws Exception_;1493236605;This method is called by the checkpoint coordinator prior to restoring the state of a checkpoint._If the checkpoint did store data from this hook, that data will be passed to this method.__@param checkpointId The The ID (logical timestamp) of the restored checkpoint_@param checkpointData The data originally stored in the checkpoint by this hook, possibly null.__@throws Exception Exceptions thrown while restoring the checkpoint will cause the restore_operation to fail and to possibly fall back to another checkpoint.;void restoreCheckpoint(long checkpointId, @Nullable T checkpointData) throws Exception_;this,method,is,called,by,the,checkpoint,coordinator,prior,to,restoring,the,state,of,a,checkpoint,if,the,checkpoint,did,store,data,from,this,hook,that,data,will,be,passed,to,this,method,param,checkpoint,id,the,the,id,logical,timestamp,of,the,restored,checkpoint,param,checkpoint,data,the,data,originally,stored,in,the,checkpoint,by,this,hook,possibly,null,throws,exception,exceptions,thrown,while,restoring,the,checkpoint,will,cause,the,restore,operation,to,fail,and,to,possibly,fall,back,to,another,checkpoint;void,restore,checkpoint,long,checkpoint,id,nullable,t,checkpoint,data,throws,exception
MasterTriggerRestoreHook -> void restoreCheckpoint(long checkpointId, @Nullable T checkpointData) throws Exception_;1501664690;This method is called by the checkpoint coordinator prior to restoring the state of a checkpoint._If the checkpoint did store data from this hook, that data will be passed to this method.__@param checkpointId The The ID (logical timestamp) of the restored checkpoint_@param checkpointData The data originally stored in the checkpoint by this hook, possibly null.__@throws Exception Exceptions thrown while restoring the checkpoint will cause the restore_operation to fail and to possibly fall back to another checkpoint.;void restoreCheckpoint(long checkpointId, @Nullable T checkpointData) throws Exception_;this,method,is,called,by,the,checkpoint,coordinator,prior,to,restoring,the,state,of,a,checkpoint,if,the,checkpoint,did,store,data,from,this,hook,that,data,will,be,passed,to,this,method,param,checkpoint,id,the,the,id,logical,timestamp,of,the,restored,checkpoint,param,checkpoint,data,the,data,originally,stored,in,the,checkpoint,by,this,hook,possibly,null,throws,exception,exceptions,thrown,while,restoring,the,checkpoint,will,cause,the,restore,operation,to,fail,and,to,possibly,fall,back,to,another,checkpoint;void,restore,checkpoint,long,checkpoint,id,nullable,t,checkpoint,data,throws,exception
MasterTriggerRestoreHook -> void restoreCheckpoint(long checkpointId, @Nullable T checkpointData) throws Exception_;1508481109;This method is called by the checkpoint coordinator prior to restoring the state of a checkpoint._If the checkpoint did store data from this hook, that data will be passed to this method.__@param checkpointId The ID (logical timestamp) of the restored checkpoint_@param checkpointData The data originally stored in the checkpoint by this hook, possibly null.__@throws Exception Exceptions thrown while restoring the checkpoint will cause the restore_operation to fail and to possibly fall back to another checkpoint.;void restoreCheckpoint(long checkpointId, @Nullable T checkpointData) throws Exception_;this,method,is,called,by,the,checkpoint,coordinator,prior,to,restoring,the,state,of,a,checkpoint,if,the,checkpoint,did,store,data,from,this,hook,that,data,will,be,passed,to,this,method,param,checkpoint,id,the,id,logical,timestamp,of,the,restored,checkpoint,param,checkpoint,data,the,data,originally,stored,in,the,checkpoint,by,this,hook,possibly,null,throws,exception,exceptions,thrown,while,restoring,the,checkpoint,will,cause,the,restore,operation,to,fail,and,to,possibly,fall,back,to,another,checkpoint;void,restore,checkpoint,long,checkpoint,id,nullable,t,checkpoint,data,throws,exception
MasterTriggerRestoreHook -> void restoreCheckpoint(long checkpointId, @Nullable T checkpointData) throws Exception_;1525852381;This method is called by the checkpoint coordinator prior to restoring the state of a checkpoint._If the checkpoint did store data from this hook, that data will be passed to this method.__@param checkpointId The ID (logical timestamp) of the restored checkpoint_@param checkpointData The data originally stored in the checkpoint by this hook, possibly null.__@throws Exception Exceptions thrown while restoring the checkpoint will cause the restore_operation to fail and to possibly fall back to another checkpoint.;void restoreCheckpoint(long checkpointId, @Nullable T checkpointData) throws Exception_;this,method,is,called,by,the,checkpoint,coordinator,prior,to,restoring,the,state,of,a,checkpoint,if,the,checkpoint,did,store,data,from,this,hook,that,data,will,be,passed,to,this,method,param,checkpoint,id,the,id,logical,timestamp,of,the,restored,checkpoint,param,checkpoint,data,the,data,originally,stored,in,the,checkpoint,by,this,hook,possibly,null,throws,exception,exceptions,thrown,while,restoring,the,checkpoint,will,cause,the,restore,operation,to,fail,and,to,possibly,fall,back,to,another,checkpoint;void,restore,checkpoint,long,checkpoint,id,nullable,t,checkpoint,data,throws,exception
MasterTriggerRestoreHook -> Factory -> <V> MasterTriggerRestoreHook<V> create()_;1493236605;Instantiates the {@code MasterTriggerRestoreHook}.;<V> MasterTriggerRestoreHook<V> create()_;instantiates,the,code,master,trigger,restore,hook;v,master,trigger,restore,hook,v,create
MasterTriggerRestoreHook -> Factory -> <V> MasterTriggerRestoreHook<V> create()_;1501664690;Instantiates the {@code MasterTriggerRestoreHook}.;<V> MasterTriggerRestoreHook<V> create()_;instantiates,the,code,master,trigger,restore,hook;v,master,trigger,restore,hook,v,create
MasterTriggerRestoreHook -> Factory -> <V> MasterTriggerRestoreHook<V> create()_;1508481109;Instantiates the {@code MasterTriggerRestoreHook}.;<V> MasterTriggerRestoreHook<V> create()_;instantiates,the,code,master,trigger,restore,hook;v,master,trigger,restore,hook,v,create
MasterTriggerRestoreHook -> Factory -> <V> MasterTriggerRestoreHook<V> create()_;1525852381;Instantiates the {@code MasterTriggerRestoreHook}.;<V> MasterTriggerRestoreHook<V> create()_;instantiates,the,code,master,trigger,restore,hook;v,master,trigger,restore,hook,v,create
MasterTriggerRestoreHook -> @Nullable 	SimpleVersionedSerializer<T> createCheckpointDataSerializer()_;1493236605;Creates a the serializer to (de)serializes the data stored by this hook. The serializer_serializes the result of the Future returned by the {@link #triggerCheckpoint(long, long, Executor)}_method, and deserializes the data stored in the checkpoint into the object passed to the_{@link #restoreCheckpoint(long, Object)} method.__<p>If the hook never returns any data to be stored, then this method may return null as the_serializer.__@return The serializer to (de)serializes the data stored by this hook;@Nullable_	SimpleVersionedSerializer<T> createCheckpointDataSerializer()_;creates,a,the,serializer,to,de,serializes,the,data,stored,by,this,hook,the,serializer,serializes,the,result,of,the,future,returned,by,the,link,trigger,checkpoint,long,long,executor,method,and,deserializes,the,data,stored,in,the,checkpoint,into,the,object,passed,to,the,link,restore,checkpoint,long,object,method,p,if,the,hook,never,returns,any,data,to,be,stored,then,this,method,may,return,null,as,the,serializer,return,the,serializer,to,de,serializes,the,data,stored,by,this,hook;nullable,simple,versioned,serializer,t,create,checkpoint,data,serializer
MasterTriggerRestoreHook -> @Nullable 	SimpleVersionedSerializer<T> createCheckpointDataSerializer()_;1501664690;Creates a the serializer to (de)serializes the data stored by this hook. The serializer_serializes the result of the Future returned by the {@link #triggerCheckpoint(long, long, Executor)}_method, and deserializes the data stored in the checkpoint into the object passed to the_{@link #restoreCheckpoint(long, Object)} method.__<p>If the hook never returns any data to be stored, then this method may return null as the_serializer.__@return The serializer to (de)serializes the data stored by this hook;@Nullable_	SimpleVersionedSerializer<T> createCheckpointDataSerializer()_;creates,a,the,serializer,to,de,serializes,the,data,stored,by,this,hook,the,serializer,serializes,the,result,of,the,future,returned,by,the,link,trigger,checkpoint,long,long,executor,method,and,deserializes,the,data,stored,in,the,checkpoint,into,the,object,passed,to,the,link,restore,checkpoint,long,object,method,p,if,the,hook,never,returns,any,data,to,be,stored,then,this,method,may,return,null,as,the,serializer,return,the,serializer,to,de,serializes,the,data,stored,by,this,hook;nullable,simple,versioned,serializer,t,create,checkpoint,data,serializer
MasterTriggerRestoreHook -> @Nullable 	SimpleVersionedSerializer<T> createCheckpointDataSerializer()_;1508481109;Creates a the serializer to (de)serializes the data stored by this hook. The serializer_serializes the result of the Future returned by the {@link #triggerCheckpoint(long, long, Executor)}_method, and deserializes the data stored in the checkpoint into the object passed to the_{@link #restoreCheckpoint(long, Object)} method.__<p>If the hook never returns any data to be stored, then this method may return null as the_serializer.__@return The serializer to (de)serializes the data stored by this hook;@Nullable_	SimpleVersionedSerializer<T> createCheckpointDataSerializer()_;creates,a,the,serializer,to,de,serializes,the,data,stored,by,this,hook,the,serializer,serializes,the,result,of,the,future,returned,by,the,link,trigger,checkpoint,long,long,executor,method,and,deserializes,the,data,stored,in,the,checkpoint,into,the,object,passed,to,the,link,restore,checkpoint,long,object,method,p,if,the,hook,never,returns,any,data,to,be,stored,then,this,method,may,return,null,as,the,serializer,return,the,serializer,to,de,serializes,the,data,stored,by,this,hook;nullable,simple,versioned,serializer,t,create,checkpoint,data,serializer
MasterTriggerRestoreHook -> @Nullable 	SimpleVersionedSerializer<T> createCheckpointDataSerializer()_;1525852381;Creates a the serializer to (de)serializes the data stored by this hook. The serializer_serializes the result of the Future returned by the {@link #triggerCheckpoint(long, long, Executor)}_method, and deserializes the data stored in the checkpoint into the object passed to the_{@link #restoreCheckpoint(long, Object)} method.__<p>If the hook never returns any data to be stored, then this method may return null as the_serializer.__@return The serializer to (de)serializes the data stored by this hook;@Nullable_	SimpleVersionedSerializer<T> createCheckpointDataSerializer()_;creates,a,the,serializer,to,de,serializes,the,data,stored,by,this,hook,the,serializer,serializes,the,result,of,the,future,returned,by,the,link,trigger,checkpoint,long,long,executor,method,and,deserializes,the,data,stored,in,the,checkpoint,into,the,object,passed,to,the,link,restore,checkpoint,long,object,method,p,if,the,hook,never,returns,any,data,to,be,stored,then,this,method,may,return,null,as,the,serializer,return,the,serializer,to,de,serializes,the,data,stored,by,this,hook;nullable,simple,versioned,serializer,t,create,checkpoint,data,serializer
MasterTriggerRestoreHook -> @Nullable 	CompletableFuture<T> triggerCheckpoint(long checkpointId, long timestamp, Executor executor) throws Exception_;1501664690;This method is called by the checkpoint coordinator prior when triggering a checkpoint, prior_to sending the "trigger checkpoint" messages to the source tasks.__<p>If the hook implementation wants to store data as part of the checkpoint, it may return_that data via a future, otherwise it should return null. The data is stored as part of_the checkpoint metadata under the hooks identifier (see {@link #getIdentifier()}).__<p>If the action by this hook needs to be executed synchronously, then this method should_directly execute the action synchronously and block until it is complete. The returned future_(if any) would typically be a completed future.__<p>If the action should be executed asynchronously and only needs to complete before the_checkpoint is considered completed, then the method may use the given executor to execute the_actual action and would signal its completion by completing the future. For hooks that do not_need to store data, the future would be completed with null.__@param checkpointId The ID (logical timestamp, monotonously increasing) of the checkpoint_@param timestamp The wall clock timestamp when the checkpoint was triggered, for_info/logging purposes._@param executor The executor for asynchronous actions__@return Optionally, a future that signals when the hook has completed and that contains_data to be stored with the checkpoint.__@throws Exception Exceptions encountered when calling the hook will cause the checkpoint to abort.;@Nullable_	CompletableFuture<T> triggerCheckpoint(long checkpointId, long timestamp, Executor executor) throws Exception_;this,method,is,called,by,the,checkpoint,coordinator,prior,when,triggering,a,checkpoint,prior,to,sending,the,trigger,checkpoint,messages,to,the,source,tasks,p,if,the,hook,implementation,wants,to,store,data,as,part,of,the,checkpoint,it,may,return,that,data,via,a,future,otherwise,it,should,return,null,the,data,is,stored,as,part,of,the,checkpoint,metadata,under,the,hooks,identifier,see,link,get,identifier,p,if,the,action,by,this,hook,needs,to,be,executed,synchronously,then,this,method,should,directly,execute,the,action,synchronously,and,block,until,it,is,complete,the,returned,future,if,any,would,typically,be,a,completed,future,p,if,the,action,should,be,executed,asynchronously,and,only,needs,to,complete,before,the,checkpoint,is,considered,completed,then,the,method,may,use,the,given,executor,to,execute,the,actual,action,and,would,signal,its,completion,by,completing,the,future,for,hooks,that,do,not,need,to,store,data,the,future,would,be,completed,with,null,param,checkpoint,id,the,id,logical,timestamp,monotonously,increasing,of,the,checkpoint,param,timestamp,the,wall,clock,timestamp,when,the,checkpoint,was,triggered,for,info,logging,purposes,param,executor,the,executor,for,asynchronous,actions,return,optionally,a,future,that,signals,when,the,hook,has,completed,and,that,contains,data,to,be,stored,with,the,checkpoint,throws,exception,exceptions,encountered,when,calling,the,hook,will,cause,the,checkpoint,to,abort;nullable,completable,future,t,trigger,checkpoint,long,checkpoint,id,long,timestamp,executor,executor,throws,exception
MasterTriggerRestoreHook -> @Nullable 	CompletableFuture<T> triggerCheckpoint(long checkpointId, long timestamp, Executor executor) throws Exception_;1508481109;This method is called by the checkpoint coordinator prior when triggering a checkpoint, prior_to sending the "trigger checkpoint" messages to the source tasks.__<p>If the hook implementation wants to store data as part of the checkpoint, it may return_that data via a future, otherwise it should return null. The data is stored as part of_the checkpoint metadata under the hooks identifier (see {@link #getIdentifier()}).__<p>If the action by this hook needs to be executed synchronously, then this method should_directly execute the action synchronously and block until it is complete. The returned future_(if any) would typically be a completed future.__<p>If the action should be executed asynchronously and only needs to complete before the_checkpoint is considered completed, then the method may use the given executor to execute the_actual action and would signal its completion by completing the future. For hooks that do not_need to store data, the future would be completed with null.__@param checkpointId The ID (logical timestamp, monotonously increasing) of the checkpoint_@param timestamp The wall clock timestamp when the checkpoint was triggered, for_info/logging purposes._@param executor The executor for asynchronous actions__@return Optionally, a future that signals when the hook has completed and that contains_data to be stored with the checkpoint.__@throws Exception Exceptions encountered when calling the hook will cause the checkpoint to abort.;@Nullable_	CompletableFuture<T> triggerCheckpoint(long checkpointId, long timestamp, Executor executor) throws Exception_;this,method,is,called,by,the,checkpoint,coordinator,prior,when,triggering,a,checkpoint,prior,to,sending,the,trigger,checkpoint,messages,to,the,source,tasks,p,if,the,hook,implementation,wants,to,store,data,as,part,of,the,checkpoint,it,may,return,that,data,via,a,future,otherwise,it,should,return,null,the,data,is,stored,as,part,of,the,checkpoint,metadata,under,the,hooks,identifier,see,link,get,identifier,p,if,the,action,by,this,hook,needs,to,be,executed,synchronously,then,this,method,should,directly,execute,the,action,synchronously,and,block,until,it,is,complete,the,returned,future,if,any,would,typically,be,a,completed,future,p,if,the,action,should,be,executed,asynchronously,and,only,needs,to,complete,before,the,checkpoint,is,considered,completed,then,the,method,may,use,the,given,executor,to,execute,the,actual,action,and,would,signal,its,completion,by,completing,the,future,for,hooks,that,do,not,need,to,store,data,the,future,would,be,completed,with,null,param,checkpoint,id,the,id,logical,timestamp,monotonously,increasing,of,the,checkpoint,param,timestamp,the,wall,clock,timestamp,when,the,checkpoint,was,triggered,for,info,logging,purposes,param,executor,the,executor,for,asynchronous,actions,return,optionally,a,future,that,signals,when,the,hook,has,completed,and,that,contains,data,to,be,stored,with,the,checkpoint,throws,exception,exceptions,encountered,when,calling,the,hook,will,cause,the,checkpoint,to,abort;nullable,completable,future,t,trigger,checkpoint,long,checkpoint,id,long,timestamp,executor,executor,throws,exception
MasterTriggerRestoreHook -> @Nullable 	CompletableFuture<T> triggerCheckpoint(long checkpointId, long timestamp, Executor executor) throws Exception_;1525852381;This method is called by the checkpoint coordinator prior when triggering a checkpoint, prior_to sending the "trigger checkpoint" messages to the source tasks.__<p>If the hook implementation wants to store data as part of the checkpoint, it may return_that data via a future, otherwise it should return null. The data is stored as part of_the checkpoint metadata under the hooks identifier (see {@link #getIdentifier()}).__<p>If the action by this hook needs to be executed synchronously, then this method should_directly execute the action synchronously and block until it is complete. The returned future_(if any) would typically be a completed future.__<p>If the action should be executed asynchronously and only needs to complete before the_checkpoint is considered completed, then the method may use the given executor to execute the_actual action and would signal its completion by completing the future. For hooks that do not_need to store data, the future would be completed with null.__@param checkpointId The ID (logical timestamp, monotonously increasing) of the checkpoint_@param timestamp The wall clock timestamp when the checkpoint was triggered, for_info/logging purposes._@param executor The executor for asynchronous actions__@return Optionally, a future that signals when the hook has completed and that contains_data to be stored with the checkpoint.__@throws Exception Exceptions encountered when calling the hook will cause the checkpoint to abort.;@Nullable_	CompletableFuture<T> triggerCheckpoint(long checkpointId, long timestamp, Executor executor) throws Exception_;this,method,is,called,by,the,checkpoint,coordinator,prior,when,triggering,a,checkpoint,prior,to,sending,the,trigger,checkpoint,messages,to,the,source,tasks,p,if,the,hook,implementation,wants,to,store,data,as,part,of,the,checkpoint,it,may,return,that,data,via,a,future,otherwise,it,should,return,null,the,data,is,stored,as,part,of,the,checkpoint,metadata,under,the,hooks,identifier,see,link,get,identifier,p,if,the,action,by,this,hook,needs,to,be,executed,synchronously,then,this,method,should,directly,execute,the,action,synchronously,and,block,until,it,is,complete,the,returned,future,if,any,would,typically,be,a,completed,future,p,if,the,action,should,be,executed,asynchronously,and,only,needs,to,complete,before,the,checkpoint,is,considered,completed,then,the,method,may,use,the,given,executor,to,execute,the,actual,action,and,would,signal,its,completion,by,completing,the,future,for,hooks,that,do,not,need,to,store,data,the,future,would,be,completed,with,null,param,checkpoint,id,the,id,logical,timestamp,monotonously,increasing,of,the,checkpoint,param,timestamp,the,wall,clock,timestamp,when,the,checkpoint,was,triggered,for,info,logging,purposes,param,executor,the,executor,for,asynchronous,actions,return,optionally,a,future,that,signals,when,the,hook,has,completed,and,that,contains,data,to,be,stored,with,the,checkpoint,throws,exception,exceptions,encountered,when,calling,the,hook,will,cause,the,checkpoint,to,abort;nullable,completable,future,t,trigger,checkpoint,long,checkpoint,id,long,timestamp,executor,executor,throws,exception
