commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;6;;@Override protected SubtaskExecutionAttemptAccumulatorsInfo handleRequest(HandlerRequest<EmptyRequestBody, SubtaskAttemptMessageParameters> request, AccessExecution execution) throws RestHandlerException {     return createAccumulatorInfo(execution). }
false;public;1;28;;@Override public Collection<ArchivedJson> archiveJsonWithPath(AccessExecutionGraph graph) throws IOException {     List<ArchivedJson> archive = new ArrayList<>(16).     for (AccessExecutionJobVertex task : graph.getAllVertices().values()) {         for (AccessExecutionVertex subtask : task.getTaskVertices()) {             ResponseBody curAttemptJson = createAccumulatorInfo(subtask.getCurrentExecutionAttempt()).             String curAttemptPath = getMessageHeaders().getTargetRestEndpointURL().replace(':' + JobIDPathParameter.KEY, graph.getJobID().toString()).replace(':' + JobVertexIdPathParameter.KEY, task.getJobVertexId().toString()).replace(':' + SubtaskIndexPathParameter.KEY, String.valueOf(subtask.getParallelSubtaskIndex())).replace(':' + SubtaskAttemptPathParameter.KEY, String.valueOf(subtask.getCurrentExecutionAttempt().getAttemptNumber())).             archive.add(new ArchivedJson(curAttemptPath, curAttemptJson)).             for (int x = 0. x < subtask.getCurrentExecutionAttempt().getAttemptNumber(). x++) {                 AccessExecution attempt = subtask.getPriorExecutionAttempt(x).                 ResponseBody json = createAccumulatorInfo(attempt).                 String path = getMessageHeaders().getTargetRestEndpointURL().replace(':' + JobIDPathParameter.KEY, graph.getJobID().toString()).replace(':' + JobVertexIdPathParameter.KEY, task.getJobVertexId().toString()).replace(':' + SubtaskIndexPathParameter.KEY, String.valueOf(subtask.getParallelSubtaskIndex())).replace(':' + SubtaskAttemptPathParameter.KEY, String.valueOf(attempt.getAttemptNumber())).                 archive.add(new ArchivedJson(path, json)).             }         }     }     return archive. }
false;private,static;1;14;;private static SubtaskExecutionAttemptAccumulatorsInfo createAccumulatorInfo(AccessExecution execution) {     final StringifiedAccumulatorResult[] accs = execution.getUserAccumulatorsStringified().     final ArrayList<UserAccumulator> userAccumulatorList = new ArrayList<>(accs.length).     for (StringifiedAccumulatorResult acc : accs) {         userAccumulatorList.add(new UserAccumulator(acc.getName(), acc.getType(), acc.getValue())).     }     return new SubtaskExecutionAttemptAccumulatorsInfo(execution.getParallelSubtaskIndex(), execution.getAttemptNumber(), execution.getAttemptId().toString(), userAccumulatorList). }
