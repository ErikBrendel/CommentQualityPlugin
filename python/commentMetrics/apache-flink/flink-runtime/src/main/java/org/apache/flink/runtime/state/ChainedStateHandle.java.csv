commented;modifiers;parameterAmount;loc;comment;code
true;public;0;8;/**  * Check if there are any states handles present. Notice that this can be true even if {@link #getLength()} is  * greater than zero, because state handles can be null.  *  * @return true if there are no state handles for any operator.  */ ;/**  * Check if there are any states handles present. Notice that this can be true even if {@link #getLength()} is  * greater than zero, because state handles can be null.  *  * @return true if there are no state handles for any operator.  */ public boolean isEmpty() {     for (T state : operatorStateHandles) {         if (state != null) {             return false.         }     }     return true. }
true;public;0;3;/**  * Returns the length of the operator chain. This can be different from the number of operator state handles,  * because the some operators in the chain can have no state and thus their state handle can be null.  *  * @return length of the operator chain  */ ;/**  * Returns the length of the operator chain. This can be different from the number of operator state handles,  * because the some operators in the chain can have no state and thus their state handle can be null.  *  * @return length of the operator chain  */ public int getLength() {     return operatorStateHandles.size(). }
true;public;1;3;/**  * Get the state handle for a single operator in the operator chain by it's index.  *  * @param index the index in the operator chain  * @return state handle to the operator at the given position in the operator chain. can be null.  */ ;/**  * Get the state handle for a single operator in the operator chain by it's index.  *  * @param index the index in the operator chain  * @return state handle to the operator at the given position in the operator chain. can be null.  */ public T get(int index) {     return operatorStateHandles.get(index). }
false;public;0;4;;@Override public void discardState() throws Exception {     StateUtil.bestEffortDiscardAllStateObjects(operatorStateHandles). }
false;public;0;15;;@Override public long getStateSize() {     long sumStateSize = 0.     if (operatorStateHandles != null) {         for (T state : operatorStateHandles) {             if (state != null) {                 sumStateSize += state.getStateSize().             }         }     }     // State size as sum of all state sizes     return sumStateSize. }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     ChainedStateHandle<?> that = (ChainedStateHandle<?>) o.     return operatorStateHandles.equals(that.operatorStateHandles). }
false;public;0;4;;@Override public int hashCode() {     return operatorStateHandles.hashCode(). }
false;public,static;1;3;;public static <T extends StateObject> ChainedStateHandle<T> wrapSingleHandle(T stateHandleToWrap) {     return new ChainedStateHandle<T>(Collections.singletonList(stateHandleToWrap)). }
false;public,static;1;3;;public static boolean isNullOrEmpty(ChainedStateHandle<?> chainedStateHandle) {     return chainedStateHandle == null || chainedStateHandle.isEmpty(). }
