commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Get the container artifacts.  */ ;/**  * Get the container artifacts.  */ public List<Artifact> getArtifacts() {     return artifacts. }
true;public;0;3;/**  * Get the environment variables.  */ ;/**  * Get the environment variables.  */ public Map<String, String> getEnvironmentVariables() {     return environmentVariables. }
true;public;0;3;/**  * Get the dynamic configuration.  */ ;/**  * Get the dynamic configuration.  */ public Configuration getDynamicConfiguration() {     return dynamicConfiguration. }
true;public;0;3;/**  * Get the system properties.  */ ;/**  * Get the system properties.  */ public Configuration getSystemProperties() {     return systemProperties. }
false;protected;0;9;;@Override protected Object clone() throws CloneNotSupportedException {     ContainerSpecification clone = new ContainerSpecification().     clone.artifacts.addAll(this.artifacts).     clone.environmentVariables.putAll(this.environmentVariables).     clone.systemProperties.addAll(this.systemProperties).     clone.dynamicConfiguration.addAll(this.dynamicConfiguration).     return clone. }
false;public;0;9;;@Override public String toString() {     return "ContainerSpecification{" + "environmentVariables=" + environmentVariables + ", systemProperties=" + systemProperties + ", dynamicConfiguration=" + dynamicConfiguration + ", artifacts=" + artifacts + '}'. }
false;public;0;10;;@Override public String toString() {     return "Artifact{" + "source=" + source + ", dest=" + dest + ", executable=" + executable + ", cachable=" + cachable + ", extract=" + extract + '}'. }
false;public,static;0;1;;public static Builder newBuilder() {     return new Builder(). }
false;public;1;4;;public Builder setSource(Path source) {     this.source = source.     return this. }
false;public;1;4;;public Builder setDest(Path dest) {     this.dest = dest.     return this. }
false;public;1;4;;public Builder setCachable(boolean cachable) {     this.cachable = cachable.     return this. }
false;public;1;4;;public Builder setExtract(boolean extract) {     this.extract = extract.     return this. }
false;public;1;4;;public Builder setExecutable(boolean executable) {     this.executable = executable.     return this. }
false;public;0;3;;public Artifact build() {     return new Artifact(source, dest, executable, cachable, extract). }
true;public,static;1;17;/**  * Format the system properties as a shell-compatible command-line argument.  */ ;/**  * Format the system properties as a shell-compatible command-line argument.  */ public static String formatSystemProperties(Configuration jvmArgs) {     StringBuilder sb = new StringBuilder().     for (Map.Entry<String, String> entry : jvmArgs.toMap().entrySet()) {         if (sb.length() > 0) {             sb.append(" ").         }         boolean quoted = entry.getValue().contains(" ").         if (quoted) {             sb.append("\"").         }         sb.append("-D").append(entry.getKey()).append('=').append(entry.getValue()).         if (quoted) {             sb.append("\"").         }     }     return sb.toString(). }
