# id;timestamp;commentText;codeText;commentWords;codeWords
MessageParameters -> public abstract Collection<MessageQueryParameter<?>> getQueryParameters()_;1503738660;Returns the collection of {@link MessageQueryParameter} that the request supports. The collection should not be_modifiable.__@return collection of all supported message query parameters;public abstract Collection<MessageQueryParameter<?>> getQueryParameters()_;returns,the,collection,of,link,message,query,parameter,that,the,request,supports,the,collection,should,not,be,modifiable,return,collection,of,all,supported,message,query,parameters;public,abstract,collection,message,query,parameter,get,query,parameters
MessageParameters -> public abstract Collection<MessageQueryParameter<?>> getQueryParameters()_;1507647392;Returns the collection of {@link MessageQueryParameter} that the request supports. The collection should not be_modifiable.__@return collection of all supported message query parameters;public abstract Collection<MessageQueryParameter<?>> getQueryParameters()_;returns,the,collection,of,link,message,query,parameter,that,the,request,supports,the,collection,should,not,be,modifiable,return,collection,of,all,supported,message,query,parameters;public,abstract,collection,message,query,parameter,get,query,parameters
MessageParameters -> public static String resolveUrl(String genericUrl, MessageParameters parameters);1503738659;Resolves the given URL (e.g "jobs/:jobid") using the given path/query parameters.__<p>This method will fail with an {@link IllegalStateException} if any mandatory parameter was not resolved.__<p>Unresolved optional parameters will be ignored.__@param genericUrl URL to resolve_@param parameters message parameters parameters_@return resolved url, e.g "/jobs/1234?state=running"_@throws IllegalStateException if any mandatory parameter was not resolved;public static String resolveUrl(String genericUrl, MessageParameters parameters) {_		Preconditions.checkState(parameters.isResolved(), "Not all mandatory message parameters were resolved.")__		StringBuilder path = new StringBuilder(genericUrl)__		StringBuilder queryParameters = new StringBuilder()___		for (MessageParameter pathParameter : parameters.getPathParameters()) {_			if (pathParameter.isResolved()) {_				int start = path.indexOf(":" + pathParameter.getKey())__				path.replace(start, start + pathParameter.getKey().length() + 1, pathParameter.getValueAsString())__			}_		}_		boolean isFirstQueryParameter = true__		for (MessageQueryParameter queryParameter : parameters.getQueryParameters()) {_			if (parameters.isResolved()) {_				if (isFirstQueryParameter) {_					queryParameters.append("?")__					isFirstQueryParameter = false__				} else {_					queryParameters.append("&")__				}_				queryParameters.append(queryParameter.getKey())__				queryParameters.append("=")__				queryParameters.append(queryParameter.getValueAsString())__			}_		}_		path.append(queryParameters)___		return path.toString()__	};resolves,the,given,url,e,g,jobs,jobid,using,the,given,path,query,parameters,p,this,method,will,fail,with,an,link,illegal,state,exception,if,any,mandatory,parameter,was,not,resolved,p,unresolved,optional,parameters,will,be,ignored,param,generic,url,url,to,resolve,param,parameters,message,parameters,parameters,return,resolved,url,e,g,jobs,1234,state,running,throws,illegal,state,exception,if,any,mandatory,parameter,was,not,resolved;public,static,string,resolve,url,string,generic,url,message,parameters,parameters,preconditions,check,state,parameters,is,resolved,not,all,mandatory,message,parameters,were,resolved,string,builder,path,new,string,builder,generic,url,string,builder,query,parameters,new,string,builder,for,message,parameter,path,parameter,parameters,get,path,parameters,if,path,parameter,is,resolved,int,start,path,index,of,path,parameter,get,key,path,replace,start,start,path,parameter,get,key,length,1,path,parameter,get,value,as,string,boolean,is,first,query,parameter,true,for,message,query,parameter,query,parameter,parameters,get,query,parameters,if,parameters,is,resolved,if,is,first,query,parameter,query,parameters,append,is,first,query,parameter,false,else,query,parameters,append,query,parameters,append,query,parameter,get,key,query,parameters,append,query,parameters,append,query,parameter,get,value,as,string,path,append,query,parameters,return,path,to,string
MessageParameters -> public static String resolveUrl(String genericUrl, MessageParameters parameters);1503738660;Resolves the given URL (e.g "jobs/:jobid") using the given path/query parameters.__<p>This method will fail with an {@link IllegalStateException} if any mandatory parameter was not resolved.__<p>Unresolved optional parameters will be ignored.__@param genericUrl URL to resolve_@param parameters message parameters parameters_@return resolved url, e.g "/jobs/1234?state=running"_@throws IllegalStateException if any mandatory parameter was not resolved;public static String resolveUrl(String genericUrl, MessageParameters parameters) {_		Preconditions.checkState(parameters.isResolved(), "Not all mandatory message parameters were resolved.")__		StringBuilder path = new StringBuilder(genericUrl)__		StringBuilder queryParameters = new StringBuilder()___		for (MessageParameter<?> pathParameter : parameters.getPathParameters()) {_			if (pathParameter.isResolved()) {_				int start = path.indexOf(':' + pathParameter.getKey())___				final String pathValue = Preconditions.checkNotNull(pathParameter.getValueAsString())___				_				if (start != -1) {_					path.replace(start, start + pathParameter.getKey().length() + 1, pathValue)__				}_			}_		}_		boolean isFirstQueryParameter = true__		for (MessageQueryParameter<?> queryParameter : parameters.getQueryParameters()) {_			if (parameters.isResolved()) {_				if (isFirstQueryParameter) {_					queryParameters.append('?')__					isFirstQueryParameter = false__				} else {_					queryParameters.append('&')__				}_				queryParameters.append(queryParameter.getKey())__				queryParameters.append('=')__				queryParameters.append(queryParameter.getValueAsString())__			}_		}_		path.append(queryParameters)___		return path.toString()__	};resolves,the,given,url,e,g,jobs,jobid,using,the,given,path,query,parameters,p,this,method,will,fail,with,an,link,illegal,state,exception,if,any,mandatory,parameter,was,not,resolved,p,unresolved,optional,parameters,will,be,ignored,param,generic,url,url,to,resolve,param,parameters,message,parameters,parameters,return,resolved,url,e,g,jobs,1234,state,running,throws,illegal,state,exception,if,any,mandatory,parameter,was,not,resolved;public,static,string,resolve,url,string,generic,url,message,parameters,parameters,preconditions,check,state,parameters,is,resolved,not,all,mandatory,message,parameters,were,resolved,string,builder,path,new,string,builder,generic,url,string,builder,query,parameters,new,string,builder,for,message,parameter,path,parameter,parameters,get,path,parameters,if,path,parameter,is,resolved,int,start,path,index,of,path,parameter,get,key,final,string,path,value,preconditions,check,not,null,path,parameter,get,value,as,string,if,start,1,path,replace,start,start,path,parameter,get,key,length,1,path,value,boolean,is,first,query,parameter,true,for,message,query,parameter,query,parameter,parameters,get,query,parameters,if,parameters,is,resolved,if,is,first,query,parameter,query,parameters,append,is,first,query,parameter,false,else,query,parameters,append,query,parameters,append,query,parameter,get,key,query,parameters,append,query,parameters,append,query,parameter,get,value,as,string,path,append,query,parameters,return,path,to,string
MessageParameters -> public static String resolveUrl(String genericUrl, MessageParameters parameters);1507647392;Resolves the given URL (e.g "jobs/:jobid") using the given path/query parameters.__<p>This method will fail with an {@link IllegalStateException} if any mandatory parameter was not resolved.__<p>Unresolved optional parameters will be ignored.__@param genericUrl URL to resolve_@param parameters message parameters parameters_@return resolved url, e.g "/jobs/1234?state=running"_@throws IllegalStateException if any mandatory parameter was not resolved;public static String resolveUrl(String genericUrl, MessageParameters parameters) {_		Preconditions.checkState(parameters.isResolved(), "Not all mandatory message parameters were resolved.")__		StringBuilder path = new StringBuilder(genericUrl)__		StringBuilder queryParameters = new StringBuilder()___		for (MessageParameter<?> pathParameter : parameters.getPathParameters()) {_			if (pathParameter.isResolved()) {_				int start = path.indexOf(':' + pathParameter.getKey())___				final String pathValue = Preconditions.checkNotNull(pathParameter.getValueAsString())___				_				if (start != -1) {_					path.replace(start, start + pathParameter.getKey().length() + 1, pathValue)__				}_			}_		}_		boolean isFirstQueryParameter = true__		for (MessageQueryParameter<?> queryParameter : parameters.getQueryParameters()) {_			if (queryParameter.isResolved()) {_				if (isFirstQueryParameter) {_					queryParameters.append('?')__					isFirstQueryParameter = false__				} else {_					queryParameters.append('&')__				}_				queryParameters.append(queryParameter.getKey())__				queryParameters.append('=')__				queryParameters.append(queryParameter.getValueAsString())__			}_		}_		path.append(queryParameters)___		return path.toString()__	};resolves,the,given,url,e,g,jobs,jobid,using,the,given,path,query,parameters,p,this,method,will,fail,with,an,link,illegal,state,exception,if,any,mandatory,parameter,was,not,resolved,p,unresolved,optional,parameters,will,be,ignored,param,generic,url,url,to,resolve,param,parameters,message,parameters,parameters,return,resolved,url,e,g,jobs,1234,state,running,throws,illegal,state,exception,if,any,mandatory,parameter,was,not,resolved;public,static,string,resolve,url,string,generic,url,message,parameters,parameters,preconditions,check,state,parameters,is,resolved,not,all,mandatory,message,parameters,were,resolved,string,builder,path,new,string,builder,generic,url,string,builder,query,parameters,new,string,builder,for,message,parameter,path,parameter,parameters,get,path,parameters,if,path,parameter,is,resolved,int,start,path,index,of,path,parameter,get,key,final,string,path,value,preconditions,check,not,null,path,parameter,get,value,as,string,if,start,1,path,replace,start,start,path,parameter,get,key,length,1,path,value,boolean,is,first,query,parameter,true,for,message,query,parameter,query,parameter,parameters,get,query,parameters,if,query,parameter,is,resolved,if,is,first,query,parameter,query,parameters,append,is,first,query,parameter,false,else,query,parameters,append,query,parameters,append,query,parameter,get,key,query,parameters,append,query,parameters,append,query,parameter,get,value,as,string,path,append,query,parameters,return,path,to,string
MessageParameters -> public abstract Collection<MessagePathParameter<?>> getPathParameters()_;1503738660;Returns the collection of {@link MessagePathParameter} that the request supports. The collection should not be_modifiable.__@return collection of all supported message path parameters;public abstract Collection<MessagePathParameter<?>> getPathParameters()_;returns,the,collection,of,link,message,path,parameter,that,the,request,supports,the,collection,should,not,be,modifiable,return,collection,of,all,supported,message,path,parameters;public,abstract,collection,message,path,parameter,get,path,parameters
MessageParameters -> public abstract Collection<MessagePathParameter<?>> getPathParameters()_;1507647392;Returns the collection of {@link MessagePathParameter} that the request supports. The collection should not be_modifiable.__@return collection of all supported message path parameters;public abstract Collection<MessagePathParameter<?>> getPathParameters()_;returns,the,collection,of,link,message,path,parameter,that,the,request,supports,the,collection,should,not,be,modifiable,return,collection,of,all,supported,message,path,parameters;public,abstract,collection,message,path,parameter,get,path,parameters
MessageParameters -> public final boolean isResolved();1503738659;Returns whether all mandatory parameters have been resolved.__@return true, if all mandatory parameters have been resolved, false otherwise;public final boolean isResolved() {_		return getPathParameters().stream().allMatch(parameter -> parameter.isMandatory() && parameter.isResolved())_			&& getQueryParameters().stream().allMatch(parameter -> parameter.isMandatory() && parameter.isResolved())__	};returns,whether,all,mandatory,parameters,have,been,resolved,return,true,if,all,mandatory,parameters,have,been,resolved,false,otherwise;public,final,boolean,is,resolved,return,get,path,parameters,stream,all,match,parameter,parameter,is,mandatory,parameter,is,resolved,get,query,parameters,stream,all,match,parameter,parameter,is,mandatory,parameter,is,resolved
MessageParameters -> public final boolean isResolved();1503738660;Returns whether all mandatory parameters have been resolved.__@return true, if all mandatory parameters have been resolved, false otherwise;public final boolean isResolved() {_		return getPathParameters().stream().filter(MessageParameter::isMandatory).allMatch(MessageParameter::isResolved)_			&& getQueryParameters().stream().filter(MessageParameter::isMandatory).allMatch(MessageParameter::isResolved)__	};returns,whether,all,mandatory,parameters,have,been,resolved,return,true,if,all,mandatory,parameters,have,been,resolved,false,otherwise;public,final,boolean,is,resolved,return,get,path,parameters,stream,filter,message,parameter,is,mandatory,all,match,message,parameter,is,resolved,get,query,parameters,stream,filter,message,parameter,is,mandatory,all,match,message,parameter,is,resolved
MessageParameters -> public final boolean isResolved();1507647392;Returns whether all mandatory parameters have been resolved.__@return true, if all mandatory parameters have been resolved, false otherwise;public final boolean isResolved() {_		return getPathParameters().stream().filter(MessageParameter::isMandatory).allMatch(MessageParameter::isResolved)_			&& getQueryParameters().stream().filter(MessageParameter::isMandatory).allMatch(MessageParameter::isResolved)__	};returns,whether,all,mandatory,parameters,have,been,resolved,return,true,if,all,mandatory,parameters,have,been,resolved,false,otherwise;public,final,boolean,is,resolved,return,get,path,parameters,stream,filter,message,parameter,is,mandatory,all,match,message,parameter,is,resolved,get,query,parameters,stream,filter,message,parameter,is,mandatory,all,match,message,parameter,is,resolved
