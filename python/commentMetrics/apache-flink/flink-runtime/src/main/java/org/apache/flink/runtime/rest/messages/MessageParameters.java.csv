commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;0;1;/**  * Returns the collection of {@link MessagePathParameter} that the request supports. The collection should not be  * modifiable.  *  * @return collection of all supported message path parameters  */ ;/**  * Returns the collection of {@link MessagePathParameter} that the request supports. The collection should not be  * modifiable.  *  * @return collection of all supported message path parameters  */ public abstract Collection<MessagePathParameter<?>> getPathParameters().
true;public,abstract;0;1;/**  * Returns the collection of {@link MessageQueryParameter} that the request supports. The collection should not be  * modifiable.  *  * @return collection of all supported message query parameters  */ ;/**  * Returns the collection of {@link MessageQueryParameter} that the request supports. The collection should not be  * modifiable.  *  * @return collection of all supported message query parameters  */ public abstract Collection<MessageQueryParameter<?>> getQueryParameters().
true;public,final;0;4;/**  * Returns whether all mandatory parameters have been resolved.  *  * @return true, if all mandatory parameters have been resolved, false otherwise  */ ;/**  * Returns whether all mandatory parameters have been resolved.  *  * @return true, if all mandatory parameters have been resolved, false otherwise  */ public final boolean isResolved() {     return getPathParameters().stream().filter(MessageParameter::isMandatory).allMatch(MessageParameter::isResolved) && getQueryParameters().stream().filter(MessageParameter::isMandatory).allMatch(MessageParameter::isResolved). }
true;public,static;2;35;/**  * Resolves the given URL (e.g "jobs/:jobid") using the given path/query parameters.  *  * <p>This method will fail with an {@link IllegalStateException} if any mandatory parameter was not resolved.  *  * <p>Unresolved optional parameters will be ignored.  *  * @param genericUrl URL to resolve  * @param parameters message parameters parameters  * @return resolved url, e.g "/jobs/1234?state=running"  * @throws IllegalStateException if any mandatory parameter was not resolved  */ ;/**  * Resolves the given URL (e.g "jobs/:jobid") using the given path/query parameters.  *  * <p>This method will fail with an {@link IllegalStateException} if any mandatory parameter was not resolved.  *  * <p>Unresolved optional parameters will be ignored.  *  * @param genericUrl URL to resolve  * @param parameters message parameters parameters  * @return resolved url, e.g "/jobs/1234?state=running"  * @throws IllegalStateException if any mandatory parameter was not resolved  */ public static String resolveUrl(String genericUrl, MessageParameters parameters) {     Preconditions.checkState(parameters.isResolved(), "Not all mandatory message parameters were resolved.").     StringBuilder path = new StringBuilder(genericUrl).     StringBuilder queryParameters = new StringBuilder().     for (MessageParameter<?> pathParameter : parameters.getPathParameters()) {         if (pathParameter.isResolved()) {             int start = path.indexOf(':' + pathParameter.getKey()).             final String pathValue = Preconditions.checkNotNull(pathParameter.getValueAsString()).             // only replace path parameters if they are present             if (start != -1) {                 path.replace(start, start + pathParameter.getKey().length() + 1, pathValue).             }         }     }     boolean isFirstQueryParameter = true.     for (MessageQueryParameter<?> queryParameter : parameters.getQueryParameters()) {         if (queryParameter.isResolved()) {             if (isFirstQueryParameter) {                 queryParameters.append('?').                 isFirstQueryParameter = false.             } else {                 queryParameters.append('&').             }             queryParameters.append(queryParameter.getKey()).             queryParameters.append('=').             queryParameters.append(queryParameter.getValueAsString()).         }     }     path.append(queryParameters).     return path.toString(). }
