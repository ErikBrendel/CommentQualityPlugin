commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public void configure(ContainerSpecification container) throws IOException {     container.getEnvironmentVariables().put(ENV_FLINK_HOME_DIR, TARGET_ROOT.toString()).     // add the paths to the container specification.     addPathRecursively(flinkBinPath, TARGET_ROOT, container).     addPathRecursively(flinkConfPath, TARGET_ROOT, container).     addPathRecursively(flinkLibPath, TARGET_ROOT, container). }
false;public,static;0;3;;public static Builder newBuilder() {     return new Builder(). }
true;public;1;26;/**  * Configures the overlay using the current environment.  *  * Locates Flink using FLINK_???_DIR environment variables as provided to all Flink processes by config.sh.  *  * @param globalConfiguration the current configuration.  */ ;/**  * Configures the overlay using the current environment.  *  * Locates Flink using FLINK_???_DIR environment variables as provided to all Flink processes by config.sh.  *  * @param globalConfiguration the current configuration.  */ public Builder fromEnvironment(Configuration globalConfiguration) {     Map<String, String> env = System.getenv().     if (env.containsKey(ENV_FLINK_BIN_DIR)) {         flinkBinPath = new File(System.getenv(ENV_FLINK_BIN_DIR)).     } else {         throw new IllegalStateException(String.format("the %s environment variable must be set", ENV_FLINK_BIN_DIR)).     }     if (env.containsKey(ENV_FLINK_CONF_DIR)) {         flinkConfPath = new File(System.getenv(ENV_FLINK_CONF_DIR)).     } else {         throw new IllegalStateException(String.format("the %s environment variable must be set", ENV_FLINK_CONF_DIR)).     }     if (env.containsKey(ENV_FLINK_LIB_DIR)) {         flinkLibPath = new File(System.getenv(ENV_FLINK_LIB_DIR)).     } else {         throw new IllegalStateException(String.format("the %s environment variable must be set", ENV_FLINK_LIB_DIR)).     }     return this. }
false;public;0;3;;public FlinkDistributionOverlay build() {     return new FlinkDistributionOverlay(flinkBinPath, flinkConfPath, flinkLibPath). }
