commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;23;;@Override protected CompletableFuture<JobExecutionResultResponseBody> handleRequest(@Nonnull final HandlerRequest<EmptyRequestBody, JobMessageParameters> request, @Nonnull final RestfulGateway gateway) throws RestHandlerException {     final JobID jobId = request.getPathParameter(JobIDPathParameter.class).     final CompletableFuture<JobStatus> jobStatusFuture = gateway.requestJobStatus(jobId, timeout).     return jobStatusFuture.thenCompose(jobStatus -> {         if (jobStatus.isGloballyTerminalState()) {             return gateway.requestJobResult(jobId, timeout).thenApply(JobExecutionResultResponseBody::created).         } else {             return CompletableFuture.completedFuture(JobExecutionResultResponseBody.inProgress()).         }     }).exceptionally(throwable -> {         throw propagateException(throwable).     }). }
false;private,static;1;12;;private static CompletionException propagateException(final Throwable throwable) {     final Throwable cause = ExceptionUtils.stripCompletionException(throwable).     if (cause instanceof FlinkJobNotFoundException) {         throw new CompletionException(new RestHandlerException(throwable.getMessage(), HttpResponseStatus.NOT_FOUND, throwable)).     } else {         throw new CompletionException(throwable).     } }
