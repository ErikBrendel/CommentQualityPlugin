commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public MessageHeaders<R, P, M> getMessageHeaders() {     return messageHeaders. }
false;protected;4;12;;@Override protected CompletableFuture<Void> respondToRequest(ChannelHandlerContext ctx, HttpRequest httpRequest, HandlerRequest<R, M> handlerRequest, T gateway) {     CompletableFuture<P> response.     try {         response = handleRequest(handlerRequest, gateway).     } catch (RestHandlerException e) {         response = FutureUtils.completedExceptionally(e).     }     return response.thenAccept(resp -> HandlerUtils.sendResponse(ctx, httpRequest, resp, messageHeaders.getResponseStatusCode(), responseHeaders)). }
true;protected,abstract;2;1;/**  * This method is called for every incoming request and returns a {@link CompletableFuture} containing a the response.  *  * <p>Implementations may decide whether to throw {@link RestHandlerException}s or fail the returned  * {@link CompletableFuture} with a {@link RestHandlerException}.  *  * <p>Failing the future with another exception type or throwing unchecked exceptions is regarded as an  * implementation error as it does not allow us to provide a meaningful HTTP status code. In this case a  * {@link HttpResponseStatus#INTERNAL_SERVER_ERROR} will be returned.  *  * @param request request that should be handled  * @param gateway leader gateway  * @return future containing a handler response  * @throws RestHandlerException if the handling failed  */ ;/**  * This method is called for every incoming request and returns a {@link CompletableFuture} containing a the response.  *  * <p>Implementations may decide whether to throw {@link RestHandlerException}s or fail the returned  * {@link CompletableFuture} with a {@link RestHandlerException}.  *  * <p>Failing the future with another exception type or throwing unchecked exceptions is regarded as an  * implementation error as it does not allow us to provide a meaningful HTTP status code. In this case a  * {@link HttpResponseStatus#INTERNAL_SERVER_ERROR} will be returned.  *  * @param request request that should be handled  * @param gateway leader gateway  * @return future containing a handler response  * @throws RestHandlerException if the handling failed  */ protected abstract CompletableFuture<P> handleRequest(@Nonnull HandlerRequest<R, M> request, @Nonnull T gateway) throws RestHandlerException.
