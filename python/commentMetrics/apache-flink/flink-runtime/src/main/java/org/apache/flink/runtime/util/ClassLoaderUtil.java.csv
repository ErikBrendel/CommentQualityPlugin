# id;timestamp;commentText;codeText;commentWords;codeWords
ClassLoaderUtil -> public static boolean validateClassLoadable(ClassNotFoundException cnfe, ClassLoader cl);1439366713;Checks, whether the class that was not found in the given exception, can be resolved through_the given class loader.__@param cnfe The ClassNotFoundException that defines the name of the class._@param cl The class loader to use for the class resolution._@return True, if the class can be resolved with the given class loader, false if not.;public static boolean validateClassLoadable(ClassNotFoundException cnfe, ClassLoader cl) {_		try {_			String className = cnfe.getMessage()__			Class.forName(className, false, cl)__			return true__		}_		catch (ClassNotFoundException e) {_			return false__		}_		catch (Exception e) {_			return false__		}_	};checks,whether,the,class,that,was,not,found,in,the,given,exception,can,be,resolved,through,the,given,class,loader,param,cnfe,the,class,not,found,exception,that,defines,the,name,of,the,class,param,cl,the,class,loader,to,use,for,the,class,resolution,return,true,if,the,class,can,be,resolved,with,the,given,class,loader,false,if,not;public,static,boolean,validate,class,loadable,class,not,found,exception,cnfe,class,loader,cl,try,string,class,name,cnfe,get,message,class,for,name,class,name,false,cl,return,true,catch,class,not,found,exception,e,return,false,catch,exception,e,return,false
ClassLoaderUtil -> public static boolean validateClassLoadable(ClassNotFoundException cnfe, ClassLoader cl);1440578163;Checks, whether the class that was not found in the given exception, can be resolved through_the given class loader.__@param cnfe The ClassNotFoundException that defines the name of the class._@param cl The class loader to use for the class resolution._@return True, if the class can be resolved with the given class loader, false if not.;public static boolean validateClassLoadable(ClassNotFoundException cnfe, ClassLoader cl) {_		try {_			String className = cnfe.getMessage()__			Class.forName(className, false, cl)__			return true__		}_		catch (ClassNotFoundException e) {_			return false__		}_		catch (Exception e) {_			return false__		}_	};checks,whether,the,class,that,was,not,found,in,the,given,exception,can,be,resolved,through,the,given,class,loader,param,cnfe,the,class,not,found,exception,that,defines,the,name,of,the,class,param,cl,the,class,loader,to,use,for,the,class,resolution,return,true,if,the,class,can,be,resolved,with,the,given,class,loader,false,if,not;public,static,boolean,validate,class,loadable,class,not,found,exception,cnfe,class,loader,cl,try,string,class,name,cnfe,get,message,class,for,name,class,name,false,cl,return,true,catch,class,not,found,exception,e,return,false,catch,exception,e,return,false
ClassLoaderUtil -> public static boolean validateClassLoadable(ClassNotFoundException cnfe, ClassLoader cl);1443564120;Checks, whether the class that was not found in the given exception, can be resolved through_the given class loader.__@param cnfe The ClassNotFoundException that defines the name of the class._@param cl The class loader to use for the class resolution._@return True, if the class can be resolved with the given class loader, false if not.;public static boolean validateClassLoadable(ClassNotFoundException cnfe, ClassLoader cl) {_		try {_			String className = cnfe.getMessage()__			Class.forName(className, false, cl)__			return true__		}_		catch (ClassNotFoundException e) {_			return false__		}_		catch (Exception e) {_			return false__		}_	};checks,whether,the,class,that,was,not,found,in,the,given,exception,can,be,resolved,through,the,given,class,loader,param,cnfe,the,class,not,found,exception,that,defines,the,name,of,the,class,param,cl,the,class,loader,to,use,for,the,class,resolution,return,true,if,the,class,can,be,resolved,with,the,given,class,loader,false,if,not;public,static,boolean,validate,class,loadable,class,not,found,exception,cnfe,class,loader,cl,try,string,class,name,cnfe,get,message,class,for,name,class,name,false,cl,return,true,catch,class,not,found,exception,e,return,false,catch,exception,e,return,false
ClassLoaderUtil -> public static String getUserCodeClassLoaderInfo(ClassLoader loader);1439366713;Gets information about URL class loaders. The returned info string contains all URLs of the_class loader. For file URLs, it contains in addition whether the referenced file exists,_is a valid JAR file, or is a directory.__<p>NOTE: This method makes a best effort to provide information about the classloader, and_never throws an exception.</p>__@param loader The classloader to get the info string for._@return The classloader information string.;public static String getUserCodeClassLoaderInfo(ClassLoader loader) {_		if (loader instanceof URLClassLoader) {_			URLClassLoader cl = (URLClassLoader) loader__			_			try {_				StringBuilder bld = new StringBuilder()__				_				if (cl == ClassLoader.getSystemClassLoader()) {_					bld.append("System ClassLoader: ")__				}_				else {_					bld.append("URL ClassLoader:")__				}_				_				for (URL url : cl.getURLs()) {_					bld.append("\n    ")__					if (url == null) {_						bld.append("(null)")__					}_					else if ("file".equals(url.getProtocol())) {_						String filePath = url.getPath()__						File fileFile = new File(filePath)__						_						bld.append("file: '").append(filePath).append('\'')__						_						if (fileFile.exists()) {_							if (fileFile.isDirectory()) {_								bld.append(" (directory)")__							}_							else {_								try {_									new JarFile(filePath)__									bld.append(" (valid JAR)")__								}_								catch (Exception e) {_									bld.append(" (invalid JAR: ").append(e.getMessage()).append(')')__								}_							}_						}_						else {_							bld.append(" (missing)")__						}_					}_					else {_						bld.append("url: ").append(url)__					}_				}_				_				return bld.toString()__			}_			catch (Throwable t) {_				return "Cannot access classloader info due to an exception.\n"_						+ ExceptionUtils.stringifyException(t)__			}_		}_		else {_			return "No user code ClassLoader"__		}_	};gets,information,about,url,class,loaders,the,returned,info,string,contains,all,urls,of,the,class,loader,for,file,urls,it,contains,in,addition,whether,the,referenced,file,exists,is,a,valid,jar,file,or,is,a,directory,p,note,this,method,makes,a,best,effort,to,provide,information,about,the,classloader,and,never,throws,an,exception,p,param,loader,the,classloader,to,get,the,info,string,for,return,the,classloader,information,string;public,static,string,get,user,code,class,loader,info,class,loader,loader,if,loader,instanceof,urlclass,loader,urlclass,loader,cl,urlclass,loader,loader,try,string,builder,bld,new,string,builder,if,cl,class,loader,get,system,class,loader,bld,append,system,class,loader,else,bld,append,url,class,loader,for,url,url,cl,get,urls,bld,append,n,if,url,null,bld,append,null,else,if,file,equals,url,get,protocol,string,file,path,url,get,path,file,file,file,new,file,file,path,bld,append,file,append,file,path,append,if,file,file,exists,if,file,file,is,directory,bld,append,directory,else,try,new,jar,file,file,path,bld,append,valid,jar,catch,exception,e,bld,append,invalid,jar,append,e,get,message,append,else,bld,append,missing,else,bld,append,url,append,url,return,bld,to,string,catch,throwable,t,return,cannot,access,classloader,info,due,to,an,exception,n,exception,utils,stringify,exception,t,else,return,no,user,code,class,loader
ClassLoaderUtil -> public static String getUserCodeClassLoaderInfo(ClassLoader loader);1440578163;Gets information about URL class loaders. The returned info string contains all URLs of the_class loader. For file URLs, it contains in addition whether the referenced file exists,_is a valid JAR file, or is a directory.__<p>NOTE: This method makes a best effort to provide information about the classloader, and_never throws an exception.</p>__@param loader The classloader to get the info string for._@return The classloader information string.;public static String getUserCodeClassLoaderInfo(ClassLoader loader) {_		if (loader instanceof URLClassLoader) {_			URLClassLoader cl = (URLClassLoader) loader__			_			try {_				StringBuilder bld = new StringBuilder()__				_				if (cl == ClassLoader.getSystemClassLoader()) {_					bld.append("System ClassLoader: ")__				}_				else {_					bld.append("URL ClassLoader:")__				}_				_				for (URL url : cl.getURLs()) {_					bld.append("\n    ")__					if (url == null) {_						bld.append("(null)")__					}_					else if ("file".equals(url.getProtocol())) {_						String filePath = url.getPath()__						File fileFile = new File(filePath)__						_						bld.append("file: '").append(filePath).append('\'')__						_						if (fileFile.exists()) {_							if (fileFile.isDirectory()) {_								bld.append(" (directory)")__							}_							else {_								JarFile jar = null__								try {_									jar = new JarFile(filePath)__									bld.append(" (valid JAR)")__								}_								catch (Exception e) {_									bld.append(" (invalid JAR: ").append(e.getMessage()).append(')')__								}_								finally {_									if (jar != null) {_										jar.close()__									}_								}_							}_						}_						else {_							bld.append(" (missing)")__						}_					}_					else {_						bld.append("url: ").append(url)__					}_				}_				_				return bld.toString()__			}_			catch (Throwable t) {_				return "Cannot access classloader info due to an exception.\n"_						+ ExceptionUtils.stringifyException(t)__			}_		}_		else {_			return "No user code ClassLoader"__		}_	};gets,information,about,url,class,loaders,the,returned,info,string,contains,all,urls,of,the,class,loader,for,file,urls,it,contains,in,addition,whether,the,referenced,file,exists,is,a,valid,jar,file,or,is,a,directory,p,note,this,method,makes,a,best,effort,to,provide,information,about,the,classloader,and,never,throws,an,exception,p,param,loader,the,classloader,to,get,the,info,string,for,return,the,classloader,information,string;public,static,string,get,user,code,class,loader,info,class,loader,loader,if,loader,instanceof,urlclass,loader,urlclass,loader,cl,urlclass,loader,loader,try,string,builder,bld,new,string,builder,if,cl,class,loader,get,system,class,loader,bld,append,system,class,loader,else,bld,append,url,class,loader,for,url,url,cl,get,urls,bld,append,n,if,url,null,bld,append,null,else,if,file,equals,url,get,protocol,string,file,path,url,get,path,file,file,file,new,file,file,path,bld,append,file,append,file,path,append,if,file,file,exists,if,file,file,is,directory,bld,append,directory,else,jar,file,jar,null,try,jar,new,jar,file,file,path,bld,append,valid,jar,catch,exception,e,bld,append,invalid,jar,append,e,get,message,append,finally,if,jar,null,jar,close,else,bld,append,missing,else,bld,append,url,append,url,return,bld,to,string,catch,throwable,t,return,cannot,access,classloader,info,due,to,an,exception,n,exception,utils,stringify,exception,t,else,return,no,user,code,class,loader
ClassLoaderUtil -> public static String getUserCodeClassLoaderInfo(ClassLoader loader);1443564120;Gets information about URL class loaders. The returned info string contains all URLs of the_class loader. For file URLs, it contains in addition whether the referenced file exists,_is a valid JAR file, or is a directory.__<p>NOTE: This method makes a best effort to provide information about the classloader, and_never throws an exception.</p>__@param loader The classloader to get the info string for._@return The classloader information string.;public static String getUserCodeClassLoaderInfo(ClassLoader loader) {_		if (loader instanceof URLClassLoader) {_			URLClassLoader cl = (URLClassLoader) loader__			_			try {_				StringBuilder bld = new StringBuilder()__				_				if (cl == ClassLoader.getSystemClassLoader()) {_					bld.append("System ClassLoader: ")__				}_				else {_					bld.append("URL ClassLoader:")__				}_				_				for (URL url : cl.getURLs()) {_					bld.append("\n    ")__					if (url == null) {_						bld.append("(null)")__					}_					else if ("file".equals(url.getProtocol())) {_						String filePath = url.getPath()__						File fileFile = new File(filePath)__						_						bld.append("file: '").append(filePath).append('\'')__						_						if (fileFile.exists()) {_							if (fileFile.isDirectory()) {_								bld.append(" (directory)")__							}_							else {_								JarFile jar = null__								try {_									jar = new JarFile(filePath)__									bld.append(" (valid JAR)")__								}_								catch (Exception e) {_									bld.append(" (invalid JAR: ").append(e.getMessage()).append(')')__								}_								finally {_									if (jar != null) {_										jar.close()__									}_								}_							}_						}_						else {_							bld.append(" (missing)")__						}_					}_					else {_						bld.append("url: ").append(url)__					}_				}_				_				return bld.toString()__			}_			catch (Throwable t) {_				return "Cannot access classloader info due to an exception.\n"_						+ ExceptionUtils.stringifyException(t)__			}_		}_		else {_			return "No user code ClassLoader"__		}_	};gets,information,about,url,class,loaders,the,returned,info,string,contains,all,urls,of,the,class,loader,for,file,urls,it,contains,in,addition,whether,the,referenced,file,exists,is,a,valid,jar,file,or,is,a,directory,p,note,this,method,makes,a,best,effort,to,provide,information,about,the,classloader,and,never,throws,an,exception,p,param,loader,the,classloader,to,get,the,info,string,for,return,the,classloader,information,string;public,static,string,get,user,code,class,loader,info,class,loader,loader,if,loader,instanceof,urlclass,loader,urlclass,loader,cl,urlclass,loader,loader,try,string,builder,bld,new,string,builder,if,cl,class,loader,get,system,class,loader,bld,append,system,class,loader,else,bld,append,url,class,loader,for,url,url,cl,get,urls,bld,append,n,if,url,null,bld,append,null,else,if,file,equals,url,get,protocol,string,file,path,url,get,path,file,file,file,new,file,file,path,bld,append,file,append,file,path,append,if,file,file,exists,if,file,file,is,directory,bld,append,directory,else,jar,file,jar,null,try,jar,new,jar,file,file,path,bld,append,valid,jar,catch,exception,e,bld,append,invalid,jar,append,e,get,message,append,finally,if,jar,null,jar,close,else,bld,append,missing,else,bld,append,url,append,url,return,bld,to,string,catch,throwable,t,return,cannot,access,classloader,info,due,to,an,exception,n,exception,utils,stringify,exception,t,else,return,no,user,code,class,loader
