commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public long getRefreshInterval() {     return refreshInterval. }
false;public;0;3;;public int getTimeZoneOffset() {     return timeZoneOffset. }
false;public;0;3;;public String getTimeZoneName() {     return timeZoneName. }
false;public;0;3;;public String getFlinkVersion() {     return flinkVersion. }
false;public;0;3;;public String getFlinkRevision() {     return flinkRevision. }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     DashboardConfiguration that = (DashboardConfiguration) o.     return refreshInterval == that.refreshInterval && timeZoneOffset == that.timeZoneOffset && Objects.equals(timeZoneName, that.timeZoneName) && Objects.equals(flinkVersion, that.flinkVersion) && Objects.equals(flinkRevision, that.flinkRevision). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(refreshInterval, timeZoneName, timeZoneOffset, flinkVersion, flinkRevision). }
false;public,static;2;21;;public static DashboardConfiguration from(long refreshInterval, ZonedDateTime zonedDateTime) {     final String flinkVersion = EnvironmentInformation.getVersion().     final EnvironmentInformation.RevisionInformation revision = EnvironmentInformation.getRevisionInformation().     final String flinkRevision.     if (revision != null) {         flinkRevision = revision.commitId + " @ " + revision.commitDate.     } else {         flinkRevision = "unknown revision".     }     return new DashboardConfiguration(refreshInterval, zonedDateTime.getZone().getDisplayName(TextStyle.FULL, Locale.getDefault()), // convert zone date time into offset in order to not do the day light saving adaptions wrt the offset     zonedDateTime.toOffsetDateTime().getOffset().getTotalSeconds() * 1000, flinkVersion, flinkRevision). }
