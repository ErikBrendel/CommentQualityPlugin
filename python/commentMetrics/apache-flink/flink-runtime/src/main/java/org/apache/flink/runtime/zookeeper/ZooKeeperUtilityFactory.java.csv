commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Closes the ZooKeeperUtilityFactory. This entails closing the cached {@link CuratorFramework}  * instance. If cleanup is true, then the initial path and all its children are deleted.  *  * @param cleanup deletes the initial path and all of its children to clean up  * @throws Exception when deleting the znodes  */ ;/**  * Closes the ZooKeeperUtilityFactory. This entails closing the cached {@link CuratorFramework}  * instance. If cleanup is true, then the initial path and all its children are deleted.  *  * @param cleanup deletes the initial path and all of its children to clean up  * @throws Exception when deleting the znodes  */ public void close(boolean cleanup) throws Exception {     if (cleanup) {         facade.delete().deletingChildrenIfNeeded().forPath("/").     }     root.close(). }
true;public;2;9;/**  * Creates a {@link ZooKeeperStateHandleStore} instance with the provided arguments.  *  * @param zkStateHandleStorePath specifying the path in ZooKeeper to store the state handles to  * @param stateStorageHelper storing the actual state data  * @param <T> Type of the state to be stored  * @return a ZooKeeperStateHandleStore instance  * @throws Exception if ZooKeeper could not create the provided state handle store path in  *     ZooKeeper  */ ;/**  * Creates a {@link ZooKeeperStateHandleStore} instance with the provided arguments.  *  * @param zkStateHandleStorePath specifying the path in ZooKeeper to store the state handles to  * @param stateStorageHelper storing the actual state data  * @param <T> Type of the state to be stored  * @return a ZooKeeperStateHandleStore instance  * @throws Exception if ZooKeeper could not create the provided state handle store path in  *     ZooKeeper  */ public <T extends Serializable> ZooKeeperStateHandleStore<T> createZooKeeperStateHandleStore(String zkStateHandleStorePath, RetrievableStateStorageHelper<T> stateStorageHelper) throws Exception {     return ZooKeeperUtils.createZooKeeperStateHandleStore(facade, zkStateHandleStorePath, stateStorageHelper). }
true;public;2;7;/**  * Creates a {@link ZooKeeperSharedValue} to store a shared value between multiple instances.  *  * @param path to the shared value in ZooKeeper  * @param seedValue for the shared value  * @return a shared value  */ ;/**  * Creates a {@link ZooKeeperSharedValue} to store a shared value between multiple instances.  *  * @param path to the shared value in ZooKeeper  * @param seedValue for the shared value  * @return a shared value  */ public ZooKeeperSharedValue createSharedValue(String path, byte[] seedValue) {     return new ZooKeeperSharedValue(new SharedValue(facade, path, seedValue)). }
true;public;2;7;/**  * Creates a {@link ZooKeeperSharedCount} to store a shared count between multiple instances.  *  * @param path to the shared count in ZooKeeper  * @param seedCount for the shared count  * @return a shared count  */ ;/**  * Creates a {@link ZooKeeperSharedCount} to store a shared count between multiple instances.  *  * @param path to the shared count in ZooKeeper  * @param seedCount for the shared count  * @return a shared count  */ public ZooKeeperSharedCount createSharedCount(String path, int seedCount) {     return new ZooKeeperSharedCount(new SharedCount(facade, path, seedCount)). }
