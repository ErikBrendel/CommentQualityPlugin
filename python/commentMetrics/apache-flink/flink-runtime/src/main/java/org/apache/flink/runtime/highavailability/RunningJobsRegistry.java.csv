commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Marks a job as running. Requesting the job's status via the {@link #getJobSchedulingStatus(JobID)}  * method will return {@link JobSchedulingStatus#RUNNING}.  *  * @param jobID The id of the job.  *  * @throws IOException Thrown when the communication with the highly-available storage or registry  *                     failed and could not be retried.  */ ;// ------------------------------------------------------------------------ /**  * Marks a job as running. Requesting the job's status via the {@link #getJobSchedulingStatus(JobID)}  * method will return {@link JobSchedulingStatus#RUNNING}.  *  * @param jobID The id of the job.  *  * @throws IOException Thrown when the communication with the highly-available storage or registry  *                     failed and could not be retried.  */ void setJobRunning(JobID jobID) throws IOException.
true;;1;1;/**  * Marks a job as completed. Requesting the job's status via the {@link #getJobSchedulingStatus(JobID)}  * method will return {@link JobSchedulingStatus#DONE}.  *  * @param jobID The id of the job.  *  * @throws IOException Thrown when the communication with the highly-available storage or registry  *                     failed and could not be retried.  */ ;/**  * Marks a job as completed. Requesting the job's status via the {@link #getJobSchedulingStatus(JobID)}  * method will return {@link JobSchedulingStatus#DONE}.  *  * @param jobID The id of the job.  *  * @throws IOException Thrown when the communication with the highly-available storage or registry  *                     failed and could not be retried.  */ void setJobFinished(JobID jobID) throws IOException.
true;;1;1;/**  * Gets the scheduling status of a job.  *  * @param jobID The id of the job to check.  * @return The job scheduling status.  *  * @throws IOException Thrown when the communication with the highly-available storage or registry  *                     failed and could not be retried.  */ ;/**  * Gets the scheduling status of a job.  *  * @param jobID The id of the job to check.  * @return The job scheduling status.  *  * @throws IOException Thrown when the communication with the highly-available storage or registry  *                     failed and could not be retried.  */ JobSchedulingStatus getJobSchedulingStatus(JobID jobID) throws IOException.
true;;1;1;/**  * Clear job state form the registry, usually called after job finish.  *  * @param jobID The id of the job to check.  *  * @throws IOException Thrown when the communication with the highly-available storage or registry  *                     failed and could not be retried.  */ ;/**  * Clear job state form the registry, usually called after job finish.  *  * @param jobID The id of the job to check.  *  * @throws IOException Thrown when the communication with the highly-available storage or registry  *                     failed and could not be retried.  */ void clearJob(JobID jobID) throws IOException.
