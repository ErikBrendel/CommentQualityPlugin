commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void setup(TaskContext<Function, T> context) {     this.taskContext = context.     this.running = true. }
false;public;0;4;;@Override public int getNumberOfInputs() {     return 2. }
false;public;0;4;;@Override public int getNumberOfDriverComparators() {     return 0. }
false;public;0;4;;@Override public Class<Function> getStubType() {     // no UDF     return null. }
false;public;0;2;;@Override public void prepare() { }
false;public;0;21;;@Override public void run() throws Exception {     final Counter numRecordsIn = this.taskContext.getMetricGroup().getIOMetricGroup().getNumRecordsInCounter().     final Counter numRecordsOut = this.taskContext.getMetricGroup().getIOMetricGroup().getNumRecordsOutCounter().     final Collector<T> output = new CountingCollector<>(this.taskContext.getOutputCollector(), numRecordsOut).     T reuse = this.taskContext.<T>getInputSerializer(STREAMED_INPUT).getSerializer().createInstance().     T record.     final MutableObjectIterator<T> input = this.taskContext.getInput(STREAMED_INPUT).     while (this.running && ((record = input.next(reuse)) != null)) {         numRecordsIn.inc().         output.collect(record).     }     final MutableObjectIterator<T> cache = this.taskContext.getInput(CACHED_INPUT).     while (this.running && ((record = cache.next(reuse)) != null)) {         numRecordsIn.inc().         output.collect(record).     } }
false;public;0;2;;@Override public void cleanup() { }
false;public;0;4;;@Override public void cancel() {     this.running = false. }
