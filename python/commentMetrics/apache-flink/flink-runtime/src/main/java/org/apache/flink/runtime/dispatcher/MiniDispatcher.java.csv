commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public CompletableFuture<ApplicationStatus> getJobTerminationFuture() {     return jobTerminationFuture. }
false;public;2;15;;@Override public CompletableFuture<Acknowledge> submitJob(JobGraph jobGraph, Time timeout) {     final CompletableFuture<Acknowledge> acknowledgeCompletableFuture = super.submitJob(jobGraph, timeout).     acknowledgeCompletableFuture.whenComplete((Acknowledge ignored, Throwable throwable) -> {         if (throwable != null) {             onFatalError(new FlinkException("Failed to submit job " + jobGraph.getJobID() + " in job mode.", throwable)).         }     }).     return acknowledgeCompletableFuture. }
false;public;2;16;;@Override public CompletableFuture<JobResult> requestJobResult(JobID jobId, Time timeout) {     final CompletableFuture<JobResult> jobResultFuture = super.requestJobResult(jobId, timeout).     if (executionMode == ClusterEntrypoint.ExecutionMode.NORMAL) {         // terminate the MiniDispatcher once we served the first JobResult successfully         jobResultFuture.thenAccept((JobResult result) -> {             ApplicationStatus status = result.getSerializedThrowable().isPresent() ? ApplicationStatus.FAILED : ApplicationStatus.SUCCEEDED.             jobTerminationFuture.complete(status).         }).     }     return jobResultFuture. }
false;protected;1;9;;@Override protected void jobReachedGloballyTerminalState(ArchivedExecutionGraph archivedExecutionGraph) {     super.jobReachedGloballyTerminalState(archivedExecutionGraph).     if (executionMode == ClusterEntrypoint.ExecutionMode.DETACHED) {         // shut down since we don't have to wait for the execution result retrieval         jobTerminationFuture.complete(ApplicationStatus.fromJobStatus(archivedExecutionGraph.getState())).     } }
false;protected;1;7;;@Override protected void jobNotFinished(JobID jobId) {     super.jobNotFinished(jobId).     // shut down since we have done our job     jobTerminationFuture.complete(ApplicationStatus.UNKNOWN). }
