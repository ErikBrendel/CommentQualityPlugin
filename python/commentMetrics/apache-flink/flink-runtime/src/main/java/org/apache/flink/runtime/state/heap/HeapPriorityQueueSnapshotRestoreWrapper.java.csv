commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@SuppressWarnings("unchecked") @Nonnull @Override public StateSnapshot stateSnapshot() {     final T[] queueDump = (T[]) priorityQueue.toArray(new HeapPriorityQueueElement[priorityQueue.size()]).     return new HeapPriorityQueueStateSnapshot<>(queueDump, keyExtractorFunction, metaInfo.deepCopy(), localKeyGroupRange, totalKeyGroups). }
false;public;1;8;;@Nonnull @Override public StateSnapshotKeyGroupReader keyGroupReader(int readVersionHint) {     final TypeSerializer<T> elementSerializer = metaInfo.getElementSerializer().     return KeyGroupPartitioner.createKeyGroupPartitionReader(// we know that this does not deliver nulls, because we never write nulls     elementSerializer::deserialize, (element, keyGroupId) -> priorityQueue.add(element)). }
false;public;0;4;;@Nonnull public HeapPriorityQueueSet<T> getPriorityQueue() {     return priorityQueue. }
false;public;0;4;;@Nonnull public RegisteredPriorityQueueStateBackendMetaInfo<T> getMetaInfo() {     return metaInfo. }
true;public;1;13;/**  * Returns a deep copy of the snapshot, where the serializer is changed to the given serializer.  */ ;/**  * Returns a deep copy of the snapshot, where the serializer is changed to the given serializer.  */ public HeapPriorityQueueSnapshotRestoreWrapper<T> forUpdatedSerializer(@Nonnull TypeSerializer<T> updatedSerializer) {     RegisteredPriorityQueueStateBackendMetaInfo<T> updatedMetaInfo = new RegisteredPriorityQueueStateBackendMetaInfo<>(metaInfo.getName(), updatedSerializer).     return new HeapPriorityQueueSnapshotRestoreWrapper<>(priorityQueue, updatedMetaInfo, keyExtractorFunction, localKeyGroupRange, totalKeyGroups). }
