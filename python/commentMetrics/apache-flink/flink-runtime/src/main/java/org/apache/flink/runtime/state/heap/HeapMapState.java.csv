# id;timestamp;commentText;codeText;commentWords;codeWords
HeapMapState -> public HeapMapState(KeyedStateBackend<K> backend, 			MapStateDescriptor<UK, UV> stateDesc, 			StateTable<K, N, HashMap<UK, UV>> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer);1487865389;Creates a new key/value state for the given hash map of key/value pairs.__@param backend    The state backend backing that created this state._@param stateDesc  The state identifier for the state. This contains name_and can create a default state value._@param stateTable The state tab_e to use in this kev/value state. May contain initial state.;public HeapMapState(KeyedStateBackend<K> backend,_			MapStateDescriptor<UK, UV> stateDesc,_			StateTable<K, N, HashMap<UK, UV>> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) {_		super(backend, stateDesc, stateTable, keySerializer, namespaceSerializer)__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,backend,the,state,backend,backing,that,created,this,state,param,state,desc,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,state,table,the,state,tab,e,to,use,in,this,kev,value,state,may,contain,initial,state;public,heap,map,state,keyed,state,backend,k,backend,map,state,descriptor,uk,uv,state,desc,state,table,k,n,hash,map,uk,uv,state,table,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,super,backend,state,desc,state,table,key,serializer,namespace,serializer
HeapMapState -> public HeapMapState(KeyedStateBackend<K> backend, 			MapStateDescriptor<UK, UV> stateDesc, 			StateTable<K, N, HashMap<UK, UV>> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer);1488546869;Creates a new key/value state for the given hash map of key/value pairs.__@param backend    The state backend backing that created this state._@param stateDesc  The state identifier for the state. This contains name_and can create a default state value._@param stateTable The state tab_e to use in this kev/value state. May contain initial state.;public HeapMapState(KeyedStateBackend<K> backend,_			MapStateDescriptor<UK, UV> stateDesc,_			StateTable<K, N, HashMap<UK, UV>> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) {_		super(backend, stateDesc, stateTable, keySerializer, namespaceSerializer)__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,backend,the,state,backend,backing,that,created,this,state,param,state,desc,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,state,table,the,state,tab,e,to,use,in,this,kev,value,state,may,contain,initial,state;public,heap,map,state,keyed,state,backend,k,backend,map,state,descriptor,uk,uv,state,desc,state,table,k,n,hash,map,uk,uv,state,table,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,super,backend,state,desc,state,table,key,serializer,namespace,serializer
HeapMapState -> public HeapMapState( 			MapStateDescriptor<UK, UV> stateDesc, 			StateTable<K, N, HashMap<UK, UV>> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer);1489685642;Creates a new key/value state for the given hash map of key/value pairs.__@param stateDesc  The state identifier for the state. This contains name_and can create a default state value._@param stateTable The state tab_e to use in this kev/value state. May contain initial state.;public HeapMapState(_			MapStateDescriptor<UK, UV> stateDesc,_			StateTable<K, N, HashMap<UK, UV>> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) {_		super(stateDesc, stateTable, keySerializer, namespaceSerializer)__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,state,desc,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,state,table,the,state,tab,e,to,use,in,this,kev,value,state,may,contain,initial,state;public,heap,map,state,map,state,descriptor,uk,uv,state,desc,state,table,k,n,hash,map,uk,uv,state,table,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,super,state,desc,state,table,key,serializer,namespace,serializer
HeapMapState -> public HeapMapState( 			MapStateDescriptor<UK, UV> stateDesc, 			StateTable<K, N, HashMap<UK, UV>> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer);1507728810;Creates a new key/value state for the given hash map of key/value pairs.__@param stateDesc  The state identifier for the state. This contains name_and can create a default state value._@param stateTable The state tab_e to use in this kev/value state. May contain initial state.;public HeapMapState(_			MapStateDescriptor<UK, UV> stateDesc,_			StateTable<K, N, HashMap<UK, UV>> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) {_		super(stateDesc, stateTable, keySerializer, namespaceSerializer)__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,state,desc,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,state,table,the,state,tab,e,to,use,in,this,kev,value,state,may,contain,initial,state;public,heap,map,state,map,state,descriptor,uk,uv,state,desc,state,table,k,n,hash,map,uk,uv,state,table,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,super,state,desc,state,table,key,serializer,namespace,serializer
HeapMapState -> public HeapMapState( 			MapStateDescriptor<UK, UV> stateDesc, 			StateTable<K, N, HashMap<UK, UV>> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer);1509037054;Creates a new key/value state for the given hash map of key/value pairs.__@param stateDesc  The state identifier for the state. This contains name_and can create a default state value._@param stateTable The state tab_e to use in this kev/value state. May contain initial state.;public HeapMapState(_			MapStateDescriptor<UK, UV> stateDesc,_			StateTable<K, N, HashMap<UK, UV>> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) {_		super(stateDesc, stateTable, keySerializer, namespaceSerializer)__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,state,desc,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,state,table,the,state,tab,e,to,use,in,this,kev,value,state,may,contain,initial,state;public,heap,map,state,map,state,descriptor,uk,uv,state,desc,state,table,k,n,hash,map,uk,uv,state,table,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,super,state,desc,state,table,key,serializer,namespace,serializer
HeapMapState -> public HeapMapState( 			MapStateDescriptor<UK, UV> stateDesc, 			StateTable<K, N, HashMap<UK, UV>> stateTable, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer);1522337739;Creates a new key/value state for the given hash map of key/value pairs.__@param stateDesc  The state identifier for the state. This contains name_and can create a default state value._@param stateTable The state tab_e to use in this kev/value state. May contain initial state.;public HeapMapState(_			MapStateDescriptor<UK, UV> stateDesc,_			StateTable<K, N, HashMap<UK, UV>> stateTable,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) {_		super(stateDesc, stateTable, keySerializer, namespaceSerializer)__	};creates,a,new,key,value,state,for,the,given,hash,map,of,key,value,pairs,param,state,desc,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,state,table,the,state,tab,e,to,use,in,this,kev,value,state,may,contain,initial,state;public,heap,map,state,map,state,descriptor,uk,uv,state,desc,state,table,k,n,hash,map,uk,uv,state,table,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,super,state,desc,state,table,key,serializer,namespace,serializer
