commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public TypeSerializer<K> getKeySerializer() {     return keySerializer. }
false;public;0;4;;@Override public TypeSerializer<N> getNamespaceSerializer() {     return namespaceSerializer. }
false;public;0;4;;@Override public TypeSerializer<Map<UK, UV>> getValueSerializer() {     return valueSerializer. }
false;public;1;11;;@Override public UV get(UK userKey) {     Map<UK, UV> userMap = stateTable.get(currentNamespace).     if (userMap == null) {         return null.     }     return userMap.get(userKey). }
false;public;2;11;;@Override public void put(UK userKey, UV userValue) {     Map<UK, UV> userMap = stateTable.get(currentNamespace).     if (userMap == null) {         userMap = new HashMap<>().         stateTable.put(currentNamespace, userMap).     }     userMap.put(userKey, userValue). }
false;public;1;12;;@Override public void putAll(Map<UK, UV> value) {     Map<UK, UV> userMap = stateTable.get(currentNamespace).     if (userMap == null) {         userMap = new HashMap<>().         stateTable.put(currentNamespace, userMap).     }     userMap.putAll(value). }
false;public;1;14;;@Override public void remove(UK userKey) {     Map<UK, UV> userMap = stateTable.get(currentNamespace).     if (userMap == null) {         return.     }     userMap.remove(userKey).     if (userMap.isEmpty()) {         clear().     } }
false;public;1;5;;@Override public boolean contains(UK userKey) {     Map<UK, UV> userMap = stateTable.get(currentNamespace).     return userMap != null && userMap.containsKey(userKey). }
false;public;0;5;;@Override public Iterable<Map.Entry<UK, UV>> entries() {     Map<UK, UV> userMap = stateTable.get(currentNamespace).     return userMap == null ? null : userMap.entrySet(). }
false;public;0;5;;@Override public Iterable<UK> keys() {     Map<UK, UV> userMap = stateTable.get(currentNamespace).     return userMap == null ? null : userMap.keySet(). }
false;public;0;5;;@Override public Iterable<UV> values() {     Map<UK, UV> userMap = stateTable.get(currentNamespace).     return userMap == null ? null : userMap.values(). }
false;public;0;5;;@Override public Iterator<Map.Entry<UK, UV>> iterator() {     Map<UK, UV> userMap = stateTable.get(currentNamespace).     return userMap == null ? null : userMap.entrySet().iterator(). }
false;public;4;28;;@Override public byte[] getSerializedValue(final byte[] serializedKeyAndNamespace, final TypeSerializer<K> safeKeySerializer, final TypeSerializer<N> safeNamespaceSerializer, final TypeSerializer<Map<UK, UV>> safeValueSerializer) throws Exception {     Preconditions.checkNotNull(serializedKeyAndNamespace).     Preconditions.checkNotNull(safeKeySerializer).     Preconditions.checkNotNull(safeNamespaceSerializer).     Preconditions.checkNotNull(safeValueSerializer).     Tuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(serializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer).     Map<UK, UV> result = stateTable.get(keyAndNamespace.f0, keyAndNamespace.f1).     if (result == null) {         return null.     }     final MapSerializer<UK, UV> serializer = (MapSerializer<UK, UV>) safeValueSerializer.     final TypeSerializer<UK> dupUserKeySerializer = serializer.getKeySerializer().     final TypeSerializer<UV> dupUserValueSerializer = serializer.getValueSerializer().     return KvStateSerializer.serializeMap(result.entrySet(), dupUserKeySerializer, dupUserValueSerializer). }
false;static;3;12;;@SuppressWarnings("unchecked") static <UK, UV, K, N, SV, S extends State, IS extends S> IS create(StateDescriptor<S, SV> stateDesc, StateTable<K, N, SV> stateTable, TypeSerializer<K> keySerializer) {     return (IS) new HeapMapState<>((StateTable<K, N, Map<UK, UV>>) stateTable, keySerializer, (TypeSerializer<Map<UK, UV>>) stateTable.getStateSerializer(), stateTable.getNamespaceSerializer(), (Map<UK, UV>) stateDesc.getDefaultValue()). }
