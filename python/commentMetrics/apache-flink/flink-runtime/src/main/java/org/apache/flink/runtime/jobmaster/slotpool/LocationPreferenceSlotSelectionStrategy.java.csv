commented;modifiers;parameterAmount;loc;comment;code
false;public;2;18;;@Override public Optional<SlotInfoAndLocality> selectBestSlotForProfile(@Nonnull Collection<? extends SlotInfo> availableSlots, @Nonnull SlotProfile slotProfile) {     Collection<TaskManagerLocation> locationPreferences = slotProfile.getPreferredLocations().     if (availableSlots.isEmpty()) {         return Optional.empty().     }     final ResourceProfile resourceProfile = slotProfile.getResourceProfile().     // if we have no location preferences, we can only filter by the additional requirements.     return locationPreferences.isEmpty() ? selectWithoutLocationPreference(availableSlots, resourceProfile) : selectWitLocationPreference(availableSlots, locationPreferences, resourceProfile). }
false;private;2;12;;@Nonnull private Optional<SlotInfoAndLocality> selectWithoutLocationPreference(@Nonnull Collection<? extends SlotInfo> availableSlots, @Nonnull ResourceProfile resourceProfile) {     for (SlotInfo candidate : availableSlots) {         if (candidate.getResourceProfile().isMatching(resourceProfile)) {             return Optional.of(SlotInfoAndLocality.of(candidate, Locality.UNCONSTRAINED)).         }     }     return Optional.empty(). }
false;private;3;47;;@Nonnull private Optional<SlotInfoAndLocality> selectWitLocationPreference(@Nonnull Collection<? extends SlotInfo> availableSlots, @Nonnull Collection<TaskManagerLocation> locationPreferences, @Nonnull ResourceProfile resourceProfile) {     // we build up two indexes, one for resource id and one for host names of the preferred locations.     final Map<ResourceID, Integer> preferredResourceIDs = new HashMap<>(locationPreferences.size()).     final Map<String, Integer> preferredFQHostNames = new HashMap<>(locationPreferences.size()).     for (TaskManagerLocation locationPreference : locationPreferences) {         preferredResourceIDs.merge(locationPreference.getResourceID(), 1, Integer::sum).         preferredFQHostNames.merge(locationPreference.getFQDNHostname(), 1, Integer::sum).     }     SlotInfo bestCandidate = null.     Locality bestCandidateLocality = Locality.UNKNOWN.     int bestCandidateScore = Integer.MIN_VALUE.     for (SlotInfo candidate : availableSlots) {         if (candidate.getResourceProfile().isMatching(resourceProfile)) {             // this gets candidate is local-weigh             Integer localWeigh = preferredResourceIDs.getOrDefault(candidate.getTaskManagerLocation().getResourceID(), 0).             // this gets candidate is host-local-weigh             Integer hostLocalWeigh = preferredFQHostNames.getOrDefault(candidate.getTaskManagerLocation().getFQDNHostname(), 0).             int candidateScore = LOCALITY_EVALUATION_FUNCTION.apply(localWeigh, hostLocalWeigh).             if (candidateScore > bestCandidateScore) {                 bestCandidateScore = candidateScore.                 bestCandidate = candidate.                 bestCandidateLocality = localWeigh > 0 ? Locality.LOCAL : hostLocalWeigh > 0 ? Locality.HOST_LOCAL : Locality.NON_LOCAL.             }         }     }     // at the end of the iteration, we return the candidate with best possible locality or null.     return bestCandidate != null ? Optional.of(SlotInfoAndLocality.of(bestCandidate, bestCandidateLocality)) : Optional.empty(). }
