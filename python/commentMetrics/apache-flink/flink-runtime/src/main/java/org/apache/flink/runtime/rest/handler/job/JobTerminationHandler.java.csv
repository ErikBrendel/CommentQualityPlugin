commented;modifiers;parameterAmount;loc;comment;code
false;public;2;52;;@Override public CompletableFuture<EmptyResponseBody> handleRequest(HandlerRequest<EmptyRequestBody, JobTerminationMessageParameters> request, RestfulGateway gateway) {     final JobID jobId = request.getPathParameter(JobIDPathParameter.class).     final List<TerminationModeQueryParameter.TerminationMode> terminationModes = request.getQueryParameter(TerminationModeQueryParameter.class).     final TerminationModeQueryParameter.TerminationMode terminationMode.     if (terminationModes.isEmpty()) {         terminationMode = defaultTerminationMode.     } else {         // picking the first termination mode value         terminationMode = terminationModes.get(0).     }     final CompletableFuture<Acknowledge> terminationFuture.     switch(terminationMode) {         case CANCEL:             terminationFuture = gateway.cancelJob(jobId, timeout).             break.         case STOP:             terminationFuture = gateway.stopJob(jobId, timeout).             break.         default:             terminationFuture = FutureUtils.completedExceptionally(new RestHandlerException("Unknown termination mode " + terminationMode + '.', HttpResponseStatus.BAD_REQUEST)).     }     return terminationFuture.handle((Acknowledge ack, Throwable throwable) -> {         if (throwable != null) {             Throwable error = ExceptionUtils.stripCompletionException(throwable).             if (error instanceof TimeoutException) {                 throw new CompletionException(new RestHandlerException("Job termination (" + terminationMode + ") timed out.", HttpResponseStatus.REQUEST_TIMEOUT, error)).             } else if (error instanceof FlinkJobNotFoundException) {                 throw new CompletionException(new RestHandlerException("Job could not be found.", HttpResponseStatus.NOT_FOUND, error)).             } else {                 throw new CompletionException(new RestHandlerException("Job termination (" + terminationMode + ") failed: " + error.getMessage(), HttpResponseStatus.INTERNAL_SERVER_ERROR, error)).             }         } else {             return EmptyResponseBody.getInstance().         }     }). }
