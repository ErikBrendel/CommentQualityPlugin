commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Callback when a monitored job leader lost its leadership.  *  * @param jobId identifying the job whose leader lost leadership  * @param oldJobMasterId of the job manager which lost leadership  */ ;/**  * Callback when a monitored job leader lost its leadership.  *  * @param jobId identifying the job whose leader lost leadership  * @param oldJobMasterId of the job manager which lost leadership  */ void jobLeaderLostLeadership(JobID jobId, JobMasterId oldJobMasterId).
true;;2;1;/**  * Notify a job timeout. The job is identified by the given JobID. In order to check  * for the validity of the timeout the timeout id of the triggered timeout is provided.  *  * @param jobId JobID which identifies the timed out job  * @param timeoutId Id of the calling timeout to differentiate valid from invalid timeouts  */ ;/**  * Notify a job timeout. The job is identified by the given JobID. In order to check  * for the validity of the timeout the timeout id of the triggered timeout is provided.  *  * @param jobId JobID which identifies the timed out job  * @param timeoutId Id of the calling timeout to differentiate valid from invalid timeouts  */ void notifyJobTimeout(JobID jobId, UUID timeoutId).
true;;1;1;/**  * Callback to report occurring errors.  *  * @param error which has occurred  */ ;/**  * Callback to report occurring errors.  *  * @param error which has occurred  */ void handleError(Throwable error).
