commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Time getTaskManagerRequestTimeout() {     return taskManagerRequestTimeout. }
false;public;0;3;;public Time getSlotRequestTimeout() {     return slotRequestTimeout. }
false;public;0;3;;public Time getTaskManagerTimeout() {     return taskManagerTimeout. }
false;public,static;1;17;;public static SlotManagerConfiguration fromConfiguration(Configuration configuration) throws ConfigurationException {     final String strTimeout = configuration.getString(AkkaOptions.ASK_TIMEOUT).     final Time rpcTimeout.     try {         rpcTimeout = Time.milliseconds(Duration.apply(strTimeout).toMillis()).     } catch (NumberFormatException e) {         throw new ConfigurationException("Could not parse the resource manager's timeout " + "value " + AkkaOptions.ASK_TIMEOUT + '.', e).     }     final Time slotRequestTimeout = getSlotRequestTimeout(configuration).     final Time taskManagerTimeout = Time.milliseconds(configuration.getLong(ResourceManagerOptions.TASK_MANAGER_TIMEOUT)).     return new SlotManagerConfiguration(rpcTimeout, slotRequestTimeout, taskManagerTimeout). }
false;private,static;1;12;;private static Time getSlotRequestTimeout(final Configuration configuration) {     final long slotRequestTimeoutMs.     if (configuration.contains(ResourceManagerOptions.SLOT_REQUEST_TIMEOUT)) {         LOGGER.warn("Config key {} is deprecated. use {} instead.", ResourceManagerOptions.SLOT_REQUEST_TIMEOUT, JobManagerOptions.SLOT_REQUEST_TIMEOUT).         slotRequestTimeoutMs = configuration.getLong(ResourceManagerOptions.SLOT_REQUEST_TIMEOUT).     } else {         slotRequestTimeoutMs = configuration.getLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT).     }     return Time.milliseconds(slotRequestTimeoutMs). }
