commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the type of checkpoint to perform.  */ ;// ------------------------------------------------------------------------ /**  * Returns the type of checkpoint to perform.  */ public CheckpointType getCheckpointType() {     return checkpointType. }
true;public;0;3;/**  * Returns the target location for the checkpoint.  */ ;/**  * Returns the target location for the checkpoint.  */ public CheckpointStorageLocationReference getTargetLocation() {     return targetLocation. }
false;public;0;4;;// ------------------------------------------------------------------------ @Override public int hashCode() {     return 31 * targetLocation.hashCode() + checkpointType.hashCode(). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     } else if (obj != null && obj.getClass() == CheckpointOptions.class) {         final CheckpointOptions that = (CheckpointOptions) obj.         return this.checkpointType == that.checkpointType && this.targetLocation.equals(that.targetLocation).     } else {         return false.     } }
false;public;0;4;;@Override public String toString() {     return "CheckpointOptions: " + checkpointType + " @ " + targetLocation. }
false;public,static;0;3;;public static CheckpointOptions forCheckpointWithDefaultLocation() {     return CHECKPOINT_AT_DEFAULT_LOCATION. }
