# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceManager -> protected abstract void initialize() throws Exception_;1482522860;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1482522861;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1482522861;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1482522861;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1482522861;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1482522862;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1482522862;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1482522862;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1482522863;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1482522863;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1482522864;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522858;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522858;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522859;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522859;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522859;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522859;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522859;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522860;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522861;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522861;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522861;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522861;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522862;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522862;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522862;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522863;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522863;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1482522864;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1493386068;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						WorkerType newWorker = workerStarted(taskExecutorResourceId)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(taskExecutorResourceId, registration)___						slotManager.registerTaskManager(registration, slotReport)___						taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_							@Override_							public void receiveHeartbeat(ResourceID resourceID, Void payload) {_								_								_							}__							@Override_							public void requestHeartbeat(ResourceID resourceID, Void payload) {_								taskExecutorGateway.heartbeatFromResourceManager(resourceID)__							}_						})___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceId,_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,worker,type,new,worker,worker,started,task,executor,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1493975155;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						WorkerType newWorker = workerStarted(taskExecutorResourceId)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(taskExecutorResourceId, registration)___						slotManager.registerTaskManager(registration, slotReport)___						taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_							@Override_							public void receiveHeartbeat(ResourceID resourceID, Void payload) {_								_								_							}__							@Override_							public void requestHeartbeat(ResourceID resourceID, Void payload) {_								taskExecutorGateway.heartbeatFromResourceManager(resourceID)__							}_						})___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceId,_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,worker,type,new,worker,worker,started,task,executor,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1498718472;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						WorkerType newWorker = workerStarted(taskExecutorResourceId)__						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						}_						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(taskExecutorResourceId, registration)___						slotManager.registerTaskManager(registration, slotReport)___						taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_							@Override_							public void receiveHeartbeat(ResourceID resourceID, Void payload) {_								_								_							}__							@Override_							public void requestHeartbeat(ResourceID resourceID, Void payload) {_								taskExecutorGateway.heartbeatFromResourceManager(resourceID)__							}_						})___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceId,_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1498718493;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						final WorkerType newWorker = workerStarted(taskExecutorResourceId)___						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						} else {_							WorkerRegistration<WorkerType> registration =_								new WorkerRegistration<>(taskExecutorGateway, newWorker)___							taskExecutors.put(taskExecutorResourceId, registration)___							slotManager.registerTaskManager(registration, slotReport)___							taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_								@Override_								public void receiveHeartbeat(ResourceID resourceID, Void payload) {_									_									_								}__								@Override_								public void requestHeartbeat(ResourceID resourceID, Void payload) {_									taskExecutorGateway.heartbeatFromResourceManager(resourceID)__								}_							})___							return new TaskExecutorRegistrationSuccess(_								registration.getInstanceID(),_								resourceId,_								resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__						}_					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1498718494;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						final WorkerType newWorker = workerStarted(taskExecutorResourceId)___						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						} else {_							WorkerRegistration<WorkerType> registration =_								new WorkerRegistration<>(taskExecutorGateway, newWorker)___							taskExecutors.put(taskExecutorResourceId, registration)___							slotManager.registerTaskManager(registration, slotReport)___							taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_								@Override_								public void receiveHeartbeat(ResourceID resourceID, Void payload) {_									_									_								}__								@Override_								public void requestHeartbeat(ResourceID resourceID, Void payload) {_									taskExecutorGateway.heartbeatFromResourceManager(resourceID)__								}_							})___							return new TaskExecutorRegistrationSuccess(_								registration.getInstanceID(),_								resourceId,_								resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__						}_					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1498923209;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						final WorkerType newWorker = workerStarted(taskExecutorResourceId)___						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						} else {_							WorkerRegistration<WorkerType> registration =_								new WorkerRegistration<>(taskExecutorGateway, newWorker)___							taskExecutors.put(taskExecutorResourceId, registration)___							slotManager.registerTaskManager(registration, slotReport)___							taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_								@Override_								public void receiveHeartbeat(ResourceID resourceID, Void payload) {_									_									_								}__								@Override_								public void requestHeartbeat(ResourceID resourceID, Void payload) {_									taskExecutorGateway.heartbeatFromResourceManager(resourceID)__								}_							})___							return new TaskExecutorRegistrationSuccess(_								registration.getInstanceID(),_								resourceId,_								resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__						}_					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1499250208;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						final WorkerType newWorker = workerStarted(taskExecutorResourceId)___						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						} else {_							WorkerRegistration<WorkerType> registration =_								new WorkerRegistration<>(taskExecutorGateway, newWorker)___							taskExecutors.put(taskExecutorResourceId, registration)___							slotManager.registerTaskManager(registration, slotReport)___							taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_								@Override_								public void receiveHeartbeat(ResourceID resourceID, Void payload) {_									_									_								}__								@Override_								public void requestHeartbeat(ResourceID resourceID, Void payload) {_									taskExecutorGateway.heartbeatFromResourceManager(resourceID)__								}_							})___							return new TaskExecutorRegistrationSuccess(_								registration.getInstanceID(),_								resourceId,_								resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__						}_					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1501084996;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						final WorkerType newWorker = workerStarted(taskExecutorResourceId)___						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						} else {_							WorkerRegistration<WorkerType> registration =_								new WorkerRegistration<>(taskExecutorGateway, newWorker)___							taskExecutors.put(taskExecutorResourceId, registration)___							slotManager.registerTaskManager(registration, slotReport)___							taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_								@Override_								public void receiveHeartbeat(ResourceID resourceID, Void payload) {_									_									_								}__								@Override_								public void requestHeartbeat(ResourceID resourceID, Void payload) {_									taskExecutorGateway.heartbeatFromResourceManager(resourceID)__								}_							})___							return new TaskExecutorRegistrationSuccess(_								registration.getInstanceID(),_								resourceId,_								resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__						}_					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1501485811;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						final WorkerType newWorker = workerStarted(taskExecutorResourceId)___						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						} else {_							WorkerRegistration<WorkerType> registration =_								new WorkerRegistration<>(taskExecutorGateway, newWorker)___							taskExecutors.put(taskExecutorResourceId, registration)___							slotManager.registerTaskManager(registration, slotReport)___							taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_								@Override_								public void receiveHeartbeat(ResourceID resourceID, Void payload) {_									_									_								}__								@Override_								public void requestHeartbeat(ResourceID resourceID, Void payload) {_									taskExecutorGateway.heartbeatFromResourceManager(resourceID)__								}_							})___							return new TaskExecutorRegistrationSuccess(_								registration.getInstanceID(),_								resourceId,_								resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__						}_					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1501620216;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						final WorkerType newWorker = workerStarted(taskExecutorResourceId)___						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						} else {_							WorkerRegistration<WorkerType> registration =_								new WorkerRegistration<>(taskExecutorGateway, newWorker)___							taskExecutors.put(taskExecutorResourceId, registration)___							slotManager.registerTaskManager(registration, slotReport)___							taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_								@Override_								public void receiveHeartbeat(ResourceID resourceID, Void payload) {_									_									_								}__								@Override_								public void requestHeartbeat(ResourceID resourceID, Void payload) {_									taskExecutorGateway.heartbeatFromResourceManager(resourceID)__								}_							})___							return new TaskExecutorRegistrationSuccess(_								registration.getInstanceID(),_								resourceId,_								resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__						}_					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522861;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)__		JobMasterLeaderListener jobMasterLeaderListener = jobMasterLeaderRetrievalListeners.get(jobId)___		UUID leaderID = jobMasterLeaderListener.getLeaderID()___		if (jobMasterGateway != null_				&& jobMasterLeaderID.equals(leaderID)_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,job,master,leader,listener,job,master,leader,listener,job,master,leader,retrieval,listeners,get,job,id,uuid,leader,id,job,master,leader,listener,get,leader,id,if,job,master,gateway,null,job,master,leader,id,equals,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522861;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)__		JobMasterLeaderListener jobMasterLeaderListener = jobMasterLeaderRetrievalListeners.get(jobId)___		UUID leaderID = jobMasterLeaderListener.getLeaderID()___		if (jobMasterGateway != null_				&& jobMasterLeaderID.equals(leaderID)_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,job,master,leader,listener,job,master,leader,listener,job,master,leader,retrieval,listeners,get,job,id,uuid,leader,id,job,master,leader,listener,get,leader,id,if,job,master,gateway,null,job,master,leader,id,equals,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522861;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)__		JobMasterLeaderListener jobMasterLeaderListener = jobMasterLeaderRetrievalListeners.get(jobId)___		UUID leaderID = jobMasterLeaderListener.getLeaderID()___		if (jobMasterGateway != null_				&& jobMasterLeaderID.equals(leaderID)_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,job,master,leader,listener,job,master,leader,listener,job,master,leader,retrieval,listeners,get,job,id,uuid,leader,id,job,master,leader,listener,get,leader,id,if,job,master,gateway,null,job,master,leader,id,equals,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1510063662;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1510063662;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1510063662;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1510063665;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1510152676;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1511963573;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1511963573;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1516890809;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1517915730;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1517920461;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1519406528;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1521554023;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1521804757;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1521804760;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1525452496;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522861;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522861;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522861;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522861;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522862;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522862;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522862;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522863;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522863;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522864;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522864;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522864;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522865;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522866;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1482522867;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1489413798;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1490031358;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1490090124;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1490273924;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1490273924;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1493146240;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1493308611;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1493386068;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1493975155;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1498718472;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1498718493;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1498718494;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1498923209;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1499250208;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1501084996;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1501485811;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1501620216;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1501660289;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1501760738;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1502452184;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1502706197;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1503156481;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1504477043;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1504525441;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1504608225;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1506034747;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1507825825;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1508597556;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1509547680;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1509547920;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1509547921;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1510063662;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1510063662;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1510063662;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1510063665;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1510152676;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1511963573;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1511963573;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1516890809;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1517915730;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1517920461;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1519406528;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1521554023;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1521804757;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1521804760;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1525452496;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1527173115;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1530472204;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1530542668;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1532290976;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1532383539;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1533306679;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1535545389;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1536842721;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1536846489;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1537479166;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1493308611;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1493386068;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1493975155;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1498718472;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1498718493;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1498718494;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1498923209;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1499250208;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1501084996;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1501485811;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1501620216;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1501660289;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1501760738;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1502452184;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1502706197;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1503156481;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1504477043;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1504525441;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1504608225;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1506034747;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1507825825;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1508597556;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1509547680;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1509547920;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1509547921;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1510063662;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1510063662;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1510063662;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1510063665;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1510152676;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1511963573;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1511963573;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1516890809;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1517915730;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1517920461;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1519406528;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1521554023;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1521804757;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1521804760;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1525452496;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1527173115;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1530472204;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1530542668;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1532290976;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1532383539;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1533306679;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1535545389;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1536842721;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1536846489;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1537479166;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1538127492;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1539176686;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1539176686;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1539582211;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1542299814;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1549545568;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1550005039;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1550683187;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotID);1482522862;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotID The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotID) {__		if (resourceManagerLeaderId.equals(leaderSessionID)) {_			final ResourceID resourceId = slotID.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationInstanceID = registration.getInstanceID()__				if (registrationInstanceID.equals(instanceID)) {_					runAsync(new Runnable() {_						@Override_						public void run() {_							slotManager.notifySlotAvailable(resourceId, slotID)__						}_					})__				}_			}_		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,instance,id,registration,get,instance,id,if,registration,instance,id,equals,instance,id,run,async,new,runnable,override,public,void,run,slot,manager,notify,slot,available,resource,id,slot,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotID);1482522862;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotID The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotID) {__		if (resourceManagerLeaderId.equals(leaderSessionID)) {_			final ResourceID resourceId = slotID.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationInstanceID = registration.getInstanceID()__				if (registrationInstanceID.equals(instanceID)) {_					runAsync(new Runnable() {_						@Override_						public void run() {_							slotManager.notifySlotAvailable(resourceId, slotID)__						}_					})__				}_			}_		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,instance,id,registration,get,instance,id,if,registration,instance,id,equals,instance,id,run,async,new,runnable,override,public,void,run,slot,manager,notify,slot,available,resource,id,slot,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotID);1482522863;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotID The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotID) {__		if (resourceManagerLeaderId.equals(leaderSessionID)) {_			final ResourceID resourceId = slotID.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationInstanceID = registration.getInstanceID()__				if (registrationInstanceID.equals(instanceID)) {_					runAsync(new Runnable() {_						@Override_						public void run() {_							slotManager.notifySlotAvailable(resourceId, slotID)__						}_					})__				}_			}_		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,instance,id,registration,get,instance,id,if,registration,instance,id,equals,instance,id,run,async,new,runnable,override,public,void,run,slot,manager,notify,slot,available,resource,id,slot,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotID);1482522863;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotID The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotID) {__		if (resourceManagerLeaderId.equals(leaderSessionID)) {_			final ResourceID resourceId = slotID.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationInstanceID = registration.getInstanceID()__				if (registrationInstanceID.equals(instanceID)) {_					runAsync(new Runnable() {_						@Override_						public void run() {_							slotManager.notifySlotAvailable(resourceId, slotID)__						}_					})__				}_			}_		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,instance,id,registration,get,instance,id,if,registration,instance,id,equals,instance,id,run,async,new,runnable,override,public,void,run,slot,manager,notify,slot,available,resource,id,slot,id
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1482522864;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1482522864;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1482522864;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1482522865;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1482522866;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1482522867;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1489413798;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1490031358;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1490090124;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1490273924;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1490273924;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1493146240;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1493308611;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1493386068;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1493975155;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1498718472;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1498718493;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1498718494;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1498923209;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1499250208;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1501084996;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1501485811;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1501620216;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1501660289;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1501760738;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1521804760;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1525452496;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1527173115;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1530472204;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1530542668;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1532290976;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1532383539;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1533306679;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1535545389;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1536842721;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1536846489;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1537479166;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1538127492;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1539176686;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1539176686;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1539582211;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1542299814;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1549545568;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1550005039;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1550683187;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1482522864;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionID != null) {_					clearState()__				}__				leaderSessionID = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1482522864;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1482522864;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1482522865;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1482522866;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1482522867;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1489413798;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1490031358;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1490090124;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1490273924;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1490273924;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1493146240;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1493308611;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1493386068;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1493975155;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1498718472;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1498718493;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1498718494;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1498923209;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1499250208;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1501084996;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1501485811;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1501620216;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1501660289;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1501760738;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1502452184;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1502706197;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1503156481;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1504477043;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1504525441;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1504608225;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1506034747;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1507825825;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1508597556;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1509547680;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1509547920;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1509547921;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1510063662;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1510063662;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1510063662;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1510063665;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1510152676;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1511963573;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1511963573;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1516890809;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1517915730;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1517920461;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1519406528;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1521554023;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1521804757;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1521804760;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1525452496;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.fromUuid(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,from,uuid,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1527173115;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.fromUuid(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,from,uuid,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1530472204;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.fromUuid(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,from,uuid,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1530542668;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.fromUuid(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,from,uuid,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1532290976;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.fromUuid(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,from,uuid,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1532383539;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.fromUuid(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,from,uuid,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1533306679;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1535545389;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1536842721;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1536846489;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1537479166;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1538127492;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1539176686;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1539176686;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1539582211;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1542299814;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1549545568;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1550005039;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1550683187;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1510152676;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1511963573;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1511963573;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1516890809;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1517915730;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1517920461;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1519406528;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1521554023;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1521804757;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1521804760;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1525452496;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1527173115;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1530472204;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1530542668;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1532290976;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1532383539;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1533306679;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1535545389;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1536842721;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1536846489;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1537479166;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1538127492;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1539176686;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1539176686;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1539582211;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1542299814;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1549545568;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1550005039;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1550683187;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> @Override 	public CompletableFuture<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 			final ResourceID taskExecutorResourceId, 			final SlotReport slotReport, 			final Time timeout);1502452184;Register a {@link TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@Override_	public CompletableFuture<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_			final ResourceID taskExecutorResourceId,_			final SlotReport slotReport,_			final Time timeout) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			CompletableFuture<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(_				(TaskExecutorGateway taskExecutorGateway, Throwable throwable) -> {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						return registerTaskExecutorInternal(_							taskExecutorGateway,_							taskExecutorAddress,_							taskExecutorResourceId,_							slotReport)__					}_				},_				getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return CompletableFuture.completedFuture(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;override,public,completable,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,final,time,timeout,if,objects,equals,leader,session,id,resource,manager,leader,id,completable,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,return,register,task,executor,internal,task,executor,gateway,task,executor,address,task,executor,resource,id,slot,report,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,completable,future,completed,future,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @Override 	public CompletableFuture<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 			final ResourceID taskExecutorResourceId, 			final SlotReport slotReport, 			final Time timeout);1502706197;Register a {@link TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@Override_	public CompletableFuture<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_			final ResourceID taskExecutorResourceId,_			final SlotReport slotReport,_			final Time timeout) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			CompletableFuture<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(_				(TaskExecutorGateway taskExecutorGateway, Throwable throwable) -> {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						return registerTaskExecutorInternal(_							taskExecutorGateway,_							taskExecutorAddress,_							taskExecutorResourceId,_							slotReport)__					}_				},_				getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return CompletableFuture.completedFuture(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;override,public,completable,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,final,time,timeout,if,objects,equals,leader,session,id,resource,manager,leader,id,completable,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,return,register,task,executor,internal,task,executor,gateway,task,executor,address,task,executor,resource,id,slot,report,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,completable,future,completed,future,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @Override 	public CompletableFuture<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 			final ResourceID taskExecutorResourceId, 			final SlotReport slotReport, 			final Time timeout);1503156481;Register a {@link TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@Override_	public CompletableFuture<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_			final ResourceID taskExecutorResourceId,_			final SlotReport slotReport,_			final Time timeout) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			CompletableFuture<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(_				(TaskExecutorGateway taskExecutorGateway, Throwable throwable) -> {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						return registerTaskExecutorInternal(_							taskExecutorGateway,_							taskExecutorAddress,_							taskExecutorResourceId,_							slotReport)__					}_				},_				getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return CompletableFuture.completedFuture(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;override,public,completable,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,final,time,timeout,if,objects,equals,leader,session,id,resource,manager,leader,id,completable,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,return,register,task,executor,internal,task,executor,gateway,task,executor,address,task,executor,resource,id,slot,report,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,completable,future,completed,future,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @Override 	public CompletableFuture<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 			final ResourceID taskExecutorResourceId, 			final SlotReport slotReport, 			final Time timeout);1504477043;Register a {@link TaskExecutor} at the resource manager.__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@Override_	public CompletableFuture<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_			final ResourceID taskExecutorResourceId,_			final SlotReport slotReport,_			final Time timeout) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			CompletableFuture<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(_				(TaskExecutorGateway taskExecutorGateway, Throwable throwable) -> {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						return registerTaskExecutorInternal(_							taskExecutorGateway,_							taskExecutorAddress,_							taskExecutorResourceId,_							slotReport)__					}_				},_				getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return CompletableFuture.completedFuture(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;override,public,completable,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,final,time,timeout,if,objects,equals,leader,session,id,resource,manager,leader,id,completable,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,return,register,task,executor,internal,task,executor,gateway,task,executor,address,task,executor,resource,id,slot,report,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,completable,future,completed,future,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522860;Shutdowns cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};shutdowns,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522861;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522861;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522861;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522861;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522862;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522862;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522862;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522863;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522863;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522864;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522864;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522864;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522865;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522866;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1482522867;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1489413798;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1490031358;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1490090124;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1490273924;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1490273924;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1493146240;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1493308611;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1493386068;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1493975155;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1498718472;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1498718493;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1498718494;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1498923209;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1499250208;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1501084996;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1501485811;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1501620216;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1501660289;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1501760738;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1533306679;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1535545389;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1536842721;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1536846489;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1537479166;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1538127492;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1539176686;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1539176686;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1539582211;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1542299814;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1549545568;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1550005039;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1550683187;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> void onFatalErrorAsync(final Throwable t);1482522864;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> void onFatalErrorAsync(final Throwable t);1482522864;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> void onFatalErrorAsync(final Throwable t);1482522864;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> void onFatalErrorAsync(final Throwable t);1482522865;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> void onFatalErrorAsync(final Throwable t);1482522866;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1498718494;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1498923209;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1499250208;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1501084996;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1501485811;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1501620216;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1501660289;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1501760738;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1502452184;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1502706197;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1503156481;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1504477043;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1504525441;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1504608225;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1506034747;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1507825825;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1508597556;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1509547680;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1509547920;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1509547921;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1510063662;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1510063662;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1510063662;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1510063665;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1510152676;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1511963573;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1511963573;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> public void onFatalError(final String message, final Throwable error);1482522860;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1482522861;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1482522861;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1482522861;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1482522861;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1482522862;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1482522862;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1482522862;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1482522863;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1482522863;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1482522864;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1482522864;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1482522865;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1482522866;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1482522867;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1489413798;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1490031358;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1490090124;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1490273924;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1490273924;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1493146240;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1527173115;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1530472204;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1530542668;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1532290976;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1532383539;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1533306679;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1535545389;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1536842721;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1536846489;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1537479166;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1538127492;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1539176686;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1539176686;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1539582211;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1542299814;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1549545568;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1550005039;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1550683187;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		UUID jobLeaderId, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1501660289;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobLeaderId leader id of the JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		UUID jobLeaderId,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (oldJobManagerRegistration.getLeaderID().equals(jobLeaderId)) {_				_				log.debug("Job manager {}@{} was already registered.", jobLeaderId, jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobLeaderId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobLeaderId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobLeaderId, jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getLeaderSessionId(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,leader,id,leader,id,of,the,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,uuid,job,leader,id,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,old,job,manager,registration,get,leader,id,equals,job,leader,id,log,debug,job,manager,was,already,registered,job,leader,id,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,leader,id,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,leader,session,id,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		UUID jobLeaderId, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1501760738;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobLeaderId leader id of the JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		UUID jobLeaderId,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (oldJobManagerRegistration.getLeaderID().equals(jobLeaderId)) {_				_				log.debug("Job manager {}@{} was already registered.", jobLeaderId, jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobLeaderId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobLeaderId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobLeaderId, jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getLeaderSessionId(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,leader,id,leader,id,of,the,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,uuid,job,leader,id,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,old,job,manager,registration,get,leader,id,equals,job,leader,id,log,debug,job,manager,was,already,registered,job,leader,id,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,leader,id,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,leader,session,id,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		UUID jobLeaderId, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1502452184;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobLeaderId leader id of the JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		UUID jobLeaderId,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (oldJobManagerRegistration.getLeaderID().equals(jobLeaderId)) {_				_				log.debug("Job manager {}@{} was already registered.", jobLeaderId, jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobLeaderId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobLeaderId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobLeaderId, jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getLeaderSessionId(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,leader,id,leader,id,of,the,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,uuid,job,leader,id,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,old,job,manager,registration,get,leader,id,equals,job,leader,id,log,debug,job,manager,was,already,registered,job,leader,id,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,leader,id,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,leader,session,id,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		UUID jobLeaderId, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1502706197;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobLeaderId leader id of the JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		UUID jobLeaderId,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (oldJobManagerRegistration.getLeaderID().equals(jobLeaderId)) {_				_				log.debug("Job manager {}@{} was already registered.", jobLeaderId, jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobLeaderId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobLeaderId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobLeaderId, jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getLeaderSessionId(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,leader,id,leader,id,of,the,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,uuid,job,leader,id,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,old,job,manager,registration,get,leader,id,equals,job,leader,id,log,debug,job,manager,was,already,registered,job,leader,id,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,leader,id,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,leader,session,id,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		UUID jobLeaderId, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1503156481;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobLeaderId leader id of the JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		UUID jobLeaderId,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (oldJobManagerRegistration.getLeaderID().equals(jobLeaderId)) {_				_				log.debug("Job manager {}@{} was already registered.", jobLeaderId, jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobLeaderId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobLeaderId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobLeaderId, jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getLeaderSessionId(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,leader,id,leader,id,of,the,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,uuid,job,leader,id,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,old,job,manager,registration,get,leader,id,equals,job,leader,id,log,debug,job,manager,was,already,registered,job,leader,id,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,leader,id,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,leader,session,id,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		UUID jobLeaderId, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1504477043;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobLeaderId leader id of the JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		UUID jobLeaderId,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (oldJobManagerRegistration.getLeaderID().equals(jobLeaderId)) {_				_				log.debug("Job manager {}@{} was already registered.", jobLeaderId, jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobLeaderId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobLeaderId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobLeaderId, jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getLeaderSessionId(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,leader,id,leader,id,of,the,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,uuid,job,leader,id,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,old,job,manager,registration,get,leader,id,equals,job,leader,id,log,debug,job,manager,was,already,registered,job,leader,id,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,leader,id,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,leader,session,id,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		UUID jobLeaderId, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1504525441;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobLeaderId leader id of the JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		UUID jobLeaderId,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (oldJobManagerRegistration.getLeaderID().equals(jobLeaderId)) {_				_				log.debug("Job manager {}@{} was already registered.", jobLeaderId, jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobLeaderId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobLeaderId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobLeaderId, jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,leader,id,leader,id,of,the,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,uuid,job,leader,id,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,old,job,manager,registration,get,leader,id,equals,job,leader,id,log,debug,job,manager,was,already,registered,job,leader,id,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,leader,id,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1482522864;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1482522864;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1482522865;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1482522866;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1482522867;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1489413798;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1490031358;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1490090124;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1490273924;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1490273924;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1493146240;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1493308611;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1493386068;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1493975155;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1498718472;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1498718493;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1498718494;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1498923209;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1499250208;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1501084996;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1501485811;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1501620216;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1501660289;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1501760738;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1502452184;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1502706197;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1503156481;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1504477043;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1482522861;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)_					.get(timeout.toMilliseconds(), timeout.getUnit())__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerRegistration oldRegistration = taskExecutors.remove(resourceID)__					if (oldRegistration != null) {_						_						log.info("Replacing old instance of worker for ResourceID {}", resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					WorkerRegistration<WorkerType> registration =_						new WorkerRegistration<>(taskExecutorGateway, newWorker)__					taskExecutors.put(resourceID, registration)__					slotManager.registerTaskExecutor(resourceID, registration, slotReport)__					return new TaskExecutorRegistrationSuccess(registration.getInstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,timeout,to,milliseconds,timeout,get,unit,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1482522862;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)_					.get(timeout.toMilliseconds(), timeout.getUnit())__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerRegistration oldRegistration = taskExecutors.remove(resourceID)__					if (oldRegistration != null) {_						_						log.info("Replacing old instance of worker for ResourceID {}", resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					WorkerRegistration<WorkerType> registration =_						new WorkerRegistration<>(taskExecutorGateway, newWorker)__					taskExecutors.put(resourceID, registration)__					slotManager.registerTaskExecutor(resourceID, registration, slotReport)__					return new TaskExecutorRegistrationSuccess(registration.getInstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,timeout,to,milliseconds,timeout,get,unit,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1482522862;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)_					.get(timeout.toMilliseconds(), timeout.getUnit())__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerRegistration oldRegistration = taskExecutors.remove(resourceID)__					if (oldRegistration != null) {_						_						log.info("Replacing old instance of worker for ResourceID {}", resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					WorkerRegistration<WorkerType> registration =_						new WorkerRegistration<>(taskExecutorGateway, newWorker)__					taskExecutors.put(resourceID, registration)__					slotManager.registerTaskExecutor(resourceID, registration, slotReport)__					return new TaskExecutorRegistrationSuccess(registration.getInstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,timeout,to,milliseconds,timeout,get,unit,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1482522862;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)_					.get(timeout.toMilliseconds(), timeout.getUnit())__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerRegistration oldRegistration = taskExecutors.remove(resourceID)__					if (oldRegistration != null) {_						_						log.info("Replacing old instance of worker for ResourceID {}", resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					WorkerRegistration<WorkerType> registration =_						new WorkerRegistration<>(taskExecutorGateway, newWorker)__					taskExecutors.put(resourceID, registration)__					slotManager.registerTaskExecutor(resourceID, registration, slotReport)__					return new TaskExecutorRegistrationSuccess(registration.getInstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,timeout,to,milliseconds,timeout,get,unit,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1482522863;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)_					.get(timeout.toMilliseconds(), timeout.getUnit())__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerRegistration oldRegistration = taskExecutors.remove(resourceID)__					if (oldRegistration != null) {_						_						log.info("Replacing old instance of worker for ResourceID {}", resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					WorkerRegistration<WorkerType> registration =_						new WorkerRegistration<>(taskExecutorGateway, newWorker)__					taskExecutors.put(resourceID, registration)__					slotManager.registerTaskExecutor(resourceID, registration, slotReport)__					return new TaskExecutorRegistrationSuccess(registration.getInstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,timeout,to,milliseconds,timeout,get,unit,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1482522863;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)_					.get(timeout.toMilliseconds(), timeout.getUnit())__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerRegistration oldRegistration = taskExecutors.remove(resourceID)__					if (oldRegistration != null) {_						_						log.info("Replacing old instance of worker for ResourceID {}", resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					WorkerRegistration<WorkerType> registration =_						new WorkerRegistration<>(taskExecutorGateway, newWorker)__					taskExecutors.put(resourceID, registration)__					slotManager.registerTaskExecutor(resourceID, registration, slotReport)__					return new TaskExecutorRegistrationSuccess(registration.getInstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,timeout,to,milliseconds,timeout,get,unit,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1482522864;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionID.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionID + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1482522864;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1482522864;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1482522865;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1482522866;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1482522867;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1489413798;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1490031358;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1490090124;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest, 			final Time timeout);1502452184;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@Override_	public CompletableFuture<Acknowledge> requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest,_			final Time timeout) {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			return FutureUtils.completedExceptionally(new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId))__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				try {_					slotManager.registerSlotRequest(slotRequest)__				} catch (SlotManagerException e) {_					return FutureUtils.completedExceptionally(e)__				}__				return CompletableFuture.completedFuture(Acknowledge.get())__			} else {_				return FutureUtils.completedExceptionally(new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID()))__			}__		} else {_			return FutureUtils.completedExceptionally(new ResourceManagerException("Could not find registered job manager for job " + jobId + '.'))__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;override,public,completable,future,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,final,time,timeout,if,objects,equals,resource,manager,leader,id,leader,session,id,return,future,utils,completed,exceptionally,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,return,future,utils,completed,exceptionally,e,return,completable,future,completed,future,acknowledge,get,else,return,future,utils,completed,exceptionally,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,return,future,utils,completed,exceptionally,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest, 			final Time timeout);1502706197;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@Override_	public CompletableFuture<Acknowledge> requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest,_			final Time timeout) {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			return FutureUtils.completedExceptionally(new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId))__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				try {_					slotManager.registerSlotRequest(slotRequest)__				} catch (SlotManagerException e) {_					return FutureUtils.completedExceptionally(e)__				}__				return CompletableFuture.completedFuture(Acknowledge.get())__			} else {_				return FutureUtils.completedExceptionally(new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID()))__			}__		} else {_			return FutureUtils.completedExceptionally(new ResourceManagerException("Could not find registered job manager for job " + jobId + '.'))__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;override,public,completable,future,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,final,time,timeout,if,objects,equals,resource,manager,leader,id,leader,session,id,return,future,utils,completed,exceptionally,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,return,future,utils,completed,exceptionally,e,return,completable,future,completed,future,acknowledge,get,else,return,future,utils,completed,exceptionally,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,return,future,utils,completed,exceptionally,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest, 			final Time timeout);1503156481;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@Override_	public CompletableFuture<Acknowledge> requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest,_			final Time timeout) {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			return FutureUtils.completedExceptionally(new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId))__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				try {_					slotManager.registerSlotRequest(slotRequest)__				} catch (SlotManagerException e) {_					return FutureUtils.completedExceptionally(e)__				}__				return CompletableFuture.completedFuture(Acknowledge.get())__			} else {_				return FutureUtils.completedExceptionally(new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID()))__			}__		} else {_			return FutureUtils.completedExceptionally(new ResourceManagerException("Could not find registered job manager for job " + jobId + '.'))__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;override,public,completable,future,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,final,time,timeout,if,objects,equals,resource,manager,leader,id,leader,session,id,return,future,utils,completed,exceptionally,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,return,future,utils,completed,exceptionally,e,return,completable,future,completed,future,acknowledge,get,else,return,future,utils,completed,exceptionally,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,return,future,utils,completed,exceptionally,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest, 			final Time timeout);1504477043;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@Override_	public CompletableFuture<Acknowledge> requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest,_			final Time timeout) {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			return FutureUtils.completedExceptionally(new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId))__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				try {_					slotManager.registerSlotRequest(slotRequest)__				} catch (SlotManagerException e) {_					return FutureUtils.completedExceptionally(e)__				}__				return CompletableFuture.completedFuture(Acknowledge.get())__			} else {_				return FutureUtils.completedExceptionally(new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID()))__			}__		} else {_			return FutureUtils.completedExceptionally(new ResourceManagerException("Could not find registered job manager for job " + jobId + '.'))__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;override,public,completable,future,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,final,time,timeout,if,objects,equals,resource,manager,leader,id,leader,session,id,return,future,utils,completed,exceptionally,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,return,future,utils,completed,exceptionally,e,return,completable,future,completed,future,acknowledge,get,else,return,future,utils,completed,exceptionally,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,return,future,utils,completed,exceptionally,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1482522860;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1482522861;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1482522861;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1482522861;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1482522861;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1482522862;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1482522862;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1482522862;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1482522863;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1482522863;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> public int getNumberOfStartedTaskManagers();1482522860;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutorGateways.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executor,gateways,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1482522861;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutorGateways.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executor,gateways,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1482522861;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutorGateways.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executor,gateways,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1482522861;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutorGateways.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executor,gateways,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1482522861;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutors.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executors,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1482522862;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutors.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executors,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1482522862;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutors.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executors,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1482522862;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutors.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executors,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1482522863;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutors.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executors,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1482522863;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutors.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executors,size
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1508597556;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1509547680;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1509547920;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1509547921;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1510063662;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1510063662;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1510063662;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1510063665;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> @Override 	public void shutDownCluster( 			final ApplicationStatus finalStatus, 			@Nullable final String optionalDiagnostics);1516890809;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics diagnostics message for the Flink application or {@code null};@Override_	public void shutDownCluster(_			final ApplicationStatus finalStatus,_			@Nullable final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,void,shut,down,cluster,final,application,status,final,status,nullable,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster( 			final ApplicationStatus finalStatus, 			@Nullable final String optionalDiagnostics);1517915730;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics diagnostics message for the Flink application or {@code null};@Override_	public void shutDownCluster(_			final ApplicationStatus finalStatus,_			@Nullable final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,void,shut,down,cluster,final,application,status,final,status,nullable,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster( 			final ApplicationStatus finalStatus, 			@Nullable final String optionalDiagnostics);1517920461;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics diagnostics message for the Flink application or {@code null};@Override_	public void shutDownCluster(_			final ApplicationStatus finalStatus,_			@Nullable final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,void,shut,down,cluster,final,application,status,final,status,nullable,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster( 			final ApplicationStatus finalStatus, 			@Nullable final String optionalDiagnostics);1519406528;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics diagnostics message for the Flink application or {@code null};@Override_	public void shutDownCluster(_			final ApplicationStatus finalStatus,_			@Nullable final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,void,shut,down,cluster,final,application,status,final,status,nullable,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster( 			final ApplicationStatus finalStatus, 			@Nullable final String optionalDiagnostics);1521554023;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics diagnostics message for the Flink application or {@code null};@Override_	public void shutDownCluster(_			final ApplicationStatus finalStatus,_			@Nullable final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,void,shut,down,cluster,final,application,status,final,status,nullable,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster( 			final ApplicationStatus finalStatus, 			@Nullable final String optionalDiagnostics);1521804757;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics diagnostics message for the Flink application or {@code null};@Override_	public void shutDownCluster(_			final ApplicationStatus finalStatus,_			@Nullable final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,void,shut,down,cluster,final,application,status,final,status,nullable,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor( 			UUID resourceManagerLeaderId, 			String taskExecutorAddress, 			ResourceID resourceID);1482522858;@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor(_			UUID resourceManagerLeaderId,_			String taskExecutorAddress,_			ResourceID resourceID) {__		return new TaskExecutorRegistrationSuccess(new InstanceID(), 5000)__	};param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,org,apache,flink,runtime,registration,registration,response,register,task,executor,uuid,resource,manager,leader,id,string,task,executor,address,resource,id,resource,id,return,new,task,executor,registration,success,new,instance,id,5000
ResourceManager -> @RpcMethod 	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor( 			UUID resourceManagerLeaderId, 			String taskExecutorAddress, 			ResourceID resourceID);1482522858;@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor(_			UUID resourceManagerLeaderId,_			String taskExecutorAddress,_			ResourceID resourceID) {__		return new TaskExecutorRegistrationSuccess(new InstanceID(), 5000)__	};param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,org,apache,flink,runtime,registration,registration,response,register,task,executor,uuid,resource,manager,leader,id,string,task,executor,address,resource,id,resource,id,return,new,task,executor,registration,success,new,instance,id,5000
ResourceManager -> @RpcMethod 	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor( 			UUID resourceManagerLeaderId, 			String taskExecutorAddress, 			ResourceID resourceID);1482522859;@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor(_			UUID resourceManagerLeaderId,_			String taskExecutorAddress,_			ResourceID resourceID) {__		return new TaskExecutorRegistrationSuccess(new InstanceID(), 5000)__	};param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,org,apache,flink,runtime,registration,registration,response,register,task,executor,uuid,resource,manager,leader,id,string,task,executor,address,resource,id,resource,id,return,new,task,executor,registration,success,new,instance,id,5000
ResourceManager -> @RpcMethod 	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor( 			UUID resourceManagerLeaderId, 			String taskExecutorAddress, 			ResourceID resourceID);1482522859;@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor(_			UUID resourceManagerLeaderId,_			String taskExecutorAddress,_			ResourceID resourceID) {__		return new TaskExecutorRegistrationSuccess(new InstanceID(), 5000)__	};param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,org,apache,flink,runtime,registration,registration,response,register,task,executor,uuid,resource,manager,leader,id,string,task,executor,address,resource,id,resource,id,return,new,task,executor,registration,success,new,instance,id,5000
ResourceManager -> @RpcMethod 	public SlotAvailableReply notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final ResourceID resourceID, 			final InstanceID instanceID, 			final SlotID slotID);1482522861;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param resourceID TaskExecutor's resource id_@param instanceID TaskExecutor's instance id_@param slotID The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public SlotAvailableReply notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final ResourceID resourceID,_			final InstanceID instanceID,_			final SlotID slotID) {__		if (resourceManagerLeaderId.equals(leaderSessionID)) {_			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceID)__			if (registration != null) {_				InstanceID registrationInstanceID = registration.getInstanceID()__				if (registrationInstanceID.equals(instanceID)) {_					runAsync(new Runnable() {_						@Override_						public void run() {_							slotManager.notifySlotAvailable(resourceID, slotID)__						}_					})__					return new SlotAvailableReply(leaderSessionID, slotID)__				}_			}_		}_		return null__	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,resource,id,task,executor,s,resource,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,slot,available,reply,notify,slot,available,final,uuid,resource,manager,leader,id,final,resource,id,resource,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,instance,id,registration,get,instance,id,if,registration,instance,id,equals,instance,id,run,async,new,runnable,override,public,void,run,slot,manager,notify,slot,available,resource,id,slot,id,return,new,slot,available,reply,leader,session,id,slot,id,return,null
ResourceManager -> @RpcMethod 	public SlotAvailableReply notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final ResourceID resourceID, 			final InstanceID instanceID, 			final SlotID slotID);1482522862;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param resourceID TaskExecutor's resource id_@param instanceID TaskExecutor's instance id_@param slotID The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public SlotAvailableReply notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final ResourceID resourceID,_			final InstanceID instanceID,_			final SlotID slotID) {__		if (resourceManagerLeaderId.equals(leaderSessionID)) {_			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceID)__			if (registration != null) {_				InstanceID registrationInstanceID = registration.getInstanceID()__				if (registrationInstanceID.equals(instanceID)) {_					runAsync(new Runnable() {_						@Override_						public void run() {_							slotManager.notifySlotAvailable(resourceID, slotID)__						}_					})__					return new SlotAvailableReply(leaderSessionID, slotID)__				}_			}_		}_		return null__	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,resource,id,task,executor,s,resource,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,slot,available,reply,notify,slot,available,final,uuid,resource,manager,leader,id,final,resource,id,resource,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,instance,id,registration,get,instance,id,if,registration,instance,id,equals,instance,id,run,async,new,runnable,override,public,void,run,slot,manager,notify,slot,available,resource,id,slot,id,return,new,slot,available,reply,leader,session,id,slot,id,return,null
ResourceManager -> public abstract void stopWorker(ResourceID resourceID)_;1503156481;Deallocates a resource.__@param resourceID The resource ID;public abstract void stopWorker(ResourceID resourceID)_;deallocates,a,resource,param,resource,id,the,resource,id;public,abstract,void,stop,worker,resource,id,resource,id
ResourceManager -> public abstract void stopWorker(ResourceID resourceID)_;1504477043;Deallocates a resource.__@param resourceID The resource ID;public abstract void stopWorker(ResourceID resourceID)_;deallocates,a,resource,param,resource,id,the,resource,id;public,abstract,void,stop,worker,resource,id,resource,id
ResourceManager -> public abstract void stopWorker(ResourceID resourceID)_;1504525441;Deallocates a resource.__@param resourceID The resource ID;public abstract void stopWorker(ResourceID resourceID)_;deallocates,a,resource,param,resource,id,the,resource,id;public,abstract,void,stop,worker,resource,id,resource,id
ResourceManager -> public abstract void stopWorker(ResourceID resourceID)_;1504608225;Deallocates a resource.__@param resourceID The resource ID;public abstract void stopWorker(ResourceID resourceID)_;deallocates,a,resource,param,resource,id,the,resource,id;public,abstract,void,stop,worker,resource,id,resource,id
ResourceManager -> public abstract void stopWorker(ResourceID resourceID)_;1506034747;Deallocates a resource.__@param resourceID The resource ID;public abstract void stopWorker(ResourceID resourceID)_;deallocates,a,resource,param,resource,id,the,resource,id;public,abstract,void,stop,worker,resource,id,resource,id
ResourceManager -> public abstract void stopWorker(ResourceID resourceID)_;1507825825;Deallocates a resource.__@param resourceID The resource ID;public abstract void stopWorker(ResourceID resourceID)_;deallocates,a,resource,param,resource,id,the,resource,id;public,abstract,void,stop,worker,resource,id,resource,id
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1502452184;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1502706197;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1503156481;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1504477043;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1504525441;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1504608225;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1506034747;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1507825825;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1508597556;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1509547680;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1509547920;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1509547921;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1510063662;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1510063662;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1510063662;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1510063665;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1510152676;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1511963573;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1511963573;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522861;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522861;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522861;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522861;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522862;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522862;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522862;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522863;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522863;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522864;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522864;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522864;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522865;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522866;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1482522867;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1489413798;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1490031358;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1490090124;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1490273924;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1490273924;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1493146240;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1493308611;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1493386068;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1493975155;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1498718472;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1498718493;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1498718494;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1498923209;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1499250208;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1501084996;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1501485811;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1501620216;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1501660289;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1501760738;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1502452184;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1502706197;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1503156481;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1504477043;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1504525441;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1504608225;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1506034747;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1507825825;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1508597556;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1509547680;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1509547920;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1509547921;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1510063662;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1510063662;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1510063662;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1510063665;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1510152676;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1511963573;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1511963573;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1516890809;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1517915730;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1517920461;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1519406528;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1521554023;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1521804757;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1521804760;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1525452496;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1527173115;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1530472204;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1530542668;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1532290976;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1532383539;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1533306679;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1535545389;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1536842721;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1536846489;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1537479166;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1538127492;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1539176686;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1539176686;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1539582211;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1542299814;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1549545568;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1550005039;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1550683187;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1501660289;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1501760738;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1502452184;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1502706197;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1503156481;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1504477043;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1504525441;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1504608225;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1506034747;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1507825825;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1508597556;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1509547680;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1509547920;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1509547921;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1482522860;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1482522861;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1482522861;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1482522861;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1482522861;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1482522862;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1482522862;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1482522862;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1482522863;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1482522863;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1482522864;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1482522864;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1482522865;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1482522866;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1482522867;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1489413798;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1490031358;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1490090124;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1490273924;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1490273924;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1493146240;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1493308611;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1493386068;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1493975155;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1498718472;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1498718493;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1498718494;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1498923209;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1499250208;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1501084996;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1501485811;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1501620216;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1501660289;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1501760738;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1502452184;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1502706197;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1503156481;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1504477043;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1504525441;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1504608225;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1506034747;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1507825825;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1508597556;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1509547680;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1509547920;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1509547921;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1510063662;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1510063662;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1510063662;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1510063665;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1510152676;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1511963573;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1511963573;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1516890809;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1517915730;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1517920461;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1519406528;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1521554023;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1521804757;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1521804760;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1525452496;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1527173115;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1530472204;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1530542668;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1532290976;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1532383539;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1533306679;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1535545389;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1536842721;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1536846489;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1537479166;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1538127492;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1539176686;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1539176686;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1539582211;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1542299814;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1549545568;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1550005039;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1550683187;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522858;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.error("ResourceManager received an error from the LeaderElectionService.", exception)__				_				slotManager.handleError(exception)__				_				shutDown()__			}_		})__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,run,async,new,runnable,override,public,void,run,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,slot,manager,handle,error,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522859;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.error("ResourceManager received an error from the LeaderElectionService.", exception)__				_				slotManager.handleError(exception)__				_				shutDown()__			}_		})__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,run,async,new,runnable,override,public,void,run,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,slot,manager,handle,error,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522859;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.error("ResourceManager received an error from the LeaderElectionService.", exception)__				_				slotManager.handleError(exception)__				_				shutDown()__			}_		})__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,run,async,new,runnable,override,public,void,run,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,slot,manager,handle,error,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522859;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522859;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522860;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522861;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522861;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522861;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522861;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522862;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522862;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522862;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522863;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522863;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522864;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522864;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522864;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522865;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522866;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1482522867;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1489413798;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1490031358;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1490090124;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1490273924;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1490273924;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1493146240;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1493308611;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1493386068;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1493975155;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1498718472;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1498718493;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1498718494;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1498923209;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1499250208;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1501084996;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1501485811;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1501620216;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1501660289;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1501760738;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1502452184;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1502706197;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1503156481;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1504477043;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1504525441;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1504608225;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1506034747;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1507825825;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1508597556;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1509547680;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1509547920;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1509547921;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1510063662;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1510063662;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1510063662;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1510063665;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1510152676;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1511963573;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1511963573;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1516890809;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1517915730;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1517920461;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1519406528;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1521554023;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1521804757;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1521804760;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1525452496;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1527173115;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1530472204;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1530542668;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1532290976;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1532383539;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1533306679;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1535545389;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1536842721;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1536846489;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1537479166;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1538127492;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1539176686;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1539176686;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1539582211;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1542299814;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1549545568;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1550005039;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1550683187;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1482522864;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1482522864;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1482522864;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1482522865;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1482522866;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1482522867;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1489413798;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1490031358;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1490090124;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1490273924;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1490273924;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1493146240;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1493308611;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1493386068;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1493975155;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1498718472;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1498718493;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1498718494;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1498923209;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1499250208;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1501084996;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1501485811;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1501620216;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1501660289;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = FutureUtils.toJava(_				getRpcService().connect(address, InfoMessageListenerRpcGateway.class))___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,future,utils,to,java,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1501760738;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> ResourceManagerLeaderContender -> @Override 		public void revokeLeadership();1482522858;Callback method when current resourceManager lose leadership.;@Override_		public void revokeLeadership() {_			runAsync(new Runnable() {_				@Override_				public void run() {_					log.info("ResourceManager {} was revoked leadership.", getAddress())__					jobMasterGateways.clear()__					leaderSessionID = null__				}_			})__		};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,leader,session,id,null
ResourceManager -> ResourceManagerLeaderContender -> @Override 		public void revokeLeadership();1482522859;Callback method when current resourceManager lose leadership.;@Override_		public void revokeLeadership() {_			runAsync(new Runnable() {_				@Override_				public void run() {_					log.info("ResourceManager {} was revoked leadership.", getAddress())__					jobMasterGateways.clear()__					startedTaskExecutorGateways.clear()__					leaderSessionID = null__				}_			})__		};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,started,task,executor,gateways,clear,leader,session,id,null
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID);1482522859;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID) {__		if(!leaderSessionID.equals(resourceManagerLeaderId)) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__			return Futures.failed(new LeaderSessionIDException(leaderSessionID, resourceManagerLeaderId))__		}__		Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___		return taskExecutorGatewayFuture.map(new Mapper<TaskExecutorGateway, RegistrationResponse>() {__			@Override_			public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway) {_				InstanceID instanceID = null__				TaskExecutorRegistration taskExecutorRegistration = startedTaskExecutorGateways.get(resourceID)__				if(taskExecutorRegistration != null) {_					log.warn("Receive a duplicate registration from TaskExecutor {} at ({})", resourceID, taskExecutorAddress)__					instanceID = taskExecutorRegistration.getInstanceID()__				} else {_					instanceID = new InstanceID()__					startedTaskExecutorGateways.put(resourceID, new TaskExecutorRegistration(taskExecutorGateway, instanceID))__				}__				return new TaskExecutorRegistrationSuccess(instanceID, 5000)__			}_		}, getMainThreadExecutionContext())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,futures,failed,new,leader,session,idexception,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,map,new,mapper,task,executor,gateway,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,instance,id,instance,id,null,task,executor,registration,task,executor,registration,started,task,executor,gateways,get,resource,id,if,task,executor,registration,null,log,warn,receive,a,duplicate,registration,from,task,executor,at,resource,id,task,executor,address,instance,id,task,executor,registration,get,instance,id,else,instance,id,new,instance,id,started,task,executor,gateways,put,resource,id,new,task,executor,registration,task,executor,gateway,instance,id,return,new,task,executor,registration,success,instance,id,5000,get,main,thread,execution,context
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID);1482522859;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}__				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class).get(5, TimeUnit.SECONDS)__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					InstanceID id = new InstanceID()__					TaskExecutorRegistration oldTaskExecutor =_						taskExecutorGateways.put(resourceID, new TaskExecutorRegistration(taskExecutorGateway, id))__					if (oldTaskExecutor != null) {_						log.warn("Receive a duplicate registration from TaskExecutor {} at ({})", resourceID, taskExecutorAddress)__					}_					return new TaskExecutorRegistrationSuccess(id, 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,instance,id,id,new,instance,id,task,executor,registration,old,task,executor,task,executor,gateways,put,resource,id,new,task,executor,registration,task,executor,gateway,id,if,old,task,executor,null,log,warn,receive,a,duplicate,registration,from,task,executor,at,resource,id,task,executor,address,return,new,task,executor,registration,success,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID);1482522860;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}__				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class).get(5, TimeUnit.SECONDS)__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerType startedWorker = taskExecutorGateways.get(resourceID)__					if(startedWorker != null) {_						String oldWorkerAddress = startedWorker.getTaskExecutorGateway().getAddress()__						if (taskExecutorAddress.equals(oldWorkerAddress)) {_							log.warn("Receive a duplicate registration from TaskExecutor {} at ({})", resourceID, taskExecutorAddress)__						} else {_							log.warn("Receive a duplicate registration from TaskExecutor {} at different address, previous ({}), new ({})",_								resourceID, oldWorkerAddress, taskExecutorAddress)__							_							slotManager.notifyTaskManagerFailure(resourceID)__							startedWorker = workerStarted(resourceID, taskExecutorGateway)__							taskExecutorGateways.put(resourceID, startedWorker)__						}_					} else {_						startedWorker = workerStarted(resourceID, taskExecutorGateway)__						taskExecutorGateways.put(resourceID, startedWorker)__					}_					return new TaskExecutorRegistrationSuccess(startedWorker.getInstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,type,started,worker,task,executor,gateways,get,resource,id,if,started,worker,null,string,old,worker,address,started,worker,get,task,executor,gateway,get,address,if,task,executor,address,equals,old,worker,address,log,warn,receive,a,duplicate,registration,from,task,executor,at,resource,id,task,executor,address,else,log,warn,receive,a,duplicate,registration,from,task,executor,at,different,address,previous,new,resource,id,old,worker,address,task,executor,address,slot,manager,notify,task,manager,failure,resource,id,started,worker,worker,started,resource,id,task,executor,gateway,task,executor,gateways,put,resource,id,started,worker,else,started,worker,worker,started,resource,id,task,executor,gateway,task,executor,gateways,put,resource,id,started,worker,return,new,task,executor,registration,success,started,worker,get,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID);1482522861;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class).get(5, TimeUnit.SECONDS)__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerType oldWorker = taskExecutorGateways.remove(resourceID)__					if (oldWorker != null) {_						_						slotManager.notifyTaskManagerFailure(resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					taskExecutorGateways.put(resourceID, newWorker)__					return new TaskExecutorRegistrationSuccess(new InstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,type,old,worker,task,executor,gateways,remove,resource,id,if,old,worker,null,slot,manager,notify,task,manager,failure,resource,id,worker,type,new,worker,worker,started,resource,id,task,executor,gateways,put,resource,id,new,worker,return,new,task,executor,registration,success,new,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID);1482522861;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class).get(5, TimeUnit.SECONDS)__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerType oldWorker = taskExecutorGateways.remove(resourceID)__					if (oldWorker != null) {_						_						slotManager.notifyTaskManagerFailure(resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					taskExecutorGateways.put(resourceID, newWorker)__					return new TaskExecutorRegistrationSuccess(new InstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,type,old,worker,task,executor,gateways,remove,resource,id,if,old,worker,null,slot,manager,notify,task,manager,failure,resource,id,worker,type,new,worker,worker,started,resource,id,task,executor,gateways,put,resource,id,new,worker,return,new,task,executor,registration,success,new,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID);1482522861;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class).get(5, TimeUnit.SECONDS)__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerType oldWorker = taskExecutorGateways.remove(resourceID)__					if (oldWorker != null) {_						_						slotManager.notifyTaskManagerFailure(resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					taskExecutorGateways.put(resourceID, newWorker)__					return new TaskExecutorRegistrationSuccess(new InstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,type,old,worker,task,executor,gateways,remove,resource,id,if,old,worker,null,slot,manager,notify,task,manager,failure,resource,id,worker,type,new,worker,worker,started,resource,id,task,executor,gateways,put,resource,id,new,worker,return,new,task,executor,registration,success,new,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot(SlotRequest slotRequest);1482522858;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(SlotRequest slotRequest) {_		final JobID jobId = slotRequest.getJobId()__		final JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)___		if (jobMasterGateway != null) {_			return slotManager.requestSlot(slotRequest)__		} else {_			LOG.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,slot,request,slot,request,final,job,id,job,id,slot,request,get,job,id,final,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,if,job,master,gateway,null,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot(SlotRequest slotRequest);1482522859;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(SlotRequest slotRequest) {_		final JobID jobId = slotRequest.getJobId()__		final JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)___		if (jobMasterGateway != null) {_			return slotManager.requestSlot(slotRequest)__		} else {_			LOG.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,slot,request,slot,request,final,job,id,job,id,slot,request,get,job,id,final,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,if,job,master,gateway,null,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot(SlotRequest slotRequest);1482522859;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(SlotRequest slotRequest) {_		final JobID jobId = slotRequest.getJobId()__		final JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)___		if (jobMasterGateway != null) {_			return slotManager.requestSlot(slotRequest)__		} else {_			LOG.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,slot,request,slot,request,final,job,id,job,id,slot,request,get,job,id,final,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,if,job,master,gateway,null,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot(SlotRequest slotRequest);1482522859;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(SlotRequest slotRequest) {_		final JobID jobId = slotRequest.getJobId()__		final JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)___		if (jobMasterGateway != null) {_			return slotManager.requestSlot(slotRequest)__		} else {_			LOG.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,slot,request,slot,request,final,job,id,job,id,slot,request,get,job,id,final,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,if,job,master,gateway,null,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot(SlotRequest slotRequest);1482522859;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(SlotRequest slotRequest) {_		final JobID jobId = slotRequest.getJobId()__		final JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)___		if (jobMasterGateway != null) {_			return slotManager.requestSlot(slotRequest)__		} else {_			LOG.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,slot,request,slot,request,final,job,id,job,id,slot,request,get,job,id,final,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,if,job,master,gateway,null,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot(SlotRequest slotRequest);1482522860;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(SlotRequest slotRequest) {_		final JobID jobId = slotRequest.getJobId()__		final JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)___		if (jobMasterGateway != null) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,slot,request,slot,request,final,job,id,job,id,slot,request,get,job,id,final,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,if,job,master,gateway,null,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522860;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522861;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522861;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522861;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522861;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522862;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522862;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522862;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522863;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522863;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522864;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522864;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522864;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522865;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522866;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1482522867;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1489413798;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1490031358;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1490090124;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1490273924;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1490273924;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1493146240;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1493308611;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1493386068;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1493975155;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1498718472;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1498718493;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1493386068;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1493975155;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1498718472;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1498718493;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1498718494;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1498923209;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1499250208;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1501084996;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1501485811;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1501620216;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1501660289;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1501760738;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1482522859;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(resourceManagerLeaderId)__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		_		__		final FlinkCompletableFuture<RegistrationResponse> future = new FlinkCompletableFuture<>()___		if(!leaderSessionID.equals(resourceManagerLeaderId)) {_			log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_					" did not equal the received leader session ID  {}",_				jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__			future.complete(new RegistrationResponse.Decline("Invalid leader session id"))__			return future__		}__		final LeaderConnectionInfo jobMasterLeaderInfo__		try {_			jobMasterLeaderInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_				highAvailabilityServices.getJobMasterLeaderRetriever(jobID), new FiniteDuration(5, TimeUnit.SECONDS))__		} catch (Exception e) {_			LOG.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__			future.complete(new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever"))__			return future__		}__		if (!jobMasterLeaderId.equals(jobMasterLeaderInfo.getLeaderSessionID())) {_			LOG.info("Declining registration request from non-leading JobManager {}", jobMasterAddress)__			future.complete(new RegistrationResponse.Decline("JobManager is not leading"))__			return future__		}__		Future<JobMasterGateway> jobMasterGatewayFuture =_			getRpcService().connect(jobMasterAddress, JobMasterGateway.class)___		return jobMasterGatewayFuture.thenApplyAsync(new ApplyFunction<JobMasterGateway, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(JobMasterGateway jobMasterGateway) {__				final JobMasterLeaderListener jobMasterLeaderListener = new JobMasterLeaderListener(jobID)__				try {_					LeaderRetrievalService jobMasterLeaderRetriever = highAvailabilityServices.getJobMasterLeaderRetriever(jobID)__					jobMasterLeaderRetriever.start(jobMasterLeaderListener)__				} catch (Exception e) {_					LOG.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__					return new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever")__				}_				jobMasterLeaderRetrievalListeners.add(jobMasterLeaderListener)__				final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__				if (existingGateway != null) {_					log.info("Replacing gateway for registered JobID {}.", jobID)__				}_				return new JobMasterRegistrationSuccess(5000)__			}_		}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,resource,manager,leader,id,check,not,null,job,master,address,check,not,null,job,id,final,flink,completable,future,registration,response,future,new,flink,completable,future,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,future,complete,new,registration,response,decline,invalid,leader,session,id,return,future,final,leader,connection,info,job,master,leader,info,try,job,master,leader,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,master,leader,retriever,job,id,new,finite,duration,5,time,unit,seconds,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,future,complete,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,return,future,if,job,master,leader,id,equals,job,master,leader,info,get,leader,session,id,log,info,declining,registration,request,from,non,leading,job,manager,job,master,address,future,complete,new,registration,response,decline,job,manager,is,not,leading,return,future,future,job,master,gateway,job,master,gateway,future,get,rpc,service,connect,job,master,address,job,master,gateway,class,return,job,master,gateway,future,then,apply,async,new,apply,function,job,master,gateway,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,final,job,master,leader,listener,job,master,leader,listener,new,job,master,leader,listener,job,id,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,master,leader,retriever,job,id,job,master,leader,retriever,start,job,master,leader,listener,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,return,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,job,master,leader,retrieval,listeners,add,job,master,leader,listener,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,gateway,for,registered,job,id,job,id,return,new,job,master,registration,success,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1482522859;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					final LeaderConnectionInfo jobMasterLeaderInfo__					try {_						jobMasterLeaderInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_							highAvailabilityServices.getJobMasterLeaderRetriever(jobID), new FiniteDuration(5, TimeUnit.SECONDS))__					} catch (Exception e) {_						LOG.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__						throw new Exception("Failed to retrieve JobMasterLeaderRetriever")__					}__					if (!jobMasterLeaderId.equals(jobMasterLeaderInfo.getLeaderSessionID())) {_						LOG.info("Declining registration request from non-leading JobManager {}", jobMasterAddress)__						throw new Exception("JobManager is not leading")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class).get(5, TimeUnit.SECONDS)__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {_					_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						JobMasterLeaderListener jobMasterLeaderListener = new JobMasterLeaderListener(jobID)__						try {_							LeaderRetrievalService jobMasterLeaderRetriever = highAvailabilityServices.getJobMasterLeaderRetriever(jobID)__							jobMasterLeaderRetriever.start(jobMasterLeaderListener)__						} catch (Exception e) {_							LOG.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__							return new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever")__						}_						jobMasterLeaderRetrievalListeners.add(jobMasterLeaderListener)__						final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__						if (existingGateway != null) {_							log.info("Replacing gateway for registered JobID {}.", jobID)__						}_						return new JobMasterRegistrationSuccess(5000)__					}_				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,final,leader,connection,info,job,master,leader,info,try,job,master,leader,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,master,leader,retriever,job,id,new,finite,duration,5,time,unit,seconds,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,throw,new,exception,failed,to,retrieve,job,master,leader,retriever,if,job,master,leader,id,equals,job,master,leader,info,get,leader,session,id,log,info,declining,registration,request,from,non,leading,job,manager,job,master,address,throw,new,exception,job,manager,is,not,leading,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,job,master,leader,listener,job,master,leader,listener,new,job,master,leader,listener,job,id,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,master,leader,retriever,job,id,job,master,leader,retriever,start,job,master,leader,listener,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,return,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,job,master,leader,retrieval,listeners,add,job,master,leader,listener,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,gateway,for,registered,job,id,job,id,return,new,job,master,registration,success,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1482522860;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					final LeaderConnectionInfo jobMasterLeaderInfo__					try {_						jobMasterLeaderInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_							highAvailabilityServices.getJobMasterLeaderRetriever(jobID), new FiniteDuration(5, TimeUnit.SECONDS))__					} catch (Exception e) {_						log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__						throw new Exception("Failed to retrieve JobMasterLeaderRetriever")__					}__					if (!jobMasterLeaderId.equals(jobMasterLeaderInfo.getLeaderSessionID())) {_						log.info("Declining registration request from non-leading JobManager {}", jobMasterAddress)__						throw new Exception("JobManager is not leading")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class).get(5, TimeUnit.SECONDS)__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {_					_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						JobMasterLeaderListener jobMasterLeaderListener = new JobMasterLeaderListener(jobID)__						try {_							LeaderRetrievalService jobMasterLeaderRetriever = highAvailabilityServices.getJobMasterLeaderRetriever(jobID)__							jobMasterLeaderRetriever.start(jobMasterLeaderListener)__						} catch (Exception e) {_							log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__							return new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever")__						}_						jobMasterLeaderRetrievalListeners.add(jobMasterLeaderListener)__						final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__						if (existingGateway != null) {_							log.info("Replacing gateway for registered JobID {}.", jobID)__						}_						return new JobMasterRegistrationSuccess(5000)__					}_				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,final,leader,connection,info,job,master,leader,info,try,job,master,leader,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,master,leader,retriever,job,id,new,finite,duration,5,time,unit,seconds,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,throw,new,exception,failed,to,retrieve,job,master,leader,retriever,if,job,master,leader,id,equals,job,master,leader,info,get,leader,session,id,log,info,declining,registration,request,from,non,leading,job,manager,job,master,address,throw,new,exception,job,manager,is,not,leading,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,job,master,leader,listener,job,master,leader,listener,new,job,master,leader,listener,job,id,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,master,leader,retriever,job,id,job,master,leader,retriever,start,job,master,leader,listener,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,return,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,job,master,leader,retrieval,listeners,add,job,master,leader,listener,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,gateway,for,registered,job,id,job,id,return,new,job,master,registration,success,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1482522861;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					final LeaderConnectionInfo jobMasterLeaderInfo__					try {_						jobMasterLeaderInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_							highAvailabilityServices.getJobMasterLeaderRetriever(jobID), new FiniteDuration(5, TimeUnit.SECONDS))__					} catch (Exception e) {_						log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__						throw new Exception("Failed to retrieve JobMasterLeaderRetriever")__					}__					if (!jobMasterLeaderId.equals(jobMasterLeaderInfo.getLeaderSessionID())) {_						log.info("Declining registration request from non-leading JobManager {}", jobMasterAddress)__						throw new Exception("JobManager is not leading")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class).get(5, TimeUnit.SECONDS)__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {_					_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						if (!jobMasterLeaderRetrievalListeners.containsKey(jobID)) {_							JobMasterLeaderListener jobMasterLeaderListener = new JobMasterLeaderListener(jobID)__							try {_								LeaderRetrievalService jobMasterLeaderRetriever = highAvailabilityServices.getJobMasterLeaderRetriever(jobID)__								jobMasterLeaderRetriever.start(jobMasterLeaderListener)__							} catch (Exception e) {_								log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__								return new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever")__							}_							jobMasterLeaderRetrievalListeners.put(jobID, jobMasterLeaderListener)__						}_						final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__						if (existingGateway != null) {_							log.info("Replacing gateway for registered JobID {}.", jobID)__						}_						return new JobMasterRegistrationSuccess(5000)__					}_				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,final,leader,connection,info,job,master,leader,info,try,job,master,leader,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,master,leader,retriever,job,id,new,finite,duration,5,time,unit,seconds,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,throw,new,exception,failed,to,retrieve,job,master,leader,retriever,if,job,master,leader,id,equals,job,master,leader,info,get,leader,session,id,log,info,declining,registration,request,from,non,leading,job,manager,job,master,address,throw,new,exception,job,manager,is,not,leading,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,if,job,master,leader,retrieval,listeners,contains,key,job,id,job,master,leader,listener,job,master,leader,listener,new,job,master,leader,listener,job,id,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,master,leader,retriever,job,id,job,master,leader,retriever,start,job,master,leader,listener,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,return,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,job,master,leader,retrieval,listeners,put,job,id,job,master,leader,listener,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,gateway,for,registered,job,id,job,id,return,new,job,master,registration,success,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1482522861;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					final LeaderConnectionInfo jobMasterLeaderInfo__					try {_						jobMasterLeaderInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_							highAvailabilityServices.getJobMasterLeaderRetriever(jobID), new FiniteDuration(5, TimeUnit.SECONDS))__					} catch (Exception e) {_						log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__						throw new Exception("Failed to retrieve JobMasterLeaderRetriever")__					}__					if (!jobMasterLeaderId.equals(jobMasterLeaderInfo.getLeaderSessionID())) {_						log.info("Declining registration request from non-leading JobManager {}", jobMasterAddress)__						throw new Exception("JobManager is not leading")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class).get(5, TimeUnit.SECONDS)__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {_					_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						if (!jobMasterLeaderRetrievalListeners.containsKey(jobID)) {_							JobMasterLeaderListener jobMasterLeaderListener = new JobMasterLeaderListener(jobID)__							try {_								LeaderRetrievalService jobMasterLeaderRetriever = highAvailabilityServices.getJobMasterLeaderRetriever(jobID)__								jobMasterLeaderRetriever.start(jobMasterLeaderListener)__							} catch (Exception e) {_								log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__								return new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever")__							}_							jobMasterLeaderRetrievalListeners.put(jobID, jobMasterLeaderListener)__						}_						final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__						if (existingGateway != null) {_							log.info("Replacing gateway for registered JobID {}.", jobID)__						}_						return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)__					}_				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,final,leader,connection,info,job,master,leader,info,try,job,master,leader,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,master,leader,retriever,job,id,new,finite,duration,5,time,unit,seconds,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,throw,new,exception,failed,to,retrieve,job,master,leader,retriever,if,job,master,leader,id,equals,job,master,leader,info,get,leader,session,id,log,info,declining,registration,request,from,non,leading,job,manager,job,master,address,throw,new,exception,job,manager,is,not,leading,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,if,job,master,leader,retrieval,listeners,contains,key,job,id,job,master,leader,listener,job,master,leader,listener,new,job,master,leader,listener,job,id,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,master,leader,retriever,job,id,job,master,leader,retriever,start,job,master,leader,listener,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,return,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,job,master,leader,retrieval,listeners,put,job,id,job,master,leader,listener,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,gateway,for,registered,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1482522861;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					final LeaderConnectionInfo jobMasterLeaderInfo__					try {_						jobMasterLeaderInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_							highAvailabilityServices.getJobManagerLeaderRetriever(jobID), new FiniteDuration(5, TimeUnit.SECONDS))__					} catch (Exception e) {_						log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__						throw new Exception("Failed to retrieve JobMasterLeaderRetriever")__					}__					if (!jobMasterLeaderId.equals(jobMasterLeaderInfo.getLeaderSessionID())) {_						log.info("Declining registration request from non-leading JobManager {}", jobMasterAddress)__						throw new Exception("JobManager is not leading")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class).get(5, TimeUnit.SECONDS)__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {_					_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						if (!jobMasterLeaderRetrievalListeners.containsKey(jobID)) {_							JobMasterLeaderListener jobMasterLeaderListener = new JobMasterLeaderListener(jobID)__							try {_								LeaderRetrievalService jobMasterLeaderRetriever = highAvailabilityServices.getJobManagerLeaderRetriever(jobID)__								jobMasterLeaderRetriever.start(jobMasterLeaderListener)__							} catch (Exception e) {_								log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__								return new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever")__							}_							jobMasterLeaderRetrievalListeners.put(jobID, jobMasterLeaderListener)__						}_						final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__						if (existingGateway != null) {_							log.info("Replacing gateway for registered JobID {}.", jobID)__						}_						return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)__					}_				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,final,leader,connection,info,job,master,leader,info,try,job,master,leader,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,job,id,new,finite,duration,5,time,unit,seconds,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,throw,new,exception,failed,to,retrieve,job,master,leader,retriever,if,job,master,leader,id,equals,job,master,leader,info,get,leader,session,id,log,info,declining,registration,request,from,non,leading,job,manager,job,master,address,throw,new,exception,job,manager,is,not,leading,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,if,job,master,leader,retrieval,listeners,contains,key,job,id,job,master,leader,listener,job,master,leader,listener,new,job,master,leader,listener,job,id,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,master,leader,retriever,start,job,master,leader,listener,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,return,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,job,master,leader,retrieval,listeners,put,job,id,job,master,leader,listener,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,gateway,for,registered,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1482522861;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					final LeaderConnectionInfo jobMasterLeaderInfo__					try {_						jobMasterLeaderInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_							highAvailabilityServices.getJobManagerLeaderRetriever(jobID), new FiniteDuration(5, TimeUnit.SECONDS))__					} catch (Exception e) {_						log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__						throw new Exception("Failed to retrieve JobMasterLeaderRetriever")__					}__					if (!jobMasterLeaderId.equals(jobMasterLeaderInfo.getLeaderSessionID())) {_						log.info("Declining registration request from non-leading JobManager {}", jobMasterAddress)__						throw new Exception("JobManager is not leading")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class).get(5, TimeUnit.SECONDS)__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {__					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						if (!jobMasterLeaderRetrievalListeners.containsKey(jobID)) {_							JobMasterLeaderListener jobMasterLeaderListener = new JobMasterLeaderListener(jobID)__							try {_								LeaderRetrievalService jobMasterLeaderRetriever = highAvailabilityServices.getJobManagerLeaderRetriever(jobID)__								jobMasterLeaderRetriever.start(jobMasterLeaderListener)__							} catch (Exception e) {_								log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__								return new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever")__							}_							jobMasterLeaderRetrievalListeners.put(jobID, jobMasterLeaderListener)__						}_						final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__						if (existingGateway != null) {_							log.info("Replacing gateway for registered JobID {}.", jobID)__						}_						return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)__					}_				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,final,leader,connection,info,job,master,leader,info,try,job,master,leader,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,job,id,new,finite,duration,5,time,unit,seconds,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,throw,new,exception,failed,to,retrieve,job,master,leader,retriever,if,job,master,leader,id,equals,job,master,leader,info,get,leader,session,id,log,info,declining,registration,request,from,non,leading,job,manager,job,master,address,throw,new,exception,job,manager,is,not,leading,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,if,job,master,leader,retrieval,listeners,contains,key,job,id,job,master,leader,listener,job,master,leader,listener,new,job,master,leader,listener,job,id,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,master,leader,retriever,start,job,master,leader,listener,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,return,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,job,master,leader,retrieval,listeners,put,job,id,job,master,leader,listener,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,gateway,for,registered,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1482522862;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		_		final JobIdLeaderListener jobIdLeaderListener__		if (leaderListeners.containsKey(jobID)) {_			jobIdLeaderListener = leaderListeners.get(jobID)__		} else {_			try {_				LeaderRetrievalService jobMasterLeaderRetriever =_					highAvailabilityServices.getJobManagerLeaderRetriever(jobID)__				jobIdLeaderListener = new JobIdLeaderListener(jobID, jobMasterLeaderRetriever)__			} catch (Exception e) {_				log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__				FlinkCompletableFuture<RegistrationResponse> responseFuture = new FlinkCompletableFuture<>()__				responseFuture.complete(new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever"))__				return responseFuture__			}_			leaderListeners.put(jobID, jobIdLeaderListener)__		}__		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					if (!jobIdLeaderListener.getLeaderID().get(timeout.getSize(), timeout.getUnit())_							.equals(jobMasterLeaderId)) {_						throw new Exception("Leader Id did not match")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class)_						.get(timeout.getSize(), timeout.getUnit())__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {__					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					}__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						return new RegistrationResponse.Decline("Invalid leader session id")__					}__					try {_						_						UUID currentJobMasterLeaderId = jobIdLeaderListener.getLeaderID().getNow(null)__						if (currentJobMasterLeaderId == null || !currentJobMasterLeaderId.equals(jobMasterLeaderId)) {_							throw new Exception("Leader Id did not match")__						}_					} catch (Exception e) {_						return new RegistrationResponse.Decline(e.getMessage())__					}__					final JobMasterRegistration registration =_						new JobMasterRegistration(jobID, jobMasterLeaderId, jobMasterGateway)___					final JobMasterRegistration existingRegistration = jobMasters.put(jobID, registration)__					if (existingRegistration != null) {_						log.info("Replacing JobMaster registration for newly registered JobMaster with JobID {}.", jobID)__					}_					return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)___				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,final,job,id,leader,listener,job,id,leader,listener,if,leader,listeners,contains,key,job,id,job,id,leader,listener,leader,listeners,get,job,id,else,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,id,leader,listener,new,job,id,leader,listener,job,id,job,master,leader,retriever,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,flink,completable,future,registration,response,response,future,new,flink,completable,future,response,future,complete,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,return,response,future,leader,listeners,put,job,id,job,id,leader,listener,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,if,job,id,leader,listener,get,leader,id,get,timeout,get,size,timeout,get,unit,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,timeout,get,size,timeout,get,unit,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,return,new,registration,response,decline,invalid,leader,session,id,try,uuid,current,job,master,leader,id,job,id,leader,listener,get,leader,id,get,now,null,if,current,job,master,leader,id,null,current,job,master,leader,id,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,catch,exception,e,return,new,registration,response,decline,e,get,message,final,job,master,registration,registration,new,job,master,registration,job,id,job,master,leader,id,job,master,gateway,final,job,master,registration,existing,registration,job,masters,put,job,id,registration,if,existing,registration,null,log,info,replacing,job,master,registration,for,newly,registered,job,master,with,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1482522862;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		_		final JobIdLeaderListener jobIdLeaderListener__		if (leaderListeners.containsKey(jobID)) {_			jobIdLeaderListener = leaderListeners.get(jobID)__		} else {_			try {_				LeaderRetrievalService jobMasterLeaderRetriever =_					highAvailabilityServices.getJobManagerLeaderRetriever(jobID)__				jobIdLeaderListener = new JobIdLeaderListener(jobID, jobMasterLeaderRetriever)__			} catch (Exception e) {_				log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__				FlinkCompletableFuture<RegistrationResponse> responseFuture = new FlinkCompletableFuture<>()__				responseFuture.complete(new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever"))__				return responseFuture__			}_			leaderListeners.put(jobID, jobIdLeaderListener)__		}__		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					if (!jobIdLeaderListener.getLeaderID().get(timeout.getSize(), timeout.getUnit())_							.equals(jobMasterLeaderId)) {_						throw new Exception("Leader Id did not match")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class)_						.get(timeout.getSize(), timeout.getUnit())__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {__					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					}__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						return new RegistrationResponse.Decline("Invalid leader session id")__					}__					try {_						_						UUID currentJobMasterLeaderId = jobIdLeaderListener.getLeaderID().getNow(null)__						if (currentJobMasterLeaderId == null || !currentJobMasterLeaderId.equals(jobMasterLeaderId)) {_							throw new Exception("Leader Id did not match")__						}_					} catch (Exception e) {_						return new RegistrationResponse.Decline(e.getMessage())__					}__					final JobMasterRegistration registration =_						new JobMasterRegistration(jobID, jobMasterLeaderId, jobMasterGateway)___					final JobMasterRegistration existingRegistration = jobMasters.put(jobID, registration)__					if (existingRegistration != null) {_						log.info("Replacing JobMaster registration for newly registered JobMaster with JobID {}.", jobID)__					}_					return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)___				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,final,job,id,leader,listener,job,id,leader,listener,if,leader,listeners,contains,key,job,id,job,id,leader,listener,leader,listeners,get,job,id,else,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,id,leader,listener,new,job,id,leader,listener,job,id,job,master,leader,retriever,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,flink,completable,future,registration,response,response,future,new,flink,completable,future,response,future,complete,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,return,response,future,leader,listeners,put,job,id,job,id,leader,listener,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,if,job,id,leader,listener,get,leader,id,get,timeout,get,size,timeout,get,unit,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,timeout,get,size,timeout,get,unit,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,return,new,registration,response,decline,invalid,leader,session,id,try,uuid,current,job,master,leader,id,job,id,leader,listener,get,leader,id,get,now,null,if,current,job,master,leader,id,null,current,job,master,leader,id,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,catch,exception,e,return,new,registration,response,decline,e,get,message,final,job,master,registration,registration,new,job,master,registration,job,id,job,master,leader,id,job,master,gateway,final,job,master,registration,existing,registration,job,masters,put,job,id,registration,if,existing,registration,null,log,info,replacing,job,master,registration,for,newly,registered,job,master,with,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1482522862;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		_		final JobIdLeaderListener jobIdLeaderListener__		if (leaderListeners.containsKey(jobID)) {_			jobIdLeaderListener = leaderListeners.get(jobID)__		} else {_			try {_				LeaderRetrievalService jobMasterLeaderRetriever =_					highAvailabilityServices.getJobManagerLeaderRetriever(jobID, jobMasterAddress)__				jobIdLeaderListener = new JobIdLeaderListener(jobID, jobMasterLeaderRetriever)__			} catch (Exception e) {_				log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__				FlinkCompletableFuture<RegistrationResponse> responseFuture = new FlinkCompletableFuture<>()__				responseFuture.complete(new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever"))__				return responseFuture__			}_			leaderListeners.put(jobID, jobIdLeaderListener)__		}__		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					if (!jobIdLeaderListener.getLeaderID().get(timeout.getSize(), timeout.getUnit())_							.equals(jobMasterLeaderId)) {_						throw new Exception("Leader Id did not match")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class)_						.get(timeout.getSize(), timeout.getUnit())__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {__					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					}__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						return new RegistrationResponse.Decline("Invalid leader session id")__					}__					try {_						_						UUID currentJobMasterLeaderId = jobIdLeaderListener.getLeaderID().getNow(null)__						if (currentJobMasterLeaderId == null || !currentJobMasterLeaderId.equals(jobMasterLeaderId)) {_							throw new Exception("Leader Id did not match")__						}_					} catch (Exception e) {_						return new RegistrationResponse.Decline(e.getMessage())__					}__					final JobMasterRegistration registration =_						new JobMasterRegistration(jobID, jobMasterLeaderId, jobMasterGateway)___					final JobMasterRegistration existingRegistration = jobMasters.put(jobID, registration)__					if (existingRegistration != null) {_						log.info("Replacing JobMaster registration for newly registered JobMaster with JobID {}.", jobID)__					}_					return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)___				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,final,job,id,leader,listener,job,id,leader,listener,if,leader,listeners,contains,key,job,id,job,id,leader,listener,leader,listeners,get,job,id,else,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,master,address,job,id,leader,listener,new,job,id,leader,listener,job,id,job,master,leader,retriever,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,flink,completable,future,registration,response,response,future,new,flink,completable,future,response,future,complete,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,return,response,future,leader,listeners,put,job,id,job,id,leader,listener,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,if,job,id,leader,listener,get,leader,id,get,timeout,get,size,timeout,get,unit,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,timeout,get,size,timeout,get,unit,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,return,new,registration,response,decline,invalid,leader,session,id,try,uuid,current,job,master,leader,id,job,id,leader,listener,get,leader,id,get,now,null,if,current,job,master,leader,id,null,current,job,master,leader,id,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,catch,exception,e,return,new,registration,response,decline,e,get,message,final,job,master,registration,registration,new,job,master,registration,job,id,job,master,leader,id,job,master,gateway,final,job,master,registration,existing,registration,job,masters,put,job,id,registration,if,existing,registration,null,log,info,replacing,job,master,registration,for,newly,registered,job,master,with,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1482522863;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		_		final JobIdLeaderListener jobIdLeaderListener__		if (leaderListeners.containsKey(jobID)) {_			jobIdLeaderListener = leaderListeners.get(jobID)__		} else {_			try {_				LeaderRetrievalService jobMasterLeaderRetriever =_					highAvailabilityServices.getJobManagerLeaderRetriever(jobID)__				jobIdLeaderListener = new JobIdLeaderListener(jobID, jobMasterLeaderRetriever)__			} catch (Exception e) {_				log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__				FlinkCompletableFuture<RegistrationResponse> responseFuture = new FlinkCompletableFuture<>()__				responseFuture.complete(new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever"))__				return responseFuture__			}_			leaderListeners.put(jobID, jobIdLeaderListener)__		}__		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					if (!jobIdLeaderListener.getLeaderID().get(timeout.getSize(), timeout.getUnit())_							.equals(jobMasterLeaderId)) {_						throw new Exception("Leader Id did not match")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class)_						.get(timeout.getSize(), timeout.getUnit())__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {__					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					}__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						return new RegistrationResponse.Decline("Invalid leader session id")__					}__					try {_						_						UUID currentJobMasterLeaderId = jobIdLeaderListener.getLeaderID().getNow(null)__						if (currentJobMasterLeaderId == null || !currentJobMasterLeaderId.equals(jobMasterLeaderId)) {_							throw new Exception("Leader Id did not match")__						}_					} catch (Exception e) {_						return new RegistrationResponse.Decline(e.getMessage())__					}__					final JobMasterRegistration registration =_						new JobMasterRegistration(jobID, jobMasterLeaderId, jobMasterGateway)___					final JobMasterRegistration existingRegistration = jobMasters.put(jobID, registration)__					if (existingRegistration != null) {_						log.info("Replacing JobMaster registration for newly registered JobMaster with JobID {}.", jobID)__					}_					return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)___				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,final,job,id,leader,listener,job,id,leader,listener,if,leader,listeners,contains,key,job,id,job,id,leader,listener,leader,listeners,get,job,id,else,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,id,leader,listener,new,job,id,leader,listener,job,id,job,master,leader,retriever,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,flink,completable,future,registration,response,response,future,new,flink,completable,future,response,future,complete,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,return,response,future,leader,listeners,put,job,id,job,id,leader,listener,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,if,job,id,leader,listener,get,leader,id,get,timeout,get,size,timeout,get,unit,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,timeout,get,size,timeout,get,unit,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,return,new,registration,response,decline,invalid,leader,session,id,try,uuid,current,job,master,leader,id,job,id,leader,listener,get,leader,id,get,now,null,if,current,job,master,leader,id,null,current,job,master,leader,id,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,catch,exception,e,return,new,registration,response,decline,e,get,message,final,job,master,registration,registration,new,job,master,registration,job,id,job,master,leader,id,job,master,gateway,final,job,master,registration,existing,registration,job,masters,put,job,id,registration,if,existing,registration,null,log,info,replacing,job,master,registration,for,newly,registered,job,master,with,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1482522863;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		_		final JobIdLeaderListener jobIdLeaderListener__		if (leaderListeners.containsKey(jobID)) {_			jobIdLeaderListener = leaderListeners.get(jobID)__		} else {_			try {_				LeaderRetrievalService jobMasterLeaderRetriever =_					highAvailabilityServices.getJobManagerLeaderRetriever(jobID)__				jobIdLeaderListener = new JobIdLeaderListener(jobID, jobMasterLeaderRetriever)__			} catch (Exception e) {_				log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__				FlinkCompletableFuture<RegistrationResponse> responseFuture = new FlinkCompletableFuture<>()__				responseFuture.complete(new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever"))__				return responseFuture__			}_			leaderListeners.put(jobID, jobIdLeaderListener)__		}__		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					if (!jobIdLeaderListener.getLeaderID().get(timeout.getSize(), timeout.getUnit())_							.equals(jobMasterLeaderId)) {_						throw new Exception("Leader Id did not match")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class)_						.get(timeout.getSize(), timeout.getUnit())__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {__					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					}__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						return new RegistrationResponse.Decline("Invalid leader session id")__					}__					try {_						_						UUID currentJobMasterLeaderId = jobIdLeaderListener.getLeaderID().getNow(null)__						if (currentJobMasterLeaderId == null || !currentJobMasterLeaderId.equals(jobMasterLeaderId)) {_							throw new Exception("Leader Id did not match")__						}_					} catch (Exception e) {_						return new RegistrationResponse.Decline(e.getMessage())__					}__					final JobMasterRegistration registration =_						new JobMasterRegistration(jobID, jobMasterLeaderId, jobMasterGateway)___					final JobMasterRegistration existingRegistration = jobMasters.put(jobID, registration)__					if (existingRegistration != null) {_						log.info("Replacing JobMaster registration for newly registered JobMaster with JobID {}.", jobID)__					}_					return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)___				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,final,job,id,leader,listener,job,id,leader,listener,if,leader,listeners,contains,key,job,id,job,id,leader,listener,leader,listeners,get,job,id,else,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,id,leader,listener,new,job,id,leader,listener,job,id,job,master,leader,retriever,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,flink,completable,future,registration,response,response,future,new,flink,completable,future,response,future,complete,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,return,response,future,leader,listeners,put,job,id,job,id,leader,listener,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,if,job,id,leader,listener,get,leader,id,get,timeout,get,size,timeout,get,unit,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,timeout,get,size,timeout,get,unit,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,return,new,registration,response,decline,invalid,leader,session,id,try,uuid,current,job,master,leader,id,job,id,leader,listener,get,leader,id,get,now,null,if,current,job,master,leader,id,null,current,job,master,leader,id,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,catch,exception,e,return,new,registration,response,decline,e,get,message,final,job,master,registration,registration,new,job,master,registration,job,id,job,master,leader,id,job,master,gateway,final,job,master,registration,existing,registration,job,masters,put,job,id,registration,if,existing,registration,null,log,info,replacing,job,master,registration,for,newly,registered,job,master,with,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1482522864;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		_		final JobIdLeaderListener jobIdLeaderListener__		if (leaderListeners.containsKey(jobID)) {_			jobIdLeaderListener = leaderListeners.get(jobID)__		} else {_			try {_				LeaderRetrievalService jobMasterLeaderRetriever =_					highAvailabilityServices.getJobManagerLeaderRetriever(jobID)__				jobIdLeaderListener = new JobIdLeaderListener(jobID, jobMasterLeaderRetriever)__			} catch (Exception e) {_				log.warn("Failed to start JobMasterLeaderRetriever for job id {}", jobID, e)___				return FlinkCompletableFuture.<RegistrationResponse>completed(_					new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever"))__			}__			leaderListeners.put(jobID, jobIdLeaderListener)__		}__		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					final Time timeout = resourceManagerConfiguration.getTimeout()___					if (!jobIdLeaderListener.getLeaderID().get(timeout.getSize(), timeout.getUnit())_							.equals(jobMasterLeaderId)) {_						throw new Exception("Leader Id did not match")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class)_						.get(timeout.getSize(), timeout.getUnit())__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {__				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						return new RegistrationResponse.Decline("Invalid leader session id")__					}__					try {_						_						UUID currentJobMasterLeaderId = jobIdLeaderListener.getLeaderID().getNow(null)__						if (currentJobMasterLeaderId == null || !currentJobMasterLeaderId.equals(jobMasterLeaderId)) {_							throw new Exception("Leader Id did not match")__						}_					} catch (Exception e) {_						return new RegistrationResponse.Decline(e.getMessage())__					}__					final JobMasterRegistration registration =_						new JobMasterRegistration(jobID, jobMasterLeaderId, jobMasterGateway)___					final JobMasterRegistration existingRegistration = jobMasters.put(jobID, registration)__					if (existingRegistration != null) {_						log.info("Replacing JobMaster registration for newly registered JobMaster with JobID {}.", jobID)__					}_					return new JobMasterRegistrationSuccess(_						resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_						resourceManagerLeaderId)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,final,job,id,leader,listener,job,id,leader,listener,if,leader,listeners,contains,key,job,id,job,id,leader,listener,leader,listeners,get,job,id,else,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,id,leader,listener,new,job,id,leader,listener,job,id,job,master,leader,retriever,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,e,return,flink,completable,future,registration,response,completed,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,leader,listeners,put,job,id,job,id,leader,listener,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,final,time,timeout,resource,manager,configuration,get,timeout,if,job,id,leader,listener,get,leader,id,get,timeout,get,size,timeout,get,unit,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,timeout,get,size,timeout,get,unit,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,return,new,registration,response,decline,invalid,leader,session,id,try,uuid,current,job,master,leader,id,job,id,leader,listener,get,leader,id,get,now,null,if,current,job,master,leader,id,null,current,job,master,leader,id,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,catch,exception,e,return,new,registration,response,decline,e,get,message,final,job,master,registration,registration,new,job,master,registration,job,id,job,master,leader,id,job,master,gateway,final,job,master,registration,existing,registration,job,masters,put,job,id,registration,if,existing,registration,null,log,info,replacing,job,master,registration,for,newly,registered,job,master,with,job,id,job,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522858;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.notifyLeaderAddress(getAddress(), leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,notify,leader,address,get,address,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522859;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.notifyLeaderAddress(getAddress(), leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,notify,leader,address,get,address,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522859;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.notifyLeaderAddress(getAddress(), leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,notify,leader,address,get,address,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522859;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.setLeaderUUID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,set,leader,uuid,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522859;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.setLeaderUUID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,set,leader,uuid,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522860;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.setLeaderUUID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,set,leader,uuid,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522861;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.setLeaderUUID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,set,leader,uuid,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522861;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.setLeaderUUID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,set,leader,uuid,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522861;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.setLeaderUUID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,set,leader,uuid,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522861;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.setLeaderUUID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,set,leader,uuid,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522862;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522862;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522862;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522863;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1482522863;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1482522860;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutorGateways.remove(resourceID)__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executor,gateways,remove,resource,id,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1482522861;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutorGateways.remove(resourceID)__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executor,gateways,remove,resource,id,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1482522861;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutorGateways.remove(resourceID)__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executor,gateways,remove,resource,id,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1482522861;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutorGateways.remove(resourceID)__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executor,gateways,remove,resource,id,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1482522861;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutors.remove(resourceID).getWorker()__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executors,remove,resource,id,get,worker,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1482522862;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutors.remove(resourceID).getWorker()__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executors,remove,resource,id,get,worker,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1482522862;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutors.remove(resourceID).getWorker()__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executors,remove,resource,id,get,worker,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1482522862;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutors.remove(resourceID).getWorker()__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executors,remove,resource,id,get,worker,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1482522863;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutors.remove(resourceID).getWorker()__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executors,remove,resource,id,get,worker,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1482522863;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutors.remove(resourceID).getWorker()__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executors,remove,resource,id,get,worker,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522861;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)__		JobMasterLeaderListener jobMasterLeaderListener = jobMasterLeaderRetrievalListeners.get(jobId)___		UUID leaderID = jobMasterLeaderListener.getLeaderID()___		if (jobMasterGateway != null_				&& jobMasterLeaderID.equals(leaderID)_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,job,master,leader,listener,job,master,leader,listener,job,master,leader,retrieval,listeners,get,job,id,uuid,leader,id,job,master,leader,listener,get,leader,id,if,job,master,gateway,null,job,master,leader,id,equals,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522862;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterRegistration jobMasterRegistration = jobMasters.get(jobId)___		if (jobMasterRegistration != null_				&& jobMasterLeaderID.equals(jobMasterRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,registration,job,master,registration,job,masters,get,job,id,if,job,master,registration,null,job,master,leader,id,equals,job,master,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522862;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterRegistration jobMasterRegistration = jobMasters.get(jobId)___		if (jobMasterRegistration != null_				&& jobMasterLeaderID.equals(jobMasterRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,registration,job,master,registration,job,masters,get,job,id,if,job,master,registration,null,job,master,leader,id,equals,job,master,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522862;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterRegistration jobMasterRegistration = jobMasters.get(jobId)___		if (jobMasterRegistration != null_				&& jobMasterLeaderID.equals(jobMasterRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,registration,job,master,registration,job,masters,get,job,id,if,job,master,registration,null,job,master,leader,id,equals,job,master,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522863;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterRegistration jobMasterRegistration = jobMasters.get(jobId)___		if (jobMasterRegistration != null_				&& jobMasterLeaderID.equals(jobMasterRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,registration,job,master,registration,job,masters,get,job,id,if,job,master,registration,null,job,master,leader,id,equals,job,master,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522863;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterRegistration jobMasterRegistration = jobMasters.get(jobId)___		if (jobMasterRegistration != null_				&& jobMasterLeaderID.equals(jobMasterRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,registration,job,master,registration,job,masters,get,job,id,if,job,master,registration,null,job,master,leader,id,equals,job,master,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522864;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterRegistration jobMasterRegistration = jobMasters.get(jobId)___		if (jobMasterRegistration != null_				&& jobMasterLeaderID.equals(jobMasterRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,registration,job,master,registration,job,masters,get,job,id,if,job,master,registration,null,job,master,leader,id,equals,job,master,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522864;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522864;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522865;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522866;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1482522867;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1489413798;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1490031358;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1490090124;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1490273924;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1490273924;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1493146240;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1493308611;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1521804760;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1525452496;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1527173115;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1530472204;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1530542668;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1532290976;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1532383539;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1533306679;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1535545389;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1536842721;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1536846489;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1537479166;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1538127492;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1539176686;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1539176686;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1539582211;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1542299814;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1549545568;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1550005039;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1550683187;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public void revokeLeadership();1482522858;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				ResourceManager.this.leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,resource,manager,this,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1482522859;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				ResourceManager.this.leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,resource,manager,this,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1482522859;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				ResourceManager.this.leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,resource,manager,this,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1482522859;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				slotManager.clearState()__				leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,slot,manager,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1482522859;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				taskExecutorGateways.clear()__				slotManager.clearState()__				leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,task,executor,gateways,clear,slot,manager,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1482522860;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				taskExecutorGateways.clear()__				slotManager.clearState()__				leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,task,executor,gateways,clear,slot,manager,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1482522861;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				taskExecutorGateways.clear()__				slotManager.clearState()__				leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,task,executor,gateways,clear,slot,manager,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1482522861;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				taskExecutorGateways.clear()__				slotManager.clearState()__				leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,task,executor,gateways,clear,slot,manager,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1482522861;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				taskExecutorGateways.clear()__				slotManager.clearState()__				leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,task,executor,gateways,clear,slot,manager,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1482522861;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				taskExecutors.clear()__				slotManager.clearState()__				leaderSessionID = new UUID(0, 0)__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,task,executors,clear,slot,manager,clear,state,leader,session,id,new,uuid,0,0
ResourceManager -> @Override 	public void revokeLeadership();1482522862;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				clearState()__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state
ResourceManager -> @Override 	public void revokeLeadership();1482522862;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				clearState()__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state
ResourceManager -> @Override 	public void revokeLeadership();1482522862;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				clearState()__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state
ResourceManager -> @Override 	public void revokeLeadership();1482522863;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				clearState()__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state
ResourceManager -> @Override 	public void revokeLeadership();1482522863;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				clearState()__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state
ResourceManager -> @Override 	public void revokeLeadership();1482522864;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1482522864;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1482522864;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1482522865;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1482522866;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1482522867;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1489413798;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1490031358;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1490090124;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1490273924;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1490273924;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1493146240;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1493308611;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1493386068;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1493975155;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1498718472;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1498718493;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1498718494;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1498923209;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1499250208;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1501084996;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1501485811;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1501620216;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1501660289;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1501760738;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1502452184;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1502706197;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1503156481;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1504477043;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1504525441;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.generate()___				log.info("ResourceManager {} was revoked leadership. Setting fencing token to {}.", getAddress(), newResourceManagerId)___				clearState()___				setFencingToken(newResourceManagerId)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,generate,log,info,resource,manager,was,revoked,leadership,setting,fencing,token,to,get,address,new,resource,manager,id,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1504608225;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.generate()___				log.info("ResourceManager {} was revoked leadership. Setting fencing token to {}.", getAddress(), newResourceManagerId)___				clearState()___				setFencingToken(newResourceManagerId)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,generate,log,info,resource,manager,was,revoked,leadership,setting,fencing,token,to,get,address,new,resource,manager,id,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1506034747;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1507825825;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1508597556;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1509547680;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1509547920;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1509547921;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1510063662;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1510063662;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1510063662;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1510063665;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1510152676;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1511963573;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1511963573;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1516890809;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1517915730;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1517920461;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1519406528;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1521554023;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1521804757;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1521804760;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1525452496;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1527173115;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1530472204;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1530542668;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1532290976;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1532383539;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1533306679;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1535545389;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1536842721;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1536846489;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1537479166;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1538127492;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1539176686;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1539176686;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1539582211;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1542299814;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1549545568;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1550005039;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1550683187;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1502452184;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1502706197;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1503156481;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1504477043;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1504525441;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1504608225;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1506034747;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1507825825;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1508597556;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1509547680;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1509547920;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1509547921;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1510063662;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1510063662;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1510063662;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1510063665;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1510152676;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1511963573;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1511963573;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1516890809;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1517915730;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1517920461;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1519406528;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1521554023;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1521804757;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1521804760;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1525452496;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1527173115;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1530472204;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1530542668;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1532290976;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1532383539;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1533306679;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1535545389;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1536842721;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1536846489;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1537479166;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1538127492;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1539176686;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1539176686;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1539582211;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1542299814;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1549545568;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1550005039;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1550683187;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> protected void onFatalError(Throwable t);1498718472;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1498718493;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1498718494;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1498923209;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1499250208;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1501084996;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1501485811;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1501620216;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1501660289;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1501760738;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1502452184;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1502706197;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1503156481;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1504477043;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1504525441;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1504608225;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1506034747;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1507825825;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1508597556;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1509547680;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1509547920;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1509547921;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1510063662;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1510063662;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1510063662;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1510063665;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1510152676;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1511963573;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1511963573;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1516890809;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1517915730;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1517920461;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1519406528;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1521554023;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1521804757;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1521804760;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1525452496;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1527173115;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1530472204;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1530542668;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1532290976;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1532383539;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1533306679;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1535545389;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1536842721;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1536846489;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1537479166;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1538127492;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1539176686;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1539176686;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1539582211;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1542299814;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1549545568;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1550005039;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1550683187;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1504608225;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1506034747;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1507825825;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1508597556;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1509547680;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1509547920;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1509547921;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1510063662;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1510063662;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1510063662;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1510063665;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1510152676;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1511963573;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1511963573;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1516890809;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1517915730;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1517920461;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1519406528;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1521554023;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1521804757;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1521804760;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1525452496;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1527173115;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1530472204;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1530542668;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1532290976;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1532383539;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1533306679;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1535545389;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1536842721;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1536846489;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1537479166;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1538127492;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1539176686;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1539176686;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1539582211;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1542299814;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1549545568;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1550005039;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1550683187;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1502452184;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1502706197;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1503156481;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1504477043;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1504525441;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1504608225;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1506034747;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1507825825;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1508597556;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1509547680;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1509547920;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1509547921;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1510063662;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1510063662;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1510063662;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1510063665;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1510152676;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1511963573;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1511963573;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1516890809;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1517915730;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1517920461;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1519406528;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1521554023;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1521804757;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1521804760;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1525452496;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1527173115;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1530472204;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1530542668;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1532290976;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1532383539;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1533306679;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1535545389;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1536842721;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1536846489;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1537479166;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1538127492;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1539176686;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1539176686;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1539582211;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1542299814;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1549545568;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1550005039;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1550683187;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1502452184;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@Override_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;override,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @Override 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1502706197;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@Override_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;override,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @Override 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1503156481;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@Override_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;override,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @Override 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1504477043;Notification from a TaskExecutor that a slot has become available.__@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@Override_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;override,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> protected abstract void shutDownApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1516890809;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1517915730;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1517920461;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1519406528;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1521554023;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1521804757;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1482522864;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1482522864;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1482522865;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1482522866;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1482522867;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1489413798;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1490031358;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1490090124;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1490273924;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1490273924;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1493146240;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1493308611;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1493386068;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1493975155;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1498718472;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1498718493;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1498718494;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1498923209;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1499250208;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1501084996;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1501485811;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1501620216;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1501660289;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1501760738;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1502452184;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1502706197;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1503156481;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1504477043;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1538127492;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1539176686;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1539176686;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1539582211;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1542299814;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1549545568;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1550005039;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1550683187;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1482522864;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionID)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionID)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1482522864;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1482522864;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1482522865;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1482522866;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1482522867;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1489413798;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1490031358;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1490090124;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1490273924;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1490273924;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1493146240;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1493308611;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1533306679;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1535545389;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1536842721;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1536846489;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1537479166;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1538127492;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1539176686;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1539176686;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1539582211;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1542299814;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1549545568;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1550005039;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1550683187;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1490273924;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.notifyTaskManagerFailure(resourceID)___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,notify,task,manager,failure,resource,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1493146240;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.notifyTaskManagerFailure(resourceID)___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,notify,task,manager,failure,resource,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1493308611;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.notifyTaskManagerFailure(resourceID)___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,notify,task,manager,failure,resource,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1493386068;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1493975155;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1498718472;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1498718493;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1498718494;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1498923209;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1499250208;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1501084996;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1501485811;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1501620216;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1501660289;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1501760738;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1502452184;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1502706197;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1503156481;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1504477043;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1504525441;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1504608225;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1506034747;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1507825825;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1508597556;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1509547680;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1509547920;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1509547921;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1510063662;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1510063662;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1510063662;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1510063665;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1510152676;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1511963573;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1511963573;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1516890809;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1517915730;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1517920461;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1519406528;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1521554023;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1521804757;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1521804760;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1525452496;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1527173115;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1530472204;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1530542668;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1532290976;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1532383539;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1533306679;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1535545389;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1536842721;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1536846489;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1537479166;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1538127492;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1539176686;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1539176686;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1539582211;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1542299814;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1549545568;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1550005039;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1550683187;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> @RpcMethod 	public SlotAssignment requestSlot(SlotRequest slotRequest);1482522858;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotAssignment requestSlot(SlotRequest slotRequest) {_		System.out.println("SlotRequest: " + slotRequest)__		return new SlotAssignment()__	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,assignment,request,slot,slot,request,slot,request,system,out,println,slot,request,slot,request,return,new,slot,assignment
ResourceManager -> @RpcMethod 	public SlotAssignment requestSlot(SlotRequest slotRequest);1482522859;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotAssignment requestSlot(SlotRequest slotRequest) {_		System.out.println("SlotRequest: " + slotRequest)__		return new SlotAssignment()__	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,assignment,request,slot,slot,request,slot,request,system,out,println,slot,request,slot,request,return,new,slot,assignment
ResourceManager -> ResourceManagerLeaderContender -> @Override 		public void handleError(final Exception exception);1482522858;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_		public void handleError(final Exception exception) {_			runAsync(new Runnable() {_				@Override_				public void run() {_					log.error("ResourceManager received an error from the LeaderElectionService.", exception)__					_					shutDown()__				}_			})__		};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,run,async,new,runnable,override,public,void,run,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> ResourceManagerLeaderContender -> @Override 		public void handleError(final Exception exception);1482522859;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_		public void handleError(final Exception exception) {_			runAsync(new Runnable() {_				@Override_				public void run() {_					log.error("ResourceManager received an error from the LeaderElectionService.", exception)__					_					shutDown()__				}_			})__		};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,run,async,new,runnable,override,public,void,run,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1482522864;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1482522864;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1482522864;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1482522865;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1482522866;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1482522867;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1489413798;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1490031358;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1490090124;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration);1482522858;Register a {@link JobMaster} at the resource manager.__@param jobMasterRegistration Job master registration information_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration) {_		Future<JobMasterGateway> jobMasterFuture = getRpcService().connect(jobMasterRegistration.getAddress(), JobMasterGateway.class)___		return jobMasterFuture.map(new Mapper<JobMasterGateway, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(final JobMasterGateway jobMasterGateway) {_				InstanceID instanceID___				if (jobMasterGateways.containsKey(jobMasterGateway)) {_					instanceID = jobMasterGateways.get(jobMasterGateway)__				} else {_					instanceID = new InstanceID()__					jobMasterGateways.put(jobMasterGateway, instanceID)__				}__				return new RegistrationResponse(true, instanceID)__			}_		}, getMainThreadExecutionContext())__	};register,a,link,job,master,at,the,resource,manager,param,job,master,registration,job,master,registration,information,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,job,master,registration,job,master,registration,future,job,master,gateway,job,master,future,get,rpc,service,connect,job,master,registration,get,address,job,master,gateway,class,return,job,master,future,map,new,mapper,job,master,gateway,registration,response,override,public,registration,response,apply,final,job,master,gateway,job,master,gateway,instance,id,instance,id,if,job,master,gateways,contains,key,job,master,gateway,instance,id,job,master,gateways,get,job,master,gateway,else,instance,id,new,instance,id,job,master,gateways,put,job,master,gateway,instance,id,return,new,registration,response,true,instance,id,get,main,thread,execution,context
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration);1482522858;Register a {@link JobMaster} at the resource manager.__@param jobMasterRegistration Job master registration information_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration) {_		final Future<JobMasterGateway> jobMasterFuture =_			getRpcService().connect(jobMasterRegistration.getAddress(), JobMasterGateway.class)__		final JobID jobID = jobMasterRegistration.getJobID()___		return jobMasterFuture.map(new Mapper<JobMasterGateway, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(final JobMasterGateway jobMasterGateway) {__				final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__				if (existingGateway != null) {_					LOG.info("Replacing existing gateway {} for JobID {} with  {}.",_						existingGateway, jobID, jobMasterGateway)__				}_				return new RegistrationResponse(true)__			}_		}, getMainThreadExecutionContext())__	};register,a,link,job,master,at,the,resource,manager,param,job,master,registration,job,master,registration,information,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,job,master,registration,job,master,registration,final,future,job,master,gateway,job,master,future,get,rpc,service,connect,job,master,registration,get,address,job,master,gateway,class,final,job,id,job,id,job,master,registration,get,job,id,return,job,master,future,map,new,mapper,job,master,gateway,registration,response,override,public,registration,response,apply,final,job,master,gateway,job,master,gateway,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,existing,gateway,for,job,id,with,existing,gateway,job,id,job,master,gateway,return,new,registration,response,true,get,main,thread,execution,context
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration);1482522859;Register a {@link JobMaster} at the resource manager.__@param jobMasterRegistration Job master registration information_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration) {_		final Future<JobMasterGateway> jobMasterFuture =_			getRpcService().connect(jobMasterRegistration.getAddress(), JobMasterGateway.class)__		final JobID jobID = jobMasterRegistration.getJobID()___		return jobMasterFuture.map(new Mapper<JobMasterGateway, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(final JobMasterGateway jobMasterGateway) {__				final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__				if (existingGateway != null) {_					LOG.info("Replacing existing gateway {} for JobID {} with  {}.",_						existingGateway, jobID, jobMasterGateway)__				}_				return new RegistrationResponse(true)__			}_		}, getMainThreadExecutionContext())__	};register,a,link,job,master,at,the,resource,manager,param,job,master,registration,job,master,registration,information,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,job,master,registration,job,master,registration,final,future,job,master,gateway,job,master,future,get,rpc,service,connect,job,master,registration,get,address,job,master,gateway,class,final,job,id,job,id,job,master,registration,get,job,id,return,job,master,future,map,new,mapper,job,master,gateway,registration,response,override,public,registration,response,apply,final,job,master,gateway,job,master,gateway,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,existing,gateway,for,job,id,with,existing,gateway,job,id,job,master,gateway,return,new,registration,response,true,get,main,thread,execution,context
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration);1482522859;Register a {@link JobMaster} at the resource manager.__@param jobMasterRegistration Job master registration information_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration) {_		final Future<JobMasterGateway> jobMasterFuture =_			getRpcService().connect(jobMasterRegistration.getAddress(), JobMasterGateway.class)__		final JobID jobID = jobMasterRegistration.getJobID()___		return jobMasterFuture.thenApplyAsync(new ApplyFunction<JobMasterGateway, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(JobMasterGateway jobMasterGateway) {_				final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__				if (existingGateway != null) {_					LOG.info("Replacing existing gateway {} for JobID {} with  {}.",_						existingGateway, jobID, jobMasterGateway)__				}_				return new RegistrationResponse(true)__			}_		}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,job,master,registration,job,master,registration,information,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,job,master,registration,job,master,registration,final,future,job,master,gateway,job,master,future,get,rpc,service,connect,job,master,registration,get,address,job,master,gateway,class,final,job,id,job,id,job,master,registration,get,job,id,return,job,master,future,then,apply,async,new,apply,function,job,master,gateway,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,existing,gateway,for,job,id,with,existing,gateway,job,id,job,master,gateway,return,new,registration,response,true,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration);1482522859;Register a {@link JobMaster} at the resource manager.__@param jobMasterRegistration Job master registration information_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration) {_		Future<JobMasterGateway> jobMasterFuture = getRpcService().connect(jobMasterRegistration.getAddress(), JobMasterGateway.class)___		return jobMasterFuture.map(new Mapper<JobMasterGateway, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(final JobMasterGateway jobMasterGateway) {_				InstanceID instanceID___				if (jobMasterGateways.containsKey(jobMasterGateway)) {_					instanceID = jobMasterGateways.get(jobMasterGateway)__				} else {_					instanceID = new InstanceID()__					jobMasterGateways.put(jobMasterGateway, instanceID)__				}__				return new TaskExecutorRegistrationSuccess(instanceID, 5000)__			}_		}, getMainThreadExecutionContext())__	};register,a,link,job,master,at,the,resource,manager,param,job,master,registration,job,master,registration,information,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,job,master,registration,job,master,registration,future,job,master,gateway,job,master,future,get,rpc,service,connect,job,master,registration,get,address,job,master,gateway,class,return,job,master,future,map,new,mapper,job,master,gateway,registration,response,override,public,registration,response,apply,final,job,master,gateway,job,master,gateway,instance,id,instance,id,if,job,master,gateways,contains,key,job,master,gateway,instance,id,job,master,gateways,get,job,master,gateway,else,instance,id,new,instance,id,job,master,gateways,put,job,master,gateway,instance,id,return,new,task,executor,registration,success,instance,id,5000,get,main,thread,execution,context
ResourceManager -> void onFatalError(Throwable t);1482522864;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1482522864;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1482522864;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1482522865;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1482522866;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1482522867;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1489413798;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1490031358;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1490090124;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1490273924;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1490273924;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1493146240;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1493308611;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1493386068;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1493975155;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 		final SlotReport slotReport);1490273924;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)__						}__						WorkerType newWorker = workerStarted(taskExecutorResourceId)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(taskExecutorResourceId, registration)__						slotManager.registerTaskExecutor(taskExecutorResourceId, registration, slotReport)___						taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_							@Override_							public void receiveHeartbeat(ResourceID resourceID, Void payload) {_								_							}__							@Override_							public void requestHeartbeat(ResourceID resourceID, Void payload) {_								taskExecutorGateway.heartbeatFromResourceManager(resourceID)__							}_						})___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(), resourceId,_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,worker,type,new,worker,worker,started,task,executor,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,executor,task,executor,resource,id,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 		final SlotReport slotReport);1490273924;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_		final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)__						}__						WorkerType newWorker = workerStarted(taskExecutorResourceId)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(taskExecutorResourceId, registration)__						slotManager.registerTaskExecutor(taskExecutorResourceId, registration, slotReport)___						taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_							@Override_							public void receiveHeartbeat(ResourceID resourceID, Void payload) {_								_								_							}__							@Override_							public void requestHeartbeat(ResourceID resourceID, Void payload) {_								taskExecutorGateway.heartbeatFromResourceManager(resourceID)__							}_						})___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceId,_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,worker,type,new,worker,worker,started,task,executor,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,executor,task,executor,resource,id,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 		final SlotReport slotReport);1493146240;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_		final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)__						}__						WorkerType newWorker = workerStarted(taskExecutorResourceId)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(taskExecutorResourceId, registration)__						slotManager.registerTaskExecutor(taskExecutorResourceId, registration, slotReport)___						taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_							@Override_							public void receiveHeartbeat(ResourceID resourceID, Void payload) {_								_								_							}__							@Override_							public void requestHeartbeat(ResourceID resourceID, Void payload) {_								taskExecutorGateway.heartbeatFromResourceManager(resourceID)__							}_						})___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceId,_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,worker,type,new,worker,worker,started,task,executor,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,executor,task,executor,resource,id,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 		final SlotReport slotReport);1493308611;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_		final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)__						}__						WorkerType newWorker = workerStarted(taskExecutorResourceId)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(taskExecutorResourceId, registration)__						slotManager.registerTaskExecutor(taskExecutorResourceId, registration, slotReport)___						taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_							@Override_							public void receiveHeartbeat(ResourceID resourceID, Void payload) {_								_								_							}__							@Override_							public void requestHeartbeat(ResourceID resourceID, Void payload) {_								taskExecutorGateway.heartbeatFromResourceManager(resourceID)__							}_						})___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceId,_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,worker,type,new,worker,worker,started,task,executor,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,executor,task,executor,resource,id,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1493386068;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1493975155;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1498718472;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1498718493;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1498718494;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1498923209;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1499250208;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1501084996;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1501485811;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1501620216;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1501660289;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1501760738;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> ResourceManagerLeaderContender -> @Override 		public void grantLeadership(final UUID leaderSessionID);1482522858;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_		public void grantLeadership(final UUID leaderSessionID) {_			runAsync(new Runnable() {_				@Override_				public void run() {_					log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__					ResourceManager.this.leaderSessionID = leaderSessionID__					_					leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				}_			})__		};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,resource,manager,this,leader,session,id,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id
ResourceManager -> ResourceManagerLeaderContender -> @Override 		public void grantLeadership(final UUID leaderSessionID);1482522859;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_		public void grantLeadership(final UUID leaderSessionID) {_			runAsync(new Runnable() {_				@Override_				public void run() {_					log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__					ResourceManager.this.leaderSessionID = leaderSessionID__					_					leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				}_			})__		};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,resource,manager,this,leader,session,id,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1482522860;Callback when a resource manager faced a fatal error_@param message_@param error;protected abstract void fatalError(String message, Throwable error)_;callback,when,a,resource,manager,faced,a,fatal,error,param,message,param,error;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1482522861;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1482522861;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1482522861;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1482522861;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1482522862;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1482522862;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1482522862;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1482522863;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1482522863;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1482522867;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1489413798;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1490031358;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1490090124;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1490273924;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1490273924;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1493146240;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1493308611;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1493386068;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1493975155;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1498718472;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1498718493;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1498718494;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1498923209;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1499250208;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1501084996;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1501485811;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1501620216;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1501660289;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1501760738;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1502452184;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1502706197;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1503156481;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
