commented;modifiers;parameterAmount;loc;comment;code
false;public;2;8;;public void setMemorySegment(MemorySegment memorySegment, int offset) {     Preconditions.checkArgument(memorySegment != null, "MemorySegment can not be null.").     Preconditions.checkArgument(offset >= 0, "Offset should be positive integer.").     Preconditions.checkArgument(offset + byteLength <= memorySegment.size(), "Could not set MemorySegment, the remain buffers is not enough.").     this.memorySegment = memorySegment.     this.offset = offset. }
true;public;1;8;/**  * Sets the bit at specified index.  *  * @param index - position  */ ;/**  * Sets the bit at specified index.  *  * @param index - position  */ public void set(int index) {     Preconditions.checkArgument(index < bitLength && index >= 0).     int byteIndex = (index & BYTE_POSITION_MASK) >>> 3.     byte current = memorySegment.get(offset + byteIndex).     current |= (1 << (index & BYTE_INDEX_MASK)).     memorySegment.put(offset + byteIndex, current). }
true;public;1;7;/**  * Returns true if the bit is set in the specified index.  *  * @param index - position  * @return - value at the bit position  */ ;/**  * Returns true if the bit is set in the specified index.  *  * @param index - position  * @return - value at the bit position  */ public boolean get(int index) {     Preconditions.checkArgument(index < bitLength && index >= 0).     int byteIndex = (index & BYTE_POSITION_MASK) >>> 3.     byte current = memorySegment.get(offset + byteIndex).     return (current & (1 << (index & BYTE_INDEX_MASK))) != 0. }
true;public;0;3;/**  * Number of bits  */ ;/**  * Number of bits  */ public int bitSize() {     return bitLength. }
true;public;0;5;/**  * Clear the bit set.  */ ;/**  * Clear the bit set.  */ public void clear() {     for (int i = 0. i < byteLength. i++) {         memorySegment.put(offset + i, (byte) 0).     } }
false;public;0;9;;@Override public String toString() {     StringBuilder output = new StringBuilder().     output.append("BitSet:\n").     output.append("\tMemorySegment:").append(memorySegment.size()).append("\n").     output.append("\tOffset:").append(offset).append("\n").     output.append("\tLength:").append(byteLength).append("\n").     return output.toString(). }
