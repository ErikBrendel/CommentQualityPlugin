commented;modifiers;parameterAmount;loc;comment;code
true;public;1;14;// -------------------------------------------------------------------------------------------- ;// -------------------------------------------------------------------------------------------- @Override public void setup(AbstractInvokable parent) {     @SuppressWarnings("unchecked")     final ReduceFunction<IT> red = BatchTask.instantiateUserCode(this.config, userCodeClassLoader, ReduceFunction.class).     this.reducer = red.     FunctionUtils.setFunctionRuntimeContext(red, getUdfRuntimeContext()).     TypeSerializerFactory<IT> serializerFactory = this.config.getInputSerializer(0, userCodeClassLoader).     this.serializer = serializerFactory.getSerializer().     if (LOG.isDebugEnabled()) {         LOG.debug("ChainedAllReduceDriver object reuse: " + (this.objectReuseEnabled ? "ENABLED" : "DISABLED") + ".").     } }
false;public;0;5;;@Override public void openTask() throws Exception {     Configuration stubConfig = this.config.getStubParameters().     BatchTask.openUserCode(this.reducer, stubConfig). }
false;public;0;4;;@Override public void closeTask() throws Exception {     BatchTask.closeUserCode(this.reducer). }
false;public;0;7;;@Override public void cancelTask() {     try {         FunctionUtils.closeFunction(this.reducer).     } catch (Throwable t) {     } }
true;public;0;4;// -------------------------------------------------------------------------------------------- ;// -------------------------------------------------------------------------------------------- @Override public Function getStub() {     return this.reducer. }
false;public;0;4;;@Override public String getTaskName() {     return this.taskName. }
true;public;1;13;// -------------------------------------------------------------------------------------------- ;// -------------------------------------------------------------------------------------------- @Override public void collect(IT record) {     numRecordsIn.inc().     try {         if (base == null) {             base = serializer.copy(record).         } else {             base = objectReuseEnabled ? reducer.reduce(base, record) : serializer.copy(reducer.reduce(base, record)).         }     } catch (Exception e) {         throw new ExceptionInChainedStubException(taskName, e).     } }
false;public;0;12;;@Override public void close() {     try {         if (base != null) {             this.outputCollector.collect(base).             base = null.         }     } catch (Exception e) {         throw new ExceptionInChainedStubException(this.taskName, e).     }     this.outputCollector.close(). }
