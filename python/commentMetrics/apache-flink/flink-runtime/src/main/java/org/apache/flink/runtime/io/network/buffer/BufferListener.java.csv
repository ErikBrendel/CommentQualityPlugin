commented;modifiers;parameterAmount;loc;comment;code
true;;0;3;/**  * Whether the notified buffer is accepted to use by the listener.  *  * @return <tt>true</tt> if the notified buffer is accepted.  */ ;/**  * Whether the notified buffer is accepted to use by the listener.  *  * @return <tt>true</tt> if the notified buffer is accepted.  */ boolean isBufferUsed() {     return isBufferUsed. }
true;;0;3;/**  * Whether the listener still needs more buffers to be notified.  *  * @return <tt>true</tt> if the listener is still waiting for more buffers.  */ ;/**  * Whether the listener still needs more buffers to be notified.  *  * @return <tt>true</tt> if the listener is still waiting for more buffers.  */ boolean needsMoreBuffers() {     return needsMoreBuffers. }
true;;1;1;/**  * Notification callback if a buffer is recycled and becomes available in buffer pool.  *  * <p>Note: responsibility on recycling the given buffer is transferred to this implementation,  * including any errors that lead to exceptions being thrown!  *  * <p><strong>BEWARE:</strong> since this may be called from outside the thread that relies on  * the listener's logic, any exception that occurs with this handler should be forwarded to the  * responsible thread for handling and otherwise ignored in the processing of this method. The  * buffer pool forwards any {@link Throwable} from here upwards to a potentially unrelated call  * stack!  *  * @param buffer buffer that becomes available in buffer pool.  * @return NotificationResult if the listener wants to be notified next time.  */ ;/**  * Notification callback if a buffer is recycled and becomes available in buffer pool.  *  * <p>Note: responsibility on recycling the given buffer is transferred to this implementation,  * including any errors that lead to exceptions being thrown!  *  * <p><strong>BEWARE:</strong> since this may be called from outside the thread that relies on  * the listener's logic, any exception that occurs with this handler should be forwarded to the  * responsible thread for handling and otherwise ignored in the processing of this method. The  * buffer pool forwards any {@link Throwable} from here upwards to a potentially unrelated call  * stack!  *  * @param buffer buffer that becomes available in buffer pool.  * @return NotificationResult if the listener wants to be notified next time.  */ NotificationResult notifyBufferAvailable(Buffer buffer).
true;;0;1;/**  * Notification callback if the buffer provider is destroyed.  */ ;/**  * Notification callback if the buffer provider is destroyed.  */ void notifyBufferDestroyed().
