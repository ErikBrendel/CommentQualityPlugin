# id;timestamp;commentText;codeText;commentWords;codeWords
BufferListener -> void notifyBufferDestroyed()_;1507647200;Notification callback if the buffer provider is destroyed.;void notifyBufferDestroyed()_;notification,callback,if,the,buffer,provider,is,destroyed;void,notify,buffer,destroyed
BufferListener -> void notifyBufferDestroyed()_;1532012479;Notification callback if the buffer provider is destroyed.;void notifyBufferDestroyed()_;notification,callback,if,the,buffer,provider,is,destroyed;void,notify,buffer,destroyed
BufferListener -> void notifyBufferDestroyed()_;1543328832;Notification callback if the buffer provider is destroyed.;void notifyBufferDestroyed()_;notification,callback,if,the,buffer,provider,is,destroyed;void,notify,buffer,destroyed
BufferListener -> boolean notifyBufferAvailable(Buffer buffer)_;1507647200;Notification callback if a buffer is recycled and becomes available in buffer pool.__@param buffer buffer that becomes available in buffer pool._@return true if the listener wants to be notified next time.;boolean notifyBufferAvailable(Buffer buffer)_;notification,callback,if,a,buffer,is,recycled,and,becomes,available,in,buffer,pool,param,buffer,buffer,that,becomes,available,in,buffer,pool,return,true,if,the,listener,wants,to,be,notified,next,time;boolean,notify,buffer,available,buffer,buffer
BufferListener -> boolean notifyBufferAvailable(Buffer buffer)_;1532012479;Notification callback if a buffer is recycled and becomes available in buffer pool.__<p>Note: responsibility on recycling the given buffer is transferred to this implementation,_including any errors that lead to exceptions being thrown!__<p><strong>BEWARE:</strong> since this may be called from outside the thread that relies on_the listener's logic, any exception that occurs with this handler should be forwarded to the_responsible thread for handling and otherwise ignored in the processing of this method. The_buffer pool forwards any {@link Throwable} from here upwards to a potentially unrelated call_stack!__@param buffer buffer that becomes available in buffer pool._@return true if the listener wants to be notified next time.;boolean notifyBufferAvailable(Buffer buffer)_;notification,callback,if,a,buffer,is,recycled,and,becomes,available,in,buffer,pool,p,note,responsibility,on,recycling,the,given,buffer,is,transferred,to,this,implementation,including,any,errors,that,lead,to,exceptions,being,thrown,p,strong,beware,strong,since,this,may,be,called,from,outside,the,thread,that,relies,on,the,listener,s,logic,any,exception,that,occurs,with,this,handler,should,be,forwarded,to,the,responsible,thread,for,handling,and,otherwise,ignored,in,the,processing,of,this,method,the,buffer,pool,forwards,any,link,throwable,from,here,upwards,to,a,potentially,unrelated,call,stack,param,buffer,buffer,that,becomes,available,in,buffer,pool,return,true,if,the,listener,wants,to,be,notified,next,time;boolean,notify,buffer,available,buffer,buffer
