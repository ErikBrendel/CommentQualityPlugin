commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Creates a deep copy of the itself.  */ ;/**  * Creates a deep copy of the itself.  */ @Nonnull public RegisteredOperatorStateBackendMetaInfo<S> deepCopy() {     return new RegisteredOperatorStateBackendMetaInfo<>(this). }
false;public;0;5;;@Nonnull @Override public StateMetaInfoSnapshot snapshot() {     return computeSnapshot(). }
false;public;0;4;;@Nonnull public OperatorStateHandle.Mode getAssignmentMode() {     return assignmentMode. }
false;public;0;4;;@Nonnull public TypeSerializer<S> getPartitionStateSerializer() {     return partitionStateSerializerProvider.currentSchemaSerializer(). }
false;public;1;4;;@Nonnull public TypeSerializerSchemaCompatibility<S> updatePartitionStateSerializer(TypeSerializer<S> newPartitionStateSerializer) {     return partitionStateSerializerProvider.registerNewSerializerForRestoredState(newPartitionStateSerializer). }
false;public;0;4;;@Nullable public TypeSerializer<S> getPreviousPartitionStateSerializer() {     return partitionStateSerializerProvider.previousSchemaSerializer(). }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj == null) {         return false.     }     return (obj instanceof RegisteredOperatorStateBackendMetaInfo) && name.equals(((RegisteredOperatorStateBackendMetaInfo) obj).getName()) && assignmentMode.equals(((RegisteredOperatorStateBackendMetaInfo) obj).getAssignmentMode()) && getPartitionStateSerializer().equals(((RegisteredOperatorStateBackendMetaInfo) obj).getPartitionStateSerializer()). }
false;public;0;7;;@Override public int hashCode() {     int result = getName().hashCode().     result = 31 * result + getAssignmentMode().hashCode().     result = 31 * result + getPartitionStateSerializer().hashCode().     return result. }
false;public;0;8;;@Override public String toString() {     return "RegisteredOperatorBackendStateMetaInfo{" + "name='" + name + "\'" + ", assignmentMode=" + assignmentMode + ", partitionStateSerializer=" + getPartitionStateSerializer() + '}'. }
false;private;0;20;;@Nonnull private StateMetaInfoSnapshot computeSnapshot() {     Map<String, String> optionsMap = Collections.singletonMap(StateMetaInfoSnapshot.CommonOptionsKeys.OPERATOR_STATE_DISTRIBUTION_MODE.toString(), assignmentMode.toString()).     String valueSerializerKey = StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER.toString().     TypeSerializer<S> partitionStateSerializer = getPartitionStateSerializer().     Map<String, TypeSerializer<?>> serializerMap = Collections.singletonMap(valueSerializerKey, partitionStateSerializer.duplicate()).     Map<String, TypeSerializerSnapshot<?>> serializerConfigSnapshotsMap = Collections.singletonMap(valueSerializerKey, partitionStateSerializer.snapshotConfiguration()).     return new StateMetaInfoSnapshot(name, StateMetaInfoSnapshot.BackendStateType.OPERATOR, optionsMap, serializerConfigSnapshotsMap, serializerMap). }
