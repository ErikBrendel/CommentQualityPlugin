commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Start monitoring a {@link HeartbeatTarget}. Heartbeat timeouts for this target are reported  * to the {@link HeartbeatListener} associated with this heartbeat manager.  *  * @param resourceID Resource ID identifying the heartbeat target  * @param heartbeatTarget Interface to send heartbeat requests and responses to the heartbeat  *                        target  */ ;/**  * Start monitoring a {@link HeartbeatTarget}. Heartbeat timeouts for this target are reported  * to the {@link HeartbeatListener} associated with this heartbeat manager.  *  * @param resourceID Resource ID identifying the heartbeat target  * @param heartbeatTarget Interface to send heartbeat requests and responses to the heartbeat  *                        target  */ void monitorTarget(ResourceID resourceID, HeartbeatTarget<O> heartbeatTarget).
true;;1;1;/**  * Stops monitoring the heartbeat target with the associated resource ID.  *  * @param resourceID Resource ID of the heartbeat target which shall no longer be monitored  */ ;/**  * Stops monitoring the heartbeat target with the associated resource ID.  *  * @param resourceID Resource ID of the heartbeat target which shall no longer be monitored  */ void unmonitorTarget(ResourceID resourceID).
true;;0;1;/**  * Stops the heartbeat manager.  */ ;/**  * Stops the heartbeat manager.  */ void stop().
true;;1;1;/**  * Returns the last received heartbeat from the given target.  *  * @param resourceId for which to return the last heartbeat  * @return Last heartbeat received from the given target or -1 if the target is not being monitored.  */ ;/**  * Returns the last received heartbeat from the given target.  *  * @param resourceId for which to return the last heartbeat  * @return Last heartbeat received from the given target or -1 if the target is not being monitored.  */ long getLastHeartbeatFrom(ResourceID resourceId).
