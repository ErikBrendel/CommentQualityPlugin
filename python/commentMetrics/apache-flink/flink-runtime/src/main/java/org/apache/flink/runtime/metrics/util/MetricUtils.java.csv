commented;modifiers;parameterAmount;loc;comment;code
false;public,static;3;18;;public static JobManagerMetricGroup instantiateJobManagerMetricGroup(final MetricRegistry metricRegistry, final String hostname, final Optional<Time> systemResourceProbeInterval) {     final JobManagerMetricGroup jobManagerMetricGroup = new JobManagerMetricGroup(metricRegistry, hostname).     MetricGroup statusGroup = jobManagerMetricGroup.addGroup(METRIC_GROUP_STATUS_NAME).     // initialize the JM metrics     instantiateStatusMetrics(statusGroup).     if (systemResourceProbeInterval.isPresent()) {         instantiateSystemMetrics(jobManagerMetricGroup, systemResourceProbeInterval.get()).     }     return jobManagerMetricGroup. }
false;public,static;4;24;;public static TaskManagerMetricGroup instantiateTaskManagerMetricGroup(MetricRegistry metricRegistry, TaskManagerLocation taskManagerLocation, NetworkEnvironment network, Optional<Time> systemResourceProbeInterval) {     final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(metricRegistry, taskManagerLocation.getHostname(), taskManagerLocation.getResourceID().toString()).     MetricGroup statusGroup = taskManagerMetricGroup.addGroup(METRIC_GROUP_STATUS_NAME).     // Initialize the TM metrics     instantiateStatusMetrics(statusGroup).     MetricGroup networkGroup = statusGroup.addGroup("Network").     instantiateNetworkMetrics(networkGroup, network).     if (systemResourceProbeInterval.isPresent()) {         instantiateSystemMetrics(taskManagerMetricGroup, systemResourceProbeInterval.get()).     }     return taskManagerMetricGroup. }
false;public,static;1;10;;public static void instantiateStatusMetrics(MetricGroup metricGroup) {     MetricGroup jvm = metricGroup.addGroup("JVM").     instantiateClassLoaderMetrics(jvm.addGroup("ClassLoader")).     instantiateGarbageCollectorMetrics(jvm.addGroup("GarbageCollector")).     instantiateMemoryMetrics(jvm.addGroup("Memory")).     instantiateThreadMetrics(jvm.addGroup("Threads")).     instantiateCPUMetrics(jvm.addGroup("CPU")). }
false;public,static;3;11;;public static ActorSystem startMetricsActorSystem(Configuration configuration, String hostname, Logger logger) throws Exception {     final String portRange = configuration.getString(MetricOptions.QUERY_SERVICE_PORT).     final int threadPriority = configuration.getInteger(MetricOptions.QUERY_SERVICE_THREAD_PRIORITY).     return BootstrapTools.startActorSystem(configuration, METRICS_ACTOR_SYSTEM_NAME, hostname, portRange, logger, new BootstrapTools.FixedThreadPoolExecutorConfiguration(1, 1, threadPriority)). }
false;private,static;2;8;;private static void instantiateNetworkMetrics(MetricGroup metrics, final NetworkEnvironment network) {     final NetworkBufferPool networkBufferPool = network.getNetworkBufferPool().     metrics.<Integer, Gauge<Integer>>gauge("TotalMemorySegments", networkBufferPool::getTotalNumberOfMemorySegments).     metrics.<Integer, Gauge<Integer>>gauge("AvailableMemorySegments", networkBufferPool::getNumberOfAvailableMemorySegments). }
false;private,static;1;5;;private static void instantiateClassLoaderMetrics(MetricGroup metrics) {     final ClassLoadingMXBean mxBean = ManagementFactory.getClassLoadingMXBean().     metrics.<Long, Gauge<Long>>gauge("ClassesLoaded", mxBean::getTotalLoadedClassCount).     metrics.<Long, Gauge<Long>>gauge("ClassesUnloaded", mxBean::getUnloadedClassCount). }
false;private,static;1;10;;private static void instantiateGarbageCollectorMetrics(MetricGroup metrics) {     List<GarbageCollectorMXBean> garbageCollectors = ManagementFactory.getGarbageCollectorMXBeans().     for (final GarbageCollectorMXBean garbageCollector : garbageCollectors) {         MetricGroup gcGroup = metrics.addGroup(garbageCollector.getName()).         gcGroup.<Long, Gauge<Long>>gauge("Count", garbageCollector::getCollectionCount).         gcGroup.<Long, Gauge<Long>>gauge("Time", garbageCollector::getCollectionTime).     } }
false;private,static;1;46;;private static void instantiateMemoryMetrics(MetricGroup metrics) {     final MemoryUsage heapMemoryUsage = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().     final MemoryUsage nonHeapMemoryUsage = ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage().     MetricGroup heap = metrics.addGroup("Heap").     heap.<Long, Gauge<Long>>gauge("Used", heapMemoryUsage::getUsed).     heap.<Long, Gauge<Long>>gauge("Committed", heapMemoryUsage::getCommitted).     heap.<Long, Gauge<Long>>gauge("Max", heapMemoryUsage::getMax).     MetricGroup nonHeap = metrics.addGroup("NonHeap").     nonHeap.<Long, Gauge<Long>>gauge("Used", nonHeapMemoryUsage::getUsed).     nonHeap.<Long, Gauge<Long>>gauge("Committed", nonHeapMemoryUsage::getCommitted).     nonHeap.<Long, Gauge<Long>>gauge("Max", nonHeapMemoryUsage::getMax).     final MBeanServer con = ManagementFactory.getPlatformMBeanServer().     final String directBufferPoolName = "java.nio:type=BufferPool,name=direct".     try {         final ObjectName directObjectName = new ObjectName(directBufferPoolName).         MetricGroup direct = metrics.addGroup("Direct").         direct.<Long, Gauge<Long>>gauge("Count", new AttributeGauge<>(con, directObjectName, "Count", -1L)).         direct.<Long, Gauge<Long>>gauge("MemoryUsed", new AttributeGauge<>(con, directObjectName, "MemoryUsed", -1L)).         direct.<Long, Gauge<Long>>gauge("TotalCapacity", new AttributeGauge<>(con, directObjectName, "TotalCapacity", -1L)).     } catch (MalformedObjectNameException e) {         LOG.warn("Could not create object name {}.", directBufferPoolName, e).     }     final String mappedBufferPoolName = "java.nio:type=BufferPool,name=mapped".     try {         final ObjectName mappedObjectName = new ObjectName(mappedBufferPoolName).         MetricGroup mapped = metrics.addGroup("Mapped").         mapped.<Long, Gauge<Long>>gauge("Count", new AttributeGauge<>(con, mappedObjectName, "Count", -1L)).         mapped.<Long, Gauge<Long>>gauge("MemoryUsed", new AttributeGauge<>(con, mappedObjectName, "MemoryUsed", -1L)).         mapped.<Long, Gauge<Long>>gauge("TotalCapacity", new AttributeGauge<>(con, mappedObjectName, "TotalCapacity", -1L)).     } catch (MalformedObjectNameException e) {         LOG.warn("Could not create object name {}.", mappedBufferPoolName, e).     } }
false;private,static;1;5;;private static void instantiateThreadMetrics(MetricGroup metrics) {     final ThreadMXBean mxBean = ManagementFactory.getThreadMXBean().     metrics.<Integer, Gauge<Integer>>gauge("Count", mxBean::getThreadCount). }
false;private,static;1;11;;private static void instantiateCPUMetrics(MetricGroup metrics) {     try {         final com.sun.management.OperatingSystemMXBean mxBean = (com.sun.management.OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean().         metrics.<Double, Gauge<Double>>gauge("Load", mxBean::getProcessCpuLoad).         metrics.<Long, Gauge<Long>>gauge("Time", mxBean::getProcessCpuTime).     } catch (Exception e) {         LOG.warn("Cannot access com.sun.management.OperatingSystemMXBean.getProcessCpuLoad()" + " - CPU load metrics will not be available.", e).     } }
false;public;0;10;;@SuppressWarnings("unchecked") @Override public T getValue() {     try {         return (T) server.getAttribute(objectName, attributeName).     } catch (MBeanException | AttributeNotFoundException | InstanceNotFoundException | ReflectionException e) {         LOG.warn("Could not read attribute {}.", attributeName, e).         return errorValue.     } }
