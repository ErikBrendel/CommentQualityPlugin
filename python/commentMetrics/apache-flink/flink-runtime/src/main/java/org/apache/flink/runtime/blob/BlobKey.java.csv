# id;timestamp;commentText;codeText;commentWords;codeWords
BlobKey -> @Override 	public int hashCode();1412605211;{@inheritDoc};@Override_	public int hashCode() {_		return Arrays.hashCode(this.key)__	};inherit,doc;override,public,int,hash,code,return,arrays,hash,code,this,key
BlobKey -> @Override 	public int hashCode();1418925508;{@inheritDoc};@Override_	public int hashCode() {_		return Arrays.hashCode(this.key)__	};inherit,doc;override,public,int,hash,code,return,arrays,hash,code,this,key
BlobKey -> public BlobKey();1412605211;Constructs a new BLOB key.;public BlobKey() {_		this.key = new byte[SIZE]__	};constructs,a,new,blob,key;public,blob,key,this,key,new,byte,size
BlobKey -> public BlobKey();1418925508;Constructs a new BLOB key.;public BlobKey() {_		this.key = new byte[SIZE]__	};constructs,a,new,blob,key;public,blob,key,this,key,new,byte,size
BlobKey -> public BlobKey();1420538822;Constructs a new BLOB key.;public BlobKey() {_		this.key = new byte[SIZE]__	};constructs,a,new,blob,key;public,blob,key,this,key,new,byte,size
BlobKey -> public BlobKey();1424264340;Constructs a new BLOB key.;public BlobKey() {_		this.key = new byte[SIZE]__	};constructs,a,new,blob,key;public,blob,key,this,key,new,byte,size
BlobKey -> static BlobKey createKey(BlobType type, byte[] key, byte[] random);1508138617;Returns the right {@link BlobKey} subclass for the given parameters.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data_@param random_the random component of the key__@return BlobKey subclass;static BlobKey createKey(BlobType type, byte[] key, byte[] random) {_		if (type == PERMANENT_BLOB) {_			return new PermanentBlobKey(key, random)__		} else {_			return new TransientBlobKey(key, random)__		}_	};returns,the,right,link,blob,key,subclass,for,the,given,parameters,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data,param,random,the,random,component,of,the,key,return,blob,key,subclass;static,blob,key,create,key,blob,type,type,byte,key,byte,random,if,type,return,new,permanent,blob,key,key,random,else,return,new,transient,blob,key,key,random
BlobKey -> static BlobKey createKey(BlobType type, byte[] key, byte[] random);1508861310;Returns the right {@link BlobKey} subclass for the given parameters.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data_@param random_the random component of the key__@return BlobKey subclass;static BlobKey createKey(BlobType type, byte[] key, byte[] random) {_		if (type == PERMANENT_BLOB) {_			return new PermanentBlobKey(key, random)__		} else {_			return new TransientBlobKey(key, random)__		}_	};returns,the,right,link,blob,key,subclass,for,the,given,parameters,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data,param,random,the,random,component,of,the,key,return,blob,key,subclass;static,blob,key,create,key,blob,type,type,byte,key,byte,random,if,type,return,new,permanent,blob,key,key,random,else,return,new,transient,blob,key,key,random
BlobKey -> static BlobKey createKey(BlobType type, byte[] key, byte[] random);1515428991;Returns the right {@link BlobKey} subclass for the given parameters.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data_@param random_the random component of the key__@return BlobKey subclass;static BlobKey createKey(BlobType type, byte[] key, byte[] random) {_		if (type == PERMANENT_BLOB) {_			return new PermanentBlobKey(key, random)__		} else {_			return new TransientBlobKey(key, random)__		}_	};returns,the,right,link,blob,key,subclass,for,the,given,parameters,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data,param,random,the,random,component,of,the,key,return,blob,key,subclass;static,blob,key,create,key,blob,type,type,byte,key,byte,random,if,type,return,new,permanent,blob,key,key,random,else,return,new,transient,blob,key,key,random
BlobKey -> static BlobKey createKey(BlobType type, byte[] key, byte[] random);1526549506;Returns the right {@link BlobKey} subclass for the given parameters.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data_@param random_the random component of the key__@return BlobKey subclass;static BlobKey createKey(BlobType type, byte[] key, byte[] random) {_		if (type == PERMANENT_BLOB) {_			return new PermanentBlobKey(key, random)__		} else {_			return new TransientBlobKey(key, random)__		}_	};returns,the,right,link,blob,key,subclass,for,the,given,parameters,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data,param,random,the,random,component,of,the,key,return,blob,key,subclass;static,blob,key,create,key,blob,type,type,byte,key,byte,random,if,type,return,new,permanent,blob,key,key,random,else,return,new,transient,blob,key,key,random
BlobKey -> @VisibleForTesting 	static BlobKey createKey(BlobType type);1507212387;Returns the right {@link BlobKey} subclass for the given parameters.__@param type_whether the referenced BLOB is permanent or transient__@return BlobKey subclass;@VisibleForTesting_	static BlobKey createKey(BlobType type) {_		if (type == PERMANENT_BLOB) {_            return new PermanentBlobKey()__        } else {_			return new TransientBlobKey()__        }_	};returns,the,right,link,blob,key,subclass,for,the,given,parameters,param,type,whether,the,referenced,blob,is,permanent,or,transient,return,blob,key,subclass;visible,for,testing,static,blob,key,create,key,blob,type,type,if,type,return,new,permanent,blob,key,else,return,new,transient,blob,key
BlobKey -> @VisibleForTesting 	static BlobKey createKey(BlobType type);1508138617;Returns the right {@link BlobKey} subclass for the given parameters.__@param type_whether the referenced BLOB is permanent or transient__@return BlobKey subclass;@VisibleForTesting_	static BlobKey createKey(BlobType type) {_		if (type == PERMANENT_BLOB) {_			return new PermanentBlobKey()__		} else {_			return new TransientBlobKey()__		}_	};returns,the,right,link,blob,key,subclass,for,the,given,parameters,param,type,whether,the,referenced,blob,is,permanent,or,transient,return,blob,key,subclass;visible,for,testing,static,blob,key,create,key,blob,type,type,if,type,return,new,permanent,blob,key,else,return,new,transient,blob,key
BlobKey -> @VisibleForTesting 	static BlobKey createKey(BlobType type);1508861310;Returns the right {@link BlobKey} subclass for the given parameters.__@param type_whether the referenced BLOB is permanent or transient__@return BlobKey subclass;@VisibleForTesting_	static BlobKey createKey(BlobType type) {_		if (type == PERMANENT_BLOB) {_			return new PermanentBlobKey()__		} else {_			return new TransientBlobKey()__		}_	};returns,the,right,link,blob,key,subclass,for,the,given,parameters,param,type,whether,the,referenced,blob,is,permanent,or,transient,return,blob,key,subclass;visible,for,testing,static,blob,key,create,key,blob,type,type,if,type,return,new,permanent,blob,key,else,return,new,transient,blob,key
BlobKey -> @VisibleForTesting 	static BlobKey createKey(BlobType type);1515428991;Returns the right {@link BlobKey} subclass for the given parameters.__@param type_whether the referenced BLOB is permanent or transient__@return BlobKey subclass;@VisibleForTesting_	static BlobKey createKey(BlobType type) {_		if (type == PERMANENT_BLOB) {_			return new PermanentBlobKey()__		} else {_			return new TransientBlobKey()__		}_	};returns,the,right,link,blob,key,subclass,for,the,given,parameters,param,type,whether,the,referenced,blob,is,permanent,or,transient,return,blob,key,subclass;visible,for,testing,static,blob,key,create,key,blob,type,type,if,type,return,new,permanent,blob,key,else,return,new,transient,blob,key
BlobKey -> @VisibleForTesting 	static BlobKey createKey(BlobType type);1526549506;Returns the right {@link BlobKey} subclass for the given parameters.__@param type_whether the referenced BLOB is permanent or transient__@return BlobKey subclass;@VisibleForTesting_	static BlobKey createKey(BlobType type) {_		if (type == PERMANENT_BLOB) {_			return new PermanentBlobKey()__		} else {_			return new TransientBlobKey()__		}_	};returns,the,right,link,blob,key,subclass,for,the,given,parameters,param,type,whether,the,referenced,blob,is,permanent,or,transient,return,blob,key,subclass;visible,for,testing,static,blob,key,create,key,blob,type,type,if,type,return,new,permanent,blob,key,else,return,new,transient,blob,key
BlobKey -> void writeToOutputStream(final OutputStream outputStream) throws IOException;1412605211;Auxiliary method to write this BLOB key to an output stream.__@param outputStream_the output stream to write the BLOB key to_@throws IOException_thrown if an I/O error occurs while writing the BLOB key;void writeToOutputStream(final OutputStream outputStream) throws IOException {__		outputStream.write(this.key)__	};auxiliary,method,to,write,this,blob,key,to,an,output,stream,param,output,stream,the,output,stream,to,write,the,blob,key,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,blob,key;void,write,to,output,stream,final,output,stream,output,stream,throws,ioexception,output,stream,write,this,key
BlobKey -> void writeToOutputStream(final OutputStream outputStream) throws IOException;1418925508;Auxiliary method to write this BLOB key to an output stream.__@param outputStream_the output stream to write the BLOB key to_@throws IOException_thrown if an I/O error occurs while writing the BLOB key;void writeToOutputStream(final OutputStream outputStream) throws IOException {__		outputStream.write(this.key)__	};auxiliary,method,to,write,this,blob,key,to,an,output,stream,param,output,stream,the,output,stream,to,write,the,blob,key,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,blob,key;void,write,to,output,stream,final,output,stream,output,stream,throws,ioexception,output,stream,write,this,key
BlobKey -> void writeToOutputStream(final OutputStream outputStream) throws IOException;1420538822;Auxiliary method to write this BLOB key to an output stream.__@param outputStream_the output stream to write the BLOB key to_@throws IOException_thrown if an I/O error occurs while writing the BLOB key;void writeToOutputStream(final OutputStream outputStream) throws IOException {_		outputStream.write(this.key)__	};auxiliary,method,to,write,this,blob,key,to,an,output,stream,param,output,stream,the,output,stream,to,write,the,blob,key,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,blob,key;void,write,to,output,stream,final,output,stream,output,stream,throws,ioexception,output,stream,write,this,key
BlobKey -> void writeToOutputStream(final OutputStream outputStream) throws IOException;1424264340;Auxiliary method to write this BLOB key to an output stream.__@param outputStream_the output stream to write the BLOB key to_@throws IOException_thrown if an I/O error occurs while writing the BLOB key;void writeToOutputStream(final OutputStream outputStream) throws IOException {_		outputStream.write(this.key)__	};auxiliary,method,to,write,this,blob,key,to,an,output,stream,param,output,stream,the,output,stream,to,write,the,blob,key,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,blob,key;void,write,to,output,stream,final,output,stream,output,stream,throws,ioexception,output,stream,write,this,key
BlobKey -> void writeToOutputStream(final OutputStream outputStream) throws IOException;1507212387;Auxiliary method to write this BLOB key to an output stream.__@param outputStream_the output stream to write the BLOB key to_@throws IOException_thrown if an I/O error occurs while writing the BLOB key;void writeToOutputStream(final OutputStream outputStream) throws IOException {_		outputStream.write(this.key)__		outputStream.write(this.type.ordinal())__	};auxiliary,method,to,write,this,blob,key,to,an,output,stream,param,output,stream,the,output,stream,to,write,the,blob,key,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,blob,key;void,write,to,output,stream,final,output,stream,output,stream,throws,ioexception,output,stream,write,this,key,output,stream,write,this,type,ordinal
BlobKey -> void writeToOutputStream(final OutputStream outputStream) throws IOException;1508138617;Auxiliary method to write this BLOB key to an output stream.__@param outputStream_the output stream to write the BLOB key to_@throws IOException_thrown if an I/O error occurs while writing the BLOB key;void writeToOutputStream(final OutputStream outputStream) throws IOException {_		outputStream.write(this.key)__		outputStream.write(this.type.ordinal())__		outputStream.write(this.random.getBytes())__	};auxiliary,method,to,write,this,blob,key,to,an,output,stream,param,output,stream,the,output,stream,to,write,the,blob,key,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,blob,key;void,write,to,output,stream,final,output,stream,output,stream,throws,ioexception,output,stream,write,this,key,output,stream,write,this,type,ordinal,output,stream,write,this,random,get,bytes
BlobKey -> void writeToOutputStream(final OutputStream outputStream) throws IOException;1508861310;Auxiliary method to write this BLOB key to an output stream.__@param outputStream_the output stream to write the BLOB key to_@throws IOException_thrown if an I/O error occurs while writing the BLOB key;void writeToOutputStream(final OutputStream outputStream) throws IOException {_		outputStream.write(this.key)__		outputStream.write(this.type.ordinal())__		outputStream.write(this.random.getBytes())__	};auxiliary,method,to,write,this,blob,key,to,an,output,stream,param,output,stream,the,output,stream,to,write,the,blob,key,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,blob,key;void,write,to,output,stream,final,output,stream,output,stream,throws,ioexception,output,stream,write,this,key,output,stream,write,this,type,ordinal,output,stream,write,this,random,get,bytes
BlobKey -> void writeToOutputStream(final OutputStream outputStream) throws IOException;1515428991;Auxiliary method to write this BLOB key to an output stream.__@param outputStream_the output stream to write the BLOB key to_@throws IOException_thrown if an I/O error occurs while writing the BLOB key;void writeToOutputStream(final OutputStream outputStream) throws IOException {_		outputStream.write(this.key)__		outputStream.write(this.type.ordinal())__		outputStream.write(this.random.getBytes())__	};auxiliary,method,to,write,this,blob,key,to,an,output,stream,param,output,stream,the,output,stream,to,write,the,blob,key,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,blob,key;void,write,to,output,stream,final,output,stream,output,stream,throws,ioexception,output,stream,write,this,key,output,stream,write,this,type,ordinal,output,stream,write,this,random,get,bytes
BlobKey -> void writeToOutputStream(final OutputStream outputStream) throws IOException;1526549506;Auxiliary method to write this BLOB key to an output stream.__@param outputStream_the output stream to write the BLOB key to_@throws IOException_thrown if an I/O error occurs while writing the BLOB key;void writeToOutputStream(final OutputStream outputStream) throws IOException {_		outputStream.write(this.key)__		outputStream.write(this.type.ordinal())__		outputStream.write(this.random.getBytes())__	};auxiliary,method,to,write,this,blob,key,to,an,output,stream,param,output,stream,the,output,stream,to,write,the,blob,key,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,the,blob,key;void,write,to,output,stream,final,output,stream,output,stream,throws,ioexception,output,stream,write,this,key,output,stream,write,this,type,ordinal,output,stream,write,this,random,get,bytes
BlobKey -> public void addToMessageDigest(MessageDigest md);1420538822;Adds the BLOB key to the given {@link MessageDigest}.__@param md_the message digest to add the BLOB key to;public void addToMessageDigest(MessageDigest md) {_		md.update(this.key)__	};adds,the,blob,key,to,the,given,link,message,digest,param,md,the,message,digest,to,add,the,blob,key,to;public,void,add,to,message,digest,message,digest,md,md,update,this,key
BlobKey -> public void addToMessageDigest(MessageDigest md);1424264340;Adds the BLOB key to the given {@link MessageDigest}.__@param md_the message digest to add the BLOB key to;public void addToMessageDigest(MessageDigest md) {_		md.update(this.key)__	};adds,the,blob,key,to,the,given,link,message,digest,param,md,the,message,digest,to,add,the,blob,key,to;public,void,add,to,message,digest,message,digest,md,md,update,this,key
BlobKey -> public void addToMessageDigest(MessageDigest md);1507212387;Adds the BLOB key to the given {@link MessageDigest}.__@param md_the message digest to add the BLOB key to;public void addToMessageDigest(MessageDigest md) {_		md.update(this.key)__	};adds,the,blob,key,to,the,given,link,message,digest,param,md,the,message,digest,to,add,the,blob,key,to;public,void,add,to,message,digest,message,digest,md,md,update,this,key
BlobKey -> public void addToMessageDigest(MessageDigest md);1508138617;Adds the BLOB key to the given {@link MessageDigest}.__@param md_the message digest to add the BLOB key to;public void addToMessageDigest(MessageDigest md) {_		md.update(this.key)__	};adds,the,blob,key,to,the,given,link,message,digest,param,md,the,message,digest,to,add,the,blob,key,to;public,void,add,to,message,digest,message,digest,md,md,update,this,key
BlobKey -> public void addToMessageDigest(MessageDigest md);1508861310;Adds the BLOB key to the given {@link MessageDigest}.__@param md_the message digest to add the BLOB key to;public void addToMessageDigest(MessageDigest md) {_		md.update(this.key)__	};adds,the,blob,key,to,the,given,link,message,digest,param,md,the,message,digest,to,add,the,blob,key,to;public,void,add,to,message,digest,message,digest,md,md,update,this,key
BlobKey -> public void addToMessageDigest(MessageDigest md);1515428991;Adds the BLOB key to the given {@link MessageDigest}.__@param md_the message digest to add the BLOB key to;public void addToMessageDigest(MessageDigest md) {_		md.update(this.key)__	};adds,the,blob,key,to,the,given,link,message,digest,param,md,the,message,digest,to,add,the,blob,key,to;public,void,add,to,message,digest,message,digest,md,md,update,this,key
BlobKey -> public void addToMessageDigest(MessageDigest md);1526549506;Adds the BLOB key to the given {@link MessageDigest}.__@param md_the message digest to add the BLOB key to;public void addToMessageDigest(MessageDigest md) {_		md.update(this.key)__	};adds,the,blob,key,to,the,given,link,message,digest,param,md,the,message,digest,to,add,the,blob,key,to;public,void,add,to,message,digest,message,digest,md,md,update,this,key
BlobKey -> public void addToMessageDigest(final MessageDigest md);1412605211;Adds the BLOB key to the given {@link MessageDigest}.__@param md_the message digest to add the BLOB key to;public void addToMessageDigest(final MessageDigest md) {__		md.update(this.key)__	};adds,the,blob,key,to,the,given,link,message,digest,param,md,the,message,digest,to,add,the,blob,key,to;public,void,add,to,message,digest,final,message,digest,md,md,update,this,key
BlobKey -> public void addToMessageDigest(final MessageDigest md);1418925508;Adds the BLOB key to the given {@link MessageDigest}.__@param md_the message digest to add the BLOB key to;public void addToMessageDigest(final MessageDigest md) {__		md.update(this.key)__	};adds,the,blob,key,to,the,given,link,message,digest,param,md,the,message,digest,to,add,the,blob,key,to;public,void,add,to,message,digest,final,message,digest,md,md,update,this,key
BlobKey -> static BlobKey readFromInputStream(final InputStream inputStream) throws IOException;1412605211;Auxiliary method to read a BLOB key from an input stream.__@param inputStream_the input stream to read the BLOB key from_@return the read BLOB key_@throws IOException_throw if an I/O error occurs while reading from the input stream;static BlobKey readFromInputStream(final InputStream inputStream) throws IOException {__		final byte[] key = new byte[BlobKey.SIZE]___		int bytesRead = 0__		while (bytesRead < BlobKey.SIZE) {_			final int read = inputStream.read(key, bytesRead, BlobKey.SIZE - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		return new BlobKey(key)__	};auxiliary,method,to,read,a,blob,key,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,blob,key,from,return,the,read,blob,key,throws,ioexception,throw,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,blob,key,read,from,input,stream,final,input,stream,input,stream,throws,ioexception,final,byte,key,new,byte,blob,key,size,int,bytes,read,0,while,bytes,read,blob,key,size,final,int,read,input,stream,read,key,bytes,read,blob,key,size,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,return,new,blob,key,key
BlobKey -> static BlobKey readFromInputStream(final InputStream inputStream) throws IOException;1418925508;Auxiliary method to read a BLOB key from an input stream.__@param inputStream_the input stream to read the BLOB key from_@return the read BLOB key_@throws IOException_throw if an I/O error occurs while reading from the input stream;static BlobKey readFromInputStream(final InputStream inputStream) throws IOException {__		final byte[] key = new byte[BlobKey.SIZE]___		int bytesRead = 0__		while (bytesRead < BlobKey.SIZE) {_			final int read = inputStream.read(key, bytesRead, BlobKey.SIZE - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		return new BlobKey(key)__	};auxiliary,method,to,read,a,blob,key,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,blob,key,from,return,the,read,blob,key,throws,ioexception,throw,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,blob,key,read,from,input,stream,final,input,stream,input,stream,throws,ioexception,final,byte,key,new,byte,blob,key,size,int,bytes,read,0,while,bytes,read,blob,key,size,final,int,read,input,stream,read,key,bytes,read,blob,key,size,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,return,new,blob,key,key
BlobKey -> protected BlobKey(BlobType type);1507212387;Constructs a new BLOB key.__@param type_whether the referenced BLOB is permanent or transient;protected BlobKey(BlobType type) {_		this.type = checkNotNull(type)__		this.key = new byte[SIZE]__	};constructs,a,new,blob,key,param,type,whether,the,referenced,blob,is,permanent,or,transient;protected,blob,key,blob,type,type,this,type,check,not,null,type,this,key,new,byte,size
BlobKey -> protected BlobKey(BlobType type);1508138617;Constructs a new BLOB key.__@param type_whether the referenced BLOB is permanent or transient;protected BlobKey(BlobType type) {_		this.type = checkNotNull(type)__		this.key = new byte[SIZE]__		this.random = new AbstractID()__	};constructs,a,new,blob,key,param,type,whether,the,referenced,blob,is,permanent,or,transient;protected,blob,key,blob,type,type,this,type,check,not,null,type,this,key,new,byte,size,this,random,new,abstract,id
BlobKey -> protected BlobKey(BlobType type);1508861310;Constructs a new BLOB key.__@param type_whether the referenced BLOB is permanent or transient;protected BlobKey(BlobType type) {_		this.type = checkNotNull(type)__		this.key = new byte[SIZE]__		this.random = new AbstractID()__	};constructs,a,new,blob,key,param,type,whether,the,referenced,blob,is,permanent,or,transient;protected,blob,key,blob,type,type,this,type,check,not,null,type,this,key,new,byte,size,this,random,new,abstract,id
BlobKey -> protected BlobKey(BlobType type);1515428991;Constructs a new BLOB key.__@param type_whether the referenced BLOB is permanent or transient;protected BlobKey(BlobType type) {_		this.type = checkNotNull(type)__		this.key = new byte[SIZE]__		this.random = new AbstractID()__	};constructs,a,new,blob,key,param,type,whether,the,referenced,blob,is,permanent,or,transient;protected,blob,key,blob,type,type,this,type,check,not,null,type,this,key,new,byte,size,this,random,new,abstract,id
BlobKey -> protected BlobKey(BlobType type);1526549506;Constructs a new BLOB key.__@param type_whether the referenced BLOB is permanent or transient;protected BlobKey(BlobType type) {_		this.type = checkNotNull(type)__		this.key = new byte[SIZE]__		this.random = new AbstractID()__	};constructs,a,new,blob,key,param,type,whether,the,referenced,blob,is,permanent,or,transient;protected,blob,key,blob,type,type,this,type,check,not,null,type,this,key,new,byte,size,this,random,new,abstract,id
BlobKey -> protected BlobKey(BlobType type, byte[] key, byte[] random);1508138617;Constructs a new BLOB key from the given byte array.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data_@param random_the random component of the key;protected BlobKey(BlobType type, byte[] key, byte[] random) {_		if (key == null || key.length != SIZE) {_			throw new IllegalArgumentException("BLOB key must have a size of " + SIZE + " bytes")__		}__		this.type = checkNotNull(type)__		this.key = key__		this.random = new AbstractID(random)__	};constructs,a,new,blob,key,from,the,given,byte,array,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data,param,random,the,random,component,of,the,key;protected,blob,key,blob,type,type,byte,key,byte,random,if,key,null,key,length,size,throw,new,illegal,argument,exception,blob,key,must,have,a,size,of,size,bytes,this,type,check,not,null,type,this,key,key,this,random,new,abstract,id,random
BlobKey -> protected BlobKey(BlobType type, byte[] key, byte[] random);1508861310;Constructs a new BLOB key from the given byte array.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data_@param random_the random component of the key;protected BlobKey(BlobType type, byte[] key, byte[] random) {_		if (key == null || key.length != SIZE) {_			throw new IllegalArgumentException("BLOB key must have a size of " + SIZE + " bytes")__		}__		this.type = checkNotNull(type)__		this.key = key__		this.random = new AbstractID(random)__	};constructs,a,new,blob,key,from,the,given,byte,array,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data,param,random,the,random,component,of,the,key;protected,blob,key,blob,type,type,byte,key,byte,random,if,key,null,key,length,size,throw,new,illegal,argument,exception,blob,key,must,have,a,size,of,size,bytes,this,type,check,not,null,type,this,key,key,this,random,new,abstract,id,random
BlobKey -> protected BlobKey(BlobType type, byte[] key, byte[] random);1515428991;Constructs a new BLOB key from the given byte array.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data_@param random_the random component of the key;protected BlobKey(BlobType type, byte[] key, byte[] random) {_		if (key == null || key.length != SIZE) {_			throw new IllegalArgumentException("BLOB key must have a size of " + SIZE + " bytes")__		}__		this.type = checkNotNull(type)__		this.key = key__		this.random = new AbstractID(random)__	};constructs,a,new,blob,key,from,the,given,byte,array,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data,param,random,the,random,component,of,the,key;protected,blob,key,blob,type,type,byte,key,byte,random,if,key,null,key,length,size,throw,new,illegal,argument,exception,blob,key,must,have,a,size,of,size,bytes,this,type,check,not,null,type,this,key,key,this,random,new,abstract,id,random
BlobKey -> protected BlobKey(BlobType type, byte[] key, byte[] random);1526549506;Constructs a new BLOB key from the given byte array.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data_@param random_the random component of the key;protected BlobKey(BlobType type, byte[] key, byte[] random) {_		if (key == null || key.length != SIZE) {_			throw new IllegalArgumentException("BLOB key must have a size of " + SIZE + " bytes")__		}__		this.type = checkNotNull(type)__		this.key = key__		this.random = new AbstractID(random)__	};constructs,a,new,blob,key,from,the,given,byte,array,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data,param,random,the,random,component,of,the,key;protected,blob,key,blob,type,type,byte,key,byte,random,if,key,null,key,length,size,throw,new,illegal,argument,exception,blob,key,must,have,a,size,of,size,bytes,this,type,check,not,null,type,this,key,key,this,random,new,abstract,id,random
BlobKey -> protected BlobKey(BlobType type, byte[] key);1507212387;Constructs a new BLOB key from the given byte array.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data;protected BlobKey(BlobType type, byte[] key) {_		this.type = checkNotNull(type)___		if (key == null || key.length != SIZE) {_			throw new IllegalArgumentException("BLOB key must have a size of " + SIZE + " bytes")__		}__		this.key = key__	};constructs,a,new,blob,key,from,the,given,byte,array,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data;protected,blob,key,blob,type,type,byte,key,this,type,check,not,null,type,if,key,null,key,length,size,throw,new,illegal,argument,exception,blob,key,must,have,a,size,of,size,bytes,this,key,key
BlobKey -> protected BlobKey(BlobType type, byte[] key);1508138617;Constructs a new BLOB key from the given byte array.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data;protected BlobKey(BlobType type, byte[] key) {_		if (key == null || key.length != SIZE) {_			throw new IllegalArgumentException("BLOB key must have a size of " + SIZE + " bytes")__		}__		this.type = checkNotNull(type)__		this.key = key__		this.random = new AbstractID()__	};constructs,a,new,blob,key,from,the,given,byte,array,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data;protected,blob,key,blob,type,type,byte,key,if,key,null,key,length,size,throw,new,illegal,argument,exception,blob,key,must,have,a,size,of,size,bytes,this,type,check,not,null,type,this,key,key,this,random,new,abstract,id
BlobKey -> protected BlobKey(BlobType type, byte[] key);1508861310;Constructs a new BLOB key from the given byte array.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data;protected BlobKey(BlobType type, byte[] key) {_		if (key == null || key.length != SIZE) {_			throw new IllegalArgumentException("BLOB key must have a size of " + SIZE + " bytes")__		}__		this.type = checkNotNull(type)__		this.key = key__		this.random = new AbstractID()__	};constructs,a,new,blob,key,from,the,given,byte,array,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data;protected,blob,key,blob,type,type,byte,key,if,key,null,key,length,size,throw,new,illegal,argument,exception,blob,key,must,have,a,size,of,size,bytes,this,type,check,not,null,type,this,key,key,this,random,new,abstract,id
BlobKey -> protected BlobKey(BlobType type, byte[] key);1515428991;Constructs a new BLOB key from the given byte array.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data;protected BlobKey(BlobType type, byte[] key) {_		if (key == null || key.length != SIZE) {_			throw new IllegalArgumentException("BLOB key must have a size of " + SIZE + " bytes")__		}__		this.type = checkNotNull(type)__		this.key = key__		this.random = new AbstractID()__	};constructs,a,new,blob,key,from,the,given,byte,array,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data;protected,blob,key,blob,type,type,byte,key,if,key,null,key,length,size,throw,new,illegal,argument,exception,blob,key,must,have,a,size,of,size,bytes,this,type,check,not,null,type,this,key,key,this,random,new,abstract,id
BlobKey -> protected BlobKey(BlobType type, byte[] key);1526549506;Constructs a new BLOB key from the given byte array.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data;protected BlobKey(BlobType type, byte[] key) {_		if (key == null || key.length != SIZE) {_			throw new IllegalArgumentException("BLOB key must have a size of " + SIZE + " bytes")__		}__		this.type = checkNotNull(type)__		this.key = key__		this.random = new AbstractID()__	};constructs,a,new,blob,key,from,the,given,byte,array,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data;protected,blob,key,blob,type,type,byte,key,if,key,null,key,length,size,throw,new,illegal,argument,exception,blob,key,must,have,a,size,of,size,bytes,this,type,check,not,null,type,this,key,key,this,random,new,abstract,id
BlobKey -> static BlobKey createKey(BlobType type, byte[] key);1507212387;Returns the right {@link BlobKey} subclass for the given parameters.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data__@return BlobKey subclass;static BlobKey createKey(BlobType type, byte[] key) {_		if (type == PERMANENT_BLOB) {_            return new PermanentBlobKey(key)__        } else {_			return new TransientBlobKey(key)__        }_	};returns,the,right,link,blob,key,subclass,for,the,given,parameters,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data,return,blob,key,subclass;static,blob,key,create,key,blob,type,type,byte,key,if,type,return,new,permanent,blob,key,key,else,return,new,transient,blob,key,key
BlobKey -> static BlobKey createKey(BlobType type, byte[] key);1508138617;Returns the right {@link BlobKey} subclass for the given parameters.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data__@return BlobKey subclass;static BlobKey createKey(BlobType type, byte[] key) {_		if (type == PERMANENT_BLOB) {_			return new PermanentBlobKey(key)__		} else {_			return new TransientBlobKey(key)__		}_	};returns,the,right,link,blob,key,subclass,for,the,given,parameters,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data,return,blob,key,subclass;static,blob,key,create,key,blob,type,type,byte,key,if,type,return,new,permanent,blob,key,key,else,return,new,transient,blob,key,key
BlobKey -> static BlobKey createKey(BlobType type, byte[] key);1508861310;Returns the right {@link BlobKey} subclass for the given parameters.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data__@return BlobKey subclass;static BlobKey createKey(BlobType type, byte[] key) {_		if (type == PERMANENT_BLOB) {_			return new PermanentBlobKey(key)__		} else {_			return new TransientBlobKey(key)__		}_	};returns,the,right,link,blob,key,subclass,for,the,given,parameters,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data,return,blob,key,subclass;static,blob,key,create,key,blob,type,type,byte,key,if,type,return,new,permanent,blob,key,key,else,return,new,transient,blob,key,key
BlobKey -> static BlobKey createKey(BlobType type, byte[] key);1515428991;Returns the right {@link BlobKey} subclass for the given parameters.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data__@return BlobKey subclass;static BlobKey createKey(BlobType type, byte[] key) {_		if (type == PERMANENT_BLOB) {_			return new PermanentBlobKey(key)__		} else {_			return new TransientBlobKey(key)__		}_	};returns,the,right,link,blob,key,subclass,for,the,given,parameters,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data,return,blob,key,subclass;static,blob,key,create,key,blob,type,type,byte,key,if,type,return,new,permanent,blob,key,key,else,return,new,transient,blob,key,key
BlobKey -> static BlobKey createKey(BlobType type, byte[] key);1526549506;Returns the right {@link BlobKey} subclass for the given parameters.__@param type_whether the referenced BLOB is permanent or transient_@param key_the actual key data__@return BlobKey subclass;static BlobKey createKey(BlobType type, byte[] key) {_		if (type == PERMANENT_BLOB) {_			return new PermanentBlobKey(key)__		} else {_			return new TransientBlobKey(key)__		}_	};returns,the,right,link,blob,key,subclass,for,the,given,parameters,param,type,whether,the,referenced,blob,is,permanent,or,transient,param,key,the,actual,key,data,return,blob,key,subclass;static,blob,key,create,key,blob,type,type,byte,key,if,type,return,new,permanent,blob,key,key,else,return,new,transient,blob,key,key
BlobKey -> @Override 	public int compareTo(final BlobKey o);1412605211;{@inheritDoc};@Override_	public int compareTo(final BlobKey o) {__		final byte[] aarr = this.key__		final byte[] barr = o.key__		final int len = Math.min(aarr.length, barr.length)___		for (int i = 0_ i < len_ ++i) {_			final int a = (aarr[i] & 0xff)__			final int b = (barr[i] & 0xff)__			if (a != b) {_				return a - b__			}_		}__		return aarr.length - barr.length__	};inherit,doc;override,public,int,compare,to,final,blob,key,o,final,byte,aarr,this,key,final,byte,barr,o,key,final,int,len,math,min,aarr,length,barr,length,for,int,i,0,i,len,i,final,int,a,aarr,i,0xff,final,int,b,barr,i,0xff,if,a,b,return,a,b,return,aarr,length,barr,length
BlobKey -> @Override 	public int compareTo(final BlobKey o);1418925508;{@inheritDoc};@Override_	public int compareTo(final BlobKey o) {__		final byte[] aarr = this.key__		final byte[] barr = o.key__		final int len = Math.min(aarr.length, barr.length)___		for (int i = 0_ i < len_ ++i) {_			final int a = (aarr[i] & 0xff)__			final int b = (barr[i] & 0xff)__			if (a != b) {_				return a - b__			}_		}__		return aarr.length - barr.length__	};inherit,doc;override,public,int,compare,to,final,blob,key,o,final,byte,aarr,this,key,final,byte,barr,o,key,final,int,len,math,min,aarr,length,barr,length,for,int,i,0,i,len,i,final,int,a,aarr,i,0xff,final,int,b,barr,i,0xff,if,a,b,return,a,b,return,aarr,length,barr,length
BlobKey -> BlobKey(final byte[] key);1412605211;Constructs a new BLOB key from the given byte array.__@param key_the actual key data;BlobKey(final byte[] key) {__		if (key.length != SIZE) {_			throw new IllegalArgumentException("BLOB key must have a size of " + SIZE + " bytes")__		}__		this.key = key__	};constructs,a,new,blob,key,from,the,given,byte,array,param,key,the,actual,key,data;blob,key,final,byte,key,if,key,length,size,throw,new,illegal,argument,exception,blob,key,must,have,a,size,of,size,bytes,this,key,key
BlobKey -> BlobKey(final byte[] key);1418925508;Constructs a new BLOB key from the given byte array.__@param key_the actual key data;BlobKey(final byte[] key) {__		if (key.length != SIZE) {_			throw new IllegalArgumentException("BLOB key must have a size of " + SIZE + " bytes")__		}__		this.key = key__	};constructs,a,new,blob,key,from,the,given,byte,array,param,key,the,actual,key,data;blob,key,final,byte,key,if,key,length,size,throw,new,illegal,argument,exception,blob,key,must,have,a,size,of,size,bytes,this,key,key
BlobKey -> static BlobKey readFromInputStream(InputStream inputStream) throws IOException;1420538822;Auxiliary method to read a BLOB key from an input stream.__@param inputStream_the input stream to read the BLOB key from_@return the read BLOB key_@throws IOException_throw if an I/O error occurs while reading from the input stream;static BlobKey readFromInputStream(InputStream inputStream) throws IOException {__		final byte[] key = new byte[BlobKey.SIZE]___		int bytesRead = 0__		while (bytesRead < BlobKey.SIZE) {_			final int read = inputStream.read(key, bytesRead, BlobKey.SIZE - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		return new BlobKey(key)__	};auxiliary,method,to,read,a,blob,key,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,blob,key,from,return,the,read,blob,key,throws,ioexception,throw,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,blob,key,read,from,input,stream,input,stream,input,stream,throws,ioexception,final,byte,key,new,byte,blob,key,size,int,bytes,read,0,while,bytes,read,blob,key,size,final,int,read,input,stream,read,key,bytes,read,blob,key,size,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,return,new,blob,key,key
BlobKey -> static BlobKey readFromInputStream(InputStream inputStream) throws IOException;1424264340;Auxiliary method to read a BLOB key from an input stream.__@param inputStream_the input stream to read the BLOB key from_@return the read BLOB key_@throws IOException_throw if an I/O error occurs while reading from the input stream;static BlobKey readFromInputStream(InputStream inputStream) throws IOException {__		final byte[] key = new byte[BlobKey.SIZE]___		int bytesRead = 0__		while (bytesRead < BlobKey.SIZE) {_			final int read = inputStream.read(key, bytesRead, BlobKey.SIZE - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB key")__			}_			bytesRead += read__		}__		return new BlobKey(key)__	};auxiliary,method,to,read,a,blob,key,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,blob,key,from,return,the,read,blob,key,throws,ioexception,throw,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,blob,key,read,from,input,stream,input,stream,input,stream,throws,ioexception,final,byte,key,new,byte,blob,key,size,int,bytes,read,0,while,bytes,read,blob,key,size,final,int,read,input,stream,read,key,bytes,read,blob,key,size,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,key,bytes,read,read,return,new,blob,key,key
BlobKey -> static BlobKey readFromInputStream(InputStream inputStream) throws IOException;1507212387;Auxiliary method to read a BLOB key from an input stream.__@param inputStream_the input stream to read the BLOB key from_@return the read BLOB key_@throws IOException_throw if an I/O error occurs while reading from the input stream;static BlobKey readFromInputStream(InputStream inputStream) throws IOException {__		final byte[] key = new byte[BlobKey.SIZE]___		int bytesRead = 0__		_		while (bytesRead < key.length) {_			final int read = inputStream.read(key, bytesRead, key.length - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB key")__			}_			bytesRead += read__		}_		_		final BlobType blobType__		{_			final int read = inputStream.read()__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB type")__			} else if (read == TRANSIENT_BLOB.ordinal()) {_				blobType = TRANSIENT_BLOB__			} else if (read == PERMANENT_BLOB.ordinal()) {_				blobType = PERMANENT_BLOB__			} else {_				throw new IOException("Invalid data received for the BLOB type: " + read)__			}_		}__		return createKey(blobType, key)__	};auxiliary,method,to,read,a,blob,key,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,blob,key,from,return,the,read,blob,key,throws,ioexception,throw,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,blob,key,read,from,input,stream,input,stream,input,stream,throws,ioexception,final,byte,key,new,byte,blob,key,size,int,bytes,read,0,while,bytes,read,key,length,final,int,read,input,stream,read,key,bytes,read,key,length,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,key,bytes,read,read,final,blob,type,blob,type,final,int,read,input,stream,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,type,else,if,read,ordinal,blob,type,else,if,read,ordinal,blob,type,else,throw,new,ioexception,invalid,data,received,for,the,blob,type,read,return,create,key,blob,type,key
BlobKey -> static BlobKey readFromInputStream(InputStream inputStream) throws IOException;1508138617;Auxiliary method to read a BLOB key from an input stream.__@param inputStream_the input stream to read the BLOB key from_@return the read BLOB key_@throws IOException_throw if an I/O error occurs while reading from the input stream;static BlobKey readFromInputStream(InputStream inputStream) throws IOException {__		final byte[] key = new byte[BlobKey.SIZE]__		final byte[] random = new byte[AbstractID.SIZE]___		int bytesRead = 0__		_		while (bytesRead < key.length) {_			final int read = inputStream.read(key, bytesRead, key.length - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB key")__			}_			bytesRead += read__		}__		_		final BlobType blobType__		{_			final int read = inputStream.read()__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB type")__			} else if (read == TRANSIENT_BLOB.ordinal()) {_				blobType = TRANSIENT_BLOB__			} else if (read == PERMANENT_BLOB.ordinal()) {_				blobType = PERMANENT_BLOB__			} else {_				throw new IOException("Invalid data received for the BLOB type: " + read)__			}_		}__		_		bytesRead = 0__		while (bytesRead < AbstractID.SIZE) {_			final int read = inputStream.read(random, bytesRead, AbstractID.SIZE - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB key")__			}_			bytesRead += read__		}__		return createKey(blobType, key, random)__	};auxiliary,method,to,read,a,blob,key,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,blob,key,from,return,the,read,blob,key,throws,ioexception,throw,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,blob,key,read,from,input,stream,input,stream,input,stream,throws,ioexception,final,byte,key,new,byte,blob,key,size,final,byte,random,new,byte,abstract,id,size,int,bytes,read,0,while,bytes,read,key,length,final,int,read,input,stream,read,key,bytes,read,key,length,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,key,bytes,read,read,final,blob,type,blob,type,final,int,read,input,stream,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,type,else,if,read,ordinal,blob,type,else,if,read,ordinal,blob,type,else,throw,new,ioexception,invalid,data,received,for,the,blob,type,read,bytes,read,0,while,bytes,read,abstract,id,size,final,int,read,input,stream,read,random,bytes,read,abstract,id,size,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,key,bytes,read,read,return,create,key,blob,type,key,random
BlobKey -> static BlobKey readFromInputStream(InputStream inputStream) throws IOException;1508861310;Auxiliary method to read a BLOB key from an input stream.__@param inputStream_the input stream to read the BLOB key from_@return the read BLOB key_@throws IOException_throw if an I/O error occurs while reading from the input stream;static BlobKey readFromInputStream(InputStream inputStream) throws IOException {__		final byte[] key = new byte[BlobKey.SIZE]__		final byte[] random = new byte[AbstractID.SIZE]___		int bytesRead = 0__		_		while (bytesRead < key.length) {_			final int read = inputStream.read(key, bytesRead, key.length - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB key")__			}_			bytesRead += read__		}__		_		final BlobType blobType__		{_			final int read = inputStream.read()__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB type")__			} else if (read == TRANSIENT_BLOB.ordinal()) {_				blobType = TRANSIENT_BLOB__			} else if (read == PERMANENT_BLOB.ordinal()) {_				blobType = PERMANENT_BLOB__			} else {_				throw new IOException("Invalid data received for the BLOB type: " + read)__			}_		}__		_		bytesRead = 0__		while (bytesRead < AbstractID.SIZE) {_			final int read = inputStream.read(random, bytesRead, AbstractID.SIZE - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB key")__			}_			bytesRead += read__		}__		return createKey(blobType, key, random)__	};auxiliary,method,to,read,a,blob,key,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,blob,key,from,return,the,read,blob,key,throws,ioexception,throw,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,blob,key,read,from,input,stream,input,stream,input,stream,throws,ioexception,final,byte,key,new,byte,blob,key,size,final,byte,random,new,byte,abstract,id,size,int,bytes,read,0,while,bytes,read,key,length,final,int,read,input,stream,read,key,bytes,read,key,length,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,key,bytes,read,read,final,blob,type,blob,type,final,int,read,input,stream,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,type,else,if,read,ordinal,blob,type,else,if,read,ordinal,blob,type,else,throw,new,ioexception,invalid,data,received,for,the,blob,type,read,bytes,read,0,while,bytes,read,abstract,id,size,final,int,read,input,stream,read,random,bytes,read,abstract,id,size,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,key,bytes,read,read,return,create,key,blob,type,key,random
BlobKey -> static BlobKey readFromInputStream(InputStream inputStream) throws IOException;1515428991;Auxiliary method to read a BLOB key from an input stream.__@param inputStream_the input stream to read the BLOB key from_@return the read BLOB key_@throws IOException_throw if an I/O error occurs while reading from the input stream;static BlobKey readFromInputStream(InputStream inputStream) throws IOException {__		final byte[] key = new byte[BlobKey.SIZE]__		final byte[] random = new byte[AbstractID.SIZE]___		int bytesRead = 0__		_		while (bytesRead < key.length) {_			final int read = inputStream.read(key, bytesRead, key.length - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB key")__			}_			bytesRead += read__		}__		_		final BlobType blobType__		{_			final int read = inputStream.read()__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB type")__			} else if (read == TRANSIENT_BLOB.ordinal()) {_				blobType = TRANSIENT_BLOB__			} else if (read == PERMANENT_BLOB.ordinal()) {_				blobType = PERMANENT_BLOB__			} else {_				throw new IOException("Invalid data received for the BLOB type: " + read)__			}_		}__		_		bytesRead = 0__		while (bytesRead < AbstractID.SIZE) {_			final int read = inputStream.read(random, bytesRead, AbstractID.SIZE - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB key")__			}_			bytesRead += read__		}__		return createKey(blobType, key, random)__	};auxiliary,method,to,read,a,blob,key,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,blob,key,from,return,the,read,blob,key,throws,ioexception,throw,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,blob,key,read,from,input,stream,input,stream,input,stream,throws,ioexception,final,byte,key,new,byte,blob,key,size,final,byte,random,new,byte,abstract,id,size,int,bytes,read,0,while,bytes,read,key,length,final,int,read,input,stream,read,key,bytes,read,key,length,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,key,bytes,read,read,final,blob,type,blob,type,final,int,read,input,stream,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,type,else,if,read,ordinal,blob,type,else,if,read,ordinal,blob,type,else,throw,new,ioexception,invalid,data,received,for,the,blob,type,read,bytes,read,0,while,bytes,read,abstract,id,size,final,int,read,input,stream,read,random,bytes,read,abstract,id,size,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,key,bytes,read,read,return,create,key,blob,type,key,random
BlobKey -> static BlobKey readFromInputStream(InputStream inputStream) throws IOException;1526549506;Auxiliary method to read a BLOB key from an input stream.__@param inputStream_the input stream to read the BLOB key from_@return the read BLOB key_@throws IOException_throw if an I/O error occurs while reading from the input stream;static BlobKey readFromInputStream(InputStream inputStream) throws IOException {__		final byte[] key = new byte[BlobKey.SIZE]__		final byte[] random = new byte[AbstractID.SIZE]___		int bytesRead = 0__		_		while (bytesRead < key.length) {_			final int read = inputStream.read(key, bytesRead, key.length - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB key")__			}_			bytesRead += read__		}__		_		final BlobType blobType__		{_			final int read = inputStream.read()__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB type")__			} else if (read == TRANSIENT_BLOB.ordinal()) {_				blobType = TRANSIENT_BLOB__			} else if (read == PERMANENT_BLOB.ordinal()) {_				blobType = PERMANENT_BLOB__			} else {_				throw new IOException("Invalid data received for the BLOB type: " + read)__			}_		}__		_		bytesRead = 0__		while (bytesRead < AbstractID.SIZE) {_			final int read = inputStream.read(random, bytesRead, AbstractID.SIZE - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete BLOB key")__			}_			bytesRead += read__		}__		return createKey(blobType, key, random)__	};auxiliary,method,to,read,a,blob,key,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,blob,key,from,return,the,read,blob,key,throws,ioexception,throw,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,blob,key,read,from,input,stream,input,stream,input,stream,throws,ioexception,final,byte,key,new,byte,blob,key,size,final,byte,random,new,byte,abstract,id,size,int,bytes,read,0,while,bytes,read,key,length,final,int,read,input,stream,read,key,bytes,read,key,length,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,key,bytes,read,read,final,blob,type,blob,type,final,int,read,input,stream,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,type,else,if,read,ordinal,blob,type,else,if,read,ordinal,blob,type,else,throw,new,ioexception,invalid,data,received,for,the,blob,type,read,bytes,read,0,while,bytes,read,abstract,id,size,final,int,read,input,stream,read,random,bytes,read,abstract,id,size,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,key,bytes,read,read,return,create,key,blob,type,key,random
BlobKey -> BlobType getType();1508138617;Returns the (internal) BLOB type which is reflected by the inheriting sub-class.__@return BLOB type, i.e. permanent or transient;BlobType getType() {_		return type__	};returns,the,internal,blob,type,which,is,reflected,by,the,inheriting,sub,class,return,blob,type,i,e,permanent,or,transient;blob,type,get,type,return,type
BlobKey -> BlobType getType();1508861310;Returns the (internal) BLOB type which is reflected by the inheriting sub-class.__@return BLOB type, i.e. permanent or transient;BlobType getType() {_		return type__	};returns,the,internal,blob,type,which,is,reflected,by,the,inheriting,sub,class,return,blob,type,i,e,permanent,or,transient;blob,type,get,type,return,type
BlobKey -> BlobType getType();1515428991;Returns the (internal) BLOB type which is reflected by the inheriting sub-class.__@return BLOB type, i.e. permanent or transient;BlobType getType() {_		return type__	};returns,the,internal,blob,type,which,is,reflected,by,the,inheriting,sub,class,return,blob,type,i,e,permanent,or,transient;blob,type,get,type,return,type
BlobKey -> BlobType getType();1526549506;Returns the (internal) BLOB type which is reflected by the inheriting sub-class.__@return BLOB type, i.e. permanent or transient;BlobType getType() {_		return type__	};returns,the,internal,blob,type,which,is,reflected,by,the,inheriting,sub,class,return,blob,type,i,e,permanent,or,transient;blob,type,get,type,return,type
BlobKey -> @Override 	public boolean equals(final Object obj);1412605211;{@inheritDoc};@Override_	public boolean equals(final Object obj) {__		if (!(obj instanceof BlobKey)) {_			return false__		}__		final BlobKey bk = (BlobKey) obj___		return Arrays.equals(this.key, bk.key)__	};inherit,doc;override,public,boolean,equals,final,object,obj,if,obj,instanceof,blob,key,return,false,final,blob,key,bk,blob,key,obj,return,arrays,equals,this,key,bk,key
BlobKey -> @Override 	public boolean equals(final Object obj);1418925508;{@inheritDoc};@Override_	public boolean equals(final Object obj) {__		if (!(obj instanceof BlobKey)) {_			return false__		}__		final BlobKey bk = (BlobKey) obj___		return Arrays.equals(this.key, bk.key)__	};inherit,doc;override,public,boolean,equals,final,object,obj,if,obj,instanceof,blob,key,return,false,final,blob,key,bk,blob,key,obj,return,arrays,equals,this,key,bk,key
BlobKey -> @Override 	public String toString();1412605211;{@inheritDoc};@Override_	public String toString() {_		_		final char[] hexChars = new char[SIZE * 2]__		for (int i = 0_ i < SIZE_ ++i) {_			int v = this.key[i] & 0xff__			hexChars[i * 2] = HEX_ARRAY[v >>> 4]__			hexChars[i * 2 + 1] = HEX_ARRAY[v & 0x0f]__		}__		return new String(hexChars)__	};inherit,doc;override,public,string,to,string,final,char,hex,chars,new,char,size,2,for,int,i,0,i,size,i,int,v,this,key,i,0xff,hex,chars,i,2,v,4,hex,chars,i,2,1,v,0x0f,return,new,string,hex,chars
BlobKey -> @Override 	public String toString();1418925508;{@inheritDoc};@Override_	public String toString() {_		_		final char[] hexChars = new char[SIZE * 2]__		for (int i = 0_ i < SIZE_ ++i) {_			int v = this.key[i] & 0xff__			hexChars[i * 2] = HEX_ARRAY[v >>> 4]__			hexChars[i * 2 + 1] = HEX_ARRAY[v & 0x0f]__		}__		return new String(hexChars)__	};inherit,doc;override,public,string,to,string,final,char,hex,chars,new,char,size,2,for,int,i,0,i,size,i,int,v,this,key,i,0xff,hex,chars,i,2,v,4,hex,chars,i,2,1,v,0x0f,return,new,string,hex,chars
BlobKey -> byte[] getHash();1507212387;Returns the hash component of this key.__@return a 20 bit hash of the contents the key refers to;byte[] getHash() {_		return key__	};returns,the,hash,component,of,this,key,return,a,20,bit,hash,of,the,contents,the,key,refers,to;byte,get,hash,return,key
BlobKey -> byte[] getHash();1508138617;Returns the hash component of this key.__@return a 20 bit hash of the contents the key refers to;byte[] getHash() {_		return key__	};returns,the,hash,component,of,this,key,return,a,20,bit,hash,of,the,contents,the,key,refers,to;byte,get,hash,return,key
BlobKey -> BlobKey(byte[] key);1420538822;Constructs a new BLOB key from the given byte array.__@param key_the actual key data;BlobKey(byte[] key) {_		if (key.length != SIZE) {_			throw new IllegalArgumentException("BLOB key must have a size of " + SIZE + " bytes")__		}__		this.key = key__	};constructs,a,new,blob,key,from,the,given,byte,array,param,key,the,actual,key,data;blob,key,byte,key,if,key,length,size,throw,new,illegal,argument,exception,blob,key,must,have,a,size,of,size,bytes,this,key,key
BlobKey -> BlobKey(byte[] key);1424264340;Constructs a new BLOB key from the given byte array.__@param key_the actual key data;BlobKey(byte[] key) {_		if (key.length != SIZE) {_			throw new IllegalArgumentException("BLOB key must have a size of " + SIZE + " bytes")__		}__		this.key = key__	};constructs,a,new,blob,key,from,the,given,byte,array,param,key,the,actual,key,data;blob,key,byte,key,if,key,length,size,throw,new,illegal,argument,exception,blob,key,must,have,a,size,of,size,bytes,this,key,key
BlobKey -> @VisibleForTesting 	public byte[] getHash();1508861310;Returns the hash component of this key.__@return a 20 bit hash of the contents the key refers to;@VisibleForTesting_	public byte[] getHash() {_		return key__	};returns,the,hash,component,of,this,key,return,a,20,bit,hash,of,the,contents,the,key,refers,to;visible,for,testing,public,byte,get,hash,return,key
BlobKey -> @VisibleForTesting 	public byte[] getHash();1515428991;Returns the hash component of this key.__@return a 20 bit hash of the contents the key refers to;@VisibleForTesting_	public byte[] getHash() {_		return key__	};returns,the,hash,component,of,this,key,return,a,20,bit,hash,of,the,contents,the,key,refers,to;visible,for,testing,public,byte,get,hash,return,key
BlobKey -> @VisibleForTesting 	public byte[] getHash();1526549506;Returns the hash component of this key.__@return a 20 bit hash of the contents the key refers to;@VisibleForTesting_	public byte[] getHash() {_		return key__	};returns,the,hash,component,of,this,key,return,a,20,bit,hash,of,the,contents,the,key,refers,to;visible,for,testing,public,byte,get,hash,return,key
