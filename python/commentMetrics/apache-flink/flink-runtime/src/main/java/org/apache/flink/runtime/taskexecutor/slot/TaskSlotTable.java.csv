commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Start the task slot table with the given slot actions.  *  * @param initialSlotActions to use for slot actions  */ ;/**  * Start the task slot table with the given slot actions.  *  * @param initialSlotActions to use for slot actions  */ public void start(SlotActions initialSlotActions) {     this.slotActions = Preconditions.checkNotNull(initialSlotActions).     timerService.start(this).     started = true. }
true;public;0;5;/**  * Stop the task slot table.  */ ;/**  * Stop the task slot table.  */ public void stop() {     started = false.     timerService.stop().     slotActions = null. }
true;public;1;9;/**  * Returns the all {@link AllocationID} for the given job.  *  * @param jobId for which to return the set of {@link AllocationID}.  * @return Set of {@link AllocationID} for the given job  */ ;/**  * Returns the all {@link AllocationID} for the given job.  *  * @param jobId for which to return the set of {@link AllocationID}.  * @return Set of {@link AllocationID} for the given job  */ public Set<AllocationID> getAllocationIdsPerJob(JobID jobId) {     final Set<AllocationID> allocationIds = slotsPerJob.get(jobId).     if (allocationIds == null) {         return Collections.emptySet().     } else {         return Collections.unmodifiableSet(allocationIds).     } }
false;public;1;22;;// --------------------------------------------------------------------- // Slot report methods // --------------------------------------------------------------------- public SlotReport createSlotReport(ResourceID resourceId) {     final int numberSlots = taskSlots.size().     List<SlotStatus> slotStatuses = Arrays.asList(new SlotStatus[numberSlots]).     for (int i = 0. i < numberSlots. i++) {         TaskSlot taskSlot = taskSlots.get(i).         SlotID slotId = new SlotID(resourceId, taskSlot.getIndex()).         SlotStatus slotStatus = new SlotStatus(slotId, taskSlot.getResourceProfile(), taskSlot.getJobId(), taskSlot.getAllocationId()).         slotStatuses.set(i, slotStatus).     }     final SlotReport slotReport = new SlotReport(slotStatuses).     return slotReport. }
true;public;4;27;/**  * Allocate the slot with the given index for the given job and allocation id. Returns true if  * the slot could be allocated. Otherwise it returns false.  *  * @param index of the task slot to allocate  * @param jobId to allocate the task slot for  * @param allocationId identifying the allocation  * @param slotTimeout until the slot times out  * @return True if the task slot could be allocated. otherwise false  */ ;// --------------------------------------------------------------------- // Slot methods // --------------------------------------------------------------------- /**  * Allocate the slot with the given index for the given job and allocation id. Returns true if  * the slot could be allocated. Otherwise it returns false.  *  * @param index of the task slot to allocate  * @param jobId to allocate the task slot for  * @param allocationId identifying the allocation  * @param slotTimeout until the slot times out  * @return True if the task slot could be allocated. otherwise false  */ public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {     checkInit().     TaskSlot taskSlot = taskSlots.get(index).     boolean result = taskSlot.allocate(jobId, allocationId).     if (result) {         // update the allocation id to task slot map         allocationIDTaskSlotMap.put(allocationId, taskSlot).         // register a timeout for this slot since it's in state allocated         timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit()).         // add this slot to the set of job slots         Set<AllocationID> slots = slotsPerJob.get(jobId).         if (slots == null) {             slots = new HashSet<>(4).             slotsPerJob.put(jobId, slots).         }         slots.add(allocationId).     }     return result. }
true;public;1;20;/**  * Marks the slot under the given allocation id as active. If the slot could not be found, then  * a {@link SlotNotFoundException} is thrown.  *  * @param allocationId to identify the task slot to mark as active  * @throws SlotNotFoundException if the slot could not be found for the given allocation id  * @return True if the slot could be marked active. otherwise false  */ ;/**  * Marks the slot under the given allocation id as active. If the slot could not be found, then  * a {@link SlotNotFoundException} is thrown.  *  * @param allocationId to identify the task slot to mark as active  * @throws SlotNotFoundException if the slot could not be found for the given allocation id  * @return True if the slot could be marked active. otherwise false  */ public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {     checkInit().     TaskSlot taskSlot = getTaskSlot(allocationId).     if (taskSlot != null) {         if (taskSlot.markActive()) {             // unregister a potential timeout             LOG.info("Activate slot {}.", allocationId).             timerService.unregisterTimeout(allocationId).             return true.         } else {             return false.         }     } else {         throw new SlotNotFoundException(allocationId).     } }
true;public;2;18;/**  * Marks the slot under the given allocation id as inactive. If the slot could not be found,  * then a {@link SlotNotFoundException} is thrown.  *  * @param allocationId to identify the task slot to mark as inactive  * @param slotTimeout until the slot times out  * @throws SlotNotFoundException if the slot could not be found for the given allocation id  * @return True if the slot could be marked inactive  */ ;/**  * Marks the slot under the given allocation id as inactive. If the slot could not be found,  * then a {@link SlotNotFoundException} is thrown.  *  * @param allocationId to identify the task slot to mark as inactive  * @param slotTimeout until the slot times out  * @throws SlotNotFoundException if the slot could not be found for the given allocation id  * @return True if the slot could be marked inactive  */ public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {     checkInit().     TaskSlot taskSlot = getTaskSlot(allocationId).     if (taskSlot != null) {         if (taskSlot.markInactive()) {             // register a timeout to free the slot             timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit()).             return true.         } else {             return false.         }     } else {         throw new SlotNotFoundException(allocationId).     } }
true;public;1;3;/**  * Try to free the slot. If the slot is empty it will set the state of the task slot to free  * and return its index. If the slot is not empty, then it will set the state of the task slot  * to releasing, fail all tasks and return -1.  *  * @param allocationId identifying the task slot to be freed  * @throws SlotNotFoundException if there is not task slot for the given allocation id  * @return Index of the freed slot if the slot could be freed. otherwise -1  */ ;/**  * Try to free the slot. If the slot is empty it will set the state of the task slot to free  * and return its index. If the slot is not empty, then it will set the state of the task slot  * to releasing, fail all tasks and return -1.  *  * @param allocationId identifying the task slot to be freed  * @throws SlotNotFoundException if there is not task slot for the given allocation id  * @return Index of the freed slot if the slot could be freed. otherwise -1  */ public int freeSlot(AllocationID allocationId) throws SlotNotFoundException {     return freeSlot(allocationId, new Exception("The task slot of this task is being freed.")). }
true;public;2;52;/**  * Tries to free the slot. If the slot is empty it will set the state of the task slot to free  * and return its index. If the slot is not empty, then it will set the state of the task slot  * to releasing, fail all tasks and return -1.  *  * @param allocationId identifying the task slot to be freed  * @param cause to fail the tasks with if slot is not empty  * @throws SlotNotFoundException if there is not task slot for the given allocation id  * @return The freed TaskSlot. If the TaskSlot cannot be freed then null.  */ ;/**  * Tries to free the slot. If the slot is empty it will set the state of the task slot to free  * and return its index. If the slot is not empty, then it will set the state of the task slot  * to releasing, fail all tasks and return -1.  *  * @param allocationId identifying the task slot to be freed  * @param cause to fail the tasks with if slot is not empty  * @throws SlotNotFoundException if there is not task slot for the given allocation id  * @return The freed TaskSlot. If the TaskSlot cannot be freed then null.  */ public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {     checkInit().     TaskSlot taskSlot = getTaskSlot(allocationId).     if (taskSlot != null) {         if (LOG.isDebugEnabled()) {             LOG.debug("Free slot {}.", taskSlot, cause).         } else {             LOG.info("Free slot {}.", taskSlot).         }         final JobID jobId = taskSlot.getJobId().         if (taskSlot.markFree()) {             // remove the allocation id to task slot mapping             allocationIDTaskSlotMap.remove(allocationId).             // unregister a potential timeout             timerService.unregisterTimeout(allocationId).             Set<AllocationID> slots = slotsPerJob.get(jobId).             if (slots == null) {                 throw new IllegalStateException("There are no more slots allocated for the job " + jobId + ". This indicates a programming bug.").             }             slots.remove(allocationId).             if (slots.isEmpty()) {                 slotsPerJob.remove(jobId).             }             return taskSlot.getIndex().         } else {             // we couldn't free the task slot because it still contains task, fail the tasks             // and set the slot state to releasing so that it gets eventually freed             taskSlot.markReleasing().             Iterator<Task> taskIterator = taskSlot.getTasks().             while (taskIterator.hasNext()) {                 taskIterator.next().failExternally(cause).             }             return -1.         }     } else {         throw new SlotNotFoundException(allocationId).     } }
true;public;2;5;/**  * Check whether the timeout with ticket is valid for the given allocation id.  *  * @param allocationId to check against  * @param ticket of the timeout  * @return True if the timeout is valid. otherwise false  */ ;/**  * Check whether the timeout with ticket is valid for the given allocation id.  *  * @param allocationId to check against  * @param ticket of the timeout  * @return True if the timeout is valid. otherwise false  */ public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {     checkInit().     return timerService.isValid(allocationId, ticket). }
true;public;3;5;/**  * Check whether the slot for the given index is allocated for the given job and allocation id.  *  * @param index of the task slot  * @param jobId for which the task slot should be allocated  * @param allocationId which should match the task slot's allocation id  * @return True if the given task slot is allocated for the given job and allocation id  */ ;/**  * Check whether the slot for the given index is allocated for the given job and allocation id.  *  * @param index of the task slot  * @param jobId for which the task slot should be allocated  * @param allocationId which should match the task slot's allocation id  * @return True if the given task slot is allocated for the given job and allocation id  */ public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {     TaskSlot taskSlot = taskSlots.get(index).     return taskSlot.isAllocated(jobId, allocationId). }
true;public;2;9;/**  * Try to mark the specified slot as active if it has been allocated by the given job.  *  * @param jobId of the allocated slot  * @param allocationId identifying the allocation  * @return True if the task slot could be marked active.  */ ;/**  * Try to mark the specified slot as active if it has been allocated by the given job.  *  * @param jobId of the allocated slot  * @param allocationId identifying the allocation  * @return True if the task slot could be marked active.  */ public boolean tryMarkSlotActive(JobID jobId, AllocationID allocationId) {     TaskSlot taskSlot = getTaskSlot(allocationId).     if (taskSlot != null && taskSlot.isAllocated(jobId, allocationId)) {         return taskSlot.markActive().     } else {         return false.     } }
true;public;1;5;/**  * Check whether the task slot with the given index is free.  *  * @param index of the task slot  * @return True if the task slot is free. otherwise false  */ ;/**  * Check whether the task slot with the given index is free.  *  * @param index of the task slot  * @return True if the task slot is free. otherwise false  */ public boolean isSlotFree(int index) {     TaskSlot taskSlot = taskSlots.get(index).     return taskSlot.isFree(). }
true;public;1;3;/**  * Check whether the job has allocated (not active) slots.  *  * @param jobId for which to check for allocated slots  * @return True if there are allocated slots for the given job id.  */ ;/**  * Check whether the job has allocated (not active) slots.  *  * @param jobId for which to check for allocated slots  * @return True if there are allocated slots for the given job id.  */ public boolean hasAllocatedSlots(JobID jobId) {     return getAllocatedSlots(jobId).hasNext(). }
true;public;1;3;/**  * Return an iterator of allocated slots for the given job id.  *  * @param jobId for which to return the allocated slots  * @return Iterator of allocated slots.  */ ;/**  * Return an iterator of allocated slots for the given job id.  *  * @param jobId for which to return the allocated slots  * @return Iterator of allocated slots.  */ public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {     return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED). }
true;public;1;3;/**  * Return an iterator of active slots (their application ids) for the given job id.  *  * @param jobId for which to return the active slots  * @return Iterator of allocation ids of active slots  */ ;/**  * Return an iterator of active slots (their application ids) for the given job id.  *  * @param jobId for which to return the active slots  * @return Iterator of allocation ids of active slots  */ public Iterator<AllocationID> getActiveSlots(JobID jobId) {     return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE). }
true;public;1;10;/**  * Returns the owning job of the {@link TaskSlot} identified by the  * given {@link AllocationID}.  *  * @param allocationId identifying the slot for which to retrieve the owning job  * @return Owning job of the specified {@link TaskSlot} or null if there is no slot for  * the given allocation id or if the slot has no owning job assigned  */ ;/**  * Returns the owning job of the {@link TaskSlot} identified by the  * given {@link AllocationID}.  *  * @param allocationId identifying the slot for which to retrieve the owning job  * @return Owning job of the specified {@link TaskSlot} or null if there is no slot for  * the given allocation id or if the slot has no owning job assigned  */ @Nullable public JobID getOwningJob(AllocationID allocationId) {     final TaskSlot taskSlot = getTaskSlot(allocationId).     if (taskSlot != null) {         return taskSlot.getJobId().     } else {         return null.     } }
true;public;1;21;/**  * Add the given task to the slot identified by the task's allocation id.  *  * @param task to add to the task slot with the respective allocation id  * @throws SlotNotFoundException if there was no slot for the given allocation id  * @throws SlotNotActiveException if there was no slot active for task's job and allocation id  * @return True if the task could be added to the task slot. otherwise false  */ ;// --------------------------------------------------------------------- // Task methods // --------------------------------------------------------------------- /**  * Add the given task to the slot identified by the task's allocation id.  *  * @param task to add to the task slot with the respective allocation id  * @throws SlotNotFoundException if there was no slot for the given allocation id  * @throws SlotNotActiveException if there was no slot active for task's job and allocation id  * @return True if the task could be added to the task slot. otherwise false  */ public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {     Preconditions.checkNotNull(task).     TaskSlot taskSlot = getTaskSlot(task.getAllocationId()).     if (taskSlot != null) {         if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {             if (taskSlot.add(task)) {                 taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot)).                 return true.             } else {                 return false.             }         } else {             throw new SlotNotActiveException(task.getJobID(), task.getAllocationId()).         }     } else {         throw new SlotNotFoundException(task.getAllocationId()).     } }
true;public;1;20;/**  * Remove the task with the given execution attempt id from its task slot. If the owning task  * slot is in state releasing and empty after removing the task, the slot is freed via the  * slot actions.  *  * @param executionAttemptID identifying the task to remove  * @return The removed task if there is any for the given execution attempt id. otherwise null  */ ;/**  * Remove the task with the given execution attempt id from its task slot. If the owning task  * slot is in state releasing and empty after removing the task, the slot is freed via the  * slot actions.  *  * @param executionAttemptID identifying the task to remove  * @return The removed task if there is any for the given execution attempt id. otherwise null  */ public Task removeTask(ExecutionAttemptID executionAttemptID) {     checkInit().     TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID).     if (taskSlotMapping != null) {         Task task = taskSlotMapping.getTask().         TaskSlot taskSlot = taskSlotMapping.getTaskSlot().         taskSlot.remove(task.getExecutionId()).         if (taskSlot.isReleasing() && taskSlot.isEmpty()) {             slotActions.freeSlot(taskSlot.getAllocationId()).         }         return task.     } else {         return null.     } }
true;public;1;9;/**  * Get the task for the given execution attempt id. If none could be found, then return null.  *  * @param executionAttemptID identifying the requested task  * @return The task for the given execution attempt id if it exist. otherwise null  */ ;/**  * Get the task for the given execution attempt id. If none could be found, then return null.  *  * @param executionAttemptID identifying the requested task  * @return The task for the given execution attempt id if it exist. otherwise null  */ public Task getTask(ExecutionAttemptID executionAttemptID) {     TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID).     if (taskSlotMapping != null) {         return taskSlotMapping.getTask().     } else {         return null.     } }
true;public;1;3;/**  * Return an iterator over all tasks for a given job.  *  * @param jobId identifying the job of the requested tasks  * @return Iterator over all task for a given job  */ ;/**  * Return an iterator over all tasks for a given job.  *  * @param jobId identifying the job of the requested tasks  * @return Iterator over all task for a given job  */ public Iterator<Task> getTasks(JobID jobId) {     return new TaskIterator(jobId). }
true;public;1;3;/**  * Get the current allocation for the task slot with the given index.  *  * @param index identifying the slot for which the allocation id shall be retrieved  * @return Allocation id of the specified slot if allocated. otherwise null  */ ;/**  * Get the current allocation for the task slot with the given index.  *  * @param index identifying the slot for which the allocation id shall be retrieved  * @return Allocation id of the specified slot if allocated. otherwise null  */ public AllocationID getCurrentAllocation(int index) {     return taskSlots.get(index).getAllocationId(). }
false;public;2;8;;// --------------------------------------------------------------------- // TimeoutListener methods // --------------------------------------------------------------------- @Override public void notifyTimeout(AllocationID key, UUID ticket) {     checkInit().     if (slotActions != null) {         slotActions.timeoutSlot(key, ticket).     } }
false;private;1;6;;// --------------------------------------------------------------------- // Internal methods // --------------------------------------------------------------------- @Nullable private TaskSlot getTaskSlot(AllocationID allocationId) {     Preconditions.checkNotNull(allocationId).     return allocationIDTaskSlotMap.get(allocationId). }
false;private;0;3;;private void checkInit() {     Preconditions.checkState(started, "The %s has to be started.", TaskSlotTable.class.getSimpleName()). }
false;public;0;3;;public Task getTask() {     return task. }
false;public;0;3;;public TaskSlot getTaskSlot() {     return taskSlot. }
false;public;0;4;;@Override public boolean hasNext() {     return iterator.hasNext(). }
false;public;0;8;;@Override public AllocationID next() {     try {         return iterator.next().getAllocationId().     } catch (NoSuchElementException e) {         throw new NoSuchElementException("No more allocation ids.").     } }
false;public;0;4;;@Override public void remove() {     throw new UnsupportedOperationException("Cannot remove allocation ids via this iterator."). }
false;public;0;14;;@Override public boolean hasNext() {     while (currentSlot == null && allSlots.hasNext()) {         AllocationID tempSlot = allSlots.next().         TaskSlot taskSlot = getTaskSlot(tempSlot).         if (taskSlot != null && taskSlot.getState() == state) {             currentSlot = taskSlot.         }     }     return currentSlot != null. }
false;public;0;26;;@Override public TaskSlot next() {     if (currentSlot != null) {         TaskSlot result = currentSlot.         currentSlot = null.         return result.     } else {         while (true) {             AllocationID tempSlot.             try {                 tempSlot = allSlots.next().             } catch (NoSuchElementException e) {                 throw new NoSuchElementException("No more task slots.").             }             TaskSlot taskSlot = getTaskSlot(tempSlot).             if (taskSlot != null && taskSlot.getState() == state) {                 return taskSlot.             }         }     } }
false;public;0;4;;@Override public void remove() {     throw new UnsupportedOperationException("Cannot remove task slots via this iterator."). }
false;public;0;10;;@Override public boolean hasNext() {     while ((currentTasks == null || !currentTasks.hasNext()) && taskSlotIterator.hasNext()) {         TaskSlot taskSlot = taskSlotIterator.next().         currentTasks = taskSlot.getTasks().     }     return (currentTasks != null && currentTasks.hasNext()). }
false;public;0;16;;@Override public Task next() {     while ((currentTasks == null || !currentTasks.hasNext())) {         TaskSlot taskSlot.         try {             taskSlot = taskSlotIterator.next().         } catch (NoSuchElementException e) {             throw new NoSuchElementException("No more tasks.").         }         currentTasks = taskSlot.getTasks().     }     return currentTasks.next(). }
false;public;0;4;;@Override public void remove() {     throw new UnsupportedOperationException("Cannot remove tasks via this iterator."). }
