commented;modifiers;parameterAmount;loc;comment;code
true;;1;21;/**  * Hands in the stats for a subtask.  *  * @param subtask Stats for the sub task to hand in.  */ ;/**  * Hands in the stats for a subtask.  *  * @param subtask Stats for the sub task to hand in.  */ boolean reportSubtaskStats(SubtaskStateStats subtask) {     checkNotNull(subtask, "Subtask stats").     int subtaskIndex = subtask.getSubtaskIndex().     if (subtaskIndex < 0 || subtaskIndex >= subtaskStats.length) {         return false.     }     if (subtaskStats[subtaskIndex] == null) {         subtaskStats[subtaskIndex] = subtask.         latestAckedSubtaskStats = subtask.         numAcknowledgedSubtasks++.         summaryStats.updateSummary(subtask).         return true.     } else {         return false.     } }
true;public;0;3;/**  * Returns the ID of the operator the statistics belong to.  *  * @return ID of the operator the statistics belong to.  */ ;/**  * Returns the ID of the operator the statistics belong to.  *  * @return ID of the operator the statistics belong to.  */ public JobVertexID getJobVertexId() {     return jobVertexId. }
true;public;0;3;/**  * Returns the number of subtasks.  *  * @return Number of subtasks.  */ ;/**  * Returns the number of subtasks.  *  * @return Number of subtasks.  */ public int getNumberOfSubtasks() {     return subtaskStats.length. }
true;public;0;3;/**  * Returns the number of acknowledged subtasks.  *  * @return Number of acknowledged subtasks.  */ ;/**  * Returns the number of acknowledged subtasks.  *  * @return Number of acknowledged subtasks.  */ public int getNumberOfAcknowledgedSubtasks() {     return numAcknowledgedSubtasks. }
true;public;0;4;/**  * Returns the latest acknowledged subtask stats or <code>null</code>  * if none was acknowledged yet.  *  * @return The latest acknowledged subtask stats.  */ ;/**  * Returns the latest acknowledged subtask stats or <code>null</code>  * if none was acknowledged yet.  *  * @return The latest acknowledged subtask stats.  */ @Nullable public SubtaskStateStats getLatestAcknowledgedSubtaskStats() {     return latestAckedSubtaskStats. }
true;public;0;8;/**  * Returns the ack timestamp of the latest acknowledged subtask or  * <code>-1</code> if none was acknowledged yet.  *  * @return Ack timestamp of the latest acknowledged subtask or <code>-1</code>.  */ ;/**  * Returns the ack timestamp of the latest acknowledged subtask or  * <code>-1</code> if none was acknowledged yet.  *  * @return Ack timestamp of the latest acknowledged subtask or <code>-1</code>.  */ public long getLatestAckTimestamp() {     SubtaskStateStats subtask = latestAckedSubtaskStats.     if (subtask != null) {         return subtask.getAckTimestamp().     } else {         return -1.     } }
true;public;0;3;/**  * Returns the total checkpoint state size over all subtasks.  *  * @return Total checkpoint state size over all subtasks.  */ ;/**  * Returns the total checkpoint state size over all subtasks.  *  * @return Total checkpoint state size over all subtasks.  */ public long getStateSize() {     return summaryStats.getStateSizeStats().getSum(). }
true;public;0;3;/**  * Returns the total buffered bytes during alignment over all subtasks.  *  * <p>Can return <code>-1</code> if the runtime did not report this.  *  * @return Total buffered bytes during alignment over all subtasks.  */ ;/**  * Returns the total buffered bytes during alignment over all subtasks.  *  * <p>Can return <code>-1</code> if the runtime did not report this.  *  * @return Total buffered bytes during alignment over all subtasks.  */ public long getAlignmentBuffered() {     return summaryStats.getAlignmentBufferedStats().getSum(). }
true;public;1;8;/**  * Returns the duration of this checkpoint at the task/operator calculated  * as the time since triggering until the latest acknowledged subtask  * or <code>-1</code> if no subtask was acknowledged yet.  *  * @return Duration of this checkpoint at the task/operator or <code>-1</code> if no subtask was acknowledged yet.  */ ;/**  * Returns the duration of this checkpoint at the task/operator calculated  * as the time since triggering until the latest acknowledged subtask  * or <code>-1</code> if no subtask was acknowledged yet.  *  * @return Duration of this checkpoint at the task/operator or <code>-1</code> if no subtask was acknowledged yet.  */ public long getEndToEndDuration(long triggerTimestamp) {     SubtaskStateStats subtask = getLatestAcknowledgedSubtaskStats().     if (subtask != null) {         return Math.max(0, subtask.getAckTimestamp() - triggerTimestamp).     } else {         return -1.     } }
true;public;0;3;/**  * Returns the stats for all subtasks.  *  * <p>Elements of the returned array are <code>null</code> if no stats are  * available yet for the respective subtask.  *  * <p>Note: The returned array must not be modified.  *  * @return Array of subtask stats (elements are <code>null</code> if no stats available yet).  */ ;/**  * Returns the stats for all subtasks.  *  * <p>Elements of the returned array are <code>null</code> if no stats are  * available yet for the respective subtask.  *  * <p>Note: The returned array must not be modified.  *  * @return Array of subtask stats (elements are <code>null</code> if no stats available yet).  */ public SubtaskStateStats[] getSubtaskStats() {     return subtaskStats. }
true;public;0;3;/**  * Returns the summary of the subtask stats.  *  * @return Summary of the subtask stats.  */ ;/**  * Returns the summary of the subtask stats.  *  * @return Summary of the subtask stats.  */ public TaskStateStatsSummary getSummaryStats() {     return summaryStats. }
true;;1;8;/**  * Updates the summary with the given subtask.  *  * @param subtaskStats Subtask stats to update the summary with.  */ ;/**  * Updates the summary with the given subtask.  *  * @param subtaskStats Subtask stats to update the summary with.  */ void updateSummary(SubtaskStateStats subtaskStats) {     stateSize.add(subtaskStats.getStateSize()).     ackTimestamp.add(subtaskStats.getAckTimestamp()).     syncCheckpointDuration.add(subtaskStats.getSyncCheckpointDuration()).     asyncCheckpointDuration.add(subtaskStats.getAsyncCheckpointDuration()).     alignmentBuffered.add(subtaskStats.getAlignmentBuffered()).     alignmentDuration.add(subtaskStats.getAlignmentDuration()). }
true;public;0;3;/**  * Returns the summary stats for the state size.  *  * @return Summary stats for the state size.  */ ;/**  * Returns the summary stats for the state size.  *  * @return Summary stats for the state size.  */ public MinMaxAvgStats getStateSizeStats() {     return stateSize. }
true;public;0;3;/**  * Returns the summary stats for the ACK timestamps.  *  * @return Summary stats for the state size.  */ ;/**  * Returns the summary stats for the ACK timestamps.  *  * @return Summary stats for the state size.  */ public MinMaxAvgStats getAckTimestampStats() {     return ackTimestamp. }
true;public;0;3;/**  * Returns the summary stats for the sync checkpoint duration.  *  * @return Summary stats for the sync checkpoint duration.  */ ;/**  * Returns the summary stats for the sync checkpoint duration.  *  * @return Summary stats for the sync checkpoint duration.  */ public MinMaxAvgStats getSyncCheckpointDurationStats() {     return syncCheckpointDuration. }
true;public;0;3;/**  * Returns the summary stats for the async checkpoint duration.  *  * @return Summary stats for the async checkpoint duration.  */ ;/**  * Returns the summary stats for the async checkpoint duration.  *  * @return Summary stats for the async checkpoint duration.  */ public MinMaxAvgStats getAsyncCheckpointDurationStats() {     return asyncCheckpointDuration. }
true;public;0;3;/**  * Returns the summary stats for the buffered bytes during alignments.  *  * @return Summary stats for the buffered state size during alignment.  */ ;/**  * Returns the summary stats for the buffered bytes during alignments.  *  * @return Summary stats for the buffered state size during alignment.  */ public MinMaxAvgStats getAlignmentBufferedStats() {     return alignmentBuffered. }
true;public;0;3;/**  * Returns the summary stats for the alignment duration.  *  * @return Summary stats for the duration of the alignment.  */ ;/**  * Returns the summary stats for the alignment duration.  *  * @return Summary stats for the duration of the alignment.  */ public MinMaxAvgStats getAlignmentDurationStats() {     return alignmentDuration. }
