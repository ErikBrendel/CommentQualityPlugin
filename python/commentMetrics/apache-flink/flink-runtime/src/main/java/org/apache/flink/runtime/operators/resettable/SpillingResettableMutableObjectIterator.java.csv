commented;modifiers;parameterAmount;loc;comment;code
false;public;0;1;;public void open() { }
false;public;0;5;;@Override public void reset() throws IOException {     this.inView = this.buffer.flip().     this.currentElementNum = 0. }
false;public;0;18;;public List<MemorySegment> close() throws IOException {     if (LOG.isDebugEnabled()) {         LOG.debug("Spilling Resettable Iterator closing. Stored " + this.elementCount + " records.").     }     this.inView = null.     final List<MemorySegment> memory = this.buffer.close().     memory.addAll(this.memorySegments).     this.memorySegments.clear().     if (this.releaseMemoryOnClose) {         this.memoryManager.release(memory).         return Collections.emptyList().     } else {         return memory.     } }
false;public;1;30;;@Override public T next(T reuse) throws IOException {     if (this.inView != null) {         // reading, any subsequent pass         if (this.currentElementNum < this.elementCount) {             try {                 reuse = this.serializer.deserialize(reuse, this.inView).             } catch (IOException e) {                 throw new RuntimeException("SpillingIterator: Error reading element from buffer.", e).             }             this.currentElementNum++.             return reuse.         } else {             return null.         }     } else {         // writing pass (first)         if ((reuse = this.input.next(reuse)) != null) {             try {                 this.serializer.serialize(reuse, this.buffer).             } catch (IOException e) {                 throw new RuntimeException("SpillingIterator: Error writing element to buffer.", e).             }             this.elementCount++.             return reuse.         } else {             return null.         }     } }
false;public;0;31;;@Override public T next() throws IOException {     T result = null.     if (this.inView != null) {         // reading, any subsequent pass         if (this.currentElementNum < this.elementCount) {             try {                 result = this.serializer.deserialize(this.inView).             } catch (IOException e) {                 throw new RuntimeException("SpillingIterator: Error reading element from buffer.", e).             }             this.currentElementNum++.             return result.         } else {             return null.         }     } else {         // writing pass (first)         if ((result = this.input.next()) != null) {             try {                 this.serializer.serialize(result, this.buffer).             } catch (IOException e) {                 throw new RuntimeException("SpillingIterator: Error writing element to buffer.", e).             }             this.elementCount++.             return result.         } else {             return null.         }     } }
false;public;0;15;;public void consumeAndCacheRemainingData() throws IOException {     // check that we are in the first pass and that more input data is left     if (this.inView == null) {         T holder = this.serializer.createInstance().         while ((holder = this.input.next(holder)) != null) {             try {                 this.serializer.serialize(holder, this.buffer).             } catch (IOException e) {                 throw new RuntimeException("SpillingIterator: Error writing element to buffer.", e).             }             this.elementCount++.         }     } }
