commented;modifiers;parameterAmount;loc;comment;code
false;public;1;27;;@Override public void configure(ContainerSpecification container) throws IOException {     if (hadoopConfDir == null) {         return.     }     File coreSitePath = new File(hadoopConfDir, "core-site.xml").     File hdfsSitePath = new File(hadoopConfDir, "hdfs-site.xml").     container.getEnvironmentVariables().put("HADOOP_CONF_DIR", TARGET_CONF_DIR.toString()).     container.getDynamicConfiguration().setString(ConfigConstants.PATH_HADOOP_CONFIG, TARGET_CONF_DIR.toString()).     container.getArtifacts().add(ContainerSpecification.Artifact.newBuilder().setSource(new Path(coreSitePath.toURI())).setDest(new Path(TARGET_CONF_DIR, coreSitePath.getName())).setCachable(true).build()).     container.getArtifacts().add(ContainerSpecification.Artifact.newBuilder().setSource(new Path(hdfsSitePath.toURI())).setDest(new Path(TARGET_CONF_DIR, hdfsSitePath.getName())).setCachable(true).build()). }
false;public,static;0;3;;public static Builder newBuilder() {     return new Builder(). }
true;public;1;31;/**  * Configures the overlay using the current environment's Hadoop configuration.  *  * The following locations are checked for a Hadoop configuration:  *  - (conf) fs.hdfs.hadoopconf  *  - (env)  HADOOP_CONF_DIR  *  - (env)  HADOOP_HOME/conf  *  - (env)  HADOOP_HOME/etc/hadoop  */ ;/**  * Configures the overlay using the current environment's Hadoop configuration.  *  * The following locations are checked for a Hadoop configuration:  *  - (conf) fs.hdfs.hadoopconf  *  - (env)  HADOOP_CONF_DIR  *  - (env)  HADOOP_HOME/conf  *  - (env)  HADOOP_HOME/etc/hadoop  */ public Builder fromEnvironment(Configuration globalConfiguration) {     String[] possibleHadoopConfPaths = new String[4].     possibleHadoopConfPaths[0] = globalConfiguration.getString(ConfigConstants.PATH_HADOOP_CONFIG, null).     possibleHadoopConfPaths[1] = System.getenv("HADOOP_CONF_DIR").     if (System.getenv("HADOOP_HOME") != null) {         possibleHadoopConfPaths[2] = System.getenv("HADOOP_HOME") + "/conf".         // hadoop 2.2         possibleHadoopConfPaths[3] = System.getenv("HADOOP_HOME") + "/etc/hadoop".     }     for (String possibleHadoopConfPath : possibleHadoopConfPaths) {         if (possibleHadoopConfPath != null) {             File confPath = new File(possibleHadoopConfPath).             File coreSitePath = new File(confPath, "core-site.xml").             File hdfsSitePath = new File(confPath, "hdfs-site.xml").             if (coreSitePath.exists() && hdfsSitePath.exists()) {                 this.hadoopConfDir = confPath.                 break.             }         }     }     if (hadoopConfDir == null) {         LOG.warn("Unable to locate a Hadoop configuration. HDFS will use defaults.").     }     return this. }
false;public;0;3;;public HadoopConfOverlay build() {     return new HadoopConfOverlay(hadoopConfDir). }
