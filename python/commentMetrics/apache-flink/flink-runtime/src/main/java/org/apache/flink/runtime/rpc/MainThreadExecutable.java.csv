commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Execute the runnable in the main thread of the underlying RPC endpoint.  *  * @param runnable Runnable to be executed  */ ;/**  * Execute the runnable in the main thread of the underlying RPC endpoint.  *  * @param runnable Runnable to be executed  */ void runAsync(Runnable runnable).
true;;2;1;/**  * Execute the callable in the main thread of the underlying RPC endpoint and return a future for  * the callable result. If the future is not completed within the given timeout, the returned  * future will throw a {@link TimeoutException}.  *  * @param callable Callable to be executed  * @param callTimeout Timeout for the future to complete  * @param <V> Return value of the callable  * @return Future of the callable result  */ ;/**  * Execute the callable in the main thread of the underlying RPC endpoint and return a future for  * the callable result. If the future is not completed within the given timeout, the returned  * future will throw a {@link TimeoutException}.  *  * @param callable Callable to be executed  * @param callTimeout Timeout for the future to complete  * @param <V> Return value of the callable  * @return Future of the callable result  */ <V> CompletableFuture<V> callAsync(Callable<V> callable, Time callTimeout).
true;;2;1;/**  * Execute the runnable in the main thread of the underlying RPC endpoint, with  * a delay of the given number of milliseconds.  *  * @param runnable Runnable to be executed  * @param delay    The delay, in milliseconds, after which the runnable will be executed  */ ;/**  * Execute the runnable in the main thread of the underlying RPC endpoint, with  * a delay of the given number of milliseconds.  *  * @param runnable Runnable to be executed  * @param delay    The delay, in milliseconds, after which the runnable will be executed  */ void scheduleRunAsync(Runnable runnable, long delay).
