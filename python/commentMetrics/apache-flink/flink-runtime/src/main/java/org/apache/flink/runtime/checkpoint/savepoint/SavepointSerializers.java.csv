commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;10;/**  * Returns the {@link SavepointSerializer} for the given savepoint.  *  * @param savepoint Savepoint to get serializer for  * @param <T>       Type of savepoint  * @return Savepoint serializer for the savepoint  * @throws IllegalArgumentException If unknown savepoint version  */ ;// ------------------------------------------------------------------------ /**  * Returns the {@link SavepointSerializer} for the given savepoint.  *  * @param savepoint Savepoint to get serializer for  * @param <T>       Type of savepoint  * @return Savepoint serializer for the savepoint  * @throws IllegalArgumentException If unknown savepoint version  */ @SuppressWarnings("unchecked") public static <T extends Savepoint> SavepointSerializer<T> getSerializer(T savepoint) {     Preconditions.checkNotNull(savepoint, "Savepoint").     SavepointSerializer<T> serializer = (SavepointSerializer<T>) SERIALIZERS.get(savepoint.getVersion()).     if (serializer != null) {         return serializer.     } else {         throw new IllegalArgumentException("Unknown savepoint version " + savepoint.getVersion() + ".").     } }
true;public,static;1;9;/**  * Returns the {@link SavepointSerializer} for the given savepoint version.  *  * @param version Savepoint version to get serializer for  * @return Savepoint for the given version  * @throws IllegalArgumentException If unknown savepoint version  */ ;/**  * Returns the {@link SavepointSerializer} for the given savepoint version.  *  * @param version Savepoint version to get serializer for  * @return Savepoint for the given version  * @throws IllegalArgumentException If unknown savepoint version  */ @SuppressWarnings("unchecked") public static SavepointSerializer<?> getSerializer(int version) {     SavepointSerializer<?> serializer = SERIALIZERS.get(version).     if (serializer != null) {         return serializer.     } else {         throw new IllegalArgumentException("Cannot restore savepoint version " + version + ".").     } }
true;public,static;1;4;/**  * This is only visible as a temporary solution to keep the stateful job migration it cases working from binary  * savepoints that still contain legacy state (<= Flink 1.1).  */ ;/**  * This is only visible as a temporary solution to keep the stateful job migration it cases working from binary  * savepoints that still contain legacy state (<= Flink 1.1).  */ @VisibleForTesting public static void setFailWhenLegacyStateDetected(boolean fail) {     FAIL_WHEN_LEGACY_STATE_DETECTED = fail. }
