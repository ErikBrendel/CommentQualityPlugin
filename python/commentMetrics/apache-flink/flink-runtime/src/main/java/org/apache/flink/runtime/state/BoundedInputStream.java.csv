commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public int read() throws IOException {     if (endOffsetExclusive >= 0L && position >= endOffsetExclusive) {         return -1.     } else {         int result = delegate.read().         ++position.         return result.     } }
false;public;1;3;;public int read(byte[] b) throws IOException {     return read(b, 0, b.length). }
false;public;3;14;;public int read(byte[] b, int off, int len) throws IOException {     if (endOffsetExclusive >= 0L && position >= endOffsetExclusive) {         return -1.     } else {         long maxRead = endOffsetExclusive >= 0L ? Math.min((long) len, endOffsetExclusive - position) : (long) len.         int bytesRead = delegate.read(b, off, (int) maxRead).         if (bytesRead == -1) {             return -1.         } else {             position += (long) bytesRead.             return bytesRead.         }     } }
false;public;1;6;;public long skip(long n) throws IOException {     long toSkip = endOffsetExclusive >= 0L ? Math.min(n, endOffsetExclusive - position) : n.     long skippedBytes = delegate.skip(toSkip).     position += skippedBytes.     return skippedBytes. }
false;public;0;3;;public int available() throws IOException {     return endOffsetExclusive >= 0L && position >= endOffsetExclusive ? 0 : delegate.available(). }
false;public;0;3;;public String toString() {     return delegate.toString(). }
false;public;0;3;;public void close() throws IOException {     delegate.close(). }
false;public,synchronized;0;4;;public synchronized void reset() throws IOException {     delegate.reset().     position = mark. }
false;public,synchronized;1;4;;public synchronized void mark(int readlimit) {     delegate.mark(readlimit).     mark = position. }
false;public;0;3;;public long getEndOffsetExclusive() {     return endOffsetExclusive. }
false;public;1;3;;public void setEndOffsetExclusive(long endOffsetExclusive) {     this.endOffsetExclusive = endOffsetExclusive. }
false;public;0;3;;public boolean markSupported() {     return delegate.markSupported(). }
