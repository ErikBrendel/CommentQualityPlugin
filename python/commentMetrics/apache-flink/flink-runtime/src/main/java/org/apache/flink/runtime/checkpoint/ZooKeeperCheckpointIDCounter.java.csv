commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public void start() throws Exception {     synchronized (startStopLock) {         if (!isStarted) {             sharedCount.start().             client.getConnectionStateListenable().addListener(connStateListener).             isStarted = true.         }     } }
false;public;1;17;;@Override public void shutdown(JobStatus jobStatus) throws Exception {     synchronized (startStopLock) {         if (isStarted) {             LOG.info("Shutting down.").             sharedCount.close().             client.getConnectionStateListenable().removeListener(connStateListener).             if (jobStatus.isGloballyTerminalState()) {                 LOG.info("Removing {} from ZooKeeper", counterPath).                 client.delete().deletingChildrenIfNeeded().inBackground().forPath(counterPath).             }             isStarted = false.         }     } }
false;public;0;23;;@Override public long getAndIncrement() throws Exception {     while (true) {         ConnectionState connState = connStateListener.getLastState().         if (connState != null) {             throw new IllegalStateException("Connection state: " + connState).         }         VersionedValue<Integer> current = sharedCount.getVersionedValue().         int newCount = current.getValue() + 1.         if (newCount < 0) {             // overflow and wrap around             throw new Exception("Checkpoint counter overflow. ZooKeeper checkpoint counter only supports " + "checkpoints Ids up to " + Integer.MAX_VALUE).         }         if (sharedCount.trySetCount(current, newCount)) {             return current.getValue().         }     } }
false;public;1;16;;@Override public void setCount(long newId) throws Exception {     ConnectionState connState = connStateListener.getLastState().     if (connState != null) {         throw new IllegalStateException("Connection state: " + connState).     }     if (newId > Integer.MAX_VALUE) {         throw new IllegalArgumentException("ZooKeeper checkpoint counter only supports " + "checkpoints Ids up to " + Integer.MAX_VALUE + ", but given value is" + newId).     }     sharedCount.setCount((int) newId). }
false;public;2;6;;@Override public void stateChanged(CuratorFramework client, ConnectionState newState) {     if (newState == ConnectionState.SUSPENDED || newState == ConnectionState.LOST) {         lastState = newState.     } }
false;private;0;3;;private ConnectionState getLastState() {     return lastState. }
