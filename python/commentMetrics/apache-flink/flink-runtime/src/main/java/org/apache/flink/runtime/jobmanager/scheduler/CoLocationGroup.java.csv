commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;// -------------------------------------------------------------------------------------------- public void addVertex(JobVertex vertex) {     Preconditions.checkNotNull(vertex).     this.vertices.add(vertex). }
false;public;1;11;;public void mergeInto(CoLocationGroup other) {     Preconditions.checkNotNull(other).     for (JobVertex v : this.vertices) {         v.updateCoLocationGroup(other).     }     // move vertex membership     other.vertices.addAll(this.vertices).     this.vertices.clear(). }
false;public;1;4;;// -------------------------------------------------------------------------------------------- public CoLocationConstraint getLocationConstraint(int subtask) {     ensureConstraints(subtask + 1).     return constraints.get(subtask). }
false;private;1;14;;private void ensureConstraints(int num) {     if (constraints == null) {         constraints = new ArrayList<CoLocationConstraint>(num).     } else {         constraints.ensureCapacity(num).     }     if (num > constraints.size()) {         constraints.ensureCapacity(num).         for (int i = constraints.size(). i < num. i++) {             constraints.add(new CoLocationConstraint(this)).         }     } }
true;public;0;3;/**  * Gets the ID that identifies this co-location group.  *  * @return The ID that identifies this co-location group.  */ ;/**  * Gets the ID that identifies this co-location group.  *  * @return The ID that identifies this co-location group.  */ public AbstractID getId() {     return id. }
true;public;0;9;/**  * Resets this co-location group, meaning that future calls to {@link #getLocationConstraint(int)}  * will give out new CoLocationConstraints.  *  * <p>This method can only be called when no tasks from any of the CoLocationConstraints are  * executed any more.</p>  */ ;/**  * Resets this co-location group, meaning that future calls to {@link #getLocationConstraint(int)}  * will give out new CoLocationConstraints.  *  * <p>This method can only be called when no tasks from any of the CoLocationConstraints are  * executed any more.</p>  */ public void resetConstraints() {     for (CoLocationConstraint c : this.constraints) {         if (c.isAssignedAndAlive()) {             throw new IllegalStateException("Cannot reset co-location group: some constraints still have live tasks").         }     }     this.constraints.clear(). }
