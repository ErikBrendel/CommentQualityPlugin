# id;timestamp;commentText;codeText;commentWords;codeWords
BackPressureStatsTracker -> @Deprecated 	public boolean triggerStackTraceSample(ExecutionJobVertex vertex);1517920615;Triggers a stack trace sample for a operator to gather the back pressure_statistics. If there is a sample in progress for the operator, the call_is ignored.__@param vertex Operator to get the stats for._@return Flag indicating whether a sample with triggered._@deprecated {@link #getOperatorBackPressureStats(ExecutionJobVertex)} will trigger_stack trace sampling automatically.;@Deprecated_	public boolean triggerStackTraceSample(ExecutionJobVertex vertex) {_		return triggerStackTraceSampleInternal(vertex)__	};triggers,a,stack,trace,sample,for,a,operator,to,gather,the,back,pressure,statistics,if,there,is,a,sample,in,progress,for,the,operator,the,call,is,ignored,param,vertex,operator,to,get,the,stats,for,return,flag,indicating,whether,a,sample,with,triggered,deprecated,link,get,operator,back,pressure,stats,execution,job,vertex,will,trigger,stack,trace,sampling,automatically;deprecated,public,boolean,trigger,stack,trace,sample,execution,job,vertex,vertex,return,trigger,stack,trace,sample,internal,vertex
BackPressureStatsTracker -> @Deprecated 	public boolean triggerStackTraceSample(ExecutionJobVertex vertex);1518090029;Triggers a stack trace sample for a operator to gather the back pressure_statistics. If there is a sample in progress for the operator, the call_is ignored.__@param vertex Operator to get the stats for._@return Flag indicating whether a sample with triggered._@deprecated {@link #getOperatorBackPressureStats(ExecutionJobVertex)} will trigger_stack trace sampling automatically.;@Deprecated_	public boolean triggerStackTraceSample(ExecutionJobVertex vertex) {_		return triggerStackTraceSampleInternal(vertex)__	};triggers,a,stack,trace,sample,for,a,operator,to,gather,the,back,pressure,statistics,if,there,is,a,sample,in,progress,for,the,operator,the,call,is,ignored,param,vertex,operator,to,get,the,stats,for,return,flag,indicating,whether,a,sample,with,triggered,deprecated,link,get,operator,back,pressure,stats,execution,job,vertex,will,trigger,stack,trace,sampling,automatically;deprecated,public,boolean,trigger,stack,trace,sample,execution,job,vertex,vertex,return,trigger,stack,trace,sample,internal,vertex
BackPressureStatsTracker -> @Deprecated 	public boolean triggerStackTraceSample(ExecutionJobVertex vertex);1518090029;Triggers a stack trace sample for a operator to gather the back pressure_statistics. If there is a sample in progress for the operator, the call_is ignored.__@param vertex Operator to get the stats for._@return Flag indicating whether a sample with triggered._@deprecated {@link #getOperatorBackPressureStats(ExecutionJobVertex)} will trigger_stack trace sampling automatically.;@Deprecated_	public boolean triggerStackTraceSample(ExecutionJobVertex vertex) {_		synchronized (lock) {_			return triggerStackTraceSampleInternal(vertex)__		}_	};triggers,a,stack,trace,sample,for,a,operator,to,gather,the,back,pressure,statistics,if,there,is,a,sample,in,progress,for,the,operator,the,call,is,ignored,param,vertex,operator,to,get,the,stats,for,return,flag,indicating,whether,a,sample,with,triggered,deprecated,link,get,operator,back,pressure,stats,execution,job,vertex,will,trigger,stack,trace,sampling,automatically;deprecated,public,boolean,trigger,stack,trace,sample,execution,job,vertex,vertex,synchronized,lock,return,trigger,stack,trace,sample,internal,vertex
BackPressureStatsTracker -> public BackPressureStatsTracker( 			StackTraceSampleCoordinator coordinator, 			int cleanUpInterval, 			int numSamples, 			int backPressureStatsRefreshInterval, 			Time delayBetweenSamples);1517920615;Creates a back pressure statistics tracker.__@param cleanUpInterval     Clean up interval for completed stats._@param numSamples          Number of stack trace samples when determining back pressure._@param delayBetweenSamples Delay between samples when determining back pressure.;public BackPressureStatsTracker(_			StackTraceSampleCoordinator coordinator,_			int cleanUpInterval,_			int numSamples,_			int backPressureStatsRefreshInterval,_			Time delayBetweenSamples) {__		this.coordinator = checkNotNull(coordinator, "Stack trace sample coordinator")___		checkArgument(cleanUpInterval >= 0, "Clean up interval")__		this.cleanUpInterval = cleanUpInterval___		checkArgument(numSamples >= 1, "Number of samples")__		this.numSamples = numSamples___		checkArgument(_			backPressureStatsRefreshInterval >= 0,_			"backPressureStatsRefreshInterval must be greater than or equal to 0")__		this.backPressureStatsRefreshInterval = backPressureStatsRefreshInterval___		this.delayBetweenSamples = checkNotNull(delayBetweenSamples, "Delay between samples")___		this.operatorStatsCache = CacheBuilder.newBuilder()_				.concurrencyLevel(1)_				.expireAfterAccess(cleanUpInterval, TimeUnit.MILLISECONDS)_				.build()__	};creates,a,back,pressure,statistics,tracker,param,clean,up,interval,clean,up,interval,for,completed,stats,param,num,samples,number,of,stack,trace,samples,when,determining,back,pressure,param,delay,between,samples,delay,between,samples,when,determining,back,pressure;public,back,pressure,stats,tracker,stack,trace,sample,coordinator,coordinator,int,clean,up,interval,int,num,samples,int,back,pressure,stats,refresh,interval,time,delay,between,samples,this,coordinator,check,not,null,coordinator,stack,trace,sample,coordinator,check,argument,clean,up,interval,0,clean,up,interval,this,clean,up,interval,clean,up,interval,check,argument,num,samples,1,number,of,samples,this,num,samples,num,samples,check,argument,back,pressure,stats,refresh,interval,0,back,pressure,stats,refresh,interval,must,be,greater,than,or,equal,to,0,this,back,pressure,stats,refresh,interval,back,pressure,stats,refresh,interval,this,delay,between,samples,check,not,null,delay,between,samples,delay,between,samples,this,operator,stats,cache,cache,builder,new,builder,concurrency,level,1,expire,after,access,clean,up,interval,time,unit,milliseconds,build
BackPressureStatsTracker -> public BackPressureStatsTracker( 			StackTraceSampleCoordinator coordinator, 			int cleanUpInterval, 			int numSamples, 			int backPressureStatsRefreshInterval, 			Time delayBetweenSamples);1518090029;Creates a back pressure statistics tracker.__@param cleanUpInterval     Clean up interval for completed stats._@param numSamples          Number of stack trace samples when determining back pressure._@param delayBetweenSamples Delay between samples when determining back pressure.;public BackPressureStatsTracker(_			StackTraceSampleCoordinator coordinator,_			int cleanUpInterval,_			int numSamples,_			int backPressureStatsRefreshInterval,_			Time delayBetweenSamples) {__		this.coordinator = checkNotNull(coordinator, "Stack trace sample coordinator")___		checkArgument(cleanUpInterval >= 0, "Clean up interval")__		this.cleanUpInterval = cleanUpInterval___		checkArgument(numSamples >= 1, "Number of samples")__		this.numSamples = numSamples___		checkArgument(_			backPressureStatsRefreshInterval >= 0,_			"backPressureStatsRefreshInterval must be greater than or equal to 0")__		this.backPressureStatsRefreshInterval = backPressureStatsRefreshInterval___		this.delayBetweenSamples = checkNotNull(delayBetweenSamples, "Delay between samples")___		this.operatorStatsCache = CacheBuilder.newBuilder()_				.concurrencyLevel(1)_				.expireAfterAccess(cleanUpInterval, TimeUnit.MILLISECONDS)_				.build()__	};creates,a,back,pressure,statistics,tracker,param,clean,up,interval,clean,up,interval,for,completed,stats,param,num,samples,number,of,stack,trace,samples,when,determining,back,pressure,param,delay,between,samples,delay,between,samples,when,determining,back,pressure;public,back,pressure,stats,tracker,stack,trace,sample,coordinator,coordinator,int,clean,up,interval,int,num,samples,int,back,pressure,stats,refresh,interval,time,delay,between,samples,this,coordinator,check,not,null,coordinator,stack,trace,sample,coordinator,check,argument,clean,up,interval,0,clean,up,interval,this,clean,up,interval,clean,up,interval,check,argument,num,samples,1,number,of,samples,this,num,samples,num,samples,check,argument,back,pressure,stats,refresh,interval,0,back,pressure,stats,refresh,interval,must,be,greater,than,or,equal,to,0,this,back,pressure,stats,refresh,interval,back,pressure,stats,refresh,interval,this,delay,between,samples,check,not,null,delay,between,samples,delay,between,samples,this,operator,stats,cache,cache,builder,new,builder,concurrency,level,1,expire,after,access,clean,up,interval,time,unit,milliseconds,build
BackPressureStatsTracker -> public BackPressureStatsTracker( 			StackTraceSampleCoordinator coordinator, 			int cleanUpInterval, 			int numSamples, 			int backPressureStatsRefreshInterval, 			Time delayBetweenSamples);1518090029;Creates a back pressure statistics tracker.__@param cleanUpInterval     Clean up interval for completed stats._@param numSamples          Number of stack trace samples when determining back pressure._@param delayBetweenSamples Delay between samples when determining back pressure.;public BackPressureStatsTracker(_			StackTraceSampleCoordinator coordinator,_			int cleanUpInterval,_			int numSamples,_			int backPressureStatsRefreshInterval,_			Time delayBetweenSamples) {__		this.coordinator = checkNotNull(coordinator, "Stack trace sample coordinator")___		checkArgument(cleanUpInterval >= 0, "Clean up interval")__		this.cleanUpInterval = cleanUpInterval___		checkArgument(numSamples >= 1, "Number of samples")__		this.numSamples = numSamples___		checkArgument(_			backPressureStatsRefreshInterval >= 0,_			"backPressureStatsRefreshInterval must be greater than or equal to 0")__		this.backPressureStatsRefreshInterval = backPressureStatsRefreshInterval___		this.delayBetweenSamples = checkNotNull(delayBetweenSamples, "Delay between samples")___		this.operatorStatsCache = CacheBuilder.newBuilder()_				.concurrencyLevel(1)_				.expireAfterAccess(cleanUpInterval, TimeUnit.MILLISECONDS)_				.build()__	};creates,a,back,pressure,statistics,tracker,param,clean,up,interval,clean,up,interval,for,completed,stats,param,num,samples,number,of,stack,trace,samples,when,determining,back,pressure,param,delay,between,samples,delay,between,samples,when,determining,back,pressure;public,back,pressure,stats,tracker,stack,trace,sample,coordinator,coordinator,int,clean,up,interval,int,num,samples,int,back,pressure,stats,refresh,interval,time,delay,between,samples,this,coordinator,check,not,null,coordinator,stack,trace,sample,coordinator,check,argument,clean,up,interval,0,clean,up,interval,this,clean,up,interval,clean,up,interval,check,argument,num,samples,1,number,of,samples,this,num,samples,num,samples,check,argument,back,pressure,stats,refresh,interval,0,back,pressure,stats,refresh,interval,must,be,greater,than,or,equal,to,0,this,back,pressure,stats,refresh,interval,back,pressure,stats,refresh,interval,this,delay,between,samples,check,not,null,delay,between,samples,delay,between,samples,this,operator,stats,cache,cache,builder,new,builder,concurrency,level,1,expire,after,access,clean,up,interval,time,unit,milliseconds,build
BackPressureStatsTracker -> public long getCleanUpInterval();1505860824;Cleanup interval for completed stats cache.;public long getCleanUpInterval() {_		return cleanUpInterval__	};cleanup,interval,for,completed,stats,cache;public,long,get,clean,up,interval,return,clean,up,interval
BackPressureStatsTracker -> public long getCleanUpInterval();1517920615;Cleanup interval for completed stats cache.;public long getCleanUpInterval() {_		return cleanUpInterval__	};cleanup,interval,for,completed,stats,cache;public,long,get,clean,up,interval,return,clean,up,interval
BackPressureStatsTracker -> public long getCleanUpInterval();1518090029;Cleanup interval for completed stats cache.;public long getCleanUpInterval() {_		return cleanUpInterval__	};cleanup,interval,for,completed,stats,cache;public,long,get,clean,up,interval,return,clean,up,interval
BackPressureStatsTracker -> public long getCleanUpInterval();1518090029;Cleanup interval for completed stats cache.;public long getCleanUpInterval() {_		return cleanUpInterval__	};cleanup,interval,for,completed,stats,cache;public,long,get,clean,up,interval,return,clean,up,interval
BackPressureStatsTracker -> Optional<OperatorBackPressureStats> getOperatorBackPressureStats(ExecutionJobVertex vertex)_;1518508250;Returns back pressure statistics for a operator. Automatically triggers stack trace sampling_if statistics are not available or outdated.__@param vertex Operator to get the stats for._@return Back pressure statistics for an operator;Optional<OperatorBackPressureStats> getOperatorBackPressureStats(ExecutionJobVertex vertex)_;returns,back,pressure,statistics,for,a,operator,automatically,triggers,stack,trace,sampling,if,statistics,are,not,available,or,outdated,param,vertex,operator,to,get,the,stats,for,return,back,pressure,statistics,for,an,operator;optional,operator,back,pressure,stats,get,operator,back,pressure,stats,execution,job,vertex,vertex
BackPressureStatsTracker -> Optional<OperatorBackPressureStats> getOperatorBackPressureStats(ExecutionJobVertex vertex)_;1518508251;Returns back pressure statistics for a operator. Automatically triggers stack trace sampling_if statistics are not available or outdated.__@param vertex Operator to get the stats for._@return Back pressure statistics for an operator;Optional<OperatorBackPressureStats> getOperatorBackPressureStats(ExecutionJobVertex vertex)_;returns,back,pressure,statistics,for,a,operator,automatically,triggers,stack,trace,sampling,if,statistics,are,not,available,or,outdated,param,vertex,operator,to,get,the,stats,for,return,back,pressure,statistics,for,an,operator;optional,operator,back,pressure,stats,get,operator,back,pressure,stats,execution,job,vertex,vertex
BackPressureStatsTracker -> public void shutDown();1505860824;Shuts down the stats tracker.__<p>Invalidates the cache and clears all pending stats.;public void shutDown() {_		synchronized (lock) {_			if (!shutDown) {_				operatorStatsCache.invalidateAll()__				pendingStats.clear()___				shutDown = true__			}_		}_	};shuts,down,the,stats,tracker,p,invalidates,the,cache,and,clears,all,pending,stats;public,void,shut,down,synchronized,lock,if,shut,down,operator,stats,cache,invalidate,all,pending,stats,clear,shut,down,true
BackPressureStatsTracker -> public void shutDown();1517920615;Shuts down the stats tracker.__<p>Invalidates the cache and clears all pending stats.;public void shutDown() {_		synchronized (lock) {_			if (!shutDown) {_				operatorStatsCache.invalidateAll()__				pendingStats.clear()___				shutDown = true__			}_		}_	};shuts,down,the,stats,tracker,p,invalidates,the,cache,and,clears,all,pending,stats;public,void,shut,down,synchronized,lock,if,shut,down,operator,stats,cache,invalidate,all,pending,stats,clear,shut,down,true
BackPressureStatsTracker -> public void shutDown();1518090029;Shuts down the stats tracker.__<p>Invalidates the cache and clears all pending stats.;public void shutDown() {_		synchronized (lock) {_			if (!shutDown) {_				operatorStatsCache.invalidateAll()__				pendingStats.clear()___				shutDown = true__			}_		}_	};shuts,down,the,stats,tracker,p,invalidates,the,cache,and,clears,all,pending,stats;public,void,shut,down,synchronized,lock,if,shut,down,operator,stats,cache,invalidate,all,pending,stats,clear,shut,down,true
BackPressureStatsTracker -> public void shutDown();1518090029;Shuts down the stats tracker.__<p>Invalidates the cache and clears all pending stats.;public void shutDown() {_		synchronized (lock) {_			if (!shutDown) {_				operatorStatsCache.invalidateAll()__				pendingStats.clear()___				shutDown = true__			}_		}_	};shuts,down,the,stats,tracker,p,invalidates,the,cache,and,clears,all,pending,stats;public,void,shut,down,synchronized,lock,if,shut,down,operator,stats,cache,invalidate,all,pending,stats,clear,shut,down,true
BackPressureStatsTracker -> void invalidateOperatorStatsCache();1505860824;Invalidates the cache (irrespective of clean up interval).;void invalidateOperatorStatsCache() {_		operatorStatsCache.invalidateAll()__	};invalidates,the,cache,irrespective,of,clean,up,interval;void,invalidate,operator,stats,cache,operator,stats,cache,invalidate,all
BackPressureStatsTracker -> void invalidateOperatorStatsCache();1517920615;Invalidates the cache (irrespective of clean up interval).;void invalidateOperatorStatsCache() {_		operatorStatsCache.invalidateAll()__	};invalidates,the,cache,irrespective,of,clean,up,interval;void,invalidate,operator,stats,cache,operator,stats,cache,invalidate,all
BackPressureStatsTracker -> void invalidateOperatorStatsCache();1518090029;Invalidates the cache (irrespective of clean up interval).;void invalidateOperatorStatsCache() {_		operatorStatsCache.invalidateAll()__	};invalidates,the,cache,irrespective,of,clean,up,interval;void,invalidate,operator,stats,cache,operator,stats,cache,invalidate,all
BackPressureStatsTracker -> void invalidateOperatorStatsCache();1518090029;Invalidates the cache (irrespective of clean up interval).;void invalidateOperatorStatsCache() {_		operatorStatsCache.invalidateAll()__	};invalidates,the,cache,irrespective,of,clean,up,interval;void,invalidate,operator,stats,cache,operator,stats,cache,invalidate,all
BackPressureStatsTracker -> @VisibleForTesting 	boolean triggerStackTraceSampleInternal(final ExecutionJobVertex vertex);1517920615;Triggers a stack trace sample for a operator to gather the back pressure_statistics. If there is a sample in progress for the operator, the call_is ignored.__@param vertex Operator to get the stats for._@return Flag indicating whether a sample with triggered.;@VisibleForTesting_	boolean triggerStackTraceSampleInternal(final ExecutionJobVertex vertex) {_		synchronized (lock) {_			if (shutDown) {_				return false__			}__			if (!pendingStats.contains(vertex) &&_				!vertex.getGraph().getState().isGloballyTerminalState()) {__				Executor executor = vertex.getGraph().getFutureExecutor()___				_				if (executor != null) {_					pendingStats.add(vertex)___					if (LOG.isDebugEnabled()) {_						LOG.debug("Triggering stack trace sample for tasks: " + Arrays.toString(vertex.getTaskVertices()))__					}__					CompletableFuture<StackTraceSample> sample = coordinator.triggerStackTraceSample(_						vertex.getTaskVertices(),_						numSamples,_						delayBetweenSamples,_						MAX_STACK_TRACE_DEPTH)___					sample.handleAsync(new StackTraceSampleCompletionCallback(vertex), executor)___					return true__				}_			}__			return false__		}_	};triggers,a,stack,trace,sample,for,a,operator,to,gather,the,back,pressure,statistics,if,there,is,a,sample,in,progress,for,the,operator,the,call,is,ignored,param,vertex,operator,to,get,the,stats,for,return,flag,indicating,whether,a,sample,with,triggered;visible,for,testing,boolean,trigger,stack,trace,sample,internal,final,execution,job,vertex,vertex,synchronized,lock,if,shut,down,return,false,if,pending,stats,contains,vertex,vertex,get,graph,get,state,is,globally,terminal,state,executor,executor,vertex,get,graph,get,future,executor,if,executor,null,pending,stats,add,vertex,if,log,is,debug,enabled,log,debug,triggering,stack,trace,sample,for,tasks,arrays,to,string,vertex,get,task,vertices,completable,future,stack,trace,sample,sample,coordinator,trigger,stack,trace,sample,vertex,get,task,vertices,num,samples,delay,between,samples,sample,handle,async,new,stack,trace,sample,completion,callback,vertex,executor,return,true,return,false
BackPressureStatsTracker -> @VisibleForTesting 	boolean triggerStackTraceSampleInternal(final ExecutionJobVertex vertex);1518090029;Triggers a stack trace sample for a operator to gather the back pressure_statistics. If there is a sample in progress for the operator, the call_is ignored.__@param vertex Operator to get the stats for._@return Flag indicating whether a sample with triggered.;@VisibleForTesting_	boolean triggerStackTraceSampleInternal(final ExecutionJobVertex vertex) {_		synchronized (lock) {_			if (shutDown) {_				return false__			}__			if (!pendingStats.contains(vertex) &&_				!vertex.getGraph().getState().isGloballyTerminalState()) {__				Executor executor = vertex.getGraph().getFutureExecutor()___				_				if (executor != null) {_					pendingStats.add(vertex)___					if (LOG.isDebugEnabled()) {_						LOG.debug("Triggering stack trace sample for tasks: " + Arrays.toString(vertex.getTaskVertices()))__					}__					CompletableFuture<StackTraceSample> sample = coordinator.triggerStackTraceSample(_						vertex.getTaskVertices(),_						numSamples,_						delayBetweenSamples,_						MAX_STACK_TRACE_DEPTH)___					sample.handleAsync(new StackTraceSampleCompletionCallback(vertex), executor)___					return true__				}_			}__			return false__		}_	};triggers,a,stack,trace,sample,for,a,operator,to,gather,the,back,pressure,statistics,if,there,is,a,sample,in,progress,for,the,operator,the,call,is,ignored,param,vertex,operator,to,get,the,stats,for,return,flag,indicating,whether,a,sample,with,triggered;visible,for,testing,boolean,trigger,stack,trace,sample,internal,final,execution,job,vertex,vertex,synchronized,lock,if,shut,down,return,false,if,pending,stats,contains,vertex,vertex,get,graph,get,state,is,globally,terminal,state,executor,executor,vertex,get,graph,get,future,executor,if,executor,null,pending,stats,add,vertex,if,log,is,debug,enabled,log,debug,triggering,stack,trace,sample,for,tasks,arrays,to,string,vertex,get,task,vertices,completable,future,stack,trace,sample,sample,coordinator,trigger,stack,trace,sample,vertex,get,task,vertices,num,samples,delay,between,samples,sample,handle,async,new,stack,trace,sample,completion,callback,vertex,executor,return,true,return,false
BackPressureStatsTracker -> public Optional<OperatorBackPressureStats> getOperatorBackPressureStats(ExecutionJobVertex vertex);1505860824;Returns back pressure statistics for a operator.__@param vertex Operator to get the stats for.__@return Back pressure statistics for an operator;public Optional<OperatorBackPressureStats> getOperatorBackPressureStats(ExecutionJobVertex vertex) {_		return Optional.ofNullable(operatorStatsCache.getIfPresent(vertex))__	};returns,back,pressure,statistics,for,a,operator,param,vertex,operator,to,get,the,stats,for,return,back,pressure,statistics,for,an,operator;public,optional,operator,back,pressure,stats,get,operator,back,pressure,stats,execution,job,vertex,vertex,return,optional,of,nullable,operator,stats,cache,get,if,present,vertex
BackPressureStatsTracker -> public Optional<OperatorBackPressureStats> getOperatorBackPressureStats(ExecutionJobVertex vertex);1517920615;Returns back pressure statistics for a operator. Automatically triggers stack trace sampling_if statistics are not available or outdated.__@param vertex Operator to get the stats for._@return Back pressure statistics for an operator;public Optional<OperatorBackPressureStats> getOperatorBackPressureStats(ExecutionJobVertex vertex) {_		final OperatorBackPressureStats stats = operatorStatsCache.getIfPresent(vertex)__		if (stats == null || backPressureStatsRefreshInterval <= System.currentTimeMillis() - stats.getEndTimestamp()) {_			triggerStackTraceSampleInternal(vertex)__		}_		return Optional.ofNullable(stats)__	};returns,back,pressure,statistics,for,a,operator,automatically,triggers,stack,trace,sampling,if,statistics,are,not,available,or,outdated,param,vertex,operator,to,get,the,stats,for,return,back,pressure,statistics,for,an,operator;public,optional,operator,back,pressure,stats,get,operator,back,pressure,stats,execution,job,vertex,vertex,final,operator,back,pressure,stats,stats,operator,stats,cache,get,if,present,vertex,if,stats,null,back,pressure,stats,refresh,interval,system,current,time,millis,stats,get,end,timestamp,trigger,stack,trace,sample,internal,vertex,return,optional,of,nullable,stats
BackPressureStatsTracker -> public Optional<OperatorBackPressureStats> getOperatorBackPressureStats(ExecutionJobVertex vertex);1518090029;Returns back pressure statistics for a operator. Automatically triggers stack trace sampling_if statistics are not available or outdated.__@param vertex Operator to get the stats for._@return Back pressure statistics for an operator;public Optional<OperatorBackPressureStats> getOperatorBackPressureStats(ExecutionJobVertex vertex) {_		synchronized (lock) {_			final OperatorBackPressureStats stats = operatorStatsCache.getIfPresent(vertex)__			if (stats == null || backPressureStatsRefreshInterval <= System.currentTimeMillis() - stats.getEndTimestamp()) {_				triggerStackTraceSampleInternal(vertex)__			}_			return Optional.ofNullable(stats)__		}_	};returns,back,pressure,statistics,for,a,operator,automatically,triggers,stack,trace,sampling,if,statistics,are,not,available,or,outdated,param,vertex,operator,to,get,the,stats,for,return,back,pressure,statistics,for,an,operator;public,optional,operator,back,pressure,stats,get,operator,back,pressure,stats,execution,job,vertex,vertex,synchronized,lock,final,operator,back,pressure,stats,stats,operator,stats,cache,get,if,present,vertex,if,stats,null,back,pressure,stats,refresh,interval,system,current,time,millis,stats,get,end,timestamp,trigger,stack,trace,sample,internal,vertex,return,optional,of,nullable,stats
BackPressureStatsTracker -> public Optional<OperatorBackPressureStats> getOperatorBackPressureStats(ExecutionJobVertex vertex);1518090029;Returns back pressure statistics for a operator. Automatically triggers stack trace sampling_if statistics are not available or outdated.__@param vertex Operator to get the stats for._@return Back pressure statistics for an operator;public Optional<OperatorBackPressureStats> getOperatorBackPressureStats(ExecutionJobVertex vertex) {_		synchronized (lock) {_			final OperatorBackPressureStats stats = operatorStatsCache.getIfPresent(vertex)__			if (stats == null || backPressureStatsRefreshInterval <= System.currentTimeMillis() - stats.getEndTimestamp()) {_				triggerStackTraceSampleInternal(vertex)__			}_			return Optional.ofNullable(stats)__		}_	};returns,back,pressure,statistics,for,a,operator,automatically,triggers,stack,trace,sampling,if,statistics,are,not,available,or,outdated,param,vertex,operator,to,get,the,stats,for,return,back,pressure,statistics,for,an,operator;public,optional,operator,back,pressure,stats,get,operator,back,pressure,stats,execution,job,vertex,vertex,synchronized,lock,final,operator,back,pressure,stats,stats,operator,stats,cache,get,if,present,vertex,if,stats,null,back,pressure,stats,refresh,interval,system,current,time,millis,stats,get,end,timestamp,trigger,stack,trace,sample,internal,vertex,return,optional,of,nullable,stats
BackPressureStatsTracker -> StackTraceSampleCompletionCallback -> private OperatorBackPressureStats createStatsFromSample(StackTraceSample sample);1505860824;Creates the back pressure stats from a stack trace sample.__@param sample Stack trace sample to base stats on.__@return Back pressure stats;private OperatorBackPressureStats createStatsFromSample(StackTraceSample sample) {_			Map<ExecutionAttemptID, List<StackTraceElement[]>> traces = sample.getStackTraces()___			_			_			Map<ExecutionAttemptID, Integer> subtaskIndexMap = Maps_					.newHashMapWithExpectedSize(traces.size())___			Set<ExecutionAttemptID> sampledTasks = sample.getStackTraces().keySet()___			for (ExecutionVertex task : vertex.getTaskVertices()) {_				ExecutionAttemptID taskId = task.getCurrentExecutionAttempt().getAttemptId()__				if (sampledTasks.contains(taskId)) {_					subtaskIndexMap.put(taskId, task.getParallelSubtaskIndex())__				} else {_					LOG.debug("Outdated sample. A task, which is part of the " +_							"sample has been reset.")__				}_			}__			_			_			double[] backPressureRatio = new double[traces.size()]___			for (Entry<ExecutionAttemptID, List<StackTraceElement[]>> entry : traces.entrySet()) {_				int backPressureSamples = 0___				List<StackTraceElement[]> taskTraces = entry.getValue()___				for (StackTraceElement[] trace : taskTraces) {_					for (int i = trace.length - 1_ i >= 0_ i--) {_						StackTraceElement elem = trace[i]___						if (elem.getClassName().equals(EXPECTED_CLASS_NAME) &&_								elem.getMethodName().equals(EXPECTED_METHOD_NAME)) {__							backPressureSamples++__							break_ _						}_					}_				}__				int subtaskIndex = subtaskIndexMap.get(entry.getKey())___				int size = taskTraces.size()__				double ratio = (size > 0)_						? ((double) backPressureSamples) / size_						: 0___				backPressureRatio[subtaskIndex] = ratio__			}__			return new OperatorBackPressureStats(_					sample.getSampleId(),_					sample.getEndTime(),_					backPressureRatio)__		};creates,the,back,pressure,stats,from,a,stack,trace,sample,param,sample,stack,trace,sample,to,base,stats,on,return,back,pressure,stats;private,operator,back,pressure,stats,create,stats,from,sample,stack,trace,sample,sample,map,execution,attempt,id,list,stack,trace,element,traces,sample,get,stack,traces,map,execution,attempt,id,integer,subtask,index,map,maps,new,hash,map,with,expected,size,traces,size,set,execution,attempt,id,sampled,tasks,sample,get,stack,traces,key,set,for,execution,vertex,task,vertex,get,task,vertices,execution,attempt,id,task,id,task,get,current,execution,attempt,get,attempt,id,if,sampled,tasks,contains,task,id,subtask,index,map,put,task,id,task,get,parallel,subtask,index,else,log,debug,outdated,sample,a,task,which,is,part,of,the,sample,has,been,reset,double,back,pressure,ratio,new,double,traces,size,for,entry,execution,attempt,id,list,stack,trace,element,entry,traces,entry,set,int,back,pressure,samples,0,list,stack,trace,element,task,traces,entry,get,value,for,stack,trace,element,trace,task,traces,for,int,i,trace,length,1,i,0,i,stack,trace,element,elem,trace,i,if,elem,get,class,name,equals,elem,get,method,name,equals,back,pressure,samples,break,int,subtask,index,subtask,index,map,get,entry,get,key,int,size,task,traces,size,double,ratio,size,0,double,back,pressure,samples,size,0,back,pressure,ratio,subtask,index,ratio,return,new,operator,back,pressure,stats,sample,get,sample,id,sample,get,end,time,back,pressure,ratio
BackPressureStatsTracker -> StackTraceSampleCompletionCallback -> private OperatorBackPressureStats createStatsFromSample(StackTraceSample sample);1517920615;Creates the back pressure stats from a stack trace sample.__@param sample Stack trace sample to base stats on.__@return Back pressure stats;private OperatorBackPressureStats createStatsFromSample(StackTraceSample sample) {_			Map<ExecutionAttemptID, List<StackTraceElement[]>> traces = sample.getStackTraces()___			_			_			Map<ExecutionAttemptID, Integer> subtaskIndexMap = Maps_					.newHashMapWithExpectedSize(traces.size())___			Set<ExecutionAttemptID> sampledTasks = sample.getStackTraces().keySet()___			for (ExecutionVertex task : vertex.getTaskVertices()) {_				ExecutionAttemptID taskId = task.getCurrentExecutionAttempt().getAttemptId()__				if (sampledTasks.contains(taskId)) {_					subtaskIndexMap.put(taskId, task.getParallelSubtaskIndex())__				} else {_					LOG.debug("Outdated sample. A task, which is part of the " +_							"sample has been reset.")__				}_			}__			_			_			double[] backPressureRatio = new double[traces.size()]___			for (Entry<ExecutionAttemptID, List<StackTraceElement[]>> entry : traces.entrySet()) {_				int backPressureSamples = 0___				List<StackTraceElement[]> taskTraces = entry.getValue()___				for (StackTraceElement[] trace : taskTraces) {_					for (int i = trace.length - 1_ i >= 0_ i--) {_						StackTraceElement elem = trace[i]___						if (elem.getClassName().equals(EXPECTED_CLASS_NAME) &&_								elem.getMethodName().equals(EXPECTED_METHOD_NAME)) {__							backPressureSamples++__							break_ _						}_					}_				}__				int subtaskIndex = subtaskIndexMap.get(entry.getKey())___				int size = taskTraces.size()__				double ratio = (size > 0)_						? ((double) backPressureSamples) / size_						: 0___				backPressureRatio[subtaskIndex] = ratio__			}__			return new OperatorBackPressureStats(_					sample.getSampleId(),_					sample.getEndTime(),_					backPressureRatio)__		};creates,the,back,pressure,stats,from,a,stack,trace,sample,param,sample,stack,trace,sample,to,base,stats,on,return,back,pressure,stats;private,operator,back,pressure,stats,create,stats,from,sample,stack,trace,sample,sample,map,execution,attempt,id,list,stack,trace,element,traces,sample,get,stack,traces,map,execution,attempt,id,integer,subtask,index,map,maps,new,hash,map,with,expected,size,traces,size,set,execution,attempt,id,sampled,tasks,sample,get,stack,traces,key,set,for,execution,vertex,task,vertex,get,task,vertices,execution,attempt,id,task,id,task,get,current,execution,attempt,get,attempt,id,if,sampled,tasks,contains,task,id,subtask,index,map,put,task,id,task,get,parallel,subtask,index,else,log,debug,outdated,sample,a,task,which,is,part,of,the,sample,has,been,reset,double,back,pressure,ratio,new,double,traces,size,for,entry,execution,attempt,id,list,stack,trace,element,entry,traces,entry,set,int,back,pressure,samples,0,list,stack,trace,element,task,traces,entry,get,value,for,stack,trace,element,trace,task,traces,for,int,i,trace,length,1,i,0,i,stack,trace,element,elem,trace,i,if,elem,get,class,name,equals,elem,get,method,name,equals,back,pressure,samples,break,int,subtask,index,subtask,index,map,get,entry,get,key,int,size,task,traces,size,double,ratio,size,0,double,back,pressure,samples,size,0,back,pressure,ratio,subtask,index,ratio,return,new,operator,back,pressure,stats,sample,get,sample,id,sample,get,end,time,back,pressure,ratio
BackPressureStatsTracker -> StackTraceSampleCompletionCallback -> private OperatorBackPressureStats createStatsFromSample(StackTraceSample sample);1518090029;Creates the back pressure stats from a stack trace sample.__@param sample Stack trace sample to base stats on.__@return Back pressure stats;private OperatorBackPressureStats createStatsFromSample(StackTraceSample sample) {_			Map<ExecutionAttemptID, List<StackTraceElement[]>> traces = sample.getStackTraces()___			_			_			Map<ExecutionAttemptID, Integer> subtaskIndexMap = Maps_					.newHashMapWithExpectedSize(traces.size())___			Set<ExecutionAttemptID> sampledTasks = sample.getStackTraces().keySet()___			for (ExecutionVertex task : vertex.getTaskVertices()) {_				ExecutionAttemptID taskId = task.getCurrentExecutionAttempt().getAttemptId()__				if (sampledTasks.contains(taskId)) {_					subtaskIndexMap.put(taskId, task.getParallelSubtaskIndex())__				} else {_					LOG.debug("Outdated sample. A task, which is part of the " +_							"sample has been reset.")__				}_			}__			_			_			double[] backPressureRatio = new double[traces.size()]___			for (Entry<ExecutionAttemptID, List<StackTraceElement[]>> entry : traces.entrySet()) {_				int backPressureSamples = 0___				List<StackTraceElement[]> taskTraces = entry.getValue()___				for (StackTraceElement[] trace : taskTraces) {_					for (int i = trace.length - 1_ i >= 0_ i--) {_						StackTraceElement elem = trace[i]___						if (elem.getClassName().equals(EXPECTED_CLASS_NAME) &&_								elem.getMethodName().equals(EXPECTED_METHOD_NAME)) {__							backPressureSamples++__							break_ _						}_					}_				}__				int subtaskIndex = subtaskIndexMap.get(entry.getKey())___				int size = taskTraces.size()__				double ratio = (size > 0)_						? ((double) backPressureSamples) / size_						: 0___				backPressureRatio[subtaskIndex] = ratio__			}__			return new OperatorBackPressureStats(_					sample.getSampleId(),_					sample.getEndTime(),_					backPressureRatio)__		};creates,the,back,pressure,stats,from,a,stack,trace,sample,param,sample,stack,trace,sample,to,base,stats,on,return,back,pressure,stats;private,operator,back,pressure,stats,create,stats,from,sample,stack,trace,sample,sample,map,execution,attempt,id,list,stack,trace,element,traces,sample,get,stack,traces,map,execution,attempt,id,integer,subtask,index,map,maps,new,hash,map,with,expected,size,traces,size,set,execution,attempt,id,sampled,tasks,sample,get,stack,traces,key,set,for,execution,vertex,task,vertex,get,task,vertices,execution,attempt,id,task,id,task,get,current,execution,attempt,get,attempt,id,if,sampled,tasks,contains,task,id,subtask,index,map,put,task,id,task,get,parallel,subtask,index,else,log,debug,outdated,sample,a,task,which,is,part,of,the,sample,has,been,reset,double,back,pressure,ratio,new,double,traces,size,for,entry,execution,attempt,id,list,stack,trace,element,entry,traces,entry,set,int,back,pressure,samples,0,list,stack,trace,element,task,traces,entry,get,value,for,stack,trace,element,trace,task,traces,for,int,i,trace,length,1,i,0,i,stack,trace,element,elem,trace,i,if,elem,get,class,name,equals,elem,get,method,name,equals,back,pressure,samples,break,int,subtask,index,subtask,index,map,get,entry,get,key,int,size,task,traces,size,double,ratio,size,0,double,back,pressure,samples,size,0,back,pressure,ratio,subtask,index,ratio,return,new,operator,back,pressure,stats,sample,get,sample,id,sample,get,end,time,back,pressure,ratio
BackPressureStatsTracker -> StackTraceSampleCompletionCallback -> private OperatorBackPressureStats createStatsFromSample(StackTraceSample sample);1518090029;Creates the back pressure stats from a stack trace sample.__@param sample Stack trace sample to base stats on.__@return Back pressure stats;private OperatorBackPressureStats createStatsFromSample(StackTraceSample sample) {_			Map<ExecutionAttemptID, List<StackTraceElement[]>> traces = sample.getStackTraces()___			_			_			Map<ExecutionAttemptID, Integer> subtaskIndexMap = Maps_					.newHashMapWithExpectedSize(traces.size())___			Set<ExecutionAttemptID> sampledTasks = sample.getStackTraces().keySet()___			for (ExecutionVertex task : vertex.getTaskVertices()) {_				ExecutionAttemptID taskId = task.getCurrentExecutionAttempt().getAttemptId()__				if (sampledTasks.contains(taskId)) {_					subtaskIndexMap.put(taskId, task.getParallelSubtaskIndex())__				} else {_					LOG.debug("Outdated sample. A task, which is part of the " +_							"sample has been reset.")__				}_			}__			_			_			double[] backPressureRatio = new double[traces.size()]___			for (Entry<ExecutionAttemptID, List<StackTraceElement[]>> entry : traces.entrySet()) {_				int backPressureSamples = 0___				List<StackTraceElement[]> taskTraces = entry.getValue()___				for (StackTraceElement[] trace : taskTraces) {_					for (int i = trace.length - 1_ i >= 0_ i--) {_						StackTraceElement elem = trace[i]___						if (elem.getClassName().equals(EXPECTED_CLASS_NAME) &&_								elem.getMethodName().equals(EXPECTED_METHOD_NAME)) {__							backPressureSamples++__							break_ _						}_					}_				}__				int subtaskIndex = subtaskIndexMap.get(entry.getKey())___				int size = taskTraces.size()__				double ratio = (size > 0)_						? ((double) backPressureSamples) / size_						: 0___				backPressureRatio[subtaskIndex] = ratio__			}__			return new OperatorBackPressureStats(_					sample.getSampleId(),_					sample.getEndTime(),_					backPressureRatio)__		};creates,the,back,pressure,stats,from,a,stack,trace,sample,param,sample,stack,trace,sample,to,base,stats,on,return,back,pressure,stats;private,operator,back,pressure,stats,create,stats,from,sample,stack,trace,sample,sample,map,execution,attempt,id,list,stack,trace,element,traces,sample,get,stack,traces,map,execution,attempt,id,integer,subtask,index,map,maps,new,hash,map,with,expected,size,traces,size,set,execution,attempt,id,sampled,tasks,sample,get,stack,traces,key,set,for,execution,vertex,task,vertex,get,task,vertices,execution,attempt,id,task,id,task,get,current,execution,attempt,get,attempt,id,if,sampled,tasks,contains,task,id,subtask,index,map,put,task,id,task,get,parallel,subtask,index,else,log,debug,outdated,sample,a,task,which,is,part,of,the,sample,has,been,reset,double,back,pressure,ratio,new,double,traces,size,for,entry,execution,attempt,id,list,stack,trace,element,entry,traces,entry,set,int,back,pressure,samples,0,list,stack,trace,element,task,traces,entry,get,value,for,stack,trace,element,trace,task,traces,for,int,i,trace,length,1,i,0,i,stack,trace,element,elem,trace,i,if,elem,get,class,name,equals,elem,get,method,name,equals,back,pressure,samples,break,int,subtask,index,subtask,index,map,get,entry,get,key,int,size,task,traces,size,double,ratio,size,0,double,back,pressure,samples,size,0,back,pressure,ratio,subtask,index,ratio,return,new,operator,back,pressure,stats,sample,get,sample,id,sample,get,end,time,back,pressure,ratio
BackPressureStatsTracker -> public void cleanUpOperatorStatsCache();1505860824;Cleans up the operator stats cache if it contains timed out entries.__<p>The Guava cache only evicts as maintenance during normal operations._If this handler is inactive, it will never be cleaned.;public void cleanUpOperatorStatsCache() {_		operatorStatsCache.cleanUp()__	};cleans,up,the,operator,stats,cache,if,it,contains,timed,out,entries,p,the,guava,cache,only,evicts,as,maintenance,during,normal,operations,if,this,handler,is,inactive,it,will,never,be,cleaned;public,void,clean,up,operator,stats,cache,operator,stats,cache,clean,up
BackPressureStatsTracker -> public void cleanUpOperatorStatsCache();1517920615;Cleans up the operator stats cache if it contains timed out entries.__<p>The Guava cache only evicts as maintenance during normal operations._If this handler is inactive, it will never be cleaned.;public void cleanUpOperatorStatsCache() {_		operatorStatsCache.cleanUp()__	};cleans,up,the,operator,stats,cache,if,it,contains,timed,out,entries,p,the,guava,cache,only,evicts,as,maintenance,during,normal,operations,if,this,handler,is,inactive,it,will,never,be,cleaned;public,void,clean,up,operator,stats,cache,operator,stats,cache,clean,up
BackPressureStatsTracker -> public void cleanUpOperatorStatsCache();1518090029;Cleans up the operator stats cache if it contains timed out entries.__<p>The Guava cache only evicts as maintenance during normal operations._If this handler is inactive, it will never be cleaned.;public void cleanUpOperatorStatsCache() {_		operatorStatsCache.cleanUp()__	};cleans,up,the,operator,stats,cache,if,it,contains,timed,out,entries,p,the,guava,cache,only,evicts,as,maintenance,during,normal,operations,if,this,handler,is,inactive,it,will,never,be,cleaned;public,void,clean,up,operator,stats,cache,operator,stats,cache,clean,up
BackPressureStatsTracker -> public void cleanUpOperatorStatsCache();1518090029;Cleans up the operator stats cache if it contains timed out entries.__<p>The Guava cache only evicts as maintenance during normal operations._If this handler is inactive, it will never be cleaned.;public void cleanUpOperatorStatsCache() {_		operatorStatsCache.cleanUp()__	};cleans,up,the,operator,stats,cache,if,it,contains,timed,out,entries,p,the,guava,cache,only,evicts,as,maintenance,during,normal,operations,if,this,handler,is,inactive,it,will,never,be,cleaned;public,void,clean,up,operator,stats,cache,operator,stats,cache,clean,up
