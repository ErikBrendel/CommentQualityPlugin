# id;timestamp;commentText;codeText;commentWords;codeWords
TaskManagerServices -> public void shutDown() throws FlinkException;1518433169;Shuts the {@link TaskExecutor} services down.;public void shutDown() throws FlinkException {__		Exception exception = null___		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			fileCache.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			taskSlotTable.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			jobLeaderService.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			throw new FlinkException("Could not properly shut down the TaskManager services.", exception)__		}_	};shuts,the,link,task,executor,services,down;public,void,shut,down,throws,flink,exception,exception,exception,null,try,memory,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,io,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,network,environment,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,file,cache,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,task,slot,table,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,job,leader,service,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,flink,exception,could,not,properly,shut,down,the,task,manager,services,exception
TaskManagerServices -> public void shutDown() throws FlinkException;1518680660;Shuts the {@link TaskExecutor} services down.;public void shutDown() throws FlinkException {__		Exception exception = null___		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			fileCache.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			taskSlotTable.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			jobLeaderService.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			throw new FlinkException("Could not properly shut down the TaskManager services.", exception)__		}_	};shuts,the,link,task,executor,services,down;public,void,shut,down,throws,flink,exception,exception,exception,null,try,memory,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,io,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,network,environment,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,file,cache,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,task,slot,table,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,job,leader,service,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,flink,exception,could,not,properly,shut,down,the,task,manager,services,exception
TaskManagerServices -> public void shutDown() throws FlinkException;1518785736;Shuts the {@link TaskExecutor} services down.;public void shutDown() throws FlinkException {__		Exception exception = null___		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			fileCache.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			taskSlotTable.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			jobLeaderService.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			throw new FlinkException("Could not properly shut down the TaskManager services.", exception)__		}_	};shuts,the,link,task,executor,services,down;public,void,shut,down,throws,flink,exception,exception,exception,null,try,memory,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,io,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,network,environment,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,file,cache,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,task,slot,table,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,job,leader,service,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,flink,exception,could,not,properly,shut,down,the,task,manager,services,exception
TaskManagerServices -> public void shutDown() throws FlinkException;1519568061;Shuts the {@link TaskExecutor} services down.;public void shutDown() throws FlinkException {__		Exception exception = null___		try {_			taskManagerStateStore.shutdown()__		} catch (Exception e) {_			exception = e__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			fileCache.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			taskSlotTable.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			jobLeaderService.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			throw new FlinkException("Could not properly shut down the TaskManager services.", exception)__		}_	};shuts,the,link,task,executor,services,down;public,void,shut,down,throws,flink,exception,exception,exception,null,try,task,manager,state,store,shutdown,catch,exception,e,exception,e,try,memory,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,io,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,network,environment,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,file,cache,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,task,slot,table,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,job,leader,service,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,flink,exception,could,not,properly,shut,down,the,task,manager,services,exception
TaskManagerServices -> public void shutDown() throws FlinkException;1525420604;Shuts the {@link TaskExecutor} services down.;public void shutDown() throws FlinkException {__		Exception exception = null___		try {_			taskManagerStateStore.shutdown()__		} catch (Exception e) {_			exception = e__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			taskSlotTable.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			jobLeaderService.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			throw new FlinkException("Could not properly shut down the TaskManager services.", exception)__		}_	};shuts,the,link,task,executor,services,down;public,void,shut,down,throws,flink,exception,exception,exception,null,try,task,manager,state,store,shutdown,catch,exception,e,exception,e,try,memory,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,io,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,network,environment,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,task,slot,table,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,job,leader,service,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,flink,exception,could,not,properly,shut,down,the,task,manager,services,exception
TaskManagerServices -> public void shutDown() throws FlinkException;1526313052;Shuts the {@link TaskExecutor} services down.;public void shutDown() throws FlinkException {__		Exception exception = null___		try {_			taskManagerStateStore.shutdown()__		} catch (Exception e) {_			exception = e__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			taskSlotTable.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			jobLeaderService.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			throw new FlinkException("Could not properly shut down the TaskManager services.", exception)__		}_	};shuts,the,link,task,executor,services,down;public,void,shut,down,throws,flink,exception,exception,exception,null,try,task,manager,state,store,shutdown,catch,exception,e,exception,e,try,memory,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,io,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,network,environment,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,task,slot,table,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,job,leader,service,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,flink,exception,could,not,properly,shut,down,the,task,manager,services,exception
TaskManagerServices -> public void shutDown() throws FlinkException;1530798894;Shuts the {@link TaskExecutor} services down.;public void shutDown() throws FlinkException {__		Exception exception = null___		try {_			taskManagerStateStore.shutdown()__		} catch (Exception e) {_			exception = e__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			taskSlotTable.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			jobLeaderService.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			throw new FlinkException("Could not properly shut down the TaskManager services.", exception)__		}_	};shuts,the,link,task,executor,services,down;public,void,shut,down,throws,flink,exception,exception,exception,null,try,task,manager,state,store,shutdown,catch,exception,e,exception,e,try,memory,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,io,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,network,environment,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,task,slot,table,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,job,leader,service,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,flink,exception,could,not,properly,shut,down,the,task,manager,services,exception
TaskManagerServices -> public void shutDown() throws FlinkException;1538127492;Shuts the {@link TaskExecutor} services down.;public void shutDown() throws FlinkException {__		Exception exception = null___		try {_			taskManagerStateStore.shutdown()__		} catch (Exception e) {_			exception = e__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			taskSlotTable.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			jobLeaderService.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			throw new FlinkException("Could not properly shut down the TaskManager services.", exception)__		}_	};shuts,the,link,task,executor,services,down;public,void,shut,down,throws,flink,exception,exception,exception,null,try,task,manager,state,store,shutdown,catch,exception,e,exception,e,try,memory,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,io,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,network,environment,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,task,slot,table,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,job,leader,service,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,flink,exception,could,not,properly,shut,down,the,task,manager,services,exception
TaskManagerServices -> public void shutDown() throws FlinkException;1547115122;Shuts the {@link TaskExecutor} services down.;public void shutDown() throws FlinkException {__		Exception exception = null___		try {_			taskManagerStateStore.shutdown()__		} catch (Exception e) {_			exception = e__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			taskSlotTable.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			jobLeaderService.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			throw new FlinkException("Could not properly shut down the TaskManager services.", exception)__		}_	};shuts,the,link,task,executor,services,down;public,void,shut,down,throws,flink,exception,exception,exception,null,try,task,manager,state,store,shutdown,catch,exception,e,exception,e,try,memory,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,io,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,network,environment,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,task,slot,table,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,job,leader,service,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,flink,exception,could,not,properly,shut,down,the,task,manager,services,exception
TaskManagerServices -> public void shutDown() throws FlinkException;1549360056;Shuts the {@link TaskExecutor} services down.;public void shutDown() throws FlinkException {__		Exception exception = null___		try {_			taskManagerStateStore.shutdown()__		} catch (Exception e) {_			exception = e__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			taskSlotTable.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		try {_			jobLeaderService.stop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			throw new FlinkException("Could not properly shut down the TaskManager services.", exception)__		}_	};shuts,the,link,task,executor,services,down;public,void,shut,down,throws,flink,exception,exception,exception,null,try,task,manager,state,store,shutdown,catch,exception,e,exception,e,try,memory,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,io,manager,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,network,environment,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,task,slot,table,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,try,job,leader,service,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,throw,new,flink,exception,could,not,properly,shut,down,the,task,manager,services,exception
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID, 			Executor taskIOExecutor, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1519568061;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@param taskIOExecutor executor for async IO operations._@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID,_			Executor taskIOExecutor,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration, maxJvmHeapMemory)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration, freeHeapMemoryWithDefrag, maxJvmHeapMemory)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)___		LocalRecoveryConfig.LocalRecoveryMode localRecoveryMode = taskManagerServicesConfiguration.getLocalRecoveryMode()___		final String[] stateRootDirectoryStrings = taskManagerServicesConfiguration.getLocalRecoveryStateRootDirectories()___		final File[] stateRootDirectoryFiles = new File[stateRootDirectoryStrings.length]___		for (int i = 0_ i < stateRootDirectoryStrings.length_ ++i) {_			stateRootDirectoryFiles[i] = new File(stateRootDirectoryStrings[i], LOCAL_STATE_SUB_DIRECTORY_ROOT)__		}__		final TaskExecutorLocalStateStoresManager taskStateManager =_			new TaskExecutorLocalStateStoresManager(localRecoveryMode, stateRootDirectoryFiles, taskIOExecutor)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService,_			taskStateManager)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,param,task,ioexecutor,executor,for,async,io,operations,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,executor,task,ioexecutor,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,max,jvm,heap,memory,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,free,heap,memory,with,defrag,max,jvm,heap,memory,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,local,recovery,config,local,recovery,mode,local,recovery,mode,task,manager,services,configuration,get,local,recovery,mode,final,string,state,root,directory,strings,task,manager,services,configuration,get,local,recovery,state,root,directories,final,file,state,root,directory,files,new,file,state,root,directory,strings,length,for,int,i,0,i,state,root,directory,strings,length,i,state,root,directory,files,i,new,file,state,root,directory,strings,i,final,task,executor,local,state,stores,manager,task,state,manager,new,task,executor,local,state,stores,manager,local,recovery,mode,state,root,directory,files,task,ioexecutor,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service,task,state,manager
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID, 			Executor taskIOExecutor, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1525420604;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@param taskIOExecutor executor for async IO operations._@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID,_			Executor taskIOExecutor,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration, maxJvmHeapMemory)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration, freeHeapMemoryWithDefrag, maxJvmHeapMemory)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)___		LocalRecoveryConfig.LocalRecoveryMode localRecoveryMode = taskManagerServicesConfiguration.getLocalRecoveryMode()___		final String[] stateRootDirectoryStrings = taskManagerServicesConfiguration.getLocalRecoveryStateRootDirectories()___		final File[] stateRootDirectoryFiles = new File[stateRootDirectoryStrings.length]___		for (int i = 0_ i < stateRootDirectoryStrings.length_ ++i) {_			stateRootDirectoryFiles[i] = new File(stateRootDirectoryStrings[i], LOCAL_STATE_SUB_DIRECTORY_ROOT)__		}__		final TaskExecutorLocalStateStoresManager taskStateManager =_			new TaskExecutorLocalStateStoresManager(localRecoveryMode, stateRootDirectoryFiles, taskIOExecutor)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			broadcastVariableManager,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService,_			taskStateManager)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,param,task,ioexecutor,executor,for,async,io,operations,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,executor,task,ioexecutor,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,max,jvm,heap,memory,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,free,heap,memory,with,defrag,max,jvm,heap,memory,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,local,recovery,config,local,recovery,mode,local,recovery,mode,task,manager,services,configuration,get,local,recovery,mode,final,string,state,root,directory,strings,task,manager,services,configuration,get,local,recovery,state,root,directories,final,file,state,root,directory,files,new,file,state,root,directory,strings,length,for,int,i,0,i,state,root,directory,strings,length,i,state,root,directory,files,i,new,file,state,root,directory,strings,i,final,task,executor,local,state,stores,manager,task,state,manager,new,task,executor,local,state,stores,manager,local,recovery,mode,state,root,directory,files,task,ioexecutor,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,broadcast,variable,manager,task,slot,table,job,manager,table,job,leader,service,task,state,manager
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID, 			Executor taskIOExecutor, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1526313052;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@param taskIOExecutor executor for async IO operations._@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID,_			Executor taskIOExecutor,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration, maxJvmHeapMemory)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration, freeHeapMemoryWithDefrag, maxJvmHeapMemory)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)____		final String[] stateRootDirectoryStrings = taskManagerServicesConfiguration.getLocalRecoveryStateRootDirectories()___		final File[] stateRootDirectoryFiles = new File[stateRootDirectoryStrings.length]___		for (int i = 0_ i < stateRootDirectoryStrings.length_ ++i) {_			stateRootDirectoryFiles[i] = new File(stateRootDirectoryStrings[i], LOCAL_STATE_SUB_DIRECTORY_ROOT)__		}__		final TaskExecutorLocalStateStoresManager taskStateManager = new TaskExecutorLocalStateStoresManager(_			taskManagerServicesConfiguration.isLocalRecoveryEnabled(),_			stateRootDirectoryFiles,_			taskIOExecutor)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			broadcastVariableManager,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService,_			taskStateManager)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,param,task,ioexecutor,executor,for,async,io,operations,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,executor,task,ioexecutor,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,max,jvm,heap,memory,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,free,heap,memory,with,defrag,max,jvm,heap,memory,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,final,string,state,root,directory,strings,task,manager,services,configuration,get,local,recovery,state,root,directories,final,file,state,root,directory,files,new,file,state,root,directory,strings,length,for,int,i,0,i,state,root,directory,strings,length,i,state,root,directory,files,i,new,file,state,root,directory,strings,i,final,task,executor,local,state,stores,manager,task,state,manager,new,task,executor,local,state,stores,manager,task,manager,services,configuration,is,local,recovery,enabled,state,root,directory,files,task,ioexecutor,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,broadcast,variable,manager,task,slot,table,job,manager,table,job,leader,service,task,state,manager
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID, 			Executor taskIOExecutor, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1530798894;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@param taskIOExecutor executor for async IO operations._@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID,_			Executor taskIOExecutor,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration, maxJvmHeapMemory)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration, freeHeapMemoryWithDefrag, maxJvmHeapMemory)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)____		final String[] stateRootDirectoryStrings = taskManagerServicesConfiguration.getLocalRecoveryStateRootDirectories()___		final File[] stateRootDirectoryFiles = new File[stateRootDirectoryStrings.length]___		for (int i = 0_ i < stateRootDirectoryStrings.length_ ++i) {_			stateRootDirectoryFiles[i] = new File(stateRootDirectoryStrings[i], LOCAL_STATE_SUB_DIRECTORY_ROOT)__		}__		final TaskExecutorLocalStateStoresManager taskStateManager = new TaskExecutorLocalStateStoresManager(_			taskManagerServicesConfiguration.isLocalRecoveryEnabled(),_			stateRootDirectoryFiles,_			taskIOExecutor)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			broadcastVariableManager,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService,_			taskStateManager)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,param,task,ioexecutor,executor,for,async,io,operations,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,executor,task,ioexecutor,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,max,jvm,heap,memory,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,free,heap,memory,with,defrag,max,jvm,heap,memory,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,final,string,state,root,directory,strings,task,manager,services,configuration,get,local,recovery,state,root,directories,final,file,state,root,directory,files,new,file,state,root,directory,strings,length,for,int,i,0,i,state,root,directory,strings,length,i,state,root,directory,files,i,new,file,state,root,directory,strings,i,final,task,executor,local,state,stores,manager,task,state,manager,new,task,executor,local,state,stores,manager,task,manager,services,configuration,is,local,recovery,enabled,state,root,directory,files,task,ioexecutor,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,broadcast,variable,manager,task,slot,table,job,manager,table,job,leader,service,task,state,manager
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID, 			Executor taskIOExecutor, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1538127492;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@param taskIOExecutor executor for async IO operations._@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID,_			Executor taskIOExecutor,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration, maxJvmHeapMemory)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration, freeHeapMemoryWithDefrag, maxJvmHeapMemory)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(ResourceProfile.ANY)__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)___		final String[] stateRootDirectoryStrings = taskManagerServicesConfiguration.getLocalRecoveryStateRootDirectories()___		final File[] stateRootDirectoryFiles = new File[stateRootDirectoryStrings.length]___		for (int i = 0_ i < stateRootDirectoryStrings.length_ ++i) {_			stateRootDirectoryFiles[i] = new File(stateRootDirectoryStrings[i], LOCAL_STATE_SUB_DIRECTORY_ROOT)__		}__		final TaskExecutorLocalStateStoresManager taskStateManager = new TaskExecutorLocalStateStoresManager(_			taskManagerServicesConfiguration.isLocalRecoveryEnabled(),_			stateRootDirectoryFiles,_			taskIOExecutor)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			broadcastVariableManager,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService,_			taskStateManager)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,param,task,ioexecutor,executor,for,async,io,operations,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,executor,task,ioexecutor,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,max,jvm,heap,memory,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,free,heap,memory,with,defrag,max,jvm,heap,memory,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,resource,profile,any,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,final,string,state,root,directory,strings,task,manager,services,configuration,get,local,recovery,state,root,directories,final,file,state,root,directory,files,new,file,state,root,directory,strings,length,for,int,i,0,i,state,root,directory,strings,length,i,state,root,directory,files,i,new,file,state,root,directory,strings,i,final,task,executor,local,state,stores,manager,task,state,manager,new,task,executor,local,state,stores,manager,task,manager,services,configuration,is,local,recovery,enabled,state,root,directory,files,task,ioexecutor,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,broadcast,variable,manager,task,slot,table,job,manager,table,job,leader,service,task,state,manager
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID, 			Executor taskIOExecutor, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1547115122;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@param taskIOExecutor executor for async IO operations._@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID,_			Executor taskIOExecutor,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration, maxJvmHeapMemory)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration, freeHeapMemoryWithDefrag, maxJvmHeapMemory)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(ResourceProfile.ANY)__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)___		final String[] stateRootDirectoryStrings = taskManagerServicesConfiguration.getLocalRecoveryStateRootDirectories()___		final File[] stateRootDirectoryFiles = new File[stateRootDirectoryStrings.length]___		for (int i = 0_ i < stateRootDirectoryStrings.length_ ++i) {_			stateRootDirectoryFiles[i] = new File(stateRootDirectoryStrings[i], LOCAL_STATE_SUB_DIRECTORY_ROOT)__		}__		final TaskExecutorLocalStateStoresManager taskStateManager = new TaskExecutorLocalStateStoresManager(_			taskManagerServicesConfiguration.isLocalRecoveryEnabled(),_			stateRootDirectoryFiles,_			taskIOExecutor)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			broadcastVariableManager,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService,_			taskStateManager)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,param,task,ioexecutor,executor,for,async,io,operations,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,executor,task,ioexecutor,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,max,jvm,heap,memory,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,free,heap,memory,with,defrag,max,jvm,heap,memory,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,resource,profile,any,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,final,string,state,root,directory,strings,task,manager,services,configuration,get,local,recovery,state,root,directories,final,file,state,root,directory,files,new,file,state,root,directory,strings,length,for,int,i,0,i,state,root,directory,strings,length,i,state,root,directory,files,i,new,file,state,root,directory,strings,i,final,task,executor,local,state,stores,manager,task,state,manager,new,task,executor,local,state,stores,manager,task,manager,services,configuration,is,local,recovery,enabled,state,root,directory,files,task,ioexecutor,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,broadcast,variable,manager,task,slot,table,job,manager,table,job,leader,service,task,state,manager
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID, 			Executor taskIOExecutor, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1549360056;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@param taskIOExecutor executor for async IO operations._@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID,_			Executor taskIOExecutor,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration, maxJvmHeapMemory)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration, freeHeapMemoryWithDefrag, maxJvmHeapMemory)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(ResourceProfile.ANY)__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation, taskManagerServicesConfiguration.getRetryingRegistrationConfiguration())___		final String[] stateRootDirectoryStrings = taskManagerServicesConfiguration.getLocalRecoveryStateRootDirectories()___		final File[] stateRootDirectoryFiles = new File[stateRootDirectoryStrings.length]___		for (int i = 0_ i < stateRootDirectoryStrings.length_ ++i) {_			stateRootDirectoryFiles[i] = new File(stateRootDirectoryStrings[i], LOCAL_STATE_SUB_DIRECTORY_ROOT)__		}__		final TaskExecutorLocalStateStoresManager taskStateManager = new TaskExecutorLocalStateStoresManager(_			taskManagerServicesConfiguration.isLocalRecoveryEnabled(),_			stateRootDirectoryFiles,_			taskIOExecutor)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			broadcastVariableManager,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService,_			taskStateManager)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,param,task,ioexecutor,executor,for,async,io,operations,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,executor,task,ioexecutor,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,max,jvm,heap,memory,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,free,heap,memory,with,defrag,max,jvm,heap,memory,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,resource,profile,any,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,task,manager,services,configuration,get,retrying,registration,configuration,final,string,state,root,directory,strings,task,manager,services,configuration,get,local,recovery,state,root,directories,final,file,state,root,directory,files,new,file,state,root,directory,strings,length,for,int,i,0,i,state,root,directory,strings,length,i,state,root,directory,files,i,new,file,state,root,directory,strings,i,final,task,executor,local,state,stores,manager,task,state,manager,new,task,executor,local,state,stores,manager,task,manager,services,configuration,is,local,recovery,enabled,state,root,directory,files,task,ioexecutor,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,broadcast,variable,manager,task,slot,table,job,manager,table,job,leader,service,task,state,manager
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1494092429;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		final long totalJavaMemorySize = totalJavaMemorySizeMB << 20_ __		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			_			final long networkBufMB = calculateNetworkBufferMemory(totalJavaMemorySize, config) >> 20_ _			final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = totalJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,total,java,memory,size,total,java,memory,size,mb,20,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,total,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1494092513;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		final long totalJavaMemorySize = totalJavaMemorySizeMB << 20_ __		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			_			final long networkBufMB = calculateNetworkBufferMemory(totalJavaMemorySize, config) >> 20_ _			final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = totalJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,total,java,memory,size,total,java,memory,size,mb,20,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,total,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1498220069;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		final long totalJavaMemorySize = totalJavaMemorySizeMB << 20_ __		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			_			final long networkBufMB = calculateNetworkBufferMemory(totalJavaMemorySize, config) >> 20_ _			final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = totalJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,total,java,memory,size,total,java,memory,size,mb,20,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,total,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1507728810;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		final long totalJavaMemorySize = totalJavaMemorySizeMB << 20_ __		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			_			final long networkBufMB = calculateNetworkBufferMemory(totalJavaMemorySize, config) >> 20_ _			final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = totalJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,total,java,memory,size,total,java,memory,size,mb,20,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,total,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1507728812;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		final long totalJavaMemorySize = totalJavaMemorySizeMB << 20_ __		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			_			final long networkBufMB = calculateNetworkBufferMemory(totalJavaMemorySize, config) >> 20_ _			final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = totalJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,total,java,memory,size,total,java,memory,size,mb,20,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,total,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1508308828;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		final long totalJavaMemorySize = totalJavaMemorySizeMB << 20_ __		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			_			final long networkBufMB = calculateNetworkBufferMemory(totalJavaMemorySize, config) >> 20_ _			final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = totalJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,total,java,memory,size,total,java,memory,size,mb,20,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,total,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1508308828;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		final long totalJavaMemorySize = totalJavaMemorySizeMB << 20_ __		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			_			final long networkBufMB = calculateNetworkBufferMemory(totalJavaMemorySize, config) >> 20_ _			final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = totalJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,total,java,memory,size,total,java,memory,size,mb,20,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,total,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1509037054;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		final long totalJavaMemorySize = totalJavaMemorySizeMB << 20_ __		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			_			final long networkBufMB = calculateNetworkBufferMemory(totalJavaMemorySize, config) >> 20_ _			final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = totalJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,total,java,memory,size,total,java,memory,size,mb,20,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,total,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1509547920;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		final long totalJavaMemorySize = totalJavaMemorySizeMB << 20_ __		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			_			final long networkBufMB = calculateNetworkBufferMemory(totalJavaMemorySize, config) >> 20_ _			final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = totalJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,total,java,memory,size,total,java,memory,size,mb,20,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,total,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1509547921;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		final long totalJavaMemorySize = totalJavaMemorySizeMB << 20_ __		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			_			final long networkBufMB = calculateNetworkBufferMemory(totalJavaMemorySize, config) >> 20_ _			final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = totalJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,total,java,memory,size,total,java,memory,size,mb,20,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,total,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1510060074;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		final long totalJavaMemorySize = totalJavaMemorySizeMB << 20_ __		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			_			final long networkBufMB = calculateNetworkBufferMemory(totalJavaMemorySize, config) >> 20_ _			final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = totalJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,total,java,memory,size,total,java,memory,size,mb,20,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,total,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1511516912;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		_		final long networkBufMB =_			calculateNetworkBufferMemory(_				totalJavaMemorySizeMB << 20, _				config) >> 20_ _		final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = remainingJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,mb,20,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,remaining,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1516626397;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		_		final long networkBufMB =_			calculateNetworkBufferMemory(_				totalJavaMemorySizeMB << 20, _				config) >> 20_ _		final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = remainingJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,mb,20,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,remaining,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1518433169;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		_		final long networkBufMB =_			calculateNetworkBufferMemory(_				totalJavaMemorySizeMB << 20, _				config) >> 20_ _		final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = remainingJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,mb,20,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,remaining,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1518680660;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		_		final long networkBufMB =_			calculateNetworkBufferMemory(_				totalJavaMemorySizeMB << 20, _				config) >> 20_ _		final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = remainingJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,mb,20,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,remaining,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1518785736;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		_		final long networkBufMB =_			calculateNetworkBufferMemory(_				totalJavaMemorySizeMB << 20, _				config) >> 20_ _		final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = remainingJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,mb,20,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,remaining,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1519568061;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		_		final long networkBufMB =_			calculateNetworkBufferMemory(_				totalJavaMemorySizeMB << 20, _				config) >> 20_ _		final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = remainingJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,mb,20,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,remaining,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1525420604;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		_		final long networkBufMB =_			calculateNetworkBufferMemory(_				totalJavaMemorySizeMB << 20, _				config) >> 20_ _		final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = remainingJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,mb,20,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,remaining,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1526313052;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		_		final long networkBufMB =_			calculateNetworkBufferMemory(_				totalJavaMemorySizeMB << 20, _				config) >> 20_ _		final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			long offHeapSize = config.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)___			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = remainingJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,mb,20,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,config,get,long,task,manager,options,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,remaining,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1530798894;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		_		final long networkBufMB =_			calculateNetworkBufferMemory(_				totalJavaMemorySizeMB << 20, _				config) >> 20_ _		final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			long offHeapSize__			String managedMemorySizeDefaultVal = TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()__			if (!config.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE).equals(managedMemorySizeDefaultVal)) {_				try {_					offHeapSize = MemorySize.parse(config.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE), MEGA_BYTES).getMebiBytes()__				} catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException(_						"Could not read " + TaskManagerOptions.MANAGED_MEMORY_SIZE.key(), e)__				}_			} else {_				offHeapSize = Long.valueOf(managedMemorySizeDefaultVal)__			}__			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = remainingJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,mb,20,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,string,managed,memory,size,default,val,task,manager,options,default,value,if,config,get,string,task,manager,options,equals,managed,memory,size,default,val,try,off,heap,size,memory,size,parse,config,get,string,task,manager,options,get,mebi,bytes,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,could,not,read,task,manager,options,key,e,else,off,heap,size,long,value,of,managed,memory,size,default,val,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,remaining,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1538127492;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		_		final long networkBufMB =_			calculateNetworkBufferMemory(_				totalJavaMemorySizeMB << 20, _				config) >> 20_ _		final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			long offHeapSize__			String managedMemorySizeDefaultVal = TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()__			if (!config.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE).equals(managedMemorySizeDefaultVal)) {_				try {_					offHeapSize = MemorySize.parse(config.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE), MEGA_BYTES).getMebiBytes()__				} catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException(_						"Could not read " + TaskManagerOptions.MANAGED_MEMORY_SIZE.key(), e)__				}_			} else {_				offHeapSize = Long.valueOf(managedMemorySizeDefaultVal)__			}__			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = remainingJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,mb,20,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,string,managed,memory,size,default,val,task,manager,options,default,value,if,config,get,string,task,manager,options,equals,managed,memory,size,default,val,try,off,heap,size,memory,size,parse,config,get,string,task,manager,options,get,mebi,bytes,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,could,not,read,task,manager,options,key,e,else,off,heap,size,long,value,of,managed,memory,size,default,val,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,remaining,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1547115122;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		_		final long networkBufMB =_			calculateNetworkBufferMemory(_				totalJavaMemorySizeMB << 20, _				config) >> 20_ _		final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			long offHeapSize__			String managedMemorySizeDefaultVal = TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()__			if (!config.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE).equals(managedMemorySizeDefaultVal)) {_				try {_					offHeapSize = MemorySize.parse(config.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE), MEGA_BYTES).getMebiBytes()__				} catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException(_						"Could not read " + TaskManagerOptions.MANAGED_MEMORY_SIZE.key(), e)__				}_			} else {_				offHeapSize = Long.valueOf(managedMemorySizeDefaultVal)__			}__			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = remainingJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,mb,20,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,string,managed,memory,size,default,val,task,manager,options,default,value,if,config,get,string,task,manager,options,equals,managed,memory,size,default,val,try,off,heap,size,memory,size,parse,config,get,string,task,manager,options,get,mebi,bytes,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,could,not,read,task,manager,options,key,e,else,off,heap,size,long,value,of,managed,memory,size,default,val,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,remaining,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config);1549360056;Calculates the amount of heap memory to use (to set via <tt>-Xmx</tt> and <tt>-Xms</tt>)_based on the total memory to use and the given configuration parameters.__@param totalJavaMemorySizeMB_overall available memory to use (heap and off-heap)_@param config_configuration object__@return heap memory to use (in megabytes);public static long calculateHeapSizeMB(long totalJavaMemorySizeMB, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySizeMB > 0)___		_		final long networkBufMB =_			calculateNetworkBufferMemory(_				totalJavaMemorySizeMB << 20, _				config) >> 20_ _		final long remainingJavaMemorySizeMB = totalJavaMemorySizeMB - networkBufMB___		__		final boolean useOffHeap = config.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)___		final long heapSizeMB__		if (useOffHeap) {__			long offHeapSize__			String managedMemorySizeDefaultVal = TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()__			if (!config.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE).equals(managedMemorySizeDefaultVal)) {_				try {_					offHeapSize = MemorySize.parse(config.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE), MEGA_BYTES).getMebiBytes()__				} catch (IllegalArgumentException e) {_					throw new IllegalConfigurationException(_						"Could not read " + TaskManagerOptions.MANAGED_MEMORY_SIZE.key(), e)__				}_			} else {_				offHeapSize = Long.valueOf(managedMemorySizeDefaultVal)__			}__			if (offHeapSize <= 0) {_				_				double fraction = config.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__				offHeapSize = (long) (fraction * remainingJavaMemorySizeMB)__			}__			TaskManagerServicesConfiguration_				.checkConfigParameter(offHeapSize < remainingJavaMemorySizeMB, offHeapSize,_					TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_					"Managed memory size too large for " + networkBufMB +_						" MB network buffer memory and a total of " + totalJavaMemorySizeMB +_						" MB JVM memory")___			heapSizeMB = remainingJavaMemorySizeMB - offHeapSize__		} else {_			heapSizeMB = remainingJavaMemorySizeMB__		}__		return heapSizeMB__	};calculates,the,amount,of,heap,memory,to,use,to,set,via,tt,xmx,tt,and,tt,xms,tt,based,on,the,total,memory,to,use,and,the,given,configuration,parameters,param,total,java,memory,size,mb,overall,available,memory,to,use,heap,and,off,heap,param,config,configuration,object,return,heap,memory,to,use,in,megabytes;public,static,long,calculate,heap,size,mb,long,total,java,memory,size,mb,configuration,config,preconditions,check,argument,total,java,memory,size,mb,0,final,long,network,buf,mb,calculate,network,buffer,memory,total,java,memory,size,mb,20,config,20,final,long,remaining,java,memory,size,mb,total,java,memory,size,mb,network,buf,mb,final,boolean,use,off,heap,config,get,boolean,task,manager,options,final,long,heap,size,mb,if,use,off,heap,long,off,heap,size,string,managed,memory,size,default,val,task,manager,options,default,value,if,config,get,string,task,manager,options,equals,managed,memory,size,default,val,try,off,heap,size,memory,size,parse,config,get,string,task,manager,options,get,mebi,bytes,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,could,not,read,task,manager,options,key,e,else,off,heap,size,long,value,of,managed,memory,size,default,val,if,off,heap,size,0,double,fraction,config,get,float,task,manager,options,off,heap,size,long,fraction,remaining,java,memory,size,mb,task,manager,services,configuration,check,config,parameter,off,heap,size,remaining,java,memory,size,mb,off,heap,size,task,manager,options,key,managed,memory,size,too,large,for,network,buf,mb,mb,network,buffer,memory,and,a,total,of,total,java,memory,size,mb,mb,jvm,memory,heap,size,mb,remaining,java,memory,size,mb,off,heap,size,else,heap,size,mb,remaining,java,memory,size,mb,return,heap,size,mb
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long maxJvmHeapMemory);1518680660;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@param maxJvmHeapMemory the maximum JVM heap size_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long maxJvmHeapMemory) {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration, maxJvmHeapMemory)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize)___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___		int numProxyServerNetworkThreads = qsConfig.numProxyServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyServerThreads()___		int numProxyServerQueryThreads = qsConfig.numProxyQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyQueryThreads()___		final KvStateClientProxy kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getProxyPortRange(),_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				new DisabledKvStateRequestStats())___		int numStateServerNetworkThreads = qsConfig.numStateServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateServerThreads()___		int numStateServerQueryThreads = qsConfig.numStateQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateQueryThreads()___		final KvStateServer kvStateServer = QueryableStateUtils.createKvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getStateServerPortRange(),_				numStateServerNetworkThreads,_				numStateServerQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())___		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,long,max,jvm,heap,memory,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,max,jvm,heap,memory,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,proxy,server,network,threads,qs,config,num,proxy,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,server,threads,int,num,proxy,server,query,threads,qs,config,num,proxy,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,query,threads,final,kv,state,client,proxy,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,proxy,server,network,threads,num,proxy,server,query,threads,new,disabled,kv,state,request,stats,int,num,state,server,network,threads,qs,config,num,state,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,server,threads,int,num,state,server,query,threads,qs,config,num,state,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,query,threads,final,kv,state,server,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,state,server,network,threads,num,state,server,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long maxJvmHeapMemory);1518785736;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@param maxJvmHeapMemory the maximum JVM heap size_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long maxJvmHeapMemory) {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration, maxJvmHeapMemory)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize)___		ConnectionManager connectionManager__		boolean enableCreditBased = false__		NettyConfig nettyConfig = networkEnvironmentConfiguration.nettyConfig()__		if (nettyConfig != null) {_			connectionManager = new NettyConnectionManager(nettyConfig)__			enableCreditBased = nettyConfig.isCreditBasedEnabled()__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___		int numProxyServerNetworkThreads = qsConfig.numProxyServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyServerThreads()___		int numProxyServerQueryThreads = qsConfig.numProxyQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyQueryThreads()___		final KvStateClientProxy kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getProxyPortRange(),_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				new DisabledKvStateRequestStats())___		int numStateServerNetworkThreads = qsConfig.numStateServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateServerThreads()___		int numStateServerQueryThreads = qsConfig.numStateQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateQueryThreads()___		final KvStateServer kvStateServer = QueryableStateUtils.createKvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getStateServerPortRange(),_				numStateServerNetworkThreads,_				numStateServerQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())___		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate(),_			enableCreditBased)__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,long,max,jvm,heap,memory,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,max,jvm,heap,memory,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,connection,manager,connection,manager,boolean,enable,credit,based,false,netty,config,netty,config,network,environment,configuration,netty,config,if,netty,config,null,connection,manager,new,netty,connection,manager,netty,config,enable,credit,based,netty,config,is,credit,based,enabled,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,proxy,server,network,threads,qs,config,num,proxy,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,server,threads,int,num,proxy,server,query,threads,qs,config,num,proxy,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,query,threads,final,kv,state,client,proxy,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,proxy,server,network,threads,num,proxy,server,query,threads,new,disabled,kv,state,request,stats,int,num,state,server,network,threads,qs,config,num,state,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,server,threads,int,num,state,server,query,threads,qs,config,num,state,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,query,threads,final,kv,state,server,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,state,server,network,threads,num,state,server,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate,enable,credit,based
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long maxJvmHeapMemory);1519568061;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@param maxJvmHeapMemory the maximum JVM heap size_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long maxJvmHeapMemory) {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration, maxJvmHeapMemory)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize)___		ConnectionManager connectionManager__		boolean enableCreditBased = false__		NettyConfig nettyConfig = networkEnvironmentConfiguration.nettyConfig()__		if (nettyConfig != null) {_			connectionManager = new NettyConnectionManager(nettyConfig)__			enableCreditBased = nettyConfig.isCreditBasedEnabled()__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___		int numProxyServerNetworkThreads = qsConfig.numProxyServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyServerThreads()___		int numProxyServerQueryThreads = qsConfig.numProxyQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyQueryThreads()___		final KvStateClientProxy kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getProxyPortRange(),_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				new DisabledKvStateRequestStats())___		int numStateServerNetworkThreads = qsConfig.numStateServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateServerThreads()___		int numStateServerQueryThreads = qsConfig.numStateQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateQueryThreads()___		final KvStateServer kvStateServer = QueryableStateUtils.createKvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getStateServerPortRange(),_				numStateServerNetworkThreads,_				numStateServerQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())___		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate(),_			enableCreditBased)__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,long,max,jvm,heap,memory,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,max,jvm,heap,memory,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,connection,manager,connection,manager,boolean,enable,credit,based,false,netty,config,netty,config,network,environment,configuration,netty,config,if,netty,config,null,connection,manager,new,netty,connection,manager,netty,config,enable,credit,based,netty,config,is,credit,based,enabled,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,proxy,server,network,threads,qs,config,num,proxy,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,server,threads,int,num,proxy,server,query,threads,qs,config,num,proxy,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,query,threads,final,kv,state,client,proxy,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,proxy,server,network,threads,num,proxy,server,query,threads,new,disabled,kv,state,request,stats,int,num,state,server,network,threads,qs,config,num,state,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,server,threads,int,num,state,server,query,threads,qs,config,num,state,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,query,threads,final,kv,state,server,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,state,server,network,threads,num,state,server,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate,enable,credit,based
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long maxJvmHeapMemory);1525420604;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@param maxJvmHeapMemory the maximum JVM heap size_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long maxJvmHeapMemory) {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration, maxJvmHeapMemory)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize)___		ConnectionManager connectionManager__		boolean enableCreditBased = false__		NettyConfig nettyConfig = networkEnvironmentConfiguration.nettyConfig()__		if (nettyConfig != null) {_			connectionManager = new NettyConnectionManager(nettyConfig)__			enableCreditBased = nettyConfig.isCreditBasedEnabled()__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___		int numProxyServerNetworkThreads = qsConfig.numProxyServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyServerThreads()___		int numProxyServerQueryThreads = qsConfig.numProxyQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyQueryThreads()___		final KvStateClientProxy kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getProxyPortRange(),_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				new DisabledKvStateRequestStats())___		int numStateServerNetworkThreads = qsConfig.numStateServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateServerThreads()___		int numStateServerQueryThreads = qsConfig.numStateQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateQueryThreads()___		final KvStateServer kvStateServer = QueryableStateUtils.createKvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getStateServerPortRange(),_				numStateServerNetworkThreads,_				numStateServerQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())___		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate(),_			enableCreditBased)__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,long,max,jvm,heap,memory,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,max,jvm,heap,memory,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,connection,manager,connection,manager,boolean,enable,credit,based,false,netty,config,netty,config,network,environment,configuration,netty,config,if,netty,config,null,connection,manager,new,netty,connection,manager,netty,config,enable,credit,based,netty,config,is,credit,based,enabled,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,proxy,server,network,threads,qs,config,num,proxy,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,server,threads,int,num,proxy,server,query,threads,qs,config,num,proxy,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,query,threads,final,kv,state,client,proxy,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,proxy,server,network,threads,num,proxy,server,query,threads,new,disabled,kv,state,request,stats,int,num,state,server,network,threads,qs,config,num,state,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,server,threads,int,num,state,server,query,threads,qs,config,num,state,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,query,threads,final,kv,state,server,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,state,server,network,threads,num,state,server,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate,enable,credit,based
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long maxJvmHeapMemory);1526313052;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@param maxJvmHeapMemory the maximum JVM heap size_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long maxJvmHeapMemory) {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration, maxJvmHeapMemory)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize)___		ConnectionManager connectionManager__		boolean enableCreditBased = false__		NettyConfig nettyConfig = networkEnvironmentConfiguration.nettyConfig()__		if (nettyConfig != null) {_			connectionManager = new NettyConnectionManager(nettyConfig)__			enableCreditBased = nettyConfig.isCreditBasedEnabled()__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___		int numProxyServerNetworkThreads = qsConfig.numProxyServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyServerThreads()___		int numProxyServerQueryThreads = qsConfig.numProxyQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyQueryThreads()___		final KvStateClientProxy kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getProxyPortRange(),_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				new DisabledKvStateRequestStats())___		int numStateServerNetworkThreads = qsConfig.numStateServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateServerThreads()___		int numStateServerQueryThreads = qsConfig.numStateQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateQueryThreads()___		final KvStateServer kvStateServer = QueryableStateUtils.createKvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getStateServerPortRange(),_				numStateServerNetworkThreads,_				numStateServerQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())___		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate(),_			enableCreditBased)__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,long,max,jvm,heap,memory,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,max,jvm,heap,memory,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,connection,manager,connection,manager,boolean,enable,credit,based,false,netty,config,netty,config,network,environment,configuration,netty,config,if,netty,config,null,connection,manager,new,netty,connection,manager,netty,config,enable,credit,based,netty,config,is,credit,based,enabled,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,proxy,server,network,threads,qs,config,num,proxy,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,server,threads,int,num,proxy,server,query,threads,qs,config,num,proxy,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,query,threads,final,kv,state,client,proxy,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,proxy,server,network,threads,num,proxy,server,query,threads,new,disabled,kv,state,request,stats,int,num,state,server,network,threads,qs,config,num,state,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,server,threads,int,num,state,server,query,threads,qs,config,num,state,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,query,threads,final,kv,state,server,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,state,server,network,threads,num,state,server,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate,enable,credit,based
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long maxJvmHeapMemory);1530798894;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@param maxJvmHeapMemory the maximum JVM heap size_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long maxJvmHeapMemory) {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration, maxJvmHeapMemory)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize)___		ConnectionManager connectionManager__		boolean enableCreditBased = false__		NettyConfig nettyConfig = networkEnvironmentConfiguration.nettyConfig()__		if (nettyConfig != null) {_			connectionManager = new NettyConnectionManager(nettyConfig)__			enableCreditBased = nettyConfig.isCreditBasedEnabled()__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___		int numProxyServerNetworkThreads = qsConfig.numProxyServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyServerThreads()___		int numProxyServerQueryThreads = qsConfig.numProxyQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyQueryThreads()___		final KvStateClientProxy kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getProxyPortRange(),_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				new DisabledKvStateRequestStats())___		int numStateServerNetworkThreads = qsConfig.numStateServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateServerThreads()___		int numStateServerQueryThreads = qsConfig.numStateQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateQueryThreads()___		final KvStateServer kvStateServer = QueryableStateUtils.createKvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getStateServerPortRange(),_				numStateServerNetworkThreads,_				numStateServerQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())___		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate(),_			enableCreditBased)__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,long,max,jvm,heap,memory,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,max,jvm,heap,memory,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,connection,manager,connection,manager,boolean,enable,credit,based,false,netty,config,netty,config,network,environment,configuration,netty,config,if,netty,config,null,connection,manager,new,netty,connection,manager,netty,config,enable,credit,based,netty,config,is,credit,based,enabled,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,proxy,server,network,threads,qs,config,num,proxy,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,server,threads,int,num,proxy,server,query,threads,qs,config,num,proxy,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,query,threads,final,kv,state,client,proxy,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,proxy,server,network,threads,num,proxy,server,query,threads,new,disabled,kv,state,request,stats,int,num,state,server,network,threads,qs,config,num,state,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,server,threads,int,num,state,server,query,threads,qs,config,num,state,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,query,threads,final,kv,state,server,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,state,server,network,threads,num,state,server,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate,enable,credit,based
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long maxJvmHeapMemory);1538127492;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@param maxJvmHeapMemory the maximum JVM heap size_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long maxJvmHeapMemory) {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration, maxJvmHeapMemory)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize)___		ConnectionManager connectionManager__		boolean enableCreditBased = false__		NettyConfig nettyConfig = networkEnvironmentConfiguration.nettyConfig()__		if (nettyConfig != null) {_			connectionManager = new NettyConnectionManager(nettyConfig)__			enableCreditBased = nettyConfig.isCreditBasedEnabled()__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___		int numProxyServerNetworkThreads = qsConfig.numProxyServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyServerThreads()___		int numProxyServerQueryThreads = qsConfig.numProxyQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyQueryThreads()___		final KvStateClientProxy kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getProxyPortRange(),_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				new DisabledKvStateRequestStats())___		int numStateServerNetworkThreads = qsConfig.numStateServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateServerThreads()___		int numStateServerQueryThreads = qsConfig.numStateQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateQueryThreads()___		final KvStateServer kvStateServer = QueryableStateUtils.createKvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getStateServerPortRange(),_				numStateServerNetworkThreads,_				numStateServerQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())___		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate(),_			enableCreditBased)__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,long,max,jvm,heap,memory,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,max,jvm,heap,memory,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,connection,manager,connection,manager,boolean,enable,credit,based,false,netty,config,netty,config,network,environment,configuration,netty,config,if,netty,config,null,connection,manager,new,netty,connection,manager,netty,config,enable,credit,based,netty,config,is,credit,based,enabled,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,proxy,server,network,threads,qs,config,num,proxy,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,server,threads,int,num,proxy,server,query,threads,qs,config,num,proxy,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,query,threads,final,kv,state,client,proxy,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,proxy,server,network,threads,num,proxy,server,query,threads,new,disabled,kv,state,request,stats,int,num,state,server,network,threads,qs,config,num,state,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,server,threads,int,num,state,server,query,threads,qs,config,num,state,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,query,threads,final,kv,state,server,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,state,server,network,threads,num,state,server,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate,enable,credit,based
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long maxJvmHeapMemory);1547115122;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@param maxJvmHeapMemory the maximum JVM heap size_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long maxJvmHeapMemory) {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration, maxJvmHeapMemory)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize)___		ConnectionManager connectionManager__		boolean enableCreditBased = false__		NettyConfig nettyConfig = networkEnvironmentConfiguration.nettyConfig()__		if (nettyConfig != null) {_			connectionManager = new NettyConnectionManager(nettyConfig)__			enableCreditBased = nettyConfig.isCreditBasedEnabled()__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___		KvStateClientProxy kvClientProxy = null__		KvStateServer kvStateServer = null___		if (qsConfig != null) {_			int numProxyServerNetworkThreads = qsConfig.numProxyServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyServerThreads()___			int numProxyServerQueryThreads = qsConfig.numProxyQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyQueryThreads()____			kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getProxyPortRange(),_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				new DisabledKvStateRequestStats())___			int numStateServerNetworkThreads = qsConfig.numStateServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateServerThreads()___			int numStateServerQueryThreads = qsConfig.numStateQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateQueryThreads()___			kvStateServer = QueryableStateUtils.createKvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getStateServerPortRange(),_				numStateServerNetworkThreads,_				numStateServerQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate(),_			enableCreditBased)__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,long,max,jvm,heap,memory,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,max,jvm,heap,memory,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,connection,manager,connection,manager,boolean,enable,credit,based,false,netty,config,netty,config,network,environment,configuration,netty,config,if,netty,config,null,connection,manager,new,netty,connection,manager,netty,config,enable,credit,based,netty,config,is,credit,based,enabled,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,kv,state,client,proxy,kv,client,proxy,null,kv,state,server,kv,state,server,null,if,qs,config,null,int,num,proxy,server,network,threads,qs,config,num,proxy,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,server,threads,int,num,proxy,server,query,threads,qs,config,num,proxy,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,query,threads,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,proxy,server,network,threads,num,proxy,server,query,threads,new,disabled,kv,state,request,stats,int,num,state,server,network,threads,qs,config,num,state,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,server,threads,int,num,state,server,query,threads,qs,config,num,state,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,query,threads,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,state,server,network,threads,num,state,server,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate,enable,credit,based
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long maxJvmHeapMemory);1549360056;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@param maxJvmHeapMemory the maximum JVM heap size_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long maxJvmHeapMemory) {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration, maxJvmHeapMemory)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize)___		ConnectionManager connectionManager__		boolean enableCreditBased = false__		NettyConfig nettyConfig = networkEnvironmentConfiguration.nettyConfig()__		if (nettyConfig != null) {_			connectionManager = new NettyConnectionManager(nettyConfig)__			enableCreditBased = nettyConfig.isCreditBasedEnabled()__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___		KvStateClientProxy kvClientProxy = null__		KvStateServer kvStateServer = null___		if (qsConfig != null) {_			int numProxyServerNetworkThreads = qsConfig.numProxyServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyServerThreads()___			int numProxyServerQueryThreads = qsConfig.numProxyQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyQueryThreads()___			kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getProxyPortRange(),_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				new DisabledKvStateRequestStats())___			int numStateServerNetworkThreads = qsConfig.numStateServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateServerThreads()___			int numStateServerQueryThreads = qsConfig.numStateQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateQueryThreads()___			kvStateServer = QueryableStateUtils.createKvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getStateServerPortRange(),_				numStateServerNetworkThreads,_				numStateServerQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate(),_			enableCreditBased)__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,long,max,jvm,heap,memory,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,max,jvm,heap,memory,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,connection,manager,connection,manager,boolean,enable,credit,based,false,netty,config,netty,config,network,environment,configuration,netty,config,if,netty,config,null,connection,manager,new,netty,connection,manager,netty,config,enable,credit,based,netty,config,is,credit,based,enabled,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,kv,state,client,proxy,kv,client,proxy,null,kv,state,server,kv,state,server,null,if,qs,config,null,int,num,proxy,server,network,threads,qs,config,num,proxy,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,server,threads,int,num,proxy,server,query,threads,qs,config,num,proxy,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,query,threads,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,proxy,server,network,threads,num,proxy,server,query,threads,new,disabled,kv,state,request,stats,int,num,state,server,network,threads,qs,config,num,state,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,server,threads,int,num,state,server,query,threads,qs,config,num,state,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,query,threads,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,state,server,network,threads,num,state,server,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate,enable,credit,based
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1494092429;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes);@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1494092513;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes);@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1498220069;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes);@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1507728810;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes);@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1507728812;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes);@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1508308828;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes);@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1508308828;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes);@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1509037054;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes);@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1509547920;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes);@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1509547921;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes);@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1510060074;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes);@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1511516912;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes)_ at least one memory segment;@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes,at,least,one,memory,segment;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1516626397;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes)_ at least one memory segment;@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes,at,least,one,memory,segment;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1518433169;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes)_ at least one memory segment;@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes,at,least,one,memory,segment;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1518680660;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes)_ at least one memory segment;@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes,at,least,one,memory,segment;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1518785736;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes)_ at least one memory segment;@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes,at,least,one,memory,segment;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1519568061;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes)_ at least one memory segment;@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes,at,least,one,memory,segment;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1525420604;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes)_ at least one memory segment;@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes,at,least,one,memory,segment;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1526313052;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes)_ at least one memory segment;@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize = config.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__			long networkBufMax = config.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes,at,least,one,memory,segment;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,config,get,integer,task,manager,options,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,config,get,long,task,manager,options,long,network,buf,max,config,get,long,task,manager,options,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1530798894;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes)_ at least one memory segment;@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize =_			checkedDownCast(MemorySize.parse(config.getString(TaskManagerOptions.MEMORY_SEGMENT_SIZE)).getBytes())___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = MemorySize.parse(config.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)).getBytes()__			long networkBufMax = MemorySize.parse(config.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)).getBytes()____			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes,at,least,one,memory,segment;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,checked,down,cast,memory,size,parse,config,get,string,task,manager,options,get,bytes,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,memory,size,parse,config,get,string,task,manager,options,get,bytes,long,network,buf,max,memory,size,parse,config,get,string,task,manager,options,get,bytes,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1538127492;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes)_ at least one memory segment;@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize =_			checkedDownCast(MemorySize.parse(config.getString(TaskManagerOptions.MEMORY_SEGMENT_SIZE)).getBytes())___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = MemorySize.parse(config.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)).getBytes()__			long networkBufMax = MemorySize.parse(config.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)).getBytes()____			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes,at,least,one,memory,segment;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,checked,down,cast,memory,size,parse,config,get,string,task,manager,options,get,bytes,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,memory,size,parse,config,get,string,task,manager,options,get,bytes,long,network,buf,max,memory,size,parse,config,get,string,task,manager,options,get,bytes,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1547115122;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes)_ at least one memory segment;@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize =_			checkedDownCast(MemorySize.parse(config.getString(TaskManagerOptions.MEMORY_SEGMENT_SIZE)).getBytes())___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = MemorySize.parse(config.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)).getBytes()__			long networkBufMax = MemorySize.parse(config.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)).getBytes()____			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes,at,least,one,memory,segment;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,checked,down,cast,memory,size,parse,config,get,string,task,manager,options,get,bytes,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,memory,size,parse,config,get,string,task,manager,options,get,bytes,long,network,buf,max,memory,size,parse,config,get,string,task,manager,options,get,bytes,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,return,network,buf,bytes
TaskManagerServices -> @SuppressWarnings("deprecation") 	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config);1549360056;Calculates the amount of memory used for network buffers based on the total memory to use and_the according configuration parameters.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param totalJavaMemorySize_overall available memory to use (heap and off-heap, in bytes)_@param config_configuration object__@return memory to use for network buffers (in bytes)_ at least one memory segment;@SuppressWarnings("deprecation")_	public static long calculateNetworkBufferMemory(long totalJavaMemorySize, Configuration config) {_		Preconditions.checkArgument(totalJavaMemorySize > 0)___		int segmentSize =_			checkedDownCast(MemorySize.parse(config.getString(TaskManagerOptions.MEMORY_SEGMENT_SIZE)).getBytes())___		final long networkBufBytes__		if (TaskManagerServicesConfiguration.hasNewNetworkBufConf(config)) {_			_			float networkBufFraction = config.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__			long networkBufMin = MemorySize.parse(config.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)).getBytes()__			long networkBufMax = MemorySize.parse(config.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)).getBytes()___			TaskManagerServicesConfiguration_				.checkNetworkBufferConfig(segmentSize, networkBufFraction, networkBufMin, networkBufMax)___			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * totalJavaMemorySize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		} else {_			_			int numNetworkBuffers = config.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__			networkBufBytes = (long) numNetworkBuffers * (long) segmentSize___			TaskManagerServicesConfiguration.checkNetworkConfigOld(numNetworkBuffers)___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < totalJavaMemorySize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						totalJavaMemorySize + " (total JVM memory size)")__			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes >= segmentSize,_					networkBufBytes, TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_					"Network buffer memory size too small: " + networkBufBytes + " < " +_						segmentSize + " (" + TaskManagerOptions.MEMORY_SEGMENT_SIZE.key() + ")")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,based,on,the,total,memory,to,use,and,the,according,configuration,parameters,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,total,java,memory,size,overall,available,memory,to,use,heap,and,off,heap,in,bytes,param,config,configuration,object,return,memory,to,use,for,network,buffers,in,bytes,at,least,one,memory,segment;suppress,warnings,deprecation,public,static,long,calculate,network,buffer,memory,long,total,java,memory,size,configuration,config,preconditions,check,argument,total,java,memory,size,0,int,segment,size,checked,down,cast,memory,size,parse,config,get,string,task,manager,options,get,bytes,final,long,network,buf,bytes,if,task,manager,services,configuration,has,new,network,buf,conf,config,float,network,buf,fraction,config,get,float,task,manager,options,long,network,buf,min,memory,size,parse,config,get,string,task,manager,options,get,bytes,long,network,buf,max,memory,size,parse,config,get,string,task,manager,options,get,bytes,task,manager,services,configuration,check,network,buffer,config,segment,size,network,buf,fraction,network,buf,min,network,buf,max,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,total,java,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,else,int,num,network,buffers,config,get,integer,task,manager,options,network,buf,bytes,long,num,network,buffers,long,segment,size,task,manager,services,configuration,check,network,config,old,num,network,buffers,task,manager,services,configuration,check,config,parameter,network,buf,bytes,total,java,memory,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,total,java,memory,size,total,jvm,memory,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,segment,size,network,buf,bytes,task,manager,options,key,network,buffer,memory,size,too,small,network,buf,bytes,segment,size,task,manager,options,key,return,network,buf,bytes
TaskManagerServices -> private static MemoryManager createMemoryManager( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1518680660;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {_		_		__		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		MemoryType memType = taskManagerServicesConfiguration.getMemoryType()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (freeHeapMemoryWithDefrag * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long directMemorySize = (long) (maxJvmHeapMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,long,configured,memory,task,manager,services,configuration,get,configured,memory,memory,type,mem,type,task,manager,services,configuration,get,memory,type,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,direct,memory,size,long,max,jvm,heap,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1518785736;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {_		_		__		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		MemoryType memType = taskManagerServicesConfiguration.getMemoryType()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (freeHeapMemoryWithDefrag * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long directMemorySize = (long) (maxJvmHeapMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,long,configured,memory,task,manager,services,configuration,get,configured,memory,memory,type,mem,type,task,manager,services,configuration,get,memory,type,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,direct,memory,size,long,max,jvm,heap,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1519568061;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {_		_		__		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		MemoryType memType = taskManagerServicesConfiguration.getMemoryType()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (freeHeapMemoryWithDefrag * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long directMemorySize = (long) (maxJvmHeapMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,long,configured,memory,task,manager,services,configuration,get,configured,memory,memory,type,mem,type,task,manager,services,configuration,get,memory,type,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,direct,memory,size,long,max,jvm,heap,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1525420604;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {_		_		__		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		MemoryType memType = taskManagerServicesConfiguration.getMemoryType()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (freeHeapMemoryWithDefrag * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long directMemorySize = (long) (maxJvmHeapMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,long,configured,memory,task,manager,services,configuration,get,configured,memory,memory,type,mem,type,task,manager,services,configuration,get,memory,type,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,direct,memory,size,long,max,jvm,heap,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1526313052;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {_		_		__		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		MemoryType memType = taskManagerServicesConfiguration.getMemoryType()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (freeHeapMemoryWithDefrag * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long directMemorySize = (long) (maxJvmHeapMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,long,configured,memory,task,manager,services,configuration,get,configured,memory,memory,type,mem,type,task,manager,services,configuration,get,memory,type,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,direct,memory,size,long,max,jvm,heap,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1530798894;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {_		_		__		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		MemoryType memType = taskManagerServicesConfiguration.getMemoryType()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (freeHeapMemoryWithDefrag * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long directMemorySize = (long) (maxJvmHeapMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,long,configured,memory,task,manager,services,configuration,get,configured,memory,memory,type,mem,type,task,manager,services,configuration,get,memory,type,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,direct,memory,size,long,max,jvm,heap,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1538127492;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {_		_		__		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		MemoryType memType = taskManagerServicesConfiguration.getMemoryType()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (freeHeapMemoryWithDefrag * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long directMemorySize = (long) (maxJvmHeapMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,long,configured,memory,task,manager,services,configuration,get,configured,memory,memory,type,mem,type,task,manager,services,configuration,get,memory,type,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,direct,memory,size,long,max,jvm,heap,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1547115122;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {_		_		__		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		MemoryType memType = taskManagerServicesConfiguration.getMemoryType()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (freeHeapMemoryWithDefrag * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long directMemorySize = (long) (maxJvmHeapMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,long,configured,memory,task,manager,services,configuration,get,configured,memory,memory,type,mem,type,task,manager,services,configuration,get,memory,type,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,direct,memory,size,long,max,jvm,heap,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1549360056;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {_		_		__		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		MemoryType memType = taskManagerServicesConfiguration.getMemoryType()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (freeHeapMemoryWithDefrag * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long directMemorySize = (long) (maxJvmHeapMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,long,configured,memory,task,manager,services,configuration,get,configured,memory,memory,type,mem,type,task,manager,services,configuration,get,memory,type,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,direct,memory,size,long,max,jvm,heap,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig);1494092429;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		final MemoryType memType = networkConfig.memoryType()___		final long networkBufBytes__		if (memType == MemoryType.HEAP) {_			__			final long relativeMemSize = EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag()__			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * relativeMemSize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < relativeMemSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						relativeMemSize + "(free JVM heap size)")__		} else if (memType == MemoryType.OFF_HEAP) {_			_			_			__			final long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()___			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			final long jvmHeapNoNet__			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxMemory / (1.0 - managedFraction))__			}__			_			_			_			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < maxMemory,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						maxMemory + "(maximum JVM heap size)")__		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,network,config,memory,type,final,long,network,buf,bytes,if,mem,type,memory,type,heap,final,long,relative,mem,size,environment,information,get,size,of,free,heap,memory,with,defrag,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,relative,mem,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,relative,mem,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,relative,mem,size,free,jvm,heap,size,else,if,mem,type,memory,type,final,long,max,memory,environment,information,get,max,jvm,heap,memory,long,configured,memory,tm,config,get,configured,memory,20,final,long,jvm,heap,no,net,if,configured,memory,0,jvm,heap,no,net,max,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,memory,1,0,managed,fraction,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,memory,maximum,jvm,heap,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig);1494092513;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		final MemoryType memType = networkConfig.memoryType()___		final long networkBufBytes__		if (memType == MemoryType.HEAP) {_			__			final long relativeMemSize = EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag()__			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * relativeMemSize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < relativeMemSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						relativeMemSize + "(free JVM heap size)")__		} else if (memType == MemoryType.OFF_HEAP) {_			_			_			__			final long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()___			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			final long jvmHeapNoNet__			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxMemory / (1.0 - managedFraction))__			}__			_			_			_			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < maxMemory,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						maxMemory + "(maximum JVM heap size)")__		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,network,config,memory,type,final,long,network,buf,bytes,if,mem,type,memory,type,heap,final,long,relative,mem,size,environment,information,get,size,of,free,heap,memory,with,defrag,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,relative,mem,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,relative,mem,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,relative,mem,size,free,jvm,heap,size,else,if,mem,type,memory,type,final,long,max,memory,environment,information,get,max,jvm,heap,memory,long,configured,memory,tm,config,get,configured,memory,20,final,long,jvm,heap,no,net,if,configured,memory,0,jvm,heap,no,net,max,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,memory,1,0,managed,fraction,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,memory,maximum,jvm,heap,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig);1498220069;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		final MemoryType memType = networkConfig.memoryType()___		final long networkBufBytes__		if (memType == MemoryType.HEAP) {_			__			final long relativeMemSize = EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag()__			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * relativeMemSize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < relativeMemSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						relativeMemSize + "(free JVM heap size)")__		} else if (memType == MemoryType.OFF_HEAP) {_			_			_			__			final long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()___			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			final long jvmHeapNoNet__			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxMemory / (1.0 - managedFraction))__			}__			_			_			_			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < maxMemory,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						maxMemory + "(maximum JVM heap size)")__		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,network,config,memory,type,final,long,network,buf,bytes,if,mem,type,memory,type,heap,final,long,relative,mem,size,environment,information,get,size,of,free,heap,memory,with,defrag,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,relative,mem,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,relative,mem,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,relative,mem,size,free,jvm,heap,size,else,if,mem,type,memory,type,final,long,max,memory,environment,information,get,max,jvm,heap,memory,long,configured,memory,tm,config,get,configured,memory,20,final,long,jvm,heap,no,net,if,configured,memory,0,jvm,heap,no,net,max,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,memory,1,0,managed,fraction,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,memory,maximum,jvm,heap,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig);1507728810;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		final MemoryType memType = networkConfig.memoryType()___		final long networkBufBytes__		if (memType == MemoryType.HEAP) {_			__			final long relativeMemSize = EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag()__			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * relativeMemSize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < relativeMemSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						relativeMemSize + "(free JVM heap size)")__		} else if (memType == MemoryType.OFF_HEAP) {_			_			_			__			final long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()___			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			final long jvmHeapNoNet__			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxMemory / (1.0 - managedFraction))__			}__			_			_			_			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < maxMemory,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						maxMemory + "(maximum JVM heap size)")__		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,network,config,memory,type,final,long,network,buf,bytes,if,mem,type,memory,type,heap,final,long,relative,mem,size,environment,information,get,size,of,free,heap,memory,with,defrag,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,relative,mem,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,relative,mem,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,relative,mem,size,free,jvm,heap,size,else,if,mem,type,memory,type,final,long,max,memory,environment,information,get,max,jvm,heap,memory,long,configured,memory,tm,config,get,configured,memory,20,final,long,jvm,heap,no,net,if,configured,memory,0,jvm,heap,no,net,max,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,memory,1,0,managed,fraction,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,memory,maximum,jvm,heap,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig);1507728812;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		final MemoryType memType = networkConfig.memoryType()___		final long networkBufBytes__		if (memType == MemoryType.HEAP) {_			__			final long relativeMemSize = EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag()__			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * relativeMemSize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < relativeMemSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						relativeMemSize + "(free JVM heap size)")__		} else if (memType == MemoryType.OFF_HEAP) {_			_			_			__			final long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()___			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			final long jvmHeapNoNet__			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxMemory / (1.0 - managedFraction))__			}__			_			_			_			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < maxMemory,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						maxMemory + "(maximum JVM heap size)")__		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,network,config,memory,type,final,long,network,buf,bytes,if,mem,type,memory,type,heap,final,long,relative,mem,size,environment,information,get,size,of,free,heap,memory,with,defrag,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,relative,mem,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,relative,mem,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,relative,mem,size,free,jvm,heap,size,else,if,mem,type,memory,type,final,long,max,memory,environment,information,get,max,jvm,heap,memory,long,configured,memory,tm,config,get,configured,memory,20,final,long,jvm,heap,no,net,if,configured,memory,0,jvm,heap,no,net,max,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,memory,1,0,managed,fraction,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,memory,maximum,jvm,heap,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig);1508308828;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		final MemoryType memType = networkConfig.memoryType()___		final long networkBufBytes__		if (memType == MemoryType.HEAP) {_			__			final long relativeMemSize = EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag()__			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * relativeMemSize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < relativeMemSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						relativeMemSize + "(free JVM heap size)")__		} else if (memType == MemoryType.OFF_HEAP) {_			_			_			__			final long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()___			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			final long jvmHeapNoNet__			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxMemory / (1.0 - managedFraction))__			}__			_			_			_			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < maxMemory,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						maxMemory + "(maximum JVM heap size)")__		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,network,config,memory,type,final,long,network,buf,bytes,if,mem,type,memory,type,heap,final,long,relative,mem,size,environment,information,get,size,of,free,heap,memory,with,defrag,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,relative,mem,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,relative,mem,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,relative,mem,size,free,jvm,heap,size,else,if,mem,type,memory,type,final,long,max,memory,environment,information,get,max,jvm,heap,memory,long,configured,memory,tm,config,get,configured,memory,20,final,long,jvm,heap,no,net,if,configured,memory,0,jvm,heap,no,net,max,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,memory,1,0,managed,fraction,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,memory,maximum,jvm,heap,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig);1508308828;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		final MemoryType memType = networkConfig.memoryType()___		final long networkBufBytes__		if (memType == MemoryType.HEAP) {_			__			final long relativeMemSize = EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag()__			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * relativeMemSize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < relativeMemSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						relativeMemSize + "(free JVM heap size)")__		} else if (memType == MemoryType.OFF_HEAP) {_			_			_			__			final long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()___			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			final long jvmHeapNoNet__			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxMemory / (1.0 - managedFraction))__			}__			_			_			_			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < maxMemory,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						maxMemory + "(maximum JVM heap size)")__		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,network,config,memory,type,final,long,network,buf,bytes,if,mem,type,memory,type,heap,final,long,relative,mem,size,environment,information,get,size,of,free,heap,memory,with,defrag,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,relative,mem,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,relative,mem,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,relative,mem,size,free,jvm,heap,size,else,if,mem,type,memory,type,final,long,max,memory,environment,information,get,max,jvm,heap,memory,long,configured,memory,tm,config,get,configured,memory,20,final,long,jvm,heap,no,net,if,configured,memory,0,jvm,heap,no,net,max,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,memory,1,0,managed,fraction,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,memory,maximum,jvm,heap,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig);1509037054;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		final MemoryType memType = networkConfig.memoryType()___		final long networkBufBytes__		if (memType == MemoryType.HEAP) {_			__			final long relativeMemSize = EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag()__			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * relativeMemSize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < relativeMemSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						relativeMemSize + "(free JVM heap size)")__		} else if (memType == MemoryType.OFF_HEAP) {_			_			_			__			final long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()___			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			final long jvmHeapNoNet__			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxMemory / (1.0 - managedFraction))__			}__			_			_			_			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < maxMemory,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						maxMemory + "(maximum JVM heap size)")__		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,network,config,memory,type,final,long,network,buf,bytes,if,mem,type,memory,type,heap,final,long,relative,mem,size,environment,information,get,size,of,free,heap,memory,with,defrag,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,relative,mem,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,relative,mem,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,relative,mem,size,free,jvm,heap,size,else,if,mem,type,memory,type,final,long,max,memory,environment,information,get,max,jvm,heap,memory,long,configured,memory,tm,config,get,configured,memory,20,final,long,jvm,heap,no,net,if,configured,memory,0,jvm,heap,no,net,max,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,memory,1,0,managed,fraction,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,memory,maximum,jvm,heap,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig);1509547920;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		final MemoryType memType = networkConfig.memoryType()___		final long networkBufBytes__		if (memType == MemoryType.HEAP) {_			__			final long relativeMemSize = EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag()__			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * relativeMemSize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < relativeMemSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						relativeMemSize + "(free JVM heap size)")__		} else if (memType == MemoryType.OFF_HEAP) {_			_			_			__			final long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()___			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			final long jvmHeapNoNet__			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxMemory / (1.0 - managedFraction))__			}__			_			_			_			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < maxMemory,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						maxMemory + "(maximum JVM heap size)")__		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,network,config,memory,type,final,long,network,buf,bytes,if,mem,type,memory,type,heap,final,long,relative,mem,size,environment,information,get,size,of,free,heap,memory,with,defrag,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,relative,mem,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,relative,mem,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,relative,mem,size,free,jvm,heap,size,else,if,mem,type,memory,type,final,long,max,memory,environment,information,get,max,jvm,heap,memory,long,configured,memory,tm,config,get,configured,memory,20,final,long,jvm,heap,no,net,if,configured,memory,0,jvm,heap,no,net,max,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,memory,1,0,managed,fraction,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,memory,maximum,jvm,heap,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig);1509547921;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		final MemoryType memType = networkConfig.memoryType()___		final long networkBufBytes__		if (memType == MemoryType.HEAP) {_			__			final long relativeMemSize = EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag()__			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * relativeMemSize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < relativeMemSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						relativeMemSize + "(free JVM heap size)")__		} else if (memType == MemoryType.OFF_HEAP) {_			_			_			__			final long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()___			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			final long jvmHeapNoNet__			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxMemory / (1.0 - managedFraction))__			}__			_			_			_			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < maxMemory,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						maxMemory + "(maximum JVM heap size)")__		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,network,config,memory,type,final,long,network,buf,bytes,if,mem,type,memory,type,heap,final,long,relative,mem,size,environment,information,get,size,of,free,heap,memory,with,defrag,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,relative,mem,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,relative,mem,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,relative,mem,size,free,jvm,heap,size,else,if,mem,type,memory,type,final,long,max,memory,environment,information,get,max,jvm,heap,memory,long,configured,memory,tm,config,get,configured,memory,20,final,long,jvm,heap,no,net,if,configured,memory,0,jvm,heap,no,net,max,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,memory,1,0,managed,fraction,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,memory,maximum,jvm,heap,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig);1510060074;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		final MemoryType memType = networkConfig.memoryType()___		final long networkBufBytes__		if (memType == MemoryType.HEAP) {_			__			final long relativeMemSize = EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag()__			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (networkBufFraction * relativeMemSize)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < relativeMemSize,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						relativeMemSize + "(free JVM heap size)")__		} else if (memType == MemoryType.OFF_HEAP) {_			_			_			__			final long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()___			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			final long jvmHeapNoNet__			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxMemory / (1.0 - managedFraction))__			}__			_			_			_			networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_				(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___			TaskManagerServicesConfiguration_				.checkConfigParameter(networkBufBytes < maxMemory,_					"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_					"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_						TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_					"Network buffer memory size too large: " + networkBufBytes + " >= " +_						maxMemory + "(maximum JVM heap size)")__		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,network,config,memory,type,final,long,network,buf,bytes,if,mem,type,memory,type,heap,final,long,relative,mem,size,environment,information,get,size,of,free,heap,memory,with,defrag,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,network,buf,fraction,relative,mem,size,task,manager,services,configuration,check,config,parameter,network,buf,bytes,relative,mem,size,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,relative,mem,size,free,jvm,heap,size,else,if,mem,type,memory,type,final,long,max,memory,environment,information,get,max,jvm,heap,memory,long,configured,memory,tm,config,get,configured,memory,20,final,long,jvm,heap,no,net,if,configured,memory,0,jvm,heap,no,net,max,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,memory,1,0,managed,fraction,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,memory,maximum,jvm,heap,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig);1511516912;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		_		_		__		final MemoryType memType = tmConfig.getMemoryType()___		final long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()___		final long jvmHeapNoNet__		if (memType == MemoryType.HEAP) {_			jvmHeapNoNet = maxMemory__		} else if (memType == MemoryType.OFF_HEAP) {__			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxMemory / (1.0 - managedFraction))__			}_		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		_		_		_		final long networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_			(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___		TaskManagerServicesConfiguration_			.checkConfigParameter(networkBufBytes < maxMemory,_				"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_				"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_				"Network buffer memory size too large: " + networkBufBytes + " >= " +_					maxMemory + "(maximum JVM heap size)")___		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,tm,config,get,memory,type,final,long,max,memory,environment,information,get,max,jvm,heap,memory,final,long,jvm,heap,no,net,if,mem,type,memory,type,heap,jvm,heap,no,net,max,memory,else,if,mem,type,memory,type,long,configured,memory,tm,config,get,configured,memory,20,if,configured,memory,0,jvm,heap,no,net,max,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,memory,1,0,managed,fraction,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,long,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,memory,maximum,jvm,heap,size,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig);1516626397;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		_		_		__		final MemoryType memType = tmConfig.getMemoryType()___		final long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()___		final long jvmHeapNoNet__		if (memType == MemoryType.HEAP) {_			jvmHeapNoNet = maxMemory__		} else if (memType == MemoryType.OFF_HEAP) {__			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxMemory / (1.0 - managedFraction))__			}_		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		_		_		_		final long networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_			(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___		TaskManagerServicesConfiguration_			.checkConfigParameter(networkBufBytes < maxMemory,_				"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_				"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_				"Network buffer memory size too large: " + networkBufBytes + " >= " +_					maxMemory + "(maximum JVM heap size)")___		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,tm,config,get,memory,type,final,long,max,memory,environment,information,get,max,jvm,heap,memory,final,long,jvm,heap,no,net,if,mem,type,memory,type,heap,jvm,heap,no,net,max,memory,else,if,mem,type,memory,type,long,configured,memory,tm,config,get,configured,memory,20,if,configured,memory,0,jvm,heap,no,net,max,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,memory,1,0,managed,fraction,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,long,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,memory,maximum,jvm,heap,size,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig);1518433169;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		_		_		__		final MemoryType memType = tmConfig.getMemoryType()___		final long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()___		final long jvmHeapNoNet__		if (memType == MemoryType.HEAP) {_			jvmHeapNoNet = maxMemory__		} else if (memType == MemoryType.OFF_HEAP) {__			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxMemory / (1.0 - managedFraction))__			}_		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		_		_		_		final long networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_			(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___		TaskManagerServicesConfiguration_			.checkConfigParameter(networkBufBytes < maxMemory,_				"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_				"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_				"Network buffer memory size too large: " + networkBufBytes + " >= " +_					maxMemory + "(maximum JVM heap size)")___		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,tm,config,get,memory,type,final,long,max,memory,environment,information,get,max,jvm,heap,memory,final,long,jvm,heap,no,net,if,mem,type,memory,type,heap,jvm,heap,no,net,max,memory,else,if,mem,type,memory,type,long,configured,memory,tm,config,get,configured,memory,20,if,configured,memory,0,jvm,heap,no,net,max,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,memory,1,0,managed,fraction,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,long,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,memory,maximum,jvm,heap,size,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory);1518680660;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object_@param maxJvmHeapMemory the maximum JVM heap size__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		_		_		__		final MemoryType memType = tmConfig.getMemoryType()___		final long jvmHeapNoNet__		if (memType == MemoryType.HEAP) {_			jvmHeapNoNet = maxJvmHeapMemory__		} else if (memType == MemoryType.OFF_HEAP) {__			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxJvmHeapMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxJvmHeapMemory / (1.0 - managedFraction))__			}_		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		_		_		_		final long networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_			(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___		TaskManagerServicesConfiguration_			.checkConfigParameter(networkBufBytes < maxJvmHeapMemory,_				"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_				"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_				"Network buffer memory size too large: " + networkBufBytes + " >= " +_					maxJvmHeapMemory + "(maximum JVM heap size)")___		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,long,max,jvm,heap,memory,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,tm,config,get,memory,type,final,long,jvm,heap,no,net,if,mem,type,memory,type,heap,jvm,heap,no,net,max,jvm,heap,memory,else,if,mem,type,memory,type,long,configured,memory,tm,config,get,configured,memory,20,if,configured,memory,0,jvm,heap,no,net,max,jvm,heap,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,jvm,heap,memory,1,0,managed,fraction,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,long,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,jvm,heap,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,jvm,heap,memory,maximum,jvm,heap,size,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory);1518785736;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object_@param maxJvmHeapMemory the maximum JVM heap size__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		_		_		__		final MemoryType memType = tmConfig.getMemoryType()___		final long jvmHeapNoNet__		if (memType == MemoryType.HEAP) {_			jvmHeapNoNet = maxJvmHeapMemory__		} else if (memType == MemoryType.OFF_HEAP) {__			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxJvmHeapMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxJvmHeapMemory / (1.0 - managedFraction))__			}_		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		_		_		_		final long networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_			(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___		TaskManagerServicesConfiguration_			.checkConfigParameter(networkBufBytes < maxJvmHeapMemory,_				"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_				"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_				"Network buffer memory size too large: " + networkBufBytes + " >= " +_					maxJvmHeapMemory + "(maximum JVM heap size)")___		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,long,max,jvm,heap,memory,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,tm,config,get,memory,type,final,long,jvm,heap,no,net,if,mem,type,memory,type,heap,jvm,heap,no,net,max,jvm,heap,memory,else,if,mem,type,memory,type,long,configured,memory,tm,config,get,configured,memory,20,if,configured,memory,0,jvm,heap,no,net,max,jvm,heap,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,jvm,heap,memory,1,0,managed,fraction,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,long,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,jvm,heap,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,jvm,heap,memory,maximum,jvm,heap,size,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory);1519568061;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object_@param maxJvmHeapMemory the maximum JVM heap size__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		_		_		__		final MemoryType memType = tmConfig.getMemoryType()___		final long jvmHeapNoNet__		if (memType == MemoryType.HEAP) {_			jvmHeapNoNet = maxJvmHeapMemory__		} else if (memType == MemoryType.OFF_HEAP) {__			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxJvmHeapMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxJvmHeapMemory / (1.0 - managedFraction))__			}_		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		_		_		_		final long networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_			(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___		TaskManagerServicesConfiguration_			.checkConfigParameter(networkBufBytes < maxJvmHeapMemory,_				"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_				"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_				"Network buffer memory size too large: " + networkBufBytes + " >= " +_					maxJvmHeapMemory + "(maximum JVM heap size)")___		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,long,max,jvm,heap,memory,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,tm,config,get,memory,type,final,long,jvm,heap,no,net,if,mem,type,memory,type,heap,jvm,heap,no,net,max,jvm,heap,memory,else,if,mem,type,memory,type,long,configured,memory,tm,config,get,configured,memory,20,if,configured,memory,0,jvm,heap,no,net,max,jvm,heap,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,jvm,heap,memory,1,0,managed,fraction,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,long,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,jvm,heap,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,jvm,heap,memory,maximum,jvm,heap,size,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory);1525420604;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object_@param maxJvmHeapMemory the maximum JVM heap size__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		_		_		__		final MemoryType memType = tmConfig.getMemoryType()___		final long jvmHeapNoNet__		if (memType == MemoryType.HEAP) {_			jvmHeapNoNet = maxJvmHeapMemory__		} else if (memType == MemoryType.OFF_HEAP) {__			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxJvmHeapMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxJvmHeapMemory / (1.0 - managedFraction))__			}_		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		_		_		_		final long networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_			(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___		TaskManagerServicesConfiguration_			.checkConfigParameter(networkBufBytes < maxJvmHeapMemory,_				"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_				"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_				"Network buffer memory size too large: " + networkBufBytes + " >= " +_					maxJvmHeapMemory + "(maximum JVM heap size)")___		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,long,max,jvm,heap,memory,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,tm,config,get,memory,type,final,long,jvm,heap,no,net,if,mem,type,memory,type,heap,jvm,heap,no,net,max,jvm,heap,memory,else,if,mem,type,memory,type,long,configured,memory,tm,config,get,configured,memory,20,if,configured,memory,0,jvm,heap,no,net,max,jvm,heap,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,jvm,heap,memory,1,0,managed,fraction,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,long,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,jvm,heap,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,jvm,heap,memory,maximum,jvm,heap,size,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory);1526313052;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object_@param maxJvmHeapMemory the maximum JVM heap size__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		_		_		__		final MemoryType memType = tmConfig.getMemoryType()___		final long jvmHeapNoNet__		if (memType == MemoryType.HEAP) {_			jvmHeapNoNet = maxJvmHeapMemory__		} else if (memType == MemoryType.OFF_HEAP) {__			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxJvmHeapMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxJvmHeapMemory / (1.0 - managedFraction))__			}_		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		_		_		_		final long networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_			(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___		TaskManagerServicesConfiguration_			.checkConfigParameter(networkBufBytes < maxJvmHeapMemory,_				"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_				"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_				"Network buffer memory size too large: " + networkBufBytes + " >= " +_					maxJvmHeapMemory + "(maximum JVM heap size)")___		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,long,max,jvm,heap,memory,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,tm,config,get,memory,type,final,long,jvm,heap,no,net,if,mem,type,memory,type,heap,jvm,heap,no,net,max,jvm,heap,memory,else,if,mem,type,memory,type,long,configured,memory,tm,config,get,configured,memory,20,if,configured,memory,0,jvm,heap,no,net,max,jvm,heap,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,jvm,heap,memory,1,0,managed,fraction,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,long,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,jvm,heap,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,jvm,heap,memory,maximum,jvm,heap,size,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory);1530798894;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object_@param maxJvmHeapMemory the maximum JVM heap size__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		_		_		__		final MemoryType memType = tmConfig.getMemoryType()___		final long jvmHeapNoNet__		if (memType == MemoryType.HEAP) {_			jvmHeapNoNet = maxJvmHeapMemory__		} else if (memType == MemoryType.OFF_HEAP) {__			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxJvmHeapMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxJvmHeapMemory / (1.0 - managedFraction))__			}_		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		_		_		_		final long networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_			(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___		TaskManagerServicesConfiguration_			.checkConfigParameter(networkBufBytes < maxJvmHeapMemory,_				"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_				"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_				"Network buffer memory size too large: " + networkBufBytes + " >= " +_					maxJvmHeapMemory + "(maximum JVM heap size)")___		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,long,max,jvm,heap,memory,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,tm,config,get,memory,type,final,long,jvm,heap,no,net,if,mem,type,memory,type,heap,jvm,heap,no,net,max,jvm,heap,memory,else,if,mem,type,memory,type,long,configured,memory,tm,config,get,configured,memory,20,if,configured,memory,0,jvm,heap,no,net,max,jvm,heap,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,jvm,heap,memory,1,0,managed,fraction,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,long,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,jvm,heap,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,jvm,heap,memory,maximum,jvm,heap,size,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory);1538127492;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object_@param maxJvmHeapMemory the maximum JVM heap size__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		_		_		__		final MemoryType memType = tmConfig.getMemoryType()___		final long jvmHeapNoNet__		if (memType == MemoryType.HEAP) {_			jvmHeapNoNet = maxJvmHeapMemory__		} else if (memType == MemoryType.OFF_HEAP) {__			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxJvmHeapMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxJvmHeapMemory / (1.0 - managedFraction))__			}_		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		_		_		_		final long networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_			(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___		TaskManagerServicesConfiguration_			.checkConfigParameter(networkBufBytes < maxJvmHeapMemory,_				"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_				"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_				"Network buffer memory size too large: " + networkBufBytes + " >= " +_					maxJvmHeapMemory + "(maximum JVM heap size)")___		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,long,max,jvm,heap,memory,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,tm,config,get,memory,type,final,long,jvm,heap,no,net,if,mem,type,memory,type,heap,jvm,heap,no,net,max,jvm,heap,memory,else,if,mem,type,memory,type,long,configured,memory,tm,config,get,configured,memory,20,if,configured,memory,0,jvm,heap,no,net,max,jvm,heap,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,jvm,heap,memory,1,0,managed,fraction,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,long,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,jvm,heap,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,jvm,heap,memory,maximum,jvm,heap,size,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory);1547115122;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object_@param maxJvmHeapMemory the maximum JVM heap size__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		_		_		__		final MemoryType memType = tmConfig.getMemoryType()___		final long jvmHeapNoNet__		if (memType == MemoryType.HEAP) {_			jvmHeapNoNet = maxJvmHeapMemory__		} else if (memType == MemoryType.OFF_HEAP) {__			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxJvmHeapMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxJvmHeapMemory / (1.0 - managedFraction))__			}_		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		_		_		_		final long networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_			(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___		TaskManagerServicesConfiguration_			.checkConfigParameter(networkBufBytes < maxJvmHeapMemory,_				"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_				"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_				"Network buffer memory size too large: " + networkBufBytes + " >= " +_					maxJvmHeapMemory + "(maximum JVM heap size)")___		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,long,max,jvm,heap,memory,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,tm,config,get,memory,type,final,long,jvm,heap,no,net,if,mem,type,memory,type,heap,jvm,heap,no,net,max,jvm,heap,memory,else,if,mem,type,memory,type,long,configured,memory,tm,config,get,configured,memory,20,if,configured,memory,0,jvm,heap,no,net,max,jvm,heap,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,jvm,heap,memory,1,0,managed,fraction,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,long,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,jvm,heap,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,jvm,heap,memory,maximum,jvm,heap,size,return,network,buf,bytes
TaskManagerServices -> public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory);1549360056;Calculates the amount of memory used for network buffers inside the current JVM instance_based on the available heap or the max heap size and the according configuration parameters.__<p>For containers or when started via scripts, if started with a memory limit and set to use_off-heap memory, the maximum heap size for the JVM is adjusted accordingly and we are able_to extract the intended values from this.__<p>The following configuration parameters are involved:_<ul>_<li>{@link TaskManagerOptions#MANAGED_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_FRACTION},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MIN},</li>_<li>{@link TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}, and</li>_<li>{@link TaskManagerOptions#NETWORK_NUM_BUFFERS} (fallback if the ones above do not exist)</li>_</ul>.__@param tmConfig task manager services configuration object_@param maxJvmHeapMemory the maximum JVM heap size__@return memory to use for network buffers (in bytes);public static long calculateNetworkBufferMemory(TaskManagerServicesConfiguration tmConfig, long maxJvmHeapMemory) {_		final NetworkEnvironmentConfiguration networkConfig = tmConfig.getNetworkConfig()___		final float networkBufFraction = networkConfig.networkBufFraction()__		final long networkBufMin = networkConfig.networkBufMin()__		final long networkBufMax = networkConfig.networkBufMax()___		if (networkBufMin == networkBufMax) {_			_			return networkBufMin__		}__		__		_		_		__		final MemoryType memType = tmConfig.getMemoryType()___		final long jvmHeapNoNet__		if (memType == MemoryType.HEAP) {_			jvmHeapNoNet = maxJvmHeapMemory__		} else if (memType == MemoryType.OFF_HEAP) {__			_			long configuredMemory = tmConfig.getConfiguredMemory() << 20_ __			if (configuredMemory > 0) {_				_				__				jvmHeapNoNet = maxJvmHeapMemory + configuredMemory__			} else {_				_				__				final float managedFraction = tmConfig.getMemoryFraction()__				jvmHeapNoNet = (long) (maxJvmHeapMemory / (1.0 - managedFraction))__			}_		} else {_			throw new RuntimeException("No supported memory type detected.")__		}__		_		_		_		final long networkBufBytes = Math.min(networkBufMax, Math.max(networkBufMin,_			(long) (jvmHeapNoNet / (1.0 - networkBufFraction) * networkBufFraction)))___		TaskManagerServicesConfiguration_			.checkConfigParameter(networkBufBytes < maxJvmHeapMemory,_				"(" + networkBufFraction + ", " + networkBufMin + ", " + networkBufMax + ")",_				"(" + TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key() + ", " +_					TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ")",_				"Network buffer memory size too large: " + networkBufBytes + " >= " +_					maxJvmHeapMemory + "(maximum JVM heap size)")___		return networkBufBytes__	};calculates,the,amount,of,memory,used,for,network,buffers,inside,the,current,jvm,instance,based,on,the,available,heap,or,the,max,heap,size,and,the,according,configuration,parameters,p,for,containers,or,when,started,via,scripts,if,started,with,a,memory,limit,and,set,to,use,off,heap,memory,the,maximum,heap,size,for,the,jvm,is,adjusted,accordingly,and,we,are,able,to,extract,the,intended,values,from,this,p,the,following,configuration,parameters,are,involved,ul,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,li,li,link,task,manager,options,and,li,li,link,task,manager,options,fallback,if,the,ones,above,do,not,exist,li,ul,param,tm,config,task,manager,services,configuration,object,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,memory,to,use,for,network,buffers,in,bytes;public,static,long,calculate,network,buffer,memory,task,manager,services,configuration,tm,config,long,max,jvm,heap,memory,final,network,environment,configuration,network,config,tm,config,get,network,config,final,float,network,buf,fraction,network,config,network,buf,fraction,final,long,network,buf,min,network,config,network,buf,min,final,long,network,buf,max,network,config,network,buf,max,if,network,buf,min,network,buf,max,return,network,buf,min,final,memory,type,mem,type,tm,config,get,memory,type,final,long,jvm,heap,no,net,if,mem,type,memory,type,heap,jvm,heap,no,net,max,jvm,heap,memory,else,if,mem,type,memory,type,long,configured,memory,tm,config,get,configured,memory,20,if,configured,memory,0,jvm,heap,no,net,max,jvm,heap,memory,configured,memory,else,final,float,managed,fraction,tm,config,get,memory,fraction,jvm,heap,no,net,long,max,jvm,heap,memory,1,0,managed,fraction,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,long,network,buf,bytes,math,min,network,buf,max,math,max,network,buf,min,long,jvm,heap,no,net,1,0,network,buf,fraction,network,buf,fraction,task,manager,services,configuration,check,config,parameter,network,buf,bytes,max,jvm,heap,memory,network,buf,fraction,network,buf,min,network,buf,max,task,manager,options,key,task,manager,options,key,task,manager,options,key,network,buffer,memory,size,too,large,network,buf,bytes,max,jvm,heap,memory,maximum,jvm,heap,size,return,network,buf,bytes
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1518680660;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration, maxJvmHeapMemory)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration, freeHeapMemoryWithDefrag, maxJvmHeapMemory)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)__		final TaskExecutorLocalStateStoresManager taskStateManager = new TaskExecutorLocalStateStoresManager()__		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService,_			taskStateManager)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,max,jvm,heap,memory,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,free,heap,memory,with,defrag,max,jvm,heap,memory,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,final,task,executor,local,state,stores,manager,task,state,manager,new,task,executor,local,state,stores,manager,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service,task,state,manager
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID, 			long freeHeapMemoryWithDefrag, 			long maxJvmHeapMemory) throws Exception;1518785736;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@param freeHeapMemoryWithDefrag an estimate of the size of the free heap memory_@param maxJvmHeapMemory the maximum JVM heap size_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID,_			long freeHeapMemoryWithDefrag,_			long maxJvmHeapMemory) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration, maxJvmHeapMemory)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration, freeHeapMemoryWithDefrag, maxJvmHeapMemory)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)__		final TaskExecutorLocalStateStoresManager taskStateManager = new TaskExecutorLocalStateStoresManager()__		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService,_			taskStateManager)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,param,free,heap,memory,with,defrag,an,estimate,of,the,size,of,the,free,heap,memory,param,max,jvm,heap,memory,the,maximum,jvm,heap,size,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,long,free,heap,memory,with,defrag,long,max,jvm,heap,memory,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,max,jvm,heap,memory,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,free,heap,memory,with,defrag,max,jvm,heap,memory,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,final,task,executor,local,state,stores,manager,task,state,manager,new,task,executor,local,state,stores,manager,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service,task,state,manager
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1482522860;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			networkEnvironmentConfiguration.numNetworkBuffers(),_			networkEnvironmentConfiguration.networkBufferSize(),_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateServer kvStateServer___		if (taskManagerServicesConfiguration.getQueryableStateConfig().enabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.port(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,network,environment,configuration,num,network,buffers,network,environment,configuration,network,buffer,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,task,manager,services,configuration,get,queryable,state,config,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,state,server,new,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1482522862;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			networkEnvironmentConfiguration.numNetworkBuffers(),_			networkEnvironmentConfiguration.networkBufferSize(),_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateServer kvStateServer___		if (taskManagerServicesConfiguration.getQueryableStateConfig().enabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.port(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,network,environment,configuration,num,network,buffers,network,environment,configuration,network,buffer,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,task,manager,services,configuration,get,queryable,state,config,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,state,server,new,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1482522862;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			networkEnvironmentConfiguration.numNetworkBuffers(),_			networkEnvironmentConfiguration.networkBufferSize(),_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateServer kvStateServer___		if (taskManagerServicesConfiguration.getQueryableStateConfig().enabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.port(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,network,environment,configuration,num,network,buffers,network,environment,configuration,network,buffer,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,task,manager,services,configuration,get,queryable,state,config,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,state,server,new,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1482522862;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			networkEnvironmentConfiguration.numNetworkBuffers(),_			networkEnvironmentConfiguration.networkBufferSize(),_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateServer kvStateServer___		if (taskManagerServicesConfiguration.getQueryableStateConfig().enabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.port(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,network,environment,configuration,num,network,buffers,network,environment,configuration,network,buffer,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,task,manager,services,configuration,get,queryable,state,config,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,state,server,new,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1482522863;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			networkEnvironmentConfiguration.numNetworkBuffers(),_			networkEnvironmentConfiguration.networkBufferSize(),_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateServer kvStateServer___		if (taskManagerServicesConfiguration.getQueryableStateConfig().enabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.port(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,network,environment,configuration,num,network,buffers,network,environment,configuration,network,buffer,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,task,manager,services,configuration,get,queryable,state,config,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,state,server,new,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1482522866;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			networkEnvironmentConfiguration.numNetworkBuffers(),_			networkEnvironmentConfiguration.networkBufferSize(),_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateServer kvStateServer___		if (taskManagerServicesConfiguration.getQueryableStateConfig().enabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.port(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,network,environment,configuration,num,network,buffers,network,environment,configuration,network,buffer,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,task,manager,services,configuration,get,queryable,state,config,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,state,server,new,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1489060856;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			networkEnvironmentConfiguration.numNetworkBuffers(),_			networkEnvironmentConfiguration.networkBufferSize(),_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateServer kvStateServer___		if (taskManagerServicesConfiguration.getQueryableStateConfig().enabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.port(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,network,environment,configuration,num,network,buffers,network,environment,configuration,network,buffer,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,task,manager,services,configuration,get,queryable,state,config,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,state,server,new,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1489149058;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			networkEnvironmentConfiguration.numNetworkBuffers(),_			networkEnvironmentConfiguration.networkBufferSize(),_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateServer kvStateServer___		if (taskManagerServicesConfiguration.getQueryableStateConfig().enabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.port(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.extraNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,network,environment,configuration,num,network,buffers,network,environment,configuration,network,buffer,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,task,manager,services,configuration,get,queryable,state,config,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,state,server,new,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,extra,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1494092429;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize,_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateServer kvStateServer___		if (taskManagerServicesConfiguration.getQueryableStateConfig().enabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.port(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.extraNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,task,manager,services,configuration,get,queryable,state,config,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,state,server,new,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,extra,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1494092513;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize,_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateServer kvStateServer___		if (taskManagerServicesConfiguration.getQueryableStateConfig().enabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.port(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,task,manager,services,configuration,get,queryable,state,config,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,state,server,new,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1498220069;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize,_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateServer kvStateServer___		if (taskManagerServicesConfiguration.getQueryableStateConfig().enabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.port(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,task,manager,services,configuration,get,queryable,state,config,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,state,server,new,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1507728810;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize,_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateServer kvStateServer = null___		if (taskManagerServicesConfiguration.getQueryableStateConfig().enabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvStateServer = QueryableStateUtils.createKvStateServer(_					taskManagerServicesConfiguration.getTaskManagerAddress(),_					qsConfig.port(),_					numNetworkThreads,_					numQueryThreads,_					kvStateRegistry,_					new DisabledKvStateRequestStats())__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,null,if,task,manager,services,configuration,get,queryable,state,config,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1507728812;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize,_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateClientProxy kvClientProxy = null__		KvStateServer kvStateServer = null___		if (taskManagerServicesConfiguration.getQueryableStateConfig().enabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_					taskManagerServicesConfiguration.getTaskManagerAddress(),_					qsConfig.port(),_					numNetworkThreads,_					numQueryThreads,_					new DisabledKvStateRequestStats())___			kvStateServer = QueryableStateUtils.createKvStateServer(_					taskManagerServicesConfiguration.getTaskManagerAddress(),_					0,_					numNetworkThreads,_					numQueryThreads,_					kvStateRegistry,_					new DisabledKvStateRequestStats())__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,client,proxy,kv,client,proxy,null,kv,state,server,kv,state,server,null,if,task,manager,services,configuration,get,queryable,state,config,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,port,num,network,threads,num,query,threads,new,disabled,kv,state,request,stats,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,0,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1508308828;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize,_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateClientProxy kvClientProxy = null__		KvStateServer kvStateServer = null___		if (taskManagerServicesConfiguration.getQueryableStateConfig().isEnabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_					taskManagerServicesConfiguration.getTaskManagerAddress(),_					qsConfig.ports(),_					numNetworkThreads,_					numQueryThreads,_					new DisabledKvStateRequestStats())___			kvStateServer = QueryableStateUtils.createKvStateServer(_					taskManagerServicesConfiguration.getTaskManagerAddress(),_					0,_					numNetworkThreads,_					numQueryThreads,_					kvStateRegistry,_					new DisabledKvStateRequestStats())__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,client,proxy,kv,client,proxy,null,kv,state,server,kv,state,server,null,if,task,manager,services,configuration,get,queryable,state,config,is,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,ports,num,network,threads,num,query,threads,new,disabled,kv,state,request,stats,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,0,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1508308828;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize,_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateClientProxy kvClientProxy = null__		KvStateServer kvStateServer = null___		if (taskManagerServicesConfiguration.getQueryableStateConfig().isEnabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_					taskManagerServicesConfiguration.getTaskManagerAddress(),_					qsConfig.getProxyPortRange(),_					numNetworkThreads,_					numQueryThreads,_					new DisabledKvStateRequestStats())___			kvStateServer = QueryableStateUtils.createKvStateServer(_					taskManagerServicesConfiguration.getTaskManagerAddress(),_					qsConfig.getStateServerPortRange(),_					numNetworkThreads,_					numQueryThreads,_					kvStateRegistry,_					new DisabledKvStateRequestStats())__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,client,proxy,kv,client,proxy,null,kv,state,server,kv,state,server,null,if,task,manager,services,configuration,get,queryable,state,config,is,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,network,threads,num,query,threads,new,disabled,kv,state,request,stats,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1509037054;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize,_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateClientProxy kvClientProxy = null__		KvStateServer kvStateServer = null___		if (taskManagerServicesConfiguration.getQueryableStateConfig().isEnabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_					taskManagerServicesConfiguration.getTaskManagerAddress(),_					qsConfig.getProxyPortRange(),_					numNetworkThreads,_					numQueryThreads,_					new DisabledKvStateRequestStats())___			kvStateServer = QueryableStateUtils.createKvStateServer(_					taskManagerServicesConfiguration.getTaskManagerAddress(),_					qsConfig.getStateServerPortRange(),_					numNetworkThreads,_					numQueryThreads,_					kvStateRegistry,_					new DisabledKvStateRequestStats())__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,client,proxy,kv,client,proxy,null,kv,state,server,kv,state,server,null,if,task,manager,services,configuration,get,queryable,state,config,is,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,network,threads,num,query,threads,new,disabled,kv,state,request,stats,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1509547920;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize,_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateClientProxy kvClientProxy = null__		KvStateServer kvStateServer = null___		if (taskManagerServicesConfiguration.getQueryableStateConfig().isEnabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_					taskManagerServicesConfiguration.getTaskManagerAddress(),_					qsConfig.getProxyPortRange(),_					numNetworkThreads,_					numQueryThreads,_					new DisabledKvStateRequestStats())___			kvStateServer = QueryableStateUtils.createKvStateServer(_					taskManagerServicesConfiguration.getTaskManagerAddress(),_					qsConfig.getStateServerPortRange(),_					numNetworkThreads,_					numQueryThreads,_					kvStateRegistry,_					new DisabledKvStateRequestStats())__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,client,proxy,kv,client,proxy,null,kv,state,server,kv,state,server,null,if,task,manager,services,configuration,get,queryable,state,config,is,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,network,threads,num,query,threads,new,disabled,kv,state,request,stats,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1509547921;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize,_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()__		KvStateClientProxy kvClientProxy = null__		KvStateServer kvStateServer = null___		if (taskManagerServicesConfiguration.getQueryableStateConfig().isEnabled()) {_			QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___			int numNetworkThreads = qsConfig.numServerThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numServerThreads()___			int numQueryThreads = qsConfig.numQueryThreads() == 0 ?_					taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numQueryThreads()___			kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_					taskManagerServicesConfiguration.getTaskManagerAddress(),_					qsConfig.getProxyPortRange(),_					numNetworkThreads,_					numQueryThreads,_					new DisabledKvStateRequestStats())___			kvStateServer = QueryableStateUtils.createKvStateServer(_					taskManagerServicesConfiguration.getTaskManagerAddress(),_					qsConfig.getStateServerPortRange(),_					numNetworkThreads,_					numQueryThreads,_					kvStateRegistry,_					new DisabledKvStateRequestStats())__		}__		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,client,proxy,kv,client,proxy,null,kv,state,server,kv,state,server,null,if,task,manager,services,configuration,get,queryable,state,config,is,enabled,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,network,threads,qs,config,num,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,server,threads,int,num,query,threads,qs,config,num,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,query,threads,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,network,threads,num,query,threads,new,disabled,kv,state,request,stats,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1510060074;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize,_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___		int numProxyServerNetworkThreads = qsConfig.numProxyServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyServerThreads()___		int numProxyServerQueryThreads = qsConfig.numProxyQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyQueryThreads()___		final KvStateClientProxy kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getProxyPortRange(),_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				new DisabledKvStateRequestStats())___		int numStateServerNetworkThreads = qsConfig.numStateServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateServerThreads()___		int numStateServerQueryThreads = qsConfig.numStateQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateQueryThreads()___		final KvStateServer kvStateServer = QueryableStateUtils.createKvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getStateServerPortRange(),_				numStateServerNetworkThreads,_				numStateServerQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())___		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,proxy,server,network,threads,qs,config,num,proxy,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,server,threads,int,num,proxy,server,query,threads,qs,config,num,proxy,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,query,threads,final,kv,state,client,proxy,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,proxy,server,network,threads,num,proxy,server,query,threads,new,disabled,kv,state,request,stats,int,num,state,server,network,threads,qs,config,num,state,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,server,threads,int,num,state,server,query,threads,qs,config,num,state,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,query,threads,final,kv,state,server,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,state,server,network,threads,num,state,server,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1511516912;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize)___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___		int numProxyServerNetworkThreads = qsConfig.numProxyServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyServerThreads()___		int numProxyServerQueryThreads = qsConfig.numProxyQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyQueryThreads()___		final KvStateClientProxy kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getProxyPortRange(),_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				new DisabledKvStateRequestStats())___		int numStateServerNetworkThreads = qsConfig.numStateServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateServerThreads()___		int numStateServerQueryThreads = qsConfig.numStateQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateQueryThreads()___		final KvStateServer kvStateServer = QueryableStateUtils.createKvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getStateServerPortRange(),_				numStateServerNetworkThreads,_				numStateServerQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())___		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,proxy,server,network,threads,qs,config,num,proxy,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,server,threads,int,num,proxy,server,query,threads,qs,config,num,proxy,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,query,threads,final,kv,state,client,proxy,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,proxy,server,network,threads,num,proxy,server,query,threads,new,disabled,kv,state,request,stats,int,num,state,server,network,threads,qs,config,num,state,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,server,threads,int,num,state,server,query,threads,qs,config,num,state,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,query,threads,final,kv,state,server,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,state,server,network,threads,num,state,server,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1516626397;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize)___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___		int numProxyServerNetworkThreads = qsConfig.numProxyServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyServerThreads()___		int numProxyServerQueryThreads = qsConfig.numProxyQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyQueryThreads()___		final KvStateClientProxy kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getProxyPortRange(),_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				new DisabledKvStateRequestStats())___		int numStateServerNetworkThreads = qsConfig.numStateServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateServerThreads()___		int numStateServerQueryThreads = qsConfig.numStateQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateQueryThreads()___		final KvStateServer kvStateServer = QueryableStateUtils.createKvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getStateServerPortRange(),_				numStateServerNetworkThreads,_				numStateServerQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())___		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,proxy,server,network,threads,qs,config,num,proxy,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,server,threads,int,num,proxy,server,query,threads,qs,config,num,proxy,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,query,threads,final,kv,state,client,proxy,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,proxy,server,network,threads,num,proxy,server,query,threads,new,disabled,kv,state,request,stats,int,num,state,server,network,threads,qs,config,num,state,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,server,threads,int,num,state,server,query,threads,qs,config,num,state,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,query,threads,final,kv,state,server,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,state,server,network,threads,num,state,server,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate
TaskManagerServices -> private static NetworkEnvironment createNetworkEnvironment( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException;1518433169;Creates the {@link NetworkEnvironment} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to construct the network environment from_@return Network environment_@throws IOException;private static NetworkEnvironment createNetworkEnvironment(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws IOException {__		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskManagerServicesConfiguration.getNetworkConfig()___		final long networkBuf = calculateNetworkBufferMemory(taskManagerServicesConfiguration)__		int segmentSize = networkEnvironmentConfiguration.networkBufferSize()___		_		final long numNetBuffersLong = networkBuf / segmentSize__		if (numNetBuffersLong > Integer.MAX_VALUE) {_			throw new IllegalArgumentException("The given number of memory bytes (" + networkBuf_				+ ") corresponds to more than MAX_INT pages.")__		}__		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			(int) numNetBuffersLong,_			segmentSize)___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig() != null) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		QueryableStateConfiguration qsConfig = taskManagerServicesConfiguration.getQueryableStateConfig()___		int numProxyServerNetworkThreads = qsConfig.numProxyServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyServerThreads()___		int numProxyServerQueryThreads = qsConfig.numProxyQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numProxyQueryThreads()___		final KvStateClientProxy kvClientProxy = QueryableStateUtils.createKvStateClientProxy(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getProxyPortRange(),_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				new DisabledKvStateRequestStats())___		int numStateServerNetworkThreads = qsConfig.numStateServerThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateServerThreads()___		int numStateServerQueryThreads = qsConfig.numStateQueryThreads() == 0 ?_				taskManagerServicesConfiguration.getNumberOfSlots() : qsConfig.numStateQueryThreads()___		final KvStateServer kvStateServer = QueryableStateUtils.createKvStateServer(_				taskManagerServicesConfiguration.getTaskManagerAddress(),_				qsConfig.getStateServerPortRange(),_				numStateServerNetworkThreads,_				numStateServerQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())___		_		return new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			kvClientProxy,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitionRequestMaxBackoff(),_			networkEnvironmentConfiguration.networkBuffersPerChannel(),_			networkEnvironmentConfiguration.floatingNetworkBuffersPerGate())__	};creates,the,link,network,environment,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,construct,the,network,environment,from,return,network,environment,throws,ioexception;private,static,network,environment,create,network,environment,task,manager,services,configuration,task,manager,services,configuration,throws,ioexception,network,environment,configuration,network,environment,configuration,task,manager,services,configuration,get,network,config,final,long,network,buf,calculate,network,buffer,memory,task,manager,services,configuration,int,segment,size,network,environment,configuration,network,buffer,size,final,long,num,net,buffers,long,network,buf,segment,size,if,num,net,buffers,long,integer,throw,new,illegal,argument,exception,the,given,number,of,memory,bytes,network,buf,corresponds,to,more,than,pages,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,int,num,net,buffers,long,segment,size,connection,manager,connection,manager,if,network,environment,configuration,netty,config,null,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,queryable,state,configuration,qs,config,task,manager,services,configuration,get,queryable,state,config,int,num,proxy,server,network,threads,qs,config,num,proxy,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,server,threads,int,num,proxy,server,query,threads,qs,config,num,proxy,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,proxy,query,threads,final,kv,state,client,proxy,kv,client,proxy,queryable,state,utils,create,kv,state,client,proxy,task,manager,services,configuration,get,task,manager,address,qs,config,get,proxy,port,range,num,proxy,server,network,threads,num,proxy,server,query,threads,new,disabled,kv,state,request,stats,int,num,state,server,network,threads,qs,config,num,state,server,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,server,threads,int,num,state,server,query,threads,qs,config,num,state,query,threads,0,task,manager,services,configuration,get,number,of,slots,qs,config,num,state,query,threads,final,kv,state,server,kv,state,server,queryable,state,utils,create,kv,state,server,task,manager,services,configuration,get,task,manager,address,qs,config,get,state,server,port,range,num,state,server,network,threads,num,state,server,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,return,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,kv,client,proxy,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partition,request,max,backoff,network,environment,configuration,network,buffers,per,channel,network,environment,configuration,floating,network,buffers,per,gate
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1482522860;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricsRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		return new TaskManagerServices(taskManagerLocation, memoryManager, ioManager, network, metricsRegistry)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metrics,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metrics,registry
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1482522862;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1482522862;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42L))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(new ScheduledThreadPoolExecutor(1))___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)__		_		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache,_			taskSlotTable)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42l,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache,task,slot,table
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1482522862;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42L))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(new ScheduledThreadPoolExecutor(1))___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(resourceID)__		_		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42l,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,resource,id,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1482522863;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42L))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(new ScheduledThreadPoolExecutor(1))___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)__		_		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42l,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1482522866;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42L))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)__		_		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42l,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1489060856;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)__		_		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1489149058;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)__		_		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1494092429;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)__		_		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1494092513;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)__		_		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1498220069;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)__		_		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1507728810;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1507728812;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1508308828;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1508308828;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1509037054;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final MetricRegistry metricRegistry = new MetricRegistry(_				taskManagerServicesConfiguration.getMetricRegistryConfiguration())___		final TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(_			metricRegistry,_			taskManagerLocation.getHostname(),_			taskManagerLocation.getResourceID().toString())___		_		TaskExecutorMetricsInitializer.instantiateStatusMetrics(taskManagerMetricGroup, network)___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			metricRegistry,_			taskManagerMetricGroup,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,metric,registry,metric,registry,new,metric,registry,task,manager,services,configuration,get,metric,registry,configuration,final,task,manager,metric,group,task,manager,metric,group,new,task,manager,metric,group,metric,registry,task,manager,location,get,hostname,task,manager,location,get,resource,id,to,string,task,executor,metrics,initializer,instantiate,status,metrics,task,manager,metric,group,network,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,metric,registry,task,manager,metric,group,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1509547921;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1510060074;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1511516912;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)___		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1516626397;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)__		final TaskExecutorLocalStateStoresManager taskStateManager = new TaskExecutorLocalStateStoresManager()__		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService,_			taskStateManager)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,final,task,executor,local,state,stores,manager,task,state,manager,new,task,executor,local,state,stores,manager,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service,task,state,manager
TaskManagerServices -> public static TaskManagerServices fromConfiguration( 			TaskManagerServicesConfiguration taskManagerServicesConfiguration, 			ResourceID resourceID) throws Exception;1518433169;Creates and returns the task manager services.__@param resourceID resource ID of the task manager_@param taskManagerServicesConfiguration task manager configuration_@return task manager components_@throws Exception;public static TaskManagerServices fromConfiguration(_			TaskManagerServicesConfiguration taskManagerServicesConfiguration,_			ResourceID resourceID) throws Exception {__		_		checkTempDirs(taskManagerServicesConfiguration.getTmpDirPaths())___		final NetworkEnvironment network = createNetworkEnvironment(taskManagerServicesConfiguration)__		network.start()___		final TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerServicesConfiguration.getTaskManagerAddress(),_			network.getConnectionManager().getDataPort())___		_		final MemoryManager memoryManager = createMemoryManager(taskManagerServicesConfiguration)___		_		final IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths())___		final BroadcastVariableManager broadcastVariableManager = new BroadcastVariableManager()___		final FileCache fileCache = new FileCache(taskManagerServicesConfiguration.getTmpDirPaths())___		final List<ResourceProfile> resourceProfiles = new ArrayList<>(taskManagerServicesConfiguration.getNumberOfSlots())___		for (int i = 0_ i < taskManagerServicesConfiguration.getNumberOfSlots()_ i++) {_			resourceProfiles.add(new ResourceProfile(1.0, 42))__		}__		final TimerService<AllocationID> timerService = new TimerService<>(_			new ScheduledThreadPoolExecutor(1),_			taskManagerServicesConfiguration.getTimerServiceShutdownTimeout())___		final TaskSlotTable taskSlotTable = new TaskSlotTable(resourceProfiles, timerService)___		final JobManagerTable jobManagerTable = new JobManagerTable()___		final JobLeaderService jobLeaderService = new JobLeaderService(taskManagerLocation)__		final TaskExecutorLocalStateStoresManager taskStateManager = new TaskExecutorLocalStateStoresManager()__		return new TaskManagerServices(_			taskManagerLocation,_			memoryManager,_			ioManager,_			network,_			broadcastVariableManager,_			fileCache,_			taskSlotTable,_			jobManagerTable,_			jobLeaderService,_			taskStateManager)__	};creates,and,returns,the,task,manager,services,param,resource,id,resource,id,of,the,task,manager,param,task,manager,services,configuration,task,manager,configuration,return,task,manager,components,throws,exception;public,static,task,manager,services,from,configuration,task,manager,services,configuration,task,manager,services,configuration,resource,id,resource,id,throws,exception,check,temp,dirs,task,manager,services,configuration,get,tmp,dir,paths,final,network,environment,network,create,network,environment,task,manager,services,configuration,network,start,final,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,services,configuration,get,task,manager,address,network,get,connection,manager,get,data,port,final,memory,manager,memory,manager,create,memory,manager,task,manager,services,configuration,final,iomanager,io,manager,new,iomanager,async,task,manager,services,configuration,get,tmp,dir,paths,final,broadcast,variable,manager,broadcast,variable,manager,new,broadcast,variable,manager,final,file,cache,file,cache,new,file,cache,task,manager,services,configuration,get,tmp,dir,paths,final,list,resource,profile,resource,profiles,new,array,list,task,manager,services,configuration,get,number,of,slots,for,int,i,0,i,task,manager,services,configuration,get,number,of,slots,i,resource,profiles,add,new,resource,profile,1,0,42,final,timer,service,allocation,id,timer,service,new,timer,service,new,scheduled,thread,pool,executor,1,task,manager,services,configuration,get,timer,service,shutdown,timeout,final,task,slot,table,task,slot,table,new,task,slot,table,resource,profiles,timer,service,final,job,manager,table,job,manager,table,new,job,manager,table,final,job,leader,service,job,leader,service,new,job,leader,service,task,manager,location,final,task,executor,local,state,stores,manager,task,state,manager,new,task,executor,local,state,stores,manager,return,new,task,manager,services,task,manager,location,memory,manager,io,manager,network,broadcast,variable,manager,file,cache,task,slot,table,job,manager,table,job,leader,service,task,state,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1482522860;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1482522862;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1482522862;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1482522862;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1482522863;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1482522866;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1489060856;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1489149058;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1494092429;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1494092513;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1498220069;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1507728810;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1507728812;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1508308828;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1508308828;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1509037054;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1509547920;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1509547921;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1510060074;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		MemoryType memType = taskManagerServicesConfiguration.getNetworkConfig().memoryType()___		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,memory,type,mem,type,task,manager,services,configuration,get,network,config,memory,type,long,configured,memory,task,manager,services,configuration,get,configured,memory,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1511516912;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		MemoryType memType = taskManagerServicesConfiguration.getMemoryType()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long maxJvmHeap = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxJvmHeap / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,long,configured,memory,task,manager,services,configuration,get,configured,memory,memory,type,mem,type,task,manager,services,configuration,get,memory,type,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,jvm,heap,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,jvm,heap,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1516626397;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		MemoryType memType = taskManagerServicesConfiguration.getMemoryType()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long maxJvmHeap = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxJvmHeap / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,long,configured,memory,task,manager,services,configuration,get,configured,memory,memory,type,mem,type,task,manager,services,configuration,get,memory,type,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,jvm,heap,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,jvm,heap,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception;1518433169;Creates a {@link MemoryManager} from the given {@link TaskManagerServicesConfiguration}.__@param taskManagerServicesConfiguration to create the memory manager from_@return Memory manager_@throws Exception;private static MemoryManager createMemoryManager(TaskManagerServicesConfiguration taskManagerServicesConfiguration) throws Exception {_		_		__		_		long configuredMemory = taskManagerServicesConfiguration.getConfiguredMemory()___		MemoryType memType = taskManagerServicesConfiguration.getMemoryType()___		final long memorySize___		boolean preAllocateMemory = taskManagerServicesConfiguration.isPreAllocateMemory()___		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			_			float memoryFraction = taskManagerServicesConfiguration.getMemoryFraction()___			if (memType == MemoryType.HEAP) {_				_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						memoryFraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , memoryFraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				_				_				_				long maxJvmHeap = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxJvmHeap / (1.0 - memoryFraction) * memoryFraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						memoryFraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", memoryFraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskManagerServicesConfiguration.getNumberOfSlots(),_				taskManagerServicesConfiguration.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}_		return memoryManager__	};creates,a,link,memory,manager,from,the,given,link,task,manager,services,configuration,param,task,manager,services,configuration,to,create,the,memory,manager,from,return,memory,manager,throws,exception;private,static,memory,manager,create,memory,manager,task,manager,services,configuration,task,manager,services,configuration,throws,exception,long,configured,memory,task,manager,services,configuration,get,configured,memory,memory,type,mem,type,task,manager,services,configuration,get,memory,type,final,long,memory,size,boolean,pre,allocate,memory,task,manager,services,configuration,is,pre,allocate,memory,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,memory,fraction,task,manager,services,configuration,get,memory,fraction,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,memory,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,memory,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,jvm,heap,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,jvm,heap,1,0,memory,fraction,memory,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,memory,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,memory,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,manager,services,configuration,get,number,of,slots,task,manager,services,configuration,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,return,memory,manager
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1482522860;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1482522862;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1482522862;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1482522862;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1482522863;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1482522866;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1489060856;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1489149058;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1494092429;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1494092513;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1498220069;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1507728810;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1507728812;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1508308828;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1508308828;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1509037054;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1509547920;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1509547921;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1510060074;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1511516912;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1516626397;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1518433169;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1518680660;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1518785736;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1519568061;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1525420604;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1526313052;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1530798894;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1538127492;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1547115122;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskManagerServices -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1549360056;Validates that all the directories denoted by the strings do actually exist or can be created, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws IOException Thrown if any of the directories does not exist and cannot be created or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					if (!file.mkdirs()) {_						throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist and could not be created.")__					}_				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double) usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,or,can,be,created,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,ioexception,thrown,if,any,of,the,directories,does,not,exist,and,cannot,be,created,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,if,file,mkdirs,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,and,could,not,be,created,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
