commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Nonnull public DirectoryStateHandle getDirectoryStateHandle() {     return directoryStateHandle. }
false;public;0;5;;@Nonnull @Override public KeyGroupRange getKeyGroupRange() {     return keyGroupRange. }
false;public;0;4;;@Override public void discardState() throws Exception {     directoryStateHandle.discardState(). }
false;public;0;4;;@Override public long getStateSize() {     return directoryStateHandle.getStateSize(). }
false;public;1;4;;@Override public KeyedStateHandle getIntersection(KeyGroupRange otherKeyGroupRange) {     return this.keyGroupRange.getIntersection(otherKeyGroupRange).getNumberOfKeyGroups() > 0 ? this : null. }
false;public;1;4;;@Override public void registerSharedStates(SharedStateRegistry stateRegistry) { // Nothing to do, this is for local use only. }
false;public;1;16;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     DirectoryKeyedStateHandle that = (DirectoryKeyedStateHandle) o.     if (!getDirectoryStateHandle().equals(that.getDirectoryStateHandle())) {         return false.     }     return getKeyGroupRange().equals(that.getKeyGroupRange()). }
false;public;0;6;;@Override public int hashCode() {     int result = getDirectoryStateHandle().hashCode().     result = 31 * result + getKeyGroupRange().hashCode().     return result. }
false;public;0;7;;@Override public String toString() {     return "DirectoryKeyedStateHandle{" + "directoryStateHandle=" + directoryStateHandle + ", keyGroupRange=" + keyGroupRange + '}'. }
