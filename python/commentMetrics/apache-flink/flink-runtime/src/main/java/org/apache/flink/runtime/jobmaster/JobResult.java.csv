# id;timestamp;commentText;codeText;commentWords;codeWords
JobResult -> public boolean isSuccess();1515669170;Returns {@code true} if the job finished successfully.;public boolean isSuccess() {_		return serializedThrowable == null__	};returns,code,true,if,the,job,finished,successfully;public,boolean,is,success,return,serialized,throwable,null
JobResult -> public boolean isSuccess();1516970986;Returns {@code true} if the job finished successfully.;public boolean isSuccess() {_		return serializedThrowable == null__	};returns,code,true,if,the,job,finished,successfully;public,boolean,is,success,return,serialized,throwable,null
JobResult -> public boolean isSuccess();1519249745;Returns {@code true} if the job finished successfully.;public boolean isSuccess() {_		return serializedThrowable == null__	};returns,code,true,if,the,job,finished,successfully;public,boolean,is,success,return,serialized,throwable,null
JobResult -> public boolean isSuccess();1522049586;Returns {@code true} if the job finished successfully.;public boolean isSuccess() {_		return serializedThrowable == null__	};returns,code,true,if,the,job,finished,successfully;public,boolean,is,success,return,serialized,throwable,null
JobResult -> public boolean isSuccess();1522269634;Returns {@code true} if the job finished successfully.;public boolean isSuccess() {_		return serializedThrowable == null__	};returns,code,true,if,the,job,finished,successfully;public,boolean,is,success,return,serialized,throwable,null
JobResult -> public boolean isSuccess();1538042094;Returns {@code true} if the job finished successfully.;public boolean isSuccess() {_		return applicationStatus == ApplicationStatus.SUCCEEDED || (applicationStatus == ApplicationStatus.UNKNOWN && serializedThrowable == null)__	};returns,code,true,if,the,job,finished,successfully;public,boolean,is,success,return,application,status,application,status,succeeded,application,status,application,status,unknown,serialized,throwable,null
JobResult -> public JobExecutionResult toJobExecutionResult(ClassLoader classLoader) throws WrappedJobException, IOException, ClassNotFoundException;1519249745;Converts the {@link JobResult} to a {@link JobExecutionResult}.__@param classLoader to use for deserialization_@return JobExecutionResult_@throws WrappedJobException if the JobResult contains a serialized exception_@throws IOException if the accumulator could not be deserialized_@throws ClassNotFoundException if the accumulator could not deserialized;public JobExecutionResult toJobExecutionResult(ClassLoader classLoader) throws WrappedJobException, IOException, ClassNotFoundException {_		if (serializedThrowable != null) {_			final Throwable throwable = serializedThrowable.deserializeError(classLoader)__			throw new WrappedJobException(throwable)__		}__		return new JobExecutionResult(_			jobId,_			netRuntime,_			AccumulatorHelper.deserializeAccumulators(_				accumulatorResults,_				classLoader))__	};converts,the,link,job,result,to,a,link,job,execution,result,param,class,loader,to,use,for,deserialization,return,job,execution,result,throws,wrapped,job,exception,if,the,job,result,contains,a,serialized,exception,throws,ioexception,if,the,accumulator,could,not,be,deserialized,throws,class,not,found,exception,if,the,accumulator,could,not,deserialized;public,job,execution,result,to,job,execution,result,class,loader,class,loader,throws,wrapped,job,exception,ioexception,class,not,found,exception,if,serialized,throwable,null,final,throwable,throwable,serialized,throwable,deserialize,error,class,loader,throw,new,wrapped,job,exception,throwable,return,new,job,execution,result,job,id,net,runtime,accumulator,helper,deserialize,accumulators,accumulator,results,class,loader
JobResult -> public JobExecutionResult toJobExecutionResult(ClassLoader classLoader) throws WrappedJobException, IOException, ClassNotFoundException;1522049586;Converts the {@link JobResult} to a {@link JobExecutionResult}.__@param classLoader to use for deserialization_@return JobExecutionResult_@throws WrappedJobException if the JobResult contains a serialized exception_@throws IOException if the accumulator could not be deserialized_@throws ClassNotFoundException if the accumulator could not deserialized;public JobExecutionResult toJobExecutionResult(ClassLoader classLoader) throws WrappedJobException, IOException, ClassNotFoundException {_		if (serializedThrowable != null) {_			final Throwable throwable = serializedThrowable.deserializeError(classLoader)__			throw new WrappedJobException(throwable)__		}__		return new JobExecutionResult(_			jobId,_			netRuntime,_			AccumulatorHelper.deserializeAccumulators(_				accumulatorResults,_				classLoader))__	};converts,the,link,job,result,to,a,link,job,execution,result,param,class,loader,to,use,for,deserialization,return,job,execution,result,throws,wrapped,job,exception,if,the,job,result,contains,a,serialized,exception,throws,ioexception,if,the,accumulator,could,not,be,deserialized,throws,class,not,found,exception,if,the,accumulator,could,not,deserialized;public,job,execution,result,to,job,execution,result,class,loader,class,loader,throws,wrapped,job,exception,ioexception,class,not,found,exception,if,serialized,throwable,null,final,throwable,throwable,serialized,throwable,deserialize,error,class,loader,throw,new,wrapped,job,exception,throwable,return,new,job,execution,result,job,id,net,runtime,accumulator,helper,deserialize,accumulators,accumulator,results,class,loader
JobResult -> public JobExecutionResult toJobExecutionResult(ClassLoader classLoader) throws WrappedJobException, IOException, ClassNotFoundException;1522269634;Converts the {@link JobResult} to a {@link JobExecutionResult}.__@param classLoader to use for deserialization_@return JobExecutionResult_@throws WrappedJobException if the JobResult contains a serialized exception_@throws IOException if the accumulator could not be deserialized_@throws ClassNotFoundException if the accumulator could not deserialized;public JobExecutionResult toJobExecutionResult(ClassLoader classLoader) throws WrappedJobException, IOException, ClassNotFoundException {_		if (serializedThrowable != null) {_			final Throwable throwable = serializedThrowable.deserializeError(classLoader)__			throw new WrappedJobException(throwable)__		}__		return new JobExecutionResult(_			jobId,_			netRuntime,_			AccumulatorHelper.deserializeAccumulators(_				accumulatorResults,_				classLoader))__	};converts,the,link,job,result,to,a,link,job,execution,result,param,class,loader,to,use,for,deserialization,return,job,execution,result,throws,wrapped,job,exception,if,the,job,result,contains,a,serialized,exception,throws,ioexception,if,the,accumulator,could,not,be,deserialized,throws,class,not,found,exception,if,the,accumulator,could,not,deserialized;public,job,execution,result,to,job,execution,result,class,loader,class,loader,throws,wrapped,job,exception,ioexception,class,not,found,exception,if,serialized,throwable,null,final,throwable,throwable,serialized,throwable,deserialize,error,class,loader,throw,new,wrapped,job,exception,throwable,return,new,job,execution,result,job,id,net,runtime,accumulator,helper,deserialize,accumulators,accumulator,results,class,loader
JobResult -> public Optional<SerializedThrowable> getSerializedThrowable();1515669170;Returns an empty {@code Optional} if the job finished successfully, otherwise the_{@code Optional} will carry the failure cause.;public Optional<SerializedThrowable> getSerializedThrowable() {_		return Optional.ofNullable(serializedThrowable)__	};returns,an,empty,code,optional,if,the,job,finished,successfully,otherwise,the,code,optional,will,carry,the,failure,cause;public,optional,serialized,throwable,get,serialized,throwable,return,optional,of,nullable,serialized,throwable
JobResult -> public Optional<SerializedThrowable> getSerializedThrowable();1516970986;Returns an empty {@code Optional} if the job finished successfully, otherwise the_{@code Optional} will carry the failure cause.;public Optional<SerializedThrowable> getSerializedThrowable() {_		return Optional.ofNullable(serializedThrowable)__	};returns,an,empty,code,optional,if,the,job,finished,successfully,otherwise,the,code,optional,will,carry,the,failure,cause;public,optional,serialized,throwable,get,serialized,throwable,return,optional,of,nullable,serialized,throwable
JobResult -> public Optional<SerializedThrowable> getSerializedThrowable();1519249745;Returns an empty {@code Optional} if the job finished successfully, otherwise the_{@code Optional} will carry the failure cause.;public Optional<SerializedThrowable> getSerializedThrowable() {_		return Optional.ofNullable(serializedThrowable)__	};returns,an,empty,code,optional,if,the,job,finished,successfully,otherwise,the,code,optional,will,carry,the,failure,cause;public,optional,serialized,throwable,get,serialized,throwable,return,optional,of,nullable,serialized,throwable
JobResult -> public Optional<SerializedThrowable> getSerializedThrowable();1522049586;Returns an empty {@code Optional} if the job finished successfully, otherwise the_{@code Optional} will carry the failure cause.;public Optional<SerializedThrowable> getSerializedThrowable() {_		return Optional.ofNullable(serializedThrowable)__	};returns,an,empty,code,optional,if,the,job,finished,successfully,otherwise,the,code,optional,will,carry,the,failure,cause;public,optional,serialized,throwable,get,serialized,throwable,return,optional,of,nullable,serialized,throwable
JobResult -> public Optional<SerializedThrowable> getSerializedThrowable();1522269634;Returns an empty {@code Optional} if the job finished successfully, otherwise the_{@code Optional} will carry the failure cause.;public Optional<SerializedThrowable> getSerializedThrowable() {_		return Optional.ofNullable(serializedThrowable)__	};returns,an,empty,code,optional,if,the,job,finished,successfully,otherwise,the,code,optional,will,carry,the,failure,cause;public,optional,serialized,throwable,get,serialized,throwable,return,optional,of,nullable,serialized,throwable
JobResult -> public Optional<SerializedThrowable> getSerializedThrowable();1538042094;Returns an empty {@code Optional} if the job finished successfully, otherwise the_{@code Optional} will carry the failure cause.;public Optional<SerializedThrowable> getSerializedThrowable() {_		return Optional.ofNullable(serializedThrowable)__	};returns,an,empty,code,optional,if,the,job,finished,successfully,otherwise,the,code,optional,will,carry,the,failure,cause;public,optional,serialized,throwable,get,serialized,throwable,return,optional,of,nullable,serialized,throwable
JobResult -> public static JobResult createFrom(AccessExecutionGraph accessExecutionGraph);1516970986;Creates the {@link JobResult} from the given {@link AccessExecutionGraph} which_must be in a globally terminal state.__@param accessExecutionGraph to create the JobResult from_@return JobResult of the given AccessExecutionGraph;public static JobResult createFrom(AccessExecutionGraph accessExecutionGraph) {_		final JobID jobId = accessExecutionGraph.getJobID()__		final JobStatus jobStatus = accessExecutionGraph.getState()___		checkArgument(_			jobStatus.isGloballyTerminalState(),_			"The job " + accessExecutionGraph.getJobName() + '(' + jobId + ") is not in a globally " +_				"terminal state. It is in state " + jobStatus + '.')___		final JobResult.Builder builder = new JobResult.Builder()__		builder.jobId(jobId)___		final long netRuntime = accessExecutionGraph.getStatusTimestamp(jobStatus) - accessExecutionGraph.getStatusTimestamp(JobStatus.CREATED)__		builder.netRuntime(netRuntime)__		builder.accumulatorResults(accessExecutionGraph.getAccumulatorsSerialized())___		if (jobStatus != JobStatus.FINISHED) {_			final ErrorInfo errorInfo = accessExecutionGraph.getFailureInfo()___			if (errorInfo != null) {_				builder.serializedThrowable(errorInfo.getException())__			}_		}__		return builder.build()__	};creates,the,link,job,result,from,the,given,link,access,execution,graph,which,must,be,in,a,globally,terminal,state,param,access,execution,graph,to,create,the,job,result,from,return,job,result,of,the,given,access,execution,graph;public,static,job,result,create,from,access,execution,graph,access,execution,graph,final,job,id,job,id,access,execution,graph,get,job,id,final,job,status,job,status,access,execution,graph,get,state,check,argument,job,status,is,globally,terminal,state,the,job,access,execution,graph,get,job,name,job,id,is,not,in,a,globally,terminal,state,it,is,in,state,job,status,final,job,result,builder,builder,new,job,result,builder,builder,job,id,job,id,final,long,net,runtime,access,execution,graph,get,status,timestamp,job,status,access,execution,graph,get,status,timestamp,job,status,created,builder,net,runtime,net,runtime,builder,accumulator,results,access,execution,graph,get,accumulators,serialized,if,job,status,job,status,finished,final,error,info,error,info,access,execution,graph,get,failure,info,if,error,info,null,builder,serialized,throwable,error,info,get,exception,return,builder,build
JobResult -> public static JobResult createFrom(AccessExecutionGraph accessExecutionGraph);1519249745;Creates the {@link JobResult} from the given {@link AccessExecutionGraph} which_must be in a globally terminal state.__@param accessExecutionGraph to create the JobResult from_@return JobResult of the given AccessExecutionGraph;public static JobResult createFrom(AccessExecutionGraph accessExecutionGraph) {_		final JobID jobId = accessExecutionGraph.getJobID()__		final JobStatus jobStatus = accessExecutionGraph.getState()___		checkArgument(_			jobStatus.isGloballyTerminalState(),_			"The job " + accessExecutionGraph.getJobName() + '(' + jobId + ") is not in a globally " +_				"terminal state. It is in state " + jobStatus + '.')___		final JobResult.Builder builder = new JobResult.Builder()__		builder.jobId(jobId)___		final long netRuntime = accessExecutionGraph.getStatusTimestamp(jobStatus) - accessExecutionGraph.getStatusTimestamp(JobStatus.CREATED)__		builder.netRuntime(netRuntime)__		builder.accumulatorResults(accessExecutionGraph.getAccumulatorsSerialized())___		if (jobStatus != JobStatus.FINISHED) {_			final ErrorInfo errorInfo = accessExecutionGraph.getFailureInfo()___			if (errorInfo != null) {_				builder.serializedThrowable(errorInfo.getException())__			}_		}__		return builder.build()__	};creates,the,link,job,result,from,the,given,link,access,execution,graph,which,must,be,in,a,globally,terminal,state,param,access,execution,graph,to,create,the,job,result,from,return,job,result,of,the,given,access,execution,graph;public,static,job,result,create,from,access,execution,graph,access,execution,graph,final,job,id,job,id,access,execution,graph,get,job,id,final,job,status,job,status,access,execution,graph,get,state,check,argument,job,status,is,globally,terminal,state,the,job,access,execution,graph,get,job,name,job,id,is,not,in,a,globally,terminal,state,it,is,in,state,job,status,final,job,result,builder,builder,new,job,result,builder,builder,job,id,job,id,final,long,net,runtime,access,execution,graph,get,status,timestamp,job,status,access,execution,graph,get,status,timestamp,job,status,created,builder,net,runtime,net,runtime,builder,accumulator,results,access,execution,graph,get,accumulators,serialized,if,job,status,job,status,finished,final,error,info,error,info,access,execution,graph,get,failure,info,if,error,info,null,builder,serialized,throwable,error,info,get,exception,return,builder,build
JobResult -> public static JobResult createFrom(AccessExecutionGraph accessExecutionGraph);1522049586;Creates the {@link JobResult} from the given {@link AccessExecutionGraph} which_must be in a globally terminal state.__@param accessExecutionGraph to create the JobResult from_@return JobResult of the given AccessExecutionGraph;public static JobResult createFrom(AccessExecutionGraph accessExecutionGraph) {_		final JobID jobId = accessExecutionGraph.getJobID()__		final JobStatus jobStatus = accessExecutionGraph.getState()___		checkArgument(_			jobStatus.isGloballyTerminalState(),_			"The job " + accessExecutionGraph.getJobName() + '(' + jobId + ") is not in a globally " +_				"terminal state. It is in state " + jobStatus + '.')___		final JobResult.Builder builder = new JobResult.Builder()__		builder.jobId(jobId)___		final long netRuntime = accessExecutionGraph.getStatusTimestamp(jobStatus) - accessExecutionGraph.getStatusTimestamp(JobStatus.CREATED)__		builder.netRuntime(netRuntime)__		builder.accumulatorResults(accessExecutionGraph.getAccumulatorsSerialized())___		if (jobStatus != JobStatus.FINISHED) {_			final ErrorInfo errorInfo = accessExecutionGraph.getFailureInfo()___			if (errorInfo != null) {_				builder.serializedThrowable(errorInfo.getException())__			}_		}__		return builder.build()__	};creates,the,link,job,result,from,the,given,link,access,execution,graph,which,must,be,in,a,globally,terminal,state,param,access,execution,graph,to,create,the,job,result,from,return,job,result,of,the,given,access,execution,graph;public,static,job,result,create,from,access,execution,graph,access,execution,graph,final,job,id,job,id,access,execution,graph,get,job,id,final,job,status,job,status,access,execution,graph,get,state,check,argument,job,status,is,globally,terminal,state,the,job,access,execution,graph,get,job,name,job,id,is,not,in,a,globally,terminal,state,it,is,in,state,job,status,final,job,result,builder,builder,new,job,result,builder,builder,job,id,job,id,final,long,net,runtime,access,execution,graph,get,status,timestamp,job,status,access,execution,graph,get,status,timestamp,job,status,created,builder,net,runtime,net,runtime,builder,accumulator,results,access,execution,graph,get,accumulators,serialized,if,job,status,job,status,finished,final,error,info,error,info,access,execution,graph,get,failure,info,if,error,info,null,builder,serialized,throwable,error,info,get,exception,return,builder,build
JobResult -> public static JobResult createFrom(AccessExecutionGraph accessExecutionGraph);1522269634;Creates the {@link JobResult} from the given {@link AccessExecutionGraph} which_must be in a globally terminal state.__@param accessExecutionGraph to create the JobResult from_@return JobResult of the given AccessExecutionGraph;public static JobResult createFrom(AccessExecutionGraph accessExecutionGraph) {_		final JobID jobId = accessExecutionGraph.getJobID()__		final JobStatus jobStatus = accessExecutionGraph.getState()___		checkArgument(_			jobStatus.isGloballyTerminalState(),_			"The job " + accessExecutionGraph.getJobName() + '(' + jobId + ") is not in a globally " +_				"terminal state. It is in state " + jobStatus + '.')___		final JobResult.Builder builder = new JobResult.Builder()__		builder.jobId(jobId)___		final long netRuntime = accessExecutionGraph.getStatusTimestamp(jobStatus) - accessExecutionGraph.getStatusTimestamp(JobStatus.CREATED)__		_		final long guardedNetRuntime = Math.max(netRuntime, 0L)__		builder.netRuntime(guardedNetRuntime)__		builder.accumulatorResults(accessExecutionGraph.getAccumulatorsSerialized())___		if (jobStatus != JobStatus.FINISHED) {_			final ErrorInfo errorInfo = accessExecutionGraph.getFailureInfo()___			if (errorInfo != null) {_				builder.serializedThrowable(errorInfo.getException())__			}_		}__		return builder.build()__	};creates,the,link,job,result,from,the,given,link,access,execution,graph,which,must,be,in,a,globally,terminal,state,param,access,execution,graph,to,create,the,job,result,from,return,job,result,of,the,given,access,execution,graph;public,static,job,result,create,from,access,execution,graph,access,execution,graph,final,job,id,job,id,access,execution,graph,get,job,id,final,job,status,job,status,access,execution,graph,get,state,check,argument,job,status,is,globally,terminal,state,the,job,access,execution,graph,get,job,name,job,id,is,not,in,a,globally,terminal,state,it,is,in,state,job,status,final,job,result,builder,builder,new,job,result,builder,builder,job,id,job,id,final,long,net,runtime,access,execution,graph,get,status,timestamp,job,status,access,execution,graph,get,status,timestamp,job,status,created,final,long,guarded,net,runtime,math,max,net,runtime,0l,builder,net,runtime,guarded,net,runtime,builder,accumulator,results,access,execution,graph,get,accumulators,serialized,if,job,status,job,status,finished,final,error,info,error,info,access,execution,graph,get,failure,info,if,error,info,null,builder,serialized,throwable,error,info,get,exception,return,builder,build
JobResult -> public static JobResult createFrom(AccessExecutionGraph accessExecutionGraph);1538042094;Creates the {@link JobResult} from the given {@link AccessExecutionGraph} which_must be in a globally terminal state.__@param accessExecutionGraph to create the JobResult from_@return JobResult of the given AccessExecutionGraph;public static JobResult createFrom(AccessExecutionGraph accessExecutionGraph) {_		final JobID jobId = accessExecutionGraph.getJobID()__		final JobStatus jobStatus = accessExecutionGraph.getState()___		checkArgument(_			jobStatus.isGloballyTerminalState(),_			"The job " + accessExecutionGraph.getJobName() + '(' + jobId + ") is not in a globally " +_				"terminal state. It is in state " + jobStatus + '.')___		final JobResult.Builder builder = new JobResult.Builder()__		builder.jobId(jobId)___		builder.applicationStatus(ApplicationStatus.fromJobStatus(accessExecutionGraph.getState()))___		final long netRuntime = accessExecutionGraph.getStatusTimestamp(jobStatus) - accessExecutionGraph.getStatusTimestamp(JobStatus.CREATED)__		_		final long guardedNetRuntime = Math.max(netRuntime, 0L)__		builder.netRuntime(guardedNetRuntime)__		builder.accumulatorResults(accessExecutionGraph.getAccumulatorsSerialized())___		if (jobStatus != JobStatus.FINISHED) {_			final ErrorInfo errorInfo = accessExecutionGraph.getFailureInfo()___			if (errorInfo != null) {_				builder.serializedThrowable(errorInfo.getException())__			}_		}__		return builder.build()__	};creates,the,link,job,result,from,the,given,link,access,execution,graph,which,must,be,in,a,globally,terminal,state,param,access,execution,graph,to,create,the,job,result,from,return,job,result,of,the,given,access,execution,graph;public,static,job,result,create,from,access,execution,graph,access,execution,graph,final,job,id,job,id,access,execution,graph,get,job,id,final,job,status,job,status,access,execution,graph,get,state,check,argument,job,status,is,globally,terminal,state,the,job,access,execution,graph,get,job,name,job,id,is,not,in,a,globally,terminal,state,it,is,in,state,job,status,final,job,result,builder,builder,new,job,result,builder,builder,job,id,job,id,builder,application,status,application,status,from,job,status,access,execution,graph,get,state,final,long,net,runtime,access,execution,graph,get,status,timestamp,job,status,access,execution,graph,get,status,timestamp,job,status,created,final,long,guarded,net,runtime,math,max,net,runtime,0l,builder,net,runtime,guarded,net,runtime,builder,accumulator,results,access,execution,graph,get,accumulators,serialized,if,job,status,job,status,finished,final,error,info,error,info,access,execution,graph,get,failure,info,if,error,info,null,builder,serialized,throwable,error,info,get,exception,return,builder,build
