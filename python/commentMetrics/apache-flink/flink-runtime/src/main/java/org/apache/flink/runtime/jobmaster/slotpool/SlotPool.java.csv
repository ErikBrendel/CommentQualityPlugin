commented;modifiers;parameterAmount;loc;comment;code
false;;3;4;;// ------------------------------------------------------------------------ // lifecycle // ------------------------------------------------------------------------ void start(JobMasterId jobMasterId, String newJobManagerAddress, ComponentMainThreadExecutor jmMainThreadScheduledExecutor) throws Exception.
false;;0;1;;void suspend().
false;;0;1;;void close().
true;;1;1;/**  * Connects the SlotPool to the given ResourceManager. After this method is called, the  * SlotPool will be able to request resources from the given ResourceManager.  *  * @param resourceManagerGateway  The RPC gateway for the resource manager.  */ ;// ------------------------------------------------------------------------ // resource manager connection // ------------------------------------------------------------------------ /**  * Connects the SlotPool to the given ResourceManager. After this method is called, the  * SlotPool will be able to request resources from the given ResourceManager.  *  * @param resourceManagerGateway  The RPC gateway for the resource manager.  */ void connectToResourceManager(ResourceManagerGateway resourceManagerGateway).
true;;0;1;/**  * Disconnects the slot pool from its current Resource Manager. After this call, the pool will not  * be able to request further slots from the Resource Manager, and all currently pending requests  * to the resource manager will be canceled.  *  * <p>The slot pool will still be able to serve slots from its internal pool.  */ ;/**  * Disconnects the slot pool from its current Resource Manager. After this call, the pool will not  * be able to request further slots from the Resource Manager, and all currently pending requests  * to the resource manager will be canceled.  *  * <p>The slot pool will still be able to serve slots from its internal pool.  */ void disconnectResourceManager().
true;;1;1;/**  * Registers a TaskExecutor with the given {@link ResourceID} at {@link SlotPool}.  *  * @param resourceID identifying the TaskExecutor to register  * @return true iff a new resource id was registered  */ ;// ------------------------------------------------------------------------ // registering / un-registering TaskManagers and slots // ------------------------------------------------------------------------ /**  * Registers a TaskExecutor with the given {@link ResourceID} at {@link SlotPool}.  *  * @param resourceID identifying the TaskExecutor to register  * @return true iff a new resource id was registered  */ boolean registerTaskManager(ResourceID resourceID).
true;;2;1;/**  * Releases a TaskExecutor with the given {@link ResourceID} from the {@link SlotPool}.  *  * @param resourceId identifying the TaskExecutor which shall be released from the SlotPool  * @param cause for the releasing of the TaskManager  * @return true iff a given registered resource id was removed  */ ;/**  * Releases a TaskExecutor with the given {@link ResourceID} from the {@link SlotPool}.  *  * @param resourceId identifying the TaskExecutor which shall be released from the SlotPool  * @param cause for the releasing of the TaskManager  * @return true iff a given registered resource id was removed  */ boolean releaseTaskManager(final ResourceID resourceId, final Exception cause).
true;;3;4;/**  * Offers multiple slots to the {@link SlotPool}. The slot offerings can be  * individually accepted or rejected by returning the collection of accepted  * slot offers.  *  * @param taskManagerLocation from which the slot offers originate  * @param taskManagerGateway to talk to the slot offerer  * @param offers slot offers which are offered to the {@link SlotPool}  * @return A collection of accepted slot offers. The remaining slot offers are  * 			implicitly rejected.  */ ;/**  * Offers multiple slots to the {@link SlotPool}. The slot offerings can be  * individually accepted or rejected by returning the collection of accepted  * slot offers.  *  * @param taskManagerLocation from which the slot offers originate  * @param taskManagerGateway to talk to the slot offerer  * @param offers slot offers which are offered to the {@link SlotPool}  * @return A collection of accepted slot offers. The remaining slot offers are  * 			implicitly rejected.  */ Collection<SlotOffer> offerSlots(TaskManagerLocation taskManagerLocation, TaskManagerGateway taskManagerGateway, Collection<SlotOffer> offers).
true;;2;1;/**  * Fails the slot with the given allocation id.  *  * @param allocationID identifying the slot which is being failed  * @param cause of the failure  * @return An optional task executor id if this task executor has no more slots registered  */ ;/**  * Fails the slot with the given allocation id.  *  * @param allocationID identifying the slot which is being failed  * @param cause of the failure  * @return An optional task executor id if this task executor has no more slots registered  */ Optional<ResourceID> failAllocation(AllocationID allocationID, Exception cause).
true;;0;2;/**  * Returns a list of {@link SlotInfo} objects about all slots that are currently available in the slot  * pool.  *  * @return a list of {@link SlotInfo} objects about all slots that are currently available in the slot pool.  */ ;// ------------------------------------------------------------------------ // allocating and disposing slots // ------------------------------------------------------------------------ /**  * Returns a list of {@link SlotInfo} objects about all slots that are currently available in the slot  * pool.  *  * @return a list of {@link SlotInfo} objects about all slots that are currently available in the slot pool.  */ @Nonnull Collection<SlotInfo> getAvailableSlotsInformation().
true;;2;3;/**  * Allocates the available slot with the given allocation id under the given request id. This method returns  * {@code null} if no slot with the given allocation id is available.  *  * @param slotRequestId identifying the requested slot  * @param allocationID the allocation id of the requested available slot  * @return the previously available slot with the given allocation id or {@code null} if no such slot existed.  */ ;/**  * Allocates the available slot with the given allocation id under the given request id. This method returns  * {@code null} if no slot with the given allocation id is available.  *  * @param slotRequestId identifying the requested slot  * @param allocationID the allocation id of the requested available slot  * @return the previously available slot with the given allocation id or {@code null} if no such slot existed.  */ Optional<PhysicalSlot> allocateAvailableSlot(@Nonnull SlotRequestId slotRequestId, @Nonnull AllocationID allocationID).
true;;3;5;/**  * Request the allocation of a new slot from the resource manager. This method will not return a slot from the  * already available slots from the pool, but instead will add a new slot to that pool that is immediately allocated  * and returned.  *  * @param slotRequestId identifying the requested slot  * @param resourceProfile resource profile that specifies the resource requirements for the requested slot  * @param timeout timeout for the allocation procedure  * @return a newly allocated slot that was previously not available.  */ ;/**  * Request the allocation of a new slot from the resource manager. This method will not return a slot from the  * already available slots from the pool, but instead will add a new slot to that pool that is immediately allocated  * and returned.  *  * @param slotRequestId identifying the requested slot  * @param resourceProfile resource profile that specifies the resource requirements for the requested slot  * @param timeout timeout for the allocation procedure  * @return a newly allocated slot that was previously not available.  */ @Nonnull CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(@Nonnull SlotRequestId slotRequestId, @Nonnull ResourceProfile resourceProfile, @RpcTimeout Time timeout).
