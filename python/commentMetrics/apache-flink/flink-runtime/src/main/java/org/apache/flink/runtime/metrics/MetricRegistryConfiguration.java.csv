commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ------------------------------------------------------------------------ // Getter // ------------------------------------------------------------------------ public ScopeFormats getScopeFormats() {     return scopeFormats. }
false;public;0;3;;public char getDelimiter() {     return delimiter. }
false;public;0;3;;public List<Tuple2<String, Configuration>> getReporterConfigurations() {     return reporterConfigurations. }
false;public;0;3;;public long getQueryServiceMessageSizeLimit() {     return queryServiceMessageSizeLimit. }
true;public,static;1;66;/**  * Create a metric registry configuration object from the given {@link Configuration}.  *  * @param configuration to generate the metric registry configuration from  * @return Metric registry configuration generated from the configuration  */ ;// ------------------------------------------------------------------------ // Static factory methods // ------------------------------------------------------------------------ /**  * Create a metric registry configuration object from the given {@link Configuration}.  *  * @param configuration to generate the metric registry configuration from  * @return Metric registry configuration generated from the configuration  */ public static MetricRegistryConfiguration fromConfiguration(Configuration configuration) {     ScopeFormats scopeFormats.     try {         scopeFormats = ScopeFormats.fromConfig(configuration).     } catch (Exception e) {         LOG.warn("Failed to parse scope format, using default scope formats", e).         scopeFormats = ScopeFormats.fromConfig(new Configuration()).     }     char delim.     try {         delim = configuration.getString(MetricOptions.SCOPE_DELIMITER).charAt(0).     } catch (Exception e) {         LOG.warn("Failed to parse delimiter, using default delimiter.", e).         delim = '.'.     }     String includedReportersString = configuration.getString(MetricOptions.REPORTERS_LIST, "").     Set<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString).filter(// splitting an empty string results in an empty string on jdk9+     r -> !r.isEmpty()).collect(Collectors.toSet()).     // use a TreeSet to make the reporter order deterministic, which is useful for testing     Set<String> namedReporters = new TreeSet<>(String::compareTo).     // scan entire configuration for "metric.reporter" keys and parse individual reporter configurations     for (String key : configuration.keySet()) {         if (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {             Matcher matcher = reporterClassPattern.matcher(key).             if (matcher.matches()) {                 String reporterName = matcher.group(1).                 if (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {                     if (namedReporters.contains(reporterName)) {                         LOG.warn("Duplicate class configuration detected for reporter {}.", reporterName).                     } else {                         namedReporters.add(reporterName).                     }                 } else {                     LOG.info("Excluding reporter {}, not configured in reporter list ({}).", reporterName, includedReportersString).                 }             }         }     }     List<Tuple2<String, Configuration>> reporterConfigurations.     if (namedReporters.isEmpty()) {         reporterConfigurations = Collections.emptyList().     } else {         reporterConfigurations = new ArrayList<>(namedReporters.size()).         for (String namedReporter : namedReporters) {             DelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(configuration, ConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.').             reporterConfigurations.add(Tuple2.of(namedReporter, (Configuration) delegatingConfiguration)).         }     }     final long maximumFrameSize = AkkaRpcServiceUtils.extractMaximumFramesize(configuration).     // padding to account for serialization overhead     final long messageSizeLimitPadding = 256.     return new MetricRegistryConfiguration(scopeFormats, delim, reporterConfigurations, maximumFrameSize - messageSizeLimitPadding). }
false;public,static;0;12;;public static MetricRegistryConfiguration defaultMetricRegistryConfiguration() {     // create the default metric registry configuration only once     if (defaultConfiguration == null) {         synchronized (MetricRegistryConfiguration.class) {             if (defaultConfiguration == null) {                 defaultConfiguration = fromConfiguration(new Configuration()).             }         }     }     return defaultConfiguration. }
