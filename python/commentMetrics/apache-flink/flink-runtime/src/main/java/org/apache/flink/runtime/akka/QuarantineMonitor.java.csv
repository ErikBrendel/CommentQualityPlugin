commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void preStart() {     getContext().system().eventStream().subscribe(getSelf(), AssociationErrorEvent.class). }
false;public;1;41;;@Override public void onReceive(Object message) throws Exception {     if (message instanceof AssociationErrorEvent) {         AssociationErrorEvent associationErrorEvent = (AssociationErrorEvent) message.         // AssociationErrorEvent(InvalidAssociation(InvalidAssociationException(QUARANTINE(D)_MSG))         if (associationErrorEvent.getCause() != null) {             Throwable invalidAssociation = associationErrorEvent.getCause().             Matcher matcher = pattern.matcher(invalidAssociation.getMessage()).             final String remoteSystem.             if (matcher.find()) {                 remoteSystem = matcher.group(1).             } else {                 remoteSystem = "Unknown".             }             if (invalidAssociation.getCause() instanceof Transport.InvalidAssociationException) {                 Transport.InvalidAssociationException invalidAssociationException = (Transport.InvalidAssociationException) invalidAssociation.getCause().                 // got quarantined or quarantined another actor system in Akka 2.3.7                 if (QUARANTINE_MSG.equals(invalidAssociationException.getMessage())) {                     handler.hasQuarantined(remoteSystem, getContext().system()).                 } else if (QUARANTINED_MSG.equals(invalidAssociationException.getMessage())) {                     handler.wasQuarantinedBy(remoteSystem, getContext().system()).                 } else {                     log.debug("The invalid association exception's message could not be matched.", associationErrorEvent).                 }             } else {                 log.debug("The association error event's root cause is not of type {}.", Transport.InvalidAssociationException.class.getSimpleName(), associationErrorEvent).             }         } else {             log.debug("Received association error event which did not contain a cause.", associationErrorEvent).         }     } }
