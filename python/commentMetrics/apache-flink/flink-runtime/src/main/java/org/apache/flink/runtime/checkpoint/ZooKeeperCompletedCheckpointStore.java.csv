# id;timestamp;commentText;codeText;commentWords;codeWords
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1492867556;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")__		_		final String path = checkpointIdToPath(checkpoint.getCheckpointID())__		final RetrievableStateHandle<CompletedCheckpoint> stateHandle___		_		stateHandle = checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		checkpoint.registerSharedStates(sharedStateRegistry)___		_		while (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			try {_				removeSubsumed(checkpointStateHandles.removeFirst(), sharedStateRegistry)__			} catch (Exception e) {_				LOG.warn("Failed to subsume the old checkpoint", e)__			}_		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,final,retrievable,state,handle,completed,checkpoint,state,handle,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,checkpoint,register,shared,states,shared,state,registry,while,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,try,remove,subsumed,checkpoint,state,handles,remove,first,shared,state,registry,catch,exception,e,log,warn,failed,to,subsume,the,old,checkpoint,e,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1494762590;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")__		_		final String path = checkpointIdToPath(checkpoint.getCheckpointID())__		final RetrievableStateHandle<CompletedCheckpoint> stateHandle___		_		stateHandle = checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		checkpoint.registerSharedStates(sharedStateRegistry)___		_		while (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			try {_				removeSubsumed(checkpointStateHandles.removeFirst(), sharedStateRegistry)__			} catch (Exception e) {_				LOG.warn("Failed to subsume the old checkpoint", e)__			}_		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,final,retrievable,state,handle,completed,checkpoint,state,handle,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,checkpoint,register,shared,states,shared,state,registry,while,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,try,remove,subsumed,checkpoint,state,handles,remove,first,shared,state,registry,catch,exception,e,log,warn,failed,to,subsume,the,old,checkpoint,e,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1495001907;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")__		_		final String path = checkpointIdToPath(checkpoint.getCheckpointID())__		final RetrievableStateHandle<CompletedCheckpoint> stateHandle___		_		stateHandle = checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		checkpoint.registerSharedStates(sharedStateRegistry)___		_		while (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			try {_				removeSubsumed(checkpointStateHandles.removeFirst(), sharedStateRegistry)__			} catch (Exception e) {_				LOG.warn("Failed to subsume the old checkpoint", e)__			}_		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,final,retrievable,state,handle,completed,checkpoint,state,handle,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,checkpoint,register,shared,states,shared,state,registry,while,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,try,remove,subsumed,checkpoint,state,handles,remove,first,shared,state,registry,catch,exception,e,log,warn,failed,to,subsume,the,old,checkpoint,e,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1495184252;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")__		_		final String path = checkpointIdToPath(checkpoint.getCheckpointID())__		final RetrievableStateHandle<CompletedCheckpoint> stateHandle___		_		stateHandle = checkpointsInZooKeeper.addAndLock(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		checkpoint.registerSharedStates(sharedStateRegistry)___		_		while (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			try {_				removeSubsumed(checkpointStateHandles.removeFirst().f1, sharedStateRegistry)__			} catch (Exception e) {_				LOG.warn("Failed to subsume the old checkpoint", e)__			}_		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,final,retrievable,state,handle,completed,checkpoint,state,handle,state,handle,checkpoints,in,zoo,keeper,add,and,lock,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,checkpoint,register,shared,states,shared,state,registry,while,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,try,remove,subsumed,checkpoint,state,handles,remove,first,f1,shared,state,registry,catch,exception,e,log,warn,failed,to,subsume,the,old,checkpoint,e,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1495184252;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")__		_		final String path = checkpointIdToPath(checkpoint.getCheckpointID())___		_		checkpoint.registerSharedStates(sharedStateRegistry)___		_		checkpointsInZooKeeper.addAndLock(path, checkpoint)___		completedCheckpoints.addLast(checkpoint)___		_		while (completedCheckpoints.size() > maxNumberOfCheckpointsToRetain) {_			try {_				removeSubsumed(completedCheckpoints.removeFirst(), sharedStateRegistry)__			} catch (Exception e) {_				LOG.warn("Failed to subsume the old checkpoint", e)__			}_		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,checkpoint,register,shared,states,shared,state,registry,checkpoints,in,zoo,keeper,add,and,lock,path,checkpoint,completed,checkpoints,add,last,checkpoint,while,completed,checkpoints,size,max,number,of,checkpoints,to,retain,try,remove,subsumed,completed,checkpoints,remove,first,shared,state,registry,catch,exception,e,log,warn,failed,to,subsume,the,old,checkpoint,e,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1495287945;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")__		_		final String path = checkpointIdToPath(checkpoint.getCheckpointID())___		_		checkpointsInZooKeeper.addAndLock(path, checkpoint)___		completedCheckpoints.addLast(checkpoint)___		_		while (completedCheckpoints.size() > maxNumberOfCheckpointsToRetain) {_			try {_				removeSubsumed(completedCheckpoints.removeFirst())__			} catch (Exception e) {_				LOG.warn("Failed to subsume the old checkpoint", e)__			}_		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,checkpoints,in,zoo,keeper,add,and,lock,path,checkpoint,completed,checkpoints,add,last,checkpoint,while,completed,checkpoints,size,max,number,of,checkpoints,to,retain,try,remove,subsumed,completed,checkpoints,remove,first,catch,exception,e,log,warn,failed,to,subsume,the,old,checkpoint,e,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1495563868;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")__		_		final String path = checkpointIdToPath(checkpoint.getCheckpointID())___		_		checkpointsInZooKeeper.addAndLock(path, checkpoint)___		completedCheckpoints.addLast(checkpoint)___		_		while (completedCheckpoints.size() > maxNumberOfCheckpointsToRetain) {_			try {_				removeSubsumed(completedCheckpoints.removeFirst())__			} catch (Exception e) {_				LOG.warn("Failed to subsume the old checkpoint", e)__			}_		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,checkpoints,in,zoo,keeper,add,and,lock,path,checkpoint,completed,checkpoints,add,last,checkpoint,while,completed,checkpoints,size,max,number,of,checkpoints,to,retain,try,remove,subsumed,completed,checkpoints,remove,first,catch,exception,e,log,warn,failed,to,subsume,the,old,checkpoint,e,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1502801814;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")__		_		final String path = checkpointIdToPath(checkpoint.getCheckpointID())___		_		checkpointsInZooKeeper.addAndLock(path, checkpoint)___		completedCheckpoints.addLast(checkpoint)___		_		while (completedCheckpoints.size() > maxNumberOfCheckpointsToRetain) {_			try {_				removeSubsumed(completedCheckpoints.removeFirst())__			} catch (Exception e) {_				LOG.warn("Failed to subsume the old checkpoint", e)__			}_		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,checkpoints,in,zoo,keeper,add,and,lock,path,checkpoint,completed,checkpoints,add,last,checkpoint,while,completed,checkpoints,size,max,number,of,checkpoints,to,retain,try,remove,subsumed,completed,checkpoints,remove,first,catch,exception,e,log,warn,failed,to,subsume,the,old,checkpoint,e,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1508847658;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		final String path = checkpointIdToPath(checkpoint.getCheckpointID())___		_		checkpointsInZooKeeper.addAndLock(path, checkpoint)___		completedCheckpoints.addLast(checkpoint)___		_		while (completedCheckpoints.size() > maxNumberOfCheckpointsToRetain) {_			try {_				removeSubsumed(completedCheckpoints.removeFirst())__			} catch (Exception e) {_				LOG.warn("Failed to subsume the old checkpoint", e)__			}_		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,checkpoints,in,zoo,keeper,add,and,lock,path,checkpoint,completed,checkpoints,add,last,checkpoint,while,completed,checkpoints,size,max,number,of,checkpoints,to,retain,try,remove,subsumed,completed,checkpoints,remove,first,catch,exception,e,log,warn,failed,to,subsume,the,old,checkpoint,e,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1520261440;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		final String path = checkpointIdToPath(checkpoint.getCheckpointID())___		_		checkpointsInZooKeeper.addAndLock(path, checkpoint)___		completedCheckpoints.addLast(checkpoint)___		_		while (completedCheckpoints.size() > maxNumberOfCheckpointsToRetain) {_			try {_				removeSubsumed(completedCheckpoints.removeFirst())__			} catch (Exception e) {_				LOG.warn("Failed to subsume the old checkpoint", e)__			}_		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,checkpoints,in,zoo,keeper,add,and,lock,path,checkpoint,completed,checkpoints,add,last,checkpoint,while,completed,checkpoints,size,max,number,of,checkpoints,to,retain,try,remove,subsumed,completed,checkpoints,remove,first,catch,exception,e,log,warn,failed,to,subsume,the,old,checkpoint,e,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1520782982;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		final String path = checkpointIdToPath(checkpoint.getCheckpointID())___		_		checkpointsInZooKeeper.addAndLock(path, checkpoint)___		completedCheckpoints.addLast(checkpoint)___		_		while (completedCheckpoints.size() > maxNumberOfCheckpointsToRetain) {_			try {_				removeSubsumed(completedCheckpoints.removeFirst())__			} catch (Exception e) {_				LOG.warn("Failed to subsume the old checkpoint", e)__			}_		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,checkpoints,in,zoo,keeper,add,and,lock,path,checkpoint,completed,checkpoints,add,last,checkpoint,while,completed,checkpoints,size,max,number,of,checkpoints,to,retain,try,remove,subsumed,completed,checkpoints,remove,first,catch,exception,e,log,warn,failed,to,subsume,the,old,checkpoint,e,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1536763132;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		final String path = checkpointIdToPath(checkpoint.getCheckpointID())___		_		checkpointsInZooKeeper.addAndLock(path, checkpoint)___		completedCheckpoints.addLast(checkpoint)___		_		while (completedCheckpoints.size() > maxNumberOfCheckpointsToRetain) {_			try {_				removeSubsumed(completedCheckpoints.removeFirst())__			} catch (Exception e) {_				LOG.warn("Failed to subsume the old checkpoint", e)__			}_		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,checkpoints,in,zoo,keeper,add,and,lock,path,checkpoint,completed,checkpoints,add,last,checkpoint,while,completed,checkpoints,size,max,number,of,checkpoints,to,retain,try,remove,subsumed,completed,checkpoints,remove,first,catch,exception,e,log,warn,failed,to,subsume,the,old,checkpoint,e,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1536763178;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		final String path = checkpointIdToPath(checkpoint.getCheckpointID())___		_		checkpointsInZooKeeper.addAndLock(path, checkpoint)___		completedCheckpoints.addLast(checkpoint)___		_		while (completedCheckpoints.size() > maxNumberOfCheckpointsToRetain) {_			final CompletedCheckpoint completedCheckpoint = completedCheckpoints.removeFirst()__			tryRemoveCompletedCheckpoint(completedCheckpoint, CompletedCheckpoint::discardOnSubsume)__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,checkpoints,in,zoo,keeper,add,and,lock,path,checkpoint,completed,checkpoints,add,last,checkpoint,while,completed,checkpoints,size,max,number,of,checkpoints,to,retain,final,completed,checkpoint,completed,checkpoint,completed,checkpoints,remove,first,try,remove,completed,checkpoint,completed,checkpoint,completed,checkpoint,discard,on,subsume,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1536930104;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		final String path = checkpointIdToPath(checkpoint.getCheckpointID())___		_		checkpointsInZooKeeper.addAndLock(path, checkpoint)___		completedCheckpoints.addLast(checkpoint)___		_		while (completedCheckpoints.size() > maxNumberOfCheckpointsToRetain) {_			final CompletedCheckpoint completedCheckpoint = completedCheckpoints.removeFirst()__			tryRemoveCompletedCheckpoint(completedCheckpoint, CompletedCheckpoint::discardOnSubsume)__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,checkpoints,in,zoo,keeper,add,and,lock,path,checkpoint,completed,checkpoints,add,last,checkpoint,while,completed,checkpoints,size,max,number,of,checkpoints,to,retain,final,completed,checkpoint,completed,checkpoint,completed,checkpoints,remove,first,try,remove,completed,checkpoint,completed,checkpoint,completed,checkpoint,discard,on,subsume,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1537357883;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		final String path = checkpointIdToPath(checkpoint.getCheckpointID())___		_		checkpointsInZooKeeper.addAndLock(path, checkpoint)___		completedCheckpoints.addLast(checkpoint)___		_		while (completedCheckpoints.size() > maxNumberOfCheckpointsToRetain) {_			final CompletedCheckpoint completedCheckpoint = completedCheckpoints.removeFirst()__			tryRemoveCompletedCheckpoint(completedCheckpoint, CompletedCheckpoint::discardOnSubsume)__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,checkpoints,in,zoo,keeper,add,and,lock,path,checkpoint,completed,checkpoints,add,last,checkpoint,while,completed,checkpoints,size,max,number,of,checkpoints,to,retain,final,completed,checkpoint,completed,checkpoint,completed,checkpoints,remove,first,try,remove,completed,checkpoint,completed,checkpoint,completed,checkpoint,discard,on,subsume,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1547547304;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		final String path = checkpointIdToPath(checkpoint.getCheckpointID())___		_		checkpointsInZooKeeper.addAndLock(path, checkpoint)___		completedCheckpoints.addLast(checkpoint)___		_		while (completedCheckpoints.size() > maxNumberOfCheckpointsToRetain) {_			final CompletedCheckpoint completedCheckpoint = completedCheckpoints.removeFirst()__			tryRemoveCompletedCheckpoint(completedCheckpoint, CompletedCheckpoint::discardOnSubsume)__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,checkpoints,in,zoo,keeper,add,and,lock,path,checkpoint,completed,checkpoints,add,last,checkpoint,while,completed,checkpoints,size,max,number,of,checkpoints,to,retain,final,completed,checkpoint,completed,checkpoint,completed,checkpoints,remove,first,try,remove,completed,checkpoint,completed,checkpoint,completed,checkpoint,discard,on,subsume,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception;1547547304;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(final CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		final String path = checkpointIdToPath(checkpoint.getCheckpointID())___		_		checkpointsInZooKeeper.addAndLock(path, checkpoint)___		completedCheckpoints.addLast(checkpoint)___		_		while (completedCheckpoints.size() > maxNumberOfCheckpointsToRetain) {_			final CompletedCheckpoint completedCheckpoint = completedCheckpoints.removeFirst()__			tryRemoveCompletedCheckpoint(completedCheckpoint, CompletedCheckpoint::discardOnSubsume)__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,final,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,final,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,checkpoints,in,zoo,keeper,add,and,lock,path,checkpoint,completed,checkpoints,add,last,checkpoint,while,completed,checkpoints,size,max,number,of,checkpoints,to,retain,final,completed,checkpoint,completed,checkpoint,completed,checkpoints,remove,first,try,remove,completed,checkpoint,completed,checkpoint,completed,checkpoint,discard,on,subsume,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover(SharedStateRegistry sharedStateRegistry) throws Exception;1492867556;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover(SharedStateRegistry sharedStateRegistry) throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__			CompletedCheckpoint completedCheckpoint = null___			try {_				completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__			} catch (Exception e) {_				LOG.warn("Could not retrieve checkpoint. Removing it from the completed " +_					"checkpoint store.", e)___				_				removeBrokenStateHandle(checkpointStateHandle)__			}__			if (completedCheckpoint != null) {_				completedCheckpoint.registerSharedStates(sharedStateRegistry)__				checkpointStateHandles.add(checkpointStateHandle)__			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,shared,state,registry,shared,state,registry,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,catch,exception,e,log,warn,could,not,retrieve,checkpoint,removing,it,from,the,completed,checkpoint,store,e,remove,broken,state,handle,checkpoint,state,handle,if,completed,checkpoint,null,completed,checkpoint,register,shared,states,shared,state,registry,checkpoint,state,handles,add,checkpoint,state,handle
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover(SharedStateRegistry sharedStateRegistry) throws Exception;1495287945;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover(SharedStateRegistry sharedStateRegistry) throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		completedCheckpoints.clear()__		sharedStateRegistry.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByNameAndLock()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__			CompletedCheckpoint completedCheckpoint = null___			try {_				completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__				if (completedCheckpoint != null) {_					_					completedCheckpoint.registerSharedStatesAfterRestored(sharedStateRegistry)__					completedCheckpoints.add(completedCheckpoint)__				}_			} catch (Exception e) {_				LOG.warn("Could not retrieve checkpoint. Removing it from the completed " +_					"checkpoint store.", e)___				_				removeBrokenStateHandle(checkpointStateHandle.f1, checkpointStateHandle.f0)__			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,shared,state,registry,shared,state,registry,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,completed,checkpoints,clear,shared,state,registry,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,and,lock,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,if,completed,checkpoint,null,completed,checkpoint,register,shared,states,after,restored,shared,state,registry,completed,checkpoints,add,completed,checkpoint,catch,exception,e,log,warn,could,not,retrieve,checkpoint,removing,it,from,the,completed,checkpoint,store,e,remove,broken,state,handle,checkpoint,state,handle,f1,checkpoint,state,handle,f0
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover(SharedStateRegistry sharedStateRegistry) throws Exception;1495563868;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover(SharedStateRegistry sharedStateRegistry) throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		completedCheckpoints.clear()__		sharedStateRegistry.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByNameAndLock()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__			CompletedCheckpoint completedCheckpoint = null___			try {_				completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__				if (completedCheckpoint != null) {_					_					completedCheckpoint.registerSharedStatesAfterRestored(sharedStateRegistry)__					completedCheckpoints.add(completedCheckpoint)__				}_			} catch (Exception e) {_				LOG.warn("Could not retrieve checkpoint. Removing it from the completed " +_					"checkpoint store.", e)___				_				removeBrokenStateHandle(checkpointStateHandle.f1, checkpointStateHandle.f0)__			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,shared,state,registry,shared,state,registry,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,completed,checkpoints,clear,shared,state,registry,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,and,lock,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,if,completed,checkpoint,null,completed,checkpoint,register,shared,states,after,restored,shared,state,registry,completed,checkpoints,add,completed,checkpoint,catch,exception,e,log,warn,could,not,retrieve,checkpoint,removing,it,from,the,completed,checkpoint,store,e,remove,broken,state,handle,checkpoint,state,handle,f1,checkpoint,state,handle,f0
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1495001907;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1495184252;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1495184252;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1495287945;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1495563868;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1502801814;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1508847658;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1520261440;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1520782982;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1536763132;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1536763178;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1536930104;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1537357883;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1547547304;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> public static String checkpointIdToPath(long checkpointId);1547547304;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;public static String checkpointIdToPath(long checkpointId) {_		return String.format("/%019d", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;public,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,019d,checkpoint,id
ZooKeeperCompletedCheckpointStore -> protected static String checkpointIdToPath(long checkpointId);1481290933;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;protected static String checkpointIdToPath(long checkpointId) {_		return String.format("/%s", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;protected,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,s,checkpoint,id
ZooKeeperCompletedCheckpointStore -> protected static String checkpointIdToPath(long checkpointId);1488304750;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;protected static String checkpointIdToPath(long checkpointId) {_		return String.format("/%s", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;protected,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,s,checkpoint,id
ZooKeeperCompletedCheckpointStore -> protected static String checkpointIdToPath(long checkpointId);1489479789;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;protected static String checkpointIdToPath(long checkpointId) {_		return String.format("/%s", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;protected,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,s,checkpoint,id
ZooKeeperCompletedCheckpointStore -> protected static String checkpointIdToPath(long checkpointId);1489671807;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;protected static String checkpointIdToPath(long checkpointId) {_		return String.format("/%s", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;protected,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,s,checkpoint,id
ZooKeeperCompletedCheckpointStore -> protected static String checkpointIdToPath(long checkpointId);1490012491;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;protected static String checkpointIdToPath(long checkpointId) {_		return String.format("/%s", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;protected,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,s,checkpoint,id
ZooKeeperCompletedCheckpointStore -> protected static String checkpointIdToPath(long checkpointId);1492867556;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;protected static String checkpointIdToPath(long checkpointId) {_		return String.format("/%s", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;protected,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,s,checkpoint,id
ZooKeeperCompletedCheckpointStore -> protected static String checkpointIdToPath(long checkpointId);1492867556;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;protected static String checkpointIdToPath(long checkpointId) {_		return String.format("/%s", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;protected,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,s,checkpoint,id
ZooKeeperCompletedCheckpointStore -> protected static String checkpointIdToPath(long checkpointId);1494762590;Convert a checkpoint id into a ZooKeeper path.__@param checkpointId to convert to the path_@return Path created from the given checkpoint id;protected static String checkpointIdToPath(long checkpointId) {_		return String.format("/%s", checkpointId)__	};convert,a,checkpoint,id,into,a,zoo,keeper,path,param,checkpoint,id,to,convert,to,the,path,return,path,created,from,the,given,checkpoint,id;protected,static,string,checkpoint,id,to,path,long,checkpoint,id,return,string,format,s,checkpoint,id
ZooKeeperCompletedCheckpointStore -> private boolean tryRemove(long checkpointId) throws Exception;1536763178;Tries to remove the checkpoint identified by the given checkpoint id.__@param checkpointId identifying the checkpoint to remove_@return true if the checkpoint could be removed;private boolean tryRemove(long checkpointId) throws Exception {_		return checkpointsInZooKeeper.releaseAndTryRemove(checkpointIdToPath(checkpointId))__	};tries,to,remove,the,checkpoint,identified,by,the,given,checkpoint,id,param,checkpoint,id,identifying,the,checkpoint,to,remove,return,true,if,the,checkpoint,could,be,removed;private,boolean,try,remove,long,checkpoint,id,throws,exception,return,checkpoints,in,zoo,keeper,release,and,try,remove,checkpoint,id,to,path,checkpoint,id
ZooKeeperCompletedCheckpointStore -> private boolean tryRemove(long checkpointId) throws Exception;1536930104;Tries to remove the checkpoint identified by the given checkpoint id.__@param checkpointId identifying the checkpoint to remove_@return true if the checkpoint could be removed;private boolean tryRemove(long checkpointId) throws Exception {_		return checkpointsInZooKeeper.releaseAndTryRemove(checkpointIdToPath(checkpointId))__	};tries,to,remove,the,checkpoint,identified,by,the,given,checkpoint,id,param,checkpoint,id,identifying,the,checkpoint,to,remove,return,true,if,the,checkpoint,could,be,removed;private,boolean,try,remove,long,checkpoint,id,throws,exception,return,checkpoints,in,zoo,keeper,release,and,try,remove,checkpoint,id,to,path,checkpoint,id
ZooKeeperCompletedCheckpointStore -> private boolean tryRemove(long checkpointId) throws Exception;1537357883;Tries to remove the checkpoint identified by the given checkpoint id.__@param checkpointId identifying the checkpoint to remove_@return true if the checkpoint could be removed;private boolean tryRemove(long checkpointId) throws Exception {_		return checkpointsInZooKeeper.releaseAndTryRemove(checkpointIdToPath(checkpointId))__	};tries,to,remove,the,checkpoint,identified,by,the,given,checkpoint,id,param,checkpoint,id,identifying,the,checkpoint,to,remove,return,true,if,the,checkpoint,could,be,removed;private,boolean,try,remove,long,checkpoint,id,throws,exception,return,checkpoints,in,zoo,keeper,release,and,try,remove,checkpoint,id,to,path,checkpoint,id
ZooKeeperCompletedCheckpointStore -> private boolean tryRemove(long checkpointId) throws Exception;1547547304;Tries to remove the checkpoint identified by the given checkpoint id.__@param checkpointId identifying the checkpoint to remove_@return true if the checkpoint could be removed;private boolean tryRemove(long checkpointId) throws Exception {_		return checkpointsInZooKeeper.releaseAndTryRemove(checkpointIdToPath(checkpointId))__	};tries,to,remove,the,checkpoint,identified,by,the,given,checkpoint,id,param,checkpoint,id,identifying,the,checkpoint,to,remove,return,true,if,the,checkpoint,could,be,removed;private,boolean,try,remove,long,checkpoint,id,throws,exception,return,checkpoints,in,zoo,keeper,release,and,try,remove,checkpoint,id,to,path,checkpoint,id
ZooKeeperCompletedCheckpointStore -> private boolean tryRemove(long checkpointId) throws Exception;1547547304;Tries to remove the checkpoint identified by the given checkpoint id.__@param checkpointId identifying the checkpoint to remove_@return true if the checkpoint could be removed;private boolean tryRemove(long checkpointId) throws Exception {_		return checkpointsInZooKeeper.releaseAndTryRemove(checkpointIdToPath(checkpointId))__	};tries,to,remove,the,checkpoint,identified,by,the,given,checkpoint,id,param,checkpoint,id,identifying,the,checkpoint,to,remove,return,true,if,the,checkpoint,could,be,removed;private,boolean,try,remove,long,checkpoint,id,throws,exception,return,checkpoints,in,zoo,keeper,release,and,try,remove,checkpoint,id,to,path,checkpoint,id
ZooKeeperCompletedCheckpointStore -> private void removeShutdown( 			final CompletedCheckpoint completedCheckpoint, 			final JobStatus jobStatus) throws Exception;1508847658;Removes a checkpoint from ZooKeeper because of Job shutdown and drops the state.;private void removeShutdown(_			final CompletedCheckpoint completedCheckpoint,_			final JobStatus jobStatus) throws Exception {__		if (completedCheckpoint == null) {_			return__		}__		ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint> removeAction = new ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint>() {_			@Override_			public void apply(@Nullable RetrievableStateHandle<CompletedCheckpoint> value) throws FlinkException {_				try {_					completedCheckpoint.discardOnShutdown(jobStatus)__				} catch (Exception e) {_					throw new FlinkException("Could not discard the completed checkpoint on subsume.", e)__				}_			}_		}___		checkpointsInZooKeeper.releaseAndTryRemove(_			checkpointIdToPath(completedCheckpoint.getCheckpointID()),_			removeAction)__	};removes,a,checkpoint,from,zoo,keeper,because,of,job,shutdown,and,drops,the,state;private,void,remove,shutdown,final,completed,checkpoint,completed,checkpoint,final,job,status,job,status,throws,exception,if,completed,checkpoint,null,return,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,remove,action,new,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,override,public,void,apply,nullable,retrievable,state,handle,completed,checkpoint,value,throws,flink,exception,try,completed,checkpoint,discard,on,shutdown,job,status,catch,exception,e,throw,new,flink,exception,could,not,discard,the,completed,checkpoint,on,subsume,e,checkpoints,in,zoo,keeper,release,and,try,remove,checkpoint,id,to,path,completed,checkpoint,get,checkpoint,id,remove,action
ZooKeeperCompletedCheckpointStore -> private void removeShutdown( 			final CompletedCheckpoint completedCheckpoint, 			final JobStatus jobStatus) throws Exception;1520261440;Removes a checkpoint from ZooKeeper because of Job shutdown and drops the state.;private void removeShutdown(_			final CompletedCheckpoint completedCheckpoint,_			final JobStatus jobStatus) throws Exception {__		if (completedCheckpoint == null) {_			return__		}__		ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint> removeAction = new ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint>() {_			@Override_			public void apply(@Nullable RetrievableStateHandle<CompletedCheckpoint> value) throws FlinkException {_				try {_					completedCheckpoint.discardOnShutdown(jobStatus)__				} catch (Exception e) {_					throw new FlinkException("Could not discard the completed checkpoint on subsume.", e)__				}_			}_		}___		checkpointsInZooKeeper.releaseAndTryRemove(_			checkpointIdToPath(completedCheckpoint.getCheckpointID()),_			removeAction)__	};removes,a,checkpoint,from,zoo,keeper,because,of,job,shutdown,and,drops,the,state;private,void,remove,shutdown,final,completed,checkpoint,completed,checkpoint,final,job,status,job,status,throws,exception,if,completed,checkpoint,null,return,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,remove,action,new,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,override,public,void,apply,nullable,retrievable,state,handle,completed,checkpoint,value,throws,flink,exception,try,completed,checkpoint,discard,on,shutdown,job,status,catch,exception,e,throw,new,flink,exception,could,not,discard,the,completed,checkpoint,on,subsume,e,checkpoints,in,zoo,keeper,release,and,try,remove,checkpoint,id,to,path,completed,checkpoint,get,checkpoint,id,remove,action
ZooKeeperCompletedCheckpointStore -> private void removeShutdown( 			final CompletedCheckpoint completedCheckpoint, 			final JobStatus jobStatus) throws Exception;1520782982;Removes a checkpoint from ZooKeeper because of Job shutdown and drops the state.;private void removeShutdown(_			final CompletedCheckpoint completedCheckpoint,_			final JobStatus jobStatus) throws Exception {__		if (completedCheckpoint == null) {_			return__		}__		ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint> removeAction = new ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint>() {_			@Override_			public void apply(@Nullable RetrievableStateHandle<CompletedCheckpoint> value) throws FlinkException {_				try {_					completedCheckpoint.discardOnShutdown(jobStatus)__				} catch (Exception e) {_					throw new FlinkException("Could not discard the completed checkpoint on subsume.", e)__				}_			}_		}___		checkpointsInZooKeeper.releaseAndTryRemove(_			checkpointIdToPath(completedCheckpoint.getCheckpointID()),_			removeAction)__	};removes,a,checkpoint,from,zoo,keeper,because,of,job,shutdown,and,drops,the,state;private,void,remove,shutdown,final,completed,checkpoint,completed,checkpoint,final,job,status,job,status,throws,exception,if,completed,checkpoint,null,return,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,remove,action,new,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,override,public,void,apply,nullable,retrievable,state,handle,completed,checkpoint,value,throws,flink,exception,try,completed,checkpoint,discard,on,shutdown,job,status,catch,exception,e,throw,new,flink,exception,could,not,discard,the,completed,checkpoint,on,subsume,e,checkpoints,in,zoo,keeper,release,and,try,remove,checkpoint,id,to,path,completed,checkpoint,get,checkpoint,id,remove,action
ZooKeeperCompletedCheckpointStore -> private void removeShutdown( 			final CompletedCheckpoint completedCheckpoint, 			final JobStatus jobStatus) throws Exception;1536763132;Removes a checkpoint from ZooKeeper because of Job shutdown and drops the state.;private void removeShutdown(_			final CompletedCheckpoint completedCheckpoint,_			final JobStatus jobStatus) throws Exception {__		if (completedCheckpoint == null) {_			return__		}__		ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint> removeAction = new ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint>() {_			@Override_			public void apply(@Nullable RetrievableStateHandle<CompletedCheckpoint> value) throws FlinkException {_				try {_					completedCheckpoint.discardOnShutdown(jobStatus)__				} catch (Exception e) {_					throw new FlinkException("Could not discard the completed checkpoint on subsume.", e)__				}_			}_		}___		checkpointsInZooKeeper.releaseAndTryRemove(_			checkpointIdToPath(completedCheckpoint.getCheckpointID()),_			removeAction)__	};removes,a,checkpoint,from,zoo,keeper,because,of,job,shutdown,and,drops,the,state;private,void,remove,shutdown,final,completed,checkpoint,completed,checkpoint,final,job,status,job,status,throws,exception,if,completed,checkpoint,null,return,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,remove,action,new,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,override,public,void,apply,nullable,retrievable,state,handle,completed,checkpoint,value,throws,flink,exception,try,completed,checkpoint,discard,on,shutdown,job,status,catch,exception,e,throw,new,flink,exception,could,not,discard,the,completed,checkpoint,on,subsume,e,checkpoints,in,zoo,keeper,release,and,try,remove,checkpoint,id,to,path,completed,checkpoint,get,checkpoint,id,remove,action
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1479852016;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1481290933;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1488304750;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1489479789;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1489671807;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1490012491;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1492867556;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)__		_		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1492867556;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)__		_		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1494762590;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		super(executor)___		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)__		_		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,super,executor,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1495001907;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		super(executor)___		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)__		_		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,super,executor,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1495184252;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		super(executor)___		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)__		_		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,super,executor,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1495184252;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		super(executor)___		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.completedCheckpoints = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)__		_		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,super,executor,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,completed,checkpoints,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1495287945;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.completedCheckpoints = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)__		_		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,completed,checkpoints,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1495563868;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.completedCheckpoints = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)__		_		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,completed,checkpoints,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1502801814;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.completedCheckpoints = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)__		_		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,completed,checkpoints,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1508847658;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.completedCheckpoints = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,completed,checkpoints,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1520261440;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.completedCheckpoints = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,completed,checkpoints,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1520782982;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.completedCheckpoints = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,completed,checkpoints,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1536763132;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to give to the ZooKeeperStateHandleStore to run ZooKeeper callbacks_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage, executor)___		this.completedCheckpoints = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,give,to,the,zoo,keeper,state,handle,store,to,run,zoo,keeper,callbacks,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,executor,this,completed,checkpoints,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1536763178;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to execute blocking calls_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage)___		this.completedCheckpoints = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		this.executor = checkNotNull(executor)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,execute,blocking,calls,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,this,completed,checkpoints,new,array,deque,max,number,of,checkpoints,to,retain,1,this,executor,check,not,null,executor,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1536930104;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to execute blocking calls_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage)___		this.completedCheckpoints = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		this.executor = checkNotNull(executor)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,execute,blocking,calls,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,this,completed,checkpoints,new,array,deque,max,number,of,checkpoints,to,retain,1,this,executor,check,not,null,executor,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			CuratorFramework client, 			String checkpointsPath, 			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage, 			Executor executor) throws Exception;1537357883;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@param executor to execute blocking calls_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			CuratorFramework client,_			String checkpointsPath,_			RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage,_			Executor executor) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage)___		this.completedCheckpoints = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		this.executor = checkNotNull(executor)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,param,executor,to,execute,blocking,calls,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,curator,framework,client,string,checkpoints,path,retrievable,state,storage,helper,completed,checkpoint,state,storage,executor,executor,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,this,completed,checkpoints,new,array,deque,max,number,of,checkpoints,to,retain,1,this,executor,check,not,null,executor,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1445293011;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		List<Tuple2<StateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		if (numberOfInitialCheckpoints > 0) {_			_			_			Tuple2<StateHandle<CompletedCheckpoint>, String> latest = initialCheckpoints_					.get(numberOfInitialCheckpoints - 1)___			CompletedCheckpoint latestCheckpoint = latest.f0.getState(userClassLoader)___			checkpointStateHandles.add(latest)___			LOG.info("Initialized with {}. Removing all older checkpoints.", latestCheckpoint)___			for (int i = 0_ i < numberOfInitialCheckpoints - 1_ i++) {_				try {_					removeFromZooKeeperAndDiscardCheckpoint(initialCheckpoints.get(i))__				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint", e)__				}_			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,list,tuple2,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,if,number,of,initial,checkpoints,0,tuple2,state,handle,completed,checkpoint,string,latest,initial,checkpoints,get,number,of,initial,checkpoints,1,completed,checkpoint,latest,checkpoint,latest,f0,get,state,user,class,loader,checkpoint,state,handles,add,latest,log,info,initialized,with,removing,all,older,checkpoints,latest,checkpoint,for,int,i,0,i,number,of,initial,checkpoints,1,i,try,remove,from,zoo,keeper,and,discard,checkpoint,initial,checkpoints,get,i,catch,exception,e,log,error,failed,to,discard,checkpoint,e
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1445327854;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		List<Tuple2<StateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		if (numberOfInitialCheckpoints > 0) {_			_			_			Tuple2<StateHandle<CompletedCheckpoint>, String> latest = initialCheckpoints_					.get(numberOfInitialCheckpoints - 1)___			CompletedCheckpoint latestCheckpoint = latest.f0.getState(userClassLoader)___			checkpointStateHandles.add(latest)___			LOG.info("Initialized with {}. Removing all older checkpoints.", latestCheckpoint)___			for (int i = 0_ i < numberOfInitialCheckpoints - 1_ i++) {_				try {_					removeFromZooKeeperAndDiscardCheckpoint(initialCheckpoints.get(i))__				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint", e)__				}_			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,list,tuple2,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,if,number,of,initial,checkpoints,0,tuple2,state,handle,completed,checkpoint,string,latest,initial,checkpoints,get,number,of,initial,checkpoints,1,completed,checkpoint,latest,checkpoint,latest,f0,get,state,user,class,loader,checkpoint,state,handles,add,latest,log,info,initialized,with,removing,all,older,checkpoints,latest,checkpoint,for,int,i,0,i,number,of,initial,checkpoints,1,i,try,remove,from,zoo,keeper,and,discard,checkpoint,initial,checkpoints,get,i,catch,exception,e,log,error,failed,to,discard,checkpoint,e
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1456343760;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<StateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		if (numberOfInitialCheckpoints > 0) {_			_			_			Tuple2<StateHandle<CompletedCheckpoint>, String> latest = initialCheckpoints_					.get(numberOfInitialCheckpoints - 1)___			CompletedCheckpoint latestCheckpoint = latest.f0.getState(userClassLoader)___			checkpointStateHandles.add(latest)___			LOG.info("Initialized with {}. Removing all older checkpoints.", latestCheckpoint)___			for (int i = 0_ i < numberOfInitialCheckpoints - 1_ i++) {_				try {_					removeFromZooKeeperAndDiscardCheckpoint(initialCheckpoints.get(i))__				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint", e)__				}_			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,if,number,of,initial,checkpoints,0,tuple2,state,handle,completed,checkpoint,string,latest,initial,checkpoints,get,number,of,initial,checkpoints,1,completed,checkpoint,latest,checkpoint,latest,f0,get,state,user,class,loader,checkpoint,state,handles,add,latest,log,info,initialized,with,removing,all,older,checkpoints,latest,checkpoint,for,int,i,0,i,number,of,initial,checkpoints,1,i,try,remove,from,zoo,keeper,and,discard,checkpoint,initial,checkpoints,get,i,catch,exception,e,log,error,failed,to,discard,checkpoint,e
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1465991918;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<StateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		if (numberOfInitialCheckpoints > 0) {_			_			_			Tuple2<StateHandle<CompletedCheckpoint>, String> latest = initialCheckpoints_					.get(numberOfInitialCheckpoints - 1)___			CompletedCheckpoint latestCheckpoint = latest.f0.getState(userClassLoader)___			checkpointStateHandles.add(latest)___			LOG.info("Initialized with {}. Removing all older checkpoints.", latestCheckpoint)___			for (int i = 0_ i < numberOfInitialCheckpoints - 1_ i++) {_				try {_					removeFromZooKeeperAndDiscardCheckpoint(initialCheckpoints.get(i))__				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint", e)__				}_			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,if,number,of,initial,checkpoints,0,tuple2,state,handle,completed,checkpoint,string,latest,initial,checkpoints,get,number,of,initial,checkpoints,1,completed,checkpoint,latest,checkpoint,latest,f0,get,state,user,class,loader,checkpoint,state,handles,add,latest,log,info,initialized,with,removing,all,older,checkpoints,latest,checkpoint,for,int,i,0,i,number,of,initial,checkpoints,1,i,try,remove,from,zoo,keeper,and,discard,checkpoint,initial,checkpoints,get,i,catch,exception,e,log,error,failed,to,discard,checkpoint,e
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1469190400;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<StateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		if (numberOfInitialCheckpoints > 0) {_			_			_			Tuple2<StateHandle<CompletedCheckpoint>, String> latest = initialCheckpoints_					.get(numberOfInitialCheckpoints - 1)___			CompletedCheckpoint latestCheckpoint = latest.f0.getState(userClassLoader)___			checkpointStateHandles.add(latest)___			LOG.info("Initialized with {}. Removing all older checkpoints.", latestCheckpoint)___			for (int i = 0_ i < numberOfInitialCheckpoints - 1_ i++) {_				try {_					removeFromZooKeeperAndDiscardCheckpoint(initialCheckpoints.get(i))__				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint", e)__				}_			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,if,number,of,initial,checkpoints,0,tuple2,state,handle,completed,checkpoint,string,latest,initial,checkpoints,get,number,of,initial,checkpoints,1,completed,checkpoint,latest,checkpoint,latest,f0,get,state,user,class,loader,checkpoint,state,handles,add,latest,log,info,initialized,with,removing,all,older,checkpoints,latest,checkpoint,for,int,i,0,i,number,of,initial,checkpoints,1,i,try,remove,from,zoo,keeper,and,discard,checkpoint,initial,checkpoints,get,i,catch,exception,e,log,error,failed,to,discard,checkpoint,e
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1472033364;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<StateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		if (numberOfInitialCheckpoints > 0) {_			_			_			Tuple2<StateHandle<CompletedCheckpoint>, String> latest = initialCheckpoints_					.get(numberOfInitialCheckpoints - 1)___			CompletedCheckpoint latestCheckpoint = latest.f0.getState(userClassLoader)___			checkpointStateHandles.add(latest)___			LOG.info("Initialized with {}. Removing all older checkpoints.", latestCheckpoint)___			for (int i = 0_ i < numberOfInitialCheckpoints - 1_ i++) {_				try {_					removeFromZooKeeperAndDiscardCheckpoint(initialCheckpoints.get(i))__				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint", e)__				}_			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,if,number,of,initial,checkpoints,0,tuple2,state,handle,completed,checkpoint,string,latest,initial,checkpoints,get,number,of,initial,checkpoints,1,completed,checkpoint,latest,checkpoint,latest,f0,get,state,user,class,loader,checkpoint,state,handles,add,latest,log,info,initialized,with,removing,all,older,checkpoints,latest,checkpoint,for,int,i,0,i,number,of,initial,checkpoints,1,i,try,remove,from,zoo,keeper,and,discard,checkpoint,initial,checkpoints,get,i,catch,exception,e,log,error,failed,to,discard,checkpoint,e
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1472663401;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		if (numberOfInitialCheckpoints > 0) {_			_			_			Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> latest = initialCheckpoints_					.get(numberOfInitialCheckpoints - 1)___			CompletedCheckpoint latestCheckpoint = latest.f0.retrieveState()___			checkpointStateHandles.add(latest)___			LOG.info("Initialized with {}. Removing all older checkpoints.", latestCheckpoint)___			for (int i = 0_ i < numberOfInitialCheckpoints - 1_ i++) {_				try {_					removeFromZooKeeperAndDiscardCheckpoint(initialCheckpoints.get(i))__				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint", e)__				}_			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,if,number,of,initial,checkpoints,0,tuple2,retrievable,state,handle,completed,checkpoint,string,latest,initial,checkpoints,get,number,of,initial,checkpoints,1,completed,checkpoint,latest,checkpoint,latest,f0,retrieve,state,checkpoint,state,handles,add,latest,log,info,initialized,with,removing,all,older,checkpoints,latest,checkpoint,for,int,i,0,i,number,of,initial,checkpoints,1,i,try,remove,from,zoo,keeper,and,discard,checkpoint,initial,checkpoints,get,i,catch,exception,e,log,error,failed,to,discard,checkpoint,e
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1476432306;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		if (numberOfInitialCheckpoints > 0) {_			_			_			Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> latest = initialCheckpoints_					.get(numberOfInitialCheckpoints - 1)___			CompletedCheckpoint latestCheckpoint = latest.f0.retrieveState()___			checkpointStateHandles.add(latest)___			LOG.info("Initialized with {}. Removing all older checkpoints.", latestCheckpoint)___			for (int i = 0_ i < numberOfInitialCheckpoints - 1_ i++) {_				try {_					removeSubsumed(initialCheckpoints.get(i))__				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint", e)__				}_			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,if,number,of,initial,checkpoints,0,tuple2,retrievable,state,handle,completed,checkpoint,string,latest,initial,checkpoints,get,number,of,initial,checkpoints,1,completed,checkpoint,latest,checkpoint,latest,f0,retrieve,state,checkpoint,state,handles,add,latest,log,info,initialized,with,removing,all,older,checkpoints,latest,checkpoint,for,int,i,0,i,number,of,initial,checkpoints,1,i,try,remove,subsumed,initial,checkpoints,get,i,catch,exception,e,log,error,failed,to,discard,checkpoint,e
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1479852016;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		if (numberOfInitialCheckpoints > 0) {_			_			_			Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> latest = initialCheckpoints_					.get(numberOfInitialCheckpoints - 1)___			CompletedCheckpoint latestCheckpoint = latest.f0.retrieveState()___			checkpointStateHandles.add(latest)___			LOG.info("Initialized with {}. Removing all older checkpoints.", latestCheckpoint)___			for (int i = 0_ i < numberOfInitialCheckpoints - 1_ i++) {_				try {_					removeSubsumed(initialCheckpoints.get(i))__				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint", e)__				}_			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,if,number,of,initial,checkpoints,0,tuple2,retrievable,state,handle,completed,checkpoint,string,latest,initial,checkpoints,get,number,of,initial,checkpoints,1,completed,checkpoint,latest,checkpoint,latest,f0,retrieve,state,checkpoint,state,handles,add,latest,log,info,initialized,with,removing,all,older,checkpoints,latest,checkpoint,for,int,i,0,i,number,of,initial,checkpoints,1,i,try,remove,subsumed,initial,checkpoints,get,i,catch,exception,e,log,error,failed,to,discard,checkpoint,e
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1481290933;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		if (numberOfInitialCheckpoints > 0) {_			_			_			Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> latest = initialCheckpoints_					.get(numberOfInitialCheckpoints - 1)___			CompletedCheckpoint latestCheckpoint__			long checkpointId = pathToCheckpointId(latest.f1)___			LOG.info("Trying to retrieve checkpoint {}.", checkpointId)___			try {_				latestCheckpoint = latest.f0.retrieveState()__			} catch (Exception e) {_				throw new Exception("Could not retrieve the completed checkpoint " + checkpointId +_				" from the state storage.", e)__			}__			checkpointStateHandles.add(latest)___			LOG.info("Initialized with {}. Removing all older checkpoints.", latestCheckpoint)___			for (int i = 0_ i < numberOfInitialCheckpoints - 1_ i++) {_				try {_					removeSubsumed(initialCheckpoints.get(i))__				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint", e)__				}_			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,if,number,of,initial,checkpoints,0,tuple2,retrievable,state,handle,completed,checkpoint,string,latest,initial,checkpoints,get,number,of,initial,checkpoints,1,completed,checkpoint,latest,checkpoint,long,checkpoint,id,path,to,checkpoint,id,latest,f1,log,info,trying,to,retrieve,checkpoint,checkpoint,id,try,latest,checkpoint,latest,f0,retrieve,state,catch,exception,e,throw,new,exception,could,not,retrieve,the,completed,checkpoint,checkpoint,id,from,the,state,storage,e,checkpoint,state,handles,add,latest,log,info,initialized,with,removing,all,older,checkpoints,latest,checkpoint,for,int,i,0,i,number,of,initial,checkpoints,1,i,try,remove,subsumed,initial,checkpoints,get,i,catch,exception,e,log,error,failed,to,discard,checkpoint,e
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1488304750;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		if (numberOfInitialCheckpoints > 0) {_			_			_			Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> latest = initialCheckpoints_					.get(numberOfInitialCheckpoints - 1)___			CompletedCheckpoint latestCheckpoint__			long checkpointId = pathToCheckpointId(latest.f1)___			LOG.info("Trying to retrieve checkpoint {}.", checkpointId)___			try {_				latestCheckpoint = latest.f0.retrieveState()__			} catch (Exception e) {_				throw new Exception("Could not retrieve the completed checkpoint " + checkpointId +_				" from the state storage.", e)__			}__			checkpointStateHandles.add(latest)___			LOG.info("Initialized with {}. Removing all older checkpoints.", latestCheckpoint)___			for (int i = 0_ i < numberOfInitialCheckpoints - 1_ i++) {_				try {_					removeSubsumed(initialCheckpoints.get(i))__				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint", e)__				}_			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,if,number,of,initial,checkpoints,0,tuple2,retrievable,state,handle,completed,checkpoint,string,latest,initial,checkpoints,get,number,of,initial,checkpoints,1,completed,checkpoint,latest,checkpoint,long,checkpoint,id,path,to,checkpoint,id,latest,f1,log,info,trying,to,retrieve,checkpoint,checkpoint,id,try,latest,checkpoint,latest,f0,retrieve,state,catch,exception,e,throw,new,exception,could,not,retrieve,the,completed,checkpoint,checkpoint,id,from,the,state,storage,e,checkpoint,state,handles,add,latest,log,info,initialized,with,removing,all,older,checkpoints,latest,checkpoint,for,int,i,0,i,number,of,initial,checkpoints,1,i,try,remove,subsumed,initial,checkpoints,get,i,catch,exception,e,log,error,failed,to,discard,checkpoint,e
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1489479789;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpoint : initialCheckpoints) {_			checkpointStateHandles.add(checkpoint)__		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,initial,checkpoints,checkpoint,state,handles,add,checkpoint
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1489671807;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpoint : initialCheckpoints) {_			checkpointStateHandles.add(checkpoint)__		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,initial,checkpoints,checkpoint,state,handles,add,checkpoint
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1490012491;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpoint : initialCheckpoints) {_			checkpointStateHandles.add(checkpoint)__		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,initial,checkpoints,checkpoint,state,handles,add,checkpoint
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1492867556;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__			CompletedCheckpoint completedCheckpoint = null___			try {_				completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__			} catch (Exception e) {_				LOG.warn("Could not retrieve checkpoint. Removing it from the completed " +_					"checkpoint store.", e)___				_				removeBrokenStateHandle(checkpointStateHandle)__			}__			if (completedCheckpoint != null) {_				completedCheckpoint.registerSharedStates(sharedStateRegistry)__				checkpointStateHandles.add(checkpointStateHandle)__			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,catch,exception,e,log,warn,could,not,retrieve,checkpoint,removing,it,from,the,completed,checkpoint,store,e,remove,broken,state,handle,checkpoint,state,handle,if,completed,checkpoint,null,completed,checkpoint,register,shared,states,shared,state,registry,checkpoint,state,handles,add,checkpoint,state,handle
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1494762590;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__			CompletedCheckpoint completedCheckpoint = null___			try {_				completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__			} catch (Exception e) {_				LOG.warn("Could not retrieve checkpoint. Removing it from the completed " +_					"checkpoint store.", e)___				_				removeBrokenStateHandle(checkpointStateHandle)__			}__			if (completedCheckpoint != null) {_				completedCheckpoint.registerSharedStates(sharedStateRegistry)__				checkpointStateHandles.add(checkpointStateHandle)__			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,catch,exception,e,log,warn,could,not,retrieve,checkpoint,removing,it,from,the,completed,checkpoint,store,e,remove,broken,state,handle,checkpoint,state,handle,if,completed,checkpoint,null,completed,checkpoint,register,shared,states,shared,state,registry,checkpoint,state,handles,add,checkpoint,state,handle
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1495001907;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByName()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__			CompletedCheckpoint completedCheckpoint = null___			try {_				completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__			} catch (Exception e) {_				LOG.warn("Could not retrieve checkpoint. Removing it from the completed " +_					"checkpoint store.", e)___				_				removeBrokenStateHandle(checkpointStateHandle)__			}__			if (completedCheckpoint != null) {_				completedCheckpoint.registerSharedStates(sharedStateRegistry)__				checkpointStateHandles.add(checkpointStateHandle)__			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,catch,exception,e,log,warn,could,not,retrieve,checkpoint,removing,it,from,the,completed,checkpoint,store,e,remove,broken,state,handle,checkpoint,state,handle,if,completed,checkpoint,null,completed,checkpoint,register,shared,states,shared,state,registry,checkpoint,state,handles,add,checkpoint,state,handle
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1495184252;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		checkpointStateHandles.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByNameAndLock()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__			CompletedCheckpoint completedCheckpoint = null___			try {_				completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__			} catch (Exception e) {_				LOG.warn("Could not retrieve checkpoint. Removing it from the completed " +_					"checkpoint store.", e)___				_				removeBrokenStateHandle(checkpointStateHandle.f1, checkpointStateHandle.f0)__			}__			if (completedCheckpoint != null) {_				completedCheckpoint.registerSharedStates(sharedStateRegistry)__				checkpointStateHandles.add(checkpointStateHandle)__			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,checkpoint,state,handles,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,and,lock,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,catch,exception,e,log,warn,could,not,retrieve,checkpoint,removing,it,from,the,completed,checkpoint,store,e,remove,broken,state,handle,checkpoint,state,handle,f1,checkpoint,state,handle,f0,if,completed,checkpoint,null,completed,checkpoint,register,shared,states,shared,state,registry,checkpoint,state,handles,add,checkpoint,state,handle
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1495184252;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		completedCheckpoints.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByNameAndLock()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__			CompletedCheckpoint completedCheckpoint = null___			try {_				completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__				if (completedCheckpoint != null) {_					_					completedCheckpoint.registerSharedStates(sharedStateRegistry)__					completedCheckpoints.add(completedCheckpoint)__				}_			} catch (Exception e) {_				LOG.warn("Could not retrieve checkpoint. Removing it from the completed " +_					"checkpoint store.", e)___				_				removeBrokenStateHandle(checkpointStateHandle.f1, checkpointStateHandle.f0)__			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,completed,checkpoints,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,and,lock,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,if,completed,checkpoint,null,completed,checkpoint,register,shared,states,shared,state,registry,completed,checkpoints,add,completed,checkpoint,catch,exception,e,log,warn,could,not,retrieve,checkpoint,removing,it,from,the,completed,checkpoint,store,e,remove,broken,state,handle,checkpoint,state,handle,f1,checkpoint,state,handle,f0
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1502801814;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		_		_		completedCheckpoints.clear()___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByNameAndLock()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__			CompletedCheckpoint completedCheckpoint = null___			try {_				completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__				if (completedCheckpoint != null) {_					completedCheckpoints.add(completedCheckpoint)__				}_			} catch (Exception e) {_				LOG.warn("Could not retrieve checkpoint. Removing it from the completed " +_					"checkpoint store.", e)___				_				removeBrokenStateHandle(checkpointStateHandle.f1, checkpointStateHandle.f0)__			}_		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,completed,checkpoints,clear,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,and,lock,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,if,completed,checkpoint,null,completed,checkpoints,add,completed,checkpoint,catch,exception,e,log,warn,could,not,retrieve,checkpoint,removing,it,from,the,completed,checkpoint,store,e,remove,broken,state,handle,checkpoint,state,handle,f1,checkpoint,state,handle,f0
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1508847658;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByNameAndLock()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		_		_		_		_		_		_		_		_		_		_		_		_		List<CompletedCheckpoint> lastTryRetrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		List<CompletedCheckpoint> retrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		do {_			LOG.info("Trying to fetch {} checkpoints from storage.", numberOfInitialCheckpoints)___			lastTryRetrievedCheckpoints.clear()__			lastTryRetrievedCheckpoints.addAll(retrievedCheckpoints)___			retrievedCheckpoints.clear()___			for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__				CompletedCheckpoint completedCheckpoint = null___				try {_					completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__					if (completedCheckpoint != null) {_						retrievedCheckpoints.add(completedCheckpoint)__					}_				} catch (Exception e) {_					LOG.warn("Could not retrieve checkpoint, not adding to list of recovered checkpoints.", e)__				}_			}__		} while (retrievedCheckpoints.size() != numberOfInitialCheckpoints &&_			!lastTryRetrievedCheckpoints.equals(retrievedCheckpoints))___		_		_		_		completedCheckpoints.clear()__		completedCheckpoints.addAll(retrievedCheckpoints)___		if (completedCheckpoints.isEmpty() && numberOfInitialCheckpoints > 0) {_			throw new FlinkException(_				"Could not read any of the " + numberOfInitialCheckpoints + " from storage.")__		} else if (completedCheckpoints.size() != numberOfInitialCheckpoints) {_			LOG.warn(_				"Could only fetch {} of {} checkpoints from storage.",_				completedCheckpoints.size(),_				numberOfInitialCheckpoints)__		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,and,lock,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,list,completed,checkpoint,last,try,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,list,completed,checkpoint,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,do,log,info,trying,to,fetch,checkpoints,from,storage,number,of,initial,checkpoints,last,try,retrieved,checkpoints,clear,last,try,retrieved,checkpoints,add,all,retrieved,checkpoints,retrieved,checkpoints,clear,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,if,completed,checkpoint,null,retrieved,checkpoints,add,completed,checkpoint,catch,exception,e,log,warn,could,not,retrieve,checkpoint,not,adding,to,list,of,recovered,checkpoints,e,while,retrieved,checkpoints,size,number,of,initial,checkpoints,last,try,retrieved,checkpoints,equals,retrieved,checkpoints,completed,checkpoints,clear,completed,checkpoints,add,all,retrieved,checkpoints,if,completed,checkpoints,is,empty,number,of,initial,checkpoints,0,throw,new,flink,exception,could,not,read,any,of,the,number,of,initial,checkpoints,from,storage,else,if,completed,checkpoints,size,number,of,initial,checkpoints,log,warn,could,only,fetch,of,checkpoints,from,storage,completed,checkpoints,size,number,of,initial,checkpoints
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1520261440;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByNameAndLock()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		_		_		_		_		_		_		_		_		_		_		_		_		List<CompletedCheckpoint> lastTryRetrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		List<CompletedCheckpoint> retrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		do {_			LOG.info("Trying to fetch {} checkpoints from storage.", numberOfInitialCheckpoints)___			lastTryRetrievedCheckpoints.clear()__			lastTryRetrievedCheckpoints.addAll(retrievedCheckpoints)___			retrievedCheckpoints.clear()___			for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__				CompletedCheckpoint completedCheckpoint = null___				try {_					completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__					if (completedCheckpoint != null) {_						retrievedCheckpoints.add(completedCheckpoint)__					}_				} catch (Exception e) {_					LOG.warn("Could not retrieve checkpoint, not adding to list of recovered checkpoints.", e)__				}_			}__		} while (retrievedCheckpoints.size() != numberOfInitialCheckpoints &&_			!CompletedCheckpoint.checkpointsMatch(lastTryRetrievedCheckpoints, retrievedCheckpoints))___		_		_		_		completedCheckpoints.clear()__		completedCheckpoints.addAll(retrievedCheckpoints)___		if (completedCheckpoints.isEmpty() && numberOfInitialCheckpoints > 0) {_			throw new FlinkException(_				"Could not read any of the " + numberOfInitialCheckpoints + " from storage.")__		} else if (completedCheckpoints.size() != numberOfInitialCheckpoints) {_			LOG.warn(_				"Could only fetch {} of {} checkpoints from storage.",_				completedCheckpoints.size(),_				numberOfInitialCheckpoints)__		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,and,lock,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,list,completed,checkpoint,last,try,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,list,completed,checkpoint,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,do,log,info,trying,to,fetch,checkpoints,from,storage,number,of,initial,checkpoints,last,try,retrieved,checkpoints,clear,last,try,retrieved,checkpoints,add,all,retrieved,checkpoints,retrieved,checkpoints,clear,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,if,completed,checkpoint,null,retrieved,checkpoints,add,completed,checkpoint,catch,exception,e,log,warn,could,not,retrieve,checkpoint,not,adding,to,list,of,recovered,checkpoints,e,while,retrieved,checkpoints,size,number,of,initial,checkpoints,completed,checkpoint,checkpoints,match,last,try,retrieved,checkpoints,retrieved,checkpoints,completed,checkpoints,clear,completed,checkpoints,add,all,retrieved,checkpoints,if,completed,checkpoints,is,empty,number,of,initial,checkpoints,0,throw,new,flink,exception,could,not,read,any,of,the,number,of,initial,checkpoints,from,storage,else,if,completed,checkpoints,size,number,of,initial,checkpoints,log,warn,could,only,fetch,of,checkpoints,from,storage,completed,checkpoints,size,number,of,initial,checkpoints
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1520782982;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByNameAndLock()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		_		_		_		_		_		_		_		_		_		_		_		_		List<CompletedCheckpoint> lastTryRetrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		List<CompletedCheckpoint> retrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		do {_			LOG.info("Trying to fetch {} checkpoints from storage.", numberOfInitialCheckpoints)___			lastTryRetrievedCheckpoints.clear()__			lastTryRetrievedCheckpoints.addAll(retrievedCheckpoints)___			retrievedCheckpoints.clear()___			for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__				CompletedCheckpoint completedCheckpoint = null___				try {_					completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__					if (completedCheckpoint != null) {_						retrievedCheckpoints.add(completedCheckpoint)__					}_				} catch (Exception e) {_					LOG.warn("Could not retrieve checkpoint, not adding to list of recovered checkpoints.", e)__				}_			}__		} while (retrievedCheckpoints.size() != numberOfInitialCheckpoints &&_			!CompletedCheckpoint.checkpointsMatch(lastTryRetrievedCheckpoints, retrievedCheckpoints))___		_		_		_		completedCheckpoints.clear()__		completedCheckpoints.addAll(retrievedCheckpoints)___		if (completedCheckpoints.isEmpty() && numberOfInitialCheckpoints > 0) {_			throw new FlinkException(_				"Could not read any of the " + numberOfInitialCheckpoints + " checkpoints from storage.")__		} else if (completedCheckpoints.size() != numberOfInitialCheckpoints) {_			LOG.warn(_				"Could only fetch {} of {} checkpoints from storage.",_				completedCheckpoints.size(),_				numberOfInitialCheckpoints)__		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,and,lock,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,list,completed,checkpoint,last,try,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,list,completed,checkpoint,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,do,log,info,trying,to,fetch,checkpoints,from,storage,number,of,initial,checkpoints,last,try,retrieved,checkpoints,clear,last,try,retrieved,checkpoints,add,all,retrieved,checkpoints,retrieved,checkpoints,clear,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,if,completed,checkpoint,null,retrieved,checkpoints,add,completed,checkpoint,catch,exception,e,log,warn,could,not,retrieve,checkpoint,not,adding,to,list,of,recovered,checkpoints,e,while,retrieved,checkpoints,size,number,of,initial,checkpoints,completed,checkpoint,checkpoints,match,last,try,retrieved,checkpoints,retrieved,checkpoints,completed,checkpoints,clear,completed,checkpoints,add,all,retrieved,checkpoints,if,completed,checkpoints,is,empty,number,of,initial,checkpoints,0,throw,new,flink,exception,could,not,read,any,of,the,number,of,initial,checkpoints,checkpoints,from,storage,else,if,completed,checkpoints,size,number,of,initial,checkpoints,log,warn,could,only,fetch,of,checkpoints,from,storage,completed,checkpoints,size,number,of,initial,checkpoints
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1536763132;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByNameAndLock()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		_		_		_		_		_		_		_		_		_		_		_		_		List<CompletedCheckpoint> lastTryRetrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		List<CompletedCheckpoint> retrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		do {_			LOG.info("Trying to fetch {} checkpoints from storage.", numberOfInitialCheckpoints)___			lastTryRetrievedCheckpoints.clear()__			lastTryRetrievedCheckpoints.addAll(retrievedCheckpoints)___			retrievedCheckpoints.clear()___			for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__				CompletedCheckpoint completedCheckpoint = null___				try {_					completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__					if (completedCheckpoint != null) {_						retrievedCheckpoints.add(completedCheckpoint)__					}_				} catch (Exception e) {_					LOG.warn("Could not retrieve checkpoint, not adding to list of recovered checkpoints.", e)__				}_			}__		} while (retrievedCheckpoints.size() != numberOfInitialCheckpoints &&_			!CompletedCheckpoint.checkpointsMatch(lastTryRetrievedCheckpoints, retrievedCheckpoints))___		_		_		_		completedCheckpoints.clear()__		completedCheckpoints.addAll(retrievedCheckpoints)___		if (completedCheckpoints.isEmpty() && numberOfInitialCheckpoints > 0) {_			throw new FlinkException(_				"Could not read any of the " + numberOfInitialCheckpoints + " checkpoints from storage.")__		} else if (completedCheckpoints.size() != numberOfInitialCheckpoints) {_			LOG.warn(_				"Could only fetch {} of {} checkpoints from storage.",_				completedCheckpoints.size(),_				numberOfInitialCheckpoints)__		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,and,lock,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,list,completed,checkpoint,last,try,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,list,completed,checkpoint,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,do,log,info,trying,to,fetch,checkpoints,from,storage,number,of,initial,checkpoints,last,try,retrieved,checkpoints,clear,last,try,retrieved,checkpoints,add,all,retrieved,checkpoints,retrieved,checkpoints,clear,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,if,completed,checkpoint,null,retrieved,checkpoints,add,completed,checkpoint,catch,exception,e,log,warn,could,not,retrieve,checkpoint,not,adding,to,list,of,recovered,checkpoints,e,while,retrieved,checkpoints,size,number,of,initial,checkpoints,completed,checkpoint,checkpoints,match,last,try,retrieved,checkpoints,retrieved,checkpoints,completed,checkpoints,clear,completed,checkpoints,add,all,retrieved,checkpoints,if,completed,checkpoints,is,empty,number,of,initial,checkpoints,0,throw,new,flink,exception,could,not,read,any,of,the,number,of,initial,checkpoints,checkpoints,from,storage,else,if,completed,checkpoints,size,number,of,initial,checkpoints,log,warn,could,only,fetch,of,checkpoints,from,storage,completed,checkpoints,size,number,of,initial,checkpoints
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1536763178;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByNameAndLock()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		_		_		_		_		_		_		_		_		_		_		_		_		List<CompletedCheckpoint> lastTryRetrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		List<CompletedCheckpoint> retrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		do {_			LOG.info("Trying to fetch {} checkpoints from storage.", numberOfInitialCheckpoints)___			lastTryRetrievedCheckpoints.clear()__			lastTryRetrievedCheckpoints.addAll(retrievedCheckpoints)___			retrievedCheckpoints.clear()___			for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__				CompletedCheckpoint completedCheckpoint = null___				try {_					completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__					if (completedCheckpoint != null) {_						retrievedCheckpoints.add(completedCheckpoint)__					}_				} catch (Exception e) {_					LOG.warn("Could not retrieve checkpoint, not adding to list of recovered checkpoints.", e)__				}_			}__		} while (retrievedCheckpoints.size() != numberOfInitialCheckpoints &&_			!CompletedCheckpoint.checkpointsMatch(lastTryRetrievedCheckpoints, retrievedCheckpoints))___		_		_		_		completedCheckpoints.clear()__		completedCheckpoints.addAll(retrievedCheckpoints)___		if (completedCheckpoints.isEmpty() && numberOfInitialCheckpoints > 0) {_			throw new FlinkException(_				"Could not read any of the " + numberOfInitialCheckpoints + " checkpoints from storage.")__		} else if (completedCheckpoints.size() != numberOfInitialCheckpoints) {_			LOG.warn(_				"Could only fetch {} of {} checkpoints from storage.",_				completedCheckpoints.size(),_				numberOfInitialCheckpoints)__		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,and,lock,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,list,completed,checkpoint,last,try,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,list,completed,checkpoint,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,do,log,info,trying,to,fetch,checkpoints,from,storage,number,of,initial,checkpoints,last,try,retrieved,checkpoints,clear,last,try,retrieved,checkpoints,add,all,retrieved,checkpoints,retrieved,checkpoints,clear,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,if,completed,checkpoint,null,retrieved,checkpoints,add,completed,checkpoint,catch,exception,e,log,warn,could,not,retrieve,checkpoint,not,adding,to,list,of,recovered,checkpoints,e,while,retrieved,checkpoints,size,number,of,initial,checkpoints,completed,checkpoint,checkpoints,match,last,try,retrieved,checkpoints,retrieved,checkpoints,completed,checkpoints,clear,completed,checkpoints,add,all,retrieved,checkpoints,if,completed,checkpoints,is,empty,number,of,initial,checkpoints,0,throw,new,flink,exception,could,not,read,any,of,the,number,of,initial,checkpoints,checkpoints,from,storage,else,if,completed,checkpoints,size,number,of,initial,checkpoints,log,warn,could,only,fetch,of,checkpoints,from,storage,completed,checkpoints,size,number,of,initial,checkpoints
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1536930104;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllSortedByNameAndLock()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		_		_		_		_		_		_		_		_		_		_		_		_		List<CompletedCheckpoint> lastTryRetrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		List<CompletedCheckpoint> retrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		do {_			LOG.info("Trying to fetch {} checkpoints from storage.", numberOfInitialCheckpoints)___			lastTryRetrievedCheckpoints.clear()__			lastTryRetrievedCheckpoints.addAll(retrievedCheckpoints)___			retrievedCheckpoints.clear()___			for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__				CompletedCheckpoint completedCheckpoint = null___				try {_					completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__					if (completedCheckpoint != null) {_						retrievedCheckpoints.add(completedCheckpoint)__					}_				} catch (Exception e) {_					LOG.warn("Could not retrieve checkpoint, not adding to list of recovered checkpoints.", e)__				}_			}__		} while (retrievedCheckpoints.size() != numberOfInitialCheckpoints &&_			!CompletedCheckpoint.checkpointsMatch(lastTryRetrievedCheckpoints, retrievedCheckpoints))___		_		_		_		completedCheckpoints.clear()__		completedCheckpoints.addAll(retrievedCheckpoints)___		if (completedCheckpoints.isEmpty() && numberOfInitialCheckpoints > 0) {_			throw new FlinkException(_				"Could not read any of the " + numberOfInitialCheckpoints + " checkpoints from storage.")__		} else if (completedCheckpoints.size() != numberOfInitialCheckpoints) {_			LOG.warn(_				"Could only fetch {} of {} checkpoints from storage.",_				completedCheckpoints.size(),_				numberOfInitialCheckpoints)__		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,sorted,by,name,and,lock,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,list,completed,checkpoint,last,try,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,list,completed,checkpoint,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,do,log,info,trying,to,fetch,checkpoints,from,storage,number,of,initial,checkpoints,last,try,retrieved,checkpoints,clear,last,try,retrieved,checkpoints,add,all,retrieved,checkpoints,retrieved,checkpoints,clear,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,if,completed,checkpoint,null,retrieved,checkpoints,add,completed,checkpoint,catch,exception,e,log,warn,could,not,retrieve,checkpoint,not,adding,to,list,of,recovered,checkpoints,e,while,retrieved,checkpoints,size,number,of,initial,checkpoints,completed,checkpoint,checkpoints,match,last,try,retrieved,checkpoints,retrieved,checkpoints,completed,checkpoints,clear,completed,checkpoints,add,all,retrieved,checkpoints,if,completed,checkpoints,is,empty,number,of,initial,checkpoints,0,throw,new,flink,exception,could,not,read,any,of,the,number,of,initial,checkpoints,checkpoints,from,storage,else,if,completed,checkpoints,size,number,of,initial,checkpoints,log,warn,could,only,fetch,of,checkpoints,from,storage,completed,checkpoints,size,number,of,initial,checkpoints
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1537357883;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllAndLock()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		Collections.sort(initialCheckpoints, STRING_COMPARATOR)___		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		_		_		_		_		_		_		_		_		_		_		_		_		List<CompletedCheckpoint> lastTryRetrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		List<CompletedCheckpoint> retrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		do {_			LOG.info("Trying to fetch {} checkpoints from storage.", numberOfInitialCheckpoints)___			lastTryRetrievedCheckpoints.clear()__			lastTryRetrievedCheckpoints.addAll(retrievedCheckpoints)___			retrievedCheckpoints.clear()___			for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__				CompletedCheckpoint completedCheckpoint = null___				try {_					completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__					if (completedCheckpoint != null) {_						retrievedCheckpoints.add(completedCheckpoint)__					}_				} catch (Exception e) {_					LOG.warn("Could not retrieve checkpoint, not adding to list of recovered checkpoints.", e)__				}_			}__		} while (retrievedCheckpoints.size() != numberOfInitialCheckpoints &&_			!CompletedCheckpoint.checkpointsMatch(lastTryRetrievedCheckpoints, retrievedCheckpoints))___		_		_		_		completedCheckpoints.clear()__		completedCheckpoints.addAll(retrievedCheckpoints)___		if (completedCheckpoints.isEmpty() && numberOfInitialCheckpoints > 0) {_			throw new FlinkException(_				"Could not read any of the " + numberOfInitialCheckpoints + " checkpoints from storage.")__		} else if (completedCheckpoints.size() != numberOfInitialCheckpoints) {_			LOG.warn(_				"Could only fetch {} of {} checkpoints from storage.",_				completedCheckpoints.size(),_				numberOfInitialCheckpoints)__		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,and,lock,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,collections,sort,initial,checkpoints,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,list,completed,checkpoint,last,try,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,list,completed,checkpoint,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,do,log,info,trying,to,fetch,checkpoints,from,storage,number,of,initial,checkpoints,last,try,retrieved,checkpoints,clear,last,try,retrieved,checkpoints,add,all,retrieved,checkpoints,retrieved,checkpoints,clear,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,if,completed,checkpoint,null,retrieved,checkpoints,add,completed,checkpoint,catch,exception,e,log,warn,could,not,retrieve,checkpoint,not,adding,to,list,of,recovered,checkpoints,e,while,retrieved,checkpoints,size,number,of,initial,checkpoints,completed,checkpoint,checkpoints,match,last,try,retrieved,checkpoints,retrieved,checkpoints,completed,checkpoints,clear,completed,checkpoints,add,all,retrieved,checkpoints,if,completed,checkpoints,is,empty,number,of,initial,checkpoints,0,throw,new,flink,exception,could,not,read,any,of,the,number,of,initial,checkpoints,checkpoints,from,storage,else,if,completed,checkpoints,size,number,of,initial,checkpoints,log,warn,could,only,fetch,of,checkpoints,from,storage,completed,checkpoints,size,number,of,initial,checkpoints
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1547547304;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllAndLock()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		Collections.sort(initialCheckpoints, STRING_COMPARATOR)___		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		_		_		_		_		_		_		_		_		_		_		_		_		List<CompletedCheckpoint> lastTryRetrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		List<CompletedCheckpoint> retrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		do {_			LOG.info("Trying to fetch {} checkpoints from storage.", numberOfInitialCheckpoints)___			lastTryRetrievedCheckpoints.clear()__			lastTryRetrievedCheckpoints.addAll(retrievedCheckpoints)___			retrievedCheckpoints.clear()___			for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__				CompletedCheckpoint completedCheckpoint = null___				try {_					completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__					if (completedCheckpoint != null) {_						retrievedCheckpoints.add(completedCheckpoint)__					}_				} catch (Exception e) {_					LOG.warn("Could not retrieve checkpoint, not adding to list of recovered checkpoints.", e)__				}_			}__		} while (retrievedCheckpoints.size() != numberOfInitialCheckpoints &&_			!CompletedCheckpoint.checkpointsMatch(lastTryRetrievedCheckpoints, retrievedCheckpoints))___		_		_		_		completedCheckpoints.clear()__		completedCheckpoints.addAll(retrievedCheckpoints)___		if (completedCheckpoints.isEmpty() && numberOfInitialCheckpoints > 0) {_			throw new FlinkException(_				"Could not read any of the " + numberOfInitialCheckpoints + " checkpoints from storage.")__		} else if (completedCheckpoints.size() != numberOfInitialCheckpoints) {_			LOG.warn(_				"Could only fetch {} of {} checkpoints from storage.",_				completedCheckpoints.size(),_				numberOfInitialCheckpoints)__		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,and,lock,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,collections,sort,initial,checkpoints,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,list,completed,checkpoint,last,try,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,list,completed,checkpoint,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,do,log,info,trying,to,fetch,checkpoints,from,storage,number,of,initial,checkpoints,last,try,retrieved,checkpoints,clear,last,try,retrieved,checkpoints,add,all,retrieved,checkpoints,retrieved,checkpoints,clear,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,if,completed,checkpoint,null,retrieved,checkpoints,add,completed,checkpoint,catch,exception,e,log,warn,could,not,retrieve,checkpoint,not,adding,to,list,of,recovered,checkpoints,e,while,retrieved,checkpoints,size,number,of,initial,checkpoints,completed,checkpoint,checkpoints,match,last,try,retrieved,checkpoints,retrieved,checkpoints,completed,checkpoints,clear,completed,checkpoints,add,all,retrieved,checkpoints,if,completed,checkpoints,is,empty,number,of,initial,checkpoints,0,throw,new,flink,exception,could,not,read,any,of,the,number,of,initial,checkpoints,checkpoints,from,storage,else,if,completed,checkpoints,size,number,of,initial,checkpoints,log,warn,could,only,fetch,of,checkpoints,from,storage,completed,checkpoints,size,number,of,initial,checkpoints
ZooKeeperCompletedCheckpointStore -> @Override 	public void recover() throws Exception;1547547304;Gets the latest checkpoint from ZooKeeper and removes all others.__<p><strong>Important</strong>: Even if there are more than one checkpoint in ZooKeeper,_this will only recover the latest and discard the others. Otherwise, there is no guarantee_that the history of checkpoints is consistent.;@Override_	public void recover() throws Exception {_		LOG.info("Recovering checkpoints from ZooKeeper.")___		_		List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> initialCheckpoints__		while (true) {_			try {_				initialCheckpoints = checkpointsInZooKeeper.getAllAndLock()__				break__			}_			catch (ConcurrentModificationException e) {_				LOG.warn("Concurrent modification while reading from ZooKeeper. Retrying.")__			}_		}__		Collections.sort(initialCheckpoints, STRING_COMPARATOR)___		int numberOfInitialCheckpoints = initialCheckpoints.size()___		LOG.info("Found {} checkpoints in ZooKeeper.", numberOfInitialCheckpoints)___		_		_		_		_		_		_		_		_		_		_		_		_		List<CompletedCheckpoint> lastTryRetrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		List<CompletedCheckpoint> retrievedCheckpoints = new ArrayList<>(numberOfInitialCheckpoints)__		do {_			LOG.info("Trying to fetch {} checkpoints from storage.", numberOfInitialCheckpoints)___			lastTryRetrievedCheckpoints.clear()__			lastTryRetrievedCheckpoints.addAll(retrievedCheckpoints)___			retrievedCheckpoints.clear()___			for (Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> checkpointStateHandle : initialCheckpoints) {__				CompletedCheckpoint completedCheckpoint = null___				try {_					completedCheckpoint = retrieveCompletedCheckpoint(checkpointStateHandle)__					if (completedCheckpoint != null) {_						retrievedCheckpoints.add(completedCheckpoint)__					}_				} catch (Exception e) {_					LOG.warn("Could not retrieve checkpoint, not adding to list of recovered checkpoints.", e)__				}_			}__		} while (retrievedCheckpoints.size() != numberOfInitialCheckpoints &&_			!CompletedCheckpoint.checkpointsMatch(lastTryRetrievedCheckpoints, retrievedCheckpoints))___		_		_		_		completedCheckpoints.clear()__		completedCheckpoints.addAll(retrievedCheckpoints)___		if (completedCheckpoints.isEmpty() && numberOfInitialCheckpoints > 0) {_			throw new FlinkException(_				"Could not read any of the " + numberOfInitialCheckpoints + " checkpoints from storage.")__		} else if (completedCheckpoints.size() != numberOfInitialCheckpoints) {_			LOG.warn(_				"Could only fetch {} of {} checkpoints from storage.",_				completedCheckpoints.size(),_				numberOfInitialCheckpoints)__		}_	};gets,the,latest,checkpoint,from,zoo,keeper,and,removes,all,others,p,strong,important,strong,even,if,there,are,more,than,one,checkpoint,in,zoo,keeper,this,will,only,recover,the,latest,and,discard,the,others,otherwise,there,is,no,guarantee,that,the,history,of,checkpoints,is,consistent;override,public,void,recover,throws,exception,log,info,recovering,checkpoints,from,zoo,keeper,list,tuple2,retrievable,state,handle,completed,checkpoint,string,initial,checkpoints,while,true,try,initial,checkpoints,checkpoints,in,zoo,keeper,get,all,and,lock,break,catch,concurrent,modification,exception,e,log,warn,concurrent,modification,while,reading,from,zoo,keeper,retrying,collections,sort,initial,checkpoints,int,number,of,initial,checkpoints,initial,checkpoints,size,log,info,found,checkpoints,in,zoo,keeper,number,of,initial,checkpoints,list,completed,checkpoint,last,try,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,list,completed,checkpoint,retrieved,checkpoints,new,array,list,number,of,initial,checkpoints,do,log,info,trying,to,fetch,checkpoints,from,storage,number,of,initial,checkpoints,last,try,retrieved,checkpoints,clear,last,try,retrieved,checkpoints,add,all,retrieved,checkpoints,retrieved,checkpoints,clear,for,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoint,state,handle,initial,checkpoints,completed,checkpoint,completed,checkpoint,null,try,completed,checkpoint,retrieve,completed,checkpoint,checkpoint,state,handle,if,completed,checkpoint,null,retrieved,checkpoints,add,completed,checkpoint,catch,exception,e,log,warn,could,not,retrieve,checkpoint,not,adding,to,list,of,recovered,checkpoints,e,while,retrieved,checkpoints,size,number,of,initial,checkpoints,completed,checkpoint,checkpoints,match,last,try,retrieved,checkpoints,retrieved,checkpoints,completed,checkpoints,clear,completed,checkpoints,add,all,retrieved,checkpoints,if,completed,checkpoints,is,empty,number,of,initial,checkpoints,0,throw,new,flink,exception,could,not,read,any,of,the,number,of,initial,checkpoints,checkpoints,from,storage,else,if,completed,checkpoints,size,number,of,initial,checkpoints,log,warn,could,only,fetch,of,checkpoints,from,storage,completed,checkpoints,size,number,of,initial,checkpoints
ZooKeeperCompletedCheckpointStore -> private void removeFromZooKeeperAndDiscardCheckpoint( 			final Tuple2<StateHandle<CompletedCheckpoint>, String> stateHandleAndPath) throws Exception;1445293011;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void removeFromZooKeeperAndDiscardCheckpoint(_			final Tuple2<StateHandle<CompletedCheckpoint>, String> stateHandleAndPath) throws Exception {__		final BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							_							CompletedCheckpoint checkpoint = stateHandleAndPath_									.f0.getState(userClassLoader)___							checkpoint.discard(userClassLoader)___							_							stateHandleAndPath.f0.discardState()___							_							LOG.debug("Discarded " + checkpoint)__						}_						else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					}_					else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint.", e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,from,zoo,keeper,and,discard,checkpoint,final,tuple2,state,handle,completed,checkpoint,string,state,handle,and,path,throws,exception,final,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,completed,checkpoint,checkpoint,state,handle,and,path,f0,get,state,user,class,loader,checkpoint,discard,user,class,loader,state,handle,and,path,f0,discard,state,log,debug,discarded,checkpoint,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,error,failed,to,discard,checkpoint,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void removeFromZooKeeperAndDiscardCheckpoint( 			final Tuple2<StateHandle<CompletedCheckpoint>, String> stateHandleAndPath) throws Exception;1445327854;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void removeFromZooKeeperAndDiscardCheckpoint(_			final Tuple2<StateHandle<CompletedCheckpoint>, String> stateHandleAndPath) throws Exception {__		final BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							_							CompletedCheckpoint checkpoint = stateHandleAndPath_									.f0.getState(userClassLoader)___							checkpoint.discard(userClassLoader)___							_							stateHandleAndPath.f0.discardState()___							_							LOG.debug("Discarded " + checkpoint)__						}_						else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					}_					else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint.", e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,from,zoo,keeper,and,discard,checkpoint,final,tuple2,state,handle,completed,checkpoint,string,state,handle,and,path,throws,exception,final,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,completed,checkpoint,checkpoint,state,handle,and,path,f0,get,state,user,class,loader,checkpoint,discard,user,class,loader,state,handle,and,path,f0,discard,state,log,debug,discarded,checkpoint,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,error,failed,to,discard,checkpoint,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void removeFromZooKeeperAndDiscardCheckpoint( 			final Tuple2<StateHandle<CompletedCheckpoint>, String> stateHandleAndPath) throws Exception;1456343760;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void removeFromZooKeeperAndDiscardCheckpoint(_			final Tuple2<StateHandle<CompletedCheckpoint>, String> stateHandleAndPath) throws Exception {__		final BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							_							CompletedCheckpoint checkpoint = stateHandleAndPath_									.f0.getState(userClassLoader)___							checkpoint.discard(userClassLoader)___							_							stateHandleAndPath.f0.discardState()___							_							LOG.debug("Discarded " + checkpoint)__						}_						else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					}_					else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint.", e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,from,zoo,keeper,and,discard,checkpoint,final,tuple2,state,handle,completed,checkpoint,string,state,handle,and,path,throws,exception,final,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,completed,checkpoint,checkpoint,state,handle,and,path,f0,get,state,user,class,loader,checkpoint,discard,user,class,loader,state,handle,and,path,f0,discard,state,log,debug,discarded,checkpoint,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,error,failed,to,discard,checkpoint,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void removeFromZooKeeperAndDiscardCheckpoint( 			final Tuple2<StateHandle<CompletedCheckpoint>, String> stateHandleAndPath) throws Exception;1465991918;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void removeFromZooKeeperAndDiscardCheckpoint(_			final Tuple2<StateHandle<CompletedCheckpoint>, String> stateHandleAndPath) throws Exception {__		final BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							_							CompletedCheckpoint checkpoint = stateHandleAndPath_									.f0.getState(userClassLoader)___							checkpoint.discard(userClassLoader)___							_							stateHandleAndPath.f0.discardState()___							_							LOG.debug("Discarded " + checkpoint)__						}_						else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					}_					else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint.", e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,from,zoo,keeper,and,discard,checkpoint,final,tuple2,state,handle,completed,checkpoint,string,state,handle,and,path,throws,exception,final,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,completed,checkpoint,checkpoint,state,handle,and,path,f0,get,state,user,class,loader,checkpoint,discard,user,class,loader,state,handle,and,path,f0,discard,state,log,debug,discarded,checkpoint,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,error,failed,to,discard,checkpoint,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void removeFromZooKeeperAndDiscardCheckpoint( 			final Tuple2<StateHandle<CompletedCheckpoint>, String> stateHandleAndPath) throws Exception;1469190400;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void removeFromZooKeeperAndDiscardCheckpoint(_			final Tuple2<StateHandle<CompletedCheckpoint>, String> stateHandleAndPath) throws Exception {__		final BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							_							CompletedCheckpoint checkpoint = stateHandleAndPath_									.f0.getState(userClassLoader)___							checkpoint.discard(userClassLoader)___							_							stateHandleAndPath.f0.discardState()___							_							LOG.debug("Discarded " + checkpoint)__						}_						else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					}_					else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint.", e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,from,zoo,keeper,and,discard,checkpoint,final,tuple2,state,handle,completed,checkpoint,string,state,handle,and,path,throws,exception,final,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,completed,checkpoint,checkpoint,state,handle,and,path,f0,get,state,user,class,loader,checkpoint,discard,user,class,loader,state,handle,and,path,f0,discard,state,log,debug,discarded,checkpoint,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,error,failed,to,discard,checkpoint,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void removeFromZooKeeperAndDiscardCheckpoint( 			final Tuple2<StateHandle<CompletedCheckpoint>, String> stateHandleAndPath) throws Exception;1472033364;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void removeFromZooKeeperAndDiscardCheckpoint(_			final Tuple2<StateHandle<CompletedCheckpoint>, String> stateHandleAndPath) throws Exception {__		final BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							_							CompletedCheckpoint checkpoint = stateHandleAndPath_									.f0.getState(userClassLoader)___							checkpoint.discard(userClassLoader)___							_							stateHandleAndPath.f0.discardState()___							_							LOG.debug("Discarded " + checkpoint)__						}_						else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					}_					else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				}_				catch (Exception e) {_					LOG.error("Failed to discard checkpoint.", e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,from,zoo,keeper,and,discard,checkpoint,final,tuple2,state,handle,completed,checkpoint,string,state,handle,and,path,throws,exception,final,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,completed,checkpoint,checkpoint,state,handle,and,path,f0,get,state,user,class,loader,checkpoint,discard,user,class,loader,state,handle,and,path,f0,discard,state,log,debug,discarded,checkpoint,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,error,failed,to,discard,checkpoint,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> protected static long pathToCheckpointId(String path);1481290933;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;protected static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;protected,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> protected static long pathToCheckpointId(String path);1488304750;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;protected static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;protected,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> protected static long pathToCheckpointId(String path);1489479789;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;protected static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;protected,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> protected static long pathToCheckpointId(String path);1489671807;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;protected static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;protected,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> protected static long pathToCheckpointId(String path);1490012491;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;protected static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;protected,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> protected static long pathToCheckpointId(String path);1492867556;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;protected static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;protected,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> protected static long pathToCheckpointId(String path);1492867556;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;protected static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;protected,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> protected static long pathToCheckpointId(String path);1494762590;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;protected static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;protected,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception;1445293011;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		_		String path = String.format("/%s", checkpoint.getCheckpointID())___		final StateHandle<CompletedCheckpoint> stateHandle = checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		if (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			removeFromZooKeeperAndDiscardCheckpoint(checkpointStateHandles.removeFirst())__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,string,path,string,format,s,checkpoint,get,checkpoint,id,final,state,handle,completed,checkpoint,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,if,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,remove,from,zoo,keeper,and,discard,checkpoint,checkpoint,state,handles,remove,first,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception;1445327854;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		_		String path = String.format("/%s", checkpoint.getCheckpointID())___		final StateHandle<CompletedCheckpoint> stateHandle = checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		if (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			removeFromZooKeeperAndDiscardCheckpoint(checkpointStateHandles.removeFirst())__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,string,path,string,format,s,checkpoint,get,checkpoint,id,final,state,handle,completed,checkpoint,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,if,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,remove,from,zoo,keeper,and,discard,checkpoint,checkpoint,state,handles,remove,first,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception;1456343760;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		_		String path = String.format("/%s", checkpoint.getCheckpointID())___		final StateHandle<CompletedCheckpoint> stateHandle = checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		if (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			removeFromZooKeeperAndDiscardCheckpoint(checkpointStateHandles.removeFirst())__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,string,path,string,format,s,checkpoint,get,checkpoint,id,final,state,handle,completed,checkpoint,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,if,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,remove,from,zoo,keeper,and,discard,checkpoint,checkpoint,state,handles,remove,first,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception;1465991918;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		_		String path = String.format("/%s", checkpoint.getCheckpointID())___		final StateHandle<CompletedCheckpoint> stateHandle = checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		if (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			removeFromZooKeeperAndDiscardCheckpoint(checkpointStateHandles.removeFirst())__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,string,path,string,format,s,checkpoint,get,checkpoint,id,final,state,handle,completed,checkpoint,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,if,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,remove,from,zoo,keeper,and,discard,checkpoint,checkpoint,state,handles,remove,first,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception;1469190400;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		_		String path = String.format("/%s", checkpoint.getCheckpointID())___		final StateHandle<CompletedCheckpoint> stateHandle = checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		if (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			removeFromZooKeeperAndDiscardCheckpoint(checkpointStateHandles.removeFirst())__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,string,path,string,format,s,checkpoint,get,checkpoint,id,final,state,handle,completed,checkpoint,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,if,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,remove,from,zoo,keeper,and,discard,checkpoint,checkpoint,state,handles,remove,first,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception;1472033364;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		_		String path = String.format("/%s", checkpoint.getCheckpointID())___		final StateHandle<CompletedCheckpoint> stateHandle = checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		if (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			removeFromZooKeeperAndDiscardCheckpoint(checkpointStateHandles.removeFirst())__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,string,path,string,format,s,checkpoint,get,checkpoint,id,final,state,handle,completed,checkpoint,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,if,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,remove,from,zoo,keeper,and,discard,checkpoint,checkpoint,state,handles,remove,first,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception;1472663401;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		_		String path = String.format("/%s", checkpoint.getCheckpointID())___		final RetrievableStateHandle<CompletedCheckpoint> stateHandle =_				checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		if (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			removeFromZooKeeperAndDiscardCheckpoint(checkpointStateHandles.removeFirst())__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,string,path,string,format,s,checkpoint,get,checkpoint,id,final,retrievable,state,handle,completed,checkpoint,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,if,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,remove,from,zoo,keeper,and,discard,checkpoint,checkpoint,state,handles,remove,first,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception;1476432306;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		_		String path = String.format("/%s", checkpoint.getCheckpointID())___		final RetrievableStateHandle<CompletedCheckpoint> stateHandle =_				checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		if (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			removeSubsumed(checkpointStateHandles.removeFirst())__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,string,path,string,format,s,checkpoint,get,checkpoint,id,final,retrievable,state,handle,completed,checkpoint,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,if,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,remove,subsumed,checkpoint,state,handles,remove,first,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception;1479852016;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		_		String path = String.format("/%s", checkpoint.getCheckpointID())___		final RetrievableStateHandle<CompletedCheckpoint> stateHandle =_				checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		if (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			removeSubsumed(checkpointStateHandles.removeFirst())__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,string,path,string,format,s,checkpoint,get,checkpoint,id,final,retrievable,state,handle,completed,checkpoint,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,if,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,remove,subsumed,checkpoint,state,handles,remove,first,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception;1481290933;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		_		String path = checkpointIdToPath(checkpoint.getCheckpointID())___		final RetrievableStateHandle<CompletedCheckpoint> stateHandle =_				checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		if (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			removeSubsumed(checkpointStateHandles.removeFirst())__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,final,retrievable,state,handle,completed,checkpoint,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,if,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,remove,subsumed,checkpoint,state,handles,remove,first,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception;1488304750;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		_		String path = checkpointIdToPath(checkpoint.getCheckpointID())___		final RetrievableStateHandle<CompletedCheckpoint> stateHandle =_				checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		if (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			removeSubsumed(checkpointStateHandles.removeFirst())__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,final,retrievable,state,handle,completed,checkpoint,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,if,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,remove,subsumed,checkpoint,state,handles,remove,first,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception;1489479789;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		_		String path = checkpointIdToPath(checkpoint.getCheckpointID())___		final RetrievableStateHandle<CompletedCheckpoint> stateHandle =_				checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		while (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			removeSubsumed(checkpointStateHandles.removeFirst())__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,final,retrievable,state,handle,completed,checkpoint,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,while,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,remove,subsumed,checkpoint,state,handles,remove,first,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception;1489671807;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		_		String path = checkpointIdToPath(checkpoint.getCheckpointID())___		final RetrievableStateHandle<CompletedCheckpoint> stateHandle =_				checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		while (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			removeSubsumed(checkpointStateHandles.removeFirst())__		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,final,retrievable,state,handle,completed,checkpoint,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,while,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,remove,subsumed,checkpoint,state,handles,remove,first,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> @Override 	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception;1490012491;Synchronously writes the new checkpoints to ZooKeeper and asynchronously removes older ones.__@param checkpoint Completed checkpoint to add.;@Override_	public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {_		checkNotNull(checkpoint, "Checkpoint")___		_		String path = checkpointIdToPath(checkpoint.getCheckpointID())___		final RetrievableStateHandle<CompletedCheckpoint> stateHandle =_				checkpointsInZooKeeper.add(path, checkpoint)___		checkpointStateHandles.addLast(new Tuple2<>(stateHandle, path))___		_		while (checkpointStateHandles.size() > maxNumberOfCheckpointsToRetain) {_			try {_				removeSubsumed(checkpointStateHandles.removeFirst())__			} catch (Exception e) {_				LOG.warn("Failed to subsume the old checkpoint", e)__			}_		}__		LOG.debug("Added {} to {}.", checkpoint, path)__	};synchronously,writes,the,new,checkpoints,to,zoo,keeper,and,asynchronously,removes,older,ones,param,checkpoint,completed,checkpoint,to,add;override,public,void,add,checkpoint,completed,checkpoint,checkpoint,throws,exception,check,not,null,checkpoint,checkpoint,string,path,checkpoint,id,to,path,checkpoint,get,checkpoint,id,final,retrievable,state,handle,completed,checkpoint,state,handle,checkpoints,in,zoo,keeper,add,path,checkpoint,checkpoint,state,handles,add,last,new,tuple2,state,handle,path,while,checkpoint,state,handles,size,max,number,of,checkpoints,to,retain,try,remove,subsumed,checkpoint,state,handles,remove,first,catch,exception,e,log,warn,failed,to,subsume,the,old,checkpoint,e,log,debug,added,to,checkpoint,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			ClassLoader userClassLoader, 			CuratorFramework client, 			String checkpointsPath, 			StateStorageHelper<CompletedCheckpoint> stateStorage) throws Exception;1445327854;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param userClassLoader                The user class loader used to discard checkpoints_@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			ClassLoader userClassLoader,_			CuratorFramework client,_			String checkpointsPath,_			StateStorageHelper<CompletedCheckpoint> stateStorage) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain__		this.userClassLoader = checkNotNull(userClassLoader, "User class loader")___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,user,class,loader,the,user,class,loader,used,to,discard,checkpoints,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,class,loader,user,class,loader,curator,framework,client,string,checkpoints,path,state,storage,helper,completed,checkpoint,state,storage,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,this,user,class,loader,check,not,null,user,class,loader,user,class,loader,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			ClassLoader userClassLoader, 			CuratorFramework client, 			String checkpointsPath, 			StateStorageHelper<CompletedCheckpoint> stateStorage) throws Exception;1456343760;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param userClassLoader                The user class loader used to discard checkpoints_@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			ClassLoader userClassLoader,_			CuratorFramework client,_			String checkpointsPath,_			StateStorageHelper<CompletedCheckpoint> stateStorage) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain__		this.userClassLoader = checkNotNull(userClassLoader, "User class loader")___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,user,class,loader,the,user,class,loader,used,to,discard,checkpoints,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,class,loader,user,class,loader,curator,framework,client,string,checkpoints,path,state,storage,helper,completed,checkpoint,state,storage,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,this,user,class,loader,check,not,null,user,class,loader,user,class,loader,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			ClassLoader userClassLoader, 			CuratorFramework client, 			String checkpointsPath, 			StateStorageHelper<CompletedCheckpoint> stateStorage) throws Exception;1465991918;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param userClassLoader                The user class loader used to discard checkpoints_@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			ClassLoader userClassLoader,_			CuratorFramework client,_			String checkpointsPath,_			StateStorageHelper<CompletedCheckpoint> stateStorage) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain__		this.userClassLoader = checkNotNull(userClassLoader, "User class loader")___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,user,class,loader,the,user,class,loader,used,to,discard,checkpoints,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,class,loader,user,class,loader,curator,framework,client,string,checkpoints,path,state,storage,helper,completed,checkpoint,state,storage,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,this,user,class,loader,check,not,null,user,class,loader,user,class,loader,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			ClassLoader userClassLoader, 			CuratorFramework client, 			String checkpointsPath, 			StateStorageHelper<CompletedCheckpoint> stateStorage) throws Exception;1469190400;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param userClassLoader                The user class loader used to discard checkpoints_@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			ClassLoader userClassLoader,_			CuratorFramework client,_			String checkpointsPath,_			StateStorageHelper<CompletedCheckpoint> stateStorage) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain__		this.userClassLoader = checkNotNull(userClassLoader, "User class loader")___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,user,class,loader,the,user,class,loader,used,to,discard,checkpoints,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,class,loader,user,class,loader,curator,framework,client,string,checkpoints,path,state,storage,helper,completed,checkpoint,state,storage,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,this,user,class,loader,check,not,null,user,class,loader,user,class,loader,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> public ZooKeeperCompletedCheckpointStore( 			int maxNumberOfCheckpointsToRetain, 			ClassLoader userClassLoader, 			CuratorFramework client, 			String checkpointsPath, 			StateStorageHelper<CompletedCheckpoint> stateStorage) throws Exception;1472033364;Creates a {@link ZooKeeperCompletedCheckpointStore} instance.__@param maxNumberOfCheckpointsToRetain The maximum number of checkpoints to retain (at_least 1). Adding more checkpoints than this results_in older checkpoints being discarded. On recovery,_we will only start with a single checkpoint._@param userClassLoader                The user class loader used to discard checkpoints_@param client                         The Curator ZooKeeper client_@param checkpointsPath                The ZooKeeper path for the checkpoints (needs to_start with a '/')_@param stateStorage                   State storage to be used to persist the completed_checkpoint_@throws Exception;public ZooKeeperCompletedCheckpointStore(_			int maxNumberOfCheckpointsToRetain,_			ClassLoader userClassLoader,_			CuratorFramework client,_			String checkpointsPath,_			StateStorageHelper<CompletedCheckpoint> stateStorage) throws Exception {__		checkArgument(maxNumberOfCheckpointsToRetain >= 1, "Must retain at least one checkpoint.")__		checkNotNull(stateStorage, "State storage")___		this.maxNumberOfCheckpointsToRetain = maxNumberOfCheckpointsToRetain__		this.userClassLoader = checkNotNull(userClassLoader, "User class loader")___		checkNotNull(client, "Curator client")__		checkNotNull(checkpointsPath, "Checkpoints path")___		_		client.newNamespaceAwareEnsurePath(checkpointsPath)_				.ensure(client.getZookeeperClient())___		_		this.client = client.usingNamespace(client.getNamespace() + checkpointsPath)___		this.checkpointsInZooKeeper = new ZooKeeperStateHandleStore<>(this.client, stateStorage)___		this.checkpointStateHandles = new ArrayDeque<>(maxNumberOfCheckpointsToRetain + 1)___		LOG.info("Initialized in '{}'.", checkpointsPath)__	};creates,a,link,zoo,keeper,completed,checkpoint,store,instance,param,max,number,of,checkpoints,to,retain,the,maximum,number,of,checkpoints,to,retain,at,least,1,adding,more,checkpoints,than,this,results,in,older,checkpoints,being,discarded,on,recovery,we,will,only,start,with,a,single,checkpoint,param,user,class,loader,the,user,class,loader,used,to,discard,checkpoints,param,client,the,curator,zoo,keeper,client,param,checkpoints,path,the,zoo,keeper,path,for,the,checkpoints,needs,to,start,with,a,param,state,storage,state,storage,to,be,used,to,persist,the,completed,checkpoint,throws,exception;public,zoo,keeper,completed,checkpoint,store,int,max,number,of,checkpoints,to,retain,class,loader,user,class,loader,curator,framework,client,string,checkpoints,path,state,storage,helper,completed,checkpoint,state,storage,throws,exception,check,argument,max,number,of,checkpoints,to,retain,1,must,retain,at,least,one,checkpoint,check,not,null,state,storage,state,storage,this,max,number,of,checkpoints,to,retain,max,number,of,checkpoints,to,retain,this,user,class,loader,check,not,null,user,class,loader,user,class,loader,check,not,null,client,curator,client,check,not,null,checkpoints,path,checkpoints,path,client,new,namespace,aware,ensure,path,checkpoints,path,ensure,client,get,zookeeper,client,this,client,client,using,namespace,client,get,namespace,checkpoints,path,this,checkpoints,in,zoo,keeper,new,zoo,keeper,state,handle,store,this,client,state,storage,this,checkpoint,state,handles,new,array,deque,max,number,of,checkpoints,to,retain,1,log,info,initialized,in,checkpoints,path
ZooKeeperCompletedCheckpointStore -> private void remove( 			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath, 			final Callable<Void> action) throws Exception;1476432306;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void remove(_			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath,_			final Callable<Void> action) throws Exception {__		BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							try {_								action.call()__							} finally {_								_								stateHandleAndPath.f0.discardState()__							}_						} else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					} else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				} catch (Exception e) {_					LOG.error("Failed to discard checkpoint.", e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,final,tuple2,retrievable,state,handle,completed,checkpoint,string,state,handle,and,path,final,callable,void,action,throws,exception,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,try,action,call,finally,state,handle,and,path,f0,discard,state,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,error,failed,to,discard,checkpoint,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void remove( 			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath, 			final Callable<Void> action) throws Exception;1479852016;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void remove(_			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath,_			final Callable<Void> action) throws Exception {__		BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							try {_								action.call()__							} finally {_								_								stateHandleAndPath.f0.discardState()__							}_						} else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					} else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				} catch (Exception e) {_					LOG.error("Failed to discard checkpoint.", e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,final,tuple2,retrievable,state,handle,completed,checkpoint,string,state,handle,and,path,final,callable,void,action,throws,exception,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,try,action,call,finally,state,handle,and,path,f0,discard,state,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,error,failed,to,discard,checkpoint,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void remove( 			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath, 			final Callable<Void> action) throws Exception;1481290933;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void remove(_			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath,_			final Callable<Void> action) throws Exception {__		BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				final long checkpointId = pathToCheckpointId(stateHandleAndPath.f1)___				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							Exception exception = null___							try {_								action.call()__							} catch (Exception e) {_								exception = new Exception("Could not execute callable action " +_									"for checkpoint " + checkpointId + '.', e)__							}__							try {_								_								stateHandleAndPath.f0.discardState()__							} catch (Exception e) {_								Exception newException = new Exception("Could not discard meta " +_									"data for completed checkpoint " + checkpointId + '.', e)___								if (exception == null) {_									exception = newException__								} else {_									exception.addSuppressed(newException)__								}_							}__							if (exception != null) {_								throw exception__							}_						} else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					} else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				} catch (Exception e) {_					LOG.warn("Failed to discard checkpoint {}.", checkpointId, e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,final,tuple2,retrievable,state,handle,completed,checkpoint,string,state,handle,and,path,final,callable,void,action,throws,exception,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,final,long,checkpoint,id,path,to,checkpoint,id,state,handle,and,path,f1,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,exception,exception,null,try,action,call,catch,exception,e,exception,new,exception,could,not,execute,callable,action,for,checkpoint,checkpoint,id,e,try,state,handle,and,path,f0,discard,state,catch,exception,e,exception,new,exception,new,exception,could,not,discard,meta,data,for,completed,checkpoint,checkpoint,id,e,if,exception,null,exception,new,exception,else,exception,add,suppressed,new,exception,if,exception,null,throw,exception,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,warn,failed,to,discard,checkpoint,checkpoint,id,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void remove( 			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath, 			final Callable<Void> action) throws Exception;1488304750;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void remove(_			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath,_			final Callable<Void> action) throws Exception {__		BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				final long checkpointId = pathToCheckpointId(stateHandleAndPath.f1)___				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							Exception exception = null___							try {_								action.call()__							} catch (Exception e) {_								exception = new Exception("Could not execute callable action " +_									"for checkpoint " + checkpointId + '.', e)__							}__							try {_								_								stateHandleAndPath.f0.discardState()__							} catch (Exception e) {_								Exception newException = new Exception("Could not discard meta " +_									"data for completed checkpoint " + checkpointId + '.', e)___								if (exception == null) {_									exception = newException__								} else {_									exception.addSuppressed(newException)__								}_							}__							if (exception != null) {_								throw exception__							}_						} else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					} else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				} catch (Exception e) {_					LOG.warn("Failed to discard checkpoint {}.", checkpointId, e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,final,tuple2,retrievable,state,handle,completed,checkpoint,string,state,handle,and,path,final,callable,void,action,throws,exception,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,final,long,checkpoint,id,path,to,checkpoint,id,state,handle,and,path,f1,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,exception,exception,null,try,action,call,catch,exception,e,exception,new,exception,could,not,execute,callable,action,for,checkpoint,checkpoint,id,e,try,state,handle,and,path,f0,discard,state,catch,exception,e,exception,new,exception,new,exception,could,not,discard,meta,data,for,completed,checkpoint,checkpoint,id,e,if,exception,null,exception,new,exception,else,exception,add,suppressed,new,exception,if,exception,null,throw,exception,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,warn,failed,to,discard,checkpoint,checkpoint,id,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void remove( 			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath, 			final Callable<Void> action) throws Exception;1489479789;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void remove(_			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath,_			final Callable<Void> action) throws Exception {__		BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				final long checkpointId = pathToCheckpointId(stateHandleAndPath.f1)___				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							Exception exception = null___							if (null != action) {_								try {_									action.call()__								} catch (Exception e) {_									exception = new Exception("Could not execute callable action " +_										"for checkpoint " + checkpointId + '.', e)__								}_							}__							try {_								_								stateHandleAndPath.f0.discardState()__							} catch (Exception e) {_								Exception newException = new Exception("Could not discard meta " +_									"data for completed checkpoint " + checkpointId + '.', e)___								if (exception == null) {_									exception = newException__								} else {_									exception.addSuppressed(newException)__								}_							}__							if (exception != null) {_								throw exception__							}_						} else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					} else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				} catch (Exception e) {_					LOG.warn("Failed to discard checkpoint {}.", checkpointId, e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,final,tuple2,retrievable,state,handle,completed,checkpoint,string,state,handle,and,path,final,callable,void,action,throws,exception,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,final,long,checkpoint,id,path,to,checkpoint,id,state,handle,and,path,f1,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,exception,exception,null,if,null,action,try,action,call,catch,exception,e,exception,new,exception,could,not,execute,callable,action,for,checkpoint,checkpoint,id,e,try,state,handle,and,path,f0,discard,state,catch,exception,e,exception,new,exception,new,exception,could,not,discard,meta,data,for,completed,checkpoint,checkpoint,id,e,if,exception,null,exception,new,exception,else,exception,add,suppressed,new,exception,if,exception,null,throw,exception,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,warn,failed,to,discard,checkpoint,checkpoint,id,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void remove( 			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath, 			final Callable<Void> action) throws Exception;1489671807;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void remove(_			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath,_			final Callable<Void> action) throws Exception {__		BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				final long checkpointId = pathToCheckpointId(stateHandleAndPath.f1)___				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							Exception exception = null___							if (null != action) {_								try {_									action.call()__								} catch (Exception e) {_									exception = new Exception("Could not execute callable action " +_										"for checkpoint " + checkpointId + '.', e)__								}_							}__							try {_								_								stateHandleAndPath.f0.discardState()__							} catch (Exception e) {_								Exception newException = new Exception("Could not discard meta " +_									"data for completed checkpoint " + checkpointId + '.', e)___								if (exception == null) {_									exception = newException__								} else {_									exception.addSuppressed(newException)__								}_							}__							if (exception != null) {_								throw exception__							}_						} else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					} else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				} catch (Exception e) {_					LOG.warn("Failed to discard checkpoint {}.", checkpointId, e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,final,tuple2,retrievable,state,handle,completed,checkpoint,string,state,handle,and,path,final,callable,void,action,throws,exception,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,final,long,checkpoint,id,path,to,checkpoint,id,state,handle,and,path,f1,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,exception,exception,null,if,null,action,try,action,call,catch,exception,e,exception,new,exception,could,not,execute,callable,action,for,checkpoint,checkpoint,id,e,try,state,handle,and,path,f0,discard,state,catch,exception,e,exception,new,exception,new,exception,could,not,discard,meta,data,for,completed,checkpoint,checkpoint,id,e,if,exception,null,exception,new,exception,else,exception,add,suppressed,new,exception,if,exception,null,throw,exception,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,warn,failed,to,discard,checkpoint,checkpoint,id,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void remove( 			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath, 			final Callable<Void> action) throws Exception;1490012491;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void remove(_			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath,_			final Callable<Void> action) throws Exception {__		BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				final long checkpointId = pathToCheckpointId(stateHandleAndPath.f1)___				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							Exception exception = null___							if (null != action) {_								try {_									action.call()__								} catch (Exception e) {_									exception = new Exception("Could not execute callable action " +_										"for checkpoint " + checkpointId + '.', e)__								}_							}__							try {_								_								stateHandleAndPath.f0.discardState()__							} catch (Exception e) {_								Exception newException = new Exception("Could not discard meta " +_									"data for completed checkpoint " + checkpointId + '.', e)___								if (exception == null) {_									exception = newException__								} else {_									exception.addSuppressed(newException)__								}_							}__							if (exception != null) {_								throw exception__							}_						} else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					} else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				} catch (Exception e) {_					LOG.warn("Failed to discard checkpoint {}.", checkpointId, e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,final,tuple2,retrievable,state,handle,completed,checkpoint,string,state,handle,and,path,final,callable,void,action,throws,exception,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,final,long,checkpoint,id,path,to,checkpoint,id,state,handle,and,path,f1,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,exception,exception,null,if,null,action,try,action,call,catch,exception,e,exception,new,exception,could,not,execute,callable,action,for,checkpoint,checkpoint,id,e,try,state,handle,and,path,f0,discard,state,catch,exception,e,exception,new,exception,new,exception,could,not,discard,meta,data,for,completed,checkpoint,checkpoint,id,e,if,exception,null,exception,new,exception,else,exception,add,suppressed,new,exception,if,exception,null,throw,exception,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,warn,failed,to,discard,checkpoint,checkpoint,id,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void remove( 			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath, 			final Callable<Void> action) throws Exception;1492867556;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void remove(_			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath,_			final Callable<Void> action) throws Exception {__		BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				final long checkpointId = pathToCheckpointId(stateHandleAndPath.f1)___				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							Exception exception = null___							if (null != action) {_								try {_									action.call()__								} catch (Exception e) {_									exception = new Exception("Could not execute callable action " +_										"for checkpoint " + checkpointId + '.', e)__								}_							}__							try {_								_								stateHandleAndPath.f0.discardState()__							} catch (Exception e) {_								Exception newException = new Exception("Could not discard meta " +_									"data for completed checkpoint " + checkpointId + '.', e)___								if (exception == null) {_									exception = newException__								} else {_									exception.addSuppressed(newException)__								}_							}__							if (exception != null) {_								throw exception__							}_						} else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					} else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				} catch (Exception e) {_					LOG.warn("Failed to discard checkpoint {}.", checkpointId, e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,final,tuple2,retrievable,state,handle,completed,checkpoint,string,state,handle,and,path,final,callable,void,action,throws,exception,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,final,long,checkpoint,id,path,to,checkpoint,id,state,handle,and,path,f1,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,exception,exception,null,if,null,action,try,action,call,catch,exception,e,exception,new,exception,could,not,execute,callable,action,for,checkpoint,checkpoint,id,e,try,state,handle,and,path,f0,discard,state,catch,exception,e,exception,new,exception,new,exception,could,not,discard,meta,data,for,completed,checkpoint,checkpoint,id,e,if,exception,null,exception,new,exception,else,exception,add,suppressed,new,exception,if,exception,null,throw,exception,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,warn,failed,to,discard,checkpoint,checkpoint,id,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void remove( 			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath, 			final Callable<Void> action) throws Exception;1492867556;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void remove(_			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath,_			final Callable<Void> action) throws Exception {__		BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				final long checkpointId = pathToCheckpointId(stateHandleAndPath.f1)___				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							Exception exception = null___							if (null != action) {_								try {_									action.call()__								} catch (Exception e) {_									exception = new Exception("Could not execute callable action " +_										"for checkpoint " + checkpointId + '.', e)__								}_							}__							try {_								_								stateHandleAndPath.f0.discardState()__							} catch (Exception e) {_								Exception newException = new Exception("Could not discard meta " +_									"data for completed checkpoint " + checkpointId + '.', e)___								if (exception == null) {_									exception = newException__								} else {_									exception.addSuppressed(newException)__								}_							}__							if (exception != null) {_								throw exception__							}_						} else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					} else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				} catch (Exception e) {_					LOG.warn("Failed to discard checkpoint {}.", checkpointId, e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,final,tuple2,retrievable,state,handle,completed,checkpoint,string,state,handle,and,path,final,callable,void,action,throws,exception,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,final,long,checkpoint,id,path,to,checkpoint,id,state,handle,and,path,f1,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,exception,exception,null,if,null,action,try,action,call,catch,exception,e,exception,new,exception,could,not,execute,callable,action,for,checkpoint,checkpoint,id,e,try,state,handle,and,path,f0,discard,state,catch,exception,e,exception,new,exception,new,exception,could,not,discard,meta,data,for,completed,checkpoint,checkpoint,id,e,if,exception,null,exception,new,exception,else,exception,add,suppressed,new,exception,if,exception,null,throw,exception,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,warn,failed,to,discard,checkpoint,checkpoint,id,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void remove( 			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath, 			final Callable<Void> action) throws Exception;1494762590;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void remove(_			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath,_			final Callable<Void> action) throws Exception {__		BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				final long checkpointId = pathToCheckpointId(stateHandleAndPath.f1)___				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							Exception exception = null___							if (null != action) {_								try {_									action.call()__								} catch (Exception e) {_									exception = new Exception("Could not execute callable action " +_										"for checkpoint " + checkpointId + '.', e)__								}_							}__							try {_								_								stateHandleAndPath.f0.discardState()__							} catch (Exception e) {_								Exception newException = new Exception("Could not discard meta " +_									"data for completed checkpoint " + checkpointId + '.', e)___								if (exception == null) {_									exception = newException__								} else {_									exception.addSuppressed(newException)__								}_							}__							if (exception != null) {_								throw exception__							}_						} else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					} else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				} catch (Exception e) {_					LOG.warn("Failed to discard checkpoint {}.", checkpointId, e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,final,tuple2,retrievable,state,handle,completed,checkpoint,string,state,handle,and,path,final,callable,void,action,throws,exception,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,final,long,checkpoint,id,path,to,checkpoint,id,state,handle,and,path,f1,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,exception,exception,null,if,null,action,try,action,call,catch,exception,e,exception,new,exception,could,not,execute,callable,action,for,checkpoint,checkpoint,id,e,try,state,handle,and,path,f0,discard,state,catch,exception,e,exception,new,exception,new,exception,could,not,discard,meta,data,for,completed,checkpoint,checkpoint,id,e,if,exception,null,exception,new,exception,else,exception,add,suppressed,new,exception,if,exception,null,throw,exception,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,warn,failed,to,discard,checkpoint,checkpoint,id,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void remove( 			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath, 			final Callable<Void> action) throws Exception;1495001907;Removes the state handle from ZooKeeper, discards the checkpoints, and the state handle.;private void remove(_			final Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String> stateHandleAndPath,_			final Callable<Void> action) throws Exception {__		BackgroundCallback callback = new BackgroundCallback() {_			@Override_			public void processResult(CuratorFramework client, CuratorEvent event) throws Exception {_				final long checkpointId = pathToCheckpointId(stateHandleAndPath.f1)___				try {_					if (event.getType() == CuratorEventType.DELETE) {_						if (event.getResultCode() == 0) {_							Exception exception = null___							if (null != action) {_								try {_									action.call()__								} catch (Exception e) {_									exception = new Exception("Could not execute callable action " +_										"for checkpoint " + checkpointId + '.', e)__								}_							}__							try {_								_								stateHandleAndPath.f0.discardState()__							} catch (Exception e) {_								Exception newException = new Exception("Could not discard meta " +_									"data for completed checkpoint " + checkpointId + '.', e)___								if (exception == null) {_									exception = newException__								} else {_									exception.addSuppressed(newException)__								}_							}__							if (exception != null) {_								throw exception__							}_						} else {_							throw new IllegalStateException("Unexpected result code " +_									event.getResultCode() + " in '" + event + "' callback.")__						}_					} else {_						throw new IllegalStateException("Unexpected event type " +_								event.getType() + " in '" + event + "' callback.")__					}_				} catch (Exception e) {_					LOG.warn("Failed to discard checkpoint {}.", checkpointId, e)__				}_			}_		}___		_		_		_		checkpointsInZooKeeper.remove(stateHandleAndPath.f1, callback)__	};removes,the,state,handle,from,zoo,keeper,discards,the,checkpoints,and,the,state,handle;private,void,remove,final,tuple2,retrievable,state,handle,completed,checkpoint,string,state,handle,and,path,final,callable,void,action,throws,exception,background,callback,callback,new,background,callback,override,public,void,process,result,curator,framework,client,curator,event,event,throws,exception,final,long,checkpoint,id,path,to,checkpoint,id,state,handle,and,path,f1,try,if,event,get,type,curator,event,type,delete,if,event,get,result,code,0,exception,exception,null,if,null,action,try,action,call,catch,exception,e,exception,new,exception,could,not,execute,callable,action,for,checkpoint,checkpoint,id,e,try,state,handle,and,path,f0,discard,state,catch,exception,e,exception,new,exception,new,exception,could,not,discard,meta,data,for,completed,checkpoint,checkpoint,id,e,if,exception,null,exception,new,exception,else,exception,add,suppressed,new,exception,if,exception,null,throw,exception,else,throw,new,illegal,state,exception,unexpected,result,code,event,get,result,code,in,event,callback,else,throw,new,illegal,state,exception,unexpected,event,type,event,get,type,in,event,callback,catch,exception,e,log,warn,failed,to,discard,checkpoint,checkpoint,id,e,checkpoints,in,zoo,keeper,remove,state,handle,and,path,f1,callback
ZooKeeperCompletedCheckpointStore -> private void removeSubsumed( 		final CompletedCheckpoint completedCheckpoint) throws Exception;1508847658;Removes a subsumed checkpoint from ZooKeeper and drops the state.;private void removeSubsumed(_		final CompletedCheckpoint completedCheckpoint) throws Exception {__		if (completedCheckpoint == null) {_			return__		}__		ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint> action =_			new ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint>() {_				@Override_				public void apply(@Nullable RetrievableStateHandle<CompletedCheckpoint> value) throws FlinkException {_					if (value != null) {_						try {_							completedCheckpoint.discardOnSubsume()__						} catch (Exception e) {_							throw new FlinkException("Could not discard the completed checkpoint on subsume.", e)__						}_					}_				}_			}___		checkpointsInZooKeeper.releaseAndTryRemove(_			checkpointIdToPath(completedCheckpoint.getCheckpointID()),_			action)__	};removes,a,subsumed,checkpoint,from,zoo,keeper,and,drops,the,state;private,void,remove,subsumed,final,completed,checkpoint,completed,checkpoint,throws,exception,if,completed,checkpoint,null,return,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,action,new,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,override,public,void,apply,nullable,retrievable,state,handle,completed,checkpoint,value,throws,flink,exception,if,value,null,try,completed,checkpoint,discard,on,subsume,catch,exception,e,throw,new,flink,exception,could,not,discard,the,completed,checkpoint,on,subsume,e,checkpoints,in,zoo,keeper,release,and,try,remove,checkpoint,id,to,path,completed,checkpoint,get,checkpoint,id,action
ZooKeeperCompletedCheckpointStore -> private void removeSubsumed( 		final CompletedCheckpoint completedCheckpoint) throws Exception;1520261440;Removes a subsumed checkpoint from ZooKeeper and drops the state.;private void removeSubsumed(_		final CompletedCheckpoint completedCheckpoint) throws Exception {__		if (completedCheckpoint == null) {_			return__		}__		ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint> action =_			new ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint>() {_				@Override_				public void apply(@Nullable RetrievableStateHandle<CompletedCheckpoint> value) throws FlinkException {_					if (value != null) {_						try {_							completedCheckpoint.discardOnSubsume()__						} catch (Exception e) {_							throw new FlinkException("Could not discard the completed checkpoint on subsume.", e)__						}_					}_				}_			}___		checkpointsInZooKeeper.releaseAndTryRemove(_			checkpointIdToPath(completedCheckpoint.getCheckpointID()),_			action)__	};removes,a,subsumed,checkpoint,from,zoo,keeper,and,drops,the,state;private,void,remove,subsumed,final,completed,checkpoint,completed,checkpoint,throws,exception,if,completed,checkpoint,null,return,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,action,new,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,override,public,void,apply,nullable,retrievable,state,handle,completed,checkpoint,value,throws,flink,exception,if,value,null,try,completed,checkpoint,discard,on,subsume,catch,exception,e,throw,new,flink,exception,could,not,discard,the,completed,checkpoint,on,subsume,e,checkpoints,in,zoo,keeper,release,and,try,remove,checkpoint,id,to,path,completed,checkpoint,get,checkpoint,id,action
ZooKeeperCompletedCheckpointStore -> private void removeSubsumed( 		final CompletedCheckpoint completedCheckpoint) throws Exception;1520782982;Removes a subsumed checkpoint from ZooKeeper and drops the state.;private void removeSubsumed(_		final CompletedCheckpoint completedCheckpoint) throws Exception {__		if (completedCheckpoint == null) {_			return__		}__		ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint> action =_			new ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint>() {_				@Override_				public void apply(@Nullable RetrievableStateHandle<CompletedCheckpoint> value) throws FlinkException {_					if (value != null) {_						try {_							completedCheckpoint.discardOnSubsume()__						} catch (Exception e) {_							throw new FlinkException("Could not discard the completed checkpoint on subsume.", e)__						}_					}_				}_			}___		checkpointsInZooKeeper.releaseAndTryRemove(_			checkpointIdToPath(completedCheckpoint.getCheckpointID()),_			action)__	};removes,a,subsumed,checkpoint,from,zoo,keeper,and,drops,the,state;private,void,remove,subsumed,final,completed,checkpoint,completed,checkpoint,throws,exception,if,completed,checkpoint,null,return,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,action,new,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,override,public,void,apply,nullable,retrievable,state,handle,completed,checkpoint,value,throws,flink,exception,if,value,null,try,completed,checkpoint,discard,on,subsume,catch,exception,e,throw,new,flink,exception,could,not,discard,the,completed,checkpoint,on,subsume,e,checkpoints,in,zoo,keeper,release,and,try,remove,checkpoint,id,to,path,completed,checkpoint,get,checkpoint,id,action
ZooKeeperCompletedCheckpointStore -> private void removeSubsumed( 		final CompletedCheckpoint completedCheckpoint) throws Exception;1536763132;Removes a subsumed checkpoint from ZooKeeper and drops the state.;private void removeSubsumed(_		final CompletedCheckpoint completedCheckpoint) throws Exception {__		if (completedCheckpoint == null) {_			return__		}__		ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint> action =_			new ZooKeeperStateHandleStore.RemoveCallback<CompletedCheckpoint>() {_				@Override_				public void apply(@Nullable RetrievableStateHandle<CompletedCheckpoint> value) throws FlinkException {_					if (value != null) {_						try {_							completedCheckpoint.discardOnSubsume()__						} catch (Exception e) {_							throw new FlinkException("Could not discard the completed checkpoint on subsume.", e)__						}_					}_				}_			}___		checkpointsInZooKeeper.releaseAndTryRemove(_			checkpointIdToPath(completedCheckpoint.getCheckpointID()),_			action)__	};removes,a,subsumed,checkpoint,from,zoo,keeper,and,drops,the,state;private,void,remove,subsumed,final,completed,checkpoint,completed,checkpoint,throws,exception,if,completed,checkpoint,null,return,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,action,new,zoo,keeper,state,handle,store,remove,callback,completed,checkpoint,override,public,void,apply,nullable,retrievable,state,handle,completed,checkpoint,value,throws,flink,exception,if,value,null,try,completed,checkpoint,discard,on,subsume,catch,exception,e,throw,new,flink,exception,could,not,discard,the,completed,checkpoint,on,subsume,e,checkpoints,in,zoo,keeper,release,and,try,remove,checkpoint,id,to,path,completed,checkpoint,get,checkpoint,id,action
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1495001907;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1495184252;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1495184252;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1495287945;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1495563868;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1502801814;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1508847658;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1520261440;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1520782982;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0) ) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1536763132;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0)) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1536763178;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0)) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1536930104;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0)) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1537357883;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0)) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1547547304;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0)) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
ZooKeeperCompletedCheckpointStore -> public static long pathToCheckpointId(String path);1547547304;Converts a path to the checkpoint id.__@param path in ZooKeeper_@return Checkpoint id parsed from the path;public static long pathToCheckpointId(String path) {_		try {_			String numberString___			_			if ('/' == path.charAt(0)) {_				numberString = path.substring(1)__			} else {_				numberString = path__			}_			return Long.parseLong(numberString)__		} catch (NumberFormatException e) {_			LOG.warn("Could not parse checkpoint id from {}. This indicates that the " +_				"checkpoint id to path conversion has changed.", path)___			return -1L__		}_	};converts,a,path,to,the,checkpoint,id,param,path,in,zoo,keeper,return,checkpoint,id,parsed,from,the,path;public,static,long,path,to,checkpoint,id,string,path,try,string,number,string,if,path,char,at,0,number,string,path,substring,1,else,number,string,path,return,long,parse,long,number,string,catch,number,format,exception,e,log,warn,could,not,parse,checkpoint,id,from,this,indicates,that,the,checkpoint,id,to,path,conversion,has,changed,path,return,1l
