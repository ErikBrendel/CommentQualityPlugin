commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Override public void run() {     try {         while (running) {             calculateCPUUsage(hardwareAbstractionLayer.getProcessor()).             calculateNetworkUsage(hardwareAbstractionLayer.getNetworkIFs()).             Thread.sleep(probeIntervalMs).         }     } catch (InterruptedException e) {         if (running) {             LOG.warn("{} has failed", SystemResourcesCounter.class.getSimpleName(), e).         }     } }
false;public;0;5;;public void shutdown() throws InterruptedException {     running = false.     interrupt().     join(). }
false;public;0;3;;public double getCpuUser() {     return cpuUser. }
false;public;0;3;;public double getCpuNice() {     return cpuNice. }
false;public;0;3;;public double getCpuSys() {     return cpuSys. }
false;public;0;3;;public double getCpuIdle() {     return cpuIdle. }
false;public;0;3;;public double getIOWait() {     return cpuIOWait. }
false;public;0;3;;public double getCpuIrq() {     return cpuIrq. }
false;public;0;3;;public double getCpuSoftIrq() {     return cpuSoftIrq. }
false;public;0;3;;public double getCpuUsage() {     return cpuUsage. }
false;public;0;3;;public double getCpuLoad1() {     return cpuLoad1. }
false;public;0;3;;public double getCpuLoad5() {     return cpuLoad5. }
false;public;0;3;;public double getCpuLoad15() {     return cpuLoad15. }
false;public;0;3;;public int getProcessorsCount() {     return cpuUsagePerProcessor.length(). }
false;public;1;3;;public double getCpuUsagePerProcessor(int processor) {     return cpuUsagePerProcessor.get(processor). }
false;public;0;3;;public String[] getNetworkInterfaceNames() {     return networkInterfaceNames. }
false;public;1;3;;public long getReceiveRatePerInterface(int interfaceNo) {     return receiveRatePerInterface.get(interfaceNo). }
false;public;1;3;;public long getSendRatePerInterface(int interfaceNo) {     return sendRatePerInterface.get(interfaceNo). }
false;private;1;37;;private void calculateCPUUsage(CentralProcessor processor) {     long[] ticks = processor.getSystemCpuLoadTicks().     if (this.previousCpuTicks == null) {         this.previousCpuTicks = ticks.     }     long userTicks = ticks[TickType.USER.getIndex()] - previousCpuTicks[TickType.USER.getIndex()].     long niceTicks = ticks[TickType.NICE.getIndex()] - previousCpuTicks[TickType.NICE.getIndex()].     long sysTicks = ticks[TickType.SYSTEM.getIndex()] - previousCpuTicks[TickType.SYSTEM.getIndex()].     long idleTicks = ticks[TickType.IDLE.getIndex()] - previousCpuTicks[TickType.IDLE.getIndex()].     long iowaitTicks = ticks[TickType.IOWAIT.getIndex()] - previousCpuTicks[TickType.IOWAIT.getIndex()].     long irqTicks = ticks[TickType.IRQ.getIndex()] - previousCpuTicks[TickType.IRQ.getIndex()].     long softIrqTicks = ticks[TickType.SOFTIRQ.getIndex()] - previousCpuTicks[TickType.SOFTIRQ.getIndex()].     long totalCpuTicks = userTicks + niceTicks + sysTicks + idleTicks + iowaitTicks + irqTicks + softIrqTicks.     this.previousCpuTicks = ticks.     cpuUser = 100d * userTicks / totalCpuTicks.     cpuNice = 100d * niceTicks / totalCpuTicks.     cpuSys = 100d * sysTicks / totalCpuTicks.     cpuIdle = 100d * idleTicks / totalCpuTicks.     cpuIOWait = 100d * iowaitTicks / totalCpuTicks.     cpuIrq = 100d * irqTicks / totalCpuTicks.     cpuSoftIrq = 100d * softIrqTicks / totalCpuTicks.     cpuUsage = processor.getSystemCpuLoad() * 100.     double[] loadAverage = processor.getSystemLoadAverage(3).     cpuLoad1 = (loadAverage[0] < 0 ? Double.NaN : loadAverage[0]).     cpuLoad5 = (loadAverage[1] < 0 ? Double.NaN : loadAverage[1]).     cpuLoad15 = (loadAverage[2] < 0 ? Double.NaN : loadAverage[2]).     double[] load = processor.getProcessorCpuLoadBetweenTicks().     checkState(load.length == cpuUsagePerProcessor.length()).     for (int i = 0. i < load.length. i++) {         cpuUsagePerProcessor.set(i, load[i] * 100).     } }
false;private;1;14;;private void calculateNetworkUsage(NetworkIF[] networkIFs) {     checkState(networkIFs.length == receiveRatePerInterface.length()).     for (int i = 0. i < networkIFs.length. i++) {         NetworkIF networkIF = networkIFs[i].         networkIF.updateNetworkStats().         receiveRatePerInterface.set(i, (networkIF.getBytesRecv() - bytesReceivedPerInterface[i]) * 1000 / probeIntervalMs).         sendRatePerInterface.set(i, (networkIF.getBytesSent() - bytesSentPerInterface[i]) * 1000 / probeIntervalMs).         bytesReceivedPerInterface[i] = networkIF.getBytesRecv().         bytesSentPerInterface[i] = networkIF.getBytesSent().     } }
