# id;timestamp;commentText;codeText;commentWords;codeWords
WebMonitorUtils -> public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent( 			GatewayRetriever<T> leaderRetriever, 			CompletableFuture<String> restAddressFuture, 			Time timeout, 			File tmpDir) throws IOException;1505896530;Checks whether the flink-runtime-web dependency is available and if so returns a_StaticFileServerHandler which can serve the static file contents.__@param leaderRetriever to be used by the StaticFileServerHandler_@param restAddressFuture of the underlying REST server endpoint_@param timeout for lookup requests_@param tmpDir to be used by the StaticFileServerHandler to store temporary files_@param <T> type of the gateway to retrieve_@return StaticFileServerHandler if flink-runtime-web is in the classpath_ Otherwise Optional.empty_@throws IOException if we cannot create the StaticFileServerHandler;public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent(_			GatewayRetriever<T> leaderRetriever,_			CompletableFuture<String> restAddressFuture,_			Time timeout,_			File tmpDir) throws IOException {__		_		try {_			final String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class.forName(classname).asSubclass(WebMonitor.class)___			return Optional.of(new StaticFileServerHandler<>(_				leaderRetriever,_				restAddressFuture,_				timeout,_				tmpDir))__		} catch (ClassNotFoundException ignored) {_			_			return Optional.empty()__		}_	};checks,whether,the,flink,runtime,web,dependency,is,available,and,if,so,returns,a,static,file,server,handler,which,can,serve,the,static,file,contents,param,leader,retriever,to,be,used,by,the,static,file,server,handler,param,rest,address,future,of,the,underlying,rest,server,endpoint,param,timeout,for,lookup,requests,param,tmp,dir,to,be,used,by,the,static,file,server,handler,to,store,temporary,files,param,t,type,of,the,gateway,to,retrieve,return,static,file,server,handler,if,flink,runtime,web,is,in,the,classpath,otherwise,optional,empty,throws,ioexception,if,we,cannot,create,the,static,file,server,handler;public,static,t,extends,restful,gateway,optional,static,file,server,handler,t,try,load,web,content,gateway,retriever,t,leader,retriever,completable,future,string,rest,address,future,time,timeout,file,tmp,dir,throws,ioexception,try,final,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,for,name,classname,as,subclass,web,monitor,class,return,optional,of,new,static,file,server,handler,leader,retriever,rest,address,future,timeout,tmp,dir,catch,class,not,found,exception,ignored,return,optional,empty
WebMonitorUtils -> public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent( 			GatewayRetriever<T> leaderRetriever, 			CompletableFuture<String> restAddressFuture, 			Time timeout, 			File tmpDir) throws IOException;1506376022;Checks whether the flink-runtime-web dependency is available and if so returns a_StaticFileServerHandler which can serve the static file contents.__@param leaderRetriever to be used by the StaticFileServerHandler_@param restAddressFuture of the underlying REST server endpoint_@param timeout for lookup requests_@param tmpDir to be used by the StaticFileServerHandler to store temporary files_@param <T> type of the gateway to retrieve_@return StaticFileServerHandler if flink-runtime-web is in the classpath_ Otherwise Optional.empty_@throws IOException if we cannot create the StaticFileServerHandler;public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent(_			GatewayRetriever<T> leaderRetriever,_			CompletableFuture<String> restAddressFuture,_			Time timeout,_			File tmpDir) throws IOException {__		_		try {_			final String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class.forName(classname).asSubclass(WebMonitor.class)___			return Optional.of(new StaticFileServerHandler<>(_				leaderRetriever,_				restAddressFuture,_				timeout,_				tmpDir))__		} catch (ClassNotFoundException ignored) {_			_			return Optional.empty()__		}_	};checks,whether,the,flink,runtime,web,dependency,is,available,and,if,so,returns,a,static,file,server,handler,which,can,serve,the,static,file,contents,param,leader,retriever,to,be,used,by,the,static,file,server,handler,param,rest,address,future,of,the,underlying,rest,server,endpoint,param,timeout,for,lookup,requests,param,tmp,dir,to,be,used,by,the,static,file,server,handler,to,store,temporary,files,param,t,type,of,the,gateway,to,retrieve,return,static,file,server,handler,if,flink,runtime,web,is,in,the,classpath,otherwise,optional,empty,throws,ioexception,if,we,cannot,create,the,static,file,server,handler;public,static,t,extends,restful,gateway,optional,static,file,server,handler,t,try,load,web,content,gateway,retriever,t,leader,retriever,completable,future,string,rest,address,future,time,timeout,file,tmp,dir,throws,ioexception,try,final,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,for,name,classname,as,subclass,web,monitor,class,return,optional,of,new,static,file,server,handler,leader,retriever,rest,address,future,timeout,tmp,dir,catch,class,not,found,exception,ignored,return,optional,empty
WebMonitorUtils -> public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent( 			GatewayRetriever<T> leaderRetriever, 			CompletableFuture<String> restAddressFuture, 			Time timeout, 			File tmpDir) throws IOException;1506967078;Checks whether the flink-runtime-web dependency is available and if so returns a_StaticFileServerHandler which can serve the static file contents.__@param leaderRetriever to be used by the StaticFileServerHandler_@param restAddressFuture of the underlying REST server endpoint_@param timeout for lookup requests_@param tmpDir to be used by the StaticFileServerHandler to store temporary files_@param <T> type of the gateway to retrieve_@return StaticFileServerHandler if flink-runtime-web is in the classpath_ Otherwise Optional.empty_@throws IOException if we cannot create the StaticFileServerHandler;public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent(_			GatewayRetriever<T> leaderRetriever,_			CompletableFuture<String> restAddressFuture,_			Time timeout,_			File tmpDir) throws IOException {__		_		try {_			final String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class.forName(classname).asSubclass(WebMonitor.class)___			return Optional.of(new StaticFileServerHandler<>(_				leaderRetriever,_				restAddressFuture,_				timeout,_				tmpDir))__		} catch (ClassNotFoundException ignored) {_			_			return Optional.empty()__		}_	};checks,whether,the,flink,runtime,web,dependency,is,available,and,if,so,returns,a,static,file,server,handler,which,can,serve,the,static,file,contents,param,leader,retriever,to,be,used,by,the,static,file,server,handler,param,rest,address,future,of,the,underlying,rest,server,endpoint,param,timeout,for,lookup,requests,param,tmp,dir,to,be,used,by,the,static,file,server,handler,to,store,temporary,files,param,t,type,of,the,gateway,to,retrieve,return,static,file,server,handler,if,flink,runtime,web,is,in,the,classpath,otherwise,optional,empty,throws,ioexception,if,we,cannot,create,the,static,file,server,handler;public,static,t,extends,restful,gateway,optional,static,file,server,handler,t,try,load,web,content,gateway,retriever,t,leader,retriever,completable,future,string,rest,address,future,time,timeout,file,tmp,dir,throws,ioexception,try,final,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,for,name,classname,as,subclass,web,monitor,class,return,optional,of,new,static,file,server,handler,leader,retriever,rest,address,future,timeout,tmp,dir,catch,class,not,found,exception,ignored,return,optional,empty
WebMonitorUtils -> public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent( 			GatewayRetriever<T> leaderRetriever, 			CompletableFuture<String> restAddressFuture, 			Time timeout, 			File tmpDir) throws IOException;1507212387;Checks whether the flink-runtime-web dependency is available and if so returns a_StaticFileServerHandler which can serve the static file contents.__@param leaderRetriever to be used by the StaticFileServerHandler_@param restAddressFuture of the underlying REST server endpoint_@param timeout for lookup requests_@param tmpDir to be used by the StaticFileServerHandler to store temporary files_@param <T> type of the gateway to retrieve_@return StaticFileServerHandler if flink-runtime-web is in the classpath_ Otherwise Optional.empty_@throws IOException if we cannot create the StaticFileServerHandler;public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent(_			GatewayRetriever<T> leaderRetriever,_			CompletableFuture<String> restAddressFuture,_			Time timeout,_			File tmpDir) throws IOException {__		_		try {_			final String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class.forName(classname).asSubclass(WebMonitor.class)___			return Optional.of(new StaticFileServerHandler<>(_				leaderRetriever,_				restAddressFuture,_				timeout,_				tmpDir))__		} catch (ClassNotFoundException ignored) {_			_			return Optional.empty()__		}_	};checks,whether,the,flink,runtime,web,dependency,is,available,and,if,so,returns,a,static,file,server,handler,which,can,serve,the,static,file,contents,param,leader,retriever,to,be,used,by,the,static,file,server,handler,param,rest,address,future,of,the,underlying,rest,server,endpoint,param,timeout,for,lookup,requests,param,tmp,dir,to,be,used,by,the,static,file,server,handler,to,store,temporary,files,param,t,type,of,the,gateway,to,retrieve,return,static,file,server,handler,if,flink,runtime,web,is,in,the,classpath,otherwise,optional,empty,throws,ioexception,if,we,cannot,create,the,static,file,server,handler;public,static,t,extends,restful,gateway,optional,static,file,server,handler,t,try,load,web,content,gateway,retriever,t,leader,retriever,completable,future,string,rest,address,future,time,timeout,file,tmp,dir,throws,ioexception,try,final,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,for,name,classname,as,subclass,web,monitor,class,return,optional,of,new,static,file,server,handler,leader,retriever,rest,address,future,timeout,tmp,dir,catch,class,not,found,exception,ignored,return,optional,empty
WebMonitorUtils -> public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent( 			GatewayRetriever<T> leaderRetriever, 			CompletableFuture<String> restAddressFuture, 			Time timeout, 			File tmpDir) throws IOException;1509447226;Checks whether the flink-runtime-web dependency is available and if so returns a_StaticFileServerHandler which can serve the static file contents.__@param leaderRetriever to be used by the StaticFileServerHandler_@param restAddressFuture of the underlying REST server endpoint_@param timeout for lookup requests_@param tmpDir to be used by the StaticFileServerHandler to store temporary files_@param <T> type of the gateway to retrieve_@return StaticFileServerHandler if flink-runtime-web is in the classpath_ Otherwise Optional.empty_@throws IOException if we cannot create the StaticFileServerHandler;public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent(_			GatewayRetriever<T> leaderRetriever,_			CompletableFuture<String> restAddressFuture,_			Time timeout,_			File tmpDir) throws IOException {__		_		try {_			final String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class.forName(classname).asSubclass(WebMonitor.class)___			return Optional.of(new StaticFileServerHandler<>(_				leaderRetriever,_				restAddressFuture,_				timeout,_				tmpDir))__		} catch (ClassNotFoundException ignored) {_			_			return Optional.empty()__		}_	};checks,whether,the,flink,runtime,web,dependency,is,available,and,if,so,returns,a,static,file,server,handler,which,can,serve,the,static,file,contents,param,leader,retriever,to,be,used,by,the,static,file,server,handler,param,rest,address,future,of,the,underlying,rest,server,endpoint,param,timeout,for,lookup,requests,param,tmp,dir,to,be,used,by,the,static,file,server,handler,to,store,temporary,files,param,t,type,of,the,gateway,to,retrieve,return,static,file,server,handler,if,flink,runtime,web,is,in,the,classpath,otherwise,optional,empty,throws,ioexception,if,we,cannot,create,the,static,file,server,handler;public,static,t,extends,restful,gateway,optional,static,file,server,handler,t,try,load,web,content,gateway,retriever,t,leader,retriever,completable,future,string,rest,address,future,time,timeout,file,tmp,dir,throws,ioexception,try,final,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,for,name,classname,as,subclass,web,monitor,class,return,optional,of,new,static,file,server,handler,leader,retriever,rest,address,future,timeout,tmp,dir,catch,class,not,found,exception,ignored,return,optional,empty
WebMonitorUtils -> public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent( 			GatewayRetriever<T> leaderRetriever, 			CompletableFuture<String> restAddressFuture, 			Time timeout, 			File tmpDir) throws IOException;1517914185;Checks whether the flink-runtime-web dependency is available and if so returns a_StaticFileServerHandler which can serve the static file contents.__@param leaderRetriever to be used by the StaticFileServerHandler_@param restAddressFuture of the underlying REST server endpoint_@param timeout for lookup requests_@param tmpDir to be used by the StaticFileServerHandler to store temporary files_@param <T> type of the gateway to retrieve_@return StaticFileServerHandler if flink-runtime-web is in the classpath_ Otherwise Optional.empty_@throws IOException if we cannot create the StaticFileServerHandler;public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent(_			GatewayRetriever<T> leaderRetriever,_			CompletableFuture<String> restAddressFuture,_			Time timeout,_			File tmpDir) throws IOException {__		_		try {_			final String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class.forName(classname).asSubclass(WebMonitor.class)___			return Optional.of(new StaticFileServerHandler<>(_				leaderRetriever,_				restAddressFuture,_				timeout,_				tmpDir))__		} catch (ClassNotFoundException ignored) {_			_			return Optional.empty()__		}_	};checks,whether,the,flink,runtime,web,dependency,is,available,and,if,so,returns,a,static,file,server,handler,which,can,serve,the,static,file,contents,param,leader,retriever,to,be,used,by,the,static,file,server,handler,param,rest,address,future,of,the,underlying,rest,server,endpoint,param,timeout,for,lookup,requests,param,tmp,dir,to,be,used,by,the,static,file,server,handler,to,store,temporary,files,param,t,type,of,the,gateway,to,retrieve,return,static,file,server,handler,if,flink,runtime,web,is,in,the,classpath,otherwise,optional,empty,throws,ioexception,if,we,cannot,create,the,static,file,server,handler;public,static,t,extends,restful,gateway,optional,static,file,server,handler,t,try,load,web,content,gateway,retriever,t,leader,retriever,completable,future,string,rest,address,future,time,timeout,file,tmp,dir,throws,ioexception,try,final,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,for,name,classname,as,subclass,web,monitor,class,return,optional,of,new,static,file,server,handler,leader,retriever,rest,address,future,timeout,tmp,dir,catch,class,not,found,exception,ignored,return,optional,empty
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor);1506967078;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param jobManagerRetriever which retrieves the currently leading JobManager_@param queryServiceRetriever which retrieves the query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(_				Configuration.class,_				LeaderRetrievalService.class,_				BlobView.class,_				LeaderGatewayRetriever.class,_				MetricQueryServiceRetriever.class,_				Time.class,_				ScheduledExecutor.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				highAvailabilityServices.createBlobStore(),_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,job,manager,retriever,which,retrieves,the,currently,leading,job,manager,param,query,service,retriever,which,retrieves,the,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,blob,view,class,leader,gateway,retriever,class,metric,query,service,retriever,class,time,class,scheduled,executor,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,high,availability,services,create,blob,store,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor);1507212387;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param jobManagerRetriever which retrieves the currently leading JobManager_@param queryServiceRetriever which retrieves the query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(_				Configuration.class,_				LeaderRetrievalService.class,_				LeaderGatewayRetriever.class,_				MetricQueryServiceRetriever.class,_				Time.class,_				ScheduledExecutor.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,job,manager,retriever,which,retrieves,the,currently,leading,job,manager,param,query,service,retriever,which,retrieves,the,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,leader,gateway,retriever,class,metric,query,service,retriever,class,time,class,scheduled,executor,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor);1509447226;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param jobManagerRetriever which retrieves the currently leading JobManager_@param queryServiceRetriever which retrieves the query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(_				Configuration.class,_				LeaderRetrievalService.class,_				LeaderGatewayRetriever.class,_				MetricQueryServiceRetriever.class,_				Time.class,_				ScheduledExecutor.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,job,manager,retriever,which,retrieves,the,currently,leading,job,manager,param,query,service,retriever,which,retrieves,the,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,leader,gateway,retriever,class,metric,query,service,retriever,class,time,class,scheduled,executor,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor);1517914185;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param jobManagerRetriever which retrieves the currently leading JobManager_@param queryServiceRetriever which retrieves the query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(_				Configuration.class,_				LeaderRetrievalService.class,_				LeaderGatewayRetriever.class,_				MetricQueryServiceRetriever.class,_				Time.class,_				ScheduledExecutor.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,job,manager,retriever,which,retrieves,the,currently,leading,job,manager,param,query,service,retriever,which,retrieves,the,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,leader,gateway,retriever,class,metric,query,service,retriever,class,time,class,scheduled,executor,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor);1518680659;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param jobManagerRetriever which retrieves the currently leading JobManager_@param queryServiceRetriever which retrieves the query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(_				Configuration.class,_				LeaderRetrievalService.class,_				LeaderGatewayRetriever.class,_				MetricQueryServiceRetriever.class,_				Time.class,_				ScheduledExecutor.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,job,manager,retriever,which,retrieves,the,currently,leading,job,manager,param,query,service,retriever,which,retrieves,the,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,leader,gateway,retriever,class,metric,query,service,retriever,class,time,class,scheduled,executor,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor);1518680660;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param jobManagerRetriever which retrieves the currently leading JobManager_@param queryServiceRetriever which retrieves the query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor) {_		_		try {_			Class<? extends WebMonitor> clazz = Class.forName(WEB_RUNTIME_MONITOR_CLASS_FQN).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(_				Configuration.class,_				LeaderRetrievalService.class,_				LeaderGatewayRetriever.class,_				MetricQueryServiceRetriever.class,_				Time.class,_				ScheduledExecutor.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,job,manager,retriever,which,retrieves,the,currently,leading,job,manager,param,query,service,retriever,which,retrieves,the,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,try,class,extends,web,monitor,clazz,class,for,name,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,leader,gateway,retriever,class,metric,query,service,retriever,class,time,class,scheduled,executor,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor);1518862302;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param jobManagerRetriever which retrieves the currently leading JobManager_@param queryServiceRetriever which retrieves the query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor) {_		_		try {_			Class<? extends WebMonitor> clazz = Class.forName(WEB_RUNTIME_MONITOR_CLASS_FQN).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(_				Configuration.class,_				LeaderRetrievalService.class,_				LeaderGatewayRetriever.class,_				MetricQueryServiceRetriever.class,_				Time.class,_				ScheduledExecutor.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,job,manager,retriever,which,retrieves,the,currently,leading,job,manager,param,query,service,retriever,which,retrieves,the,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,try,class,extends,web,monitor,clazz,class,for,name,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,leader,gateway,retriever,class,metric,query,service,retriever,class,time,class,scheduled,executor,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor);1519052658;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param jobManagerRetriever which retrieves the currently leading JobManager_@param queryServiceRetriever which retrieves the query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor) {_		_		try {_			Class<? extends WebMonitor> clazz = Class.forName(WEB_RUNTIME_MONITOR_CLASS_FQN).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(_				Configuration.class,_				LeaderRetrievalService.class,_				LeaderGatewayRetriever.class,_				MetricQueryServiceRetriever.class,_				Time.class,_				ScheduledExecutor.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,job,manager,retriever,which,retrieves,the,currently,leading,job,manager,param,query,service,retriever,which,retrieves,the,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,try,class,extends,web,monitor,clazz,class,for,name,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,leader,gateway,retriever,class,metric,query,service,retriever,class,time,class,scheduled,executor,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor);1519057653;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param jobManagerRetriever which retrieves the currently leading JobManager_@param queryServiceRetriever which retrieves the query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor) {_		_		try {_			Class<? extends WebMonitor> clazz = Class.forName(WEB_RUNTIME_MONITOR_CLASS_FQN).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(_				Configuration.class,_				LeaderRetrievalService.class,_				LeaderGatewayRetriever.class,_				MetricQueryServiceRetriever.class,_				Time.class,_				ScheduledExecutor.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,job,manager,retriever,which,retrieves,the,currently,leading,job,manager,param,query,service,retriever,which,retrieves,the,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,try,class,extends,web,monitor,clazz,class,for,name,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,leader,gateway,retriever,class,metric,query,service,retriever,class,time,class,scheduled,executor,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor);1525267087;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param jobManagerRetriever which retrieves the currently leading JobManager_@param queryServiceRetriever which retrieves the query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor) {_		_		try {_			Class<? extends WebMonitor> clazz = Class.forName(WEB_RUNTIME_MONITOR_CLASS_FQN).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(_				Configuration.class,_				LeaderRetrievalService.class,_				LeaderGatewayRetriever.class,_				MetricQueryServiceRetriever.class,_				Time.class,_				ScheduledExecutor.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,job,manager,retriever,which,retrieves,the,currently,leading,job,manager,param,query,service,retriever,which,retrieves,the,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,try,class,extends,web,monitor,clazz,class,for,name,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,leader,gateway,retriever,class,metric,query,service,retriever,class,time,class,scheduled,executor,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			ScheduledExecutor scheduledExecutor);1545326469;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param jobManagerRetriever which retrieves the currently leading JobManager_@param queryServiceRetriever which retrieves the query service_@param timeout for asynchronous operations_@param scheduledExecutor to run asynchronous operations;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			ScheduledExecutor scheduledExecutor) {_		_		try {_			Class<? extends WebMonitor> clazz = Class.forName(WEB_RUNTIME_MONITOR_CLASS_FQN).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(_				Configuration.class,_				LeaderRetrievalService.class,_				LeaderGatewayRetriever.class,_				MetricQueryServiceRetriever.class,_				Time.class,_				ScheduledExecutor.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				scheduledExecutor)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,job,manager,retriever,which,retrieves,the,currently,leading,job,manager,param,query,service,retriever,which,retrieves,the,query,service,param,timeout,for,asynchronous,operations,param,scheduled,executor,to,run,asynchronous,operations;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,scheduled,executor,scheduled,executor,try,class,extends,web,monitor,clazz,class,for,name,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,leader,gateway,retriever,class,metric,query,service,retriever,class,time,class,scheduled,executor,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,job,manager,retriever,query,service,retriever,timeout,scheduled,executor,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> LogFiles -> public static LogFiles find(Configuration config);1445353660;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFiles find(Configuration config) {_			if (INSTANCE == null) {__				_				final String logEnv = "log.file"__				String logFilePath = System.getProperty(logEnv)___				if (logFilePath == null) {_					LOG.warn("Log file environment variable '{}' is not set.", logEnv)__					logFilePath = config.getString(ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY, null)__				}__				if (logFilePath == null) {_					throw new IllegalConfigurationException("JobManager log file not found. " +_							"Can't serve log files. Log file location couldn't be determined via the " +_							logEnv + " environment variable or the config constant " +_							ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY)__				}__				INSTANCE = new LogFiles(logFilePath)__			}__			return INSTANCE__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,files,find,configuration,config,if,instance,null,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,config,constants,null,if,log,file,path,null,throw,new,illegal,configuration,exception,job,manager,log,file,not,found,can,t,serve,log,files,log,file,location,couldn,t,be,determined,via,the,log,env,environment,variable,or,the,config,constant,config,constants,instance,new,log,files,log,file,path,return,instance
WebMonitorUtils -> LogFiles -> public static LogFiles find(Configuration config);1446112342;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFiles find(Configuration config) {_			if (INSTANCE == null) {__				_				final String logEnv = "log.file"__				String logFilePath = System.getProperty(logEnv)___				if (logFilePath == null) {_					LOG.warn("Log file environment variable '{}' is not set.", logEnv)__					logFilePath = config.getString(ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY, null)__				}__				if (logFilePath == null) {_					throw new IllegalConfigurationException("JobManager log file not found. " +_							"Can't serve log files. Log file location couldn't be determined via the " +_							logEnv + " environment variable or the config constant " +_							ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY)__				}__				INSTANCE = new LogFiles(logFilePath)__			}__			return INSTANCE__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,files,find,configuration,config,if,instance,null,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,config,constants,null,if,log,file,path,null,throw,new,illegal,configuration,exception,job,manager,log,file,not,found,can,t,serve,log,files,log,file,location,couldn,t,be,determined,via,the,log,env,environment,variable,or,the,config,constant,config,constants,instance,new,log,files,log,file,path,return,instance
WebMonitorUtils -> private static boolean isFlinkRuntimeWebInClassPath();1518680660;Returns {@code true} if the optional dependency {@code flink-runtime-web} is in the_classpath.;private static boolean isFlinkRuntimeWebInClassPath() {_		try {_			Class.forName(WEB_RUNTIME_MONITOR_CLASS_FQN).asSubclass(WebMonitor.class)__			return true__		} catch (ClassNotFoundException e) {_			_			return false__		}_	};returns,code,true,if,the,optional,dependency,code,flink,runtime,web,is,in,the,classpath;private,static,boolean,is,flink,runtime,web,in,class,path,try,class,for,name,as,subclass,web,monitor,class,return,true,catch,class,not,found,exception,e,return,false
WebMonitorUtils -> private static boolean isFlinkRuntimeWebInClassPath();1518862302;Returns {@code true} if the optional dependency {@code flink-runtime-web} is in the_classpath.;private static boolean isFlinkRuntimeWebInClassPath() {_		try {_			Class.forName(WEB_RUNTIME_MONITOR_CLASS_FQN).asSubclass(WebMonitor.class)__			return true__		} catch (ClassNotFoundException e) {_			_			return false__		}_	};returns,code,true,if,the,optional,dependency,code,flink,runtime,web,is,in,the,classpath;private,static,boolean,is,flink,runtime,web,in,class,path,try,class,for,name,as,subclass,web,monitor,class,return,true,catch,class,not,found,exception,e,return,false
WebMonitorUtils -> private static boolean isFlinkRuntimeWebInClassPath();1519052658;Returns {@code true} if the optional dependency {@code flink-runtime-web} is in the_classpath.;private static boolean isFlinkRuntimeWebInClassPath() {_		try {_			Class.forName(WEB_RUNTIME_MONITOR_CLASS_FQN).asSubclass(WebMonitor.class)__			return true__		} catch (ClassNotFoundException e) {_			_			return false__		}_	};returns,code,true,if,the,optional,dependency,code,flink,runtime,web,is,in,the,classpath;private,static,boolean,is,flink,runtime,web,in,class,path,try,class,for,name,as,subclass,web,monitor,class,return,true,catch,class,not,found,exception,e,return,false
WebMonitorUtils -> private static boolean isFlinkRuntimeWebInClassPath();1519057653;Returns {@code true} if the optional dependency {@code flink-runtime-web} is in the_classpath.;private static boolean isFlinkRuntimeWebInClassPath() {_		try {_			Class.forName(WEB_RUNTIME_MONITOR_CLASS_FQN).asSubclass(WebMonitor.class)__			return true__		} catch (ClassNotFoundException e) {_			_			return false__		}_	};returns,code,true,if,the,optional,dependency,code,flink,runtime,web,is,in,the,classpath;private,static,boolean,is,flink,runtime,web,in,class,path,try,class,for,name,as,subclass,web,monitor,class,return,true,catch,class,not,found,exception,e,return,false
WebMonitorUtils -> private static boolean isFlinkRuntimeWebInClassPath();1525267087;Returns {@code true} if the optional dependency {@code flink-runtime-web} is in the_classpath.;private static boolean isFlinkRuntimeWebInClassPath() {_		try {_			Class.forName(WEB_RUNTIME_MONITOR_CLASS_FQN).asSubclass(WebMonitor.class)__			return true__		} catch (ClassNotFoundException e) {_			_			return false__		}_	};returns,code,true,if,the,optional,dependency,code,flink,runtime,web,is,in,the,classpath;private,static,boolean,is,flink,runtime,web,in,class,path,try,class,for,name,as,subclass,web,monitor,class,return,true,catch,class,not,found,exception,e,return,false
WebMonitorUtils -> private static boolean isFlinkRuntimeWebInClassPath();1545326469;Returns {@code true} if the optional dependency {@code flink-runtime-web} is in the_classpath.;private static boolean isFlinkRuntimeWebInClassPath() {_		try {_			Class.forName(WEB_RUNTIME_MONITOR_CLASS_FQN).asSubclass(WebMonitor.class)__			return true__		} catch (ClassNotFoundException e) {_			_			return false__		}_	};returns,code,true,if,the,optional,dependency,code,flink,runtime,web,is,in,the,classpath;private,static,boolean,is,flink,runtime,web,in,class,path,try,class,for,name,as,subclass,web,monitor,class,return,true,catch,class,not,found,exception,e,return,false
WebMonitorUtils -> private static boolean isFlinkRuntimeWebInClassPath();1549541123;Returns {@code true} if the optional dependency {@code flink-runtime-web} is in the_classpath.;private static boolean isFlinkRuntimeWebInClassPath() {_		try {_			Class.forName(WEB_FRONTEND_BOOTSTRAP_CLASS_FQN)__			return true__		} catch (ClassNotFoundException e) {_			_			return false__		}_	};returns,code,true,if,the,optional,dependency,code,flink,runtime,web,is,in,the,classpath;private,static,boolean,is,flink,runtime,web,in,class,path,try,class,for,name,return,true,catch,class,not,found,exception,e,return,false
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1449422515;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)__			_			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY, null)__			}_			_			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY)__				return new LogFileLocation(null, null)__			}_			_			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)__			_			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,config,constants,null,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,config,constants,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1452854660;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)__			_			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY, null)__			}_			_			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY)__				return new LogFileLocation(null, null)__			}_			_			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)__			_			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,config,constants,null,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,config,constants,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1466687530;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)__			_			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY, null)__			}_			_			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY)__				return new LogFileLocation(null, null)__			}_			_			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)__			_			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,config,constants,null,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,config,constants,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1476446128;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)__			_			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY, null)__			}_			_			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY)__				return new LogFileLocation(null, null)__			}_			_			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)__			_			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,config,constants,null,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,config,constants,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1490193900;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)__			_			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY, null)__			}_			_			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY)__				return new LogFileLocation(null, null)__			}_			_			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)__			_			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,config,constants,null,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,config,constants,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1494363408;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)__			_			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(JobManagerOptions.WEB_LOG_PATH)__			}_			_			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, JobManagerOptions.WEB_LOG_PATH.key())__				return new LogFileLocation(null, null)__			}_			_			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)__			_			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,job,manager,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,job,manager,options,key,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1495001929;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)__			_			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(JobManagerOptions.WEB_LOG_PATH)__			}_			_			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, JobManagerOptions.WEB_LOG_PATH.key())__				return new LogFileLocation(null, null)__			}_			_			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)__			_			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,job,manager,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,job,manager,options,key,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1496434950;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(JobManagerOptions.WEB_LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, JobManagerOptions.WEB_LOG_PATH.key())__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,job,manager,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,job,manager,options,key,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1502438562;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1502452094;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1505740530;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1505896530;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1506376022;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1506967078;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1507212387;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1509447226;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of JobManager log file: {}", logFilePath)__			LOG.info("Determined location of JobManager stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,job,manager,log,file,log,file,path,log,info,determined,location,of,job,manager,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1517914185;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of main cluster component log file: {}", logFilePath)__			LOG.info("Determined location of main cluster component stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,main,cluster,component,log,file,log,file,path,log,info,determined,location,of,main,cluster,component,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1518680659;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of main cluster component log file: {}", logFilePath)__			LOG.info("Determined location of main cluster component stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,main,cluster,component,log,file,log,file,path,log,info,determined,location,of,main,cluster,component,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1518680660;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of main cluster component log file: {}", logFilePath)__			LOG.info("Determined location of main cluster component stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,main,cluster,component,log,file,log,file,path,log,info,determined,location,of,main,cluster,component,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1518862302;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of main cluster component log file: {}", logFilePath)__			LOG.info("Determined location of main cluster component stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,main,cluster,component,log,file,log,file,path,log,info,determined,location,of,main,cluster,component,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1519052658;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of main cluster component log file: {}", logFilePath)__			LOG.info("Determined location of main cluster component stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,main,cluster,component,log,file,log,file,path,log,info,determined,location,of,main,cluster,component,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1519057653;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of main cluster component log file: {}", logFilePath)__			LOG.info("Determined location of main cluster component stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,main,cluster,component,log,file,log,file,path,log,info,determined,location,of,main,cluster,component,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1525267087;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of main cluster component log file: {}", logFilePath)__			LOG.info("Determined location of main cluster component stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,main,cluster,component,log,file,log,file,path,log,info,determined,location,of,main,cluster,component,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1545326469;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of main cluster component log file: {}", logFilePath)__			LOG.info("Determined location of main cluster component stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,main,cluster,component,log,file,log,file,path,log,info,determined,location,of,main,cluster,component,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> LogFileLocation -> public static LogFileLocation find(Configuration config);1549541123;Finds the Flink log directory using log.file Java property that is set during startup.;public static LogFileLocation find(Configuration config) {_			final String logEnv = "log.file"__			String logFilePath = System.getProperty(logEnv)___			if (logFilePath == null) {_				LOG.warn("Log file environment variable '{}' is not set.", logEnv)__				logFilePath = config.getString(WebOptions.LOG_PATH)__			}__			_			if (logFilePath == null || logFilePath.length() < 4) {_				LOG.warn("JobManager log files are unavailable in the web dashboard. " +_					"Log file location not found in environment variable '{}' or configuration key '{}'.",_					logEnv, WebOptions.LOG_PATH)__				return new LogFileLocation(null, null)__			}__			String outFilePath = logFilePath.substring(0, logFilePath.length() - 3).concat("out")___			LOG.info("Determined location of main cluster component log file: {}", logFilePath)__			LOG.info("Determined location of main cluster component stdout file: {}", outFilePath)___			return new LogFileLocation(resolveFileLocation(logFilePath), resolveFileLocation(outFilePath))__		};finds,the,flink,log,directory,using,log,file,java,property,that,is,set,during,startup;public,static,log,file,location,find,configuration,config,final,string,log,env,log,file,string,log,file,path,system,get,property,log,env,if,log,file,path,null,log,warn,log,file,environment,variable,is,not,set,log,env,log,file,path,config,get,string,web,options,if,log,file,path,null,log,file,path,length,4,log,warn,job,manager,log,files,are,unavailable,in,the,web,dashboard,log,file,location,not,found,in,environment,variable,or,configuration,key,log,env,web,options,return,new,log,file,location,null,null,string,out,file,path,log,file,path,substring,0,log,file,path,length,3,concat,out,log,info,determined,location,of,main,cluster,component,log,file,log,file,path,log,info,determined,location,of,main,cluster,component,stdout,file,out,file,path,return,new,log,file,location,resolve,file,location,log,file,path,resolve,file,location,out,file,path
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			Executor executor);1505740530;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param jobManagerRetriever which retrieves the currently leading JobManager_@param queryServiceRetriever which retrieves the query service_@param timeout for asynchronous operations_@param executor to run asynchronous operations;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			Executor executor) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(_				Configuration.class,_				LeaderRetrievalService.class,_				BlobView.class,_				LeaderGatewayRetriever.class,_				MetricQueryServiceRetriever.class,_				Time.class,_				Executor.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				highAvailabilityServices.createBlobStore(),_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				executor)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,job,manager,retriever,which,retrieves,the,currently,leading,job,manager,param,query,service,retriever,which,retrieves,the,query,service,param,timeout,for,asynchronous,operations,param,executor,to,run,asynchronous,operations;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,executor,executor,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,blob,view,class,leader,gateway,retriever,class,metric,query,service,retriever,class,time,class,executor,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,high,availability,services,create,blob,store,job,manager,retriever,query,service,retriever,timeout,executor,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			Executor executor);1505896530;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param jobManagerRetriever which retrieves the currently leading JobManager_@param queryServiceRetriever which retrieves the query service_@param timeout for asynchronous operations_@param executor to run asynchronous operations;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			Executor executor) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(_				Configuration.class,_				LeaderRetrievalService.class,_				BlobView.class,_				LeaderGatewayRetriever.class,_				MetricQueryServiceRetriever.class,_				Time.class,_				Executor.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				highAvailabilityServices.createBlobStore(),_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				executor)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,job,manager,retriever,which,retrieves,the,currently,leading,job,manager,param,query,service,retriever,which,retrieves,the,query,service,param,timeout,for,asynchronous,operations,param,executor,to,run,asynchronous,operations;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,executor,executor,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,blob,view,class,leader,gateway,retriever,class,metric,query,service,retriever,class,time,class,executor,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,high,availability,services,create,blob,store,job,manager,retriever,query,service,retriever,timeout,executor,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever, 			MetricQueryServiceRetriever queryServiceRetriever, 			Time timeout, 			Executor executor);1506376022;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param jobManagerRetriever which retrieves the currently leading JobManager_@param queryServiceRetriever which retrieves the query service_@param timeout for asynchronous operations_@param executor to run asynchronous operations;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			LeaderGatewayRetriever<JobManagerGateway> jobManagerRetriever,_			MetricQueryServiceRetriever queryServiceRetriever,_			Time timeout,_			Executor executor) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(_				Configuration.class,_				LeaderRetrievalService.class,_				BlobView.class,_				LeaderGatewayRetriever.class,_				MetricQueryServiceRetriever.class,_				Time.class,_				Executor.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				highAvailabilityServices.createBlobStore(),_				jobManagerRetriever,_				queryServiceRetriever,_				timeout,_				executor)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,job,manager,retriever,which,retrieves,the,currently,leading,job,manager,param,query,service,retriever,which,retrieves,the,query,service,param,timeout,for,asynchronous,operations,param,executor,to,run,asynchronous,operations;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,leader,gateway,retriever,job,manager,gateway,job,manager,retriever,metric,query,service,retriever,query,service,retriever,time,timeout,executor,executor,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,blob,view,class,leader,gateway,retriever,class,metric,query,service,retriever,class,time,class,executor,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,high,availability,services,create,blob,store,job,manager,retriever,query,service,retriever,timeout,executor,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			ActorSystem actorSystem);1495001929;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically._<p>_Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param actorSystem ActorSystem used to connect to the JobManager;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			ActorSystem actorSystem) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)__			_			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(Configuration.class,_				LeaderRetrievalService.class,_				BlobView.class,_				ActorSystem.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				highAvailabilityServices.createBlobStore(),_				actorSystem)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,actor,system,actor,system,used,to,connect,to,the,job,manager;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,actor,system,actor,system,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,blob,view,class,actor,system,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,high,availability,services,create,blob,store,actor,system,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			ActorSystem actorSystem);1496434950;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param actorSystem ActorSystem used to connect to the JobManager;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			ActorSystem actorSystem) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(Configuration.class,_				LeaderRetrievalService.class,_				BlobView.class,_				ActorSystem.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				highAvailabilityServices.createBlobStore(),_				actorSystem)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,actor,system,actor,system,used,to,connect,to,the,job,manager;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,actor,system,actor,system,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,blob,view,class,actor,system,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,high,availability,services,create,blob,store,actor,system,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			HighAvailabilityServices highAvailabilityServices, 			ActorSystem actorSystem);1502438562;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically.__<p>Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config The configuration for the runtime monitor._@param highAvailabilityServices HighAvailabilityServices used to start the WebRuntimeMonitor_@param actorSystem ActorSystem used to connect to the JobManager;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			HighAvailabilityServices highAvailabilityServices,_			ActorSystem actorSystem) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)___			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(Configuration.class,_				LeaderRetrievalService.class,_				BlobView.class,_				ActorSystem.class)__			return constructor.newInstance(_				config,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_				highAvailabilityServices.createBlobStore(),_				actorSystem)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,high,availability,services,high,availability,services,used,to,start,the,web,runtime,monitor,param,actor,system,actor,system,used,to,connect,to,the,job,manager;public,static,web,monitor,start,web,runtime,monitor,configuration,config,high,availability,services,high,availability,services,actor,system,actor,system,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,blob,view,class,actor,system,class,return,constructor,new,instance,config,high,availability,services,get,job,manager,leader,retriever,high,availability,services,high,availability,services,create,blob,store,actor,system,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent( 			GatewayRetriever<? extends T> leaderRetriever, 			Time timeout, 			File tmpDir) throws IOException;1545326469;Checks whether the flink-runtime-web dependency is available and if so returns a_StaticFileServerHandler which can serve the static file contents.__@param leaderRetriever to be used by the StaticFileServerHandler_@param timeout for lookup requests_@param tmpDir to be used by the StaticFileServerHandler to store temporary files_@param <T> type of the gateway to retrieve_@return StaticFileServerHandler if flink-runtime-web is in the classpath_ Otherwise Optional.empty_@throws IOException if we cannot create the StaticFileServerHandler;public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent(_			GatewayRetriever<? extends T> leaderRetriever,_			Time timeout,_			File tmpDir) throws IOException {__		if (isFlinkRuntimeWebInClassPath()) {_			return Optional.of(new StaticFileServerHandler<>(_				leaderRetriever,_				timeout,_				tmpDir))__		} else {_			return Optional.empty()__		}_	};checks,whether,the,flink,runtime,web,dependency,is,available,and,if,so,returns,a,static,file,server,handler,which,can,serve,the,static,file,contents,param,leader,retriever,to,be,used,by,the,static,file,server,handler,param,timeout,for,lookup,requests,param,tmp,dir,to,be,used,by,the,static,file,server,handler,to,store,temporary,files,param,t,type,of,the,gateway,to,retrieve,return,static,file,server,handler,if,flink,runtime,web,is,in,the,classpath,otherwise,optional,empty,throws,ioexception,if,we,cannot,create,the,static,file,server,handler;public,static,t,extends,restful,gateway,optional,static,file,server,handler,t,try,load,web,content,gateway,retriever,extends,t,leader,retriever,time,timeout,file,tmp,dir,throws,ioexception,if,is,flink,runtime,web,in,class,path,return,optional,of,new,static,file,server,handler,leader,retriever,timeout,tmp,dir,else,return,optional,empty
WebMonitorUtils -> public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent( 			GatewayRetriever<? extends T> leaderRetriever, 			Time timeout, 			File tmpDir) throws IOException;1549541123;Checks whether the flink-runtime-web dependency is available and if so returns a_StaticFileServerHandler which can serve the static file contents.__@param leaderRetriever to be used by the StaticFileServerHandler_@param timeout for lookup requests_@param tmpDir to be used by the StaticFileServerHandler to store temporary files_@param <T> type of the gateway to retrieve_@return StaticFileServerHandler if flink-runtime-web is in the classpath_ Otherwise Optional.empty_@throws IOException if we cannot create the StaticFileServerHandler;public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent(_			GatewayRetriever<? extends T> leaderRetriever,_			Time timeout,_			File tmpDir) throws IOException {__		if (isFlinkRuntimeWebInClassPath()) {_			return Optional.of(new StaticFileServerHandler<>(_				leaderRetriever,_				timeout,_				tmpDir))__		} else {_			return Optional.empty()__		}_	};checks,whether,the,flink,runtime,web,dependency,is,available,and,if,so,returns,a,static,file,server,handler,which,can,serve,the,static,file,contents,param,leader,retriever,to,be,used,by,the,static,file,server,handler,param,timeout,for,lookup,requests,param,tmp,dir,to,be,used,by,the,static,file,server,handler,to,store,temporary,files,param,t,type,of,the,gateway,to,retrieve,return,static,file,server,handler,if,flink,runtime,web,is,in,the,classpath,otherwise,optional,empty,throws,ioexception,if,we,cannot,create,the,static,file,server,handler;public,static,t,extends,restful,gateway,optional,static,file,server,handler,t,try,load,web,content,gateway,retriever,extends,t,leader,retriever,time,timeout,file,tmp,dir,throws,ioexception,if,is,flink,runtime,web,in,class,path,return,optional,of,new,static,file,server,handler,leader,retriever,timeout,tmp,dir,else,return,optional,empty
WebMonitorUtils -> public static WebMonitorExtension loadWebSubmissionExtension( 			GatewayRetriever<? extends DispatcherGateway> leaderRetriever, 			Time timeout, 			Map<String, String> responseHeaders, 			CompletableFuture<String> localAddressFuture, 			java.nio.file.Path uploadDir, 			Executor executor, 			Configuration configuration) throws FlinkException;1545326469;Loads the {@link WebMonitorExtension} which enables web submission.__@param leaderRetriever to retrieve the leader_@param timeout for asynchronous requests_@param responseHeaders for the web submission handlers_@param localAddressFuture of the underlying REST server endpoint_@param uploadDir where the web submission handler store uploaded jars_@param executor to run asynchronous operations_@param configuration used to instantiate the web submission extension_@return Web submission extension_@throws FlinkException if the web submission extension could not be loaded;public static WebMonitorExtension loadWebSubmissionExtension(_			GatewayRetriever<? extends DispatcherGateway> leaderRetriever,_			Time timeout,_			Map<String, String> responseHeaders,_			CompletableFuture<String> localAddressFuture,_			java.nio.file.Path uploadDir,_			Executor executor,_			Configuration configuration) throws FlinkException {__		if (isFlinkRuntimeWebInClassPath()) {_			try {_				final Constructor<?> webSubmissionExtensionConstructor = Class_					.forName("org.apache.flink.runtime.webmonitor.WebSubmissionExtension")_					.getConstructor(_						Configuration.class,_						GatewayRetriever.class,_						Map.class,_						CompletableFuture.class,_						java.nio.file.Path.class,_						Executor.class,_						Time.class)___				return (WebMonitorExtension) webSubmissionExtensionConstructor.newInstance(_					configuration,_					leaderRetriever,_					responseHeaders,_					localAddressFuture,_					uploadDir,_					executor,_					timeout)__			} catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | InvocationTargetException | IllegalAccessException e) {_				throw new FlinkException("Could not load web submission extension.", e)__			}_		} else {_			throw new FlinkException("The module flink-runtime-web could not be found in the class path. Please add " +_				"this jar in order to enable web based job submission.")__		}_	};loads,the,link,web,monitor,extension,which,enables,web,submission,param,leader,retriever,to,retrieve,the,leader,param,timeout,for,asynchronous,requests,param,response,headers,for,the,web,submission,handlers,param,local,address,future,of,the,underlying,rest,server,endpoint,param,upload,dir,where,the,web,submission,handler,store,uploaded,jars,param,executor,to,run,asynchronous,operations,param,configuration,used,to,instantiate,the,web,submission,extension,return,web,submission,extension,throws,flink,exception,if,the,web,submission,extension,could,not,be,loaded;public,static,web,monitor,extension,load,web,submission,extension,gateway,retriever,extends,dispatcher,gateway,leader,retriever,time,timeout,map,string,string,response,headers,completable,future,string,local,address,future,java,nio,file,path,upload,dir,executor,executor,configuration,configuration,throws,flink,exception,if,is,flink,runtime,web,in,class,path,try,final,constructor,web,submission,extension,constructor,class,for,name,org,apache,flink,runtime,webmonitor,web,submission,extension,get,constructor,configuration,class,gateway,retriever,class,map,class,completable,future,class,java,nio,file,path,class,executor,class,time,class,return,web,monitor,extension,web,submission,extension,constructor,new,instance,configuration,leader,retriever,response,headers,local,address,future,upload,dir,executor,timeout,catch,class,not,found,exception,no,such,method,exception,instantiation,exception,invocation,target,exception,illegal,access,exception,e,throw,new,flink,exception,could,not,load,web,submission,extension,e,else,throw,new,flink,exception,the,module,flink,runtime,web,could,not,be,found,in,the,class,path,please,add,this,jar,in,order,to,enable,web,based,job,submission
WebMonitorUtils -> public static WebMonitorExtension loadWebSubmissionExtension( 			GatewayRetriever<? extends DispatcherGateway> leaderRetriever, 			Time timeout, 			Map<String, String> responseHeaders, 			CompletableFuture<String> localAddressFuture, 			java.nio.file.Path uploadDir, 			Executor executor, 			Configuration configuration) throws FlinkException;1549541123;Loads the {@link WebMonitorExtension} which enables web submission.__@param leaderRetriever to retrieve the leader_@param timeout for asynchronous requests_@param responseHeaders for the web submission handlers_@param localAddressFuture of the underlying REST server endpoint_@param uploadDir where the web submission handler store uploaded jars_@param executor to run asynchronous operations_@param configuration used to instantiate the web submission extension_@return Web submission extension_@throws FlinkException if the web submission extension could not be loaded;public static WebMonitorExtension loadWebSubmissionExtension(_			GatewayRetriever<? extends DispatcherGateway> leaderRetriever,_			Time timeout,_			Map<String, String> responseHeaders,_			CompletableFuture<String> localAddressFuture,_			java.nio.file.Path uploadDir,_			Executor executor,_			Configuration configuration) throws FlinkException {__		if (isFlinkRuntimeWebInClassPath()) {_			try {_				final Constructor<?> webSubmissionExtensionConstructor = Class_					.forName("org.apache.flink.runtime.webmonitor.WebSubmissionExtension")_					.getConstructor(_						Configuration.class,_						GatewayRetriever.class,_						Map.class,_						CompletableFuture.class,_						java.nio.file.Path.class,_						Executor.class,_						Time.class)___				return (WebMonitorExtension) webSubmissionExtensionConstructor.newInstance(_					configuration,_					leaderRetriever,_					responseHeaders,_					localAddressFuture,_					uploadDir,_					executor,_					timeout)__			} catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | InvocationTargetException | IllegalAccessException e) {_				throw new FlinkException("Could not load web submission extension.", e)__			}_		} else {_			throw new FlinkException("The module flink-runtime-web could not be found in the class path. Please add " +_				"this jar in order to enable web based job submission.")__		}_	};loads,the,link,web,monitor,extension,which,enables,web,submission,param,leader,retriever,to,retrieve,the,leader,param,timeout,for,asynchronous,requests,param,response,headers,for,the,web,submission,handlers,param,local,address,future,of,the,underlying,rest,server,endpoint,param,upload,dir,where,the,web,submission,handler,store,uploaded,jars,param,executor,to,run,asynchronous,operations,param,configuration,used,to,instantiate,the,web,submission,extension,return,web,submission,extension,throws,flink,exception,if,the,web,submission,extension,could,not,be,loaded;public,static,web,monitor,extension,load,web,submission,extension,gateway,retriever,extends,dispatcher,gateway,leader,retriever,time,timeout,map,string,string,response,headers,completable,future,string,local,address,future,java,nio,file,path,upload,dir,executor,executor,configuration,configuration,throws,flink,exception,if,is,flink,runtime,web,in,class,path,try,final,constructor,web,submission,extension,constructor,class,for,name,org,apache,flink,runtime,webmonitor,web,submission,extension,get,constructor,configuration,class,gateway,retriever,class,map,class,completable,future,class,java,nio,file,path,class,executor,class,time,class,return,web,monitor,extension,web,submission,extension,constructor,new,instance,configuration,leader,retriever,response,headers,local,address,future,upload,dir,executor,timeout,catch,class,not,found,exception,no,such,method,exception,instantiation,exception,invocation,target,exception,illegal,access,exception,e,throw,new,flink,exception,could,not,load,web,submission,extension,e,else,throw,new,flink,exception,the,module,flink,runtime,web,could,not,be,found,in,the,class,path,please,add,this,jar,in,order,to,enable,web,based,job,submission
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			LeaderRetrievalService leaderRetrievalService, 			ActorSystem actorSystem);1445100302;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically._<p/>_Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config                 The configuration for the runtime monitor._@param leaderRetrievalService Leader retrieval service to get the leading JobManager;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			LeaderRetrievalService leaderRetrievalService,_			ActorSystem actorSystem) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class clazz = Class.forName(classname).asSubclass(WebMonitor.class)__			@SuppressWarnings("unchecked")_			Constructor<WebMonitor> constructor = clazz.getConstructor(Configuration.class,_					LeaderRetrievalService.class,_					ActorSystem.class)__			return constructor.newInstance(config, leaderRetrievalService, actorSystem)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,leader,retrieval,service,leader,retrieval,service,to,get,the,leading,job,manager;public,static,web,monitor,start,web,runtime,monitor,configuration,config,leader,retrieval,service,leader,retrieval,service,actor,system,actor,system,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,clazz,class,for,name,classname,as,subclass,web,monitor,class,suppress,warnings,unchecked,constructor,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,actor,system,class,return,constructor,new,instance,config,leader,retrieval,service,actor,system,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			LeaderRetrievalService leaderRetrievalService, 			ActorSystem actorSystem);1445353660;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically._<p/>_Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config                 The configuration for the runtime monitor._@param leaderRetrievalService Leader retrieval service to get the leading JobManager;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			LeaderRetrievalService leaderRetrievalService,_			ActorSystem actorSystem) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class clazz = Class.forName(classname).asSubclass(WebMonitor.class)__			@SuppressWarnings("unchecked")_			Constructor<WebMonitor> constructor = clazz.getConstructor(Configuration.class,_					LeaderRetrievalService.class,_					ActorSystem.class)__			return constructor.newInstance(config, leaderRetrievalService, actorSystem)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,leader,retrieval,service,leader,retrieval,service,to,get,the,leading,job,manager;public,static,web,monitor,start,web,runtime,monitor,configuration,config,leader,retrieval,service,leader,retrieval,service,actor,system,actor,system,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,clazz,class,for,name,classname,as,subclass,web,monitor,class,suppress,warnings,unchecked,constructor,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,actor,system,class,return,constructor,new,instance,config,leader,retrieval,service,actor,system,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			LeaderRetrievalService leaderRetrievalService, 			ActorSystem actorSystem);1446112342;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically._<p>_Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config                 The configuration for the runtime monitor._@param leaderRetrievalService Leader retrieval service to get the leading JobManager;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			LeaderRetrievalService leaderRetrievalService,_			ActorSystem actorSystem) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class clazz = Class.forName(classname).asSubclass(WebMonitor.class)__			@SuppressWarnings("unchecked")_			Constructor<WebMonitor> constructor = clazz.getConstructor(Configuration.class,_					LeaderRetrievalService.class,_					ActorSystem.class)__			return constructor.newInstance(config, leaderRetrievalService, actorSystem)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,leader,retrieval,service,leader,retrieval,service,to,get,the,leading,job,manager;public,static,web,monitor,start,web,runtime,monitor,configuration,config,leader,retrieval,service,leader,retrieval,service,actor,system,actor,system,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,clazz,class,for,name,classname,as,subclass,web,monitor,class,suppress,warnings,unchecked,constructor,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,actor,system,class,return,constructor,new,instance,config,leader,retrieval,service,actor,system,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			LeaderRetrievalService leaderRetrievalService, 			ActorSystem actorSystem);1449422515;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically._<p>_Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config                 The configuration for the runtime monitor._@param leaderRetrievalService Leader retrieval service to get the leading JobManager;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			LeaderRetrievalService leaderRetrievalService,_			ActorSystem actorSystem) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)__			_			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(Configuration.class,_					LeaderRetrievalService.class,_					ActorSystem.class)__			return constructor.newInstance(config, leaderRetrievalService, actorSystem)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,leader,retrieval,service,leader,retrieval,service,to,get,the,leading,job,manager;public,static,web,monitor,start,web,runtime,monitor,configuration,config,leader,retrieval,service,leader,retrieval,service,actor,system,actor,system,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,actor,system,class,return,constructor,new,instance,config,leader,retrieval,service,actor,system,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			LeaderRetrievalService leaderRetrievalService, 			ActorSystem actorSystem);1452854660;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically._<p>_Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config                 The configuration for the runtime monitor._@param leaderRetrievalService Leader retrieval service to get the leading JobManager;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			LeaderRetrievalService leaderRetrievalService,_			ActorSystem actorSystem) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)__			_			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(Configuration.class,_					LeaderRetrievalService.class,_					ActorSystem.class)__			return constructor.newInstance(config, leaderRetrievalService, actorSystem)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,leader,retrieval,service,leader,retrieval,service,to,get,the,leading,job,manager;public,static,web,monitor,start,web,runtime,monitor,configuration,config,leader,retrieval,service,leader,retrieval,service,actor,system,actor,system,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,actor,system,class,return,constructor,new,instance,config,leader,retrieval,service,actor,system,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			LeaderRetrievalService leaderRetrievalService, 			ActorSystem actorSystem);1466687530;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically._<p>_Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config                 The configuration for the runtime monitor._@param leaderRetrievalService Leader retrieval service to get the leading JobManager;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			LeaderRetrievalService leaderRetrievalService,_			ActorSystem actorSystem) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)__			_			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(Configuration.class,_					LeaderRetrievalService.class,_					ActorSystem.class)__			return constructor.newInstance(config, leaderRetrievalService, actorSystem)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,leader,retrieval,service,leader,retrieval,service,to,get,the,leading,job,manager;public,static,web,monitor,start,web,runtime,monitor,configuration,config,leader,retrieval,service,leader,retrieval,service,actor,system,actor,system,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,actor,system,class,return,constructor,new,instance,config,leader,retrieval,service,actor,system,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			LeaderRetrievalService leaderRetrievalService, 			ActorSystem actorSystem);1476446128;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically._<p>_Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config                 The configuration for the runtime monitor._@param leaderRetrievalService Leader retrieval service to get the leading JobManager;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			LeaderRetrievalService leaderRetrievalService,_			ActorSystem actorSystem) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)__			_			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(Configuration.class,_					LeaderRetrievalService.class,_					ActorSystem.class)__			return constructor.newInstance(config, leaderRetrievalService, actorSystem)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,leader,retrieval,service,leader,retrieval,service,to,get,the,leading,job,manager;public,static,web,monitor,start,web,runtime,monitor,configuration,config,leader,retrieval,service,leader,retrieval,service,actor,system,actor,system,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,actor,system,class,return,constructor,new,instance,config,leader,retrieval,service,actor,system,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			LeaderRetrievalService leaderRetrievalService, 			ActorSystem actorSystem);1490193900;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically._<p>_Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config                 The configuration for the runtime monitor._@param leaderRetrievalService Leader retrieval service to get the leading JobManager;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			LeaderRetrievalService leaderRetrievalService,_			ActorSystem actorSystem) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)__			_			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(Configuration.class,_					LeaderRetrievalService.class,_					ActorSystem.class)__			return constructor.newInstance(config, leaderRetrievalService, actorSystem)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,leader,retrieval,service,leader,retrieval,service,to,get,the,leading,job,manager;public,static,web,monitor,start,web,runtime,monitor,configuration,config,leader,retrieval,service,leader,retrieval,service,actor,system,actor,system,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,actor,system,class,return,constructor,new,instance,config,leader,retrieval,service,actor,system,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static WebMonitor startWebRuntimeMonitor( 			Configuration config, 			LeaderRetrievalService leaderRetrievalService, 			ActorSystem actorSystem);1494363408;Starts the web runtime monitor. Because the actual implementation of the runtime monitor is_in another project, we load the runtime monitor dynamically._<p>_Because failure to start the web runtime monitor is not considered fatal, this method does_not throw any exceptions, but only logs them.__@param config                 The configuration for the runtime monitor._@param leaderRetrievalService Leader retrieval service to get the leading JobManager;public static WebMonitor startWebRuntimeMonitor(_			Configuration config,_			LeaderRetrievalService leaderRetrievalService,_			ActorSystem actorSystem) {_		_		try {_			String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class<? extends WebMonitor> clazz = Class.forName(classname).asSubclass(WebMonitor.class)__			_			Constructor<? extends WebMonitor> constructor = clazz.getConstructor(Configuration.class,_					LeaderRetrievalService.class,_					ActorSystem.class)__			return constructor.newInstance(config, leaderRetrievalService, actorSystem)__		} catch (ClassNotFoundException e) {_			LOG.error("Could not load web runtime monitor. " +_					"Probably reason: flink-runtime-web is not in the classpath")__			LOG.debug("Caught exception", e)__			return null__		} catch (InvocationTargetException e) {_			LOG.error("WebServer could not be created", e.getTargetException())__			return null__		} catch (Throwable t) {_			LOG.error("Failed to instantiate web runtime monitor.", t)__			return null__		}_	};starts,the,web,runtime,monitor,because,the,actual,implementation,of,the,runtime,monitor,is,in,another,project,we,load,the,runtime,monitor,dynamically,p,because,failure,to,start,the,web,runtime,monitor,is,not,considered,fatal,this,method,does,not,throw,any,exceptions,but,only,logs,them,param,config,the,configuration,for,the,runtime,monitor,param,leader,retrieval,service,leader,retrieval,service,to,get,the,leading,job,manager;public,static,web,monitor,start,web,runtime,monitor,configuration,config,leader,retrieval,service,leader,retrieval,service,actor,system,actor,system,try,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,extends,web,monitor,clazz,class,for,name,classname,as,subclass,web,monitor,class,constructor,extends,web,monitor,constructor,clazz,get,constructor,configuration,class,leader,retrieval,service,class,actor,system,class,return,constructor,new,instance,config,leader,retrieval,service,actor,system,catch,class,not,found,exception,e,log,error,could,not,load,web,runtime,monitor,probably,reason,flink,runtime,web,is,not,in,the,classpath,log,debug,caught,exception,e,return,null,catch,invocation,target,exception,e,log,error,web,server,could,not,be,created,e,get,target,exception,return,null,catch,throwable,t,log,error,failed,to,instantiate,web,runtime,monitor,t,return,null
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1490193900;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1494363408;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1495001929;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1496434950;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1502438562;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1502452094;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1505740530;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1505896530;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1506376022;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1506967078;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1507212387;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1509447226;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1517914185;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1518680659;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1518680660;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1518862302;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1519052658;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1519057653;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1525267087;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1545326469;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> public static Path validateAndNormalizeUri(URI archiveDirUri);1549541123;Checks and normalizes the given URI. This method first checks the validity of the_URI (scheme and path are not null) and then normalizes the URI to a path.__@param archiveDirUri The URI to check and normalize._@return A normalized URI as a Path.__@throws IllegalArgumentException Thrown, if the URI misses scheme or path.;public static Path validateAndNormalizeUri(URI archiveDirUri) {_		final String scheme = archiveDirUri.getScheme()__		final String path = archiveDirUri.getPath()___		_		if (scheme == null) {_			throw new IllegalArgumentException("The scheme (hdfs://, file://, etc) is null. " +_				"Please specify the file system scheme explicitly in the URI.")__		}_		if (path == null) {_			throw new IllegalArgumentException("The path to store the job archive data in is null. " +_				"Please specify a directory path for the archiving the job data.")__		}__		return new Path(archiveDirUri)__	};checks,and,normalizes,the,given,uri,this,method,first,checks,the,validity,of,the,uri,scheme,and,path,are,not,null,and,then,normalizes,the,uri,to,a,path,param,archive,dir,uri,the,uri,to,check,and,normalize,return,a,normalized,uri,as,a,path,throws,illegal,argument,exception,thrown,if,the,uri,misses,scheme,or,path;public,static,path,validate,and,normalize,uri,uri,archive,dir,uri,final,string,scheme,archive,dir,uri,get,scheme,final,string,path,archive,dir,uri,get,path,if,scheme,null,throw,new,illegal,argument,exception,the,scheme,hdfs,file,etc,is,null,please,specify,the,file,system,scheme,explicitly,in,the,uri,if,path,null,throw,new,illegal,argument,exception,the,path,to,store,the,job,archive,data,in,is,null,please,specify,a,directory,path,for,the,archiving,the,job,data,return,new,path,archive,dir,uri
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1449422515;Verify log file location_@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1452854660;Verify log file location_@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1466687530;Verify log file location_@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1476446128;Verify log file location_@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1490193900;Verify log file location_@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1494363408;Verify log file location_@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1495001929;Verify log file location_@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1496434950;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1502438562;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1502452094;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1505740530;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1505896530;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1506376022;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1506967078;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1507212387;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1509447226;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1517914185;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1518680659;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1518680660;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1518862302;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1519052658;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1519057653;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1525267087;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1545326469;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> LogFileLocation -> private static File resolveFileLocation(String logFilePath);1549541123;Verify log file location.__@param logFilePath Path to log file_@return File or null if not a valid log file;private static File resolveFileLocation(String logFilePath) {_			File logFile = new File(logFilePath)__			return (logFile.exists() && logFile.canRead()) ? logFile : null__		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,resolve,file,location,string,log,file,path,file,log,file,new,file,log,file,path,return,log,file,exists,log,file,can,read,log,file,null
WebMonitorUtils -> private WebMonitorUtils();1443564120;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1445100302;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1445353660;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1446112342;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1449422515;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1452854660;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1466687530;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1476446128;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1490193900;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1494363408;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1495001929;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1496434950;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1502438562;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1502452094;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1505740530;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1505896530;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1506376022;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1506967078;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1507212387;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1509447226;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1517914185;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1518680659;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1518680660;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1518862302;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1519052658;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1519057653;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1525267087;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1545326469;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> private WebMonitorUtils();1549541123;Private constructor to prevent instantiation.;private WebMonitorUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,web,monitor,utils,throw,new,runtime,exception
WebMonitorUtils -> LogFiles -> private static File checkFileLocation (String logFilePath);1445353660;Verify log file location_@param logFilePath Path to log file_@return File or null if not a valid log file;private static File checkFileLocation (String logFilePath) {_			File logFile = new File(logFilePath)__			if (logFile.exists() && logFile.canRead()) {_				return logFile__			} else {_				throw new IllegalConfigurationException("Job manager log file was supposed to be at " +_						logFile.getAbsolutePath() + " but it does not exist or is not readable.")__			}_		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,check,file,location,string,log,file,path,file,log,file,new,file,log,file,path,if,log,file,exists,log,file,can,read,return,log,file,else,throw,new,illegal,configuration,exception,job,manager,log,file,was,supposed,to,be,at,log,file,get,absolute,path,but,it,does,not,exist,or,is,not,readable
WebMonitorUtils -> LogFiles -> private static File checkFileLocation (String logFilePath);1446112342;Verify log file location_@param logFilePath Path to log file_@return File or null if not a valid log file;private static File checkFileLocation (String logFilePath) {_			File logFile = new File(logFilePath)__			if (logFile.exists() && logFile.canRead()) {_				return logFile__			} else {_				throw new IllegalConfigurationException("Job manager log file was supposed to be at " +_						logFile.getAbsolutePath() + " but it does not exist or is not readable.")__			}_		};verify,log,file,location,param,log,file,path,path,to,log,file,return,file,or,null,if,not,a,valid,log,file;private,static,file,check,file,location,string,log,file,path,file,log,file,new,file,log,file,path,if,log,file,exists,log,file,can,read,return,log,file,else,throw,new,illegal,configuration,exception,job,manager,log,file,was,supposed,to,be,at,log,file,get,absolute,path,but,it,does,not,exist,or,is,not,readable
WebMonitorUtils -> public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent( 			GatewayRetriever<? extends T> leaderRetriever, 			CompletableFuture<String> restAddressFuture, 			Time timeout, 			File tmpDir) throws IOException;1518680659;Checks whether the flink-runtime-web dependency is available and if so returns a_StaticFileServerHandler which can serve the static file contents.__@param leaderRetriever to be used by the StaticFileServerHandler_@param restAddressFuture of the underlying REST server endpoint_@param timeout for lookup requests_@param tmpDir to be used by the StaticFileServerHandler to store temporary files_@param <T> type of the gateway to retrieve_@return StaticFileServerHandler if flink-runtime-web is in the classpath_ Otherwise Optional.empty_@throws IOException if we cannot create the StaticFileServerHandler;public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent(_			GatewayRetriever<? extends T> leaderRetriever,_			CompletableFuture<String> restAddressFuture,_			Time timeout,_			File tmpDir) throws IOException {__		_		try {_			final String classname = "org.apache.flink.runtime.webmonitor.WebRuntimeMonitor"__			Class.forName(classname).asSubclass(WebMonitor.class)___			return Optional.of(new StaticFileServerHandler<>(_				leaderRetriever,_				restAddressFuture,_				timeout,_				tmpDir))__		} catch (ClassNotFoundException ignored) {_			_			return Optional.empty()__		}_	};checks,whether,the,flink,runtime,web,dependency,is,available,and,if,so,returns,a,static,file,server,handler,which,can,serve,the,static,file,contents,param,leader,retriever,to,be,used,by,the,static,file,server,handler,param,rest,address,future,of,the,underlying,rest,server,endpoint,param,timeout,for,lookup,requests,param,tmp,dir,to,be,used,by,the,static,file,server,handler,to,store,temporary,files,param,t,type,of,the,gateway,to,retrieve,return,static,file,server,handler,if,flink,runtime,web,is,in,the,classpath,otherwise,optional,empty,throws,ioexception,if,we,cannot,create,the,static,file,server,handler;public,static,t,extends,restful,gateway,optional,static,file,server,handler,t,try,load,web,content,gateway,retriever,extends,t,leader,retriever,completable,future,string,rest,address,future,time,timeout,file,tmp,dir,throws,ioexception,try,final,string,classname,org,apache,flink,runtime,webmonitor,web,runtime,monitor,class,for,name,classname,as,subclass,web,monitor,class,return,optional,of,new,static,file,server,handler,leader,retriever,rest,address,future,timeout,tmp,dir,catch,class,not,found,exception,ignored,return,optional,empty
WebMonitorUtils -> public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent( 			GatewayRetriever<? extends T> leaderRetriever, 			CompletableFuture<String> restAddressFuture, 			Time timeout, 			File tmpDir) throws IOException;1518680660;Checks whether the flink-runtime-web dependency is available and if so returns a_StaticFileServerHandler which can serve the static file contents.__@param leaderRetriever to be used by the StaticFileServerHandler_@param restAddressFuture of the underlying REST server endpoint_@param timeout for lookup requests_@param tmpDir to be used by the StaticFileServerHandler to store temporary files_@param <T> type of the gateway to retrieve_@return StaticFileServerHandler if flink-runtime-web is in the classpath_ Otherwise Optional.empty_@throws IOException if we cannot create the StaticFileServerHandler;public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent(_			GatewayRetriever<? extends T> leaderRetriever,_			CompletableFuture<String> restAddressFuture,_			Time timeout,_			File tmpDir) throws IOException {__		if (isFlinkRuntimeWebInClassPath()) {_			return Optional.of(new StaticFileServerHandler<>(_				leaderRetriever,_				restAddressFuture,_				timeout,_				tmpDir))__		} else {_			return Optional.empty()__		}_	};checks,whether,the,flink,runtime,web,dependency,is,available,and,if,so,returns,a,static,file,server,handler,which,can,serve,the,static,file,contents,param,leader,retriever,to,be,used,by,the,static,file,server,handler,param,rest,address,future,of,the,underlying,rest,server,endpoint,param,timeout,for,lookup,requests,param,tmp,dir,to,be,used,by,the,static,file,server,handler,to,store,temporary,files,param,t,type,of,the,gateway,to,retrieve,return,static,file,server,handler,if,flink,runtime,web,is,in,the,classpath,otherwise,optional,empty,throws,ioexception,if,we,cannot,create,the,static,file,server,handler;public,static,t,extends,restful,gateway,optional,static,file,server,handler,t,try,load,web,content,gateway,retriever,extends,t,leader,retriever,completable,future,string,rest,address,future,time,timeout,file,tmp,dir,throws,ioexception,if,is,flink,runtime,web,in,class,path,return,optional,of,new,static,file,server,handler,leader,retriever,rest,address,future,timeout,tmp,dir,else,return,optional,empty
WebMonitorUtils -> public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent( 			GatewayRetriever<? extends T> leaderRetriever, 			CompletableFuture<String> restAddressFuture, 			Time timeout, 			File tmpDir) throws IOException;1518862302;Checks whether the flink-runtime-web dependency is available and if so returns a_StaticFileServerHandler which can serve the static file contents.__@param leaderRetriever to be used by the StaticFileServerHandler_@param restAddressFuture of the underlying REST server endpoint_@param timeout for lookup requests_@param tmpDir to be used by the StaticFileServerHandler to store temporary files_@param <T> type of the gateway to retrieve_@return StaticFileServerHandler if flink-runtime-web is in the classpath_ Otherwise Optional.empty_@throws IOException if we cannot create the StaticFileServerHandler;public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent(_			GatewayRetriever<? extends T> leaderRetriever,_			CompletableFuture<String> restAddressFuture,_			Time timeout,_			File tmpDir) throws IOException {__		if (isFlinkRuntimeWebInClassPath()) {_			return Optional.of(new StaticFileServerHandler<>(_				leaderRetriever,_				restAddressFuture,_				timeout,_				tmpDir))__		} else {_			return Optional.empty()__		}_	};checks,whether,the,flink,runtime,web,dependency,is,available,and,if,so,returns,a,static,file,server,handler,which,can,serve,the,static,file,contents,param,leader,retriever,to,be,used,by,the,static,file,server,handler,param,rest,address,future,of,the,underlying,rest,server,endpoint,param,timeout,for,lookup,requests,param,tmp,dir,to,be,used,by,the,static,file,server,handler,to,store,temporary,files,param,t,type,of,the,gateway,to,retrieve,return,static,file,server,handler,if,flink,runtime,web,is,in,the,classpath,otherwise,optional,empty,throws,ioexception,if,we,cannot,create,the,static,file,server,handler;public,static,t,extends,restful,gateway,optional,static,file,server,handler,t,try,load,web,content,gateway,retriever,extends,t,leader,retriever,completable,future,string,rest,address,future,time,timeout,file,tmp,dir,throws,ioexception,if,is,flink,runtime,web,in,class,path,return,optional,of,new,static,file,server,handler,leader,retriever,rest,address,future,timeout,tmp,dir,else,return,optional,empty
WebMonitorUtils -> public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent( 			GatewayRetriever<? extends T> leaderRetriever, 			CompletableFuture<String> restAddressFuture, 			Time timeout, 			File tmpDir) throws IOException;1519052658;Checks whether the flink-runtime-web dependency is available and if so returns a_StaticFileServerHandler which can serve the static file contents.__@param leaderRetriever to be used by the StaticFileServerHandler_@param restAddressFuture of the underlying REST server endpoint_@param timeout for lookup requests_@param tmpDir to be used by the StaticFileServerHandler to store temporary files_@param <T> type of the gateway to retrieve_@return StaticFileServerHandler if flink-runtime-web is in the classpath_ Otherwise Optional.empty_@throws IOException if we cannot create the StaticFileServerHandler;public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent(_			GatewayRetriever<? extends T> leaderRetriever,_			CompletableFuture<String> restAddressFuture,_			Time timeout,_			File tmpDir) throws IOException {__		if (isFlinkRuntimeWebInClassPath()) {_			return Optional.of(new StaticFileServerHandler<>(_				leaderRetriever,_				restAddressFuture,_				timeout,_				tmpDir))__		} else {_			return Optional.empty()__		}_	};checks,whether,the,flink,runtime,web,dependency,is,available,and,if,so,returns,a,static,file,server,handler,which,can,serve,the,static,file,contents,param,leader,retriever,to,be,used,by,the,static,file,server,handler,param,rest,address,future,of,the,underlying,rest,server,endpoint,param,timeout,for,lookup,requests,param,tmp,dir,to,be,used,by,the,static,file,server,handler,to,store,temporary,files,param,t,type,of,the,gateway,to,retrieve,return,static,file,server,handler,if,flink,runtime,web,is,in,the,classpath,otherwise,optional,empty,throws,ioexception,if,we,cannot,create,the,static,file,server,handler;public,static,t,extends,restful,gateway,optional,static,file,server,handler,t,try,load,web,content,gateway,retriever,extends,t,leader,retriever,completable,future,string,rest,address,future,time,timeout,file,tmp,dir,throws,ioexception,if,is,flink,runtime,web,in,class,path,return,optional,of,new,static,file,server,handler,leader,retriever,rest,address,future,timeout,tmp,dir,else,return,optional,empty
WebMonitorUtils -> public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent( 			GatewayRetriever<? extends T> leaderRetriever, 			CompletableFuture<String> restAddressFuture, 			Time timeout, 			File tmpDir) throws IOException;1519057653;Checks whether the flink-runtime-web dependency is available and if so returns a_StaticFileServerHandler which can serve the static file contents.__@param leaderRetriever to be used by the StaticFileServerHandler_@param restAddressFuture of the underlying REST server endpoint_@param timeout for lookup requests_@param tmpDir to be used by the StaticFileServerHandler to store temporary files_@param <T> type of the gateway to retrieve_@return StaticFileServerHandler if flink-runtime-web is in the classpath_ Otherwise Optional.empty_@throws IOException if we cannot create the StaticFileServerHandler;public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent(_			GatewayRetriever<? extends T> leaderRetriever,_			CompletableFuture<String> restAddressFuture,_			Time timeout,_			File tmpDir) throws IOException {__		if (isFlinkRuntimeWebInClassPath()) {_			return Optional.of(new StaticFileServerHandler<>(_				leaderRetriever,_				restAddressFuture,_				timeout,_				tmpDir))__		} else {_			return Optional.empty()__		}_	};checks,whether,the,flink,runtime,web,dependency,is,available,and,if,so,returns,a,static,file,server,handler,which,can,serve,the,static,file,contents,param,leader,retriever,to,be,used,by,the,static,file,server,handler,param,rest,address,future,of,the,underlying,rest,server,endpoint,param,timeout,for,lookup,requests,param,tmp,dir,to,be,used,by,the,static,file,server,handler,to,store,temporary,files,param,t,type,of,the,gateway,to,retrieve,return,static,file,server,handler,if,flink,runtime,web,is,in,the,classpath,otherwise,optional,empty,throws,ioexception,if,we,cannot,create,the,static,file,server,handler;public,static,t,extends,restful,gateway,optional,static,file,server,handler,t,try,load,web,content,gateway,retriever,extends,t,leader,retriever,completable,future,string,rest,address,future,time,timeout,file,tmp,dir,throws,ioexception,if,is,flink,runtime,web,in,class,path,return,optional,of,new,static,file,server,handler,leader,retriever,rest,address,future,timeout,tmp,dir,else,return,optional,empty
WebMonitorUtils -> public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent( 			GatewayRetriever<? extends T> leaderRetriever, 			CompletableFuture<String> restAddressFuture, 			Time timeout, 			File tmpDir) throws IOException;1525267087;Checks whether the flink-runtime-web dependency is available and if so returns a_StaticFileServerHandler which can serve the static file contents.__@param leaderRetriever to be used by the StaticFileServerHandler_@param restAddressFuture of the underlying REST server endpoint_@param timeout for lookup requests_@param tmpDir to be used by the StaticFileServerHandler to store temporary files_@param <T> type of the gateway to retrieve_@return StaticFileServerHandler if flink-runtime-web is in the classpath_ Otherwise Optional.empty_@throws IOException if we cannot create the StaticFileServerHandler;public static <T extends RestfulGateway> Optional<StaticFileServerHandler<T>> tryLoadWebContent(_			GatewayRetriever<? extends T> leaderRetriever,_			CompletableFuture<String> restAddressFuture,_			Time timeout,_			File tmpDir) throws IOException {__		if (isFlinkRuntimeWebInClassPath()) {_			return Optional.of(new StaticFileServerHandler<>(_				leaderRetriever,_				restAddressFuture,_				timeout,_				tmpDir))__		} else {_			return Optional.empty()__		}_	};checks,whether,the,flink,runtime,web,dependency,is,available,and,if,so,returns,a,static,file,server,handler,which,can,serve,the,static,file,contents,param,leader,retriever,to,be,used,by,the,static,file,server,handler,param,rest,address,future,of,the,underlying,rest,server,endpoint,param,timeout,for,lookup,requests,param,tmp,dir,to,be,used,by,the,static,file,server,handler,to,store,temporary,files,param,t,type,of,the,gateway,to,retrieve,return,static,file,server,handler,if,flink,runtime,web,is,in,the,classpath,otherwise,optional,empty,throws,ioexception,if,we,cannot,create,the,static,file,server,handler;public,static,t,extends,restful,gateway,optional,static,file,server,handler,t,try,load,web,content,gateway,retriever,extends,t,leader,retriever,completable,future,string,rest,address,future,time,timeout,file,tmp,dir,throws,ioexception,if,is,flink,runtime,web,in,class,path,return,optional,of,new,static,file,server,handler,leader,retriever,rest,address,future,timeout,tmp,dir,else,return,optional,empty
