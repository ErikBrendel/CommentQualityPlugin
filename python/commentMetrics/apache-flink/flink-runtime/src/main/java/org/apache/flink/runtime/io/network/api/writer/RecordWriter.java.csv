# id;timestamp;commentText;codeText;commentWords;codeWords
RecordWriter -> private boolean tryWriteAndClearBuffer( 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1519039270;Writes the buffer to the {@link ResultPartitionWriter} and removes the_buffer from the serializer state.__<p><b>Needs to be synchronized on the serializer!</b>__@return true if some data were written;private boolean tryWriteAndClearBuffer(_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		Buffer buffer = serializer.getCurrentBuffer()__		if (buffer == null) {_			return false__		}__		numBytesOut.inc(buffer.getSizeUnsafe())__		try {_			targetPartition.writeBuffer(buffer, targetChannel)__			return true__		} finally {_			serializer.clear()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,and,removes,the,buffer,from,the,serializer,state,p,b,needs,to,be,synchronized,on,the,serializer,b,return,true,if,some,data,were,written;private,boolean,try,write,and,clear,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,buffer,buffer,serializer,get,current,buffer,if,buffer,null,return,false,num,bytes,out,inc,buffer,get,size,unsafe,try,target,partition,write,buffer,buffer,target,channel,return,true,finally,serializer,clear
RecordWriter -> private boolean tryWriteAndClearBuffer( 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1519039274;Tries to consume serialized data and (if data present) writes them to the {@link ResultPartitionWriter}._After writing it clean ups the state.__<p><b>Needs to be synchronized on the serializer!</b>__@return true if some data were written;private boolean tryWriteAndClearBuffer(_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		Optional<BufferConsumer> bufferConsumer = bufferConsumers[targetChannel]__		if (!bufferConsumer.isPresent()) {_			return false__		}__		numBytesOut.inc(bufferConsumer.get().getWrittenBytes())__		try {_			targetPartition.writeBuffer(bufferConsumer.get().build(), targetChannel)__			return true__		} finally {_			serializer.clear()__			closeBufferConsumer(targetChannel)__		}_	};tries,to,consume,serialized,data,and,if,data,present,writes,them,to,the,link,result,partition,writer,after,writing,it,clean,ups,the,state,p,b,needs,to,be,synchronized,on,the,serializer,b,return,true,if,some,data,were,written;private,boolean,try,write,and,clear,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,optional,buffer,consumer,buffer,consumer,buffer,consumers,target,channel,if,buffer,consumer,is,present,return,false,num,bytes,out,inc,buffer,consumer,get,get,written,bytes,try,target,partition,write,buffer,buffer,consumer,get,build,target,channel,return,true,finally,serializer,clear,close,buffer,consumer,target,channel
RecordWriter -> private boolean tryWriteAndClearBuffer( 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1519039287;Tries to consume serialized data and (if data present) writes them to the {@link ResultPartitionWriter}._After writing it clean ups the state.__<p><b>Needs to be synchronized on the serializer!</b>__@return true if some data were written;private boolean tryWriteAndClearBuffer(_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		if (!bufferConsumers[targetChannel].isPresent()) {_			return false__		}_		BufferConsumer bufferConsumer = bufferConsumers[targetChannel].get()__		bufferConsumers[targetChannel] = Optional.empty()___		numBytesOut.inc(bufferConsumer.getWrittenBytes())__		serializer.clear()__		targetPartition.addBufferConsumer(bufferConsumer, targetChannel)__		return true__	};tries,to,consume,serialized,data,and,if,data,present,writes,them,to,the,link,result,partition,writer,after,writing,it,clean,ups,the,state,p,b,needs,to,be,synchronized,on,the,serializer,b,return,true,if,some,data,were,written;private,boolean,try,write,and,clear,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,if,buffer,consumers,target,channel,is,present,return,false,buffer,consumer,buffer,consumer,buffer,consumers,target,channel,get,buffer,consumers,target,channel,optional,empty,num,bytes,out,inc,buffer,consumer,get,written,bytes,serializer,clear,target,partition,add,buffer,consumer,buffer,consumer,target,channel,return,true
RecordWriter -> private boolean tryWriteAndClearBuffer( 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1519039289;Tries to consume serialized data and (if data present) writes them to the {@link ResultPartitionWriter}._After writing it clean ups the state.__<p><b>Needs to be synchronized on the serializer!</b>__@return true if some data were written;private boolean tryWriteAndClearBuffer(_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		if (!bufferConsumers[targetChannel].isPresent()) {_			return false__		}_		BufferConsumer bufferConsumer = bufferConsumers[targetChannel].get()__		bufferConsumers[targetChannel] = Optional.empty()___		numBytesOut.inc(bufferConsumer.getWrittenBytes())__		serializer.clear()__		targetPartition.addBufferConsumer(bufferConsumer, targetChannel)__		return true__	};tries,to,consume,serialized,data,and,if,data,present,writes,them,to,the,link,result,partition,writer,after,writing,it,clean,ups,the,state,p,b,needs,to,be,synchronized,on,the,serializer,b,return,true,if,some,data,were,written;private,boolean,try,write,and,clear,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,if,buffer,consumers,target,channel,is,present,return,false,buffer,consumer,buffer,consumer,buffer,consumers,target,channel,get,buffer,consumers,target,channel,optional,empty,num,bytes,out,inc,buffer,consumer,get,written,bytes,serializer,clear,target,partition,add,buffer,consumer,buffer,consumer,target,channel,return,true
RecordWriter -> public void setMetricGroup(IOMetricGroup metrics);1463939897;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(IOMetricGroup metrics) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.instantiateMetrics(metrics)__		}_	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,iometric,group,metrics,for,record,serializer,serializer,serializers,serializer,instantiate,metrics,metrics
RecordWriter -> public void setMetricGroup(IOMetricGroup metrics);1469529015;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(IOMetricGroup metrics) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.instantiateMetrics(metrics)__		}_	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,iometric,group,metrics,for,record,serializer,serializer,serializers,serializer,instantiate,metrics,metrics
RecordWriter -> public void setMetricGroup(IOMetricGroup metrics);1476448412;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(IOMetricGroup metrics) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.instantiateMetrics(metrics)__		}_	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,iometric,group,metrics,for,record,serializer,serializer,serializers,serializer,instantiate,metrics,metrics
RecordWriter -> private BufferBuilder getBufferBuilder(int targetChannel) throws IOException, InterruptedException;1537529044;The {@link BufferBuilder} may already exist if not filled up last time, otherwise we need_request a new one for this target channel.;private BufferBuilder getBufferBuilder(int targetChannel) throws IOException, InterruptedException {_		if (bufferBuilders[targetChannel].isPresent()) {_			return bufferBuilders[targetChannel].get()__		} else {_			return requestNewBufferBuilder(targetChannel)__		}_	};the,link,buffer,builder,may,already,exist,if,not,filled,up,last,time,otherwise,we,need,request,a,new,one,for,this,target,channel;private,buffer,builder,get,buffer,builder,int,target,channel,throws,ioexception,interrupted,exception,if,buffer,builders,target,channel,is,present,return,buffer,builders,target,channel,get,else,return,request,new,buffer,builder,target,channel
RecordWriter -> private BufferBuilder getBufferBuilder(int targetChannel) throws IOException, InterruptedException;1543403062;The {@link BufferBuilder} may already exist if not filled up last time, otherwise we need_request a new one for this target channel.;private BufferBuilder getBufferBuilder(int targetChannel) throws IOException, InterruptedException {_		if (bufferBuilders[targetChannel].isPresent()) {_			return bufferBuilders[targetChannel].get()__		} else {_			return requestNewBufferBuilder(targetChannel)__		}_	};the,link,buffer,builder,may,already,exist,if,not,filled,up,last,time,otherwise,we,need,request,a,new,one,for,this,target,channel;private,buffer,builder,get,buffer,builder,int,target,channel,throws,ioexception,interrupted,exception,if,buffer,builders,target,channel,is,present,return,buffer,builders,target,channel,get,else,return,request,new,buffer,builder,target,channel
RecordWriter -> private BufferBuilder getBufferBuilder(int targetChannel) throws IOException, InterruptedException;1543403062;The {@link BufferBuilder} may already exist if not filled up last time, otherwise we need_request a new one for this target channel.;private BufferBuilder getBufferBuilder(int targetChannel) throws IOException, InterruptedException {_		if (bufferBuilders[targetChannel].isPresent()) {_			return bufferBuilders[targetChannel].get()__		} else {_			return requestNewBufferBuilder(targetChannel)__		}_	};the,link,buffer,builder,may,already,exist,if,not,filled,up,last,time,otherwise,we,need,request,a,new,one,for,this,target,channel;private,buffer,builder,get,buffer,builder,int,target,channel,throws,ioexception,interrupted,exception,if,buffer,builders,target,channel,is,present,return,buffer,builders,target,channel,get,else,return,request,new,buffer,builder,target,channel
RecordWriter -> private BufferBuilder getBufferBuilder(int targetChannel) throws IOException, InterruptedException;1548265071;The {@link BufferBuilder} may already exist if not filled up last time, otherwise we need_request a new one for this target channel.;private BufferBuilder getBufferBuilder(int targetChannel) throws IOException, InterruptedException {_		if (bufferBuilders[targetChannel].isPresent()) {_			return bufferBuilders[targetChannel].get()__		} else {_			return requestNewBufferBuilder(targetChannel)__		}_	};the,link,buffer,builder,may,already,exist,if,not,filled,up,last,time,otherwise,we,need,request,a,new,one,for,this,target,channel;private,buffer,builder,get,buffer,builder,int,target,channel,throws,ioexception,interrupted,exception,if,buffer,builders,target,channel,is,present,return,buffer,builders,target,channel,get,else,return,request,new,buffer,builder,target,channel
RecordWriter -> private BufferBuilder getBufferBuilder(int targetChannel) throws IOException, InterruptedException;1548853005;The {@link BufferBuilder} may already exist if not filled up last time, otherwise we need_request a new one for this target channel.;private BufferBuilder getBufferBuilder(int targetChannel) throws IOException, InterruptedException {_		if (bufferBuilders[targetChannel].isPresent()) {_			return bufferBuilders[targetChannel].get()__		} else {_			return requestNewBufferBuilder(targetChannel)__		}_	};the,link,buffer,builder,may,already,exist,if,not,filled,up,last,time,otherwise,we,need,request,a,new,one,for,this,target,channel;private,buffer,builder,get,buffer,builder,int,target,channel,throws,ioexception,interrupted,exception,if,buffer,builders,target,channel,is,present,return,buffer,builders,target,channel,get,else,return,request,new,buffer,builder,target,channel
RecordWriter -> public void setReporter(AccumulatorRegistry.Reporter reporter);1436966346;Counter for the number of records emitted and the records processed.;public void setReporter(AccumulatorRegistry.Reporter reporter) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.setReporter(reporter)__		}_	};counter,for,the,number,of,records,emitted,and,the,records,processed;public,void,set,reporter,accumulator,registry,reporter,reporter,for,record,serializer,serializer,serializers,serializer,set,reporter,reporter
RecordWriter -> public void setReporter(AccumulatorRegistry.Reporter reporter);1437411165;Counter for the number of records emitted and the records processed.;public void setReporter(AccumulatorRegistry.Reporter reporter) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.setReporter(reporter)__		}_	};counter,for,the,number,of,records,emitted,and,the,records,processed;public,void,set,reporter,accumulator,registry,reporter,reporter,for,record,serializer,serializer,serializers,serializer,set,reporter,reporter
RecordWriter -> public void setReporter(AccumulatorRegistry.Reporter reporter);1437489111;Counter for the number of records emitted and the records processed.;public void setReporter(AccumulatorRegistry.Reporter reporter) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.setReporter(reporter)__		}_	};counter,for,the,number,of,records,emitted,and,the,records,processed;public,void,set,reporter,accumulator,registry,reporter,reporter,for,record,serializer,serializer,serializers,serializer,set,reporter,reporter
RecordWriter -> public void setReporter(AccumulatorRegistry.Reporter reporter);1438523908;Counter for the number of records emitted and the records processed.;public void setReporter(AccumulatorRegistry.Reporter reporter) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.setReporter(reporter)__		}_	};counter,for,the,number,of,records,emitted,and,the,records,processed;public,void,set,reporter,accumulator,registry,reporter,reporter,for,record,serializer,serializer,serializers,serializer,set,reporter,reporter
RecordWriter -> public void setReporter(AccumulatorRegistry.Reporter reporter);1439807719;Counter for the number of records emitted and the records processed.;public void setReporter(AccumulatorRegistry.Reporter reporter) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.setReporter(reporter)__		}_	};counter,for,the,number,of,records,emitted,and,the,records,processed;public,void,set,reporter,accumulator,registry,reporter,reporter,for,record,serializer,serializer,serializers,serializer,set,reporter,reporter
RecordWriter -> public void setReporter(AccumulatorRegistry.Reporter reporter);1440576612;Counter for the number of records emitted and the records processed.;public void setReporter(AccumulatorRegistry.Reporter reporter) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.setReporter(reporter)__		}_	};counter,for,the,number,of,records,emitted,and,the,records,processed;public,void,set,reporter,accumulator,registry,reporter,reporter,for,record,serializer,serializer,serializers,serializer,set,reporter,reporter
RecordWriter -> public void setReporter(AccumulatorRegistry.Reporter reporter);1463939897;Counter for the number of records emitted and the records processed.;public void setReporter(AccumulatorRegistry.Reporter reporter) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.setReporter(reporter)__		}_	};counter,for,the,number,of,records,emitted,and,the,records,processed;public,void,set,reporter,accumulator,registry,reporter,reporter,for,record,serializer,serializer,serializers,serializer,set,reporter,reporter
RecordWriter -> public void setReporter(AccumulatorRegistry.Reporter reporter);1469529015;Counter for the number of records emitted and the records processed.;public void setReporter(AccumulatorRegistry.Reporter reporter) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.setReporter(reporter)__		}_	};counter,for,the,number,of,records,emitted,and,the,records,processed;public,void,set,reporter,accumulator,registry,reporter,reporter,for,record,serializer,serializer,serializers,serializer,set,reporter,reporter
RecordWriter -> public void setReporter(AccumulatorRegistry.Reporter reporter);1476448412;Counter for the number of records emitted and the records processed.;public void setReporter(AccumulatorRegistry.Reporter reporter) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.setReporter(reporter)__		}_	};counter,for,the,number,of,records,emitted,and,the,records,processed;public,void,set,reporter,accumulator,registry,reporter,reporter,for,record,serializer,serializer,serializers,serializer,set,reporter,reporter
RecordWriter -> public void setReporter(AccumulatorRegistry.Reporter reporter);1477389806;Counter for the number of records emitted and the records processed.;public void setReporter(AccumulatorRegistry.Reporter reporter) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.setReporter(reporter)__		}_	};counter,for,the,number,of,records,emitted,and,the,records,processed;public,void,set,reporter,accumulator,registry,reporter,reporter,for,record,serializer,serializer,serializers,serializer,set,reporter,reporter
RecordWriter -> public void setReporter(AccumulatorRegistry.Reporter reporter);1477582418;Counter for the number of records emitted and the records processed.;public void setReporter(AccumulatorRegistry.Reporter reporter) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.setReporter(reporter)__		}_	};counter,for,the,number,of,records,emitted,and,the,records,processed;public,void,set,reporter,accumulator,registry,reporter,reporter,for,record,serializer,serializer,serializers,serializer,set,reporter,reporter
RecordWriter -> public void setReporter(AccumulatorRegistry.Reporter reporter);1477591529;Counter for the number of records emitted and the records processed.;public void setReporter(AccumulatorRegistry.Reporter reporter) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.setReporter(reporter)__		}_	};counter,for,the,number,of,records,emitted,and,the,records,processed;public,void,set,reporter,accumulator,registry,reporter,reporter,for,record,serializer,serializer,serializers,serializer,set,reporter,reporter
RecordWriter -> public void close();1548265071;Closes the writer. This stops the flushing thread (if there is one).;public void close() {_		clearBuffers()__		_		if (outputFlusher.isPresent()) {_			outputFlusher.get().terminate()__			try {_				outputFlusher.get().join()__			} catch (InterruptedException e) {_				_				_				Thread.currentThread().interrupt()__			}_		}_	};closes,the,writer,this,stops,the,flushing,thread,if,there,is,one;public,void,close,clear,buffers,if,output,flusher,is,present,output,flusher,get,terminate,try,output,flusher,get,join,catch,interrupted,exception,e,thread,current,thread,interrupt
RecordWriter -> public void close();1548853005;Closes the writer. This stops the flushing thread (if there is one).;public void close() {_		clearBuffers()__		_		if (outputFlusher.isPresent()) {_			outputFlusher.get().terminate()__			try {_				outputFlusher.get().join()__			} catch (InterruptedException e) {_				_				_				Thread.currentThread().interrupt()__			}_		}_	};closes,the,writer,this,stops,the,flushing,thread,if,there,is,one;public,void,close,clear,buffers,if,output,flusher,is,present,output,flusher,get,terminate,try,output,flusher,get,join,catch,interrupted,exception,e,thread,current,thread,interrupt
RecordWriter -> private void writeAndClearBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1477582418;Writes the buffer to the {@link ResultPartitionWriter}.__<p> The buffer is cleared from the serializer state after a call to this method.;private void writeAndClearBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			targetPartition.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,p,the,buffer,is,cleared,from,the,serializer,state,after,a,call,to,this,method;private,void,write,and,clear,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,target,partition,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeAndClearBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1477937801;Writes the buffer to the {@link ResultPartitionWriter}.__<p> The buffer is cleared from the serializer state after a call to this method.;private void writeAndClearBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			targetPartition.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,p,the,buffer,is,cleared,from,the,serializer,state,after,a,call,to,this,method;private,void,write,and,clear,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,target,partition,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeAndClearBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1483975361;Writes the buffer to the {@link ResultPartitionWriter} and removes the_buffer from the serializer state.__Needs to be synchronized on the serializer!;private void writeAndClearBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			targetPartition.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,and,removes,the,buffer,from,the,serializer,state,needs,to,be,synchronized,on,the,serializer;private,void,write,and,clear,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,target,partition,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeAndClearBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1483975361;Writes the buffer to the {@link ResultPartitionWriter} and removes the_buffer from the serializer state.__Needs to be synchronized on the serializer!;private void writeAndClearBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			targetPartition.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,and,removes,the,buffer,from,the,serializer,state,needs,to,be,synchronized,on,the,serializer;private,void,write,and,clear,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,target,partition,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeAndClearBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1483975430;Writes the buffer to the {@link ResultPartitionWriter} and removes the_buffer from the serializer state.__Needs to be synchronized on the serializer!;private void writeAndClearBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			targetPartition.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,and,removes,the,buffer,from,the,serializer,state,needs,to,be,synchronized,on,the,serializer;private,void,write,and,clear,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,target,partition,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeAndClearBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1485176584;Writes the buffer to the {@link ResultPartitionWriter} and removes the_buffer from the serializer state.__Needs to be synchronized on the serializer!;private void writeAndClearBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			targetPartition.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,and,removes,the,buffer,from,the,serializer,state,needs,to,be,synchronized,on,the,serializer;private,void,write,and,clear,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,target,partition,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeAndClearBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1512394876;Writes the buffer to the {@link ResultPartitionWriter} and removes the_buffer from the serializer state.__Needs to be synchronized on the serializer!;private void writeAndClearBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			targetPartition.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,and,removes,the,buffer,from,the,serializer,state,needs,to,be,synchronized,on,the,serializer;private,void,write,and,clear,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,target,partition,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeAndClearBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1513102147;Writes the buffer to the {@link ResultPartitionWriter} and removes the_buffer from the serializer state.__Needs to be synchronized on the serializer!;private void writeAndClearBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			targetPartition.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,and,removes,the,buffer,from,the,serializer,state,needs,to,be,synchronized,on,the,serializer;private,void,write,and,clear,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,target,partition,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeAndClearBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1515408360;Writes the buffer to the {@link ResultPartitionWriter} and removes the_buffer from the serializer state.__Needs to be synchronized on the serializer!;private void writeAndClearBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			targetPartition.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,and,removes,the,buffer,from,the,serializer,state,needs,to,be,synchronized,on,the,serializer;private,void,write,and,clear,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,target,partition,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeAndClearBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1516285878;Writes the buffer to the {@link ResultPartitionWriter} and removes the_buffer from the serializer state.__Needs to be synchronized on the serializer!;private void writeAndClearBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			targetPartition.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,and,removes,the,buffer,from,the,serializer,state,needs,to,be,synchronized,on,the,serializer;private,void,write,and,clear,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,target,partition,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeAndClearBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1516291532;Writes the buffer to the {@link ResultPartitionWriter} and removes the_buffer from the serializer state.__Needs to be synchronized on the serializer!;private void writeAndClearBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			targetPartition.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,and,removes,the,buffer,from,the,serializer,state,needs,to,be,synchronized,on,the,serializer;private,void,write,and,clear,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,target,partition,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeAndClearBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1517489696;Writes the buffer to the {@link ResultPartitionWriter} and removes the_buffer from the serializer state.__<p><b>Needs to be synchronized on the serializer!</b>;private void writeAndClearBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			targetPartition.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,and,removes,the,buffer,from,the,serializer,state,p,b,needs,to,be,synchronized,on,the,serializer,b;private,void,write,and,clear,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,target,partition,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private boolean tryFinishCurrentBufferBuilder(int targetChannel, RecordSerializer<T> serializer);1519039301;Marks the current {@link BufferBuilder} as finished and clears the state for next one.__@return true if some data were written;private boolean tryFinishCurrentBufferBuilder(int targetChannel, RecordSerializer<T> serializer) {__		if (!bufferBuilders[targetChannel].isPresent()) {_			return false__		}_		BufferBuilder bufferBuilder = bufferBuilders[targetChannel].get()__		bufferBuilders[targetChannel] = Optional.empty()___		numBytesOut.inc(bufferBuilder.finish())__		serializer.clear()__		return true__	};marks,the,current,link,buffer,builder,as,finished,and,clears,the,state,for,next,one,return,true,if,some,data,were,written;private,boolean,try,finish,current,buffer,builder,int,target,channel,record,serializer,t,serializer,if,buffer,builders,target,channel,is,present,return,false,buffer,builder,buffer,builder,buffer,builders,target,channel,get,buffer,builders,target,channel,optional,empty,num,bytes,out,inc,buffer,builder,finish,serializer,clear,return,true
RecordWriter -> private boolean tryFinishCurrentBufferBuilder(int targetChannel, RecordSerializer<T> serializer);1519049134;Marks the current {@link BufferBuilder} as finished and clears the state for next one.__@return true if some data were written;private boolean tryFinishCurrentBufferBuilder(int targetChannel, RecordSerializer<T> serializer) {__		if (!bufferBuilders[targetChannel].isPresent()) {_			return false__		}_		BufferBuilder bufferBuilder = bufferBuilders[targetChannel].get()__		bufferBuilders[targetChannel] = Optional.empty()___		numBytesOut.inc(bufferBuilder.finish())__		serializer.clear()__		return true__	};marks,the,current,link,buffer,builder,as,finished,and,clears,the,state,for,next,one,return,true,if,some,data,were,written;private,boolean,try,finish,current,buffer,builder,int,target,channel,record,serializer,t,serializer,if,buffer,builders,target,channel,is,present,return,false,buffer,builder,buffer,builder,buffer,builders,target,channel,get,buffer,builders,target,channel,optional,empty,num,bytes,out,inc,buffer,builder,finish,serializer,clear,return,true
RecordWriter -> private boolean tryFinishCurrentBufferBuilder(int targetChannel, RecordSerializer<T> serializer);1519308961;Marks the current {@link BufferBuilder} as finished and clears the state for next one.__@return true if some data were written;private boolean tryFinishCurrentBufferBuilder(int targetChannel, RecordSerializer<T> serializer) {__		if (!bufferBuilders[targetChannel].isPresent()) {_			return false__		}_		BufferBuilder bufferBuilder = bufferBuilders[targetChannel].get()__		bufferBuilders[targetChannel] = Optional.empty()___		numBytesOut.inc(bufferBuilder.finish())__		serializer.clear()__		return true__	};marks,the,current,link,buffer,builder,as,finished,and,clears,the,state,for,next,one,return,true,if,some,data,were,written;private,boolean,try,finish,current,buffer,builder,int,target,channel,record,serializer,t,serializer,if,buffer,builders,target,channel,is,present,return,false,buffer,builder,buffer,builder,buffer,builders,target,channel,get,buffer,builders,target,channel,optional,empty,num,bytes,out,inc,buffer,builder,finish,serializer,clear,return,true
RecordWriter -> private boolean tryFinishCurrentBufferBuilder(int targetChannel, RecordSerializer<T> serializer);1520610579;Marks the current {@link BufferBuilder} as finished and clears the state for next one.__@return true if some data were written;private boolean tryFinishCurrentBufferBuilder(int targetChannel, RecordSerializer<T> serializer) {__		if (!bufferBuilders[targetChannel].isPresent()) {_			return false__		}_		BufferBuilder bufferBuilder = bufferBuilders[targetChannel].get()__		bufferBuilders[targetChannel] = Optional.empty()___		numBytesOut.inc(bufferBuilder.finish())__		serializer.clear()__		return true__	};marks,the,current,link,buffer,builder,as,finished,and,clears,the,state,for,next,one,return,true,if,some,data,were,written;private,boolean,try,finish,current,buffer,builder,int,target,channel,record,serializer,t,serializer,if,buffer,builders,target,channel,is,present,return,false,buffer,builder,buffer,builder,buffer,builders,target,channel,get,buffer,builders,target,channel,optional,empty,num,bytes,out,inc,buffer,builder,finish,serializer,clear,return,true
RecordWriter -> private boolean tryFinishCurrentBufferBuilder(int targetChannel, RecordSerializer<T> serializer);1523449296;Marks the current {@link BufferBuilder} as finished and clears the state for next one.__@return true if some data were written;private boolean tryFinishCurrentBufferBuilder(int targetChannel, RecordSerializer<T> serializer) {__		if (!bufferBuilders[targetChannel].isPresent()) {_			return false__		}_		BufferBuilder bufferBuilder = bufferBuilders[targetChannel].get()__		bufferBuilders[targetChannel] = Optional.empty()___		numBytesOut.inc(bufferBuilder.finish())__		serializer.clear()__		return true__	};marks,the,current,link,buffer,builder,as,finished,and,clears,the,state,for,next,one,return,true,if,some,data,were,written;private,boolean,try,finish,current,buffer,builder,int,target,channel,record,serializer,t,serializer,if,buffer,builders,target,channel,is,present,return,false,buffer,builder,buffer,builder,buffer,builders,target,channel,get,buffer,builders,target,channel,optional,empty,num,bytes,out,inc,buffer,builder,finish,serializer,clear,return,true
RecordWriter -> private boolean tryFinishCurrentBufferBuilder(int targetChannel, RecordSerializer<T> serializer);1534316740;Marks the current {@link BufferBuilder} as finished and clears the state for next one.__@return true if some data were written;private boolean tryFinishCurrentBufferBuilder(int targetChannel, RecordSerializer<T> serializer) {__		if (!bufferBuilders[targetChannel].isPresent()) {_			return false__		}_		BufferBuilder bufferBuilder = bufferBuilders[targetChannel].get()__		bufferBuilders[targetChannel] = Optional.empty()___		numBytesOut.inc(bufferBuilder.finish())__		numBuffersOut.inc()__		serializer.clear()__		return true__	};marks,the,current,link,buffer,builder,as,finished,and,clears,the,state,for,next,one,return,true,if,some,data,were,written;private,boolean,try,finish,current,buffer,builder,int,target,channel,record,serializer,t,serializer,if,buffer,builders,target,channel,is,present,return,false,buffer,builder,buffer,builder,buffer,builders,target,channel,get,buffer,builders,target,channel,optional,empty,num,bytes,out,inc,buffer,builder,finish,num,buffers,out,inc,serializer,clear,return,true
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1437411165;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			_			RecordSerializer<T> serializer = serializers[targetChannel]___			synchronized (serializer) {_				SerializationResult result = serializer.addRecord(record)__				while (result.isFullBuffer()) {_					Buffer buffer = serializer.getCurrentBuffer()___					if (buffer != null) {_						writer.writeBuffer(buffer, targetChannel)__						serializer.clearCurrentBuffer()__					}__					buffer = writer.getBufferProvider().requestBufferBlocking()__					result = serializer.setNextBuffer(buffer)__				}_			}_		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,record,serializer,t,serializer,serializers,target,channel,synchronized,serializer,serialization,result,result,serializer,add,record,record,while,result,is,full,buffer,buffer,buffer,serializer,get,current,buffer,if,buffer,null,writer,write,buffer,buffer,target,channel,serializer,clear,current,buffer,buffer,writer,get,buffer,provider,request,buffer,blocking,result,serializer,set,next,buffer,buffer
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1437489111;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			_			RecordSerializer<T> serializer = serializers[targetChannel]___			synchronized (serializer) {_				SerializationResult result = serializer.addRecord(record)__				while (result.isFullBuffer()) {_					Buffer buffer = serializer.getCurrentBuffer()___					if (buffer != null) {_						writer.writeBuffer(buffer, targetChannel)__						serializer.clearCurrentBuffer()__					}__					buffer = writer.getBufferProvider().requestBufferBlocking()__					result = serializer.setNextBuffer(buffer)__				}_			}_		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,record,serializer,t,serializer,serializers,target,channel,synchronized,serializer,serialization,result,result,serializer,add,record,record,while,result,is,full,buffer,buffer,buffer,serializer,get,current,buffer,if,buffer,null,writer,write,buffer,buffer,target,channel,serializer,clear,current,buffer,buffer,writer,get,buffer,provider,request,buffer,blocking,result,serializer,set,next,buffer,buffer
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1438523908;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			_			RecordSerializer<T> serializer = serializers[targetChannel]___			synchronized (serializer) {_				SerializationResult result = serializer.addRecord(record)__				while (result.isFullBuffer()) {_					Buffer buffer = serializer.getCurrentBuffer()___					if (buffer != null) {_						writer.writeBuffer(buffer, targetChannel)__						serializer.clearCurrentBuffer()__					}__					buffer = writer.getBufferProvider().requestBufferBlocking()__					result = serializer.setNextBuffer(buffer)__				}_			}_		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,record,serializer,t,serializer,serializers,target,channel,synchronized,serializer,serialization,result,result,serializer,add,record,record,while,result,is,full,buffer,buffer,buffer,serializer,get,current,buffer,if,buffer,null,writer,write,buffer,buffer,target,channel,serializer,clear,current,buffer,buffer,writer,get,buffer,provider,request,buffer,blocking,result,serializer,set,next,buffer,buffer
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1439807719;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			_			RecordSerializer<T> serializer = serializers[targetChannel]___			synchronized (serializer) {_				SerializationResult result = serializer.addRecord(record)__				while (result.isFullBuffer()) {_					Buffer buffer = serializer.getCurrentBuffer()___					if (buffer != null) {_						writer.writeBuffer(buffer, targetChannel)__						serializer.clearCurrentBuffer()__					}__					buffer = writer.getBufferProvider().requestBufferBlocking()__					result = serializer.setNextBuffer(buffer)__				}_			}_		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,record,serializer,t,serializer,serializers,target,channel,synchronized,serializer,serialization,result,result,serializer,add,record,record,while,result,is,full,buffer,buffer,buffer,serializer,get,current,buffer,if,buffer,null,writer,write,buffer,buffer,target,channel,serializer,clear,current,buffer,buffer,writer,get,buffer,provider,request,buffer,blocking,result,serializer,set,next,buffer,buffer
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1440576612;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			_			RecordSerializer<T> serializer = serializers[targetChannel]___			synchronized (serializer) {_				SerializationResult result = serializer.addRecord(record)__				while (result.isFullBuffer()) {_					Buffer buffer = serializer.getCurrentBuffer()___					if (buffer != null) {_						writeBuffer(buffer, targetChannel, serializer)__					}__					buffer = writer.getBufferProvider().requestBufferBlocking()__					result = serializer.setNextBuffer(buffer)__				}_			}_		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,record,serializer,t,serializer,serializers,target,channel,synchronized,serializer,serialization,result,result,serializer,add,record,record,while,result,is,full,buffer,buffer,buffer,serializer,get,current,buffer,if,buffer,null,write,buffer,buffer,target,channel,serializer,buffer,writer,get,buffer,provider,request,buffer,blocking,result,serializer,set,next,buffer,buffer
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1463939897;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			_			RecordSerializer<T> serializer = serializers[targetChannel]___			synchronized (serializer) {_				SerializationResult result = serializer.addRecord(record)__				while (result.isFullBuffer()) {_					Buffer buffer = serializer.getCurrentBuffer()___					if (buffer != null) {_						writeBuffer(buffer, targetChannel, serializer)__					}__					buffer = writer.getBufferProvider().requestBufferBlocking()__					result = serializer.setNextBuffer(buffer)__				}_			}_		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,record,serializer,t,serializer,serializers,target,channel,synchronized,serializer,serialization,result,result,serializer,add,record,record,while,result,is,full,buffer,buffer,buffer,serializer,get,current,buffer,if,buffer,null,write,buffer,buffer,target,channel,serializer,buffer,writer,get,buffer,provider,request,buffer,blocking,result,serializer,set,next,buffer,buffer
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1469529015;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			_			RecordSerializer<T> serializer = serializers[targetChannel]___			synchronized (serializer) {_				SerializationResult result = serializer.addRecord(record)__				while (result.isFullBuffer()) {_					Buffer buffer = serializer.getCurrentBuffer()___					if (buffer != null) {_						writeBuffer(buffer, targetChannel, serializer)__					}__					buffer = writer.getBufferProvider().requestBufferBlocking()__					result = serializer.setNextBuffer(buffer)__				}_			}_		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,record,serializer,t,serializer,serializers,target,channel,synchronized,serializer,serialization,result,result,serializer,add,record,record,while,result,is,full,buffer,buffer,buffer,serializer,get,current,buffer,if,buffer,null,write,buffer,buffer,target,channel,serializer,buffer,writer,get,buffer,provider,request,buffer,blocking,result,serializer,set,next,buffer,buffer
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1476448412;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1477389806;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1477582418;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1477591529;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1477923124;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1477937801;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1483975361;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1483975361;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1483975430;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1485176584;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1512394876;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1513102147;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1515408360;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1516285878;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1516291532;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1517489696;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1519039270;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1519039274;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1519039287;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1519039289;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1519039301;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1519049134;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1519308961;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1520610579;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1523449296;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1534316740;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		for (int targetChannel = 0_ targetChannel < numChannels_ targetChannel++) {_			sendToTarget(record, targetChannel)__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,for,int,target,channel,0,target,channel,num,channels,target,channel,send,to,target,record,target,channel
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1537529044;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		emit(record, broadcastChannels)__	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,emit,record,broadcast,channels
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1543403062;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		emit(record, broadcastChannels)__	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,emit,record,broadcast,channels
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1543403062;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		emit(record, broadcastChannels)__	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,emit,record,broadcast,channels
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1548265071;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		checkErroneous()__		emit(record, broadcastChannels)__	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,check,erroneous,emit,record,broadcast,channels
RecordWriter -> public void broadcastEmit(T record) throws IOException, InterruptedException;1548853005;This is used to broadcast Streaming Watermarks in-band with records. This ignores_the {@link ChannelSelector}.;public void broadcastEmit(T record) throws IOException, InterruptedException {_		checkErroneous()__		serializer.serializeRecord(record)___		boolean pruneAfterCopying = false__		for (int channel : broadcastChannels) {_			if (copyFromSerializerToTargetChannel(channel)) {_				pruneAfterCopying = true__			}_		}__		_		if (pruneAfterCopying) {_			serializer.prune()__		}_	};this,is,used,to,broadcast,streaming,watermarks,in,band,with,records,this,ignores,the,link,channel,selector;public,void,broadcast,emit,t,record,throws,ioexception,interrupted,exception,check,erroneous,serializer,serialize,record,record,boolean,prune,after,copying,false,for,int,channel,broadcast,channels,if,copy,from,serializer,to,target,channel,channel,prune,after,copying,true,if,prune,after,copying,serializer,prune
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1476448412;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1477389806;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1477582418;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1477591529;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1477923124;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1477937801;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1483975361;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1483975361;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1483975430;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1485176584;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1512394876;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1513102147;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1515408360;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1516285878;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1516291532;This is used to send LatencyMarks to a random target channel;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, RNG.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1517489696;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, rng.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1519039270;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, rng.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1519039274;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, rng.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1519039287;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, rng.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1519039289;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, rng.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1519039301;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, rng.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1519049134;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, rng.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1519308961;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, rng.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1520610579;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, rng.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1523449296;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, rng.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1534316740;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		sendToTarget(record, rng.nextInt(numChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,send,to,target,record,rng,next,int,num,channels
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1537529044;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		serializer.serializeRecord(record)___		if (copyFromSerializerToTargetChannel(rng.nextInt(numChannels))) {_			serializer.prune()__		}_	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,serializer,serialize,record,record,if,copy,from,serializer,to,target,channel,rng,next,int,num,channels,serializer,prune
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1543403062;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		serializer.serializeRecord(record)___		if (copyFromSerializerToTargetChannel(rng.nextInt(numberOfChannels))) {_			serializer.prune()__		}_	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,serializer,serialize,record,record,if,copy,from,serializer,to,target,channel,rng,next,int,number,of,channels,serializer,prune
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1543403062;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		serializer.serializeRecord(record)___		if (copyFromSerializerToTargetChannel(rng.nextInt(numberOfChannels))) {_			serializer.prune()__		}_	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,serializer,serialize,record,record,if,copy,from,serializer,to,target,channel,rng,next,int,number,of,channels,serializer,prune
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1548265071;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		checkErroneous()__		serializer.serializeRecord(record)__		if (copyFromSerializerToTargetChannel(rng.nextInt(numberOfChannels))) {_			serializer.prune()__		}_	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,check,erroneous,serializer,serialize,record,record,if,copy,from,serializer,to,target,channel,rng,next,int,number,of,channels,serializer,prune
RecordWriter -> public void randomEmit(T record) throws IOException, InterruptedException;1548853005;This is used to send LatencyMarks to a random target channel.;public void randomEmit(T record) throws IOException, InterruptedException {_		emit(record, rng.nextInt(numberOfChannels))__	};this,is,used,to,send,latency,marks,to,a,random,target,channel;public,void,random,emit,t,record,throws,ioexception,interrupted,exception,emit,record,rng,next,int,number,of,channels
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1477389806;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(TaskIOMetricGroup metrics) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.instantiateMetrics(metrics)__		}_	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,task,iometric,group,metrics,for,record,serializer,serializer,serializers,serializer,instantiate,metrics,metrics
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1477582418;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(TaskIOMetricGroup metrics) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.instantiateMetrics(metrics)__		}_	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,task,iometric,group,metrics,for,record,serializer,serializer,serializers,serializer,instantiate,metrics,metrics
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1477591529;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(TaskIOMetricGroup metrics) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.instantiateMetrics(metrics)__		}_	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,task,iometric,group,metrics,for,record,serializer,serializer,serializers,serializer,instantiate,metrics,metrics
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1477923124;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(TaskIOMetricGroup metrics) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.instantiateMetrics(metrics)__		}_	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,task,iometric,group,metrics,for,record,serializer,serializer,serializers,serializer,instantiate,metrics,metrics
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1477937801;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(TaskIOMetricGroup metrics) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.instantiateMetrics(metrics)__		}_	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,task,iometric,group,metrics,for,record,serializer,serializer,serializers,serializer,instantiate,metrics,metrics
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1483975361;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(TaskIOMetricGroup metrics) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.instantiateMetrics(metrics)__		}_	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,task,iometric,group,metrics,for,record,serializer,serializer,serializers,serializer,instantiate,metrics,metrics
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1483975361;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(TaskIOMetricGroup metrics) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.instantiateMetrics(metrics)__		}_	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,task,iometric,group,metrics,for,record,serializer,serializer,serializers,serializer,instantiate,metrics,metrics
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1483975430;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(TaskIOMetricGroup metrics) {_		for(RecordSerializer<?> serializer : serializers) {_			serializer.instantiateMetrics(metrics)__		}_	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,task,iometric,group,metrics,for,record,serializer,serializer,serializers,serializer,instantiate,metrics,metrics
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1485176584;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1512394876;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1513102147;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1515408360;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1516285878;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1516291532;Sets the metric group for this RecordWriter._@param metrics;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer,param,metrics;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1517489696;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1519039270;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1519039274;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1519039287;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1519039289;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1519039301;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1519049134;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1519308961;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1520610579;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1523449296;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1534316740;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__		numBuffersOut = metrics.getNumBuffersOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter,num,buffers,out,metrics,get,num,buffers,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1537529044;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__		numBuffersOut = metrics.getNumBuffersOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter,num,buffers,out,metrics,get,num,buffers,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1543403062;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__		numBuffersOut = metrics.getNumBuffersOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter,num,buffers,out,metrics,get,num,buffers,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1543403062;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__		numBuffersOut = metrics.getNumBuffersOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter,num,buffers,out,metrics,get,num,buffers,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1548265071;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__		numBuffersOut = metrics.getNumBuffersOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter,num,buffers,out,metrics,get,num,buffers,out,counter
RecordWriter -> public void setMetricGroup(TaskIOMetricGroup metrics);1548853005;Sets the metric group for this RecordWriter.;public void setMetricGroup(TaskIOMetricGroup metrics) {_		numBytesOut = metrics.getNumBytesOutCounter()__		numBuffersOut = metrics.getNumBuffersOutCounter()__	};sets,the,metric,group,for,this,record,writer;public,void,set,metric,group,task,iometric,group,metrics,num,bytes,out,metrics,get,num,bytes,out,counter,num,buffers,out,metrics,get,num,buffers,out,counter
RecordWriter -> private void writeBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1440576612;Writes the buffer to the {@link ResultPartitionWriter}.__<p> The buffer is cleared from the serializer state after a call to this method.;private void writeBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			writer.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,p,the,buffer,is,cleared,from,the,serializer,state,after,a,call,to,this,method;private,void,write,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,writer,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1463939897;Writes the buffer to the {@link ResultPartitionWriter}.__<p> The buffer is cleared from the serializer state after a call to this method.;private void writeBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			writer.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,p,the,buffer,is,cleared,from,the,serializer,state,after,a,call,to,this,method;private,void,write,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,writer,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1469529015;Writes the buffer to the {@link ResultPartitionWriter}.__<p> The buffer is cleared from the serializer state after a call to this method.;private void writeBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			writer.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,p,the,buffer,is,cleared,from,the,serializer,state,after,a,call,to,this,method;private,void,write,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,writer,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1476448412;Writes the buffer to the {@link ResultPartitionWriter}.__<p> The buffer is cleared from the serializer state after a call to this method.;private void writeBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			writer.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,p,the,buffer,is,cleared,from,the,serializer,state,after,a,call,to,this,method;private,void,write,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,writer,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1477389806;Writes the buffer to the {@link ResultPartitionWriter}.__<p> The buffer is cleared from the serializer state after a call to this method.;private void writeBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			writer.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,p,the,buffer,is,cleared,from,the,serializer,state,after,a,call,to,this,method;private,void,write,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,writer,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1477591529;Writes the buffer to the {@link ResultPartitionWriter}.__<p> The buffer is cleared from the serializer state after a call to this method.;private void writeBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			writer.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,p,the,buffer,is,cleared,from,the,serializer,state,after,a,call,to,this,method;private,void,write,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,writer,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void writeBuffer( 			Buffer buffer, 			int targetChannel, 			RecordSerializer<T> serializer) throws IOException;1477923124;Writes the buffer to the {@link ResultPartitionWriter}.__<p> The buffer is cleared from the serializer state after a call to this method.;private void writeBuffer(_			Buffer buffer,_			int targetChannel,_			RecordSerializer<T> serializer) throws IOException {__		try {_			writer.writeBuffer(buffer, targetChannel)__		}_		finally {_			serializer.clearCurrentBuffer()__		}_	};writes,the,buffer,to,the,link,result,partition,writer,p,the,buffer,is,cleared,from,the,serializer,state,after,a,call,to,this,method;private,void,write,buffer,buffer,buffer,int,target,channel,record,serializer,t,serializer,throws,ioexception,try,writer,write,buffer,buffer,target,channel,finally,serializer,clear,current,buffer
RecordWriter -> private void tryFinishCurrentBufferBuilder(int targetChannel);1537529044;Marks the current {@link BufferBuilder} as finished and clears the state for next one.;private void tryFinishCurrentBufferBuilder(int targetChannel) {_		if (!bufferBuilders[targetChannel].isPresent()) {_			return__		}_		BufferBuilder bufferBuilder = bufferBuilders[targetChannel].get()__		bufferBuilders[targetChannel] = Optional.empty()__		numBytesOut.inc(bufferBuilder.finish())__		numBuffersOut.inc()__	};marks,the,current,link,buffer,builder,as,finished,and,clears,the,state,for,next,one;private,void,try,finish,current,buffer,builder,int,target,channel,if,buffer,builders,target,channel,is,present,return,buffer,builder,buffer,builder,buffer,builders,target,channel,get,buffer,builders,target,channel,optional,empty,num,bytes,out,inc,buffer,builder,finish,num,buffers,out,inc
RecordWriter -> private void tryFinishCurrentBufferBuilder(int targetChannel);1543403062;Marks the current {@link BufferBuilder} as finished and clears the state for next one.;private void tryFinishCurrentBufferBuilder(int targetChannel) {_		if (!bufferBuilders[targetChannel].isPresent()) {_			return__		}_		BufferBuilder bufferBuilder = bufferBuilders[targetChannel].get()__		bufferBuilders[targetChannel] = Optional.empty()__		numBytesOut.inc(bufferBuilder.finish())__		numBuffersOut.inc()__	};marks,the,current,link,buffer,builder,as,finished,and,clears,the,state,for,next,one;private,void,try,finish,current,buffer,builder,int,target,channel,if,buffer,builders,target,channel,is,present,return,buffer,builder,buffer,builder,buffer,builders,target,channel,get,buffer,builders,target,channel,optional,empty,num,bytes,out,inc,buffer,builder,finish,num,buffers,out,inc
RecordWriter -> private void tryFinishCurrentBufferBuilder(int targetChannel);1543403062;Marks the current {@link BufferBuilder} as finished and clears the state for next one.;private void tryFinishCurrentBufferBuilder(int targetChannel) {_		if (!bufferBuilders[targetChannel].isPresent()) {_			return__		}_		BufferBuilder bufferBuilder = bufferBuilders[targetChannel].get()__		bufferBuilders[targetChannel] = Optional.empty()__		numBytesOut.inc(bufferBuilder.finish())__		numBuffersOut.inc()__	};marks,the,current,link,buffer,builder,as,finished,and,clears,the,state,for,next,one;private,void,try,finish,current,buffer,builder,int,target,channel,if,buffer,builders,target,channel,is,present,return,buffer,builder,buffer,builder,buffer,builders,target,channel,get,buffer,builders,target,channel,optional,empty,num,bytes,out,inc,buffer,builder,finish,num,buffers,out,inc
RecordWriter -> private void tryFinishCurrentBufferBuilder(int targetChannel);1548265071;Marks the current {@link BufferBuilder} as finished and clears the state for next one.;private void tryFinishCurrentBufferBuilder(int targetChannel) {_		if (!bufferBuilders[targetChannel].isPresent()) {_			return__		}_		BufferBuilder bufferBuilder = bufferBuilders[targetChannel].get()__		bufferBuilders[targetChannel] = Optional.empty()__		numBytesOut.inc(bufferBuilder.finish())__		numBuffersOut.inc()__	};marks,the,current,link,buffer,builder,as,finished,and,clears,the,state,for,next,one;private,void,try,finish,current,buffer,builder,int,target,channel,if,buffer,builders,target,channel,is,present,return,buffer,builder,buffer,builder,buffer,builders,target,channel,get,buffer,builders,target,channel,optional,empty,num,bytes,out,inc,buffer,builder,finish,num,buffers,out,inc
RecordWriter -> private void tryFinishCurrentBufferBuilder(int targetChannel);1548853005;Marks the current {@link BufferBuilder} as finished and clears the state for next one.;private void tryFinishCurrentBufferBuilder(int targetChannel) {_		if (!bufferBuilders[targetChannel].isPresent()) {_			return__		}_		BufferBuilder bufferBuilder = bufferBuilders[targetChannel].get()__		bufferBuilders[targetChannel] = Optional.empty()__		numBytesOut.inc(bufferBuilder.finish())__		numBuffersOut.inc()__	};marks,the,current,link,buffer,builder,as,finished,and,clears,the,state,for,next,one;private,void,try,finish,current,buffer,builder,int,target,channel,if,buffer,builders,target,channel,is,present,return,buffer,builder,buffer,builder,buffer,builders,target,channel,get,buffer,builders,target,channel,optional,empty,num,bytes,out,inc,buffer,builder,finish,num,buffers,out,inc
RecordWriter -> private void notifyFlusherException(Throwable t);1548265071;Notifies the writer that the output flusher thread encountered an exception.__@param t The exception to report.;private void notifyFlusherException(Throwable t) {_		if (flusherException == null) {_			LOG.error("An exception happened while flushing the outputs", t)__			flusherException = t__		}_	};notifies,the,writer,that,the,output,flusher,thread,encountered,an,exception,param,t,the,exception,to,report;private,void,notify,flusher,exception,throwable,t,if,flusher,exception,null,log,error,an,exception,happened,while,flushing,the,outputs,t,flusher,exception,t
RecordWriter -> private void notifyFlusherException(Throwable t);1548853005;Notifies the writer that the output flusher thread encountered an exception.__@param t The exception to report.;private void notifyFlusherException(Throwable t) {_		if (flusherException == null) {_			LOG.error("An exception happened while flushing the outputs", t)__			flusherException = t__		}_	};notifies,the,writer,that,the,output,flusher,thread,encountered,an,exception,param,t,the,exception,to,report;private,void,notify,flusher,exception,throwable,t,if,flusher,exception,null,log,error,an,exception,happened,while,flushing,the,outputs,t,flusher,exception,t
RecordWriter -> private boolean copyFromSerializerToTargetChannel(int targetChannel) throws IOException, InterruptedException;1537529044;@param targetChannel_@return <tt>true</tt> if the intermediate serialization buffer should be pruned;private boolean copyFromSerializerToTargetChannel(int targetChannel) throws IOException, InterruptedException {_		_		_		serializer.reset()___		boolean pruneTriggered = false__		BufferBuilder bufferBuilder = getBufferBuilder(targetChannel)__		SerializationResult result = serializer.copyToBufferBuilder(bufferBuilder)__		while (result.isFullBuffer()) {_			numBytesOut.inc(bufferBuilder.finish())__			numBuffersOut.inc()___			_			_			_			if (result.isFullRecord()) {_				pruneTriggered = true__				bufferBuilders[targetChannel] = Optional.empty()__				break__			}__			bufferBuilder = requestNewBufferBuilder(targetChannel)__			result = serializer.copyToBufferBuilder(bufferBuilder)__		}_		checkState(!serializer.hasSerializedData(), "All data should be written at once")___		if (flushAlways) {_			targetPartition.flush(targetChannel)__		}_		return pruneTriggered__	};param,target,channel,return,tt,true,tt,if,the,intermediate,serialization,buffer,should,be,pruned;private,boolean,copy,from,serializer,to,target,channel,int,target,channel,throws,ioexception,interrupted,exception,serializer,reset,boolean,prune,triggered,false,buffer,builder,buffer,builder,get,buffer,builder,target,channel,serialization,result,result,serializer,copy,to,buffer,builder,buffer,builder,while,result,is,full,buffer,num,bytes,out,inc,buffer,builder,finish,num,buffers,out,inc,if,result,is,full,record,prune,triggered,true,buffer,builders,target,channel,optional,empty,break,buffer,builder,request,new,buffer,builder,target,channel,result,serializer,copy,to,buffer,builder,buffer,builder,check,state,serializer,has,serialized,data,all,data,should,be,written,at,once,if,flush,always,target,partition,flush,target,channel,return,prune,triggered
RecordWriter -> private boolean copyFromSerializerToTargetChannel(int targetChannel) throws IOException, InterruptedException;1543403062;@param targetChannel_@return <tt>true</tt> if the intermediate serialization buffer should be pruned;private boolean copyFromSerializerToTargetChannel(int targetChannel) throws IOException, InterruptedException {_		_		_		serializer.reset()___		boolean pruneTriggered = false__		BufferBuilder bufferBuilder = getBufferBuilder(targetChannel)__		SerializationResult result = serializer.copyToBufferBuilder(bufferBuilder)__		while (result.isFullBuffer()) {_			numBytesOut.inc(bufferBuilder.finish())__			numBuffersOut.inc()___			_			_			_			if (result.isFullRecord()) {_				pruneTriggered = true__				bufferBuilders[targetChannel] = Optional.empty()__				break__			}__			bufferBuilder = requestNewBufferBuilder(targetChannel)__			result = serializer.copyToBufferBuilder(bufferBuilder)__		}_		checkState(!serializer.hasSerializedData(), "All data should be written at once")___		if (flushAlways) {_			targetPartition.flush(targetChannel)__		}_		return pruneTriggered__	};param,target,channel,return,tt,true,tt,if,the,intermediate,serialization,buffer,should,be,pruned;private,boolean,copy,from,serializer,to,target,channel,int,target,channel,throws,ioexception,interrupted,exception,serializer,reset,boolean,prune,triggered,false,buffer,builder,buffer,builder,get,buffer,builder,target,channel,serialization,result,result,serializer,copy,to,buffer,builder,buffer,builder,while,result,is,full,buffer,num,bytes,out,inc,buffer,builder,finish,num,buffers,out,inc,if,result,is,full,record,prune,triggered,true,buffer,builders,target,channel,optional,empty,break,buffer,builder,request,new,buffer,builder,target,channel,result,serializer,copy,to,buffer,builder,buffer,builder,check,state,serializer,has,serialized,data,all,data,should,be,written,at,once,if,flush,always,target,partition,flush,target,channel,return,prune,triggered
RecordWriter -> private boolean copyFromSerializerToTargetChannel(int targetChannel) throws IOException, InterruptedException;1543403062;@param targetChannel_@return <tt>true</tt> if the intermediate serialization buffer should be pruned;private boolean copyFromSerializerToTargetChannel(int targetChannel) throws IOException, InterruptedException {_		_		_		serializer.reset()___		boolean pruneTriggered = false__		BufferBuilder bufferBuilder = getBufferBuilder(targetChannel)__		SerializationResult result = serializer.copyToBufferBuilder(bufferBuilder)__		while (result.isFullBuffer()) {_			numBytesOut.inc(bufferBuilder.finish())__			numBuffersOut.inc()___			_			_			_			if (result.isFullRecord()) {_				pruneTriggered = true__				bufferBuilders[targetChannel] = Optional.empty()__				break__			}__			bufferBuilder = requestNewBufferBuilder(targetChannel)__			result = serializer.copyToBufferBuilder(bufferBuilder)__		}_		checkState(!serializer.hasSerializedData(), "All data should be written at once")___		if (flushAlways) {_			targetPartition.flush(targetChannel)__		}_		return pruneTriggered__	};param,target,channel,return,tt,true,tt,if,the,intermediate,serialization,buffer,should,be,pruned;private,boolean,copy,from,serializer,to,target,channel,int,target,channel,throws,ioexception,interrupted,exception,serializer,reset,boolean,prune,triggered,false,buffer,builder,buffer,builder,get,buffer,builder,target,channel,serialization,result,result,serializer,copy,to,buffer,builder,buffer,builder,while,result,is,full,buffer,num,bytes,out,inc,buffer,builder,finish,num,buffers,out,inc,if,result,is,full,record,prune,triggered,true,buffer,builders,target,channel,optional,empty,break,buffer,builder,request,new,buffer,builder,target,channel,result,serializer,copy,to,buffer,builder,buffer,builder,check,state,serializer,has,serialized,data,all,data,should,be,written,at,once,if,flush,always,target,partition,flush,target,channel,return,prune,triggered
RecordWriter -> private boolean copyFromSerializerToTargetChannel(int targetChannel) throws IOException, InterruptedException;1548265071;@param targetChannel_@return <tt>true</tt> if the intermediate serialization buffer should be pruned;private boolean copyFromSerializerToTargetChannel(int targetChannel) throws IOException, InterruptedException {_		_		_		serializer.reset()___		boolean pruneTriggered = false__		BufferBuilder bufferBuilder = getBufferBuilder(targetChannel)__		SerializationResult result = serializer.copyToBufferBuilder(bufferBuilder)__		while (result.isFullBuffer()) {_			numBytesOut.inc(bufferBuilder.finish())__			numBuffersOut.inc()___			_			_			_			if (result.isFullRecord()) {_				pruneTriggered = true__				bufferBuilders[targetChannel] = Optional.empty()__				break__			}__			bufferBuilder = requestNewBufferBuilder(targetChannel)__			result = serializer.copyToBufferBuilder(bufferBuilder)__		}_		checkState(!serializer.hasSerializedData(), "All data should be written at once")___		if (flushAlways) {_			targetPartition.flush(targetChannel)__		}_		return pruneTriggered__	};param,target,channel,return,tt,true,tt,if,the,intermediate,serialization,buffer,should,be,pruned;private,boolean,copy,from,serializer,to,target,channel,int,target,channel,throws,ioexception,interrupted,exception,serializer,reset,boolean,prune,triggered,false,buffer,builder,buffer,builder,get,buffer,builder,target,channel,serialization,result,result,serializer,copy,to,buffer,builder,buffer,builder,while,result,is,full,buffer,num,bytes,out,inc,buffer,builder,finish,num,buffers,out,inc,if,result,is,full,record,prune,triggered,true,buffer,builders,target,channel,optional,empty,break,buffer,builder,request,new,buffer,builder,target,channel,result,serializer,copy,to,buffer,builder,buffer,builder,check,state,serializer,has,serialized,data,all,data,should,be,written,at,once,if,flush,always,target,partition,flush,target,channel,return,prune,triggered
RecordWriter -> private boolean copyFromSerializerToTargetChannel(int targetChannel) throws IOException, InterruptedException;1548853005;@param targetChannel_@return <tt>true</tt> if the intermediate serialization buffer should be pruned;private boolean copyFromSerializerToTargetChannel(int targetChannel) throws IOException, InterruptedException {_		_		_		serializer.reset()___		boolean pruneTriggered = false__		BufferBuilder bufferBuilder = getBufferBuilder(targetChannel)__		SerializationResult result = serializer.copyToBufferBuilder(bufferBuilder)__		while (result.isFullBuffer()) {_			numBytesOut.inc(bufferBuilder.finish())__			numBuffersOut.inc()___			_			_			_			if (result.isFullRecord()) {_				pruneTriggered = true__				bufferBuilders[targetChannel] = Optional.empty()__				break__			}__			bufferBuilder = requestNewBufferBuilder(targetChannel)__			result = serializer.copyToBufferBuilder(bufferBuilder)__		}_		checkState(!serializer.hasSerializedData(), "All data should be written at once")___		if (flushAlways) {_			targetPartition.flush(targetChannel)__		}_		return pruneTriggered__	};param,target,channel,return,tt,true,tt,if,the,intermediate,serialization,buffer,should,be,pruned;private,boolean,copy,from,serializer,to,target,channel,int,target,channel,throws,ioexception,interrupted,exception,serializer,reset,boolean,prune,triggered,false,buffer,builder,buffer,builder,get,buffer,builder,target,channel,serialization,result,result,serializer,copy,to,buffer,builder,buffer,builder,while,result,is,full,buffer,num,bytes,out,inc,buffer,builder,finish,num,buffers,out,inc,if,result,is,full,record,prune,triggered,true,buffer,builders,target,channel,optional,empty,break,buffer,builder,request,new,buffer,builder,target,channel,result,serializer,copy,to,buffer,builder,buffer,builder,check,state,serializer,has,serialized,data,all,data,should,be,written,at,once,if,flush,always,target,partition,flush,target,channel,return,prune,triggered
