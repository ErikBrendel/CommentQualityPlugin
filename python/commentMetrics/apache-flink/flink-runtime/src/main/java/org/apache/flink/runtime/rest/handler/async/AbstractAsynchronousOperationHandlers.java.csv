commented;modifiers;parameterAmount;loc;comment;code
false;public;2;10;;@Override public CompletableFuture<TriggerResponse> handleRequest(@Nonnull HandlerRequest<B, M> request, @Nonnull T gateway) throws RestHandlerException {     final CompletableFuture<R> resultFuture = triggerOperation(request, gateway).     final K operationKey = createOperationKey(request).     completedOperationCache.registerOngoingOperation(operationKey, resultFuture).     return CompletableFuture.completedFuture(new TriggerResponse(operationKey.getTriggerId())). }
true;protected,abstract;2;1;/**  * Trigger the asynchronous operation and return its future result.  *  * @param request with which the trigger handler has been called  * @param gateway to the leader  * @return Future result of the asynchronous operation  * @throws RestHandlerException if something went wrong  */ ;/**  * Trigger the asynchronous operation and return its future result.  *  * @param request with which the trigger handler has been called  * @param gateway to the leader  * @return Future result of the asynchronous operation  * @throws RestHandlerException if something went wrong  */ protected abstract CompletableFuture<R> triggerOperation(HandlerRequest<B, M> request, T gateway) throws RestHandlerException.
true;protected,abstract;1;1;/**  * Create the operation key under which the result future of the asynchronous operation will  * be stored.  *  * @param request with which the trigger handler has been called.  * @return Operation key under which the result future will be stored  */ ;/**  * Create the operation key under which the result future of the asynchronous operation will  * be stored.  *  * @param request with which the trigger handler has been called.  * @return Operation key under which the result future will be stored  */ protected abstract K createOperationKey(HandlerRequest<B, M> request).
false;public;2;25;;@Override public CompletableFuture<AsynchronousOperationResult<V>> handleRequest(@Nonnull HandlerRequest<EmptyRequestBody, M> request, @Nonnull T gateway) throws RestHandlerException {     final K key = getOperationKey(request).     final Either<Throwable, R> operationResultOrError.     try {         operationResultOrError = completedOperationCache.get(key).     } catch (UnknownOperationKeyException e) {         return FutureUtils.completedExceptionally(new NotFoundException("Operation not found under key: " + key, e)).     }     if (operationResultOrError != null) {         if (operationResultOrError.isLeft()) {             return CompletableFuture.completedFuture(AsynchronousOperationResult.completed(exceptionalOperationResultResponse(operationResultOrError.left()))).         } else {             return CompletableFuture.completedFuture(AsynchronousOperationResult.completed(operationResultResponse(operationResultOrError.right()))).         }     } else {         return CompletableFuture.completedFuture(AsynchronousOperationResult.inProgress()).     } }
false;public;0;4;;@Override public CompletableFuture<Void> closeHandlerAsync() {     return completedOperationCache.closeAsync(). }
true;protected,abstract;1;1;/**  * Extract the operation key under which the operation result future is stored.  *  * @param request with which the status handler has been called  * @return Operation key under which the operation result future is stored  */ ;/**  * Extract the operation key under which the operation result future is stored.  *  * @param request with which the status handler has been called  * @return Operation key under which the operation result future is stored  */ protected abstract K getOperationKey(HandlerRequest<EmptyRequestBody, M> request).
true;protected,abstract;1;1;/**  * Create an exceptional operation result from the given {@link Throwable}. This  * method is called if the asynchronous operation failed.  *  * @param throwable failure of the asynchronous operation  * @return Exceptional operation result  */ ;/**  * Create an exceptional operation result from the given {@link Throwable}. This  * method is called if the asynchronous operation failed.  *  * @param throwable failure of the asynchronous operation  * @return Exceptional operation result  */ protected abstract V exceptionalOperationResultResponse(Throwable throwable).
true;protected,abstract;1;1;/**  * Create the operation result from the given value.  *  * @param operationResult of the asynchronous operation  * @return Operation result  */ ;/**  * Create the operation result from the given value.  *  * @param operationResult of the asynchronous operation  * @return Operation result  */ protected abstract V operationResultResponse(R operationResult).
