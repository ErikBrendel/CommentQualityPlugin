commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CheckpointStatsStatus getStatus() {     return CheckpointStatsStatus.COMPLETED. }
false;public;0;4;;@Override public int getNumberOfAcknowledgedSubtasks() {     return numberOfSubtasks. }
false;public;0;4;;@Override public long getStateSize() {     return stateSize. }
false;public;0;4;;@Override public long getAlignmentBuffered() {     return alignmentBuffered. }
false;public;0;5;;@Override @Nullable public SubtaskStateStats getLatestAcknowledgedSubtaskStats() {     return latestAcknowledgedSubtask. }
true;public;0;3;/**  * Returns the external pointer of this checkpoint.  */ ;// ------------------------------------------------------------------------ // Completed checkpoint specific methods // ------------------------------------------------------------------------ /**  * Returns the external pointer of this checkpoint.  */ public String getExternalPath() {     return externalPointer. }
true;public;0;3;/**  * Returns whether the checkpoint has been discarded.  *  * @return <code>true</code> if the checkpoint has been discarded, <code>false</code> otherwise.  */ ;/**  * Returns whether the checkpoint has been discarded.  *  * @return <code>true</code> if the checkpoint has been discarded, <code>false</code> otherwise.  */ public boolean isDiscarded() {     return discarded. }
true;;0;3;/**  * Returns the callback for the {@link CompletedCheckpoint}.  *  * @return Callback for the {@link CompletedCheckpoint}.  */ ;/**  * Returns the callback for the {@link CompletedCheckpoint}.  *  * @return Callback for the {@link CompletedCheckpoint}.  */ DiscardCallback getDiscardCallback() {     return new DiscardCallback(). }
true;;0;3;/**  * Updates the discarded flag of the checkpoint stats.  *  * <p>After this notification, {@link #isDiscarded()} will return  * <code>true</code>.  */ ;/**  * Updates the discarded flag of the checkpoint stats.  *  * <p>After this notification, {@link #isDiscarded()} will return  * <code>true</code>.  */ void notifyDiscardedCheckpoint() {     discarded = true. }
false;public;0;4;;@Override public String toString() {     return "CompletedCheckpoint(id=" + getCheckpointId() + ")". }
