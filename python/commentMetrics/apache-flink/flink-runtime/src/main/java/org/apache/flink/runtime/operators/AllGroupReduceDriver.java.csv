commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;// ------------------------------------------------------------------------ @Override public void setup(TaskContext<GroupReduceFunction<IT, OT>, OT> context) {     this.taskContext = context. }
false;public;0;4;;@Override public int getNumberOfInputs() {     return 1. }
false;public;0;6;;@Override public Class<GroupReduceFunction<IT, OT>> getStubType() {     @SuppressWarnings("unchecked")     final Class<GroupReduceFunction<IT, OT>> clazz = (Class<GroupReduceFunction<IT, OT>>) (Class<?>) GroupReduceFunction.class.     return clazz. }
false;public;0;4;;@Override public int getNumberOfDriverComparators() {     return 0. }
false;public;0;27;;// -------------------------------------------------------------------------------------------- @Override public void prepare() throws Exception {     final TaskConfig config = this.taskContext.getTaskConfig().     this.strategy = config.getDriverStrategy().     switch(this.strategy) {         case ALL_GROUP_REDUCE_COMBINE:             if (!(this.taskContext.getStub() instanceof GroupCombineFunction)) {                 throw new Exception("Using combiner on a UDF that does not implement the combiner interface " + GroupCombineFunction.class.getName()).             }         case ALL_GROUP_REDUCE:         case ALL_GROUP_COMBINE:             break.         default:             throw new Exception("Unrecognized driver strategy for AllGroupReduce driver: " + this.strategy.name()).     }     this.serializer = this.taskContext.<IT>getInputSerializer(0).getSerializer().     this.input = this.taskContext.getInput(0).     ExecutionConfig executionConfig = taskContext.getExecutionConfig().     this.objectReuseEnabled = executionConfig.isObjectReuseEnabled().     if (LOG.isDebugEnabled()) {         LOG.debug("AllGroupReduceDriver object reuse: " + (this.objectReuseEnabled ? "ENABLED" : "DISABLED") + ".").     } }
false;public;0;43;;@Override public void run() throws Exception {     if (LOG.isDebugEnabled()) {         LOG.debug(this.taskContext.formatLogString("AllGroupReduceDriver preprocessing done. Running Reducer code.")).     }     if (objectReuseEnabled) {         final ReusingMutableToRegularIteratorWrapper<IT> inIter = new ReusingMutableToRegularIteratorWrapper<IT>(this.input, this.serializer).         // single UDF call with the single group         if (inIter.hasNext()) {             if (strategy == DriverStrategy.ALL_GROUP_REDUCE) {                 final GroupReduceFunction<IT, OT> reducer = this.taskContext.getStub().                 final Collector<OT> output = this.taskContext.getOutputCollector().                 reducer.reduce(inIter, output).             } else if (strategy == DriverStrategy.ALL_GROUP_REDUCE_COMBINE || strategy == DriverStrategy.ALL_GROUP_COMBINE) {                 @SuppressWarnings("unchecked")                 final GroupCombineFunction<IT, OT> combiner = (GroupCombineFunction<IT, OT>) this.taskContext.getStub().                 final Collector<OT> output = this.taskContext.getOutputCollector().                 combiner.combine(inIter, output).             } else {                 throw new Exception("The strategy " + strategy + " is unknown to this driver.").             }         }     } else {         final NonReusingMutableToRegularIteratorWrapper<IT> inIter = new NonReusingMutableToRegularIteratorWrapper<IT>(this.input, this.serializer).         // single UDF call with the single group         if (inIter.hasNext()) {             if (strategy == DriverStrategy.ALL_GROUP_REDUCE) {                 final GroupReduceFunction<IT, OT> reducer = this.taskContext.getStub().                 final Collector<OT> output = this.taskContext.getOutputCollector().                 reducer.reduce(inIter, output).             } else if (strategy == DriverStrategy.ALL_GROUP_REDUCE_COMBINE || strategy == DriverStrategy.ALL_GROUP_COMBINE) {                 @SuppressWarnings("unchecked")                 final GroupCombineFunction<IT, OT> combiner = (GroupCombineFunction<IT, OT>) this.taskContext.getStub().                 final Collector<OT> output = this.taskContext.getOutputCollector().                 combiner.combine(inIter, output).             } else {                 throw new Exception("The strategy " + strategy + " is unknown to this driver.").             }         }     } }
false;public;0;2;;@Override public void cleanup() { }
false;public;0;2;;@Override public void cancel() { }
