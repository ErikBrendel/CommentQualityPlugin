commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public TypeSerializer<K> getKeySerializer() {     return keySerializer. }
false;public;0;4;;@Override public TypeSerializer<N> getNamespaceSerializer() {     return namespaceSerializer. }
false;public;0;4;;@Override public TypeSerializer<ACC> getValueSerializer() {     return valueSerializer. }
false;public;0;5;;// ------------------------------------------------------------------------ // state access // ------------------------------------------------------------------------ @Override public OUT get() {     ACC accumulator = getInternal().     return accumulator != null ? aggregateTransformation.aggFunction.getResult(accumulator) : null. }
false;public;1;15;;@Override public void add(IN value) throws IOException {     final N namespace = currentNamespace.     if (value == null) {         clear().         return.     }     try {         stateTable.transform(namespace, value, aggregateTransformation).     } catch (Exception e) {         throw new IOException("Exception while applying AggregateFunction in aggregating state", e).     } }
false;protected;2;4;;// ------------------------------------------------------------------------ // state merging // ------------------------------------------------------------------------ @Override protected ACC mergeState(ACC a, ACC b) {     return aggregateTransformation.aggFunction.merge(a, b). }
false;public;2;7;;@Override public ACC apply(ACC accumulator, IN value) {     if (accumulator == null) {         accumulator = aggFunction.createAccumulator().     }     return aggFunction.add(value, accumulator). }
false;static;3;13;;@SuppressWarnings("unchecked") static <T, K, N, SV, S extends State, IS extends S> IS create(StateDescriptor<S, SV> stateDesc, StateTable<K, N, SV> stateTable, TypeSerializer<K> keySerializer) {     return (IS) new HeapAggregatingState<>(stateTable, keySerializer, stateTable.getStateSerializer(), stateTable.getNamespaceSerializer(), stateDesc.getDefaultValue(), ((AggregatingStateDescriptor<T, SV, ?>) stateDesc).getAggregateFunction()). }
