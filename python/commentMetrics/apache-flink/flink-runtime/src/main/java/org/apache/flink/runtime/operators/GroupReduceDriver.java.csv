commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;// ------------------------------------------------------------------------ @Override public void setup(TaskContext<GroupReduceFunction<IT, OT>, OT> context) {     this.taskContext = context.     this.running = true. }
false;public;0;4;;@Override public int getNumberOfInputs() {     return 1. }
false;public;0;6;;@Override public Class<GroupReduceFunction<IT, OT>> getStubType() {     @SuppressWarnings("unchecked")     final Class<GroupReduceFunction<IT, OT>> clazz = (Class<GroupReduceFunction<IT, OT>>) (Class<?>) GroupReduceFunction.class.     return clazz. }
false;public;0;4;;@Override public int getNumberOfDriverComparators() {     return 1. }
false;public;0;19;;// -------------------------------------------------------------------------------------------- @Override public void prepare() throws Exception {     TaskConfig config = this.taskContext.getTaskConfig().     if (config.getDriverStrategy() != DriverStrategy.SORTED_GROUP_REDUCE) {         throw new Exception("Unrecognized driver strategy for GroupReduce driver: " + config.getDriverStrategy().name()).     }     final Counter numRecordsIn = this.taskContext.getMetricGroup().getIOMetricGroup().getNumRecordsInCounter().     this.serializer = this.taskContext.<IT>getInputSerializer(0).getSerializer().     this.comparator = this.taskContext.getDriverComparator(0).     this.input = new CountingMutableObjectIterator<>(this.taskContext.<IT>getInput(0), numRecordsIn).     ExecutionConfig executionConfig = taskContext.getExecutionConfig().     this.objectReuseEnabled = executionConfig.isObjectReuseEnabled().     if (LOG.isDebugEnabled()) {         LOG.debug("GroupReduceDriver object reuse: " + (this.objectReuseEnabled ? "ENABLED" : "DISABLED") + ".").     } }
false;public;0;26;;@Override public void run() throws Exception {     if (LOG.isDebugEnabled()) {         LOG.debug(this.taskContext.formatLogString("GroupReducer preprocessing done. Running GroupReducer code.")).     }     final Counter numRecordsOut = this.taskContext.getMetricGroup().getIOMetricGroup().getNumRecordsOutCounter().     // cache references on the stack     final GroupReduceFunction<IT, OT> stub = this.taskContext.getStub().     final Collector<OT> output = new CountingCollector<>(this.taskContext.getOutputCollector(), numRecordsOut).     if (objectReuseEnabled) {         final ReusingKeyGroupedIterator<IT> iter = new ReusingKeyGroupedIterator<IT>(this.input, this.serializer, this.comparator).         // run stub implementation         while (this.running && iter.nextKey()) {             stub.reduce(iter.getValues(), output).         }     } else {         final NonReusingKeyGroupedIterator<IT> iter = new NonReusingKeyGroupedIterator<IT>(this.input, this.comparator).         // run stub implementation         while (this.running && iter.nextKey()) {             stub.reduce(iter.getValues(), output).         }     } }
false;public;0;2;;@Override public void cleanup() { }
false;public;0;4;;@Override public void cancel() {     this.running = false. }
