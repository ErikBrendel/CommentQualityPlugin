commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;10;;@Override protected SubtaskExecutionAttemptDetailsInfo handleRequest(HandlerRequest<EmptyRequestBody, SubtaskAttemptMessageParameters> request, AccessExecution execution) throws RestHandlerException {     final JobID jobID = request.getPathParameter(JobIDPathParameter.class).     final JobVertexID jobVertexID = request.getPathParameter(JobVertexIdPathParameter.class).     return createDetailsInfo(execution, jobID, jobVertexID, metricFetcher). }
false;public;1;28;;@Override public Collection<ArchivedJson> archiveJsonWithPath(AccessExecutionGraph graph) throws IOException {     List<ArchivedJson> archive = new ArrayList<>(16).     for (AccessExecutionJobVertex task : graph.getAllVertices().values()) {         for (AccessExecutionVertex subtask : task.getTaskVertices()) {             ResponseBody curAttemptJson = createDetailsInfo(subtask.getCurrentExecutionAttempt(), graph.getJobID(), task.getJobVertexId(), null).             String curAttemptPath = getMessageHeaders().getTargetRestEndpointURL().replace(':' + JobIDPathParameter.KEY, graph.getJobID().toString()).replace(':' + JobVertexIdPathParameter.KEY, task.getJobVertexId().toString()).replace(':' + SubtaskIndexPathParameter.KEY, String.valueOf(subtask.getParallelSubtaskIndex())).replace(':' + SubtaskAttemptPathParameter.KEY, String.valueOf(subtask.getCurrentExecutionAttempt().getAttemptNumber())).             archive.add(new ArchivedJson(curAttemptPath, curAttemptJson)).             for (int x = 0. x < subtask.getCurrentExecutionAttempt().getAttemptNumber(). x++) {                 AccessExecution attempt = subtask.getPriorExecutionAttempt(x).                 ResponseBody json = createDetailsInfo(attempt, graph.getJobID(), task.getJobVertexId(), null).                 String path = getMessageHeaders().getTargetRestEndpointURL().replace(':' + JobIDPathParameter.KEY, graph.getJobID().toString()).replace(':' + JobVertexIdPathParameter.KEY, task.getJobVertexId().toString()).replace(':' + SubtaskIndexPathParameter.KEY, String.valueOf(subtask.getParallelSubtaskIndex())).replace(':' + SubtaskAttemptPathParameter.KEY, String.valueOf(attempt.getAttemptNumber())).                 archive.add(new ArchivedJson(path, json)).             }         }     }     return archive. }
false;private,static;4;16;;private static SubtaskExecutionAttemptDetailsInfo createDetailsInfo(AccessExecution execution, JobID jobID, JobVertexID jobVertexID, @Nullable MetricFetcher metricFetcher) {     final MutableIOMetrics ioMetrics = new MutableIOMetrics().     ioMetrics.addIOMetrics(execution, metricFetcher, jobID.toString(), jobVertexID.toString()).     return SubtaskExecutionAttemptDetailsInfo.create(execution, ioMetrics). }
