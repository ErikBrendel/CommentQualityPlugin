commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the maximum size that an individual state can have, as configured in the  * constructor (by default {@value #DEFAULT_MAX_STATE_SIZE}).  *  * @return The maximum size that an individual state can have  */ ;// ------------------------------------------------------------------------ // Properties // ------------------------------------------------------------------------ /**  * Gets the maximum size that an individual state can have, as configured in the  * constructor (by default {@value #DEFAULT_MAX_STATE_SIZE}).  *  * @return The maximum size that an individual state can have  */ public int getMaxStateSize() {     return maxStateSize. }
true;public;0;3;/**  * Gets whether the key/value data structures are asynchronously snapshotted.  *  * <p>If not explicitly configured, this is the default value of  * {@link CheckpointingOptions#ASYNC_SNAPSHOTS}.  */ ;/**  * Gets whether the key/value data structures are asynchronously snapshotted.  *  * <p>If not explicitly configured, this is the default value of  * {@link CheckpointingOptions#ASYNC_SNAPSHOTS}.  */ public boolean isUsingAsynchronousSnapshots() {     return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue()). }
true;public;2;4;/**  * Creates a copy of this state backend that uses the values defined in the configuration  * for fields where that were not specified in this state backend.  *  * @param config The configuration  * @param classLoader The class loader  * @return The re-configured variant of the state backend  */ ;// ------------------------------------------------------------------------ // Reconfiguration // ------------------------------------------------------------------------ /**  * Creates a copy of this state backend that uses the values defined in the configuration  * for fields where that were not specified in this state backend.  *  * @param config The configuration  * @param classLoader The class loader  * @return The re-configured variant of the state backend  */ @Override public MemoryStateBackend configure(Configuration config, ClassLoader classLoader) {     return new MemoryStateBackend(this, config, classLoader). }
false;public;1;4;;// ------------------------------------------------------------------------ // checkpoint state persistence // ------------------------------------------------------------------------ @Override public CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException {     return new MemoryBackendCheckpointStorage(jobId, getCheckpointPath(), getSavepointPath(), maxStateSize). }
false;public;2;10;;// ------------------------------------------------------------------------ // state holding structures // ------------------------------------------------------------------------ @Override public OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception {     return new DefaultOperatorStateBackend(env.getUserClassLoader(), env.getExecutionConfig(), isUsingAsynchronousSnapshots()). }
false;public;10;28;;@Override public <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env, JobID jobID, String operatorIdentifier, TypeSerializer<K> keySerializer, int numberOfKeyGroups, KeyGroupRange keyGroupRange, TaskKvStateRegistry kvStateRegistry, TtlTimeProvider ttlTimeProvider, MetricGroup metricGroup, Collection<KeyedStateHandle> stateHandles) {     TaskStateManager taskStateManager = env.getTaskStateManager().     HeapPriorityQueueSetFactory priorityQueueSetFactory = new HeapPriorityQueueSetFactory(keyGroupRange, numberOfKeyGroups, 128).     return new HeapKeyedStateBackend<>(kvStateRegistry, keySerializer, env.getUserClassLoader(), numberOfKeyGroups, keyGroupRange, isUsingAsynchronousSnapshots(), env.getExecutionConfig(), taskStateManager.createLocalRecoveryConfig(), priorityQueueSetFactory, ttlTimeProvider). }
false;public;0;8;;// ------------------------------------------------------------------------ // utilities // ------------------------------------------------------------------------ @Override public String toString() {     return "MemoryStateBackend (data in heap memory / checkpoints to JobManager) " + "(checkpoints: '" + getCheckpointPath() + "', savepoints: '" + getSavepointPath() + "', asynchronous: " + asynchronousSnapshots + ", maxStateSize: " + maxStateSize + ")". }
