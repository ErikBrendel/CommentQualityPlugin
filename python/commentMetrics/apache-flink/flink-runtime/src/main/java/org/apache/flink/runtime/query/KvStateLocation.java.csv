commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the JobID the KvState instances belong to.  *  * @return JobID the KvState instances belong to  */ ;/**  * Returns the JobID the KvState instances belong to.  *  * @return JobID the KvState instances belong to  */ public JobID getJobId() {     return jobId. }
true;public;0;3;/**  * Returns the JobVertexID the KvState instances belong to.  *  * @return JobVertexID the KvState instances belong to  */ ;/**  * Returns the JobVertexID the KvState instances belong to.  *  * @return JobVertexID the KvState instances belong to  */ public JobVertexID getJobVertexId() {     return jobVertexId. }
true;public;0;3;/**  * Returns the number of key groups of the operator the KvState instances belong to.  *  * @return Number of key groups of the operator the KvState instances belong to  */ ;/**  * Returns the number of key groups of the operator the KvState instances belong to.  *  * @return Number of key groups of the operator the KvState instances belong to  */ public int getNumKeyGroups() {     return numKeyGroups. }
true;public;0;3;/**  * Returns the name under which the KvState instances have been registered.  *  * @return Name under which the KvState instances have been registered.  */ ;/**  * Returns the name under which the KvState instances have been registered.  *  * @return Name under which the KvState instances have been registered.  */ public String getRegistrationName() {     return registrationName. }
true;public;0;3;/**  * Returns the current number of registered key groups.  *  * @return Number of registered key groups.  */ ;/**  * Returns the current number of registered key groups.  *  * @return Number of registered key groups.  */ public int getNumRegisteredKeyGroups() {     return numRegisteredKeyGroups. }
true;public;1;7;/**  * Returns the registered KvStateID for the key group index or  * <code>null</code> if none is registered yet.  *  * @param keyGroupIndex Key group index to get ID for.  * @return KvStateID for the key group index or <code>null</code> if none  * is registered yet  * @throws IndexOutOfBoundsException If key group index < 0 or >= Number of key groups  */ ;/**  * Returns the registered KvStateID for the key group index or  * <code>null</code> if none is registered yet.  *  * @param keyGroupIndex Key group index to get ID for.  * @return KvStateID for the key group index or <code>null</code> if none  * is registered yet  * @throws IndexOutOfBoundsException If key group index < 0 or >= Number of key groups  */ public KvStateID getKvStateID(int keyGroupIndex) {     if (keyGroupIndex < 0 || keyGroupIndex >= numKeyGroups) {         throw new IndexOutOfBoundsException("Key group index").     }     return kvStateIds[keyGroupIndex]. }
true;public;1;7;/**  * Returns the registered server address for the key group index or  * <code>null</code> if none is registered yet.  *  * @param keyGroupIndex Key group index to get server address for.  * @return the server address for the key group index or <code>null</code>  * if none is registered yet  * @throws IndexOutOfBoundsException If key group index < 0 or >= Number of key groups  */ ;/**  * Returns the registered server address for the key group index or  * <code>null</code> if none is registered yet.  *  * @param keyGroupIndex Key group index to get server address for.  * @return the server address for the key group index or <code>null</code>  * if none is registered yet  * @throws IndexOutOfBoundsException If key group index < 0 or >= Number of key groups  */ public InetSocketAddress getKvStateServerAddress(int keyGroupIndex) {     if (keyGroupIndex < 0 || keyGroupIndex >= numKeyGroups) {         throw new IndexOutOfBoundsException("Key group index").     }     return kvStateAddresses[keyGroupIndex]. }
true;public;3;16;/**  * Registers a KvState instance for the given key group index.  *  * @param keyGroupRange  Key group range to register  * @param kvStateId      ID of the KvState instance at the key group index.  * @param kvStateAddress Server address of the KvState instance at the key group index.  * @throws IndexOutOfBoundsException If key group range start < 0 or key group range end >= Number of key groups  */ ;/**  * Registers a KvState instance for the given key group index.  *  * @param keyGroupRange  Key group range to register  * @param kvStateId      ID of the KvState instance at the key group index.  * @param kvStateAddress Server address of the KvState instance at the key group index.  * @throws IndexOutOfBoundsException If key group range start < 0 or key group range end >= Number of key groups  */ public void registerKvState(KeyGroupRange keyGroupRange, KvStateID kvStateId, InetSocketAddress kvStateAddress) {     if (keyGroupRange.getStartKeyGroup() < 0 || keyGroupRange.getEndKeyGroup() >= numKeyGroups) {         throw new IndexOutOfBoundsException("Key group index").     }     for (int kgIdx = keyGroupRange.getStartKeyGroup(). kgIdx <= keyGroupRange.getEndKeyGroup(). ++kgIdx) {         if (kvStateIds[kgIdx] == null && kvStateAddresses[kgIdx] == null) {             numRegisteredKeyGroups++.         }         kvStateIds[kgIdx] = kvStateId.         kvStateAddresses[kgIdx] = kvStateAddress.     } }
true;;1;16;/**  * Registers a KvState instance for the given key group index.  *  * @param keyGroupRange Key group range to unregister.  * @throws IndexOutOfBoundsException If key group range start < 0 or key group range end >= Number of key groups  * @throws IllegalArgumentException  If no location information registered for a key group index in the range.  */ ;/**  * Registers a KvState instance for the given key group index.  *  * @param keyGroupRange Key group range to unregister.  * @throws IndexOutOfBoundsException If key group range start < 0 or key group range end >= Number of key groups  * @throws IllegalArgumentException  If no location information registered for a key group index in the range.  */ void unregisterKvState(KeyGroupRange keyGroupRange) {     if (keyGroupRange.getStartKeyGroup() < 0 || keyGroupRange.getEndKeyGroup() >= numKeyGroups) {         throw new IndexOutOfBoundsException("Key group index").     }     for (int kgIdx = keyGroupRange.getStartKeyGroup(). kgIdx <= keyGroupRange.getEndKeyGroup(). ++kgIdx) {         if (kvStateIds[kgIdx] == null || kvStateAddresses[kgIdx] == null) {             throw new IllegalArgumentException("Not registered. Probably registration/unregistration race.").         }         numRegisteredKeyGroups--.         kvStateIds[kgIdx] = null.         kvStateAddresses[kgIdx] = null.     } }
false;public;0;10;;@Override public String toString() {     return "KvStateLocation{" + "jobId=" + jobId + ", jobVertexId=" + jobVertexId + ", parallelism=" + numKeyGroups + ", kvStateIds=" + Arrays.toString(kvStateIds) + ", kvStateAddresses=" + Arrays.toString(kvStateAddresses) + '}'. }
false;public;1;29;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     KvStateLocation that = (KvStateLocation) o.     if (numKeyGroups != that.numKeyGroups) {         return false.     }     if (!jobId.equals(that.jobId)) {         return false.     }     if (!jobVertexId.equals(that.jobVertexId)) {         return false.     }     if (!registrationName.equals(that.registrationName)) {         return false.     }     if (!Arrays.equals(kvStateIds, that.kvStateIds)) {         return false.     }     return Arrays.equals(kvStateAddresses, that.kvStateAddresses). }
false;public;0;10;;@Override public int hashCode() {     int result = jobId.hashCode().     result = 31 * result + jobVertexId.hashCode().     result = 31 * result + numKeyGroups.     result = 31 * result + registrationName.hashCode().     result = 31 * result + Arrays.hashCode(kvStateIds).     result = 31 * result + Arrays.hashCode(kvStateAddresses).     return result. }
