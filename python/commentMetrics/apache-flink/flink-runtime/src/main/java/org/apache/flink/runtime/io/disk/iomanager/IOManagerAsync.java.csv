commented;modifiers;parameterAmount;loc;comment;code
true;public;0;52;/**  * Close method. Shuts down the reader and writer threads immediately, not waiting for their  * pending requests to be served. This method waits until the threads have actually ceased their  * operation.  */ ;/**  * Close method. Shuts down the reader and writer threads immediately, not waiting for their  * pending requests to be served. This method waits until the threads have actually ceased their  * operation.  */ @Override public void shutdown() {     // mark shut down and exit if it already was shut down     if (!isShutdown.compareAndSet(false, true)) {         return.     }     // Remove shutdown hook to prevent resource leaks     ShutdownHookUtil.removeShutdownHook(shutdownHook, getClass().getSimpleName(), LOG).     try {         if (LOG.isDebugEnabled()) {             LOG.debug("Shutting down I/O manager.").         }         for (WriterThread wt : writers) {             try {                 wt.shutdown().             } catch (Throwable t) {                 LOG.error("Error while shutting down IO Manager writer thread.", t).             }         }         for (ReaderThread rt : readers) {             try {                 rt.shutdown().             } catch (Throwable t) {                 LOG.error("Error while shutting down IO Manager reader thread.", t).             }         }         try {             for (WriterThread wt : writers) {                 wt.join().             }             for (ReaderThread rt : readers) {                 rt.join().             }         } catch (InterruptedException iex) {         // ignore this on shutdown         }     } finally {         // make sure we call the super implementation in any case and at the last point,         // because this will clean up the I/O directories         super.shutdown().     } }
true;public;0;14;/**  * Utility method to check whether the IO manager has been properly shut down. The IO manager is considered  * to be properly shut down when it is closed and its threads have ceased operation.  *  * @return True, if the IO manager has properly shut down, false otherwise.  */ ;/**  * Utility method to check whether the IO manager has been properly shut down. The IO manager is considered  * to be properly shut down when it is closed and its threads have ceased operation.  *  * @return True, if the IO manager has properly shut down, false otherwise.  */ @Override public boolean isProperlyShutDown() {     boolean readersShutDown = true.     for (ReaderThread rt : readers) {         readersShutDown &= rt.getState() == Thread.State.TERMINATED.     }     boolean writersShutDown = true.     for (WriterThread wt : writers) {         writersShutDown &= wt.getState() == Thread.State.TERMINATED.     }     return isShutdown.get() && readersShutDown && writersShutDown && super.isProperlyShutDown(). }
false;public;2;5;;@Override public void uncaughtException(Thread t, Throwable e) {     LOG.error("IO Thread '" + t.getName() + "' terminated due to an exception. Shutting down I/O Manager.", e).     shutdown(). }
false;public;2;7;;// ------------------------------------------------------------------------ // Reader / Writer instantiations // ------------------------------------------------------------------------ @Override public BlockChannelWriter<MemorySegment> createBlockChannelWriter(FileIOChannel.ID channelID, LinkedBlockingQueue<MemorySegment> returnQueue) throws IOException {     checkState(!isShutdown.get(), "I/O-Manager is shut down.").     return new AsynchronousBlockWriter(channelID, this.writers[channelID.getThreadNum()].requestQueue, returnQueue). }
false;public;2;5;;@Override public BlockChannelWriterWithCallback<MemorySegment> createBlockChannelWriter(FileIOChannel.ID channelID, RequestDoneCallback<MemorySegment> callback) throws IOException {     checkState(!isShutdown.get(), "I/O-Manager is shut down.").     return new AsynchronousBlockWriterWithCallback(channelID, this.writers[channelID.getThreadNum()].requestQueue, callback). }
true;public;2;7;/**  * Creates a block channel reader that reads blocks from the given channel. The reader reads asynchronously,  * such that a read request is accepted, carried out at some (close) point in time, and the full segment  * is pushed to the given queue.  *  * @param channelID The descriptor for the channel to write to.  * @param returnQueue The queue to put the full buffers into.  * @return A block channel reader that reads from the given channel.  * @throws IOException Thrown, if the channel for the reader could not be opened.  */ ;/**  * Creates a block channel reader that reads blocks from the given channel. The reader reads asynchronously,  * such that a read request is accepted, carried out at some (close) point in time, and the full segment  * is pushed to the given queue.  *  * @param channelID The descriptor for the channel to write to.  * @param returnQueue The queue to put the full buffers into.  * @return A block channel reader that reads from the given channel.  * @throws IOException Thrown, if the channel for the reader could not be opened.  */ @Override public BlockChannelReader<MemorySegment> createBlockChannelReader(FileIOChannel.ID channelID, LinkedBlockingQueue<MemorySegment> returnQueue) throws IOException {     checkState(!isShutdown.get(), "I/O-Manager is shut down.").     return new AsynchronousBlockReader(channelID, this.readers[channelID.getThreadNum()].requestQueue, returnQueue). }
false;public;1;6;;@Override public BufferFileWriter createBufferFileWriter(FileIOChannel.ID channelID) throws IOException {     checkState(!isShutdown.get(), "I/O-Manager is shut down.").     return new AsynchronousBufferFileWriter(channelID, writers[channelID.getThreadNum()].requestQueue). }
false;public;2;6;;@Override public BufferFileReader createBufferFileReader(FileIOChannel.ID channelID, RequestDoneCallback<Buffer> callback) throws IOException {     checkState(!isShutdown.get(), "I/O-Manager is shut down.").     return new AsynchronousBufferFileReader(channelID, readers[channelID.getThreadNum()].requestQueue, callback). }
false;public;2;6;;@Override public BufferFileSegmentReader createBufferFileSegmentReader(FileIOChannel.ID channelID, RequestDoneCallback<FileSegment> callback) throws IOException {     checkState(!isShutdown.get(), "I/O-Manager is shut down.").     return new AsynchronousBufferFileSegmentReader(channelID, readers[channelID.getThreadNum()].requestQueue, callback). }
true;public;3;7;/**  * Creates a block channel reader that reads all blocks from the given channel directly in one bulk.  * The reader draws segments to read the blocks into from a supplied list, which must contain as many  * segments as the channel has blocks. After the reader is done, the list with the full segments can be  * obtained from the reader.  * <p>  * If a channel is not to be read in one bulk, but in multiple smaller batches, a  * {@link BlockChannelReader} should be used.  *  * @param channelID The descriptor for the channel to write to.  * @param targetSegments The list to take the segments from into which to read the data.  * @param numBlocks The number of blocks in the channel to read.  * @return A block channel reader that reads from the given channel.  * @throws IOException Thrown, if the channel for the reader could not be opened.  */ ;/**  * Creates a block channel reader that reads all blocks from the given channel directly in one bulk.  * The reader draws segments to read the blocks into from a supplied list, which must contain as many  * segments as the channel has blocks. After the reader is done, the list with the full segments can be  * obtained from the reader.  * <p>  * If a channel is not to be read in one bulk, but in multiple smaller batches, a  * {@link BlockChannelReader} should be used.  *  * @param channelID The descriptor for the channel to write to.  * @param targetSegments The list to take the segments from into which to read the data.  * @param numBlocks The number of blocks in the channel to read.  * @return A block channel reader that reads from the given channel.  * @throws IOException Thrown, if the channel for the reader could not be opened.  */ @Override public BulkBlockChannelReader createBulkBlockChannelReader(FileIOChannel.ID channelID, List<MemorySegment> targetSegments, int numBlocks) throws IOException {     checkState(!isShutdown.get(), "I/O-Manager is shut down.").     return new AsynchronousBulkBlockReader(channelID, this.readers[channelID.getThreadNum()].requestQueue, targetSegments, numBlocks). }
false;;1;3;;// ------------------------------------------------------------------------- // For Testing // ------------------------------------------------------------------------- RequestQueue<ReadRequest> getReadRequestQueue(FileIOChannel.ID channelID) {     return this.readers[channelID.getThreadNum()].requestQueue. }
false;;1;3;;RequestQueue<WriteRequest> getWriteRequestQueue(FileIOChannel.ID channelID) {     return this.writers[channelID.getThreadNum()].requestQueue. }
true;protected;0;30;/**  * Shuts the thread down. This operation does not wait for all pending requests to be served, halts the thread  * immediately. All buffers of pending requests are handed back to their channel readers and an exception is  * reported to them, declaring their request queue as closed.  */ ;/**  * Shuts the thread down. This operation does not wait for all pending requests to be served, halts the thread  * immediately. All buffers of pending requests are handed back to their channel readers and an exception is  * reported to them, declaring their request queue as closed.  */ protected void shutdown() {     synchronized (this) {         if (alive) {             alive = false.             requestQueue.close().             interrupt().         }         try {             join(1000).         } catch (InterruptedException ignored) {         }         // notify all pending write requests that the thread has been shut down         IOException ioex = new IOException("IO-Manager has been closed.").         while (!this.requestQueue.isEmpty()) {             ReadRequest request = this.requestQueue.poll().             if (request != null) {                 try {                     request.requestDone(ioex).                 } catch (Throwable t) {                     IOManagerAsync.LOG.error("The handler of the request complete callback threw an exception" + (t.getMessage() == null ? "." : ": " + t.getMessage()), t).                 }             }         }     } }
false;public;0;44;;// --------------------------------------------------------------------- // Main loop // --------------------------------------------------------------------- @Override public void run() {     while (alive) {         // get the next buffer. ignore interrupts that are not due to a shutdown.         ReadRequest request = null.         while (alive && request == null) {             try {                 request = this.requestQueue.take().             } catch (InterruptedException e) {                 if (!this.alive) {                     return.                 } else {                     IOManagerAsync.LOG.warn(Thread.currentThread() + " was interrupted without shutdown.").                 }             }         }         // remember any IO exception that occurs, so it can be reported to the writer         IOException ioex = null.         try {             // read buffer from the specified channel             request.read().         } catch (IOException e) {             ioex = e.         } catch (Throwable t) {             ioex = new IOException("The buffer could not be read: " + t.getMessage(), t).             IOManagerAsync.LOG.error("I/O reading thread encountered an error" + (t.getMessage() == null ? "." : ": " + t.getMessage()), t).         }         // invoke the processed buffer handler of the request issuing reader object         try {             request.requestDone(ioex).         } catch (Throwable t) {             IOManagerAsync.LOG.error("The handler of the request-complete-callback threw an exception" + (t.getMessage() == null ? "." : ": " + t.getMessage()), t).         }     } // end while alive }
true;protected;0;30;/**  * Shuts the thread down. This operation does not wait for all pending requests to be served, halts the thread  * immediately. All buffers of pending requests are handed back to their channel writers and an exception is  * reported to them, declaring their request queue as closed.  */ ;/**  * Shuts the thread down. This operation does not wait for all pending requests to be served, halts the thread  * immediately. All buffers of pending requests are handed back to their channel writers and an exception is  * reported to them, declaring their request queue as closed.  */ protected void shutdown() {     synchronized (this) {         if (alive) {             alive = false.             requestQueue.close().             interrupt().         }         try {             join(1000).         } catch (InterruptedException ignored) {         }         // notify all pending write requests that the thread has been shut down         IOException ioex = new IOException("IO-Manager has been closed.").         while (!this.requestQueue.isEmpty()) {             WriteRequest request = this.requestQueue.poll().             if (request != null) {                 try {                     request.requestDone(ioex).                 } catch (Throwable t) {                     IOManagerAsync.LOG.error("The handler of the request complete callback threw an exception" + (t.getMessage() == null ? "." : ": " + t.getMessage()), t).                 }             }         }     } }
false;public;0;45;;// --------------------------------------------------------------------- // Main loop // --------------------------------------------------------------------- @Override public void run() {     while (this.alive) {         WriteRequest request = null.         // get the next buffer. ignore interrupts that are not due to a shutdown.         while (alive && request == null) {             try {                 request = requestQueue.take().             } catch (InterruptedException e) {                 if (!this.alive) {                     return.                 } else {                     IOManagerAsync.LOG.warn(Thread.currentThread() + " was interrupted without shutdown.").                 }             }         }         // remember any IO exception that occurs, so it can be reported to the writer         IOException ioex = null.         try {             // write buffer to the specified channel             request.write().         } catch (IOException e) {             ioex = e.         } catch (Throwable t) {             ioex = new IOException("The buffer could not be written: " + t.getMessage(), t).             IOManagerAsync.LOG.error("I/O writing thread encountered an error" + (t.getMessage() == null ? "." : ": " + t.getMessage()), t).         }         // invoke the processed buffer handler of the request issuing writer object         try {             request.requestDone(ioex).         } catch (Throwable t) {             IOManagerAsync.LOG.error("The handler of the request-complete-callback threw an exception" + (t.getMessage() == null ? "." : ": " + t.getMessage()), t).         }     } // end while alive }
