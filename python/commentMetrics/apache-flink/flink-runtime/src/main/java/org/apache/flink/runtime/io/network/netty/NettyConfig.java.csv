commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;InetAddress getServerAddress() {     return serverAddress. }
false;;0;3;;int getServerPort() {     return serverPort. }
false;;0;3;;int getMemorySegmentSize() {     return memorySegmentSize. }
false;public;0;3;;public int getNumberOfSlots() {     return numberOfSlots. }
false;public;0;3;;// ------------------------------------------------------------------------ // Getters // ------------------------------------------------------------------------ public int getServerConnectBacklog() {     return config.getInteger(CONNECT_BACKLOG). }
false;public;0;5;;public int getNumberOfArenas() {     // default: number of slots     final int configValue = config.getInteger(NUM_ARENAS).     return configValue == -1 ? numberOfSlots : configValue. }
false;public;0;5;;public int getServerNumThreads() {     // default: number of task slots     final int configValue = config.getInteger(NUM_THREADS_SERVER).     return configValue == -1 ? numberOfSlots : configValue. }
false;public;0;5;;public int getClientNumThreads() {     // default: number of task slots     final int configValue = config.getInteger(NUM_THREADS_CLIENT).     return configValue == -1 ? numberOfSlots : configValue. }
false;public;0;3;;public int getClientConnectTimeoutSeconds() {     return config.getInteger(CLIENT_CONNECT_TIMEOUT_SECONDS). }
false;public;0;3;;public int getSendAndReceiveBufferSize() {     return config.getInteger(SEND_RECEIVE_BUFFER_SIZE). }
false;public;0;12;;public TransportType getTransportType() {     String transport = config.getString(TRANSPORT_TYPE).     switch(transport) {         case "nio":             return TransportType.NIO.         case "epoll":             return TransportType.EPOLL.         default:             return TransportType.AUTO.     } }
false;public;0;6;;@Nullable public SSLHandlerFactory createClientSSLEngineFactory() throws Exception {     return getSSLEnabled() ? SSLUtils.createInternalClientSSLEngineFactory(config) : null. }
false;public;0;6;;@Nullable public SSLHandlerFactory createServerSSLEngineFactory() throws Exception {     return getSSLEnabled() ? SSLUtils.createInternalServerSSLEngineFactory(config) : null. }
false;public;0;4;;public boolean getSSLEnabled() {     return config.getBoolean(TaskManagerOptions.DATA_SSL_ENABLED) && SSLUtils.isInternalSSLEnabled(config). }
false;public;0;3;;public boolean isCreditBasedEnabled() {     return config.getBoolean(TaskManagerOptions.NETWORK_CREDIT_MODEL). }
false;public;0;3;;public Configuration getConfig() {     return config. }
false;public;0;25;;@Override public String toString() {     String format = "NettyConfig [" + "server address: %s, " + "server port: %d, " + "ssl enabled: %s, " + "memory segment size (bytes): %d, " + "transport type: %s, " + "number of server threads: %d (%s), " + "number of client threads: %d (%s), " + "server connect backlog: %d (%s), " + "client connect timeout (sec): %d, " + "send/receive buffer size (bytes): %d (%s)]".     String def = "use Netty's default".     String man = "manual".     return String.format(format, serverAddress, serverPort, getSSLEnabled() ? "true" : "false", memorySegmentSize, getTransportType(), getServerNumThreads(), getServerNumThreads() == 0 ? def : man, getClientNumThreads(), getClientNumThreads() == 0 ? def : man, getServerConnectBacklog(), getServerConnectBacklog() == 0 ? def : man, getClientConnectTimeoutSeconds(), getSendAndReceiveBufferSize(), getSendAndReceiveBufferSize() == 0 ? def : man). }
