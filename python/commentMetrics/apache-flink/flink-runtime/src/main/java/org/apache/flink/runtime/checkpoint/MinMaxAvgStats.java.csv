commented;modifiers;parameterAmount;loc;comment;code
true;;1;14;/**  * Adds the value to the stats if it is >= 0.  *  * @param value Value to add for min/max/avg stats..  */ ;/**  * Adds the value to the stats if it is >= 0.  *  * @param value Value to add for min/max/avg stats..  */ void add(long value) {     if (value >= 0) {         if (count > 0) {             min = Math.min(min, value).             max = Math.max(max, value).         } else {             min = value.             max = value.         }         count++.         sum += value.     } }
true;;0;3;/**  * Returns a snapshot of the current state.  *  * @return A snapshot of the current state.  */ ;/**  * Returns a snapshot of the current state.  *  * @return A snapshot of the current state.  */ MinMaxAvgStats createSnapshot() {     return new MinMaxAvgStats(min, max, sum, count). }
true;public;0;3;/**  * Returns the minimum seen value.  *  * @return The current minimum value.  */ ;/**  * Returns the minimum seen value.  *  * @return The current minimum value.  */ public long getMinimum() {     return min. }
true;public;0;3;/**  * Returns the maximum seen value.  *  * @return The current maximum value.  */ ;/**  * Returns the maximum seen value.  *  * @return The current maximum value.  */ public long getMaximum() {     return max. }
true;public;0;3;/**  * Returns the sum of all seen values.  *  * @return Sum of all values.  */ ;/**  * Returns the sum of all seen values.  *  * @return Sum of all values.  */ public long getSum() {     return sum. }
true;public;0;3;/**  * Returns the count of all seen values.  *  * @return Count of all values.  */ ;/**  * Returns the count of all seen values.  *  * @return Count of all values.  */ public long getCount() {     return count. }
true;public;0;7;/**  * Calculates the average over all seen values.  *  * @return Average over all seen values.  */ ;/**  * Calculates the average over all seen values.  *  * @return Average over all seen values.  */ public long getAverage() {     if (count == 0) {         return 0.     } else {         return sum / count.     } }
