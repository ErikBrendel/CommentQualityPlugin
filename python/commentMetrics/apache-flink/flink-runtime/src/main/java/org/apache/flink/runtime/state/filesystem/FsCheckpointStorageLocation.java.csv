commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ------------------------------------------------------------------------ // Properties // ------------------------------------------------------------------------ public Path getCheckpointDirectory() {     return checkpointDirectory. }
false;public;0;3;;public Path getSharedStateDirectory() {     return sharedStateDirectory. }
false;public;0;3;;public Path getTaskOwnedStateDirectory() {     return taskOwnedStateDirectory. }
false;public;0;3;;public Path getMetadataFilePath() {     return metadataFilePath. }
false;public;0;4;;// ------------------------------------------------------------------------ // checkpoint metadata // ------------------------------------------------------------------------ @Override public CheckpointMetadataOutputStream createMetadataOutputStream() throws IOException {     return new FsCheckpointMetadataOutputStream(fileSystem, metadataFilePath, checkpointDirectory). }
false;public;0;6;;@Override public void disposeOnFailure() throws IOException {     // on a failure, no chunk in the checkpoint directory needs to be saved, so     // we can drop it as a whole     fileSystem.delete(checkpointDirectory, true). }
false;public;0;4;;@Override public CheckpointStorageLocationReference getLocationReference() {     return reference. }
false;public;0;12;;// ------------------------------------------------------------------------ // Utilities // ------------------------------------------------------------------------ @Override public String toString() {     return "FsCheckpointStorageLocation {" + "fileSystem=" + fileSystem + ", checkpointDirectory=" + checkpointDirectory + ", sharedStateDirectory=" + sharedStateDirectory + ", taskOwnedStateDirectory=" + taskOwnedStateDirectory + ", metadataFilePath=" + metadataFilePath + ", reference=" + reference + ", fileStateSizeThreshold=" + fileStateSizeThreshold + '}'. }
false;;0;4;;@VisibleForTesting FileSystem getFileSystem() {     return fileSystem. }
