commented;modifiers;parameterAmount;loc;comment;code
true;;3;4;/**  * @param previousParallelSubtaskStates List with one entry of state handles per parallel subtask of an operator, as they  *                                      have been checkpointed.  * @param oldParallelism               	The parallelism before we start redistribution.  * @param newParallelism                The parallelism that we consider for the state redistribution. Determines the size of the  *                                      returned list.  * @return List with one entry per parallel subtask. Each subtask receives now one collection of states that build  * of the new total state for this subtask.  */ ;/**  * @param previousParallelSubtaskStates List with one entry of state handles per parallel subtask of an operator, as they  *                                      have been checkpointed.  * @param oldParallelism               	The parallelism before we start redistribution.  * @param newParallelism                The parallelism that we consider for the state redistribution. Determines the size of the  *                                      returned list.  * @return List with one entry per parallel subtask. Each subtask receives now one collection of states that build  * of the new total state for this subtask.  */ List<List<OperatorStateHandle>> repartitionState(List<List<OperatorStateHandle>> previousParallelSubtaskStates, int oldParallelism, int newParallelism).
