commented;modifiers;parameterAmount;loc;comment;code
false;;1;1;;void setup(TaskContext<S, OT> context).
true;;0;1;/**  * Gets the number of inputs that the task has.  *  * @return The number of inputs.  */ ;/**  * Gets the number of inputs that the task has.  *  * @return The number of inputs.  */ int getNumberOfInputs().
true;;0;1;/**  * Gets the number of comparators required for this driver.  *  * @return The number of comparators required for this driver.  */ ;/**  * Gets the number of comparators required for this driver.  *  * @return The number of comparators required for this driver.  */ int getNumberOfDriverComparators().
true;;0;1;/**  * Gets the class of the stub type that is run by this task. For example, a <tt>MapTask</tt> should return  * <code>MapFunction.class</code>.  *  * @return The class of the stub type run by the task.  */ ;/**  * Gets the class of the stub type that is run by this task. For example, a <tt>MapTask</tt> should return  * <code>MapFunction.class</code>.  *  * @return The class of the stub type run by the task.  */ Class<S> getStubType().
true;;0;1;/**  * This method is called before the user code is opened. An exception thrown by this method  * signals failure of the task.  *  * @throws Exception Exceptions may be forwarded and signal task failure.  */ ;/**  * This method is called before the user code is opened. An exception thrown by this method  * signals failure of the task.  *  * @throws Exception Exceptions may be forwarded and signal task failure.  */ void prepare() throws Exception.
true;;0;1;/**  * The main operation method of the task. It should call the user code with the data subsets until  * the input is depleted.  *  * @throws Exception Any exception thrown by this method signals task failure. Because exceptions in the user  *                   code typically signal situations where this instance in unable to proceed, exceptions  *                   from the user code should be forwarded.  */ ;/**  * The main operation method of the task. It should call the user code with the data subsets until  * the input is depleted.  *  * @throws Exception Any exception thrown by this method signals task failure. Because exceptions in the user  *                   code typically signal situations where this instance in unable to proceed, exceptions  *                   from the user code should be forwarded.  */ void run() throws Exception.
true;;0;1;/**  * This method is invoked in any case (clean termination and exception) at the end of the tasks operation.  *  * @throws Exception Exceptions may be forwarded.  */ ;/**  * This method is invoked in any case (clean termination and exception) at the end of the tasks operation.  *  * @throws Exception Exceptions may be forwarded.  */ void cleanup() throws Exception.
true;;0;1;/**  * This method is invoked when the driver must aborted in mid processing. It is invoked asynchronously by a different thread.  *  * @throws Exception Exceptions may be forwarded.  */ ;/**  * This method is invoked when the driver must aborted in mid processing. It is invoked asynchronously by a different thread.  *  * @throws Exception Exceptions may be forwarded.  */ void cancel() throws Exception.
