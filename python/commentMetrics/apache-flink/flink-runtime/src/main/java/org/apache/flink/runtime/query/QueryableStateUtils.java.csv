commented;modifiers;parameterAmount;loc;comment;code
true;public,static;5;39;/**  * Initializes the {@link KvStateClientProxy client proxy} responsible for  * receiving requests from the external (to the cluster) client and forwarding them internally.  *  * @param address the address to bind to.  * @param ports the range of ports the proxy will attempt to listen to  *                 (see {@link org.apache.flink.configuration.QueryableStateOptions#PROXY_PORT_RANGE  *                 QueryableStateOptions.PROXY_PORT_RANGE}).  * @param eventLoopThreads the number of threads to be used to process incoming requests.  * @param queryThreads the number of threads to be used to send the actual state.  * @param stats statistics to be gathered about the incoming requests.  * @return the {@link KvStateClientProxy client proxy}.  */ ;/**  * Initializes the {@link KvStateClientProxy client proxy} responsible for  * receiving requests from the external (to the cluster) client and forwarding them internally.  *  * @param address the address to bind to.  * @param ports the range of ports the proxy will attempt to listen to  *                 (see {@link org.apache.flink.configuration.QueryableStateOptions#PROXY_PORT_RANGE  *                 QueryableStateOptions.PROXY_PORT_RANGE}).  * @param eventLoopThreads the number of threads to be used to process incoming requests.  * @param queryThreads the number of threads to be used to send the actual state.  * @param stats statistics to be gathered about the incoming requests.  * @return the {@link KvStateClientProxy client proxy}.  */ public static KvStateClientProxy createKvStateClientProxy(final InetAddress address, final Iterator<Integer> ports, final int eventLoopThreads, final int queryThreads, final KvStateRequestStats stats) {     Preconditions.checkNotNull(address, "address").     Preconditions.checkNotNull(stats, "stats").     Preconditions.checkArgument(eventLoopThreads >= 1).     Preconditions.checkArgument(queryThreads >= 1).     try {         String classname = "org.apache.flink.queryablestate.client.proxy.KvStateClientProxyImpl".         Class<? extends KvStateClientProxy> clazz = Class.forName(classname).asSubclass(KvStateClientProxy.class).         Constructor<? extends KvStateClientProxy> constructor = clazz.getConstructor(InetAddress.class, Iterator.class, Integer.class, Integer.class, KvStateRequestStats.class).         return constructor.newInstance(address, ports, eventLoopThreads, queryThreads, stats).     } catch (ClassNotFoundException e) {         final String msg = "Could not load Queryable State Client Proxy. " + ERROR_MESSAGE_ON_LOAD_FAILURE.         if (LOG.isDebugEnabled()) {             LOG.debug(msg + " Cause: " + e.getMessage()).         } else {             LOG.info(msg).         }         return null.     } catch (InvocationTargetException e) {         LOG.error("Queryable State Client Proxy could not be created: ", e.getTargetException()).         return null.     } catch (Throwable t) {         LOG.error("Failed to instantiate the Queryable State Client Proxy.", t).         return null.     } }
true;public,static;6;42;/**  * Initializes the {@link KvStateServer server} responsible for sending the  * requested internal state to the {@link KvStateClientProxy client proxy}.  *  * @param address the address to bind to.  * @param ports the range of ports the state server will attempt to listen to  *                 (see {@link org.apache.flink.configuration.QueryableStateOptions#SERVER_PORT_RANGE  *                 QueryableStateOptions.SERVER_PORT_RANGE}).  * @param eventLoopThreads the number of threads to be used to process incoming requests.  * @param queryThreads the number of threads to be used to send the actual state.  * @param kvStateRegistry the registry with the queryable state.  * @param stats statistics to be gathered about the incoming requests.  * @return the {@link KvStateServer state server}.  */ ;/**  * Initializes the {@link KvStateServer server} responsible for sending the  * requested internal state to the {@link KvStateClientProxy client proxy}.  *  * @param address the address to bind to.  * @param ports the range of ports the state server will attempt to listen to  *                 (see {@link org.apache.flink.configuration.QueryableStateOptions#SERVER_PORT_RANGE  *                 QueryableStateOptions.SERVER_PORT_RANGE}).  * @param eventLoopThreads the number of threads to be used to process incoming requests.  * @param queryThreads the number of threads to be used to send the actual state.  * @param kvStateRegistry the registry with the queryable state.  * @param stats statistics to be gathered about the incoming requests.  * @return the {@link KvStateServer state server}.  */ public static KvStateServer createKvStateServer(final InetAddress address, final Iterator<Integer> ports, final int eventLoopThreads, final int queryThreads, final KvStateRegistry kvStateRegistry, final KvStateRequestStats stats) {     Preconditions.checkNotNull(address, "address").     Preconditions.checkNotNull(kvStateRegistry, "registry").     Preconditions.checkNotNull(stats, "stats").     Preconditions.checkArgument(eventLoopThreads >= 1).     Preconditions.checkArgument(queryThreads >= 1).     try {         String classname = "org.apache.flink.queryablestate.server.KvStateServerImpl".         Class<? extends KvStateServer> clazz = Class.forName(classname).asSubclass(KvStateServer.class).         Constructor<? extends KvStateServer> constructor = clazz.getConstructor(InetAddress.class, Iterator.class, Integer.class, Integer.class, KvStateRegistry.class, KvStateRequestStats.class).         return constructor.newInstance(address, ports, eventLoopThreads, queryThreads, kvStateRegistry, stats).     } catch (ClassNotFoundException e) {         final String msg = "Could not load Queryable State Server. " + ERROR_MESSAGE_ON_LOAD_FAILURE.         if (LOG.isDebugEnabled()) {             LOG.debug(msg + " Cause: " + e.getMessage()).         } else {             LOG.info(msg).         }         return null.     } catch (InvocationTargetException e) {         LOG.error("Queryable State Server could not be created: ", e.getTargetException()).         return null.     } catch (Throwable t) {         LOG.error("Failed to instantiate the Queryable State Server.", t).         return null.     } }
