commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;15;;@Override protected TaskCheckpointStatisticsWithSubtaskDetails handleCheckpointRequest(HandlerRequest<EmptyRequestBody, TaskCheckpointMessageParameters> request, AbstractCheckpointStats checkpointStats) throws RestHandlerException {     final JobVertexID jobVertexId = request.getPathParameter(JobVertexIdPathParameter.class).     final TaskStateStats taskStatistics = checkpointStats.getTaskStateStats(jobVertexId).     if (taskStatistics == null) {         throw new NotFoundException("There is no checkpoint statistics for task " + jobVertexId + '.').     }     return createCheckpointDetails(checkpointStats, taskStatistics). }
false;public;1;20;;@Override public Collection<ArchivedJson> archiveJsonWithPath(AccessExecutionGraph graph) throws IOException {     CheckpointStatsSnapshot stats = graph.getCheckpointStatsSnapshot().     if (stats == null) {         return Collections.emptyList().     }     CheckpointStatsHistory history = stats.getHistory().     List<ArchivedJson> archive = new ArrayList<>(history.getCheckpoints().size()).     for (AbstractCheckpointStats checkpoint : history.getCheckpoints()) {         for (TaskStateStats subtaskStats : checkpoint.getAllTaskStateStats()) {             ResponseBody json = createCheckpointDetails(checkpoint, subtaskStats).             String path = getMessageHeaders().getTargetRestEndpointURL().replace(':' + JobVertexIdPathParameter.KEY, graph.getJobID().toString()).replace(':' + CheckpointIdPathParameter.KEY, String.valueOf(checkpoint.getCheckpointId())).replace(':' + JobVertexIdPathParameter.KEY, subtaskStats.getJobVertexId().toString()).             archive.add(new ArchivedJson(path, json)).         }     }     return archive. }
false;private,static;2;21;;private static TaskCheckpointStatisticsWithSubtaskDetails createCheckpointDetails(AbstractCheckpointStats checkpointStats, TaskStateStats taskStatistics) {     final TaskCheckpointStatisticsWithSubtaskDetails.Summary summary = createSummary(taskStatistics.getSummaryStats(), checkpointStats.getTriggerTimestamp()).     final List<SubtaskCheckpointStatistics> subtaskCheckpointStatistics = createSubtaskCheckpointStatistics(taskStatistics.getSubtaskStats(), checkpointStats.getTriggerTimestamp()).     return new TaskCheckpointStatisticsWithSubtaskDetails(checkpointStats.getCheckpointId(), checkpointStats.getStatus(), taskStatistics.getLatestAckTimestamp(), taskStatistics.getStateSize(), taskStatistics.getEndToEndDuration(checkpointStats.getTriggerTimestamp()), taskStatistics.getAlignmentBuffered(), taskStatistics.getNumberOfSubtasks(), taskStatistics.getNumberOfAcknowledgedSubtasks(), summary, subtaskCheckpointStatistics). }
false;private,static;2;26;;private static TaskCheckpointStatisticsWithSubtaskDetails.Summary createSummary(TaskStateStats.TaskStateStatsSummary taskStatisticsSummary, long triggerTimestamp) {     final MinMaxAvgStats stateSizeStats = taskStatisticsSummary.getStateSizeStats().     final MinMaxAvgStats ackTSStats = taskStatisticsSummary.getAckTimestampStats().     final MinMaxAvgStats syncDurationStats = taskStatisticsSummary.getSyncCheckpointDurationStats().     final MinMaxAvgStats asyncDurationStats = taskStatisticsSummary.getAsyncCheckpointDurationStats().     final TaskCheckpointStatisticsWithSubtaskDetails.CheckpointDuration checkpointDuration = new TaskCheckpointStatisticsWithSubtaskDetails.CheckpointDuration(new MinMaxAvgStatistics(syncDurationStats.getMinimum(), syncDurationStats.getMaximum(), syncDurationStats.getAverage()), new MinMaxAvgStatistics(asyncDurationStats.getMinimum(), asyncDurationStats.getMaximum(), asyncDurationStats.getAverage())).     final MinMaxAvgStats alignmentBufferedStats = taskStatisticsSummary.getAlignmentBufferedStats().     final MinMaxAvgStats alignmentDurationStats = taskStatisticsSummary.getAlignmentDurationStats().     final TaskCheckpointStatisticsWithSubtaskDetails.CheckpointAlignment checkpointAlignment = new TaskCheckpointStatisticsWithSubtaskDetails.CheckpointAlignment(new MinMaxAvgStatistics(alignmentBufferedStats.getMinimum(), alignmentBufferedStats.getMaximum(), alignmentBufferedStats.getAverage()), new MinMaxAvgStatistics(alignmentDurationStats.getMinimum(), alignmentDurationStats.getMaximum(), alignmentDurationStats.getAverage())).     return new TaskCheckpointStatisticsWithSubtaskDetails.Summary(new MinMaxAvgStatistics(stateSizeStats.getMinimum(), stateSizeStats.getMaximum(), stateSizeStats.getAverage()), new MinMaxAvgStatistics(Math.max(0L, ackTSStats.getMinimum() - triggerTimestamp), Math.max(0L, ackTSStats.getMaximum() - triggerTimestamp), Math.max(0L, ackTSStats.getAverage() - triggerTimestamp)), checkpointDuration, checkpointAlignment). }
false;private,static;2;26;;private static List<SubtaskCheckpointStatistics> createSubtaskCheckpointStatistics(SubtaskStateStats[] subtaskStateStats, long triggerTimestamp) {     final List<SubtaskCheckpointStatistics> result = new ArrayList<>(subtaskStateStats.length).     for (int i = 0. i < subtaskStateStats.length. i++) {         final SubtaskStateStats subtask = subtaskStateStats[i].         if (subtask == null) {             result.add(new SubtaskCheckpointStatistics.PendingSubtaskCheckpointStatistics(i)).         } else {             result.add(new SubtaskCheckpointStatistics.CompletedSubtaskCheckpointStatistics(i, subtask.getAckTimestamp(), subtask.getEndToEndDuration(triggerTimestamp), subtask.getStateSize(), new SubtaskCheckpointStatistics.CompletedSubtaskCheckpointStatistics.CheckpointDuration(subtask.getSyncCheckpointDuration(), subtask.getAsyncCheckpointDuration()), new SubtaskCheckpointStatistics.CompletedSubtaskCheckpointStatistics.CheckpointAlignment(subtask.getAlignmentBuffered(), subtask.getAlignmentDuration()))).         }     }     return result. }
